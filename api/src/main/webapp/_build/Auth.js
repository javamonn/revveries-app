!function e(t,n,o){function r(s,a){if(!n[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var p=n[s]={exports:{}};t[s][0].call(p.exports,function(e){var n=t[s][1][e];return r(n?n:e)},p,p.exports,e,t,n,o)}return n[s].exports}for(var i="function"==typeof require&&require,s=0;s<o.length;s++)r(o[s]);return r}({1:[function(e,t,n){function o(){p=!1,a.length?c=a.concat(c):u=-1,c.length&&r()}function r(){if(!p){var e=setTimeout(o);p=!0;for(var t=c.length;t;){for(a=c,c=[];++u<t;)a[u].run();u=-1,t=c.length}a=null,p=!1,clearTimeout(e)}}function i(e,t){this.fun=e,this.array=t}function s(){}var a,l=t.exports={},c=[],p=!1,u=-1;l.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new i(e,t)),1!==c.length||p||setTimeout(r,0)},i.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=s,l.addListener=s,l.once=s,l.off=s,l.removeListener=s,l.removeAllListeners=s,l.emit=s,l.binding=function(e){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(e){throw new Error("process.chdir is not supported")},l.umask=function(){return 0}},{}],2:[function(e,t,n){(function(n){"use strict";var o=e("react"),r=e("./mixins/style-propable"),i=e("./styles/typography"),s=e("./icon-button"),a=e("./svg-icons/navigation/menu"),l=e("./paper"),c=o.createClass({displayName:"AppBar",mixins:[r],contextTypes:{muiTheme:o.PropTypes.object},propTypes:{onLeftIconButtonTouchTap:o.PropTypes.func,onRightIconButtonTouchTap:o.PropTypes.func,showMenuIconButton:o.PropTypes.bool,style:o.PropTypes.object,iconClassNameLeft:o.PropTypes.string,iconClassNameRight:o.PropTypes.string,iconElementLeft:o.PropTypes.element,iconElementRight:o.PropTypes.element,iconStyleRight:o.PropTypes.object,title:o.PropTypes.node,zDepth:o.PropTypes.number},getDefaultProps:function(){return{showMenuIconButton:!0,title:"",zDepth:1}},componentDidMount:function(){"production"!==n.env.NODE_ENV&&(this.props.iconElementLeft&&this.props.iconClassNameLeft&&console.warn("Properties iconClassNameLeft and iconElementLeft cannot be simultaneously defined. Please use one or the other."),this.props.iconElementRight&&this.props.iconClassNameRight&&console.warn("Properties iconClassNameRight and iconElementRight cannot be simultaneously defined. Please use one or the other."))},getStyles:function(){var e=this.context.muiTheme.spacing,t=this.context.muiTheme.component.appBar,n=this.context.muiTheme.component.button.iconButtonSize,o=36,r={root:{zIndex:5,width:"100%",display:"-webkit-box; display: -webkit-flex; display: flex",minHeight:t.height,backgroundColor:t.color,paddingLeft:e.desktopGutter,paddingRight:e.desktopGutter},title:{whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",margin:0,paddingTop:0,letterSpacing:0,fontSize:24,fontWeight:i.fontWeightNormal,color:t.textColor,lineHeight:t.height+"px"},mainElement:{boxFlex:1,flex:"1"},iconButton:{style:{marginTop:(t.height-n)/2,marginRight:8,marginLeft:-16},iconStyle:{fill:t.textColor,color:t.textColor}},flatButton:{color:t.textColor,backgroundColor:"transparent",marginTop:(n-o)/2+2}};return r},render:function(){var e=this.props,t=void 0,n=void 0,r=this.getStyles(),i=e.title,c=this.mergeAndPrefix(r.iconButton.style,{marginRight:-16,marginLeft:"auto"},e.iconStyleRight),p=void 0;if(i&&(p="string"==typeof i||i instanceof String?o.createElement("h1",{style:this.mergeAndPrefix(r.title,r.mainElement)},i):o.createElement("div",{style:this.mergeAndPrefix(r.mainElement)},i)),e.showMenuIconButton){var u=e.iconElementLeft;if(u){switch(u.type.displayName){case"IconButton":u=o.cloneElement(u,{iconStyle:this.mergeAndPrefix(r.iconButton.iconStyle)})}t=o.createElement("div",{style:r.iconButton.style},u)}else{var h=e.iconClassNameLeft?"":o.createElement(a,{style:this.mergeAndPrefix(r.iconButton.iconStyle)});t=o.createElement(s,{style:this.mergeAndPrefix(r.iconButton.style),iconStyle:this.mergeAndPrefix(r.iconButton.iconStyle),iconClassName:e.iconClassNameLeft,onTouchTap:this._onLeftIconButtonTouchTap},h)}}if(e.iconElementRight){var d=e.iconElementRight;switch(d.type.displayName){case"IconButton":d=o.cloneElement(d,{iconStyle:this.mergeAndPrefix(r.iconButton.iconStyle)});break;case"FlatButton":d=o.cloneElement(d,{style:this.mergeStyles(r.flatButton,d.props.style)})}n=o.createElement("div",{style:c},d)}else e.iconClassNameRight&&(n=o.createElement(s,{style:c,iconStyle:this.mergeAndPrefix(r.iconButton.iconStyle),iconClassName:e.iconClassNameRight,onTouchTap:this._onRightIconButtonTouchTap}));return o.createElement(l,{rounded:!1,className:e.className,style:this.mergeAndPrefix(r.root,e.style),zDepth:e.zDepth},t,p,n,e.children)},_onLeftIconButtonTouchTap:function(e){this.props.onLeftIconButtonTouchTap&&this.props.onLeftIconButtonTouchTap(e)},_onRightIconButtonTouchTap:function(e){this.props.onRightIconButtonTouchTap&&this.props.onRightIconButtonTouchTap(e)}});t.exports=c}).call(this,e("_process"))},{"./icon-button":35,"./mixins/style-propable":54,"./paper":58,"./styles/typography":78,"./svg-icons/navigation/menu":88,_process:1,react:319}],3:[function(e,t,n){"use strict";var o=e("react"),r=e("./mixins/style-propable"),i=o.createClass({displayName:"AppCanvas",mixins:[r],contextTypes:{muiTheme:o.PropTypes.object},render:function(){var e=this,t={height:"100%",backgroundColor:this.context.muiTheme.palette.canvasColor,WebkitFontSmoothing:"antialiased"},n=o.Children.map(this.props.children,function(t){if(!t)return null;switch(t.type.displayName){case"AppBar":return o.cloneElement(t,{style:e.mergeStyles({position:"fixed"},t.props.style)});default:return t}},this);return o.createElement("div",{style:t},n)}});t.exports=i},{"./mixins/style-propable":54,react:319}],4:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=e("./mixins/style-propable"),a=e("./styles/colors"),l=i.createClass({displayName:"Avatar",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{backgroundColor:i.PropTypes.string,color:i.PropTypes.string,icon:i.PropTypes.element,size:i.PropTypes.number,src:i.PropTypes.string,style:i.PropTypes.object},getDefaultProps:function(){return{backgroundColor:a.grey400,color:a.white,size:40}},render:function(){var e=this.props,t=e.backgroundColor,n=e.color,s=e.icon,a=e.size,l=e.src,c=e.style,p=o(e,["backgroundColor","color","icon","size","src","style"]),u={root:{height:a,width:a,userSelect:"none",borderRadius:"50%",display:"inline-block"}};if(l){var h=this.context.muiTheme.component.avatar.borderColor;return h&&(u.root=this.mergeStyles(u.root,{height:a-2,width:a-2,border:"solid 1px "+h})),i.createElement("img",r({},p,{src:l,style:this.mergeAndPrefix(u.root,c)}))}u.root=this.mergeStyles(u.root,{backgroundColor:t,textAlign:"center",lineHeight:a+"px",fontSize:a/2+4,color:n});var d={margin:8},f=s?i.cloneElement(s,{color:n,style:this.mergeStyles(d,s.props.style)}):null;return i.createElement("div",r({},p,{style:this.mergeAndPrefix(u.root,c)}),f,this.props.children)}});t.exports=l},{"./mixins/style-propable":54,"./styles/colors":71,"react/addons":147}],5:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=e("react"),i=e("./mixins/style-propable"),s=e("./styles/auto-prefix"),a=r.createClass({displayName:"BeforeAfterWrapper",mixins:[i],propTypes:{beforeStyle:r.PropTypes.object,afterStyle:r.PropTypes.object,beforeElementType:r.PropTypes.string,afterElementType:r.PropTypes.string,elementType:r.PropTypes.string},getDefaultProps:function(){return{beforeElementType:"div",afterElementType:"div",elementType:"div"}},render:function(){var e=this.props,t=e.beforeStyle,n=e.afterStyle,i=(e.beforeElementType,e.afterElementType,e.elementType,o(e,["beforeStyle","afterStyle","beforeElementType","afterElementType","elementType"])),a=void 0,l=void 0;t=s.all({boxSizing:"border-box"}),n=s.all({boxSizing:"border-box"}),this.props.beforeStyle&&(a=r.createElement(this.props.beforeElementType,{style:this.mergeAndPrefix(t,this.props.beforeStyle),key:"::before"})),this.props.afterStyle&&(l=r.createElement(this.props.afterElementType,{style:this.mergeAndPrefix(n,this.props.afterStyle),key:"::after"}));var c=[a,this.props.children,l],p=i;return p.style=this.props.style,r.createElement(this.props.elementType,p,c)}});t.exports=a},{"./mixins/style-propable":54,"./styles/auto-prefix":70,react:319}],6:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../utils/styles"),s=o.createClass({displayName:"FlatButtonLabel",mixins:[r],contextTypes:{muiTheme:o.PropTypes.object},propTypes:{label:o.PropTypes.node,style:o.PropTypes.object},getContextProps:function(){var e=this.context.muiTheme;return{spacingDesktopGutterLess:e.spacing.desktopGutterLess}},render:function(){var e=this.props,t=e.label,n=e.style,r=this.getContextProps(),s=i.mergeAndPrefix({position:"relative",padding:"0 "+r.spacingDesktopGutterLess+"px"},n);return o.createElement("span",{style:s},t)}});t.exports=s},{"../utils/styles":137,"react/addons":147}],7:[function(e,t,n){"use strict";var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=e("react"),i=r.createClass({displayName:"CardActions",getStyles:function(){return{root:{padding:8,position:"relative"}}},propTypes:{expandable:r.PropTypes.bool,showExpandableButton:r.PropTypes.bool},render:function(){var e=this.getStyles(),t=r.Children.map(this.props.children,function(e){return r.cloneElement(e,{style:{marginRight:8}})});return r.createElement("div",o({},this.props,{style:e.root}),t)}});t.exports=i},{react:319}],8:[function(e,t,n){"use strict";var o=e("react"),r=e("../svg-icons/hardware/keyboard-arrow-up"),i=e("../svg-icons/hardware/keyboard-arrow-down"),s=e("../icon-button"),a=o.createClass({displayName:"CardExpandable",getStyles:function(){return{root:{right:4,top:0,bottom:0,margin:"auto",position:"absolute"}}},propTypes:{onExpanding:o.PropTypes.func.isRequired,expanded:o.PropTypes.bool},_onExpanding:function(){this.props.onExpanding(this.props.expanded===!0?!1:!0)},render:function(){var e=this.getStyles(),t=void 0;t=this.props.expanded===!0?o.createElement(r,null):o.createElement(i,null);var n=o.createElement(s,{style:e.root,onClick:this._onExpanding},t);return n}});t.exports=a},{"../icon-button":35,"../svg-icons/hardware/keyboard-arrow-down":80,"../svg-icons/hardware/keyboard-arrow-up":81,react:319}],9:[function(e,t,n){"use strict";var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=e("react"),i=e("../styles"),s=e("../avatar"),a=e("../mixins/style-propable"),l=r.createClass({displayName:"CardHeader",mixins:[a],propTypes:{title:r.PropTypes.string,titleColor:r.PropTypes.string,titleStyle:r.PropTypes.object,subtitle:r.PropTypes.string,subtitleColor:r.PropTypes.string,subtitleStyle:r.PropTypes.object,textStyle:r.PropTypes.object,expandable:r.PropTypes.bool,showExpandableButton:r.PropTypes.bool},getDefaultProps:function(){return{titleColor:i.Colors.darkBlack,subtitleColor:i.Colors.lightBlack}},getStyles:function(){return{root:{height:72,padding:16,fontWeight:i.Typography.fontWeightMedium,boxSizing:"border-box",position:"relative"},text:{display:"inline-block",verticalAlign:"top"},avatar:{marginRight:16},title:{color:this.props.titleColor,display:"block",fontSize:15},subtitle:{color:this.props.subtitleColor,display:"block",fontSize:14}}},render:function(){var e=this.getStyles(),t=this.mergeAndPrefix(e.root,this.props.style),n=this.mergeAndPrefix(e.text,this.props.textStyle),i=this.mergeAndPrefix(e.title,this.props.titleStyle),a=this.mergeAndPrefix(e.subtitle,this.props.subtitleStyle),l=this.props.avatar;if(r.isValidElement(this.props.avatar)){var c=this.mergeStyles(e.avatar,l.props.style);l=r.cloneElement(l,{style:c})}else l=r.createElement(s,{src:this.props.avatar,style:e.avatar});return r.createElement("div",o({},this.props,{style:t}),l,r.createElement("div",{style:n},r.createElement("span",{style:i},this.props.title),r.createElement("span",{style:a},this.props.subtitle)),this.props.children)}});t.exports=l},{"../avatar":4,"../mixins/style-propable":54,"../styles":72,react:319}],10:[function(e,t,n){"use strict";var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=e("react"),i=e("../styles"),s=e("../mixins/style-propable"),a=r.createClass({displayName:"CardMedia",mixins:[s],propTypes:{overlay:r.PropTypes.node,style:r.PropTypes.object,overlayStyle:r.PropTypes.object,overlayContainerStyle:r.PropTypes.object,overlayContentStyle:r.PropTypes.object,mediaStyle:r.PropTypes.object,expandable:r.PropTypes.bool},getStyles:function(){return{root:{position:"relative"},overlayContainer:{position:"absolute",top:0,bottom:0,right:0,left:0},overlay:{height:"100%",position:"relative"},overlayContent:{position:"absolute",bottom:0,right:0,left:0,paddingTop:8,background:i.Colors.lightBlack},media:{},mediaChild:{verticalAlign:"top",maxWidth:"100%",minWidth:"100%"}}},render:function(){var e=this,t=this.getStyles(),n=this.mergeAndPrefix(t.root,this.props.style),s=this.mergeAndPrefix(t.media,this.props.mediaStyle),a=this.mergeAndPrefix(t.overlayContainer,this.props.overlayContainerStyle),l=this.mergeAndPrefix(t.overlayContent,this.props.overlayContentStyle),c=this.mergeAndPrefix(t.overlay,this.props.overlayStyle),p=r.Children.map(this.props.children,function(n){return r.cloneElement(n,{style:e.mergeAndPrefix(t.mediaChild,n.props.style)})}),u=r.Children.map(this.props.overlay,function(e){return"CardHeader"===e.type.displayName||"CardTitle"===e.type.displayName?r.cloneElement(e,{titleColor:i.Colors.darkWhite,subtitleColor:i.Colors.lightWhite}):"CardText"===e.type.displayName?r.cloneElement(e,{color:i.Colors.darkWhite}):e});return r.createElement("div",o({},this.props,{style:n}),r.createElement("div",{style:s},p),this.props.overlay?r.createElement("div",{style:a},r.createElement("div",{style:c},r.createElement("div",{style:l},u))):"")}});t.exports=a},{"../mixins/style-propable":54,"../styles":72,react:319}],11:[function(e,t,n){"use strict";var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=e("react"),i=e("../styles"),s=e("../mixins/style-propable"),a=r.createClass({displayName:"CardText",mixins:[s],propTypes:{color:r.PropTypes.string,style:r.PropTypes.object,expandable:r.PropTypes.bool},getDefaultProps:function(){return{color:i.Colors.ck}},getStyles:function(){return{root:{padding:16,fontSize:"14px",color:this.props.color}}},render:function(){var e=this.getStyles(),t=this.mergeAndPrefix(e.root,this.props.style);return r.createElement("div",o({},this.props,{style:t}),this.props.children)}});t.exports=a},{"../mixins/style-propable":54,"../styles":72,react:319}],12:[function(e,t,n){"use strict";var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=e("react"),i=e("../styles"),s=e("../mixins/style-propable"),a=r.createClass({displayName:"CardTitle",mixins:[s],propTypes:{title:r.PropTypes.string,titleColor:r.PropTypes.string,titleStyle:r.PropTypes.object,subtitle:r.PropTypes.string,subtitleColor:r.PropTypes.string,subtitleStyle:r.PropTypes.object,expandable:r.PropTypes.bool,showExpandableButton:r.PropTypes.bool},getDefaultProps:function(){return{titleColor:i.Colors.darkBlack,subtitleColor:i.Colors.lightBlack}},getStyles:function(){return{root:{padding:16,position:"relative"},title:{fontSize:24,color:this.props.titleColor,display:"block",lineHeight:"36px"},subtitle:{fontSize:14,color:this.props.subtitleColor,display:"block"}}},render:function(){var e=this.getStyles(),t=this.mergeAndPrefix(e.root,this.props.style),n=this.mergeAndPrefix(e.title,this.props.titleStyle),i=this.mergeAndPrefix(e.subtitle,this.props.subtitleStyle);return r.createElement("div",o({},this.props,{style:t}),r.createElement("span",{style:n},this.props.title),r.createElement("span",{style:i},this.props.subtitle),this.props.children)}});t.exports=a},{"../mixins/style-propable":54,"../styles":72,react:319}],13:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../paper"),a=e("../mixins/style-propable"),l=e("./card-expandable"),c=i.createClass({displayName:"Card",mixins:[a],getInitialState:function(){return{expanded:this.props.initiallyExpanded?!0:!1}},propTypes:{style:i.PropTypes.object,expandable:i.PropTypes.bool,initiallyExpanded:i.PropTypes.bool,onExpandChange:i.PropTypes.func},_onExpandable:function(e){this.setState({expanded:e}),this.props.onExpandChange&&this.props.onExpandChange(e)},render:function(){var e=this,t=void 0,n=i.Children.map(this.props.children,function(n){if(!n)return null;if(e.state.expanded!==!1||n.props.expandable!==!0)return t=n.props.showExpandableButton===!0?i.cloneElement(n,{},n.props.children,i.createElement(l,{expanded:e.state.expanded,onExpanding:e._onExpandable})):n},this),a=t&&("CardText"===t.type.displayName||"CardTitle"===t.type.displayName),c=this.props,p=c.style,u=o(c,["style"]),h=this.mergeAndPrefix({overflow:"hidden",zIndex:1},p);return i.createElement(s,r({},u,{style:h}),i.createElement("div",{style:{paddingBottom:a?8:0}},n))}});t.exports=c},{"../mixins/style-propable":54,"../paper":58,"./card-expandable":8,react:319}],14:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./enhanced-switch"),a=e("./mixins/style-propable"),l=e("./styles/transitions"),c=e("./svg-icons/toggle/check-box-outline-blank"),p=e("./svg-icons/toggle/check-box"),u=i.createClass({displayName:"Checkbox",mixins:[a],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{checked:i.PropTypes.bool,checkedIcon:i.PropTypes.element,defaultChecked:i.PropTypes.bool,iconStyle:i.PropTypes.object,labelStyle:i.PropTypes.object,onCheck:i.PropTypes.func,unCheckedIcon:i.PropTypes.element},getInitialState:function(){return{switched:this.props.checked||this.props.defaultChecked||this.props.valueLink&&this.props.valueLink.value||!1}},getTheme:function(){return this.context.muiTheme.component.checkbox},getStyles:function(){var e=24,t={icon:{height:e,width:e},check:{position:"absolute",opacity:0,transform:"scale(0)",transitionOrigin:"50% 50%",transition:l.easeOut("450ms","opacity","0ms")+", "+l.easeOut("0ms","transform","450ms"),fill:this.getTheme().checkedColor},box:{position:"absolute",opacity:1,fill:this.getTheme().boxColor,transition:l.easeOut("2s",null,"200ms")},checkWhenSwitched:{opacity:1,transform:"scale(1)",transition:l.easeOut("0ms","opacity","0ms")+", "+l.easeOut("800ms","transform","0ms")},boxWhenSwitched:{transition:l.easeOut("100ms",null,"0ms"),fill:this.getTheme().checkedColor},checkWhenDisabled:{fill:this.getTheme().disabledColor},boxWhenDisabled:{fill:this.getTheme().disabledColor},label:{color:this.props.disabled?this.getTheme().labelDisabledColor:this.getTheme().labelColor}};return t},render:function(){var e=this.props,t=e.iconStyle,n=(e.onCheck,e.checkedIcon),a=e.unCheckedIcon,l=o(e,["iconStyle","onCheck","checkedIcon","unCheckedIcon"]),u=this.getStyles(),h=this.mergeAndPrefix(u.box,this.state.switched&&u.boxWhenSwitched,t,this.props.disabled&&u.boxWhenDisabled),d=this.mergeAndPrefix(u.check,this.state.switched&&u.checkWhenSwitched,t,this.props.disabled&&u.checkWhenDisabled),f=n?i.cloneElement(n,{style:this.mergeAndPrefix(d,n.props.style)}):i.createElement(p,{style:d}),m=a?i.cloneElement(a,{style:this.mergeAndPrefix(h,a.props.style)}):i.createElement(c,{style:h}),y=i.createElement("div",null,m,f),g=this.state.switched?d.fill:h.fill,v=this.mergeAndPrefix(u.icon,t),b=this.mergeAndPrefix(u.label,this.props.labelStyle),T={ref:"enhancedSwitch",inputType:"checkbox",switched:this.state.switched,switchElement:y,rippleColor:g,iconStyle:v,onSwitch:this._handleCheck,labelStyle:b,onParentShouldUpdate:this._handleStateChange,defaultSwitched:this.props.defaultChecked,labelPosition:this.props.labelPosition?this.props.labelPosition:"right"};return i.createElement(s,r({},l,T))},isChecked:function(){return this.refs.enhancedSwitch.isSwitched()},setChecked:function(e){this.refs.enhancedSwitch.setSwitched(e)},_handleCheck:function(e,t){this.props.onCheck&&this.props.onCheck(e,t)},_handleStateChange:function(e){this.setState({switched:e})}});t.exports=u},{"./enhanced-switch":30,"./mixins/style-propable":54,"./styles/transitions":77,"./svg-icons/toggle/check-box":90,"./svg-icons/toggle/check-box-outline-blank":89,react:319}],15:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./styles/auto-prefix"),l=e("./styles/transitions"),c=i.createClass({displayName:"CircularProgress",mixins:[s],propTypes:{mode:i.PropTypes.oneOf(["determinate","indeterminate"]),value:i.PropTypes.number,min:i.PropTypes.number,max:i.PropTypes.number,size:i.PropTypes.number,color:i.PropTypes.string,innerStyle:i.PropTypes.object},contextTypes:{muiTheme:i.PropTypes.object},_getRelativeValue:function(){var e=this.props.value,t=this.props.min,n=this.props.max,o=Math.min(Math.max(t,e),n),r=n-t,i=Math.round(o/r*1e4)/1e4;return 100*i},componentDidMount:function(){var e=i.findDOMNode(this.refs.wrapper),t=i.findDOMNode(this.refs.path);this._scalePath(t),this._rotateWrapper(e)},_scalePath:function(e,t){t=t||0,t%=3,setTimeout(this._scalePath.bind(this,e,t+1),t?750:250),this.isMounted()&&"indeterminate"===this.props.mode&&(0===t?(e.style.strokeDasharray="1, 200",e.style.strokeDashoffset=0,e.style.transitionDuration="0ms"):1===t?(e.style.strokeDasharray="89, 200",e.style.strokeDashoffset=-35,e.style.transitionDuration="750ms"):(e.style.strokeDasharray="89,200",e.style.strokeDashoffset=-124,e.style.transitionDuration="850ms"))},_rotateWrapper:function(e){setTimeout(this._rotateWrapper.bind(this,e),10050),this.isMounted()&&"indeterminate"===this.props.mode&&(a.set(e.style,"transform",null),a.set(e.style,"transform","rotate(0deg)"),e.style.transitionDuration="0ms",setTimeout(function(){a.set(e.style,"transform","rotate(1800deg)"),e.style.transitionDuration="10s",a.set(e.style,"transitionTimingFunction","linear")},50))},getDefaultProps:function(){return{mode:"indeterminate",value:0,min:0,max:100,size:1}},getTheme:function(){return this.context.muiTheme.palette},getStyles:function(e){e*=1.4;var t="50px",n=Math.round((50*e-50)/2);0>n&&(n=0);var o={root:{position:"relative",margin:n+"px",display:"inline-block",width:t,height:t},wrapper:{width:t,height:t,margin:"5px",display:"inline-block",transition:l.create("transform","20s",null,"linear")},svg:{height:t,position:"relative",transform:"scale("+e+")",width:t},path:{strokeDasharray:"89,200",strokeDashoffset:0,stroke:this.props.color||this.getTheme().primary1Color,strokeLinecap:"round",transition:l.create("all","1.5s",null,"ease-in-out")}};if(a.set(o.wrapper,"transitionTimingFunction","linear"),"determinate"===this.props.mode){var r=this._getRelativeValue();o.path.transition=l.create("all","0.3s",null,"linear"),o.path.strokeDasharray=Math.round(1.25*r)+",200"}return o},render:function(){var e=this.props,t=e.style,n=e.innerStyle,s=e.size,a=o(e,["style","innerStyle","size"]),l=this.getStyles(s||1);return i.createElement("div",r({},a,{style:this.mergeAndPrefix(l.root,t)}),i.createElement("div",{ref:"wrapper",style:this.mergeAndPrefix(l.wrapper,n)},i.createElement("svg",{style:this.mergeAndPrefix(l.svg)},i.createElement("circle",{ref:"path",style:this.mergeAndPrefix(l.path),cx:"25",cy:"25",r:"20",fill:"none",strokeWidth:"2.5",strokeMiterlimit:"10"}))))}});t.exports=c},{"./mixins/style-propable":54,"./styles/auto-prefix":70,"./styles/transitions":77,react:319}],16:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./before-after-wrapper"),a=i.createClass({displayName:"ClearFix",render:function(){var e=this.props,t=(e.style,o(e,["style"])),n=function(){return{content:"' '",display:"table"}},a=n();return a.clear="both",i.createElement(s,r({},t,{beforeStyle:n(),afterStyle:a,style:this.props.style}),this.props.children)}});t.exports=a},{"./before-after-wrapper":5,react:319}],17:[function(e,t,n){"use strict";var o=e("react"),r=e("../utils/date-time"),i=e("./day-button"),s=e("../clearfix"),a=o.createClass({displayName:"CalendarMonth",propTypes:{displayDate:o.PropTypes.object.isRequired,onDayTouchTap:o.PropTypes.func,selectedDate:o.PropTypes.object.isRequired,minDate:o.PropTypes.object,maxDate:o.PropTypes.object,shouldDisableDate:o.PropTypes.func,autoOk:o.PropTypes.bool},render:function(){var e={lineHeight:"32px",textAlign:"center",padding:"8px 14px 0 14px"};return o.createElement("div",{style:e},this._getWeekElements())},isSelectedDateDisabled:function(){return this._selectedDateDisabled},_getWeekElements:function(){var e=this,t=r.getWeekArray(this.props.displayDate);return t.map(function(t,n){return o.createElement(s,{key:n},e._getDayElements(t,n))},this)},_getDayElements:function(e,t){var n=this;return e.map(function(e,s){var a=r.isEqualDate(n.props.selectedDate,e),l=n._shouldDisableDate(e),c=!l&&a;return a&&(n._selectedDateDisabled=l?!0:!1),o.createElement(i,{key:"db"+t+s,date:e,onTouchTap:n._handleDayTouchTap,selected:c,disabled:l})},this)},_handleDayTouchTap:function(e,t){this.props.onDayTouchTap&&this.props.onDayTouchTap(e,t)},_shouldDisableDate:function(e){if(null===e)return!1;var t=!r.isBetweenDates(e,this.props.minDate,this.props.maxDate);return!t&&this.props.shouldDisableDate&&(t=this.props.shouldDisableDate(e)),t}});t.exports=a},{"../clearfix":16,"../utils/date-time":127,"./day-button":24,react:319}],18:[function(e,t,n){"use strict";var o=e("react"),r=e("../utils/date-time"),i=e("../icon-button"),s=e("../toolbar/toolbar"),a=e("../toolbar/toolbar-group"),l=e("../svg-icons/navigation/chevron-left"),c=e("../svg-icons/navigation-chevron-left-double"),p=e("../svg-icons/navigation/chevron-right"),u=e("../svg-icons/navigation-chevron-right-double"),h=e("../transition-groups/slide-in"),d=o.createClass({displayName:"CalendarToolbar",propTypes:{displayDate:o.PropTypes.object.isRequired,onMonthChange:o.PropTypes.func,onYearChange:o.PropTypes.func,prevYear:o.PropTypes.bool,nextYear:o.PropTypes.bool,prevMonth:o.PropTypes.bool,nextMonth:o.PropTypes.bool,hideYearChangeButtons:o.PropTypes.bool},getDefaultProps:function(){return{prevYear:!0,nextYear:!0,prevMonth:!0,nextMonth:!0,hideYearChangeButtons:!1}},getInitialState:function(){return{transitionDirection:"up"}},componentWillReceiveProps:function(e){var t=void 0;e.displayDate!==this.props.displayDate&&(t=e.displayDate>this.props.displayDate?"up":"down",this.setState({transitionDirection:t}))},_styles:function(){return{root:{position:"relative",padding:0,backgroundColor:"inherit"},title:{position:"absolute",top:"17px",lineHeight:"14px",fontSize:"14px",height:"14px",width:"100%",fontWeight:"500",textAlign:"center"}}},render:function(){var e=r.getFullMonth(this.props.displayDate),t=this.props.displayDate.getFullYear(),n=this._getPrevYearChangeButton(),c=this._getNextYearChangeButton(),u=this._styles();return o.createElement(s,{className:"mui-date-picker-calendar-toolbar",style:u.root,noGutter:!0},o.createElement(h,{style:u.title,direction:this.state.transitionDirection},o.createElement("div",{key:e+"_"+t},e," ",t)),o.createElement(a,{key:0,"float":"left"},n,o.createElement(i,{style:u.button,disabled:!this.props.prevMonth,onTouchTap:this._prevMonthTouchTap},o.createElement(l,null))),o.createElement(a,{key:1,"float":"right"},o.createElement(i,{style:u.button,disabled:!this.props.nextMonth,onTouchTap:this._nextMonthTouchTap},o.createElement(p,null)),c))},_getPrevYearChangeButton:function(){var e={display:this.props.hideYearChangeButtons?"none":""};return o.createElement(i,{style:e,disabled:!this.props.prevYear,onTouchTap:this._prevYearTouchTap},o.createElement(c,null))},_getNextYearChangeButton:function(){var e={display:this.props.hideYearChangeButtons?"none":""};return o.createElement(i,{style:e,disabled:!this.props.nextYear,onTouchTap:this._nextYearTouchTap},o.createElement(u,null))},_prevYearTouchTap:function(){this.props.onYearChange&&this.props.prevYear&&this.props.onYearChange(-1)},_nextYearTouchTap:function(){this.props.onYearChange&&this.props.nextYear&&this.props.onYearChange(1)},_prevMonthTouchTap:function(){this.props.onMonthChange&&this.props.prevMonth&&this.props.onMonthChange(-1)},_nextMonthTouchTap:function(){this.props.onMonthChange&&this.props.nextMonth&&this.props.onMonthChange(1)}});t.exports=d},{"../icon-button":35,"../svg-icons/navigation-chevron-left-double":82,"../svg-icons/navigation-chevron-right-double":83,"../svg-icons/navigation/chevron-left":86,"../svg-icons/navigation/chevron-right":87,"../toolbar/toolbar":118,"../toolbar/toolbar-group":115,"../transition-groups/slide-in":123,"../utils/date-time":127,react:319}],19:[function(e,t,n){"use strict";var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=e("react"),i=e("../mixins/style-propable"),s=e("../styles/colors"),a=e("../utils/date-time"),l=e("./year-button"),c=r.createClass({displayName:"CalendarYear",mixins:[i],propTypes:{displayDate:r.PropTypes.object.isRequired,onYearTouchTap:r.PropTypes.func,selectedDate:r.PropTypes.object.isRequired,minDate:r.PropTypes.object,maxDate:r.PropTypes.object},componentDidMount:function(){this._scrollToSelectedYear()},componentDidUpdate:function(){this._scrollToSelectedYear()},render:function(){var e=this._getYears(),t={position:"relative",height:"inherit",lineHeight:"36px",textAlign:"center",padding:"8px 14px 0 14px",backgroundColor:s.white,overflowX:"hidden",overflowY:"scroll"};return r.createElement("div",{style:t},e)},_getYears:function(){for(var e=this.props.minDate.getFullYear(),t=this.props.maxDate.getFullYear(),n=[],i=a.clone(this.props.selectedDate),s=e;t>=s;s++)if(i.setFullYear(s),a.isBetweenDates(i,this.props.minDate,this.props.maxDate)){var c=this.props.selectedDate.getFullYear()===s,p={};c&&(p={ref:"selectedYearButton"});var u=r.createElement(l,o({key:"yb"+s,year:s,onTouchTap:this._handleYearTouchTap,selected:c},p));n.push(u)}return n},_scrollToSelectedYear:function(){if(void 0!==this.refs.selectedYearButton){
var e=this.getDOMNode(),t=this.refs.selectedYearButton.getDOMNode(),n=e.clientHeight,o=t.clientHeight||32,r=t.offsetTop+o/2-n/2;e.scrollTop=r}},_handleYearTouchTap:function(e,t){this.props.onYearTouchTap&&this.props.onYearTouchTap(e,t)}});t.exports=c},{"../mixins/style-propable":54,"../styles/colors":71,"../utils/date-time":127,"./year-button":25,react:319}],20:[function(e,t,n){"use strict";var o=e("react"),r=e("../mixins/style-propable"),i=e("../mixins/window-listenable"),s=e("../utils/date-time"),a=e("../utils/key-code"),l=e("../styles/transitions"),c=e("./calendar-month"),p=e("./calendar-year"),u=e("./calendar-toolbar"),h=e("./date-display"),d=e("../transition-groups/slide-in"),f=e("../clearfix"),m=o.createClass({displayName:"Calendar",mixins:[r,i],propTypes:{initialDate:o.PropTypes.object,isActive:o.PropTypes.bool,minDate:o.PropTypes.object,maxDate:o.PropTypes.object,shouldDisableDate:o.PropTypes.func,hideToolbarYearChange:o.PropTypes.bool,shouldShowMonthDayPickerFirst:o.PropTypes.bool,shouldShowYearPickerFirst:o.PropTypes.bool,showYearSelector:o.PropTypes.bool,onDayTouchTap:o.PropTypes.func},windowListeners:{keydown:"_handleWindowKeyDown"},getDefaultProps:function(){return{initialDate:new Date,minDate:s.addYears(new Date,-100),maxDate:s.addYears(new Date,100),hideToolbarYearChange:!1,shouldShowMonthDayPickerFirst:!0,shouldShowYearPickerFirst:!1,showYearSelector:!1}},getInitialState:function(){return{displayDate:s.getFirstDayOfMonth(this.props.initialDate),selectedDate:this.props.initialDate,transitionDirection:"left",displayMonthDay:this.props.shouldShowMonthDayPickerFirst||this.props.shouldShowYearPickerFirst||!0,transitionEnter:!0}},componentWillReceiveProps:function(e){if(e.initialDate!==this.props.initialDate){var t=e.initialDate||new Date;this.setState({displayDate:s.getFirstDayOfMonth(t),selectedDate:t})}e.shouldShowMonthDayPickerFirst&&this.setState({displayMonthDay:e.shouldShowMonthDayPickerFirst})},render:function(){var e=s.yearDiff(this.props.maxDate,this.props.minDate)+1,t=s.getWeekArray(this.state.displayDate).length,n=this._getToolbarInteractions(),r=this.props.hideToolbarYearChange||!this.props.showYearSelector,i=e>2,a="landscape"===this.props.mode,p={root:{fontSize:12},calendarContainer:{width:a?280:"100%",height:5===t?268:6===t?308:228,"float":a?"right":"none",transition:l.easeOut("150ms","height"),overflow:"hidden"},yearContainer:{width:280,overflow:"hidden",height:6>e?56*e+10:5===t?268:6===t?308:228,"float":a?"right":"none"},dateDisplay:{width:a?280:"100%",height:"100%","float":a?"left":"none"},weekTitle:{padding:"0 14px",lineHeight:"12px",opacity:"0.5",height:12,fontWeight:"500",margin:0},weekTitleDay:{listStyle:"none","float":"left",width:32,textAlign:"center",margin:"0 2px"}};return this.state.displayMonthDay||!this.props.showYearSelector?p.yearContainer.display="none":p.calendarContainer.display="none",o.createElement(f,{style:this.mergeAndPrefix(p.root)},o.createElement(h,{style:p.dateDisplay,selectedDate:this.state.selectedDate,handleMonthDayClick:this._handleMonthDayClick,handleYearClick:this._handleYearClick,yearSelectionAvailable:this.props.showYearSelector&&i,monthDaySelected:this.state.displayMonthDay,mode:this.props.mode,weekCount:t}),o.createElement("div",{style:p.calendarContainer},o.createElement(u,{displayDate:this.state.displayDate,onMonthChange:this._handleMonthChange,onYearChange:this._handleYearChange,prevMonth:n.prevMonth,nextMonth:n.nextMonth,prevYear:n.prevYear,nextYear:n.nextYear,hideYearChangeButtons:r}),o.createElement(f,{elementType:"ul",style:p.weekTitle},o.createElement("li",{style:p.weekTitleDay},"S"),o.createElement("li",{style:p.weekTitleDay},"M"),o.createElement("li",{style:p.weekTitleDay},"T"),o.createElement("li",{style:p.weekTitleDay},"W"),o.createElement("li",{style:p.weekTitleDay},"T"),o.createElement("li",{style:p.weekTitleDay},"F"),o.createElement("li",{style:p.weekTitleDay},"S")),o.createElement(d,{direction:this.state.transitionDirection},o.createElement(c,{key:this.state.displayDate.toDateString(),ref:"calendar",displayDate:this.state.displayDate,onDayTouchTap:this._handleDayTouchTap,selectedDate:this.state.selectedDate,minDate:this.props.minDate,maxDate:this.props.maxDate,shouldDisableDate:this.props.shouldDisableDate}))),o.createElement("div",{style:p.yearContainer},this._yearSelector()))},_yearSelector:function(){return this.props.showYearSelector?o.createElement(p,{key:"years",displayDate:this.state.displayDate,onYearTouchTap:this._handleYearTouchTap,selectedDate:this.state.selectedDate,minDate:this.props.minDate,maxDate:this.props.maxDate}):void 0},getSelectedDate:function(){return this.state.selectedDate},isSelectedDateDisabled:function(){return this.refs.calendar.isSelectedDateDisabled()},_addSelectedDays:function(e){this._setSelectedDate(s.addDays(this.state.selectedDate,e))},_addSelectedMonths:function(e){this._setSelectedDate(s.addMonths(this.state.selectedDate,e))},_addSelectedYears:function(e){this._setSelectedDate(s.addYears(this.state.selectedDate,e))},_setDisplayDate:function(e,t){var n=s.getFirstDayOfMonth(e),o=n>this.state.displayDate?"left":"right";n!==this.state.displayDate&&this.setState({displayDate:n,transitionDirection:o,selectedDate:t||this.state.selectedDate})},_setSelectedDate:function(e){var t=e;s.isBeforeDate(e,this.props.minDate)?t=this.props.minDate:s.isAfterDate(e,this.props.maxDate)&&(t=this.props.maxDate);var n=s.getFirstDayOfMonth(t);n!==this.state.displayDate?this._setDisplayDate(n,t):this.setState({selectedDate:t})},_handleDayTouchTap:function(e,t){this._setSelectedDate(t),this.props.onDayTouchTap&&this.props.onDayTouchTap(e,t)},_handleMonthChange:function(e){this._addSelectedMonths(e)},_handleYearChange:function(e){this._addSelectedYears(e)},_handleYearTouchTap:function(e,t){var n=s.clone(this.state.selectedDate);n.setFullYear(t),this._setSelectedDate(n,e)},_getToolbarInteractions:function(){return{prevMonth:s.monthDiff(this.state.selectedDate,this.props.minDate)>0,nextMonth:s.monthDiff(this.state.selectedDate,this.props.maxDate)<0,prevYear:s.yearDiff(this.state.selectedDate,this.props.minDate)>0,nextYear:s.yearDiff(this.state.selectedDate,this.props.maxDate)<0}},_handleMonthDayClick:function(){this.setState({displayMonthDay:!0})},_handleYearClick:function(){this.setState({displayMonthDay:!1})},_handleWindowKeyDown:function(e){if(this.props.isActive)switch(e.keyCode){case a.UP:e.altKey&&e.shiftKey?this._addSelectedYears(-1):e.shiftKey?this._addSelectedMonths(-1):this._addSelectedDays(-7);break;case a.DOWN:e.altKey&&e.shiftKey?this._addSelectedYears(1):e.shiftKey?this._addSelectedMonths(1):this._addSelectedDays(7);break;case a.RIGHT:e.altKey&&e.shiftKey?this._addSelectedYears(1):e.shiftKey?this._addSelectedMonths(1):this._addSelectedDays(1);break;case a.LEFT:e.altKey&&e.shiftKey?this._addSelectedYears(-1):e.shiftKey?this._addSelectedMonths(-1):this._addSelectedDays(-1)}}});t.exports=m},{"../clearfix":16,"../mixins/style-propable":54,"../mixins/window-listenable":56,"../styles/transitions":77,"../transition-groups/slide-in":123,"../utils/date-time":127,"../utils/key-code":133,"./calendar-month":17,"./calendar-toolbar":18,"./calendar-year":19,"./date-display":21,react:319}],21:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../mixins/style-propable"),a=e("../utils/date-time"),l=e("../styles/transitions"),c=e("../styles/auto-prefix"),p=e("../transition-groups/slide-in"),u=i.createClass({displayName:"DateDisplay",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{selectedDate:i.PropTypes.object.isRequired,weekCount:i.PropTypes.number,yearSelectionAvailable:i.PropTypes.bool,monthDaySelected:i.PropTypes.bool},getDefaultProps:function(){return{weekCount:4,yearSelectionAvailable:!0,monthDaySelected:!0}},getInitialState:function(){return{transitionDirection:"up",selectedYear:!this.props.monthDaySelected}},componentWillReceiveProps:function(e){var t=void 0;e.selectedDate!==this.props.selectedDate&&(t=e.selectedDate>this.props.selectedDate?"up":"down",this.setState({transitionDirection:t})),void 0!==e.monthDaySelected&&this.setState({selectedYear:!e.monthDaySelected})},getTheme:function(){return this.context.muiTheme.component.datePicker},render:function(){var e=this.props,t=(e.selectedDate,e.style,o(e,["selectedDate","style"])),n=a.getDayOfWeek(this.props.selectedDate),s=a.getShortMonth(this.props.selectedDate),u=this.props.selectedDate.getDate(),h=this.props.selectedDate.getFullYear(),d="landscape"===this.props.mode,f=0,m=30,y=95;d&&(f=5===this.props.weekCount?14:6===this.props.weekCount?34:8,y=4===this.props.weekCount?114:150,this.props.weekCount>4&&(m=50));var g={root:{textAlign:"center",position:"relative"},dateContainer:{backgroundColor:this.getTheme().color,height:d?40*this.props.weekCount+36:150,padding:"16px 0",transition:l.easeOut(),boxSizing:"border-box"},date:{position:"relative",color:this.getTheme().textColor,transition:l.easeOut(),transform:"translate3d(0,"+f+"px,0)"},dowContainer:{height:32,backgroundColor:this.getTheme().selectColor,borderRadius:d?"2px 0 0 0":"2px 2px 0 0",paddingTop:9,boxSizing:"border-box"},dow:{fontSize:13,lineHeight:"13px",height:"100%",color:this.getTheme().selectTextColor},day:{root:{position:"absolute",lineHeight:d?"76px":"58px",fontSize:d?76:58,height:d?76:58,width:"100%",opacity:this.state.selectedYear?.7:1,transition:l.easeOut(),transform:"translate3d(0,"+m+"px,0)"},title:{width:100,marginLeft:"auto",marginRight:"auto",cursor:this.state.selectedYear?"pointer":"default"}},month:{root:{position:"absolute",top:d?0:1,fontSize:d?26:22,lineHeight:d?"26px":"22px",height:d?26:22,width:"100%",textTransform:"uppercase",opacity:this.state.selectedYear?.7:1},title:{width:100,marginLeft:"auto",marginRight:"auto",cursor:this.state.selectedYear?"pointer":"default"}},year:{root:{position:"absolute",margin:0,fontSize:d?26:22,lineHeight:d?"26px":"22px",height:d?26:22,width:"100%",textTransform:"uppercase",opacity:this.state.selectedYear?1:.7,transition:l.easeOut(),transform:"translate3d(0,"+y+"px,0)"},title:{width:100,marginLeft:"auto",marginRight:"auto",cursor:!this.props.yearSelectionAvailable||this.state.selectedYear?"default":"pointer"}}};return i.createElement("div",r({},t,{style:this.mergeAndPrefix(g.root,this.props.style)}),i.createElement("div",{style:g.dowContainer},i.createElement(p,{style:g.dow,direction:this.state.transitionDirection},i.createElement("div",{key:n},n))),i.createElement("div",{style:c.all(g.dateContainer)},i.createElement("div",{style:c.all(g.date)},i.createElement(p,{style:g.month.root,direction:this.state.transitionDirection},i.createElement("div",{key:s,style:g.month.title,onTouchTap:this._handleMonthDayClick},s)),i.createElement(p,{style:g.day.root,direction:this.state.transitionDirection},i.createElement("div",{key:u,style:g.day.title,onTouchTap:this._handleMonthDayClick},u)),i.createElement(p,{style:g.year.root,direction:this.state.transitionDirection},i.createElement("div",{key:h,style:g.year.title,onTouchTap:this._handleYearClick},h)))))},_handleMonthDayClick:function(){this.props.handleMonthDayClick&&this.state.selectedYear&&this.props.handleMonthDayClick(),this.props.yearSelectionAvailable&&this.setState({selectedYear:!1})},_handleYearClick:function(){this.props.handleYearClick&&!this.state.selectedYear&&this.props.yearSelectionAvailable&&this.props.handleYearClick(),this.props.yearSelectionAvailable&&this.setState({selectedYear:!0})}});t.exports=u},{"../mixins/style-propable":54,"../styles/auto-prefix":70,"../styles/transitions":77,"../transition-groups/slide-in":123,"../utils/date-time":127,react:319}],22:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../mixins/style-propable"),a=e("../mixins/window-listenable"),l=e("../utils/css-event"),c=e("../utils/key-code"),p=e("./calendar"),u=e("../dialog"),h=e("../flat-button"),d=i.createClass({displayName:"DatePickerDialog",mixins:[s,a],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{initialDate:i.PropTypes.object,onAccept:i.PropTypes.func,onShow:i.PropTypes.func,onDismiss:i.PropTypes.func,onClickAway:i.PropTypes.func,minDate:i.PropTypes.object,maxDate:i.PropTypes.object,shouldDisableDate:i.PropTypes.func,hideToolbarYearChange:i.PropTypes.bool,showYearSelector:i.PropTypes.bool},windowListeners:{keyup:"_handleWindowKeyUp"},getInitialState:function(){return{isCalendarActive:!1,showMonthDayPicker:!0}},render:function(){var e=this.props,t=(e.initialDate,e.onAccept,e.style,o(e,["initialDate","onAccept","style"])),n={root:{fontSize:14,color:this.context.muiTheme.component.datePicker.calendarTextColor},dialogContent:{width:"landscape"===this.props.mode?560:280},dialogBodyContent:{padding:0},actions:{marginRight:8}},s=[i.createElement(h,{key:0,label:"Cancel",secondary:!0,style:n.actions,onTouchTap:this._handleCancelTouchTap})];return this.props.autoOk||s.push(i.createElement(h,{key:1,label:"OK",secondary:!0,disabled:void 0!==this.refs.calendar&&this.refs.calendar.isSelectedDateDisabled(),style:n.actions,onTouchTap:this._handleOKTouchTap})),i.createElement(u,r({},t,{ref:"dialog",style:n.root,contentStyle:n.dialogContent,bodyStyle:n.dialogBodyContent,actions:s,onDismiss:this._handleDialogDismiss,onShow:this._handleDialogShow,onClickAway:this._handleDialogClickAway,repositionOnUpdate:!1}),i.createElement(p,{ref:"calendar",onDayTouchTap:this._onDayTouchTap,initialDate:this.props.initialDate,isActive:this.state.isCalendarActive,minDate:this.props.minDate,maxDate:this.props.maxDate,shouldDisableDate:this.props.shouldDisableDate,shouldShowMonthDayPickerFirst:this.state.showMonthDayPicker,hideToolbarYearChange:this.props.hideToolbarYearChange,showYearSelector:this.props.showYearSelector,mode:this.props.mode}))},show:function(){this.refs.dialog.show()},dismiss:function(){this.refs.dialog.dismiss()},_onDayTouchTap:function(){this.props.autoOk&&setTimeout(this._handleOKTouchTap,300)},_handleCancelTouchTap:function(){this.dismiss()},_handleOKTouchTap:function(){this.props.onAccept&&!this.refs.calendar.isSelectedDateDisabled()&&this.props.onAccept(this.refs.calendar.getSelectedDate()),this.dismiss()},_handleDialogShow:function(){this.setState({isCalendarActive:!0}),this.props.onShow&&this.props.onShow()},_handleDialogDismiss:function(){var e=this;l.onTransitionEnd(this.refs.dialog.getDOMNode(),function(){e.setState({isCalendarActive:!1,showMonthDayPicker:!0})}),this.props.onDismiss&&this.props.onDismiss()},_handleDialogClickAway:function(){var e=this;l.onTransitionEnd(this.refs.dialog.getDOMNode(),function(){e.setState({isCalendarActive:!1,showMonthDayPicker:!0})}),this.props.onClickAway&&this.props.onClickAway()},_handleWindowKeyUp:function(e){if(this.state.isCalendarActive)switch(e.keyCode){case c.ENTER:this._handleOKTouchTap()}}});t.exports=d},{"../dialog":26,"../flat-button":32,"../mixins/style-propable":54,"../mixins/window-listenable":56,"../utils/css-event":126,"../utils/key-code":133,"./calendar":20,react:319}],23:[function(e,t,n){(function(n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../mixins/style-propable"),a=e("../mixins/window-listenable"),l=e("../utils/date-time"),c=e("./date-picker-dialog"),p=e("../text-field"),u=i.createClass({displayName:"DatePicker",mixins:[s,a],propTypes:{autoOk:i.PropTypes.bool,defaultDate:i.PropTypes.object,formatDate:i.PropTypes.func,hideToolbarYearChange:i.PropTypes.bool,maxDate:i.PropTypes.object,minDate:i.PropTypes.object,mode:i.PropTypes.oneOf(["portrait","landscape","inline"]),onDismiss:i.PropTypes.func,onChange:i.PropTypes.func,onFocus:i.PropTypes.func,onShow:i.PropTypes.func,onTouchTap:i.PropTypes.func,shouldDisableDate:i.PropTypes.func,showYearSelector:i.PropTypes.bool,style:i.PropTypes.object,textFieldStyle:i.PropTypes.object},windowListeners:{keyup:"_handleWindowKeyUp"},getDefaultProps:function(){return{formatDate:l.format,autoOk:!1,showYearSelector:!1}},getInitialState:function(){return{date:this._isControlled()?this._getControlledDate():this.props.defaultDate,dialogDate:new Date}},componentWillReceiveProps:function(e){if(this._isControlled()){var t=this._getControlledDate(e);l.isEqualDate(this.state.date,t)||this.setState({date:t})}},render:function(){var e=this.props,t=e.autoOk,n=(e.defaultDate,e.formatDate),s=e.maxDate,a=e.minDate,l=e.mode,u=(e.onDismiss,e.onFocus,e.onTouchTap,e.onShow),h=e.showYearSelector,d=e.style,f=e.textFieldStyle,m=o(e,["autoOk","defaultDate","formatDate","maxDate","minDate","mode","onDismiss","onFocus","onTouchTap","onShow","showYearSelector","style","textFieldStyle"]);return i.createElement("div",{style:d},i.createElement(p,r({},m,{style:f,ref:"input",value:this.state.date?n(this.state.date):void 0,onFocus:this._handleInputFocus,onTouchTap:this._handleInputTouchTap})),i.createElement(c,{ref:"dialogWindow",mode:l,initialDate:this.state.dialogDate,onAccept:this._handleDialogAccept,onShow:u,onDismiss:this._handleDialogDismiss,minDate:a,maxDate:s,autoOk:t,showYearSelector:h,shouldDisableDate:this.props.shouldDisableDate,hideToolbarYearChange:this.props.hideToolbarYearChange}))},getDate:function(){return this.state.date},setDate:function(e){"production"!==n.env.NODE_ENV&&this._isControlled()&&console.error("Cannot call DatePicker.setDate when value or valueLink is defined as a property."),this.setState({date:e})},openDialog:function(){this.setState({dialogDate:this.getDate()},this.refs.dialogWindow.show)},focus:function(){this.openDialog()},_handleDialogAccept:function(e){this._isControlled()||this.setDate(e),this.props.onChange&&this.props.onChange(null,e),this.props.valueLink&&this.props.valueLink.requestChange(e)},_handleDialogDismiss:function(){this.props.onDismiss&&this.props.onDismiss()},_handleInputFocus:function(e){e.target.blur(),this.props.onFocus&&this.props.onFocus(e)},_handleInputTouchTap:function(e){this.openDialog(),this.props.onTouchTap&&this.props.onTouchTap(e)},_handleWindowKeyUp:function(){},_isControlled:function(){return this.props.hasOwnProperty("value")||this.props.hasOwnProperty("valueLink")},_getControlledDate:function(){var e=void 0===arguments[0]?this.props:arguments[0];return l.isDateObject(e.value)?e.value:e.valueLink&&l.isDateObject(e.valueLink.value)?e.valueLink.value:void 0}});t.exports=u}).call(this,e("_process"))},{"../mixins/style-propable":54,"../mixins/window-listenable":56,"../text-field":102,"../utils/date-time":127,"./date-picker-dialog":22,_process:1,react:319}],24:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../mixins/style-propable"),a=e("../styles/transitions"),l=e("../utils/date-time"),c=e("../enhanced-button"),p=i.createClass({displayName:"DayButton",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{date:i.PropTypes.object,onTouchTap:i.PropTypes.func,selected:i.PropTypes.bool,disabled:i.PropTypes.bool},getDefaultProps:function(){return{selected:!1,disabled:!1}},getInitialState:function(){return{hover:!1}},getTheme:function(){return this.context.muiTheme.component.datePicker},render:function(){var e=this.props,t=(e.date,e.onTouchTap,e.selected,o(e,["date","onTouchTap","selected"])),n={root:{boxSizing:"border-box",WebkitTapHighlightColor:"rgba(0,0,0,0)",position:"relative","float":"left",width:36,padding:"4px 2px"},label:{position:"relative",color:this.context.muiTheme.palette.textColor},buttonState:{position:"absolute",height:32,width:32,opacity:0,borderRadius:"50%",transform:"scale(0)",transition:a.easeOut(),backgroundColor:this.getTheme().selectColor}};return this.state.hover&&(n.label.color=this.getTheme().selectTextColor,n.buttonState.opacity="0.6",n.buttonState.transform="scale(1)"),this.props.selected?(n.label.color=this.getTheme().selectTextColor,n.buttonState.opacity=1,n.buttonState.transform="scale(1)"):this.props.disabled&&(n.root.opacity="0.6"),l.isEqualDate(this.props.date,new Date)&&!this.props.selected&&(n.label.color=this.getTheme().color),this.props.date?i.createElement(c,r({},t,{style:n.root,hoverStyle:n.hover,disabled:this.props.disabled,disableFocusRipple:!0,disableTouchRipple:!0,onMouseEnter:this._handleMouseEnter,onMouseLeave:this._handleMouseLeave,onTouchTap:this._handleTouchTap,onKeyboardFocus:this._handleKeyboardFocus}),i.createElement("div",{style:n.buttonState}),i.createElement("span",{style:n.label},this.props.date.getDate())):i.createElement("span",{style:n.root})},_handleMouseEnter:function(){this.props.disabled||this.setState({hover:!0})},_handleMouseLeave:function(){this.props.disabled||this.setState({hover:!1})},_handleTouchTap:function(e){!this.props.disabled&&this.props.onTouchTap&&this.props.onTouchTap(e,this.props.date)},_handleKeyboardFocus:function(e,t){!this.props.disabled&&this.props.onKeyboardFocus&&this.props.onKeyboardFocus(e,t,this.props.date)}});t.exports=p},{"../enhanced-button":29,"../mixins/style-propable":54,"../styles/transitions":77,"../utils/date-time":127,react:319}],25:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../mixins/style-propable"),a=e("../enhanced-button"),l=i.createClass({displayName:"YearButton",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{year:i.PropTypes.number,onTouchTap:i.PropTypes.func,selected:i.PropTypes.bool},getDefaultProps:function(){return{selected:!1}},getInitialState:function(){return{hover:!1}},getTheme:function(){return this.context.muiTheme.component.datePicker},render:function(){var e=this.props,t=(e.className,e.year),n=(e.onTouchTap,e.selected),s=o(e,["className","year","onTouchTap","selected"]),l={root:{boxSizing:"border-box",WebkitTapHighlightColor:"rgba(0,0,0,0)",position:"relative",display:"block",margin:"0 auto",width:36,fontSize:14,padding:"8px 2px"},label:{position:"relative",top:-1,color:this.context.muiTheme.palette.textColor},buttonState:{position:"absolute",height:32,width:32,opacity:0,borderRadius:"50%",transform:"scale(0)",backgroundColor:this.getTheme().selectColor}};return this.state.hover&&(l.label.color=this.getTheme().selectTextColor,l.buttonState.opacity=.6,l.buttonState.transform="scale(1.5)"),n&&(l.label.color=this.getTheme().selectTextColor,l.buttonState.opacity=1,l.buttonState.transform="scale(1.5)"),t===(new Date).getFullYear()&&(l.root.color=this.getTheme().color),i.createElement(a,r({},s,{style:l.root,disableFocusRipple:!0,disableTouchRipple:!0,onMouseEnter:this._handleMouseEnter,onMouseLeave:this._handleMouseLeave,onTouchTap:this._handleTouchTap}),i.createElement("div",{style:l.buttonState}),i.createElement("span",{style:l.label},t))},_handleMouseEnter:function(){this.setState({hover:!0})},_handleMouseLeave:function(){this.setState({hover:!1})},_handleTouchTap:function(e){this.props.onTouchTap&&this.props.onTouchTap(e,this.props.year)}});t.exports=l},{"../enhanced-button":29,"../mixins/style-propable":54,react:319}],26:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=e("./mixins/window-listenable"),a=e("./utils/css-event"),l=e("./utils/key-code"),c=e("./styles/transitions"),p=e("./mixins/style-propable"),u=e("./flat-button"),h=e("./overlay"),d=e("./paper"),f=i.addons.TransitionGroup,m=i.createClass({displayName:"TransitionItem",mixins:[p],contextTypes:{muiTheme:i.PropTypes.object},getInitialState:function(){return{style:{}}},componentWillEnter:function(e){var t=this.context.muiTheme.spacing;this.setState({style:{opacity:1,transform:"translate3d(0, "+t.desktopKeylineIncrement+"px, 0)"}}),setTimeout(e,450)},componentWillLeave:function(e){var t=this;this.setState({style:{opacity:0,transform:"translate3d(0, 0, 0)"}}),setTimeout(function(){t.isMounted()&&e()}.bind(this),450)},render:function(){var e=this.props,t=e.style,n=o(e,["style"]);return i.createElement("div",r({},n,{style:this.mergeAndPrefix(this.state.style,t)}),this.props.children)}}),y=i.createClass({displayName:"Dialog",mixins:[s,p],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{actions:i.PropTypes.array,autoDetectWindowHeight:i.PropTypes.bool,autoScrollBodyContent:i.PropTypes.bool,bodyStyle:i.PropTypes.object,contentClassName:i.PropTypes.string,contentStyle:i.PropTypes.object,modal:i.PropTypes.bool,openImmediately:i.PropTypes.bool,onClickAway:i.PropTypes.func,onDismiss:i.PropTypes.func,onShow:i.PropTypes.func,repositionOnUpdate:i.PropTypes.bool,title:i.PropTypes.node},windowListeners:{keyup:"_handleWindowKeyUp",resize:"_positionDialog"},getDefaultProps:function(){return{autoDetectWindowHeight:!1,autoScrollBodyContent:!1,actions:[],modal:!1,repositionOnUpdate:!0}},getInitialState:function(){return{open:this.props.openImmediately||!1}},componentDidMount:function(){this._positionDialog(),this.props.openImmediately&&(this.refs.dialogOverlay.preventScrolling(),this._onShow())},componentDidUpdate:function(){this._positionDialog()},getStyles:function(){var e=this.context.muiTheme.spacing,t={position:"fixed",boxSizing:"border-box",WebkitTapHighlightColor:"rgba(0,0,0,0)",zIndex:10,top:0,left:-1e4,width:"100%",height:"100%",transition:c.easeOut("0ms","left","450ms")},n={boxSizing:"border-box",WebkitTapHighlightColor:"rgba(0,0,0,0)",transition:c.easeOut(),position:"relative",width:"75%",maxWidth:12*e.desktopKeylineIncrement,margin:"0 auto",zIndex:10},o={padding:e.desktopGutter,overflowY:this.props.autoScrollBodyContent?"auto":"hidden",overflowX:"hidden"},r=e.desktopGutter+"px ",i={margin:0,padding:r+r+"0 "+r,color:this.context.muiTheme.palette.textColor,fontSize:24,lineHeight:"32px",fontWeight:"400"};return this.state.open&&(t=this.mergeAndPrefix(t,{left:0,transition:c.easeOut("0ms","left","0ms")})),{main:this.mergeAndPrefix(t,this.props.style),content:this.mergeAndPrefix(n,this.props.contentStyle),paper:{background:this.context.muiTheme.canvasColor},body:this.mergeStyles(o,this.props.bodyStyle),title:this.mergeStyles(i,this.props.titleStyle)}},render:function(){var e=this.getStyles(),t=this._getActionsContainer(this.props.actions),n=void 0;return this.props.title&&(n="[object String]"===Object.prototype.toString.call(this.props.title)?i.createElement("h3",{style:e.title},this.props.title):this.props.title),i.createElement("div",{ref:"container",style:e.main},i.createElement(f,{component:"div",ref:"dialogWindow"},this.state.open&&i.createElement(m,{className:this.props.contentClassName,style:e.content},i.createElement(d,{style:e.paper,zDepth:4},n,i.createElement("div",{ref:"dialogContent",style:e.body},this.props.children),t))),i.createElement(h,{ref:"dialogOverlay",show:this.state.open,autoLockScrolling:!1,onTouchTap:this._handleOverlayTouchTap}))},isOpen:function(){return this.state.open},dismiss:function(){var e=this;a.onTransitionEnd(this.getDOMNode(),function(){e.refs.dialogOverlay.allowScrolling()}.bind(this)),this.setState({open:!1}),this._onDismiss()},show:function(){this.refs.dialogOverlay.preventScrolling(),this.setState({open:!0},this._onShow)},_getAction:function(e,t){var n=this,o={marginRight:8},r={key:t,secondary:!0,onClick:e.onClick,onTouchTap:function(){e.onTouchTap&&e.onTouchTap.call(void 0),e.onClick||e.onTouchTap||n.dismiss()},label:e.text,style:o};return e.ref&&(r.ref=e.ref,r.keyboardFocused=e.ref===this.props.actionFocus),i.createElement(u,r)},_getActionsContainer:function(e){var t=void 0,n=[],o={boxSizing:"border-box",WebkitTapHighlightColor:"rgba(0,0,0,0)",padding:8,marginBottom:8,width:"100%",textAlign:"right"};if(e.length){for(var r=0;r<e.length;r++){var s=e[r];i.isValidElement(s)||(s=this._getAction(s,r)),n.push(s)}t=i.createElement("div",{style:o},n)}return t},_positionDialog:function(){if(this.state.open){var e=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,t=this.getDOMNode(),n=this.refs.dialogWindow.getDOMNode(),o=this.refs.dialogContent.getDOMNode(),r=16;n.style.height="",o.style.height="";var i=n.offsetHeight,s=(e-i)/2-64;if(r>s&&(s=r),(this.props.repositionOnUpdate||!t.style.paddingTop)&&(t.style.paddingTop=s+"px"),this.props.autoDetectWindowHeight||this.props.autoScrollBodyContent){var a=this.getStyles(),l=e-2*(a.body.padding+64);this.props.title&&(l-=o.previousSibling.offsetHeight),this.props.actions&&(l-=o.nextSibling.offsetHeight),o.style.maxHeight=l+"px"}}},_onShow:function(){this.props.onShow&&this.props.onShow()},_onDismiss:function(){this.props.onDismiss&&this.props.onDismiss()},_handleOverlayTouchTap:function(e){this.props.modal?e.stopPropagation():(this.dismiss(),this.props.onClickAway&&this.props.onClickAway())},_handleWindowKeyUp:function(e){e.keyCode!==l.ESC||this.props.modal||this.dismiss()}});t.exports=y},{"./flat-button":32,"./mixins/style-propable":54,"./mixins/window-listenable":56,"./overlay":57,"./paper":58,"./styles/transitions":77,"./utils/css-event":126,"./utils/key-code":133,"react/addons":147}],27:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./styles/transitions"),l=e("./mixins/click-awayable"),c=e("./font-icon"),p=e("./menu/menu"),u=i.createClass({displayName:"DropDownIcon",mixins:[s,l],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{onChange:i.PropTypes.func,menuItems:i.PropTypes.array.isRequired,closeOnMenuItemTouchTap:i.PropTypes.bool,iconStyle:i.PropTypes.object,iconClassName:i.PropTypes.string,iconLigature:i.PropTypes.string},getInitialState:function(){return{open:!1}},getDefaultProps:function(){return{closeOnMenuItemTouchTap:!0}},componentDidMount:function(){},componentClickAway:function(){this.setState({open:!1})},getStyles:function(){var e=this.context.muiTheme.spacing,t=48,n={root:{display:"inline-block",width:t+"px !important",position:"relative",height:e.desktopToolbarHeight,fontSize:e.desktopDropDownMenuFontSize,cursor:"pointer"},menu:{transition:a.easeOut(),right:"-14px !important",top:"9px !important",opacity:this.state.open?1:0},menuItem:{paddingRight:e.iconSize+2*e.desktopGutterLess,height:e.desktopDropDownMenuItemHeight,lineHeight:e.desktopDropDownMenuItemHeight+"px"}};return n},render:function(){var e=this.props,t=(e.style,e.children,e.menuItems),n=(e.closeOnMenuItemTouchTap,e.iconStyle),s=e.iconClassName,a=o(e,["style","children","menuItems","closeOnMenuItemTouchTap","iconStyle","iconClassName"]),l=this.getStyles();return i.createElement("div",r({},a,{style:this.mergeAndPrefix(l.root,this.props.style)}),i.createElement("div",{onTouchTap:this._onControlClick
},i.createElement(c,{className:s,style:n},this.props.iconLigature),this.props.children),i.createElement(p,{ref:"menuItems",style:this.mergeAndPrefix(l.menu),menuItems:t,menuItemStyle:l.menuItem,hideable:!0,visible:this.state.open,onItemTap:this._onMenuItemClick}))},_onControlClick:function(){this.setState({open:!this.state.open})},_onMenuItemClick:function(e,t,n){this.props.onChange&&this.props.onChange(e,t,n),this.props.closeOnMenuItemTouchTap&&this.setState({open:!1})}});t.exports=u},{"./font-icon":34,"./menu/menu":46,"./mixins/click-awayable":51,"./mixins/style-propable":54,"./styles/transitions":77,react:319}],28:[function(e,t,n){(function(n){"use strict";var o=e("react"),r=e("./mixins/style-propable"),i=e("./styles/transitions"),s=e("./utils/key-code"),a=e("./svg-icons/navigation/arrow-drop-down"),l=e("./paper"),c=e("./menu/menu"),p=e("./clearfix"),u=o.createClass({displayName:"DropDownMenu",mixins:[r],contextTypes:{muiTheme:o.PropTypes.object},propTypes:{className:o.PropTypes.string,displayMember:o.PropTypes.string,valueMember:o.PropTypes.string,autoWidth:o.PropTypes.bool,onChange:o.PropTypes.func,menuItems:o.PropTypes.array.isRequired,menuItemStyle:o.PropTypes.object,underlineStyle:o.PropTypes.object,iconStyle:o.PropTypes.object,labelStyle:o.PropTypes.object,selectedIndex:o.PropTypes.number},getDefaultProps:function(){return{autoWidth:!0,valueMember:"payload",displayMember:"text"}},getInitialState:function(){return{open:!1,selectedIndex:this._isControlled()?null:this.props.selectedIndex||0}},componentDidMount:function(){this.props.autoWidth&&this._setWidth(),this.props.hasOwnProperty("selectedIndex")&&this._setSelectedIndex(this.props)},componentWillReceiveProps:function(e){this.props.autoWidth&&this._setWidth(),e.hasOwnProperty("value")||e.hasOwnProperty("valueLink")||e.hasOwnProperty("selectedIndex")&&this._setSelectedIndex(e)},getStyles:function(){var e=5,t=this.context.muiTheme.spacing,n=this.context.muiTheme.component.dropDownMenu.accentColor,o=this.context.muiTheme.component.menu.backgroundColor,r={root:{transition:i.easeOut(),position:"relative",display:"inline-block",height:t.desktopSubheaderHeight,fontSize:t.desktopDropDownMenuFontSize,outline:"none"},control:{cursor:"pointer",position:"static",height:"100%"},controlBg:{transition:i.easeOut(),backgroundColor:o,height:"100%",width:"100%",opacity:0},icon:{position:"absolute",top:(t.desktopToolbarHeight-24)/2,right:t.desktopGutterLess,fill:this.context.muiTheme.component.dropDownMenu.accentColor},label:{transition:i.easeOut(),lineHeight:t.desktopToolbarHeight+"px",position:"absolute",paddingLeft:t.desktopGutter,top:0,opacity:1,color:this.context.muiTheme.palette.textColor},underline:{borderTop:"solid 1px "+n,margin:"-1px "+t.desktopGutter+"px"},menu:{zIndex:e+1},menuItem:{paddingRight:t.iconSize+t.desktopGutterLess+t.desktopGutterMini,height:t.desktopDropDownMenuItemHeight,lineHeight:t.desktopDropDownMenuItemHeight+"px",whiteSpace:"nowrap"},rootWhenOpen:{opacity:1},labelWhenOpen:{opacity:0,top:t.desktopToolbarHeight/2},overlay:{height:"100%",width:"100%",position:"fixed",top:0,left:0,zIndex:e}};return r},getInputNode:function(){var e=this.refs.root,t=this.props.menuItems[this.state.selectedIndex];return t&&(e.value=t[this.props.displayMember]),e},render:function(){var e=this,t=this.getStyles(),r=this._isControlled()?null:this.state.selectedIndex,i="";if(r)"production"!==n.env.NODE_ENV&&console.assert(!!this.props.menuItems[r],"SelectedIndex of "+r+" does not exist in menuItems.");else if(this.props.valueMember&&this._isControlled()){var s=this.props.hasOwnProperty("value")?this.props.value:this.props.valueLink.value;if(s)for(var u=0;u<this.props.menuItems.length;u++)this.props.menuItems[u][this.props.valueMember]===s&&(r=u)}var h=this.props.menuItems[r];h&&(i=h[this.props.displayMember]);var d=this.props.menuItems.map(function(t){return t.text=t[e.props.displayMember],t.payload=t[e.props.valueMember],t});return o.createElement("div",{ref:"root",onKeyDown:this._onKeyDown,onFocus:this.props.onFocus,onBlur:this.props.onBlur,className:this.props.className,style:this.mergeAndPrefix(t.root,this.state.open&&t.rootWhenOpen,this.props.style)},o.createElement(p,{style:this.mergeAndPrefix(t.control),onTouchTap:this._onControlClick},o.createElement(l,{style:this.mergeAndPrefix(t.controlBg),zDepth:0}),o.createElement("div",{style:this.mergeAndPrefix(t.label,this.state.open&&t.labelWhenOpen,this.props.labelStyle)},i),o.createElement(a,{style:this.mergeAndPrefix(t.icon,this.props.iconStyle)}),o.createElement("div",{style:this.mergeAndPrefix(t.underline,this.props.underlineStyle)})),o.createElement(c,{ref:"menuItems",autoWidth:this.props.autoWidth,selectedIndex:r,menuItems:d,style:t.menu,menuItemStyle:this.mergeAndPrefix(t.menuItem,this.props.menuItemStyle),hideable:!0,visible:this.state.open,onRequestClose:this._onMenuRequestClose,onItemTap:this._onMenuItemClick}),this.state.open&&o.createElement("div",{style:t.overlay,onTouchTap:this._handleOverlayTouchTap}))},_setWidth:function(){var e=o.findDOMNode(this),t=o.findDOMNode(this.refs.menuItems);this.props.style&&this.props.style.hasOwnProperty("width")||(e.style.width="auto",e.style.width=t.offsetWidth+"px")},_setSelectedIndex:function(e){var t=e.selectedIndex;"production"!==n.env.NODE_ENV&&0>t&&console.warn("Cannot set selectedIndex to a negative index.",t),this.setState({selectedIndex:t>-1?t:0})},_onControlClick:function(){this.setState({open:!this.state.open})},_onKeyDown:function(e){switch(e.which){case s.UP:this.state.open?e.altKey&&this.setState({open:!1}):this._selectPreviousItem();break;case s.DOWN:this.state.open||(e.altKey?this.setState({open:!0}):this._selectNextItem());break;case s.ENTER:case s.SPACE:this.setState({open:!0});break;default:return}e.preventDefault()},_onMenuItemClick:function(e,t,n){if(this.props.onChange&&this.state.selectedIndex!==t){var o=this.props.menuItems[t];o&&(e.target.value=o[this.props.valueMember]),this.props.valueLink?this.props.valueLink.requestChange(e.target.value):this.props.onChange(e,t,n)}this.setState({selectedIndex:t,value:e.target.value,open:!1})},_onMenuRequestClose:function(){this.setState({open:!1})},_selectPreviousItem:function(){this.setState({selectedIndex:Math.max(this.state.selectedIndex-1,0)})},_selectNextItem:function(){this.setState({selectedIndex:Math.min(this.state.selectedIndex+1,this.props.menuItems.length-1)})},_handleOverlayTouchTap:function(){this.setState({open:!1})},_isControlled:function(){return this.props.hasOwnProperty("value")||this.props.hasOwnProperty("valueLink")}});t.exports=u}).call(this,e("_process"))},{"./clearfix":16,"./menu/menu":46,"./mixins/style-propable":54,"./paper":58,"./styles/transitions":77,"./svg-icons/navigation/arrow-drop-down":84,"./utils/key-code":133,_process:1,react:319}],29:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=i.addons.PureRenderMixin,a=e("./mixins/style-propable"),l=e("./styles/colors"),c=e("./utils/children"),p=e("./utils/key-code"),u=e("./ripples/focus-ripple"),h=e("./ripples/touch-ripple"),d=!1,f=!1,m=i.createClass({displayName:"EnhancedButton",mixins:[s,a],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{centerRipple:i.PropTypes.bool,containerElement:i.PropTypes.oneOfType([i.PropTypes.string,i.PropTypes.element]),disabled:i.PropTypes.bool,disableFocusRipple:i.PropTypes.bool,disableKeyboardFocus:i.PropTypes.bool,disableTouchRipple:i.PropTypes.bool,keyboardFocused:i.PropTypes.bool,linkButton:i.PropTypes.bool,focusRippleColor:i.PropTypes.string,touchRippleColor:i.PropTypes.string,focusRippleOpacity:i.PropTypes.number,touchRippleOpacity:i.PropTypes.number,onBlur:i.PropTypes.func,onFocus:i.PropTypes.func,onKeyboardFocus:i.PropTypes.func,onKeyDown:i.PropTypes.func,onKeyUp:i.PropTypes.func,onTouchTap:i.PropTypes.func,tabIndex:i.PropTypes.number},getDefaultProps:function(){return{containerElement:"button",onBlur:function(){},onFocus:function(){},onKeyboardFocus:function(){},onKeyDown:function(){},onKeyUp:function(){},onTouchTap:function(){},tabIndex:0,type:"button"}},getInitialState:function(){return{isKeyboardFocused:!this.props.disabled&&this.props.keyboardFocused&&!this.props.disableKeyboardFocus}},componentWillReceiveProps:function(e){(e.disabled||e.disableKeyboardFocus)&&this.state.isKeyboardFocused&&(this.setState({isKeyboardFocused:!1}),e.onKeyboardFocus&&e.onKeyboardFocus(null,!1))},componentDidMount:function(){if(!d){var e=document.createElement("style");e.innerHTML="\n        button::-moz-focus-inner,\n        input::-moz-focus-inner {\n          border: 0;\n          padding: 0;\n        }\n      ",document.body.appendChild(e),d=!0}},render:function(){var e=this.props,t=(e.centerRipple,e.children),n=e.containerElement,s=e.disabled,a=(e.disableFocusRipple,e.disableKeyboardFocus,e.disableTouchRipple,e.focusRippleColor,e.focusRippleOpacity,e.linkButton),c=(e.touchRippleColor,e.touchRippleOpacity,e.onBlur,e.onFocus,e.onKeyUp,e.onKeyDown,e.onTouchTap,e.style),p=e.tabIndex,u=e.type,h=o(e,["centerRipple","children","containerElement","disabled","disableFocusRipple","disableKeyboardFocus","disableTouchRipple","focusRippleColor","focusRippleOpacity","linkButton","touchRippleColor","touchRippleOpacity","onBlur","onFocus","onKeyUp","onKeyDown","onTouchTap","style","tabIndex","type"]),d=this.mergeAndPrefix({border:10,background:"none",boxSizing:"border-box",display:"inline-block",font:"inherit",fontFamily:this.context.muiTheme.contentFontFamily,tapHighlightColor:l.transparent,appearance:a?null:"button",cursor:s?"default":"pointer",textDecoration:"none",outline:"none"},c);if(s&&a)return i.createElement("span",r({},h,{style:d}),t);var f=r({},h,{style:d,disabled:s,onBlur:this._handleBlur,onFocus:this._handleFocus,onTouchTap:this._handleTouchTap,onKeyUp:this._handleKeyUp,onKeyDown:this._handleKeyDown,tabIndex:p,type:u}),m=this._createButtonChildren();return i.isValidElement(n)?i.cloneElement(n,f,m):i.createElement(a?"a":n,f,m)},isKeyboardFocused:function(){return this.state.isKeyboardFocused},removeKeyboardFocus:function(e){this.state.isKeyboardFocused&&(this.setState({isKeyboardFocused:!1}),this.props.onKeyboardFocus(e,!1))},setKeyboardFocus:function(e){this.state.isKeyboardFocused||(this.setState({isKeyboardFocused:!0}),this.props.onKeyboardFocus(e,!0))},_cancelFocusTimeout:function(){this._focusTimeout&&(clearTimeout(this._focusTimeout),this._focusTimeout=null)},_createButtonChildren:function(){var e=this.props,t=e.centerRipple,n=e.children,o=e.disabled,r=e.disableFocusRipple,s=e.disableKeyboardFocus,a=e.disableTouchRipple,l=e.focusRippleColor,p=e.focusRippleOpacity,d=e.touchRippleColor,f=e.touchRippleOpacity,m=this.state.isKeyboardFocused,y=!m||o||r||s?void 0:i.createElement(u,{color:l,opacity:p,show:m}),g=o||a?void 0:i.createElement(h,{centerRipple:t,color:d,opacity:f},n);return c.create({focusRipple:y,touchRipple:g,children:g?void 0:n})},_handleKeyDown:function(e){this.props.disabled||this.props.disableKeyboardFocus||(e.keyCode===p.TAB&&(f=!0),e.keyCode===p.ENTER&&this.state.isKeyboardFocused&&this._handleTouchTap(e)),this.props.onKeyDown(e)},_handleKeyUp:function(e){!this.props.disabled&&e.keyCode===p.SPACE&&this.state.isKeyboardFocused&&this._handleTouchTap(e),this.props.onKeyUp(e)},_handleBlur:function(e){this._cancelFocusTimeout(),this.removeKeyboardFocus(e),this.props.onBlur(e)},_handleFocus:function(e){var t=this;this.props.disabled||this.props.disableKeyboardFocus||(this._focusTimeout=setTimeout(function(){f&&t.setKeyboardFocus(e)},150),this.props.onFocus(e))},_handleTouchTap:function(e){this._cancelFocusTimeout(),this.props.disabled||(f=!1,this.removeKeyboardFocus(e),this.props.onTouchTap(e))}});t.exports=m},{"./mixins/style-propable":54,"./ripples/focus-ripple":64,"./ripples/touch-ripple":66,"./styles/colors":71,"./utils/children":124,"./utils/key-code":133,"react/addons":147}],30:[function(e,t,n){(function(n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./utils/key-code"),a=e("./mixins/style-propable"),l=e("./styles/transitions"),c=e("./utils/unique-id"),p=e("./mixins/window-listenable"),u=e("./clearfix"),h=e("./ripples/focus-ripple"),d=e("./ripples/touch-ripple"),f=e("./paper"),m=i.createClass({displayName:"EnhancedSwitch",mixins:[p,a],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{id:i.PropTypes.string,inputType:i.PropTypes.string.isRequired,switchElement:i.PropTypes.element.isRequired,onParentShouldUpdate:i.PropTypes.func.isRequired,switched:i.PropTypes.bool.isRequired,rippleStyle:i.PropTypes.object,rippleColor:i.PropTypes.string,iconStyle:i.PropTypes.object,thumbStyle:i.PropTypes.object,trackStyle:i.PropTypes.object,labelStyle:i.PropTypes.object,name:i.PropTypes.string,value:i.PropTypes.string,label:i.PropTypes.string,onSwitch:i.PropTypes.func,required:i.PropTypes.bool,disabled:i.PropTypes.bool,defaultSwitched:i.PropTypes.bool,labelPosition:i.PropTypes.oneOf(["left","right"]),disableFocusRipple:i.PropTypes.bool,disableTouchRipple:i.PropTypes.bool},windowListeners:{keydown:"_handleWindowKeydown",keyup:"_handleWindowKeyup"},getInitialState:function(){return{isKeyboardFocused:!1,parentWidth:100}},getEvenWidth:function(){return parseInt(window.getComputedStyle(i.findDOMNode(this.refs.root)).getPropertyValue("width"),10)},componentDidMount:function(){var e=i.findDOMNode(this.refs.checkbox);this.props.switched&&e.checked===this.props.switched||this.props.onParentShouldUpdate(e.checked),window.addEventListener("resize",this._handleResize),this._handleResize()},componentWillUnmount:function(){window.removeEventListener("resize",this._handleResize)},componentWillReceiveProps:function(e){var t=e.hasOwnProperty("checkedLink"),n=e.hasOwnProperty("checked"),o=e.hasOwnProperty("toggled"),r=e.hasOwnProperty("defaultSwitched")&&e.defaultSwitched!==this.props.defaultSwitched,i={};n?i.switched=e.checked:o?i.switched=e.toggled:t?i.switched=e.checkedLink.value:r&&(i.switched=e.defaultSwitched),void 0!==i.switched&&i.switched!==this.props.switched&&this.props.onParentShouldUpdate(i.switched)},getTheme:function(){return this.context.muiTheme.palette},getStyles:function(){var e=this.context.muiTheme.spacing,t=60-e.desktopGutterLess,n="calc(100% - 60px)",o={root:{position:"relative",cursor:this.props.disabled?"default":"pointer",overflow:"visible",display:"table",height:"auto",width:"100%"},input:{position:"absolute",cursor:this.props.disabled?"default":"pointer",pointerEvents:"all",opacity:0,width:"100%",height:"100%",zIndex:2,left:0,boxSizing:"border-box",padding:0,margin:0},controls:{width:"100%",height:"100%"},label:{"float":"left",position:"relative",display:"block",width:n,lineHeight:"24px",color:this.getTheme().textColor},wrap:{transition:l.easeOut(),"float":"left",position:"relative",display:"block",width:t,marginRight:"right"===this.props.labelPosition?e.desktopGutterLess:0,marginLeft:"left"===this.props.labelPosition?e.desktopGutterLess:0},ripple:{height:"200%",width:"200%",top:-12,left:-12}};return o},render:function(){var e=this.props,t=(e.type,e.name,e.value,e.label,e.onSwitch,e.defaultSwitched,e.onBlur,e.onFocus,e.onMouseUp,e.onMouseDown,e.onMouseLeave,e.onTouchStart,e.onTouchEnd,e.disableTouchRipple),n=e.disableFocusRipple,s=e.className,a=o(e,["type","name","value","label","onSwitch","defaultSwitched","onBlur","onFocus","onMouseUp","onMouseDown","onMouseLeave","onTouchStart","onTouchEnd","disableTouchRipple","disableFocusRipple","className"]),l=this.getStyles(),p=this.mergeAndPrefix(l.wrap,this.props.iconStyle),m=this.mergeAndPrefix(l.ripple,this.props.rippleStyle),y=this.props.hasOwnProperty("rippleColor")?this.props.rippleColor:this.getTheme().primary1Color;this.props.thumbStyle&&(p.marginLeft/=2,p.marginRight/=2);var g=this.props.id||c.generate(),v=this.mergeAndPrefix(l.label,this.props.labelStyle),b=this.props.label?i.createElement("label",{style:v,htmlFor:g},this.props.label):null,T={ref:"checkbox",type:this.props.inputType,style:this.mergeAndPrefix(l.input),name:this.props.name,value:this.props.value,defaultChecked:this.props.defaultSwitched,onBlur:this._handleBlur,onFocus:this._handleFocus},x=this.props.disabled||t;x||(T.onMouseUp=this._handleMouseUp,T.onMouseDown=this._handleMouseDown,T.onMouseLeave=this._handleMouseLeave,T.onTouchStart=this._handleTouchStart,T.onTouchEnd=this._handleTouchEnd),this.props.hasOwnProperty("checkedLink")||(T.onChange=this._handleChange);var E=i.createElement("input",r({},a,T)),C=i.createElement(d,{ref:"touchRipple",key:"touchRipple",style:m,color:y,centerRipple:!0}),_=i.createElement(h,{key:"focusRipple",innerStyle:m,color:y,show:this.state.isKeyboardFocused}),P=[x?null:C,this.props.disabled||n?null:_],w=this.props.thumbStyle?i.createElement("div",{style:p},i.createElement("div",{style:this.props.trackStyle}),i.createElement(f,{style:this.props.thumbStyle,zDepth:1,circle:!0}," ",P," ")):i.createElement("div",{style:p},this.props.switchElement,P),D=this.props.labelPosition,S=D&&"RIGHT"===this.props.labelPosition.toUpperCase()?i.createElement(u,{style:this.mergeAndPrefix(l.controls)},w,b):i.createElement(u,{style:this.mergeAndPrefix(l.controls)},b,w);return i.createElement("div",{ref:"root",className:s,style:this.mergeAndPrefix(l.root,this.props.style)},E,S)},isSwitched:function(){return i.findDOMNode(this.refs.checkbox).checked},setSwitched:function(e){if(this.props.hasOwnProperty("checked")&&this.props.checked!==!1){if("production"!==n.env.NODE_ENV){var t="Cannot call set method while checked is defined as a property.";console.error(t)}}else this.props.onParentShouldUpdate(e),i.findDOMNode(this.refs.checkbox).checked=e},getValue:function(){return i.findDOMNode(this.refs.checkbox).value},isKeyboardFocused:function(){return this.state.isKeyboardFocused},_handleChange:function(e){this._tabPressed=!1,this.setState({isKeyboardFocused:!1});var t=i.findDOMNode(this.refs.checkbox).checked;this.props.hasOwnProperty("checked")||this.props.onParentShouldUpdate(t),this.props.onSwitch&&this.props.onSwitch(e,t)},_handleWindowKeydown:function(e){e.keyCode===s.TAB&&(this._tabPressed=!0),e.keyCode===s.SPACE&&this.state.isKeyboardFocused&&this._handleChange(e)},_handleWindowKeyup:function(e){e.keyCode===s.SPACE&&this.state.isKeyboardFocused&&this._handleChange(e)},_handleMouseDown:function(e){0===e.button&&this.refs.touchRipple.start(e)},_handleMouseUp:function(){this.refs.touchRipple.end()},_handleMouseLeave:function(){this.refs.touchRipple.end()},_handleTouchStart:function(e){this.refs.touchRipple.start(e)},_handleTouchEnd:function(){this.refs.touchRipple.end()},_handleBlur:function(e){this.setState({isKeyboardFocused:!1}),this.props.onBlur&&this.props.onBlur(e)},_handleFocus:function(e){var t=this;setTimeout(function(){t._tabPressed&&t.setState({isKeyboardFocused:!0})},150),this.props.onFocus&&this.props.onFocus(e)},_handleResize:function(){this.setState({parentWidth:this.getEvenWidth()})}});t.exports=m}).call(this,e("_process"))},{"./clearfix":16,"./mixins/style-propable":54,"./mixins/window-listenable":56,"./paper":58,"./ripples/focus-ripple":64,"./ripples/touch-ripple":66,"./styles/transitions":77,"./utils/key-code":133,"./utils/unique-id":138,_process:1,react:319}],31:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./styles/auto-prefix"),l=i.createClass({displayName:"EnhancedTextarea",mixins:[s],propTypes:{onChange:i.PropTypes.func,onHeightChange:i.PropTypes.func,textareaStyle:i.PropTypes.object,rows:i.PropTypes.number},getDefaultProps:function(){return{rows:1}},getInitialState:function(){return{height:24*this.props.rows}},componentDidMount:function(){this._syncHeightWithShadow()},getStyles:function(){var e={root:{width:"100%",resize:"none",overflow:"hidden",font:"inherit",padding:0}};return e},render:function(){var e=this.props,t=(e.onChange,e.onHeightChange,e.rows,e.style),n=e.textareaStyle,s=(e.valueLink,o(e,["onChange","onHeightChange","rows","style","textareaStyle","valueLink"])),l=this.getStyles().root,c={width:"100%",resize:"none",overflow:"hidden",font:"inherit",padding:0},p=this.mergeAndPrefix(l,{height:this.state.height+"px"});p=this.mergeAndPrefix(p,n);var u=this.mergeAndPrefix(c,{position:"absolute",opacity:0});return this.props.hasOwnProperty("valueLink")&&(s.value=this.props.valueLink.value),this.props.disabled&&(t.cursor="default"),i.createElement("div",{style:this.props.style},i.createElement("textarea",{ref:"shadow",style:a.all(u),tabIndex:"-1",rows:this.props.rows,defaultValue:this.props.defaultValue,readOnly:!0,value:this.props.value,valueLink:this.props.valueLink}),i.createElement("textarea",r({},s,{ref:"input",rows:this.props.rows,style:a.all(p),onChange:this._handleChange})))},getInputNode:function(){return i.findDOMNode(this.refs.input)},setValue:function(e){this.getInputNode().value=e,this._syncHeightWithShadow(e)},_syncHeightWithShadow:function(e,t){var n=i.findDOMNode(this.refs.shadow),o=this.state.height,r=void 0;void 0!==e&&(n.value=e),r=n.scrollHeight,o!==r&&(this.setState({height:r}),this.props.onHeightChange&&this.props.onHeightChange(t,r))},_handleChange:function(e){this._syncHeightWithShadow(e.target.value),this.props.hasOwnProperty("valueLink")&&this.props.valueLink.requestChange(e.target.value),this.props.onChange&&this.props.onChange(e)},componentWillReceiveProps:function(e){e.value!==this.props.value&&this._syncHeightWithShadow(e.value)}});t.exports=l},{"./mixins/style-propable":54,"./styles/auto-prefix":70,react:319}],32:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}function r(e,t,n){return e.children||e.label?void 0:new Error("Required prop label or children was not specified in "+n+".")}var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},s=e("react/addons"),a=s.addons.PureRenderMixin,l=e("./styles/transitions"),c=e("./utils/children"),p=e("./utils/color-manipulator"),u=e("./utils/immutability-helper"),h=e("./styles/typography"),d=e("./enhanced-button"),f=e("./buttons/flat-button-label"),m=s.createClass({displayName:"FlatButton",mixins:[a],contextTypes:{muiTheme:s.PropTypes.object},propTypes:{disabled:s.PropTypes.bool,hoverColor:s.PropTypes.string,label:r,labelStyle:s.PropTypes.object,onKeyboardFocus:s.PropTypes.func,onMouseEnter:s.PropTypes.func,onMouseLeave:s.PropTypes.func,onTouchStart:s.PropTypes.func,primary:s.PropTypes.bool,rippleColor:s.PropTypes.string,secondary:s.PropTypes.bool},getDefaultProps:function(){return{labelStyle:{},onKeyboardFocus:function(){},onMouseEnter:function(){},onMouseLeave:function(){},onTouchStart:function(){}}},getInitialState:function(){return{hovered:!1,isKeyboardFocused:!1,touch:!1}},getContextProps:function(){var e=this.context.muiTheme,t=e.component.button,n=e.component.flatButton;return{buttonColor:n.color,buttonHeight:t.height,buttonMinWidth:t.minWidth,disabledTextColor:n.disabledTextColor,primaryTextColor:n.primaryTextColor,secondaryTextColor:n.secondaryTextColor,textColor:n.textColor}},render:function(){var e=this.props,t=e.children,n=e.disabled,r=e.hoverColor,a=e.label,m=e.labelStyle,y=(e.onKeyboardFocus,e.onMouseLeave,e.onMouseEnter,e.onTouchStart,e.primary),g=e.rippleColor,v=e.secondary,b=e.style,T=o(e,["children","disabled","hoverColor","label","labelStyle","onKeyboardFocus","onMouseLeave","onMouseEnter","onTouchStart","primary","rippleColor","secondary","style"]),x=this.getContextProps(),E=n?x.disabledTextColor:y?x.primaryTextColor:v?x.secondaryTextColor:x.textColor,C=p.fade(p.lighten(E,.4),.15),_=p.fade(E,.8),P=r||C,w=g||_,D=(this.state.hovered||this.state.isKeyboardFocused)&&!n,S=u.merge({color:E,transition:l.easeOut(),fontSize:h.fontStyleButtonFontSize,letterSpacing:0,textTransform:"uppercase",fontWeight:h.fontWeightMedium,borderRadius:2,userSelect:"none",position:"relative",overflow:"hidden",backgroundColor:D?P:x.buttonColor,lineHeight:x.buttonHeight+"px",minWidth:x.buttonMinWidth,padding:0,margin:0,transform:"translate3d(0, 0, 0)"},b),O=a?s.createElement(f,{label:a,style:m}):void 0,M=c.create({labelElement:O,children:t});return s.createElement(d,i({},T,{disabled:n,focusRippleColor:w,onKeyboardFocus:this._handleKeyboardFocus,onMouseLeave:this._handleMouseLeave,onMouseEnter:this._handleMouseEnter,onTouchStart:this._handleTouchStart,style:S,touchRippleColor:w}),M)},_handleKeyboardFocus:function(e,t){this.setState({isKeyboardFocused:t}),this.props.onKeyboardFocus(e,t)},_handleMouseEnter:function(e){this.state.touch||this.setState({hovered:!0}),this.props.onMouseEnter(e)},_handleMouseLeave:function(e){this.setState({hovered:!1}),this.props.onMouseLeave(e)},_handleTouchStart:function(e){this.setState({touch:!0}),this.props.onTouchStart(e)}});t.exports=m},{"./buttons/flat-button-label":6,"./enhanced-button":29,"./styles/transitions":77,"./styles/typography":78,"./utils/children":124,"./utils/color-manipulator":125,"./utils/immutability-helper":131,"react/addons":147}],33:[function(e,t,n){(function(n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./styles/transitions"),l=e("./utils/color-manipulator"),c=e("./enhanced-button"),p=e("./font-icon"),u=e("./paper"),h=e("./utils/children"),d=function(e){var t=e?0:2;return{zDepth:t,initialZDepth:t}},f=i.createClass({displayName:"FloatingActionButton",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{backgroundColor:i.PropTypes.string,disabled:i.PropTypes.bool,disabledColor:i.PropTypes.string,iconClassName:i.PropTypes.string,iconStyle:i.PropTypes.object,mini:i.PropTypes.bool,onMouseDown:i.PropTypes.func,onMouseUp:i.PropTypes.func,onMouseLeave:i.PropTypes.func,onTouchEnd:i.PropTypes.func,onTouchStart:i.PropTypes.func,secondary:i.PropTypes.bool},getInitialState:function(){var e=this.props.disabled?0:2;return{hovered:!1,initialZDepth:e,touch:!1,zDepth:e}},componentWillMount:function(){this.setState(d(this.props.disabled))},componentWillReceiveProps:function(e){e.disabled!==this.props.disabled&&this.setState(d(e.disabled))},componentDidMount:function(){if("production"!==n.env.NODE_ENV&&this.props.iconClassName&&this.props.children){var e="You have set both an iconClassName and a child icon. It is recommended you use only one method when adding icons to FloatingActionButtons.";console.warn(e)}},_getBackgroundColor:function(){return this.props.disabled?this.props.disabledColor||this.getTheme().disabledColor:this.props.backgroundColor?this.props.backgroundColor:this.props.secondary?this.getTheme().secondaryColor:this.getTheme().color},getTheme:function(){return this.context.muiTheme.component.floatingActionButton},_getIconColor:function(){return this.props.disabled?this.getTheme().disabledTextColor:this.props.secondary?this.getTheme().secondaryIconColor:this.getTheme().iconColor},getStyles:function(){var e=this.context.muiTheme.component.floatingActionButton,t={root:{transition:a.easeOut(),display:"inline-block"},container:{transition:a.easeOut(),position:"relative",height:e.buttonSize,width:e.buttonSize,padding:0,overflow:"hidden",backgroundColor:this._getBackgroundColor(),borderRadius:"50%",textAlign:"center",verticalAlign:"bottom",transform:"translate3d(0, 0, 0)"},containerWhenMini:{height:e.miniSize,width:e.miniSize},overlay:{transition:a.easeOut(),top:0},overlayWhenHovered:{backgroundColor:l.fade(this._getIconColor(),.4)},icon:{height:e.buttonSize,lineHeight:e.buttonSize+"px",fill:e.iconColor,color:this._getIconColor()},iconWhenMini:{height:e.miniSize,lineHeight:e.miniSize+"px"}};return t},render:function(){var e=this.props,t=e.disabled,n=e.mini,s=(e.secondary,e.iconStyle),a=e.iconClassName,l=o(e,["disabled","mini","secondary","iconStyle","iconClassName"]),d=this.getStyles(),f=void 0;a&&(f=i.createElement(p,{className:a,style:this.mergeAndPrefix(d.icon,n&&d.iconWhenMini,s)}));var m=h.extend(this.props.children,{style:this.mergeAndPrefix(d.icon,n&&d.iconWhenMini,s)}),y=t?null:{onMouseDown:this._handleMouseDown,onMouseUp:this._handleMouseUp,onMouseLeave:this._handleMouseLeave,onMouseEnter:this._handleMouseEnter,onTouchStart:this._handleTouchStart,onTouchEnd:this._handleTouchEnd,onKeyboardFocus:this._handleKeyboardFocus};return i.createElement(u,{style:this.mergeAndPrefix(d.root,this.props.style),zDepth:this.state.zDepth,circle:!0},i.createElement(c,r({},l,y,{ref:"container",disabled:t,style:this.mergeAndPrefix(d.container,this.props.mini&&d.containerWhenMini),focusRippleColor:d.icon.color,touchRippleColor:d.icon.color}),i.createElement("div",{ref:"overlay",style:this.mergeAndPrefix(d.overlay,this.state.hovered&&!this.props.disabled&&d.overlayWhenHovered)},f,m)))},_handleMouseDown:function(e){0===e.button&&this.setState({zDepth:this.state.initialZDepth+1}),this.props.onMouseDown&&this.props.onMouseDown(e)},_handleMouseUp:function(e){this.setState({zDepth:this.state.initialZDepth}),this.props.onMouseUp&&this.props.onMouseUp(e)},_handleMouseLeave:function(e){this.refs.container.isKeyboardFocused()||this.setState({zDepth:this.state.initialZDepth,hovered:!1}),this.props.onMouseLeave&&this.props.onMouseLeave(e)},_handleMouseEnter:function(e){this.refs.container.isKeyboardFocused()||this.state.touch||this.setState({hovered:!0}),this.props.onMouseEnter&&this.props.onMouseEnter(e)},_handleTouchStart:function(e){this.setState({touch:!0,zDepth:this.state.initialZDepth+1}),this.props.onTouchStart&&this.props.onTouchStart(e)},_handleTouchEnd:function(e){this.setState({zDepth:this.state.initialZDepth}),this.props.onTouchEnd&&this.props.onTouchEnd(e)},_handleKeyboardFocus:function(e,t){t&&!this.props.disabled?(this.setState({zDepth:this.state.initialZDepth+1}),i.findDOMNode(this.refs.overlay).style.backgroundColor=l.fade(this.getStyles().icon.color,.4)):this.state.hovered||(this.setState({zDepth:this.state.initialZDepth}),i.findDOMNode(this.refs.overlay).style.backgroundColor="transparent")}});t.exports=f}).call(this,e("_process"))},{"./enhanced-button":29,"./font-icon":34,"./mixins/style-propable":54,"./paper":58,"./styles/transitions":77,"./utils/children":124,"./utils/color-manipulator":125,_process:1,react:319}],34:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./styles/transitions"),l=i.createClass({displayName:"FontIcon",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{color:i.PropTypes.string,hoverColor:i.PropTypes.string,onMouseLeave:i.PropTypes.func,onMouseEnter:i.PropTypes.func},getInitialState:function(){return{hovered:!1}},render:function(){var e=this.props,t=e.color,n=e.hoverColor,s=(e.onMouseLeave,e.onMouseEnter,e.style),l=o(e,["color","hoverColor","onMouseLeave","onMouseEnter","style"]),c=this.context.muiTheme.spacing,p=t?t:s&&s.color?s.color:this.context.muiTheme.palette.textColor,u=n?n:p,h=this.mergeAndPrefix({
position:"relative",fontSize:c.iconSize,display:"inline-block",userSelect:"none",transition:a.easeOut()},s,{color:this.state.hovered?u:p});return i.createElement("span",r({},l,{onMouseLeave:this._handleMouseLeave,onMouseEnter:this._handleMouseEnter,style:h}))},_handleMouseLeave:function(e){void 0!==this.props.hoverColor&&this.setState({hovered:!1}),this.props.onMouseLeave&&this.props.onMouseLeave(e)},_handleMouseEnter:function(e){void 0!==this.props.hoverColor&&this.setState({hovered:!0}),this.props.onMouseEnter&&this.props.onMouseEnter(e)}});t.exports=l},{"./mixins/style-propable":54,"./styles/transitions":77,react:319}],35:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./styles/transitions"),l=e("./utils/prop-types"),c=e("./enhanced-button"),p=e("./font-icon"),u=e("./tooltip"),h=e("./utils/children"),d=i.createClass({displayName:"IconButton",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{className:i.PropTypes.string,disabled:i.PropTypes.bool,iconClassName:i.PropTypes.string,iconStyle:i.PropTypes.object,onBlur:i.PropTypes.func,onFocus:i.PropTypes.func,onKeyboardFocus:i.PropTypes.func,tooltip:i.PropTypes.string,tooltipStyles:i.PropTypes.object,tooltipPosition:l.cornersAndCenter,touch:i.PropTypes.bool},getInitialState:function(){return{tooltipShown:!1}},getDefaultProps:function(){return{iconStyle:{},tooltipPosition:"bottom-center"}},getStyles:function(){var e=this.context.muiTheme.spacing,t=this.context.muiTheme.palette,n={root:{position:"relative",boxSizing:"border-box",transition:a.easeOut(),padding:e.iconSize/2,width:2*e.iconSize,height:2*e.iconSize,fontSize:0},tooltip:{boxSizing:"border-box"},icon:{color:t.textColor,fill:t.textColor},overlay:{position:"relative",top:0,width:"100%",height:"100%",background:t.disabledColor},disabled:{color:t.disabledColor,fill:t.disabledColor}};return n},render:function(){var e=this.props,t=e.disabled,n=e.iconClassName,s=e.tooltip,a=e.touch,l=e.iconStyle,d=o(e,["disabled","iconClassName","tooltip","touch","iconStyle"]),f=void 0,m=this.getStyles(),y=this.props.tooltipPosition.split("-"),g=s?i.createElement(u,{ref:"tooltip",label:s,show:this.state.tooltipShown,touch:a,style:this.mergeStyles(m.tooltip,this.props.tooltipStyles),verticalPosition:y[0],horizontalPosition:y[1]}):null;if(n){var v=l.iconHoverColor,b=o(l,["iconHoverColor"]);f=i.createElement(p,{className:n,hoverColor:t?null:v,style:this.mergeStyles(m.icon,t?m.disabled:{},b)},this.props.children)}var T=t?this.mergeStyles(l,m.disabled):l;return i.createElement(c,r({},d,{ref:"button",centerRipple:!0,disabled:t,style:this.mergeStyles(m.root,this.props.style),onBlur:this._handleBlur,onFocus:this._handleFocus,onMouseLeave:this._handleMouseLeave,onMouseEnter:this._handleMouseEnter,onKeyboardFocus:this._handleKeyboardFocus}),g,f,h.extend(this.props.children,{style:T}))},setKeyboardFocus:function(){this.refs.button.setKeyboardFocus()},_showTooltip:function(){!this.props.disabled&&this.props.tooltip&&this.setState({tooltipShown:!0})},_hideTooltip:function(){this.props.tooltip&&this.setState({tooltipShown:!1})},_handleBlur:function(e){this._hideTooltip(),this.props.onBlur&&this.props.onBlur(e)},_handleFocus:function(e){this._showTooltip(),this.props.onFocus&&this.props.onFocus(e)},_handleMouseLeave:function(e){this.refs.button.isKeyboardFocused()||this._hideTooltip(),this.props.onMouseLeave&&this.props.onMouseLeave(e)},_handleMouseEnter:function(e){this._showTooltip(),this.props.onMouseEnter&&this.props.onMouseEnter(e)},_handleKeyboardFocus:function(e,t){t&&!this.props.disabled?(this._showTooltip(),this.props.onFocus&&this.props.onFocus(e)):this.state.hovered||(this._hideTooltip(),this.props.onBlur&&this.props.onBlur(e)),this.props.onKeyboardFocus&&this.props.onKeyboardFocus(e,t)}});t.exports=d},{"./enhanced-button":29,"./font-icon":34,"./mixins/style-propable":54,"./styles/transitions":77,"./tooltip":119,"./utils/children":124,"./utils/prop-types":136,react:319}],36:[function(e,t,n){"use strict";t.exports={AppBar:e("./app-bar"),AppCanvas:e("./app-canvas"),Avatar:e("./avatar"),BeforeAfterWrapper:e("./before-after-wrapper"),Card:e("./card/card"),CardActions:e("./card/card-actions"),CardExpandable:e("./card/card-expandable"),CardHeader:e("./card/card-header"),CardMedia:e("./card/card-media"),CardText:e("./card/card-text"),CardTitle:e("./card/card-title"),Checkbox:e("./checkbox"),CircularProgress:e("./circular-progress"),ClearFix:e("./clearfix"),DatePicker:e("./date-picker/date-picker"),DatePickerDialog:e("./date-picker/date-picker-dialog"),Dialog:e("./dialog"),DropDownIcon:e("./drop-down-icon"),DropDownMenu:e("./drop-down-menu"),EnhancedButton:e("./enhanced-button"),FlatButton:e("./flat-button"),FloatingActionButton:e("./floating-action-button"),FontIcon:e("./font-icon"),IconButton:e("./icon-button"),IconMenu:e("./menus/icon-menu"),LeftNav:e("./left-nav"),LinearProgress:e("./linear-progress"),List:e("./lists/list"),ListDivider:e("./lists/list-divider"),ListItem:e("./lists/list-item"),Menu:e("./menu/menu"),MenuItem:e("./menu/menu-item"),Mixins:e("./mixins/"),Overlay:e("./overlay"),Paper:e("./paper"),RadioButton:e("./radio-button"),RadioButtonGroup:e("./radio-button-group"),RaisedButton:e("./raised-button"),RefreshIndicator:e("./refresh-indicator"),Ripples:e("./ripples/"),SelectField:e("./select-field"),Slider:e("./slider"),SvgIcon:e("./svg-icon"),Icons:{NavigationMenu:e("./svg-icons/navigation/menu"),NavigationChevronLeft:e("./svg-icons/navigation/chevron-left"),NavigationChevronRight:e("./svg-icons/navigation/chevron-right")},Styles:e("./styles/"),Snackbar:e("./snackbar"),Tab:e("./tabs/tab"),Tabs:e("./tabs/tabs"),Table:e("./table/table"),TableFooter:e("./table/table-footer"),TableHeader:e("./table/table-header"),TableHeaderColumn:e("./table/table-header-column"),Theme:e("./theme"),Toggle:e("./toggle"),TimePicker:e("./time-picker"),TextField:e("./text-field"),Toolbar:e("./toolbar/toolbar"),ToolbarGroup:e("./toolbar/toolbar-group"),ToolbarSeparator:e("./toolbar/toolbar-separator"),ToolbarTitle:e("./toolbar/toolbar-title"),Tooltip:e("./tooltip"),Utils:e("./utils/")}},{"./app-bar":2,"./app-canvas":3,"./avatar":4,"./before-after-wrapper":5,"./card/card":13,"./card/card-actions":7,"./card/card-expandable":8,"./card/card-header":9,"./card/card-media":10,"./card/card-text":11,"./card/card-title":12,"./checkbox":14,"./circular-progress":15,"./clearfix":16,"./date-picker/date-picker":23,"./date-picker/date-picker-dialog":22,"./dialog":26,"./drop-down-icon":27,"./drop-down-menu":28,"./enhanced-button":29,"./flat-button":32,"./floating-action-button":33,"./font-icon":34,"./icon-button":35,"./left-nav":38,"./linear-progress":39,"./lists/list":43,"./lists/list-divider":40,"./lists/list-item":41,"./menu/menu":46,"./menu/menu-item":45,"./menus/icon-menu":48,"./mixins/":53,"./overlay":57,"./paper":58,"./radio-button":60,"./radio-button-group":59,"./raised-button":61,"./refresh-indicator":62,"./ripples/":65,"./select-field":67,"./slider":68,"./snackbar":69,"./styles/":72,"./svg-icon":79,"./svg-icons/navigation/chevron-left":86,"./svg-icons/navigation/chevron-right":87,"./svg-icons/navigation/menu":88,"./table/table":98,"./table/table-footer":93,"./table/table-header":95,"./table/table-header-column":94,"./tabs/tab":99,"./tabs/tabs":101,"./text-field":102,"./theme":103,"./time-picker":110,"./toggle":114,"./toolbar/toolbar":118,"./toolbar/toolbar-group":115,"./toolbar/toolbar-separator":116,"./toolbar/toolbar-title":117,"./tooltip":119,"./utils/":132}],37:[function(e,t,n){"use strict";var o=e("react"),r=e("./styles/transitions"),i=e("./mixins/style-propable"),s=o.createClass({displayName:"InkBar",contextTypes:{muiTheme:o.PropTypes.object},propTypes:{left:o.PropTypes.string.isRequired,width:o.PropTypes.string.isRequired},mixins:[i],render:function(){var e=this.context.muiTheme.palette,t=this.mergeAndPrefix({left:this.props.left,width:this.props.width,bottom:0,display:"block",backgroundColor:e.accent1Color,height:2,marginTop:-2,position:"relative",transition:r.easeOut("1s","left")},this.props.style);return o.createElement("div",{style:t}," ")}});t.exports=s},{"./mixins/style-propable":54,"./styles/transitions":77,react:319}],38:[function(e,t,n){"use strict";var o=e("react"),r=e("./utils/key-code"),i=e("./mixins/style-propable"),s=e("./styles/auto-prefix"),a=e("./styles/transitions"),l=e("./mixins/window-listenable"),c=e("./overlay"),p=e("./paper"),u=e("./menu/menu"),h=null,d=o.createClass({displayName:"LeftNav",mixins:[i,l],contextTypes:{muiTheme:o.PropTypes.object},propTypes:{className:o.PropTypes.string,disableSwipeToOpen:o.PropTypes.bool,docked:o.PropTypes.bool,header:o.PropTypes.element,menuItems:o.PropTypes.array.isRequired,onChange:o.PropTypes.func,onNavOpen:o.PropTypes.func,onNavClose:o.PropTypes.func,openRight:o.PropTypes.bool,selectedIndex:o.PropTypes.number,menuItemClassName:o.PropTypes.string,menuItemClassNameSubheader:o.PropTypes.string,menuItemClassNameLink:o.PropTypes.string},windowListeners:{keyup:"_onWindowKeyUp",resize:"_onWindowResize"},getDefaultProps:function(){return{disableSwipeToOpen:!1,docked:!0}},getInitialState:function(){return this._maybeSwiping=!1,this._touchStartX=null,this._touchStartY=null,this._swipeStartX=null,{open:this.props.docked,swiping:null}},componentDidMount:function(){this._updateMenuHeight(),this._enableSwipeHandling()},componentDidUpdate:function(){this._updateMenuHeight(),this._enableSwipeHandling()},componentWillUnmount:function(){this._disableSwipeHandling()},toggle:function(){return this.setState({open:!this.state.open}),this},close:function(){return this.setState({open:!1}),this.props.onNavClose&&this.props.onNavClose(),this},open:function(){return this.setState({open:!0}),this.props.onNavOpen&&this.props.onNavOpen(),this},getThemePalette:function(){return this.context.muiTheme.palette},getTheme:function(){return this.context.muiTheme.component.leftNav},getStyles:function(){var e=this._getTranslateMultiplier()*(this.state.open?0:this._getMaxTranslateX()),t={root:{height:"100%",width:this.getTheme().width,position:"fixed",zIndex:10,left:0,top:0,transform:"translate3d("+e+"px, 0, 0)",transition:!this.state.swiping&&a.easeOut(),backgroundColor:this.getTheme().color,overflow:"hidden"},menu:{overflowY:"auto",overflowX:"hidden",height:"100%",borderRadius:"0"},menuItem:{height:this.context.muiTheme.spacing.desktopLeftNavMenuItemHeight,lineHeight:this.context.muiTheme.spacing.desktopLeftNavMenuItemHeight+"px"},rootWhenOpenRight:{left:"auto",right:0}};return t.menuItemLink=this.mergeAndPrefix(t.menuItem,{display:"block",textDecoration:"none",color:this.getThemePalette().textColor}),t.menuItemSubheader=this.mergeAndPrefix(t.menuItem,{overflow:"hidden"}),t},render:function(){var e=this.props.selectedIndex,t=void 0,n=this.getStyles();return this.props.docked||(t=o.createElement(c,{ref:"overlay",show:this.state.open||!!this.state.swiping,transitionEnabled:!this.state.swiping,onTouchTap:this._onOverlayTouchTap})),o.createElement("div",{className:this.props.className},t,o.createElement(p,{ref:"clickAwayableElement",zDepth:2,rounded:!1,transitionEnabled:!this.state.swiping,style:this.mergeAndPrefix(n.root,this.props.openRight&&n.rootWhenOpenRight,this.props.style)},this.props.header,o.createElement(u,{ref:"menuItems",style:this.mergeAndPrefix(n.menu),zDepth:0,menuItems:this.props.menuItems,menuItemStyle:this.mergeAndPrefix(n.menuItem),menuItemStyleLink:this.mergeAndPrefix(n.menuItemLink),menuItemStyleSubheader:this.mergeAndPrefix(n.menuItemSubheader),menuItemClassName:this.props.menuItemClassName,menuItemClassNameSubheader:this.props.menuItemClassNameSubheader,menuItemClassNameLink:this.props.menuItemClassNameLink,selectedIndex:e,onItemTap:this._onMenuItemClick})))},_updateMenuHeight:function(){if(this.props.header){var e=o.findDOMNode(this.refs.clickAwayableElement),t=o.findDOMNode(this.refs.menuItems),n=e.clientHeight-t.offsetTop;t.style.height=n+"px"}},_onMenuItemClick:function(e,t,n){this.props.onChange&&this.props.selectedIndex!==t&&this.props.onChange(e,t,n),this.props.docked||this.close()},_onOverlayTouchTap:function(){this.close()},_onWindowKeyUp:function(e){e.keyCode===r.ESC&&!this.props.docked&&this.state.open&&this.close()},_onWindowResize:function(){this._updateMenuHeight()},_getMaxTranslateX:function(){return this.getTheme().width+10},_getTranslateMultiplier:function(){return this.props.openRight?1:-1},_enableSwipeHandling:function(){this.props.docked?this._disableSwipeHandling():(document.body.addEventListener("touchstart",this._onBodyTouchStart),h||(h=this._onBodyTouchStart))},_disableSwipeHandling:function(){document.body.removeEventListener("touchstart",this._onBodyTouchStart),h===this._onBodyTouchStart&&(h=null)},_onBodyTouchStart:function(e){if(this.state.open||h===this._onBodyTouchStart&&!this.props.disableSwipeToOpen){var t=e.touches[0].pageX,n=e.touches[0].pageY;this._maybeSwiping=!0,this._touchStartX=t,this._touchStartY=n,document.body.addEventListener("touchmove",this._onBodyTouchMove),document.body.addEventListener("touchend",this._onBodyTouchEnd),document.body.addEventListener("touchcancel",this._onBodyTouchEnd)}},_setPosition:function(e){var t=o.findDOMNode(this.refs.clickAwayableElement);t.style[s.single("transform")]="translate3d("+this._getTranslateMultiplier()*e+"px, 0, 0)",this.refs.overlay.setOpacity(1-e/this._getMaxTranslateX())},_getTranslateX:function(e){return Math.min(Math.max("closing"===this.state.swiping?this._getTranslateMultiplier()*(e-this._swipeStartX):this._getMaxTranslateX()-this._getTranslateMultiplier()*(this._swipeStartX-e),0),this._getMaxTranslateX())},_onBodyTouchMove:function(e){var t=e.touches[0].pageX,n=e.touches[0].pageY;if(this.state.swiping)e.preventDefault(),this._setPosition(this._getTranslateX(t));else if(this._maybeSwiping){var o=Math.abs(t-this._touchStartX),r=Math.abs(n-this._touchStartY),i=10;o>i&&i>=r?(this._swipeStartX=t,this.setState({swiping:this.state.open?"closing":"opening"}),this._setPosition(this._getTranslateX(t))):i>=o&&r>i&&this._onBodyTouchEnd()}},_onBodyTouchEnd:function(e){if(this.state.swiping){var t=e.changedTouches[0].pageX,n=this._getTranslateX(t)/this._getMaxTranslateX();this._maybeSwiping=!1;var o=this.state.swiping;this.setState({swiping:null}),n>.5?"opening"===o?this._setPosition(this._getMaxTranslateX()):this.close():"opening"===o?this.open():this._setPosition(0)}else this._maybeSwiping=!1;document.body.removeEventListener("touchmove",this._onBodyTouchMove),document.body.removeEventListener("touchend",this._onBodyTouchEnd),document.body.removeEventListener("touchcancel",this._onBodyTouchEnd)}});t.exports=d},{"./menu/menu":46,"./mixins/style-propable":54,"./mixins/window-listenable":56,"./overlay":57,"./paper":58,"./styles/auto-prefix":70,"./styles/transitions":77,"./utils/key-code":133,react:319}],39:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./styles/transitions"),l=i.createClass({displayName:"LinearProgress",mixins:[s],propTypes:{mode:i.PropTypes.oneOf(["determinate","indeterminate"]),value:i.PropTypes.number,min:i.PropTypes.number,max:i.PropTypes.number},contextTypes:{muiTheme:i.PropTypes.object},_getRelativeValue:function(){var e=this.props.value,t=this.props.min,n=this.props.max,o=Math.min(Math.max(t,e),n),r=n-t,i=Math.round(o/r*1e4)/1e4;return 100*i},componentDidMount:function(){var e=this,t=i.findDOMNode(this.refs.bar1),n=i.findDOMNode(this.refs.bar2);this._barUpdate(0,t,[[-35,100],[100,-90]]),setTimeout(function(){e._barUpdate(0,n,[[-200,100],[107,-8]])},850)},_barUpdate:function(e,t,n){e=e||0,e%=4,setTimeout(this._barUpdate.bind(this,e+1,t,n),420),this.isMounted()&&"indeterminate"===this.props.mode&&(0===e?(t.style.left=n[0][0]+"%",t.style.right=n[0][1]+"%"):1===e?t.style.transitionDuration="840ms":2===e?(t.style.left=n[1][0]+"%",t.style.right=n[1][1]+"%"):3===e&&(t.style.transitionDuration="0ms"))},getDefaultProps:function(){return{mode:"indeterminate",value:0,min:0,max:100}},getTheme:function(){return this.context.muiTheme.palette},getStyles:function(){var e={root:{position:"relative",height:4,display:"block",width:"100%",backgroundColor:this.getTheme().primary3Color,borderRadius:2,margin:0,overflow:"hidden"},bar:{height:"100%"},barFragment1:{},barFragment2:{}};return"indeterminate"===this.props.mode?(e.barFragment1={position:"absolute",backgroundColor:this.getTheme().primary1Color,top:0,left:0,bottom:0,transition:a.create("all","840ms",null,"cubic-bezier(0.650, 0.815, 0.735, 0.395)")},e.barFragment2={position:"absolute",backgroundColor:this.getTheme().primary1Color,top:0,left:0,bottom:0,transition:a.create("all","840ms",null,"cubic-bezier(0.165, 0.840, 0.440, 1.000)")}):(e.bar.backgroundColor=this.getTheme().primary1Color,e.bar.transition=a.create("width",".3s",null,"linear"),e.bar.width=this._getRelativeValue()+"%"),e},render:function(){var e=this.props,t=e.style,n=o(e,["style"]),s=this.getStyles();return i.createElement("div",r({},n,{style:this.mergeAndPrefix(s.root,t)}),i.createElement("div",{style:this.mergeAndPrefix(s.bar)},i.createElement("div",{ref:"bar1",style:this.mergeAndPrefix(s.barFragment1)}),i.createElement("div",{ref:"bar2",style:this.mergeAndPrefix(s.barFragment2)})))}});t.exports=l},{"./mixins/style-propable":54,"./styles/transitions":77,react:319}],40:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=e("../mixins/style-propable"),a=i.createClass({displayName:"ListDivider",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{inset:i.PropTypes.bool},render:function(){var e=this.props,t=e.inset,n=e.style,s=o(e,["inset","style"]),a=this.mergeAndPrefix({margin:0,marginTop:-1,marginLeft:t?72:0,height:1,border:"none",backgroundColor:this.context.muiTheme.palette.borderColor},n);return i.createElement("hr",r({},s,{style:a}))}});t.exports=a},{"../mixins/style-propable":54,"react/addons":147}],41:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=i.addons.PureRenderMixin,a=e("../utils/color-manipulator"),l=e("../mixins/style-propable"),c=e("../styles/colors"),p=e("../styles/transitions"),u=e("../styles/typography"),h=e("../enhanced-button"),d=e("../icon-button"),f=e("../svg-icons/navigation/arrow-drop-up"),m=e("../svg-icons/navigation/arrow-drop-down"),y=e("./list-nested"),g=i.createClass({displayName:"ListItem",mixins:[s,l],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{autoGenerateNestedIndicator:i.PropTypes.bool,disabled:i.PropTypes.bool,disableKeyboardFocus:i.PropTypes.bool,innerDivStyle:i.PropTypes.object,insetChildren:i.PropTypes.bool,innerStyle:i.PropTypes.object,leftAvatar:i.PropTypes.element,leftCheckbox:i.PropTypes.element,leftIcon:i.PropTypes.element,nestedLevel:i.PropTypes.number,onKeyboardFocus:i.PropTypes.func,onMouseEnter:i.PropTypes.func,onMouseLeave:i.PropTypes.func,onNestedListToggle:i.PropTypes.func,onTouchStart:i.PropTypes.func,open:i.PropTypes.bool,rightAvatar:i.PropTypes.element,rightIcon:i.PropTypes.element,rightIconButton:i.PropTypes.element,rightToggle:i.PropTypes.element,primaryText:i.PropTypes.node,secondaryText:i.PropTypes.node,secondaryTextLines:i.PropTypes.oneOf([1,2])},getDefaultProps:function(){return{autoGenerateNestedIndicator:!0,nestedLevel:0,onKeyboardFocus:function(){},onMouseEnter:function(){},onMouseLeave:function(){},onNestedListToggle:function(){},onTouchStart:function(){},open:!1,secondaryTextLines:1}},getInitialState:function(){return{hovered:!1,isKeyboardFocused:!1,open:this.props.open,rightIconButtonHovered:!1,rightIconButtonKeyboardFocused:!1,touch:!1}},render:function(){var e=this.props,t=e.autoGenerateNestedIndicator,n=e.children,s=e.disabled,l=e.disableKeyboardFocus,g=e.innerDivStyle,v=e.insetChildren,b=e.leftAvatar,T=e.leftCheckbox,x=e.leftIcon,E=e.nestedLevel,C=(e.onKeyboardFocus,e.onMouseLeave,e.onMouseEnter,e.onTouchStart,e.rightAvatar),_=e.rightIcon,P=e.rightIconButton,w=e.rightToggle,D=e.primaryText,S=e.secondaryText,O=e.secondaryTextLines,M=e.style,N=o(e,["autoGenerateNestedIndicator","children","disabled","disableKeyboardFocus","innerDivStyle","insetChildren","leftAvatar","leftCheckbox","leftIcon","nestedLevel","onKeyboardFocus","onMouseLeave","onMouseEnter","onTouchStart","rightAvatar","rightIcon","rightIconButton","rightToggle","primaryText","secondaryText","secondaryTextLines","style"]),R=this.context.muiTheme.palette.textColor,k=a.fade(R,.1),I=!S&&(b||C),A=!S&&!(b||C),L=S&&1===O,j=S&&O>1,F=T||w,B={root:{backgroundColor:!this.state.isKeyboardFocused&&!this.state.hovered||this.state.rightIconButtonHovered||this.state.rightIconButtonKeyboardFocused?null:k,color:R,display:"block",fontSize:16,lineHeight:"16px",position:"relative",transition:p.easeOut()},innerDiv:{marginLeft:E*this.context.muiTheme.component.listItem.nestedLevelDepth,paddingLeft:x||b||T||v?72:16,paddingRight:_||C||P?56:w?72:16,paddingBottom:I?20:16,paddingTop:A||j?16:20,position:"relative"},icons:{height:24,width:24,display:"block",position:"absolute",top:L?12:I?4:0,padding:12},leftIcon:{color:c.grey600,fill:c.grey600,left:4},rightIcon:{color:c.grey400,fill:c.grey400,right:4},avatars:{position:"absolute",top:I?8:16},label:{cursor:"pointer"},leftAvatar:{left:16},rightAvatar:{right:16},leftCheckbox:{position:"absolute",display:"block",width:24,top:L?24:I?16:12,left:16},primaryText:{margin:0},rightIconButton:{position:"absolute",display:"block",top:L?12:I?4:0,right:4},rightToggle:{position:"absolute",display:"block",width:54,top:L?25:I?17:13,right:8},secondaryText:{fontSize:14,lineHeight:j?"18px":"16px",height:j?36:16,margin:0,marginTop:4,color:u.textLightBlack,overflow:"hidden",textOverflow:"ellipsis",whiteSpace:j?null:"nowrap",display:j?"-webkit-box":null,WebkitLineClamp:j?2:null,WebkitBoxOrient:j?"vertical":null}},V=[],U=[];i.Children.forEach(n,function(e){null!==e&&(i.isValidElement(e)&&"ListItem"===e.type.displayName?U.push(e):V.push(e))}),x&&this._pushElement(V,x,this.mergeStyles(B.icons,B.leftIcon)),_&&this._pushElement(V,_,this.mergeStyles(B.icons,B.rightIcon)),b&&this._pushElement(V,b,this.mergeStyles(B.avatars,B.leftAvatar)),C&&this._pushElement(V,C,this.mergeStyles(B.avatars,B.rightAvatar)),T&&this._pushElement(V,T,this.mergeStyles(B.leftCheckbox));var W=U.length,H=C||_||P||w,z=W&&t&&!H;if(P||z){var K=P,Y={onKeyboardFocus:this._handleRightIconButtonKeyboardFocus,onMouseEnter:this._handleRightIconButtonMouseEnter,onMouseLeave:this._handleRightIconButtonMouseLeave,onTouchTap:this._handleRightIconButtonTouchTap,onMouseDown:this._handleRightIconButtonMouseUp,onMouseUp:this._handleRightIconButtonMouseUp};z&&(K=this.state.open?i.createElement(d,null,i.createElement(f,null)):i.createElement(d,null,i.createElement(m,null)),Y.onTouchTap=this._handleNestedListToggle),this._pushElement(V,K,this.mergeStyles(B.rightIconButton),Y)}w&&this._pushElement(V,w,this.mergeStyles(B.rightToggle));var q=W?i.createElement(y,{nestedLevel:E+1,open:this.state.open},U):null;if(D){var G=this._createTextElement(B.primaryText,D,"primaryText");V.push(G)}if(S){var G=this._createTextElement(B.secondaryText,S,"secondaryText");V.push(G)}return F?this._createLabelElement(B,V):s?this._createDisabledElement(B,V):i.createElement("div",null,i.createElement(h,r({},N,{disabled:s,disableKeyboardFocus:l||this.state.rightIconButtonKeyboardFocused,linkButton:!0,onKeyboardFocus:this._handleKeyboardFocus,onMouseLeave:this._handleMouseLeave,onMouseEnter:this._handleMouseEnter,onTouchStart:this._handleTouchStart,ref:"enhancedButton",style:this.mergeAndPrefix(B.root,M)}),i.createElement("div",{style:this.mergeAndPrefix(B.innerDiv,g)},V)),q)},applyFocusState:function(e){var t=this.refs.enhancedButton,n=i.findDOMNode(t);if(t)switch(e){case"none":n.blur();break;case"focused":n.focus();break;case"keyboard-focused":t.setKeyboardFocus(),n.focus()}},_createDisabledElement:function(e,t){var n=this.props,o=n.innerDivStyle,r=n.style,s=this.mergeAndPrefix(e.root,e.innerDiv,o,r);return i.createElement("div",{style:s},t)},_createLabelElement:function(e,t){var n=this.props,o=n.innerDivStyle,r=n.style,s=this.mergeAndPrefix(e.root,e.innerDiv,o,e.label,r);return i.createElement("label",{style:s},t)},_createTextElement:function(e,t,n){var o=i.isValidElement(t),r=o?this.mergeStyles(e,t.props.style):null;return o?i.cloneElement(t,{key:n,style:r}):i.createElement("div",{key:n,style:e},t)},_handleKeyboardFocus:function(e,t){this.setState({isKeyboardFocused:t}),this.props.onKeyboardFocus(e,t)},_handleMouseEnter:function(e){this.state.touch||this.setState({hovered:!0}),this.props.onMouseEnter(e)},_handleMouseLeave:function(e){this.setState({hovered:!1}),this.props.onMouseLeave(e)},_handleNestedListToggle:function(e){e.stopPropagation(),this.setState({open:!this.state.open}),this.props.onNestedListToggle(this)},_handleRightIconButtonKeyboardFocus:function(e,t){var n=this.props.rightIconButton,o={};o.rightIconButtonKeyboardFocused=t,t&&(o.isKeyboardFocused=!1),this.setState(o),n&&n.props.onKeyboardFocus&&n.props.onKeyboardFocus(e,t)},_handleRightIconButtonMouseDown:function(e){var t=this.props.rightIconButton;e.stopPropagation(),t&&t.props.onMouseDown&&t.props.onMouseDown(e)},_handleRightIconButtonMouseLeave:function(e){var t=this.props.rightIconButton;this.setState({rightIconButtonHovered:!1}),t&&t.props.onMouseLeave&&t.props.onMouseLeave(e)},_handleRightIconButtonMouseEnter:function(e){var t=this.props.rightIconButton;this.setState({rightIconButtonHovered:!0}),t&&t.props.onMouseEnter&&t.props.onMouseEnter(e)},_handleRightIconButtonMouseUp:function(e){var t=this.props.rightIconButton;e.stopPropagation(),t&&t.props.onMouseUp&&t.props.onMouseUp(e)},_handleRightIconButtonTouchTap:function(e){var t=this.props.rightIconButton;e.stopPropagation(),t&&t.props.onTouchTap&&t.props.onTouchTap(e)},_handleTouchStart:function(e){this.setState({touch:!0}),this.props.onTouchStart(e)},_pushElement:function(e,t,n,o){if(t){var s=this.mergeStyles(n,t.props.style);e.push(i.cloneElement(t,r({key:e.length,style:s},o)))}}});t.exports=g},{"../enhanced-button":29,"../icon-button":35,"../mixins/style-propable":54,"../styles/colors":71,"../styles/transitions":77,"../styles/typography":78,"../svg-icons/navigation/arrow-drop-down":84,"../svg-icons/navigation/arrow-drop-up":85,"../utils/color-manipulator":125,"./list-nested":42,"react/addons":147}],42:[function(e,t,n){"use strict";var o=e("react"),r=e("./list"),i=o.createClass({displayName:"ListNested",propTypes:{nestedLevel:o.PropTypes.number,open:o.PropTypes.bool},getDefaultProps:function(){return{nestedLevel:1,open:!1}},render:function(){var e=this.props.nestedLevel,t={nestedList:{}};return this.props.open||(t.nestedList.display="none"),o.createElement(r,{style:t.nestedList},o.Children.map(this.props.children,function(t){return o.isValidElement(t)?o.cloneElement(t,{nestedLevel:e+1}):t}))}});t.exports=i},{"./list":43,react:319}],43:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=i.addons.PureRenderMixin,a=e("../utils/prop-types"),l=e("../mixins/style-propable"),c=e("../styles/typography"),p=e("../paper"),u=i.createClass({displayName:"List",mixins:[s,l],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{insetSubheader:i.PropTypes.bool,subheader:i.PropTypes.string,subheaderStyle:i.PropTypes.object,zDepth:a.zDepth},getDefaultProps:function(){return{zDepth:0}},render:function(){var e=this.props,t=e.children,n=e.insetSubheader,s=e.style,a=e.subheader,l=e.subheaderStyle,u=e.zDepth,h=o(e,["children","insetSubheader","style","subheader","subheaderStyle","zDepth"]),d={root:{padding:0,paddingBottom:8,paddingTop:a?0:8},subheader:{color:c.textLightBlack,fontSize:14,fontWeight:c.fontWeightMedium,lineHeight:"48px",paddingLeft:n?72:16}},f=void 0;if(a){var m=this.mergeAndPrefix(d.subheader,l);f=i.createElement("div",{style:m},a)}return i.createElement(p,r({},h,{style:this.mergeStyles(d.root,s),zDepth:u}),f,t)}});t.exports=u},{"../mixins/style-propable":54,"../paper":58,"../styles/typography":78,"../utils/prop-types":136,"react/addons":147}],44:[function(e,t,n){"use strict";var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=e("react"),i=e("../mixins/style-propable"),s=r.createClass({displayName:"LinkMenuItem",mixins:[i],contextTypes:{muiTheme:r.PropTypes.object},propTypes:{index:r.PropTypes.number.isRequired,payload:r.PropTypes.string.isRequired,text:r.PropTypes.string.isRequired,target:r.PropTypes.string,active:r.PropTypes.bool,disabled:r.PropTypes.bool,className:r.PropTypes.string},getDefaultProps:function(){return{active:!1,disabled:!1}},getInitialState:function(){return{hovered:!1}},getTheme:function(){return this.context.muiTheme.component.menuItem},getStyles:function(){var e={root:{userSelect:"none",cursor:"pointer",display:"block",lineHeight:this.getTheme().height+"px",paddingLeft:this.getTheme().padding,paddingRight:this.getTheme().padding},rootWhenHovered:{backgroundColor:this.getTheme().hoverColor},rootWhenSelected:{color:this.getTheme().selectedTextColor},rootWhenDisabled:{cursor:"default",color:this.context.muiTheme.palette.disabledColor}};return e},render:function(){var e=this.props.disabled?this._stopLink:void 0,t=this.props.disabled?"data-href":"href",n={};n[t]=this.props.payload;var i=this.getStyles(),s=this.mergeAndPrefix(i.root,this.props.selected&&i.rootWhenSelected,this.props.selected&&i.rootWhenSelected,this.props.active&&!this.props.disabled&&i.rootWhenHovered,this.props.style,this.props.disabled&&i.rootWhenDisabled);return r.createElement("a",o({key:this.props.index,target:this.props.target,style:s},n,{className:this.props.className,onClick:e,onMouseEnter:this._handleMouseEnter,onMouseLeave:this._handleMouseLeave}),this.props.text)},_stopLink:function(e){e.preventDefault()},_handleMouseEnter:function(e){this.setState({hovered:!0}),!this.props.disabled&&this.props.onMouseEnter&&this.props.onMouseEnter(e)},_handleMouseLeave:function(e){this.setState({hovered:!1}),!this.props.disabled&&this.props.onMouseLeave&&this.props.onMouseLeave(e)}});t.exports=s},{"../mixins/style-propable":54,react:319}],45:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../mixins/style-propable"),a=e("../font-icon"),l=e("../toggle"),c={LINK:"LINK",SUBHEADER:"SUBHEADER",NESTED:"NESTED"},p=i.createClass({displayName:"MenuItem",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{index:i.PropTypes.number.isRequired,
className:i.PropTypes.string,iconClassName:i.PropTypes.string,iconRightClassName:i.PropTypes.string,iconStyle:i.PropTypes.object,iconRightStyle:i.PropTypes.object,attribute:i.PropTypes.string,number:i.PropTypes.string,data:i.PropTypes.string,toggle:i.PropTypes.bool,disabled:i.PropTypes.bool,onTouchTap:i.PropTypes.func,onToggle:i.PropTypes.func,selected:i.PropTypes.bool,active:i.PropTypes.bool},statics:{Types:c},getDefaultProps:function(){return{toggle:!1,disabled:!1,active:!1}},getTheme:function(){return this.context.muiTheme.component.menuItem},getSpacing:function(){return this.context.muiTheme.spacing},getStyles:function(){var e={root:{userSelect:"none",cursor:"pointer",lineHeight:this.getTheme().height+"px",paddingLeft:this.getTheme().padding,paddingRight:this.getTheme().padding,color:this.context.muiTheme.palette.textColor},number:{"float":"right",width:24,textAlign:"center"},attribute:{"float":"right"},iconRight:{lineHeight:this.getTheme().height+"px","float":"right"},icon:{"float":"left",lineHeight:this.getTheme().height+"px",marginRight:this.getSpacing().desktopGutter},data:{display:"block",paddingLeft:2*this.getSpacing().desktopGutter,lineHeight:this.getTheme().dataHeight+"px",height:this.getTheme().dataHeight+"px",verticalAlign:"top",top:-12,position:"relative",fontWeight:300,color:this.context.muiTheme.palette.textColor},toggle:{marginTop:(this.getTheme().height-this.context.muiTheme.component.radioButton.size)/2,"float":"right",width:42},rootWhenHovered:{backgroundColor:this.getTheme().hoverColor},rootWhenSelected:{color:this.getTheme().selectedTextColor},rootWhenDisabled:{cursor:"default",color:this.context.muiTheme.palette.disabledColor}};return e},render:function(){var e=void 0,t=void 0,n=void 0,s=void 0,c=void 0,p=void 0,u=this.getStyles();if(this.props.iconClassName&&(e=i.createElement(a,{style:this.mergeAndPrefix(u.icon,this.props.iconStyle,this.props.selected&&u.rootWhenSelected),className:this.props.iconClassName})),this.props.iconRightClassName&&(n=i.createElement(a,{style:this.mergeAndPrefix(u.iconRight,this.props.iconRightStyle),className:this.props.iconRightClassName})),this.props.data&&(t=i.createElement("span",{style:this.mergeAndPrefix(u.data)},this.props.data)),void 0!==this.props.number&&(c=i.createElement("span",{style:this.mergeAndPrefix(u.number)},this.props.number)),void 0!==this.props.attribute&&(s=i.createElement("span",{style:this.mergeAndPrefix(u.style)},this.props.attribute)),this.props.icon&&(e=this.props.icon),this.props.toggle){var h=this.props,d=(h.toggle,h.onTouchTap,h.onToggle,h.onMouseEnter,h.onMouseLeave,h.children,h.label,h.style,o(h,["toggle","onTouchTap","onToggle","onMouseEnter","onMouseLeave","children","label","style"]));p=i.createElement(l,r({},d,{onToggle:this._handleToggle,style:u.toggle}))}return i.createElement("div",{key:this.props.index,className:this.props.className,onTouchTap:this._handleTouchTap,onMouseEnter:this._handleMouseEnter,onMouseLeave:this._handleMouseLeave,style:this.mergeAndPrefix(u.root,this.props.selected&&u.rootWhenSelected,this.props.active&&!this.props.disabled&&u.rootWhenHovered,this.props.style,this.props.disabled&&u.rootWhenDisabled)},e,this.props.children,t,s,c,p,n)},_handleTouchTap:function(e){!this.props.disabled&&this.props.onTouchTap&&this.props.onTouchTap(e,this.props.index)},_handleToggle:function(e,t){!this.props.disabled&&this.props.onToggle&&this.props.onToggle(e,this.props.index,t)},_handleMouseEnter:function(e){!this.props.disabled&&this.props.onMouseEnter&&this.props.onMouseEnter(e,this.props.index)},_handleMouseLeave:function(e){!this.props.disabled&&this.props.onMouseLeave&&this.props.onMouseLeave(e,this.props.index)}});t.exports=p},{"../font-icon":34,"../mixins/style-propable":54,"../toggle":114,react:319}],46:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../utils/css-event"),a=e("../utils/key-line"),l=e("../utils/key-code"),c=e("../mixins/style-propable"),p=e("../styles/transitions"),u=e("../mixins/click-awayable"),h=e("../paper"),d=e("./menu-item"),f=e("./link-menu-item"),m=e("./subheader-menu-item"),y=i.createClass({displayName:"NestedMenuItem",mixins:[u,c],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{index:i.PropTypes.number.isRequired,text:i.PropTypes.string,menuItems:i.PropTypes.array.isRequired,zDepth:i.PropTypes.number,disabled:i.PropTypes.bool,active:i.PropTypes.bool,onItemTap:i.PropTypes.func,menuItemStyle:i.PropTypes.object},getDefaultProps:function(){return{disabled:!1}},getInitialState:function(){return{open:!1,activeIndex:0}},componentClickAway:function(){this._closeNestedMenu()},componentDidMount:function(){this._positionNestedMenu();var e=this.getDOMNode();e.focus()},componentDidUpdate:function(){this._positionNestedMenu()},getSpacing:function(){return this.context.muiTheme.spacing},getStyles:function(){var e={root:{userSelect:"none",cursor:"pointer",lineHeight:this.getTheme().height+"px",color:this.context.muiTheme.palette.textColor},icon:{"float":"left",lineHeight:this.getTheme().height+"px",marginRight:this.getSpacing().desktopGutter},toggle:{marginTop:(this.getTheme().height-this.context.muiTheme.component.radioButton.size)/2,"float":"right",width:42},rootWhenHovered:{backgroundColor:this.getTheme().hoverColor},rootWhenSelected:{color:this.getTheme().selectedTextColor},rootWhenDisabled:{cursor:"default",color:this.context.muiTheme.palette.disabledColor}};return e},getTheme:function(){return this.context.muiTheme.component.menuItem},render:function(){var e=this.getStyles();e=this.mergeAndPrefix(e.root,this.props.active&&!this.props.disabled&&e.rootWhenHovered,{position:"relative"},this.props.style);var t={marginRight:-1*this.getSpacing().desktopGutterMini,color:this.context.muiTheme.component.dropDownMenu.accentColor},n=this.props,s=n.index,a=n.menuItemStyle,l=o(n,["index","menuItemStyle"]);return i.createElement("div",{ref:"root",style:e,onMouseEnter:this._openNestedMenu,onMouseLeave:this._closeNestedMenu,onMouseOver:this._handleMouseOver,onMouseOut:this._handleMouseOut},i.createElement(d,{index:s,style:a,disabled:this.props.disabled,iconRightStyle:t,iconRightClassName:"muidocs-icon-custom-arrow-drop-right",onTouchTap:this._onParentItemTap},this.props.text),i.createElement(g,r({},l,{ref:"nestedMenu",menuItems:this.props.menuItems,menuItemStyle:a,onItemTap:this._onMenuItemTap,hideable:!0,visible:this.state.open,onRequestClose:this._closeNestedMenu,zDepth:this.props.zDepth+1})))},toggleNestedMenu:function(){this.props.disabled||this.setState({open:!this.state.open})},isOpen:function(){return this.state.open},_positionNestedMenu:function(){var e=i.findDOMNode(this),t=i.findDOMNode(this.refs.nestedMenu);t.style.left=e.offsetWidth+"px"},_openNestedMenu:function(){this.props.disabled||this.setState({open:!0})},_closeNestedMenu:function(){this.setState({open:!1}),i.findDOMNode(this).focus()},_onParentItemTap:function(){this.toggleNestedMenu()},_onMenuItemTap:function(e,t,n){this.props.onItemTap&&this.props.onItemTap(e,t,n),this._closeNestedMenu()},_handleMouseOver:function(e){!this.props.disabled&&this.props.onMouseOver&&this.props.onMouseOver(e,this.props.index)},_handleMouseOut:function(e){!this.props.disabled&&this.props.onMouseOut&&this.props.onMouseOut(e,this.props.index)}}),g=i.createClass({displayName:"Menu",mixins:[c],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{autoWidth:i.PropTypes.bool,onItemTap:i.PropTypes.func,onToggle:i.PropTypes.func,onRequestClose:i.PropTypes.func,menuItems:i.PropTypes.array.isRequired,selectedIndex:i.PropTypes.number,hideable:i.PropTypes.bool,visible:i.PropTypes.bool,zDepth:i.PropTypes.number,menuItemStyle:i.PropTypes.object,menuItemStyleSubheader:i.PropTypes.object,menuItemStyleLink:i.PropTypes.object,menuItemClassName:i.PropTypes.string,menuItemClassNameSubheader:i.PropTypes.string,menuItemClassNameLink:i.PropTypes.string},getInitialState:function(){return{nestedMenuShown:!1,activeIndex:0}},getDefaultProps:function(){return{autoWidth:!0,hideable:!1,visible:!0,zDepth:1,onRequestClose:function(){}}},componentDidMount:function(){var e=i.findDOMNode(this);this._setKeyWidth(e),this._renderVisibility()},componentDidUpdate:function(e){(this.props.visible!==e.visible||this.props.menuItems.length!==e.menuItems.length)&&this._renderVisibility()},componentWillReceiveProps:function(){this._setKeyWidth(i.findDOMNode(this))},getTheme:function(){return this.context.muiTheme.component.menu},getSpacing:function(){return this.context.muiTheme.spacing},getStyles:function(){var e={root:{backgroundColor:this.getTheme().containerBackgroundColor,paddingTop:this.getSpacing().desktopGutterMini,paddingBottom:this.getSpacing().desktopGutterMini,transition:p.easeOut(null,"height"),outline:"none !important"},subheader:{paddingLeft:this.context.muiTheme.component.menuSubheader.padding,paddingRight:this.context.muiTheme.component.menuSubheader.padding},hideable:{overflow:"hidden",position:"absolute",top:0,zIndex:1},item:{height:34}};return e},render:function(){var e=this.getStyles();return i.createElement(h,{ref:"paperContainer",tabIndex:"0",onKeyDown:this._onKeyDown,zDepth:this.props.zDepth,style:this.mergeAndPrefix(e.root,this.props.hideable&&e.hideable,this.props.style)},this._getChildren())},_getChildren:function(){var e=void 0,t=void 0,n=void 0,s=this.getStyles();this._children=[],this._nestedChildren=[];for(var a=0;a<this.props.menuItems.length;a++){e=this.props.menuItems[a],n=void 0===e.disabled?!1:e.disabled;var l=(e.icon,e.data,e.attribute,e.number,e.toggle,e.onTouchTap,o(e,["icon","data","attribute","number","toggle","onTouchTap"]));switch(e.type){case d.Types.LINK:t=i.createElement(f,{key:a,index:a,active:this.state.activeIndex===a,text:e.text,disabled:n,className:this.props.menuItemClassNameLink,style:this.props.menuItemStyleLink,payload:e.payload,target:e.target});break;case d.Types.SUBHEADER:t=i.createElement(m,{key:a,index:a,className:this.props.menuItemClassNameSubheader,style:this.mergeAndPrefix(s.subheader,this.props.menuItemStyleSubheader),firstChild:0===a,text:e.text});break;case d.Types.NESTED:var c=this.props,l=(c.ref,c.key,c.index,c.zDepth,o(c,["ref","key","index","zDepth"]));t=i.createElement(y,r({},l,{ref:a,key:a,index:a,nested:!0,active:this.state.activeIndex===a,text:e.text,disabled:n,menuItems:e.items,menuItemStyle:this.props.menuItemStyle,zDepth:this.props.zDepth,onMouseEnter:this._onItemActivated,onMouseLeave:this._onItemDeactivated,onItemTap:this._onNestedItemTap})),this._nestedChildren.push(a);break;default:t=i.createElement(d,r({},l,{selected:this.props.selectedIndex===a,key:a,index:a,active:this.state.activeIndex===a,icon:e.icon,data:e.data,className:this.props.menuItemClassName,style:this.props.menuItemStyle,attribute:e.attribute,number:e.number,toggle:e.toggle,onToggle:this.props.onToggle,disabled:n,onTouchTap:this._onItemTap,onMouseEnter:this._onItemActivated,onMouseLeave:this._onItemDeactivated}),e.text)}this._children.push(t)}return this._children},_setKeyWidth:function(e){var t="100%";this.props.autoWidth&&(e.style.width="auto",t=a.getIncrementalDim(e.offsetWidth)+"px"),e.style.width=t},_renderVisibility:function(){this.props.hideable&&(this.props.visible?this._expandHideableMenu():this._collapseHideableMenu())},_expandHideableMenu:function(){var e=this,t=i.findDOMNode(this),n=i.findDOMNode(this.refs.paperContainer),o=this.getSpacing().desktopGutterMini,r=this._getHiddenMenuHeight(t,o);t.style.transition||(t.style.transition=p.easeOut()),this._nextAnimationFrame(function(){n.style.overflow="hidden",t.style.paddingTop=o+"px",t.style.paddingBottom=o+"px",t.style.height=r+"px",t.style.opacity=1,s.onTransitionEnd(t,function(){e.props.visible&&(n.style.overflow="visible"),t.style.transition=null,t.focus()})})},_getHiddenMenuHeight:function(e,t){var n=2*t;return e.style.visibility="hidden",e.style.height="auto",n+=e.offsetHeight,e.style.height="0px",e.style.visibility="visible",n},_collapseHideableMenu:function(){var e=i.findDOMNode(this),t=i.findDOMNode(this.refs.paperContainer),n=e.style.opacity;e.style.transition||""===n||(e.style.transition=p.easeOut()),this._nextAnimationFrame(function(){t.style.overflow="hidden",e.style.opacity=0,e.style.height="0px",e.style.paddingTop="0px",e.style.paddingBottom="0px";var o=function(){e.style.transition=null};""===n?o():s.onTransitionEnd(e,o)})},_nextAnimationFrame:function(e){return window.requestAnimationFrame?window.requestAnimationFrame(e):setTimeout(e,16)},_onNestedItemTap:function(e,t,n){this.props.onItemTap&&this.props.onItemTap(e,t,n)},_onItemTap:function(e,t){this.props.onItemTap&&this.props.onItemTap(e,t,this.props.menuItems[t])},_onItemToggle:function(e,t,n){this.props.onItemToggle&&this.props.onItemToggle(e,t,this.props.menuItems[t],n)},_onItemActivated:function(e,t){this.setState({activeIndex:t})},_onItemDeactivated:function(e,t){this.state.activeKey===t&&this.setState({activeIndex:0})},_onKeyDown:function(e){if(this.state.open||this.props.visible){var t=this._children[this.state.activeIndex];if(!(t&&t.props.nested&&this.refs[this.state.activeIndex].isOpen())){switch(e.which){case l.UP:this._activatePreviousItem();break;case l.DOWN:this._activateNextItem();break;case l.RIGHT:this._tryToggleNested(this.state.activeIndex);break;case l.LEFT:this._close();break;case l.ESC:this._close();break;case l.TAB:return void this._close();case l.ENTER:case l.SPACE:e.stopPropagation(),this._triggerSelection(e);break;default:return}e.preventDefault(),e.stopPropagation()}}},_activatePreviousItem:function(){var e=this.state.activeIndex||0;e=Math.max(e-1,0),this.setState({activeIndex:e})},_activateNextItem:function(){var e=this.state.activeIndex||0;e=Math.min(e+1,this._children.length-1),this.setState({activeIndex:e})},_triggerSelection:function(e){var t=this.state.activeIndex||0;this._onItemTap(e,t)},_close:function(){this.props.onRequestClose()},_tryToggleNested:function(e){var t=this.refs[e];t&&t.toggleNestedMenu&&t.toggleNestedMenu()}});t.exports=g},{"../mixins/click-awayable":51,"../mixins/style-propable":54,"../paper":58,"../styles/transitions":77,"../utils/css-event":126,"../utils/key-code":133,"../utils/key-line":134,"./link-menu-item":44,"./menu-item":45,"./subheader-menu-item":47,react:319}],47:[function(e,t,n){"use strict";var o=e("react"),r=e("../mixins/style-propable"),i=e("../styles/typography"),s=o.createClass({displayName:"SubheaderMenuItem",mixins:[r],contextTypes:{muiTheme:o.PropTypes.object},propTypes:{index:o.PropTypes.number.isRequired,text:o.PropTypes.string.isRequired,firstChild:o.PropTypes.bool,className:o.PropTypes.string},getTheme:function(){return this.context.muiTheme.component.menuSubheader},getSpacing:function(){return this.context.muiTheme.spacing},getStyles:function(){var e=this.getSpacing().desktopGutterMini,t=this.getSpacing().desktopSubheaderHeight,n={root:{boxSizing:"border-box",fontSize:"13px",letterSpacing:0,fontWeight:i.fontWeightMedium,margin:0,height:t+e,lineHeight:t+"px",color:this.getTheme().textColor,borderTop:"solid 1px "+this.getTheme().borderColor,paddingTop:e,marginTop:e},rootWhenFirstChild:{height:t,borderTop:"none",paddingTop:0,marginTop:0}};return n},render:function(){return o.createElement("div",{key:this.props.index,className:this.props.className,style:this.mergeAndPrefix(this.getStyles().root,this.props.firstChild&&this.getStyles().rootWhenFirstChild,this.props.style)},this.props.text)}});t.exports=s},{"../mixins/style-propable":54,"../styles/typography":78,react:319}],48:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=i.addons.TransitionGroup,a=e("../mixins/click-awayable"),l=e("../mixins/style-propable"),c=e("../utils/events"),p=e("../utils/prop-types"),u=e("../menus/menu"),h=i.createClass({displayName:"IconMenu",mixins:[l,a],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{closeOnItemTouchTap:i.PropTypes.bool,iconButtonElement:i.PropTypes.element.isRequired,openDirection:p.corners,onItemTouchTap:i.PropTypes.func,onKeyboardFocus:i.PropTypes.func,onMouseDown:i.PropTypes.func,onMouseLeave:i.PropTypes.func,onMouseEnter:i.PropTypes.func,onMouseUp:i.PropTypes.func,onTouchTap:i.PropTypes.func,menuStyle:i.PropTypes.object,touchTapCloseDelay:i.PropTypes.number},getDefaultProps:function(){return{closeOnItemTouchTap:!0,openDirection:"bottom-left",onItemTouchTap:function(){},onKeyboardFocus:function(){},onMouseDown:function(){},onMouseLeave:function(){},onMouseEnter:function(){},onMouseUp:function(){},onTouchTap:function(){},touchTapCloseDelay:200}},getInitialState:function(){return{iconButtonRef:this.props.iconButtonElement.props.ref||"iconButton",menuInitiallyKeyboardFocused:!1,open:!1}},componentWillUnmount:function(){this._timeout&&clearTimeout(this._timeout)},componentClickAway:function(){this.close()},render:function(){var e=this,t=this.props,n=(t.closeOnItemTouchTap,t.iconButtonElement),a=t.openDirection,l=(t.onItemTouchTap,t.onKeyboardFocus,t.onMouseDown),p=t.onMouseLeave,h=t.onMouseEnter,d=t.onMouseUp,f=t.onTouchTap,m=t.menuStyle,y=t.style,g=o(t,["closeOnItemTouchTap","iconButtonElement","openDirection","onItemTouchTap","onKeyboardFocus","onMouseDown","onMouseLeave","onMouseEnter","onMouseUp","onTouchTap","menuStyle","style"]),v=this.state.open,b="bottom"===a.split("-")[0],T="left"===a.split("-")[1],x={root:{display:"inline-block",position:"relative"},menu:{top:b?12:null,bottom:b?null:12,left:T?null:12,right:T?12:null}},E=this.mergeAndPrefix(x.root,y),C=this.mergeStyles(x.menu,m),_=i.cloneElement(n,{onKeyboardFocus:this.props.onKeyboardFocus,onTouchTap:function(t){e.open(c.isKeyboard(t)),n.props.onTouchTap&&n.props.onTouchTap(t)}.bind(this),ref:this.state.iconButtonRef}),P=v?i.createElement(u,r({},g,{animated:!0,initiallyKeyboardFocused:this.state.menuInitiallyKeyboardFocused,onEscKeyDown:this._handleMenuEscKeyDown,onItemTouchTap:this._handleItemTouchTap,openDirection:a,style:C}),this.props.children):null;return i.createElement("div",{onMouseDown:l,onMouseLeave:p,onMouseEnter:h,onMouseUp:d,onTouchTap:f,style:E},_,i.createElement(s,null,P))},isOpen:function(){return this.state.open},close:function(e){var t=this;this.state.open&&this.setState({open:!1},function(){if(e){var n=t.refs[t.state.iconButtonRef];i.findDOMNode(n).focus(),n.setKeyboardFocus()}})},open:function(e){this.state.open||this.setState({open:!0,menuInitiallyKeyboardFocused:e})},_handleItemTouchTap:function(e,t){var n=this;this.props.closeOnItemTouchTap&&!function(){var t=c.isKeyboard(e);n._timeout=setTimeout(function(){n.close(t)},n.props.touchTapCloseDelay)}(),this.props.onItemTouchTap(e,t)},_handleMenuEscKeyDown:function(){this.close(!0)}});t.exports=h},{"../menus/menu":49,"../mixins/click-awayable":51,"../mixins/style-propable":54,"../utils/events":129,"../utils/prop-types":136,"react/addons":147}],49:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=i.addons.update,a=e("../mixins/controllable"),l=e("../mixins/style-propable"),c=e("../styles/auto-prefix"),p=e("../styles/transitions"),u=e("../utils/key-code"),h=e("../utils/prop-types"),d=e("../lists/list"),f=e("../paper"),m=i.createClass({displayName:"Menu",mixins:[l,a],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{animated:i.PropTypes.bool,autoWidth:i.PropTypes.bool,desktop:i.PropTypes.bool,initiallyKeyboardFocused:i.PropTypes.bool,listStyle:i.PropTypes.object,maxHeight:i.PropTypes.number,multiple:i.PropTypes.bool,onEscKeyDown:i.PropTypes.func,onItemTouchTap:i.PropTypes.func,onKeyDown:i.PropTypes.func,openDirection:h.corners,selectedMenuItemStyle:i.PropTypes.object,width:h.stringOrNumber,zDepth:h.zDepth},getDefaultProps:function(){return{animated:!1,autoWidth:!0,maxHeight:null,onEscKeyDown:function(){},onItemTouchTap:function(){},onKeyDown:function(){},openDirection:"bottom-left",zDepth:1}},getInitialState:function(){var e=this._getSelectedIndex(this.props);return{focusIndex:e>=0?e:0,isKeyboardFocused:this.props.initiallyKeyboardFocused,keyWidth:this.props.desktop?64:56}},componentDidEnter:function(){this._animateOpen()},componentDidMount:function(){this.props.autoWidth&&this._setWidth(),this.props.animated||this._animateOpen(),this._setScollPosition()},componentDidUpdate:function(){this.props.autoWidth&&this._setWidth()},componentWillLeave:function(e){var t=this,n=i.findDOMNode(this).style;c.set(n,"transition",p.easeOut("250ms",["opacity","transform"])),c.set(n,"transform","translate3d(0,-8px,0)"),n.opacity=0,setTimeout(function(){t.isMounted()&&e()}.bind(this),250)},componentWillReceiveProps:function(e){var t=this._getSelectedIndex(e);this.setState({focusIndex:t>=0?t:0,keyWidth:e.desktop?64:56})},render:function(){var e=this,t=this.props,n=t.animated,s=(t.autoWidth,t.children),a=t.desktop,l=(t.initiallyKeyboardFocused,t.listStyle),c=t.maxHeight,u=(t.multiple,t.openDirection),h=(t.selectedMenuItemStyle,t.style),m=(t.value,t.valueLink,t.width),y=t.zDepth,g=o(t,["animated","autoWidth","children","desktop","initiallyKeyboardFocused","listStyle","maxHeight","multiple","openDirection","selectedMenuItemStyle","style","value","valueLink","width","zDepth"]),v="bottom"===u.split("-")[0],b="left"===u.split("-")[1],T={root:{transition:n?p.easeOut("250ms","transform"):null,position:"absolute",zIndex:10,top:v?0:null,bottom:v?null:0,left:b?null:0,right:b?0:null,transform:"scaleX(0)",transformOrigin:b?"right":"left"},list:{display:"table-cell",paddingBottom:a?16:8,paddingTop:a?16:8,userSelect:"none",width:m},menuItemContainer:{transition:n?p.easeOut(null,"opacity"):null,opacity:0},paper:{transition:n?p.easeOut("500ms",["transform","opacity"]):null,transform:"scaleY(0)",transformOrigin:v?"top":"bottom",opacity:0,maxHeight:c,overflowY:c?"scroll":null},selectedMenuItem:{color:this.context.muiTheme.palette.accent1Color}},x=this.mergeAndPrefix(T.root,h),E=this.mergeStyles(T.list,l),C=v?175:325,_=this._getCascadeChildrenCount(),P=Math.ceil(150/_),w=0,D=i.Children.map(s,function(t){var o="MenuDivider"===t.type.displayName,r=t.props.disabled,s={};if(n){var l=e.state.focusIndex,c=0;w>=l-1&&l+_-1>=w&&(C=v?C+P:C-P,c=C),s=e.mergeAndPrefix(T.menuItemContainer,{transitionDelay:c+"ms"})}var p=o?t:r?i.cloneElement(t,{desktop:a}):e._cloneMenuItem(t,w,T);return o||r||w++,n?i.createElement("div",{style:s},p):p}.bind(this));return i.createElement("div",{onKeyDown:this._handleKeyDown,style:x},i.createElement(f,{ref:"scrollContainer",style:T.paper,zDepth:y},i.createElement(d,r({},g,{ref:"list",style:E}),D)))},setKeyboardFocused:function(e){this.setState({isKeyboardFocused:e})},_animateOpen:function(){var e=i.findDOMNode(this).style,t=i.findDOMNode(this.refs.scrollContainer).style,n=i.findDOMNode(this.refs.list).childNodes;c.set(e,"transform","scaleX(1)"),c.set(t,"transform","scaleY(1)"),t.opacity=1;for(var o=0;o<n.length;++o)n[o].style.opacity=1},_cloneMenuItem:function(e,t,n){var o=this,r=this.props,s=r.desktop,a=r.selectedMenuItemStyle,l=this._isChildSelected(e,this.props),c={};l&&(c=this.mergeStyles(n.selectedMenuItem,a));var p=this.mergeStyles(e.props.style||{},c),u=t===this.state.focusIndex,h="none";return u&&(h=this.state.isKeyboardFocused?"keyboard-focused":"focused"),i.cloneElement(e,{desktop:s,focusState:h,onTouchTap:function(t){o._handleMenuItemTouchTap(t,e),e.props.onTouchTap&&e.props.onTouchTap(t)},ref:u?"focusedMenuItem":null,style:p})},_decrementKeyboardFocusIndex:function(){var e=this.state.focusIndex;e--,0>e&&(e=0),this._setFocusIndex(e,!0)},_getCascadeChildrenCount:function(){var e=this.props,t=e.children,n=e.desktop,o=e.maxHeight,r=1,s=n?16:8,a=n?32:48;return o?(i.Children.forEach(t,function(e){if(o>s){var t="MenuDivider"===e.type.displayName;s+=t?16:a,r++}}),r):i.Children.count(t)},_getMenuItemCount:function(){var e=0;return i.Children.forEach(this.props.children,function(t){var n="MenuDivider"===t.type.displayName,o=t.props.disabled;n||o||e++}),e},_getSelectedIndex:function(e){var t=this,n=e.children,o=-1,r=0;return i.Children.forEach(n,function(n){var i="MenuDivider"===n.type.displayName;t._isChildSelected(n,e)&&(o=r),i||r++}.bind(this)),o},_handleKeyDown:function(e){switch(e.keyCode){case u.DOWN:e.preventDefault(),this._incrementKeyboardFocusIndex();break;case u.ESC:this.props.onEscKeyDown(e);break;case u.TAB:e.preventDefault(),e.shiftKey?this._decrementKeyboardFocusIndex():this._incrementKeyboardFocusIndex();break;case u.UP:e.preventDefault(),this._decrementKeyboardFocusIndex()}this.props.onKeyDown(e)},_handleMenuItemTouchTap:function(e,t){var n=this.props.multiple,o=this.getValueLink(this.props),r=o.value,i=t.props.value;if(n){var a=r.indexOf(i),l=-1===a?s(r,{$push:[i]}):s(r,{$splice:[[a,1]]});o.requestChange(e,l)}else n||i===r||o.requestChange(e,i);this.props.onItemTouchTap(e,t)},_incrementKeyboardFocusIndex:function(){var e=this.state.focusIndex,t=this._getMenuItemCount()-1;e++,e>t&&(e=t),this._setFocusIndex(e,!0)},_isChildSelected:function(e,t){var n=t.multiple,o=this.getValueLink(t).value,r=e.props.value;return n&&o.length&&-1!==o.indexOf(r)||!n&&o&&o===r},_setFocusIndex:function(e,t){this.setState({focusIndex:e,isKeyboardFocused:t})},_setScollPosition:function(){var e=this.props.desktop,t=this.refs.focusedMenuItem,n=e?32:48;if(t){var o=i.findDOMNode(t).offsetTop,r=o-n;n>r&&(r=0),i.findDOMNode(this.refs.scrollContainer).scrollTop=r}},_setWidth:function(){var e=i.findDOMNode(this),t=i.findDOMNode(this.refs.list),n=e.offsetWidth,o=this.state.keyWidth,r=1.5*o,s=n/o,a=void 0;s=1.5>=s?1.5:Math.ceil(s),a=s*o,r>a&&(a=r),e.style.width=a+"px",t.style.width=a+"px"}});t.exports=m},{"../lists/list":43,"../mixins/controllable":52,"../mixins/style-propable":54,"../paper":58,"../styles/auto-prefix":70,"../styles/transitions":77,"../utils/key-code":133,"../utils/prop-types":136,"react/addons":147}],50:[function(e,t,n){"use strict";var o=e("react"),r=e("classnames");t.exports={propTypes:{className:o.PropTypes.string},getDefaultProps:function(){return{className:""}},getClasses:function(e,t){var n="";return this.props.className.length&&(n+=" "+this.props.className),n+="object"==typeof e?" "+r(e):" "+e,t&&(n+=" "+r(t)),r(this.getClassSet(n))},getClassSet:function(e){var t={};return e&&e.split(" ").forEach(function(e){e&&(t[e]=!0)}),t}}},{classnames:139,react:319}],51:[function(e,t,n){"use strict";var o=e("react"),r=e("../utils/events"),i=e("../utils/dom");t.exports={componentDidMount:function(){this.manuallyBindClickAway||this._bindClickAway()},componentWillUnmount:function(){this._unbindClickAway()},_checkClickAway:function(e){var t=o.findDOMNode(this);e.target!==t&&!i.isDescendant(t,e.target)&&document.documentElement.contains(e.target)&&this.componentClickAway&&this.componentClickAway()},_bindClickAway:function(){r.on(document,"mouseup",this._checkClickAway),r.on(document,"touchend",this._checkClickAway)},_unbindClickAway:function(){r.off(document,"mouseup",this._checkClickAway),r.off(document,"touchend",this._checkClickAway)}}},{"../utils/dom":128,"../utils/events":129,react:319}],52:[function(e,t,n){"use strict";var o=e("react/addons");t.exports={propTypes:{onChange:o.PropTypes.func,value:o.PropTypes.oneOfType([o.PropTypes.string,o.PropTypes.array]),valueLink:o.PropTypes.shape({value:o.PropTypes.string.isRequired,requestChange:o.PropTypes.func.isRequired})},getDefaultProps:function(){return{onChange:function(){}}},getValueLink:function(e){return e.valueLink||{value:e.value,requestChange:e.onChange}}}},{"react/addons":147}],53:[function(e,t,n){"use strict";t.exports={Classable:e("./classable"),ClickAwayable:e("./click-awayable"),WindowListenable:e("./window-listenable"),StylePropable:e("./style-propable"),StyleResizable:e("./style-resizable")}},{"./classable":50,"./click-awayable":51,"./style-propable":54,"./style-resizable":55,"./window-listenable":56}],54:[function(e,t,n){"use strict";var o=e("react"),r=e("../utils/immutability-helper"),i=e("../utils/styles");t.exports={propTypes:{style:o.PropTypes.object},mergeStyles:function(){return r.merge.apply(this,arguments)},mergeAndPrefix:function(){return i.mergeAndPrefix.apply(this,arguments)}}},{"../utils/immutability-helper":131,"../utils/styles":137,react:319}],55:[function(e,t,n){"use strict";var o=e("../utils/events"),r={SMALL:1,MEDIUM:2,LARGE:3};t.exports={statics:{Sizes:r},getInitialState:function(){return{deviceSize:r.SMALL}},componentDidMount:function(){this._updateDeviceSize(),this.manuallyBindResize||this._bindResize()},componentWillUnmount:function(){this._unbindResize()},isDeviceSize:function(e){return this.state.deviceSize>=e},_updateDeviceSize:function(){var e=window.innerWidth;this.setState(e>=992?{deviceSize:r.LARGE}:e>=768?{deviceSize:r.MEDIUM}:{deviceSize:r.SMALL})},_bindResize:function(){o.on(window,"resize",this._updateDeviceSize)},_unbindResize:function(){o.off(window,"resize",this._updateDeviceSize)}}},{"../utils/events":129}],56:[function(e,t,n){"use strict";var o=e("../utils/events");t.exports={componentDidMount:function(){var e=this.windowListeners;for(var t in e){var n=e[t];o.on(window,t,this[n])}},componentWillUnmount:function(){var e=this.windowListeners;for(var t in e){var n=e[t];o.off(window,t,this[n])}}}},{"../utils/events":129}],57:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./styles/transitions"),l=e("./styles/colors"),c=i.createClass({displayName:"Overlay",_originalBodyOverflow:"",mixins:[s],propTypes:{autoLockScrolling:i.PropTypes.bool,show:i.PropTypes.bool,transitionEnabled:i.PropTypes.bool},getDefaultProps:function(){return{autoLockScrolling:!0,transitionEnabled:!0}},componentDidMount:function(){this._originalBodyOverflow=document.getElementsByTagName("body")[0].style.oveflow},componentDidUpdate:function(){this.props.autoLockScrolling&&(this.props.show?this._preventScrolling():this._allowScrolling())},componentWillUnmount:function(){this._allowScrolling()},setOpacity:function(e){var t=i.findDOMNode(this);t.style.opacity=e},getStyles:function(){var e={root:{position:"fixed",height:"100%",width:"100%",zIndex:9,top:0,left:"-100%",opacity:0,backgroundColor:l.lightBlack,WebkitTapHighlightColor:"rgba(0, 0, 0, 0)",willChange:"opacity",transform:"translateZ(0)",transition:this.props.transitionEnabled&&a.easeOut("0ms","left","400ms")+","+a.easeOut("400ms","opacity")},rootWhenShown:{left:"0",opacity:1,transition:this.props.transitionEnabled&&a.easeOut("0ms","left")+","+a.easeOut("400ms","opacity")}};return e},render:function(){var e=this.props,t=(e.show,e.style,o(e,["show","style"])),n=this.mergeAndPrefix(this.getStyles().root,this.props.style,this.props.show&&this.getStyles().rootWhenShown);return i.createElement("div",r({},t,{style:n}))},preventScrolling:function(){this.props.autoLockScrolling||this._preventScrolling()},allowScrolling:function(){this.props.autoLockScrolling||this._allowScrolling()},_preventScrolling:function(){var e=document.getElementsByTagName("body")[0];e.style.overflow="hidden"},_allowScrolling:function(){var e=document.getElementsByTagName("body")[0];e.style.overflow=this._originalBodyOverflow||""}});t.exports=c},{"./mixins/style-propable":54,"./styles/colors":71,
"./styles/transitions":77,react:319}],58:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=i.addons.PureRenderMixin,a=e("./mixins/style-propable"),l=e("./utils/prop-types"),c=e("./styles/transitions"),p=i.createClass({displayName:"Paper",mixins:[s,a],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{circle:i.PropTypes.bool,rounded:i.PropTypes.bool,transitionEnabled:i.PropTypes.bool,zDepth:l.zDepth},getDefaultProps:function(){return{circle:!1,rounded:!0,transitionEnabled:!0,zDepth:1}},render:function(){var e=this.props,t=e.children,n=e.circle,s=e.rounded,a=e.style,l=e.transitionEnabled,p=e.zDepth,u=o(e,["children","circle","rounded","style","transitionEnabled","zDepth"]),h={backgroundColor:this.context.muiTheme.component.paper.backgroundColor,transition:l&&c.easeOut(),boxSizing:"border-box",fontFamily:this.context.muiTheme.contentFontFamily,WebkitTapHighlightColor:"rgba(0,0,0,0)",boxShadow:this._getZDepthShadows(p),borderRadius:n?"50%":s?"2px":"0px"};return i.createElement("div",r({},u,{style:this.mergeAndPrefix(h,a)}),t)},_getZDepthShadows:function(e){var t=[null,"0 1px 6px rgba(0, 0, 0, 0.12), 0 1px 4px rgba(0, 0, 0, 0.24)","0 3px 10px rgba(0, 0, 0, 0.16), 0 3px 10px rgba(0, 0, 0, 0.23)","0 10px 30px rgba(0, 0, 0, 0.19), 0 6px 10px rgba(0, 0, 0, 0.23)","0 14px 45px rgba(0, 0, 0, 0.25), 0 10px 18px rgba(0, 0, 0, 0.22)","0 19px 60px rgba(0, 0, 0, 0.30), 0 15px 20px rgba(0, 0, 0, 0.22)"];return t[e]}});t.exports=p},{"./mixins/style-propable":54,"./styles/transitions":77,"./utils/prop-types":136,"react/addons":147}],59:[function(e,t,n){(function(n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./radio-button"),a=i.createClass({displayName:"RadioButtonGroup",propTypes:{name:i.PropTypes.string.isRequired,valueSelected:i.PropTypes.string,defaultSelected:i.PropTypes.string,labelPosition:i.PropTypes.oneOf(["left","right"]),onChange:i.PropTypes.func},_hasCheckAttribute:function(e){return e.props.hasOwnProperty("checked")&&e.props.checked},getInitialState:function(){return{numberCheckedRadioButtons:0,selected:this.props.valueSelected||this.props.defaultSelected||""}},componentWillMount:function(){var e=this,t=0;i.Children.forEach(this.props.children,function(n){e._hasCheckAttribute(n)&&t++},this),this.setState({numberCheckedRadioButtons:t})},componentWillReceiveProps:function(e){e.hasOwnProperty("valueSelected")&&this.setState({selected:e.valueSelected})},render:function(){var e=this,t=i.Children.map(this.props.children,function(t){var n=t.props,a=(n.name,n.value,n.label,n.onCheck,o(n,["name","value","label","onCheck"]));return i.createElement(s,r({},a,{ref:t.props.value,name:e.props.name,key:t.props.value,value:t.props.value,label:t.props.label,labelPosition:e.props.labelPosition,onCheck:e._onChange,checked:t.props.value===e.state.selected}))},this);return i.createElement("div",{style:this.props.style,className:this.props.className||""},t)},_updateRadioButtons:function(e){if(0===this.state.numberCheckedRadioButtons)this.setState({selected:e});else if("production"!==n.env.NODE_ENV){var t="Cannot select a different radio button while another radio button has the 'checked' property set to true.";console.error(t)}},_onChange:function(e,t){this._updateRadioButtons(t),0===this.state.numberCheckedRadioButtons&&this.props.onChange&&this.props.onChange(e,t)},getSelectedValue:function(){return this.state.selected},setSelectedValue:function(e){this._updateRadioButtons(e)},clearValue:function(){this.setSelectedValue("")}});t.exports=a}).call(this,e("_process"))},{"./radio-button":60,_process:1,react:319}],60:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./styles/transitions"),l=e("./enhanced-switch"),c=e("./svg-icons/toggle/radio-button-unchecked"),p=e("./svg-icons/toggle/radio-button-checked"),u=i.createClass({displayName:"RadioButton",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{iconStyle:i.PropTypes.object,labelStyle:i.PropTypes.object,onCheck:i.PropTypes.func},getTheme:function(){return this.context.muiTheme.component.radioButton},getStyles:function(){var e={icon:{height:this.getTheme().size,width:this.getTheme().size},target:{transition:a.easeOut(),position:"absolute",opacity:1,transform:"scale(1)",fill:this.getTheme().borderColor},fill:{position:"absolute",opacity:1,transform:"scale(0)",transformOrigin:"50% 50%",transition:a.easeOut(),fill:this.getTheme().checkedColor},targetWhenChecked:{opacity:0,transform:"scale(0)"},fillWhenChecked:{opacity:1,transform:"scale(1)"},targetWhenDisabled:{fill:this.getTheme().disabledColor},fillWhenDisabled:{fill:this.getTheme().disabledColor},label:{color:this.props.disabled?this.getTheme().labelDisabledColor:this.getTheme().labelColor}};return e},render:function(){var e=this.props,t=(e.onCheck,o(e,["onCheck"])),n=this.getStyles(),s=this.mergeAndPrefix(n.target,this.props.checked&&n.targetWhenChecked,this.props.iconStyle,this.props.disabled&&n.targetWhenDisabled),a=this.mergeAndPrefix(n.fill,this.props.checked&&n.fillWhenChecked,this.props.iconStyle,this.props.disabled&&n.fillWhenDisabled),u=i.createElement("div",null,i.createElement(c,{style:s}),i.createElement(p,{style:a})),h=this.props.checked?this.getTheme().checkedColor:this.getTheme().borderColor,d=this.mergeAndPrefix(n.icon,this.props.iconStyle),f=this.mergeAndPrefix(n.label,this.props.labelStyle),m={ref:"enhancedSwitch",inputType:"radio",switched:this.props.checked||!1,switchElement:u,rippleColor:h,iconStyle:d,labelStyle:f,onSwitch:this._handleCheck,onParentShouldUpdate:this._handleStateChange,labelPosition:this.props.labelPosition?this.props.labelPosition:"right"};return i.createElement(l,r({},t,m))},_handleCheck:function(e){this.props.onCheck&&this.props.onCheck(e,this.props.value)},_handleStateChange:function(){},isChecked:function(){return this.refs.enhancedSwitch.isSwitched()},setChecked:function(e){this.refs.enhancedSwitch.setSwitched(e)},getValue:function(){return this.refs.enhancedSwitch.getValue()}});t.exports=u},{"./enhanced-switch":30,"./mixins/style-propable":54,"./styles/transitions":77,"./svg-icons/toggle/radio-button-checked":91,"./svg-icons/toggle/radio-button-unchecked":92,react:319}],61:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}function r(e,t,n){return e.children||e.label?void 0:new Error("Required prop label or children was not specified in "+n+".")}var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},s=e("react"),a=e("./mixins/style-propable"),l=e("./styles/transitions"),c=e("./utils/color-manipulator"),p=e("./styles/typography"),u=e("./enhanced-button"),h=e("./paper"),d=s.createClass({displayName:"RaisedButton",mixins:[a],contextTypes:{muiTheme:s.PropTypes.object},propTypes:{className:s.PropTypes.string,disabled:s.PropTypes.bool,label:r,onMouseDown:s.PropTypes.func,onMouseUp:s.PropTypes.func,onMouseLeave:s.PropTypes.func,onTouchEnd:s.PropTypes.func,onTouchStart:s.PropTypes.func,primary:s.PropTypes.bool,secondary:s.PropTypes.bool,labelStyle:s.PropTypes.object,backgroundColor:s.PropTypes.string,labelColor:s.PropTypes.string,disabledBackgroundColor:s.PropTypes.string,disabledLabelColor:s.PropTypes.string,fullWidth:s.PropTypes.bool},getInitialState:function(){var e=this.props.disabled?0:1;return{hovered:!1,touched:!1,initialZDepth:e,zDepth:e}},componentWillReceiveProps:function(e){var t=e.disabled?0:1;this.setState({zDepth:t,initialZDepth:t})},_getBackgroundColor:function(){var e=this.props.disabledBackgroundColor?this.props.disabledBackgroundColor:this.getTheme().disabledColor;return this.props.disabled?e:this.props.backgroundColor?this.props.backgroundColor:this.props.primary?this.getTheme().primaryColor:this.props.secondary?this.getTheme().secondaryColor:this.getTheme().color},_getLabelColor:function(){var e=this.props.disabledLabelColor?this.props.disabledLabelColor:this.getTheme().disabledTextColor;return this.props.disabled?e:this.props.labelColor?this.props.labelColor:this.props.primary?this.getTheme().primaryTextColor:this.props.secondary?this.getTheme().secondaryTextColor:this.getTheme().textColor},getThemeButton:function(){return this.context.muiTheme.component.button},getTheme:function(){return this.context.muiTheme.component.raisedButton},getStyles:function(){var e=this.props.primary||this.props.secondary?.4:.08,t={root:{backgroundColor:"none",display:"inline-block",minWidth:this.props.fullWidth?"100%":this.getThemeButton().minWidth,height:this.getThemeButton().height,transition:l.easeOut()},container:{position:"relative",height:"100%",width:"100%",padding:0,overflow:"hidden",borderRadius:2,transition:l.easeOut(),backgroundColor:this._getBackgroundColor(),transform:"translate3d(0, 0, 0)"},label:{position:"relative",opacity:1,fontSize:"14px",letterSpacing:0,textTransform:"uppercase",fontWeight:p.fontWeightMedium,margin:0,padding:"0px "+this.context.muiTheme.spacing.desktopGutterLess+"px",userSelect:"none",lineHeight:this.props.style&&this.props.style.height?this.props.style.height:this.getThemeButton().height+"px",color:this._getLabelColor()},overlay:{transition:l.easeOut(),top:0},overlayWhenHovered:{backgroundColor:c.fade(this._getLabelColor(),e)}};return t},render:function(){var e=this.props,t=e.disabled,n=e.label,r=e.primary,a=e.secondary,l=o(e,["disabled","label","primary","secondary"]),c=this.getStyles(),p=void 0;n&&(p=s.createElement("span",{style:this.mergeAndPrefix(c.label,this.props.labelStyle)},n));var d=c.label.color,f=r||a?.16:.1,m=t?null:{onMouseDown:this._handleMouseDown,onMouseUp:this._handleMouseUp,onMouseLeave:this._handleMouseLeave,onMouseEnter:this._handleMouseEnter,onTouchStart:this._handleTouchStart,onTouchEnd:this._handleTouchEnd,onKeyboardFocus:this._handleKeyboardFocus};return s.createElement(h,{style:this.mergeAndPrefix(c.root,this.props.style),zDepth:this.state.zDepth},s.createElement(u,i({},l,m,{ref:"container",disabled:t,style:this.mergeAndPrefix(c.container),focusRippleColor:d,touchRippleColor:d,focusRippleOpacity:f,touchRippleOpacity:f}),s.createElement("div",{ref:"overlay",style:this.mergeAndPrefix(c.overlay,this.state.hovered&&!this.props.disabled&&c.overlayWhenHovered)},p,this.props.children)))},_handleMouseDown:function(e){0===e.button&&this.setState({zDepth:this.state.initialZDepth+1}),this.props.onMouseDown&&this.props.onMouseDown(e)},_handleMouseUp:function(e){this.setState({zDepth:this.state.initialZDepth}),this.props.onMouseUp&&this.props.onMouseUp(e)},_handleMouseLeave:function(e){this.refs.container.isKeyboardFocused()||this.setState({zDepth:this.state.initialZDepth,hovered:!1}),this.props.onMouseLeave&&this.props.onMouseLeave(e)},_handleMouseEnter:function(e){this.refs.container.isKeyboardFocused()||this.state.touch||this.setState({hovered:!0}),this.props.onMouseEnter&&this.props.onMouseEnter(e)},_handleTouchStart:function(e){this.setState({touch:!0,zDepth:this.state.initialZDepth+1}),this.props.onTouchStart&&this.props.onTouchStart(e)},_handleTouchEnd:function(e){this.setState({zDepth:this.state.initialZDepth}),this.props.onTouchEnd&&this.props.onTouchEnd(e)},_handleKeyboardFocus:function(e,t){if(t&&!this.props.disabled){this.setState({zDepth:this.state.initialZDepth+1});var n=this.props.primary||this.props.secondary?.4:.08;s.findDOMNode(this.refs.overlay).style.backgroundColor=c.fade(this.mergeAndPrefix(this.getStyles().label,this.props.labelStyle).color,n)}else this.state.hovered||(this.setState({zDepth:this.state.initialZDepth}),s.findDOMNode(this.refs.overlay).style.backgroundColor="transparent")}});t.exports=d},{"./enhanced-button":29,"./mixins/style-propable":54,"./paper":58,"./styles/transitions":77,"./styles/typography":78,"./utils/color-manipulator":125,react:319}],62:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var r=function(){function e(e,t){var n=[],o=!0,r=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);o=!0);}catch(l){r=!0,i=l}finally{try{!o&&a["return"]&&a["return"]()}finally{if(r)throw i}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},s=e("react"),a=o(s),l=e("./mixins/style-propable"),c=e("./styles/auto-prefix"),p=e("./styles/transitions"),u=e("./paper"),h=32,d=a["default"].createClass({displayName:"RefreshIndicator",mixins:[l],propTypes:{left:a["default"].PropTypes.number.isRequired,percentage:a["default"].PropTypes.number,size:a["default"].PropTypes.number,status:a["default"].PropTypes.oneOf(["ready","loading","hide"]),style:a["default"].PropTypes.object,top:a["default"].PropTypes.number.isRequired},getDefaultProps:function(){return{percentage:0,size:40,status:"hide"}},contextTypes:{muiTheme:a["default"].PropTypes.object},componentDidMount:function(){this.componentDidUpdate()},componentDidUpdate:function(){this._scalePath(a["default"].findDOMNode(this.refs.path),0),this._rotateWrapper(a["default"].findDOMNode(this.refs.wrapper))},render:function(){var e=this._getRootStyle();return a["default"].createElement(u,{circle:!0,style:this.mergeAndPrefix(e,this.props.style),ref:"indicatorCt"},this._renderChildren())},_renderChildren:function(){var e=this._getPaperSize(),t=null;if("ready"!==this.props.status){var n=this._getCircleStyle(e);t=a["default"].createElement("div",{ref:"wrapper",style:this.mergeAndPrefix({transition:p.create("transform","20s",null,"linear"),width:"100%",height:"100%"})},a["default"].createElement("svg",{style:{width:e,height:e},viewBox:"0 0 "+h+" "+h},a["default"].createElement("circle",i({ref:"path",style:this.mergeAndPrefix(n.style,{transition:p.create("all","1.5s",null,"ease-in-out")})},n.attr))))}else{var n=this._getCircleStyle(e),o=this._getPolygonStyle(e);t=a["default"].createElement("svg",{style:{width:e,height:e},viewBox:"0 0 "+h+" "+h},a["default"].createElement("circle",i({style:this.mergeAndPrefix(n.style)},n.attr)),a["default"].createElement("polygon",i({style:this.mergeAndPrefix(o.style)},o.attr)))}return t},_getTheme:function(){return this.context.muiTheme.component.refreshIndicator},_getPaddingSize:function(){var e=.1*this.props.size;return e},_getPaperSize:function(){return this.props.size-2*this._getPaddingSize()},_getCircleAttr:function(){return{radiu:h/2-5,originX:h/2,originY:h/2,strokeWidth:3}},_getArcDeg:function(){var e=this.props.percentage/100,t=120*e,n=410*e;return[t,n]},_getFactor:function(){var e=this.props.percentage/100,t=Math.min(1,e/.4);return t},_getRootStyle:function(){var e=this._getPaddingSize();return{position:"absolute",zIndex:2,width:this.props.size,height:this.props.size,padding:e,top:-1e4,left:-1e4,transform:"translate3d("+(1e4+this.props.left)+"px, "+(1e4+this.props.top)+"px, 0)",opacity:"hide"===this.props.status?0:1,transition:"hide"===this.props.status?p.create("all",".3s","ease-out"):"none"}},_getCircleStyle:function(){var e="loading"===this.props.status,t=e?1:this._getFactor(),n=this._getCircleAttr(),o=2*Math.PI*n.radiu,i=this._getArcDeg(),s=r(i,2),a=s[0],l=s[1],c=(l-a)*o/360,p=-a*o/360,u=this._getTheme();return{style:{strokeDasharray:c+", "+(o-c),strokeDashoffset:p,stroke:e||100===this.props.percentage?u.loadingStrokeColor:u.strokeColor,strokeLinecap:"round",opacity:t,strokeWidth:n.strokeWidth*t,fill:"none"},attr:{cx:n.originX,cy:n.originY,r:n.radiu}}},_getPolygonStyle:function(){var e=this._getFactor(),t=this._getCircleAttr(),n=t.originX+t.radiu,o=t.originY,i=7*t.strokeWidth/4*e,s=n-i+","+o+" "+(n+i)+","+o+" "+n+","+(o+i),a=this._getArcDeg(),l=r(a,2),c=l[1],p=this._getTheme();return{style:{fill:100===this.props.percentage?p.loadingStrokeColor:p.strokeColor,transform:"rotate("+c+"deg)",transformOrigin:t.originX+"px "+t.originY+"px",opacity:e},attr:{points:s}}},_scalePath:function(e,t){if("loading"===this.props.status&&this.isMounted()){var n=(t||0)%3;clearTimeout(this._timer1),this._timer1=setTimeout(this._scalePath.bind(this,e,n+1),n?750:250);var o=this._getCircleAttr(),r=2*Math.PI*o.radiu,i=.64*r;0===n?(e.style.strokeDasharray="1, 200",e.style.strokeDashoffset=0,e.style[this.prefixed("transitionDuration")]="0ms"):1===n?(e.style.strokeDasharray=i+", 200",e.style.strokeDashoffset=-15,e.style[this.prefixed("transitionDuration")]="750ms"):(e.style.strokeDasharray=i+",200",e.style.strokeDashoffset=-(r-1),e.style[this.prefixed("transitionDuration")]="850ms")}},_rotateWrapper:function(e){var t=this;"loading"===this.props.status&&this.isMounted()&&(clearTimeout(this._timer2),this._timer2=setTimeout(this._rotateWrapper.bind(this,e),10050),c.set(e.style,"transform",null),c.set(e.style,"transform","rotate(0deg)"),c.set(e.style,"transitionDuration","0ms"),setTimeout(function(){t.isMounted()&&(c.set(e.style,"transform","rotate(1800deg)"),e.style.transitionDuration="10s",c.set(e.style,"transitionTimingFunction","linear"))},50))},prefixed:function(e){return c.single(e)}});t.exports=d},{"./mixins/style-propable":54,"./paper":58,"./styles/auto-prefix":70,"./styles/transitions":77,react:319}],63:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=i.addons.PureRenderMixin,a=e("../mixins/style-propable"),l=e("../styles/auto-prefix"),c=e("../styles/transitions"),p=e("../styles/colors"),u=i.createClass({displayName:"CircleRipple",mixins:[s,a],propTypes:{color:i.PropTypes.string,opacity:i.PropTypes.number},getDefaultProps:function(){return{color:p.darkBlack,opacity:.16}},componentWillAppear:function(e){this._initializeAnimation(e)},componentWillEnter:function(e){this._initializeAnimation(e)},componentDidAppear:function(){this._animate()},componentDidEnter:function(){this._animate()},componentWillLeave:function(e){var t=this,n=i.findDOMNode(this).style;n.opacity=0,setTimeout(function(){t.isMounted()&&e()}.bind(this),2e3)},render:function(){var e=this.props,t=e.color,n=(e.opacity,e.style),s=o(e,["color","opacity","style"]),a=this.mergeAndPrefix({position:"absolute",top:0,left:0,height:"100%",width:"100%",borderRadius:"50%",backgroundColor:t,transition:c.easeOut("2s","opacity")+","+c.easeOut("1s","transform")},n);return i.createElement("div",r({},s,{style:a}))},_animate:function(){var e=i.findDOMNode(this).style;l.set(e,"transform","scale(1)")},_initializeAnimation:function(e){var t=i.findDOMNode(this).style;t.opacity=this.props.opacity,l.set(t,"transform","scale(0)"),setTimeout(e,0)}});t.exports=u},{"../mixins/style-propable":54,"../styles/auto-prefix":70,"../styles/colors":71,"../styles/transitions":77,"react/addons":147}],64:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../mixins/style-propable"),s=e("../styles/auto-prefix"),a=e("../styles/colors"),l=e("../styles/transitions"),c=e("../transition-groups/scale-in"),p=750,u=o.createClass({displayName:"FocusRipple",mixins:[r,i],propTypes:{color:o.PropTypes.string,innerStyle:o.PropTypes.object,opacity:o.PropTypes.number,show:o.PropTypes.bool},getDefaultProps:function(){return{color:a.darkBlack}},componentDidMount:function(){this.props.show&&(this._setRippleSize(),this._pulsate())},componentDidUpdate:function(){this.props.show?(this._setRippleSize(),this._pulsate()):this._timeout&&clearTimeout(this._timeout)},render:function(){var e=this.props,t=e.show,n=e.style,r=this.mergeStyles({height:"100%",width:"100%",position:"absolute",top:0,left:0},n),i=t?this._getRippleElement(this.props):null;return o.createElement(c,{maxScale:.85,style:r},i)},_getRippleElement:function(e){var t=e.color,n=e.innerStyle,r=e.opacity,i=this.mergeAndPrefix({position:"absolute",height:"100%",width:"100%",borderRadius:"50%",opacity:r?r:.16,backgroundColor:t,transition:l.easeOut(p+"ms","transform",null,l.easeInOutFunction)},n);return o.createElement("div",{ref:"innerCircle",style:i})},_pulsate:function(){if(this.isMounted()){var e=o.findDOMNode(this.refs.innerCircle);if(e){var t="scale(1)",n="scale(0.85)",r=e.style[s.single("transform")],i=void 0;r=r||t,i=r===t?n:t,e.style[s.single("transform")]=i,this._timeout=setTimeout(this._pulsate,p)}}},_setRippleSize:function(){var e=o.findDOMNode(this.refs.innerCircle),t=e.offsetHeight,n=e.offsetWidth,r=Math.max(t,n);e.style.height=r+"px",e.style.top=r/2*-1+t/2+"px"}});t.exports=u},{"../mixins/style-propable":54,"../styles/auto-prefix":70,"../styles/colors":71,"../styles/transitions":77,"../transition-groups/scale-in":121,"react/addons":147}],65:[function(e,t,n){"use strict";t.exports={CircleRipple:e("./circle-ripple"),FocusRipple:e("./focus-ripple"),TouchRipple:e("./touch-ripple")}},{"./circle-ripple":63,"./focus-ripple":64,"./touch-ripple":66}],66:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=o.addons.TransitionGroup,s=e("../mixins/style-propable"),a=e("../utils/dom"),l=e("../utils/immutability-helper"),c=e("./circle-ripple"),p=o.createClass({displayName:"TouchRipple",mixins:[r,s],propTypes:{centerRipple:o.PropTypes.bool,color:o.PropTypes.string,opacity:o.PropTypes.number},getInitialState:function(){return{hasRipples:!1,nextKey:0,ripples:[]}},render:function(){var e=this.props,t=e.children,n=e.style,r=this.state,s=r.hasRipples,a=r.ripples,l=void 0;if(s){var c=this.mergeAndPrefix({height:"100%",width:"100%",position:"absolute",top:0,left:0,overflow:"hidden"},n);l=o.createElement(i,{style:c},a)}return o.createElement("div",{onMouseUp:this._handleMouseUp,onMouseDown:this._handleMouseDown,onMouseLeave:this._handleMouseLeave,onTouchStart:this._handleTouchStart,onTouchEnd:this._handleTouchEnd},l,t)},start:function(e,t){var n=this.state.ripples;if(!t)for(var r=0;r<n.length;r++)if(n[r].props.touchGenerated)return;n=l.push(n,o.createElement(c,{key:this.state.nextKey,style:this.props.centerRipple?{}:this._getRippleStyle(e),color:this.props.color,opacity:this.props.opacity,touchGenerated:t})),this.setState({hasRipples:!0,nextKey:this.state.nextKey+1,ripples:n})},end:function(){var e=this.state.ripples;this.setState({ripples:l.shift(e)})},_handleMouseDown:function(e){0===e.button&&this.start(e,!1)},_handleMouseUp:function(){this.end()},_handleMouseLeave:function(){this.end()},_handleTouchStart:function(e){this.start(e,!0)},_handleTouchEnd:function(){this.end()},_getRippleStyle:function(e){var t={},n=o.findDOMNode(this),r=n.offsetHeight,i=n.offsetWidth,s=a.offset(n),l=e.touches&&e.touches.length,c=l?e.touches[0].pageX:e.pageX,p=l?e.touches[0].pageY:e.pageY,u=c-s.left,h=p-s.top,d=this._calcDiag(u,h),f=this._calcDiag(i-u,h),m=this._calcDiag(i-u,r-h),y=this._calcDiag(u,r-h),g=Math.max(d,f,m,y),v=2*g,b=u-g,T=h-g;return t.height=v+"px",t.width=v+"px",t.top=T+"px",t.left=b+"px",t},_calcDiag:function(e,t){return Math.sqrt(e*e+t*t)}});t.exports=p},{"../mixins/style-propable":54,"../utils/dom":128,"../utils/immutability-helper":131,"./circle-ripple":63,"react/addons":147}],67:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./text-field"),l=e("./drop-down-menu"),c=i.createClass({displayName:"SelectField",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{errorText:i.PropTypes.string,floatingLabelText:i.PropTypes.string,selectFieldRoot:i.PropTypes.string,underlineStyle:i.PropTypes.object,labelStyle:i.PropTypes.object,errorStyle:i.PropTypes.object,hintText:i.PropTypes.string,id:i.PropTypes.string,multiLine:i.PropTypes.bool,onBlur:i.PropTypes.func,onChange:i.PropTypes.func,onFocus:i.PropTypes.func,onKeyDown:i.PropTypes.func,onEnterKeyDown:i.PropTypes.func,type:i.PropTypes.string,rows:i.PropTypes.number,inputStyle:i.PropTypes.object,iconStyle:i.PropTypes.object,floatingLabelStyle:i.PropTypes.object,autoWidth:i.PropTypes.bool,menuItems:i.PropTypes.array.isRequired,menuItemStyle:i.PropTypes.object,selectedIndex:i.PropTypes.number},getDefaultProps:function(){return{fullWidth:!1}},getStyles:function(){var e={root:{height:46,position:"relative",width:"100%",top:16,fontSize:16},label:{paddingLeft:0,top:4,width:"100%"},icon:{top:20,right:0},underline:{borderTop:"none"},input:{},error:{}};return this.props.floatingLabelText?e.error.bottom=-15:this.props.hintText?(e.root.top=-5,e.label.top=1,e.icon.top=17):e.root.top=-8,e},render:function(){var e=this.getStyles(),t=this.props,n=t.style,s=t.labelStyle,c=t.iconStyle,p=(t.underlineStyle,t.errorStyle),u=t.selectFieldRoot,h=t.menuItems,d=t.disabled,f=t.floatingLabelText,m=t.hintText,y=t.fullWidth,g=t.errorText,v=o(t,["style","labelStyle","iconStyle","underlineStyle","errorStyle","selectFieldRoot","menuItems","disabled","floatingLabelText","hintText","fullWidth","errorText"]),b={style:this.mergeAndPrefix(e.input,n),floatingLabelText:f,hintText:m||f?m:" ",fullWidth:y,errorText:g,errorStyle:this.mergeAndPrefix(e.error,p)},T={menuItems:h,disabled:d,style:this.mergeAndPrefix(e.root,u),labelStyle:this.mergeAndPrefix(e.label,s),iconStyle:this.mergeAndPrefix(e.icon,c),underlineStyle:this.mergeAndPrefix(e.underline),autoWidth:!1};return i.createElement(a,b,i.createElement(l,r({},T,v)))}});t.exports=c},{"./drop-down-menu":28,"./mixins/style-propable":54,"./text-field":102,react:319}],68:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("react-draggable2"),l=e("./styles/transitions"),c=e("./ripples/focus-ripple"),p=function(e,t,n){var o=i.PropTypes.number(e,t,n);if(null!==o)return o;if(e.min>=e.max){var r="min"===t?"min should be less than max":"max should be greater than min";return new Error(r)}},u=function(e,t,n){var o=i.PropTypes.number(e,t,n);if(null!==o)return o;var r=e[t];return r<e.min||e.max<r?new Error(t+" should be within the range specified by min and max"):void 0},h=i.createClass({displayName:"Slider",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{name:i.PropTypes.string.isRequired,defaultValue:u,description:i.PropTypes.string,disabled:i.PropTypes.bool,error:i.PropTypes.string,max:p,min:p,required:i.PropTypes.bool,step:i.PropTypes.number,onBlur:i.PropTypes.func,onChange:i.PropTypes.func,onDragStart:i.PropTypes.func,onDragStop:i.PropTypes.func,onFocus:i.PropTypes.func,value:u},getDefaultProps:function(){return{defaultValue:0,disabled:!1,max:1,min:0,required:!0,step:.01}},getInitialState:function(){var e=this.props.value;void 0===e&&(e=this.props.defaultValue);var t=(e-this.props.min)/(this.props.max-this.props.min);return isNaN(t)&&(t=0),{active:!1,dragging:!1,focused:!1,hovered:!1,percent:t,value:e}},componentWillReceiveProps:function(e){void 0!==e.value&&this.setValue(e.value)},getTheme:function(){return this.context.muiTheme.component.slider},getStyles:function(){var e=this.getTheme().handleSize+this.getTheme().trackSize,t=(this.getTheme().handleSizeDisabled+this.getTheme().trackSize)/2,n=this.getTheme().handleSizeDisabled-this.getTheme().trackSize,o={root:{touchCallout:"none",userSelect:"none",cursor:"default",height:this.getTheme().handleSizeActive,position:"relative",marginTop:24,marginBottom:48},track:{position:"absolute",top:(this.getTheme().handleSizeActive-this.getTheme().trackSize)/2,left:0,width:"100%",height:this.getTheme().trackSize},filledAndRemaining:{position:"absolute",top:0,height:"100%",transition:l.easeOut(null,"margin")},percentZeroRemaining:{left:1,marginLeft:t},handle:{boxSizing:"border-box",position:"absolute",cursor:"pointer",pointerEvents:"inherit",top:(this.getTheme().handleSizeActive-this.getTheme().trackSize)/2+"px",left:"0%",zIndex:1,margin:this.getTheme().trackSize/2+"px 0 0 0",width:this.getTheme().handleSize,height:this.getTheme().handleSize,backgroundColor:this.getTheme().selectionColor,backgroundClip:"padding-box",border:"0px solid transparent",borderRadius:"50%",transform:"translate(-50%, -50%)",transition:l.easeOut("450ms","border")+","+l.easeOut("450ms","width")+","+l.easeOut("450ms","height"),overflow:"visible"},handleWhenDisabled:{boxSizing:"content-box",cursor:"not-allowed",backgroundColor:this.getTheme().trackColor,width:this.getTheme().handleSizeDisabled,height:this.getTheme().handleSizeDisabled,border:"2px solid white"},handleWhenPercentZero:{border:this.getTheme().trackSize+"px solid "+this.getTheme().trackColor,backgroundColor:this.getTheme().handleFillColor,boxShadow:"none"},handleWhenActive:{borderColor:this.getTheme().trackColorSelected,width:this.getTheme().handleSizeActive,height:this.getTheme().handleSizeActive,transition:l.easeOut("450ms","backgroundColor")+","+l.easeOut("450ms","width")+","+l.easeOut("450ms","height")},ripples:{height:"300%",width:"300%",top:"-12px",left:"-12px"},handleWhenDisabledAndZero:{width:e/2+"px",height:e/2+"px"},handleWhenPercentZeroAndHovered:{border:this.getTheme().trackSize+"px solid "+this.getTheme().handleColorZero,width:e+"px",height:e+"px"}};return o.filled=this.mergeAndPrefix(o.filledAndRemaining,{left:0,backgroundColor:this.props.disabled?this.getTheme().trackColor:this.getTheme().selectionColor,marginRight:n,width:100*this.state.percent+(this.props.disabled?-1:0)+"%"}),o.remaining=this.mergeAndPrefix(o.filledAndRemaining,{right:0,backgroundColor:this.getTheme().trackColor,marginLeft:n,width:100*(1-this.state.percent)+(this.props.disabled?-1:0)+"%"}),o.percentZeroRemaining.width=o.remaining.width-o.percentZeroRemaining.left,o},render:function(){var e=o(this.props,[]),t=this.state.percent;t>1?t=1:0>t&&(t=0);var n=(this.getTheme().handleSizeDisabled+this.getTheme().trackSize)/2,s=this.getTheme().handleSizeDisabled-this.getTheme().trackSize,l=this.getStyles(),p=this.mergeAndPrefix(l.root,this.props.style),u=l.track,h=l.filled,d=this.mergeAndPrefix(l.remaining,0===t&&l.percentZeroRemaining),f=0===t?this.mergeAndPrefix(l.handle,l.handleWhenPercentZero,this.state.active&&l.handleWhenActive,this.state.focused&&{outline:"none"},this.state.hovered&&l.handleWhenPercentZeroAndHovered,this.props.disabled&&l.handleWhenDisabledAndZero):this.mergeAndPrefix(l.handle,this.state.active&&l.handleWhenActive,this.state.focused&&{outline:"none"},this.props.disabled&&l.handleWhenDisabled),m={height:"12px",width:"12px"};!this.state.hovered&&!this.state.focused||this.props.disabled||(d.backgroundColor=this.getTheme().trackColorSelected),0===t&&(h.marginRight=n),0===this.state.percent&&this.state.active&&(d.marginLeft=s);var y=(this.state.hovered||this.state.focused)&&!this.state.active&&0!==this.state.percent,g=0===this.state.percent?this.getTheme().handleColorZero:this.getTheme().rippleColor,v=void 0;

return this.props.disabled||this.props.disableFocusRipple||(v=i.createElement(c,{ref:"focusRipple",key:"focusRipple",style:m,innerStyle:l.ripples,show:y,color:g})),i.createElement("div",r({},e,{style:this.props.style}),i.createElement("span",{className:"mui-input-highlight"}),i.createElement("span",{className:"mui-input-bar"}),i.createElement("span",{className:"mui-input-description"},this.props.description),i.createElement("span",{className:"mui-input-error"},this.props.error),i.createElement("div",{style:p,onFocus:this._onFocus,onBlur:this._onBlur,onMouseDown:this._onMouseDown,onMouseEnter:this._onMouseEnter,onMouseLeave:this._onMouseLeave,onMouseUp:this._onMouseUp},i.createElement("div",{ref:"track",style:u},i.createElement("div",{style:h}),i.createElement("div",{style:d}),i.createElement(a,{axis:"x",bound:"point",cancel:this.props.disabled?"*":null,start:{x:100*t+"%"},constrain:this._constrain(),onStart:this._onDragStart,onStop:this._onDragStop,onDrag:this._onDragUpdate,onMouseDown:this._onMouseDownKnob},i.createElement("div",{style:f,tabIndex:0},v)))),i.createElement("input",{ref:"input",type:"hidden",name:this.props.name,value:this.state.value,required:this.props.required,min:this.props.min,max:this.props.max,step:this.props.step}))},getValue:function(){return this.state.value},setValue:function(e){var t=(e-this.props.min)/(this.props.max-this.props.min);isNaN(t)&&(t=0),this.setState({value:e,percent:t})},getPercent:function(){return this.state.percent},setPercent:function(e){var t=this._alignValue(this._percentToValue(e));this.setState({value:t,percent:e})},clearValue:function(){this.setValue(this.props.min)},_alignValue:function(e){var t=this.props,n=t.step,o=t.min,r=(e-o)%n,i=e-r;return 2*Math.abs(r)>=n&&(i+=r>0?n:-n),parseFloat(i.toFixed(5))},_constrain:function(){var e=this,t=this.props,n=t.min,o=t.max,r=t.step;return function(t){var s=i.findDOMNode(e.refs.track).clientWidth,a=s/((o-n)/r),l=n,c=void 0;for(c=0;(o-n)/r>c;c++){var p=t.left-l,u=l+a-t.left;if(!(Math.abs(p)>Math.abs(u)))break;l+=a}return{left:l}}},_onFocus:function(e){this.setState({focused:!0}),this.props.onFocus&&this.props.onFocus(e)},_onBlur:function(e){this.setState({focused:!1,active:!1}),this.props.onBlur&&this.props.onBlur(e)},_onMouseDown:function(e){this._pos=e.clientX},_onMouseEnter:function(){this.setState({hovered:!0})},_onMouseLeave:function(){this.setState({hovered:!1})},_onMouseUp:function(e){if(this.props.disabled||this.setState({active:!1}),!this.state.dragging&&Math.abs(this._pos-e.clientX)<5){var t=e.clientX-i.findDOMNode(this).getBoundingClientRect().left;this._dragX(e,t)}this._pos=void 0},_onMouseDownKnob:function(){this.props.disabled||this.setState({active:!0})},_onDragStart:function(e,t){this.setState({dragging:!0,active:!0}),this.props.onDragStart&&this.props.onDragStart(e,t)},_onDragStop:function(e,t){this.setState({dragging:!1,active:!1}),this.props.onDragStop&&this.props.onDragStop(e,t)},_onDragUpdate:function(e,t){this.state.dragging&&(this.props.disabled||this._dragX(e,t.position.left))},_dragX:function(e,t){var n=i.findDOMNode(this.refs.track).clientWidth;return 0>t?t=0:t>n&&(t=n),t===this.props.min?this._updateWithChangeEvent(e,0):void this._updateWithChangeEvent(e,t/n)},_updateWithChangeEvent:function(e,t){if(this.state.percent!==t){this.setPercent(t);var n=this._alignValue(this._percentToValue(t));this.props.onChange&&this.props.onChange(e,n)}},_percentToValue:function(e){return e*(this.props.max-this.props.min)+this.props.min}});t.exports=h},{"./mixins/style-propable":54,"./ripples/focus-ripple":64,"./styles/transitions":77,react:319,"react-draggable2":140}],69:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./utils/css-event"),a=e("./mixins/style-propable"),l=e("./styles/transitions"),c=e("./mixins/click-awayable"),p=e("./flat-button"),u=i.createClass({displayName:"Snackbar",mixins:[a,c],manuallyBindClickAway:!0,_autoHideTimerId:void 0,contextTypes:{muiTheme:i.PropTypes.object},propTypes:{message:i.PropTypes.string.isRequired,action:i.PropTypes.string,autoHideDuration:i.PropTypes.number,onActionTouchTap:i.PropTypes.func,openOnMount:i.PropTypes.bool},getInitialState:function(){return{open:this.props.openOnMount||!1}},componentDidMount:function(){this.props.openOnMount&&(this._setAutoHideTimer(),this._bindClickAway())},componentClickAway:function(){this.dismiss()},componentDidUpdate:function(e,t){var n=this;t.open!==this.state.open&&(this.state.open?(this._setAutoHideTimer(),s.onTransitionEnd(i.findDOMNode(this),function(){n._bindClickAway()})):this._unbindClickAway())},componentWillUnmount:function(){this._clearAutoHideTimer(),this._unbindClickAway()},getTheme:function(){return this.context.muiTheme.component.snackbar},getSpacing:function(){return this.context.muiTheme.spacing},getStyles:function(){var e={root:{color:this.getTheme().textColor,backgroundColor:this.getTheme().backgroundColor,borderRadius:2,padding:"0px "+this.getSpacing().desktopGutter+"px",height:this.getSpacing().desktopSubheaderHeight,lineHeight:this.getSpacing().desktopSubheaderHeight+"px",minWidth:288,maxWidth:568,position:"fixed",zIndex:10,bottom:this.getSpacing().desktopGutter,marginLeft:this.getSpacing().desktopGutter,left:0,opacity:0,visibility:"hidden",transform:"translate3d(0, 20px, 0)",transition:l.easeOut("0ms","left","400ms")+","+l.easeOut("400ms","opacity")+","+l.easeOut("400ms","transform")+","+l.easeOut("400ms","visibility")},action:{color:this.getTheme().actionColor,"float":"right",marginTop:6,marginRight:-16,marginLeft:this.getSpacing().desktopGutter,backgroundColor:"transparent"},rootWhenOpen:{opacity:1,visibility:"visible",transform:"translate3d(0, 0, 0)",transition:l.easeOut("0ms","left","0ms")+","+l.easeOut("400ms","opacity","0ms")+","+l.easeOut("400ms","transform","0ms")+","+l.easeOut("400ms","visibility","0ms")}};return e},render:function(){var e=this.props,t=e.action,n=e.message,s=e.onActionTouchTap,a=e.style,l=o(e,["action","message","onActionTouchTap","style"]),c=this.getStyles(),u=this.state.open?this.mergeStyles(c.root,c.rootWhenOpen,a):this.mergeStyles(c.root,a),h=void 0;return t&&(h=i.createElement(p,{style:c.action,label:t,onTouchTap:s})),i.createElement("span",r({},l,{style:u}),i.createElement("span",null,n),h)},show:function(){this.setState({open:!0})},dismiss:function(){this._clearAutoHideTimer(),this.setState({open:!1})},_clearAutoHideTimer:function(){void 0!==this._autoHideTimerId&&(this._autoHideTimerId=clearTimeout(this._autoHideTimerId))},_setAutoHideTimer:function(){var e=this;this.props.autoHideDuration>0&&(this._clearAutoHideTimer(),this._autoHideTimerId=setTimeout(function(){e.dismiss()},this.props.autoHideDuration))}});t.exports=u},{"./flat-button":32,"./mixins/click-awayable":51,"./mixins/style-propable":54,"./styles/transitions":77,"./utils/css-event":126,react:319}],70:[function(e,t,n){"use strict";var o="undefined"!=typeof window,r=o?e("../utils/modernizr.custom"):void 0,i={};t.exports={all:function(e){var t={};for(var n in e)t[this.single(n)]=e[n];return t},set:function(e,t,n){e[this.single(t)]=n},single:function(e){if(!o)return e;if(i.hasOwnProperty(e))return i[e];var t=r.prefixed(e);return t===!1?e:(i[e]=t,t)},singleHyphened:function(e){var t=this.single(e);return t?t.replace(/([A-Z])/g,function(e,t){return"-"+t.toLowerCase()}).replace(/^ms-/,"-ms-"):e}}},{"../utils/modernizr.custom":135}],71:[function(e,t,n){"use strict";t.exports={red50:"#ffebee",red100:"#ffcdd2",red200:"#ef9a9a",red300:"#e57373",red400:"#ef5350",red500:"#f44336",red600:"#e53935",red700:"#d32f2f",red800:"#c62828",red900:"#b71c1c",redA100:"#ff8a80",redA200:"#ff5252",redA400:"#ff1744",redA700:"#d50000",pink50:"#fce4ec",pink100:"#f8bbd0",pink200:"#f48fb1",pink300:"#f06292",pink400:"#ec407a",pink500:"#e91e63",pink600:"#d81b60",pink700:"#c2185b",pink800:"#ad1457",pink900:"#880e4f",pinkA100:"#ff80ab",pinkA200:"#ff4081",pinkA400:"#f50057",pinkA700:"#c51162",purple50:"#f3e5f5",purple100:"#e1bee7",purple200:"#ce93d8",purple300:"#ba68c8",purple400:"#ab47bc",purple500:"#9c27b0",purple600:"#8e24aa",purple700:"#7b1fa2",purple800:"#6a1b9a",purple900:"#4a148c",purpleA100:"#ea80fc",purpleA200:"#e040fb",purpleA400:"#d500f9",purpleA700:"#aa00ff",deepPurple50:"#ede7f6",deepPurple100:"#d1c4e9",deepPurple200:"#b39ddb",deepPurple300:"#9575cd",deepPurple400:"#7e57c2",deepPurple500:"#673ab7",deepPurple600:"#5e35b1",deepPurple700:"#512da8",deepPurple800:"#4527a0",deepPurple900:"#311b92",deepPurpleA100:"#b388ff",deepPurpleA200:"#7c4dff",deepPurpleA400:"#651fff",deepPurpleA700:"#6200ea",indigo50:"#e8eaf6",indigo100:"#c5cae9",indigo200:"#9fa8da",indigo300:"#7986cb",indigo400:"#5c6bc0",indigo500:"#3f51b5",indigo600:"#3949ab",indigo700:"#303f9f",indigo800:"#283593",indigo900:"#1a237e",indigoA100:"#8c9eff",indigoA200:"#536dfe",indigoA400:"#3d5afe",indigoA700:"#304ffe",blue50:"#e3f2fd",blue100:"#bbdefb",blue200:"#90caf9",blue300:"#64b5f6",blue400:"#42a5f5",blue500:"#2196f3",blue600:"#1e88e5",blue700:"#1976d2",blue800:"#1565c0",blue900:"#0d47a1",blueA100:"#82b1ff",blueA200:"#448aff",blueA400:"#2979ff",blueA700:"#2962ff",lightBlue50:"#e1f5fe",lightBlue100:"#b3e5fc",lightBlue200:"#81d4fa",lightBlue300:"#4fc3f7",lightBlue400:"#29b6f6",lightBlue500:"#03a9f4",lightBlue600:"#039be5",lightBlue700:"#0288d1",lightBlue800:"#0277bd",lightBlue900:"#01579b",lightBlueA100:"#80d8ff",lightBlueA200:"#40c4ff",lightBlueA400:"#00b0ff",lightBlueA700:"#0091ea",cyan50:"#e0f7fa",cyan100:"#b2ebf2",cyan200:"#80deea",cyan300:"#4dd0e1",cyan400:"#26c6da",cyan500:"#00bcd4",cyan600:"#00acc1",cyan700:"#0097a7",cyan800:"#00838f",cyan900:"#006064",cyanA100:"#84ffff",cyanA200:"#18ffff",cyanA400:"#00e5ff",cyanA700:"#00b8d4",teal50:"#e0f2f1",teal100:"#b2dfdb",teal200:"#80cbc4",teal300:"#4db6ac",teal400:"#26a69a",teal500:"#009688",teal600:"#00897b",teal700:"#00796b",teal800:"#00695c",teal900:"#004d40",tealA100:"#a7ffeb",tealA200:"#64ffda",tealA400:"#1de9b6",tealA700:"#00bfa5",green50:"#e8f5e9",green100:"#c8e6c9",green200:"#a5d6a7",green300:"#81c784",green400:"#66bb6a",green500:"#4caf50",green600:"#43a047",green700:"#388e3c",green800:"#2e7d32",green900:"#1b5e20",greenA100:"#b9f6ca",greenA200:"#69f0ae",greenA400:"#00e676",greenA700:"#00c853",lightGreen50:"#f1f8e9",lightGreen100:"#dcedc8",lightGreen200:"#c5e1a5",lightGreen300:"#aed581",lightGreen400:"#9ccc65",lightGreen500:"#8bc34a",lightGreen600:"#7cb342",lightGreen700:"#689f38",lightGreen800:"#558b2f",lightGreen900:"#33691e",lightGreenA100:"#ccff90",lightGreenA200:"#b2ff59",lightGreenA400:"#76ff03",lightGreenA700:"#64dd17",lime50:"#f9fbe7",lime100:"#f0f4c3",lime200:"#e6ee9c",lime300:"#dce775",lime400:"#d4e157",lime500:"#cddc39",lime600:"#c0ca33",lime700:"#afb42b",lime800:"#9e9d24",lime900:"#827717",limeA100:"#f4ff81",limeA200:"#eeff41",limeA400:"#c6ff00",limeA700:"#aeea00",yellow50:"#fffde7",yellow100:"#fff9c4",yellow200:"#fff59d",yellow300:"#fff176",yellow400:"#ffee58",yellow500:"#ffeb3b",yellow600:"#fdd835",yellow700:"#fbc02d",yellow800:"#f9a825",yellow900:"#f57f17",yellowA100:"#ffff8d",yellowA200:"#ffff00",yellowA400:"#ffea00",yellowA700:"#ffd600",amber50:"#fff8e1",amber100:"#ffecb3",amber200:"#ffe082",amber300:"#ffd54f",amber400:"#ffca28",amber500:"#ffc107",amber600:"#ffb300",amber700:"#ffa000",amber800:"#ff8f00",amber900:"#ff6f00",amberA100:"#ffe57f",amberA200:"#ffd740",amberA400:"#ffc400",amberA700:"#ffab00",orange50:"#fff3e0",orange100:"#ffe0b2",orange200:"#ffcc80",orange300:"#ffb74d",orange400:"#ffa726",orange500:"#ff9800",orange600:"#fb8c00",orange700:"#f57c00",orange800:"#ef6c00",orange900:"#e65100",orangeA100:"#ffd180",orangeA200:"#ffab40",orangeA400:"#ff9100",orangeA700:"#ff6d00",deepOrange50:"#fbe9e7",deepOrange100:"#ffccbc",deepOrange200:"#ffab91",deepOrange300:"#ff8a65",deepOrange400:"#ff7043",deepOrange500:"#ff5722",deepOrange600:"#f4511e",deepOrange700:"#e64a19",deepOrange800:"#d84315",deepOrange900:"#bf360c",deepOrangeA100:"#ff9e80",deepOrangeA200:"#ff6e40",deepOrangeA400:"#ff3d00",deepOrangeA700:"#dd2c00",brown50:"#efebe9",brown100:"#d7ccc8",brown200:"#bcaaa4",brown300:"#a1887f",brown400:"#8d6e63",brown500:"#795548",brown600:"#6d4c41",brown700:"#5d4037",brown800:"#4e342e",brown900:"#3e2723",blueGrey50:"#eceff1",blueGrey100:"#cfd8dc",blueGrey200:"#b0bec5",blueGrey300:"#90a4ae",blueGrey400:"#78909c",blueGrey500:"#607d8b",blueGrey600:"#546e7a",blueGrey700:"#455a64",blueGrey800:"#37474f",blueGrey900:"#263238",grey50:"#fafafa",grey100:"#f5f5f5",grey200:"#eeeeee",grey300:"#e0e0e0",grey400:"#bdbdbd",grey500:"#9e9e9e",grey600:"#757575",grey700:"#616161",grey800:"#424242",grey900:"#212121",black:"#000000",white:"#ffffff",transparent:"rgba(0, 0, 0, 0)",fullBlack:"rgba(0, 0, 0, 1)",darkBlack:"rgba(0, 0, 0, 0.87)",lightBlack:"rgba(0, 0, 0, 0.54)",minBlack:"rgba(0, 0, 0, 0.26)",faintBlack:"rgba(0, 0, 0, 0.12)",fullWhite:"rgba(255, 255, 255, 1)",darkWhite:"rgba(255, 255, 255, 0.87)",lightWhite:"rgba(255, 255, 255, 0.54)"}},{}],72:[function(e,t,n){"use strict";t.exports={AutoPrefix:e("./auto-prefix"),Colors:e("./colors"),Spacing:e("./spacing"),ThemeManager:e("./theme-manager"),Transitions:e("./transitions"),Typography:e("./typography")}},{"./auto-prefix":70,"./colors":71,"./spacing":73,"./theme-manager":74,"./transitions":77,"./typography":78}],73:[function(e,t,n){"use strict";t.exports={iconSize:24,desktopGutter:24,desktopGutterMore:32,desktopGutterLess:16,desktopGutterMini:8,desktopKeylineIncrement:64,desktopDropDownMenuItemHeight:32,desktopDropDownMenuFontSize:15,desktopLeftNavMenuItemHeight:48,desktopSubheaderHeight:48,desktopToolbarHeight:56}},{}],74:[function(e,t,n){"use strict";var o=e("../utils/extend"),r={LIGHT:e("./themes/light-theme"),DARK:e("./themes/dark-theme")},i=function(){return{types:r,template:r.LIGHT,spacing:r.LIGHT.spacing,contentFontFamily:"Roboto, sans-serif",palette:r.LIGHT.getPalette(),component:r.LIGHT.getComponentThemes(r.LIGHT.getPalette()),getCurrentTheme:function(){return this},setTheme:function(e){this.setSpacing(e.spacing),this.setPalette(e.getPalette()),this.setComponentThemes(e.getComponentThemes(e.getPalette()))},setSpacing:function(e){this.spacing=o(this.spacing,e),this.component=o(this.component,this.template.getComponentThemes(this.palette,this.spacing))},setPalette:function(e){this.palette=o(this.palette,e),this.component=o(this.component,this.template.getComponentThemes(this.palette))},setComponentThemes:function(e){this.component=o(this.component,e)}}};t.exports=i},{"../utils/extend":130,"./themes/dark-theme":75,"./themes/light-theme":76}],75:[function(e,t,n){"use strict";var o=e("../colors"),r=e("../../utils/color-manipulator"),i={getPalette:function(){return{textColor:o.fullWhite,canvasColor:"#303030",borderColor:r.fade(o.fullWhite,.3),disabledColor:r.fade(o.fullWhite,.3),primary1Color:o.teal200}},getComponentThemes:function(e){var t=o.grey800;return{avatar:{borderColor:"rgba(0, 0, 0, 0.5)"},floatingActionButton:{disabledColor:r.fade(e.textColor,.12)},leftNav:{color:t},menu:{backgroundColor:t,containerBackgroundColor:t},menuItem:{hoverColor:"rgba(255, 255, 255, .03)"},menuSubheader:{borderColor:"rgba(255, 255, 255, 0.3)"},paper:{backgroundColor:t},raisedButton:{color:o.grey500},toggle:{thumbOnColor:o.cyan200,thumbOffColor:o.grey400,thumbDisabledColor:o.grey800,thumbRequiredColor:o.cyan200,trackOnColor:r.fade(o.cyan200,.5),trackOffColor:"rgba(255, 255, 255, 0.3)",trackDisabledColor:"rgba(255, 255, 255, 0.1)"},refreshIndicator:{strokeColor:o.grey700,loadingStrokeColor:o.teal300},slider:{trackColor:o.minBlack,handleColorZero:t,handleFillColor:t,selectionColor:o.cyan200}}}};t.exports=i},{"../../utils/color-manipulator":125,"../colors":71}],76:[function(e,t,n){"use strict";var o=e("../colors"),r=e("../spacing"),i=e("../../utils/color-manipulator"),s={spacing:r,contentFontFamily:"Roboto, sans-serif",getPalette:function(){return{primary1Color:o.cyan500,primary2Color:o.cyan700,primary3Color:o.cyan100,accent1Color:o.pinkA200,accent2Color:o.pinkA400,accent3Color:o.pinkA100,textColor:o.darkBlack,canvasColor:o.white,borderColor:o.grey300,disabledColor:i.fade(o.darkBlack,.3)}},getComponentThemes:function(e,t){t=t||r;var n={appBar:{color:e.primary1Color,textColor:o.darkWhite,height:t.desktopKeylineIncrement},avatar:{borderColor:"rgba(0, 0, 0, 0.08)"},button:{height:36,minWidth:88,iconButtonSize:2*t.iconSize},checkbox:{boxColor:e.textColor,checkedColor:e.primary1Color,requiredColor:e.primary1Color,disabledColor:e.disabledColor,labelColor:e.textColor,labelDisabledColor:e.disabledColor},datePicker:{color:e.primary1Color,textColor:o.white,calendarTextColor:e.textColor,selectColor:e.primary2Color,selectTextColor:o.white},dropDownMenu:{accentColor:e.borderColor},flatButton:{color:e.canvasColor,textColor:e.textColor,primaryTextColor:e.accent1Color,secondaryTextColor:e.primary1Color},floatingActionButton:{buttonSize:56,miniSize:40,color:e.accent1Color,iconColor:o.white,secondaryColor:e.primary1Color,secondaryIconColor:o.white},leftNav:{width:4*t.desktopKeylineIncrement,color:o.white},listItem:{nestedLevelDepth:18},menu:{backgroundColor:o.white,containerBackgroundColor:o.white},menuItem:{dataHeight:32,height:48,hoverColor:"rgba(0, 0, 0, .035)",padding:t.desktopGutter,selectedTextColor:e.accent1Color},menuSubheader:{padding:t.desktopGutter,borderColor:e.borderColor,textColor:e.primary1Color},paper:{backgroundColor:o.white},radioButton:{borderColor:e.textColor,backgroundColor:o.white,checkedColor:e.primary1Color,requiredColor:e.primary1Color,disabledColor:e.disabledColor,size:24,labelColor:e.textColor,labelDisabledColor:e.disabledColor},raisedButton:{color:o.white,textColor:e.textColor,primaryColor:e.accent1Color,primaryTextColor:o.white,secondaryColor:e.primary1Color,secondaryTextColor:o.white},refreshIndicator:{strokeColor:o.grey300,loadingStrokeColor:e.primary1Color},slider:{trackSize:2,trackColor:o.minBlack,trackColorSelected:o.grey500,handleSize:12,handleSizeDisabled:8,handleColorZero:o.grey400,handleFillColor:o.white,selectionColor:e.primary3Color,rippleColor:e.primary1Color},snackbar:{textColor:o.white,backgroundColor:"#323232",actionColor:e.accent1Color},table:{backgroundColor:o.white},tableHeader:{borderColor:e.borderColor},tableHeaderColumn:{textColor:o.lightBlack,height:56,spacing:28},tableFooter:{borderColor:e.borderColor,textColor:o.lightBlack},tableRow:{hoverColor:o.grey200,stripeColor:i.lighten(e.primary1Color,.55),selectedColor:o.grey300,textColor:o.darkBlack,borderColor:e.borderColor},tableRowColumn:{height:48,spacing:28},timePicker:{color:o.white,textColor:o.grey600,accentColor:e.primary1Color,clockColor:o.black,selectColor:e.primary2Color,selectTextColor:o.white},toggle:{thumbOnColor:e.primary1Color,thumbOffColor:o.grey50,thumbDisabledColor:o.grey400,thumbRequiredColor:e.primary1Color,trackOnColor:i.fade(e.primary1Color,.5),trackOffColor:o.minBlack,trackDisabledColor:o.faintBlack,labelColor:e.textColor,labelDisabledColor:e.disabledColor},toolbar:{backgroundColor:i.darken("#eeeeee",.05),height:56,titleFontSize:20,iconColor:"rgba(0, 0, 0, .40)",separatorColor:"rgba(0, 0, 0, .175)",menuHoverColor:"rgba(0, 0, 0, .10)"},tabs:{backgroundColor:e.primary1Color},textField:{textColor:e.textColor,hintColor:e.disabledColor,floatingLabelColor:e.textColor,disabledTextColor:e.disabledColor,errorColor:o.red500,focusColor:e.primary1Color,backgroundColor:"transparent",borderColor:e.borderColor}};return n.flatButton.disabledTextColor=i.fade(n.flatButton.textColor,.3),n.floatingActionButton.disabledColor=i.darken(o.white,.1),n.floatingActionButton.disabledTextColor=i.fade(e.textColor,.3),n.raisedButton.disabledColor=i.darken(n.raisedButton.color,.1),n.raisedButton.disabledTextColor=i.fade(n.raisedButton.textColor,.3),n.slider.handleSizeActive=2*n.slider.handleSize,n.toggle.trackRequiredColor=i.fade(n.toggle.thumbRequiredColor,.5),n}};t.exports=s},{"../../utils/color-manipulator":125,"../colors":71,"../spacing":73}],77:[function(e,t,n){"use strict";var o=e("./auto-prefix");t.exports={easeOutFunction:"cubic-bezier(0.23, 1, 0.32, 1)",easeInOutFunction:"cubic-bezier(0.445, 0.05, 0.55, 0.95)",easeOut:function(e,t,n,o){if(o=o||this.easeOutFunction,t&&"[object Array]"===Object.prototype.toString.call(t)){for(var r="",i=0;i<t.length;i++)r&&(r+=","),r+=this.create(e,t[i],n,o);return r}return this.create(e,t,n,o)},create:function(e,t,n,r){return e=e||"450ms",t=t||"all",n=n||"0ms",r=r||"linear",o.singleHyphened(t)+" "+e+" "+r+" "+n}}},{"./auto-prefix":70}],78:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=e("./colors"),i=function s(){o(this,s),this.textFullBlack=r.fullBlack,this.textDarkBlack=r.darkBlack,this.textLightBlack=r.lightBlack,this.textMinBlack=r.minBlack,this.textFullWhite=r.fullWhite,this.textDarkWhite=r.darkWhite,this.textLightWhite=r.lightWhite,this.fontWeightLight=300,this.fontWeightNormal=400,this.fontWeightMedium=500,this.fontStyleButtonFontSize=14};t.exports=new i},{"./colors":71}],79:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./styles/transitions"),l=i.createClass({displayName:"SvgIcon",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{color:i.PropTypes.string,hoverColor:i.PropTypes.string,onMouseEnter:i.PropTypes.func,onMouseLeave:i.PropTypes.func,viewBox:i.PropTypes.string},getInitialState:function(){return{hovered:!1}},getDefaultProps:function(){return{onMouseEnter:function(){},onMouseLeave:function(){},viewBox:"0 0 24 24"}},render:function(){var e=this.props,t=e.children,n=e.color,s=e.hoverColor,l=(e.onMouseEnter,e.onMouseLeave,e.style),c=e.viewBox,p=o(e,["children","color","hoverColor","onMouseEnter","onMouseLeave","style","viewBox"]),u=n?n:l&&l.fill?l.fill:this.context.muiTheme.palette.textColor,h=s?s:u,d=this.mergeAndPrefix({display:"inline-block",height:24,width:24,userSelect:"none",transition:a.easeOut()},l,{fill:this.state.hovered?h:u}),f=s?{onMouseEnter:this._handleMouseEnter,onMouseLeave:this._handleMouseLeave}:{};return i.createElement("svg",r({},p,f,{style:d,viewBox:c}),t)},_handleMouseLeave:function(e){this.setState({hovered:!1}),this.props.onMouseLeave(e)},_handleMouseEnter:function(e){this.setState({hovered:!0}),this.props.onMouseEnter(e)}});t.exports=l},{"./mixins/style-propable":54,"./styles/transitions":77,react:319}],80:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../../svg-icon"),s=o.createClass({displayName:"HardwareKeyboardArrowDown",mixins:[r],render:function(){return o.createElement(i,this.props,o.createElement("path",{d:"M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"}))}});t.exports=s},{"../../svg-icon":79,"react/addons":147}],81:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../../svg-icon"),s=o.createClass({displayName:"HardwareKeyboardArrowUp",mixins:[r],render:function(){return o.createElement(i,this.props,o.createElement("path",{d:"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z"}))}});t.exports=s},{"../../svg-icon":79,"react/addons":147}],82:[function(e,t,n){"use strict";var o=e("react"),r=e("../svg-icon"),i=o.createClass({displayName:"NavigationChevronLeftDouble",render:function(){return o.createElement(r,this.props,o.createElement("path",{d:"M11.41 7.41 L10 6 l-6 6 6 6 1.41-1.41 L6.83 12z"}),o.createElement("path",{d:"M18.41 7.41 L17 6 l-6 6 6 6 1.41-1.41 L13.83 12z"}))}});t.exports=i},{"../svg-icon":79,react:319}],83:[function(e,t,n){"use strict";var o=e("react"),r=e("../svg-icon"),i=o.createClass({displayName:"NavigationChevronRightDouble",render:function(){return o.createElement(r,this.props,o.createElement("path",{d:"M6 6 L4.59  7.41 9.17 12 l-4.58 4.59 L6 18 l6 -6z"}),o.createElement("path",{d:"M13 6 L11.59 7.41 16.17 12 l-4.58 4.59 L13 18 l6 -6z"}))}});t.exports=i},{"../svg-icon":79,react:319}],84:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../../svg-icon"),s=o.createClass({displayName:"NavigationArrowDropDown",mixins:[r],render:function(){return o.createElement(i,this.props,o.createElement("path",{d:"M7 10l5 5 5-5z"}))}});t.exports=s},{"../../svg-icon":79,"react/addons":147}],85:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../../svg-icon"),s=o.createClass({displayName:"NavigationArrowDropUp",mixins:[r],render:function(){return o.createElement(i,this.props,o.createElement("path",{d:"M7 14l5-5 5 5z"}))}});t.exports=s},{"../../svg-icon":79,"react/addons":147}],86:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../../svg-icon"),s=o.createClass({displayName:"NavigationChevronLeft",mixins:[r],render:function(){return o.createElement(i,this.props,o.createElement("path",{d:"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"}))}});t.exports=s},{"../../svg-icon":79,"react/addons":147}],87:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../../svg-icon"),s=o.createClass({displayName:"NavigationChevronRight",mixins:[r],render:function(){return o.createElement(i,this.props,o.createElement("path",{d:"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"}))}});t.exports=s},{"../../svg-icon":79,"react/addons":147}],88:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../../svg-icon"),s=o.createClass({displayName:"NavigationMenu",mixins:[r],render:function(){return o.createElement(i,this.props,o.createElement("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}))}});t.exports=s},{"../../svg-icon":79,"react/addons":147}],89:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../../svg-icon"),s=o.createClass({displayName:"ToggleCheckBoxOutlineBlank",mixins:[r],render:function(){return o.createElement(i,this.props,o.createElement("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"}))}});t.exports=s},{"../../svg-icon":79,"react/addons":147}],90:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../../svg-icon"),s=o.createClass({displayName:"ToggleCheckBox",mixins:[r],render:function(){return o.createElement(i,this.props,o.createElement("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}))}});t.exports=s},{"../../svg-icon":79,"react/addons":147}],91:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../../svg-icon"),s=o.createClass({displayName:"ToggleRadioButtonChecked",mixins:[r],render:function(){return o.createElement(i,this.props,o.createElement("path",{d:"M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}))}});t.exports=s},{"../../svg-icon":79,"react/addons":147}],92:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.PureRenderMixin,i=e("../../svg-icon"),s=o.createClass({displayName:"ToggleRadioButtonUnchecked",mixins:[r],render:function(){return o.createElement(i,this.props,o.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}))}});t.exports=s},{"../../svg-icon":79,"react/addons":147}],93:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../mixins/style-propable"),a=i.createClass({displayName:"TableFooter",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{columns:i.PropTypes.array.isRequired},getDefaultProps:function(){return{}},getTheme:function(){return this.context.muiTheme.component.tableFooter},getStyles:function(){var e={cell:{borderTop:"1px solid "+this.getTheme().borderColor,verticalAlign:"bottom",padding:20,textAlign:"left",whiteSpace:"nowrap"}};return e},render:function(){var e="mui-table-footer";return i.createElement("tfoot",{className:e},this._getFooterRow())},_getFooterRow:function(){return i.createElement("tr",{className:"mui-table-footer-row"},this._getColumnHeaders(this.props.columns,"f"))},_getColumnHeaders:function(e,t){for(var n=[],s=this.getStyles(),a=0;a<e.length;a++){var l=e[a],c=l.content,p=o(l,["content"]);void 0===c&&(c=e[a]);var u=t+a;p.style=void 0!==p.style?this.mergeAndPrefix(p.style,s.cell):s.cell,n.push(i.createElement("td",r({key:u,className:"mui-table-footer-column"},p),c))}return n}});t.exports=a},{"../mixins/style-propable":54,react:319}],94:[function(e,t,n){"use strict";var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=e("react"),i=e("../mixins/style-propable"),s=e("../tooltip"),a=r.createClass({displayName:"TableHeaderColumn",mixins:[i],contextTypes:{muiTheme:r.PropTypes.object},propTypes:{tooltip:r.PropTypes.string,columnNumber:r.PropTypes.number.isRequired,onClick:r.PropTypes.func},getInitialState:function(){return{hovered:!1}},getTheme:function(){return this.context.muiTheme.component.tableHeaderColumn},getStyles:function(){var e=this.getTheme(),t={root:{fontWeight:"normal",fontSize:12,paddingLeft:e.spacing,paddingRight:e.spacing,height:e.height,textAlign:"left",whiteSpace:"nowrap",textOverflow:"ellipsis",color:this.getTheme().textColor,position:"relative"},tooltip:{boxSizing:"border-box",marginTop:e.height}};return t},render:function(){var e="mui-table-header-column",t=this.getStyles(),n={onMouseEnter:this._onMouseEnter,onMouseLeave:this._onMouseLeave,onClick:this._onClick},i=void 0;return void 0!==this.props.tooltip&&(i=r.createElement(s,{label:this.props.tooltip,show:this.state.hovered,style:this.mergeStyles(t.tooltip)})),r.createElement("th",o({key:this.props.key,className:e,style:this.mergeAndPrefix(t.root,this.props.style)},n),i,this.props.children)},_onMouseEnter:function(){void 0!==this.props.tooltip&&this.setState({hovered:!0})},_onMouseLeave:function(){void 0!==this.props.tooltip&&this.setState({hovered:!1})},_onClick:function(e){this.props.onClick&&this.props.onClick(e,this.props.columnNumber)}});t.exports=a},{"../mixins/style-propable":54,"../tooltip":119,react:319}],95:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../checkbox"),a=e("../mixins/style-propable"),l=e("./table-header-column"),c=i.createClass({displayName:"TableHeader",mixins:[a],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{columns:i.PropTypes.array.isRequired,superHeaderColumns:i.PropTypes.array,onSelectAll:i.PropTypes.func,displaySelectAll:i.PropTypes.bool,enableSelectAll:i.PropTypes.bool,fixed:i.PropTypes.bool},getDefaultProps:function(){return{displaySelectAll:!0,enableSelectAll:!0,fixed:!0}},getTheme:function(){return this.context.muiTheme.component.tableHeader},getStyles:function(){var e={root:{borderBottom:"1px solid "+this.getTheme().borderColor}};return e},render:function(){var e="mui-table-header";return i.createElement("thead",{className:e,style:this.getStyles().root},this._getSuperHeaderRow(),this._getHeaderRow());

},getSuperHeaderRow:function(){return this.refs.superHeader},getHeaderRow:function(){return this.refs.header},_getSuperHeaderRow:function(){return void 0!==this.props.superHeaderColumns?i.createElement("tr",{className:"mui-table-super-header-row",ref:"superHeader"},this._getColumnHeaders(this.props.superHeaderColumns,"sh")):void 0},_getHeaderRow:function(){var e=this.props.columns.slice();return this.props.displaySelectAll&&e.splice(0,0,this._getSelectAllCheckbox()),i.createElement("tr",{className:"mui-table-header-row",ref:"header"},this._getHeaderColumns(e,"h"))},_getHeaderColumns:function(e,t){for(var n=[],s=0;s<e.length;s++){var a=e[s],c=a.content,p=a.tooltip,u=a.style,h=o(a,["content","tooltip","style"]),d=t+s;n.push(i.createElement(l,r({key:d,style:u,tooltip:p,columnNumber:s},h),c))}return n},_getSelectAllCheckbox:function(){var e=i.createElement(s,{name:"selectallcb",value:"selected",disabled:!this.props.enableSelectAll,onCheck:this._onSelectAll});return{content:e,style:{width:72,paddingLeft:24,paddingRight:24}}},_onSelectAll:function(){this.props.onSelectAll&&this.props.onSelectAll()},_onColumnClick:function(e,t){this.props.onColumnClick&&this.props.onColumnClick(e,t)}});t.exports=c},{"../checkbox":14,"../mixins/style-propable":54,"./table-header-column":94,react:319}],96:[function(e,t,n){"use strict";var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=e("react"),i=e("../mixins/style-propable"),s=r.createClass({displayName:"TableRowColumn",mixins:[i],contextTypes:{muiTheme:r.PropTypes.object},propTypes:{columnNumber:r.PropTypes.number.isRequired,onClick:r.PropTypes.func,onHover:r.PropTypes.func,onHoverExit:r.PropTypes.func,hoverable:r.PropTypes.bool},getDefaultProps:function(){return{hoverable:!1}},getInitialState:function(){return{hovered:!1}},getTheme:function(){return this.context.muiTheme.component.tableRowColumn},getStyles:function(){var e=this.getTheme(),t={paddingLeft:e.spacing,paddingRight:e.spacing,height:e.height,textAlign:"left",fontSize:13,overflow:"hidden",whiteSpace:"nowrap",textOverflow:"ellipsis"};return 1!==r.Children.count(this.props.children)||isNaN(this.props.children)||(t.textAlign="right"),t},render:function(){var e="mui-table-row-column",t=this.getStyles(),n={onClick:this._onClick,onMouseEnter:this._onMouseEnter,onMouseLeave:this._onMouseLeave};return r.createElement("td",o({key:this.props.key,className:e,style:this.mergeAndPrefix(t,this.props.style)},n),this.props.children)},_onClick:function(e){this.props.onClick&&this.props.onClick(e,this.props.columnNumber)},_onMouseEnter:function(e){this.props.hoverable&&(this.setState({hovered:!0}),this.props.onHover&&this.props.onHover(e,this.props.columnNumber))},_onMouseLeave:function(e){this.props.hoverable&&(this.setState({hovered:!1}),this.props.onHoverExit&&this.props.onHoverExit(e,this.props.columnNumber))}});t.exports=s},{"../mixins/style-propable":54,react:319}],97:[function(e,t,n){"use strict";var o=e("react"),r=e("../checkbox"),i=e("../mixins/style-propable"),s=e("./table-row-column"),a=o.createClass({displayName:"TableRow",mixins:[i],contextTypes:{muiTheme:o.PropTypes.object},propTypes:{rowNumber:o.PropTypes.number.isRequired,columns:o.PropTypes.array.isRequired,onRowClick:o.PropTypes.func,onCellClick:o.PropTypes.func,onRowHover:o.PropTypes.func,onRowHoverExit:o.PropTypes.func,onCellHover:o.PropTypes.func,onCellHoverExit:o.PropTypes.func,selected:o.PropTypes.bool,selectable:o.PropTypes.bool,striped:o.PropTypes.bool,hoverable:o.PropTypes.bool,displayBorder:o.PropTypes.bool,displayRowCheckbox:o.PropTypes.bool},getDefaultProps:function(){return{selected:!1,selectable:!0,striped:!1,hoverable:!1,displayBorder:!0,displayRowCheckbox:!0}},getInitialState:function(){return{hovered:!1}},getTheme:function(){return this.context.muiTheme.component.tableRow},getStyles:function(){var e=this.getTheme(),t="inherit";this.state.hovered?t=e.hoverColor:this.props.selected?t=e.selectedColor:this.props.striped&&(t=e.stripeColor);var n={root:{borderBottom:"1px solid "+this.getTheme().borderColor},cell:{backgroundColor:t,color:this.getTheme().textColor}};return this.props.displayBorder||(n.root.borderBottom=""),n},render:function(){var e="mui-table-row",t=this.props.columns.slice();return this.props.displayRowCheckbox&&t.splice(0,0,this._getRowCheckbox()),o.createElement("tr",{className:e,style:this.getStyles().root},this._getColumns(t))},_getColumns:function(e){for(var t=[],n=this.getStyles(),r=0;r<e.length;r++){var i=this.props.rowNumber+"-"+r,a=e[r],l=a.content,c=a.style;void 0===l&&(l=e[r]);var p=o.createElement(s,{key:i,columnNumber:r,style:this.mergeStyles(n.cell,c),hoverable:this.props.hoverable,onClick:this._onCellClick,onHover:this._onCellHover,onHoverExit:this._onCellHoverExit},l);t.push(p)}return t},_getRowCheckbox:function(){var e=this.props.rowNumber+"-cb",t=o.createElement(r,{ref:"rowSelectCB",name:e,value:"selected",disabled:!this.props.selectable,defaultChecked:this.props.selected});return{content:t,style:{width:72,paddingLeft:24,paddingRight:24}}},_onRowClick:function(e){this.props.onRowClick&&this.props.onRowClick(e,this.props.rowNumber)},_onRowHover:function(e){this.props.onRowHover&&this.props.onRowHover(e,this.props.rowNumber)},_onRowHoverExit:function(e){this.props.onRowHoverExit&&this.props.onRowHoverExit(e,this.props.rowNumber)},_onCellClick:function(e,t){this.props.selectable&&this.props.onCellClick&&this.props.onCellClick(e,this.props.rowNumber,t),void 0!==this.refs.rowSelectCB&&(this.refs.rowSelectCB.setChecked(!this.refs.rowSelectCB.isChecked()),e.ctrlKey=!0),this._onRowClick(e)},_onCellHover:function(e,t){this.props.hoverable&&(this.setState({hovered:!0}),this.props.onCellHover&&this.props.onCellHover(e,this.props.rowNumber,t),this._onRowHover(e))},_onCellHoverExit:function(e,t){this.props.hoverable&&(this.setState({hovered:!1}),this.props.onCellHoverExit&&this.props.onCellHoverExit(e,this.props.rowNumber,t),this._onRowHoverExit(e))}});t.exports=a},{"../checkbox":14,"../mixins/style-propable":54,"./table-row-column":96,react:319}],98:[function(e,t,n){"use strict";var o=e("react"),r=e("../mixins/style-propable"),i=e("../mixins/click-awayable"),s=e("./table-header"),a=e("./table-row"),l=e("./table-footer"),c=o.createClass({displayName:"Table",mixins:[r,i],contextTypes:{muiTheme:o.PropTypes.object},propTypes:{rowData:o.PropTypes.array.isRequired,canSelectAll:o.PropTypes.bool,columnOrder:o.PropTypes.array,defaultColumnWidth:o.PropTypes.string,deselectOnClickaway:o.PropTypes.bool,displayRowCheckbox:o.PropTypes.bool,displaySelectAll:o.PropTypes.bool,fixedFooter:o.PropTypes.bool,fixedHeader:o.PropTypes.bool,footer:o.PropTypes.element,footerColumns:o.PropTypes.object,header:o.PropTypes.element,headerColumns:o.PropTypes.object,height:o.PropTypes.string,multiSelectable:o.PropTypes.bool,onCellClick:o.PropTypes.func,onCellHover:o.PropTypes.func,onCellHoverExit:o.PropTypes.func,onRowHover:o.PropTypes.func,onRowHoverExit:o.PropTypes.func,onRowSelection:o.PropTypes.func,preScanRowData:o.PropTypes.bool,selectable:o.PropTypes.bool,showRowHover:o.PropTypes.bool,stripedRows:o.PropTypes.bool},getDefaultProps:function(){return{canSelectAll:!1,defaultColumnWidth:"50px",deselectOnClickaway:!0,displayRowCheckbox:!0,displaySelectAll:!0,fixedFooter:!0,fixedHeader:!0,height:"inherit",multiSelectable:!1,preScanRowData:!0,selectable:!0,showRowHover:!1,stripedRows:!1}},getInitialState:function(){var e=[];if(this.props.selectable&&this.props.preScanRowData)for(var t=0;t<this.props.rowData.length;t++){var n=this.props.rowData[t];if(void 0!==n.selected&&n.selected&&(e.push(t),!this.props.multiSelectable))break}return{selectedRows:e}},getTheme:function(){return this.context.muiTheme.component.table},getStyles:function(){var e={root:{backgroundColor:this.getTheme().backgroundColor,padding:"0 "+this.context.muiTheme.spacing.desktopGutter+"px",width:"100%",borderCollapse:"collapse",borderSpacing:0,tableLayout:"fixed"},bodyTable:{height:this.props.fixedHeader||this.props.fixedFooter?this.props.height:"auto",overflowX:"hidden",overflowY:"auto"},tableWrapper:{height:this.props.fixedHeader||this.props.fixedFooter?"auto":this.props.height,overflow:"auto"}};return e},componentClickAway:function(){this.props.deselectOnClickaway&&this.state.selectedRows.length&&this.setState({selectedRows:[]})},render:function(){var e="mui-table",t=this.getStyles(),n=this._getHeader(),r=this._getBody(),i=this._getFooter(),s=void 0,a=void 0,l=void 0,c=void 0;return void 0!==n&&(this.props.fixedHeader?s=o.createElement("div",{className:"mui-header-table"},o.createElement("table",{ref:"headerTable",className:e,style:t.root},n)):l=n),void 0!==i&&(this.props.fixedFooter?a=o.createElement("div",{className:"mui-footer-table"},o.createElement("table",{ref:"footerTable",className:e,style:t.root},i)):c=i),o.createElement("div",{className:"mui-table-wrapper",style:t.tableWrapper},s,o.createElement("div",{className:"mui-body-table",style:t.bodyTable},o.createElement("table",{ref:"bodyTable",className:e,style:t.root},l,c,r)),a)},_getHeader:function(){if(this.props.header)return this.props.header;if(void 0!==this.props.headerColumns){var e=this._orderColumnBasedData(this.props.headerColumns);return o.createElement(s,{columns:e,enableSelectAll:this.props.canSelectAll&&this.props.selectable,displaySelectAll:this.props.displaySelectAll,onSelectAll:this._onSelectAll})}},_getFooter:function(){if(this.props.footer)return this.props.footer;if(void 0!==this.props.footerColumns){var e=this._orderColumnBasedData(this.props.footerColumns);return this.props.displaySelectAll&&e.splice(0,0,{content:""}),o.createElement(l,{columns:e})}},_getBody:function(){var e=this,t=this._orderColumnBasedData(this.props.rowData,function(t,n){var r=e._isRowSelected(n),i=e.props.stripedRows&&n%2===0,s=!0;n===e.props.rowData.length-1&&(s=!1);var l=o.createElement(a,{key:"r-"+n,rowNumber:n,columns:t,selected:r,striped:i,displayRowCheckbox:e.props.displayRowCheckbox,hoverable:e.props.showRowHover,displayBorder:s,selectable:e.props.selectable,onRowClick:e._handleRowClick,onCellClick:e._handleCellClick,onRowHover:e._handleRowHover,onRowHoverExit:e._handleRowHoverExit,onCellHover:e._handleCellHover,onCellHoverExit:e._handleCellHoverExit});return l});return o.createElement("tbody",{style:{height:this.props.height}},t)},_orderColumnBasedData:function(e,t){if(void 0!==this.props.columnOrder){for(var n="[object Array]"!==Object.prototype.toString.call(e)?[e]:e,o=[],r=0;r<n.length;r++){for(var i=n[r],s=[],a=0;a<this.props.columnOrder.length;a++){var l=this.props.columnOrder[a],c=i[l]||{};s.push(c)}s.length&&(i=s),1===r&&n.length>1&&(i=this._setColumnWidths(i)),o.push(void 0!==t?t(i,r):i)}return 1===n.length?o[0]:o}},_setColumnWidths:function(e){var t=this;return e.forEach(function(e){void 0===e.style?e.style={width:t.props.defaultColumnWidth,maxWidth:t.props.defaultColumnWidth}:(void 0===e.style.width&&(e.style.width=t.props.defaultColumnWidth),void 0===e.style.maxWidth&&(e.style.maxWidth=t.props.defaultColumnWidth))}),e},_isRowSelected:function(e){if(this.state.allRowsSelected)return!0;for(var t=0;t<this.state.selectedRows.length;t++){var n=this.state.selectedRows[t];if("object"==typeof n){if(this._isValueInRange(e,n))return!0}else if(n===e)return!0}return!1},_isValueInRange:function(e,t){return t.start<=e&&e<=t.end||t.end<=e&&e<=t.start?!0:!1},_handleRowClick:function(e,t){e.stopPropagation(),this.props.selectable&&(window.getSelection().removeAllRanges(),this._processRowSelection(e,t))},_processRowSelection:function(e,t){var n=this.state.selectedRows;if(e.shiftKey&&this.props.multiSelectable&&n.length){var o=n[n.length-1];"object"==typeof o?o.end=t:n.push({start:o,end:t})}else if((e.ctrlKey&&!e.metaKey||e.metaKey&&!e.ctrlKey)&&this.props.multiSelectable){var r=n.indexOf(t);0>r?n.push(t):n.splice(r,1)}else n=1===n.length&&n[0]===t?[]:[t];this.setState({selectedRows:n}),this.props.onRowSelection&&this.props.onRowSelection(n)},_handleCellClick:function(e,t,n){e.stopPropagation(),this.props.onCellClick&&this.props.onCellClick(t,this._getColumnId(n))},_handleRowHover:function(e,t){this.props.onRowHover&&this.props.onRowHover(t)},_handleRowHoverExit:function(e,t){this.props.onRowHoverExit&&this.props.onRowHoverExit(t)},_handleCellHover:function(e,t,n){this.props.onCellHover&&this.props.onCellHover(t,this._getColumnId(n)),this._handleRowHover(e,t)},_handleCellHoverExit:function(e,t,n){this.props.onCellHoverExit&&this.props.onCellHoverExit(t,this._getColumnId(n)),this._handleRowHoverExit(e,t)},_onSelectAll:function(){this.setState({allRowsSelected:!this.state.allRowsSelected})},_getColumnId:function(e){var t=e;return this.props.displayRowCheckbox&&t--,t=this.props.columnOrder.length?this.props.columnOrder[t]:t}});t.exports=c},{"../mixins/click-awayable":51,"../mixins/style-propable":54,"./table-footer":93,"./table-header":95,"./table-row":97,react:319}],99:[function(e,t,n){"use strict";var o=e("react"),r=e("../mixins/style-propable"),i=e("../styles/colors.js"),s=o.createClass({displayName:"Tab",mixins:[r],contextTypes:{muiTheme:o.PropTypes.object},propTypes:{handleTouchTap:o.PropTypes.func,selected:o.PropTypes.bool,width:o.PropTypes.string},handleTouchTap:function(){this.props.handleTouchTap(this.props.tabIndex,this)},render:function(){var e=this.mergeAndPrefix({display:"table-cell",cursor:"pointer",textAlign:"center",verticalAlign:"middle",height:48,color:i.white,opacity:.6,fontSize:14,fontWeight:"500",whiteSpace:"initial",fontFamily:this.context.muiTheme.contentFontFamily,boxSizing:"border-box",width:this.props.width},this.props.style);return this.props.selected&&(e.opacity="1"),o.createElement("div",{style:e,onTouchTap:this.handleTouchTap,routeName:this.props.route},this.props.label)}});t.exports=s},{"../mixins/style-propable":54,"../styles/colors.js":71,react:319}],100:[function(e,t,n){"use strict";var o=e("react"),r=o.createClass({displayName:"TabTemplate",render:function(){var e={height:0,overflow:"hidden",width:"100%",position:"relative",textAlign:"initial"};return this.props.selected&&(delete e.height,delete e.overflow),o.createElement("div",{style:e},this.props.children)}});t.exports=r},{react:319}],101:[function(e,t,n){"use strict";var o=e("react/addons"),r=e("./tabTemplate"),i=e("../ink-bar"),s=e("../mixins/style-propable"),a=e("../utils/events"),l=o.createClass({displayName:"Tabs",mixins:[s],contextTypes:{muiTheme:o.PropTypes.object},propTypes:{initialSelectedIndex:o.PropTypes.number,onActive:o.PropTypes.func,tabWidth:o.PropTypes.number,tabItemContainerStyle:o.PropTypes.object,contentContainerStyle:o.PropTypes.object,inkBarStyle:o.PropTypes.object,contentContainerClassName:o.PropTypes.string},getInitialState:function(){var e=0;return this.props.initialSelectedIndex&&this.props.initialSelectedIndex<this.getTabCount()&&(e=this.props.initialSelectedIndex),{selectedIndex:e}},getEvenWidth:function(){return parseInt(window.getComputedStyle(o.findDOMNode(this)).getPropertyValue("width"),10)},getTabCount:function(){return o.Children.count(this.props.children)},componentDidMount:function(){this._updateTabWidth(),a.on(window,"resize",this._updateTabWidth)},componentWillUnmount:function(){a.off(window,"resize",this._updateTabWidth)},componentWillReceiveProps:function(e){e.hasOwnProperty("style")&&this._updateTabWidth()},handleTouchTap:function(e,t){this.props.onChange&&this.state.selectedIndex!==e&&this.props.onChange(e,t),this.setState({selectedIndex:e}),t.props.onActive&&t.props.onActive(t)},getStyles:function(){var e=this.context.muiTheme.component.tabs;return{tabItemContainer:{margin:"0",padding:"0",width:"100%",height:"48px",backgroundColor:e.backgroundColor,whiteSpace:"nowrap",display:"table"}}},render:function(){var e=this,t=this.getStyles(),n=[],s=this.state.fixedWidth?100/this.getTabCount()+"%":this.props.tabWidth+"px",a="calc("+s+"*"+this.state.selectedIndex+")",l=o.Children.map(this.props.children,function(t,i){if("Tab"===t.type.displayName)return n.push(t.props.children?o.createElement(r,{key:i,selected:e.state.selectedIndex===i},t.props.children):void 0),o.addons.cloneWithProps(t,{key:i,selected:e.state.selectedIndex===i,tabIndex:i,width:s,handleTouchTap:e.handleTouchTap});var a=t.type.displayName||t.type;throw"Tabs only accepts Tab Components as children. Found "+a+" as child number "+(i+1)+" of Tabs"},this);return o.createElement("div",{style:this.mergeAndPrefix(this.props.style)},o.createElement("div",{style:this.mergeAndPrefix(t.tabItemContainer,this.props.tabItemContainerStyle)},l),o.createElement(i,{left:a,width:s,style:this.props.inkBarStyle}),o.createElement("div",{style:this.mergeAndPrefix(this.props.contentContainerStyle),className:this.props.contentContainerClassName},n))},_tabWidthPropIsValid:function(){return this.props.tabWidth&&this.props.tabWidth*this.getTabCount()<=this.getEvenWidth()},_updateTabWidth:function(){this.setState(this._tabWidthPropIsValid()?{fixedWidth:!1}:{fixedWidth:!0})}});t.exports=l},{"../ink-bar":37,"../mixins/style-propable":54,"../utils/events":129,"./tabTemplate":100,"react/addons":147}],102:[function(e,t,n){(function(n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}function r(e){return e||0===e}var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},s=e("react"),a=e("./utils/color-manipulator"),l=e("./mixins/style-propable"),c=e("./styles/transitions"),p=e("./utils/unique-id"),u=e("./enhanced-textarea"),h=s.createClass({displayName:"TextField",mixins:[l],contextTypes:{muiTheme:s.PropTypes.object},propTypes:{errorStyle:s.PropTypes.object,errorText:s.PropTypes.string,floatingLabelStyle:s.PropTypes.object,floatingLabelText:s.PropTypes.string,fullWidth:s.PropTypes.bool,hintText:s.PropTypes.string,id:s.PropTypes.string,inputStyle:s.PropTypes.object,multiLine:s.PropTypes.bool,onBlur:s.PropTypes.func,onChange:s.PropTypes.func,onEnterKeyDown:s.PropTypes.func,onFocus:s.PropTypes.func,onKeyDown:s.PropTypes.func,rows:s.PropTypes.number,type:s.PropTypes.string,underlineStyle:s.PropTypes.object},getDefaultProps:function(){return{fullWidth:!1,type:"text",rows:1}},getInitialState:function(){var e=this.props.children?this.props.children.props:this.props;return{errorText:this.props.errorText,hasValue:r(e.value)||r(e.defaultValue)||e.valueLink&&r(e.valueLink.value)}},getTheme:function(){return this.context.muiTheme.component.textField},componentDidMount:function(){this._uniqueId=p.generate()},componentWillReceiveProps:function(e){var t={};t.errorText=e.errorText,e.children&&e.children.props&&(e=e.children.props);var n=e.hasOwnProperty("valueLink"),o=e.hasOwnProperty("value"),i=e.defaultValue!==this.props.defaultValue;n?t.hasValue=r(e.valueLink.value):o?t.hasValue=r(e.value):i&&(t.hasValue=r(e.defaultValue)),t&&this.setState(t)},getStyles:function(){var e=this.props,t=this.getTheme(),n={root:{fontSize:16,lineHeight:"24px",width:e.fullWidth?"100%":256,height:24*(e.rows-1)+(e.floatingLabelText?72:48),display:"inline-block",position:"relative",fontFamily:this.context.muiTheme.contentFontFamily,transition:c.easeOut("200ms","height")},error:{position:"relative",bottom:5,fontSize:12,lineHeight:"12px",color:t.errorColor,transition:c.easeOut()},hint:{position:"absolute",lineHeight:"22px",opacity:1,color:t.hintColor,transition:c.easeOut(),bottom:12},input:{tapHighlightColor:"rgba(0,0,0,0)",padding:0,position:"relative",width:"100%",height:"100%",border:"none",outline:"none",backgroundColor:t.backgroundColor,color:e.disabled?t.disabledTextColor:t.textColor,font:"inherit"},underline:{border:"none",borderBottom:"solid 1px "+t.borderColor,position:"absolute",width:"100%",bottom:8,margin:0,MozBoxSizing:"content-box",boxSizing:"content-box",height:0},underlineAfter:{position:"absolute",width:"100%",overflow:"hidden",userSelect:"none",cursor:"default",bottom:8,borderBottom:"dotted 2px "+t.disabledTextColor}};return n.error=this.mergeAndPrefix(n.error,e.errorStyle),n.underline=this.mergeAndPrefix(n.underline,e.underlineStyle),n.floatingLabel=this.mergeStyles(n.hint,{lineHeight:"22px",top:38,bottom:"none",opacity:1,transform:"scale(1) translate3d(0, 0, 0)",transformOrigin:"left top"}),n.textarea=this.mergeStyles(n.input,{marginTop:e.floatingLabelText?36:12,marginBottom:e.floatingLabelText?-36:-12,boxSizing:"border-box",font:"inherit"}),n.focusUnderline=this.mergeStyles(n.underline,{borderBottom:"solid 2px",borderColor:t.focusColor,transform:"scaleX(0)",transition:c.easeOut()}),this.state.isFocused&&(n.floatingLabel.color=t.focusColor,n.floatingLabel.transform="perspective(1px) scale(0.75) translate3d(2px, -28px, 0)",n.focusUnderline.transform="scaleX(1)"),this.state.hasValue&&(n.floatingLabel.color=a.fade(e.disabled?t.disabledTextColor:t.floatingLabelColor,.5),n.floatingLabel.transform="perspective(1px) scale(0.75) translate3d(2px, -28px, 0)",n.hint.opacity=0),e.floatingLabelText&&(n.hint.opacity=0,n.input.boxSizing="border-box",this.state.isFocused&&!this.state.hasValue&&(n.hint.opacity=1)),e.style&&e.style.height&&(n.hint.lineHeight=e.style.height),this.state.errorText&&this.state.isFocused&&(n.floatingLabel.color=n.error.color),e.floatingLabelText&&!e.multiLine&&(n.input.paddingTop=26),this.state.errorText&&(n.focusUnderline.borderColor=n.error.color,n.focusUnderline.transform="scaleX(1)"),n},render:function(){var e=this.props,t=e.className,n=(e.errorStyle,e.errorText,e.floatingLabelText),r=(e.fullWidth,e.hintText),a=e.id,l=e.multiLine,c=(e.onBlur,e.onChange,e.onFocus,e.type),p=e.rows,h=o(e,["className","errorStyle","errorText","floatingLabelText","fullWidth","hintText","id","multiLine","onBlur","onChange","onFocus","type","rows"]),d=this.getStyles(),f=a||this._uniqueId,m=this.state.errorText?s.createElement("div",{style:d.error},this.state.errorText):null,y=r?s.createElement("div",{style:this.mergeAndPrefix(d.hint)},r):null,g=n?s.createElement("label",{style:this.mergeAndPrefix(d.floatingLabel,this.props.floatingLabelStyle),htmlFor:f},n):null,v=void 0,b=void 0;v={id:f,ref:this._getRef(),style:this.mergeAndPrefix(d.input,this.props.inputStyle),onBlur:this._handleInputBlur,onFocus:this._handleInputFocus,disabled:this.props.disabled,onKeyDown:this._handleInputKeyDown},this.props.hasOwnProperty("valueLink")||(v.onChange=this._handleInputChange),b=this.props.children?s.cloneElement(this.props.children,i({},v,this.props.children.props)):l?s.createElement(u,i({},h,v,{rows:p,onHeightChange:this._handleTextAreaHeightChange,textareaStyle:this.mergeAndPrefix(d.textarea)})):s.createElement("input",i({},h,v,{type:c}));var T=this.props.disabled?s.createElement("div",{style:this.mergeAndPrefix(d.underlineAfter)}):s.createElement("hr",{style:this.mergeAndPrefix(d.underline)}),x=s.createElement("hr",{style:this.mergeAndPrefix(d.focusUnderline)});return s.createElement("div",{className:t,style:this.mergeAndPrefix(d.root,this.props.style)},g,y,b,T,x,m)},blur:function(){this.isMounted()&&this._getInputNode().blur()},clearValue:function(){this.setValue("")},focus:function(){this.isMounted()&&this._getInputNode().focus()},getValue:function(){return this.isMounted()?this._getInputNode().value:void 0},setErrorText:function(e){"production"!==n.env.NODE_ENV&&this.props.hasOwnProperty("errorText")?console.error("Cannot call TextField.setErrorText when errorText is defined as a property."):this.isMounted()&&this.setState({errorText:e})},setValue:function(e){"production"!==n.env.NODE_ENV&&this._isControlled()?console.error("Cannot call TextField.setValue when value or valueLink is defined as a property."):this.isMounted()&&(this.props.multiLine?this.refs[this._getRef()].setValue(e):this._getInputNode().value=e,this.setState({hasValue:r(e)}))},_getRef:function(){return this.props.ref?this.props.ref:"input"},_getInputNode:function(){return this.props.children||this.props.multiLine?this.refs[this._getRef()].getInputNode():s.findDOMNode(this.refs[this._getRef()])},_handleInputBlur:function(e){this.setState({isFocused:!1}),this.props.onBlur&&this.props.onBlur(e)},_handleInputChange:function(e){this.setState({hasValue:r(e.target.value)}),this.props.onChange&&this.props.onChange(e)},_handleInputFocus:function(e){this.props.disabled||(this.setState({isFocused:!0}),this.props.onFocus&&this.props.onFocus(e))},_handleInputKeyDown:function(e){13===e.keyCode&&this.props.onEnterKeyDown&&this.props.onEnterKeyDown(e),this.props.onKeyDown&&this.props.onKeyDown(e)},_handleTextAreaHeightChange:function(e,t){var n=t+24;this.props.floatingLabelText&&(n+=24),s.findDOMNode(this).style.height=n+"px"},_isControlled:function(){return this.props.hasOwnProperty("value")||this.props.hasOwnProperty("valueLink")}});t.exports=h}).call(this,e("_process"))},{"./enhanced-textarea":31,"./mixins/style-propable":54,"./styles/transitions":77,"./utils/color-manipulator":125,"./utils/unique-id":138,_process:1,react:319}],103:[function(e,t,n){"use strict";function o(e){return e.displayName||e.name||"Component"}function r(e){return function(t){return s.createClass({displayName:"Theme("+o(t)+")",render:function(){return s.createElement(l,{theme:e},function(e){return s.createElement(t,i({},this.props,e))}.bind(this))}})}}var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},s=e("react"),a=e("./styles/theme-manager"),l=s.createClass({displayName:"Theme",propTypes:{theme:s.PropTypes.object},childContextTypes:{muiTheme:s.PropTypes.object.isRequired,muiThemeManager:s.PropTypes.object.isRequired},getChildContext:function(){return{muiTheme:this.themeManager.getCurrentTheme(),muiThemeManager:this.themeManager}},componentWillMount:function(){this.themeManager=new a,this.props.theme&&this.themeManager.setTheme(this.props.theme)},render:function(){return this.props.children({muiTheme:this.themeManager.getCurrentTheme(),muiThemeManager:this.themeManager})}});t.exports=l,t.exports.theme=r},{"./styles/theme-manager":74,react:319}],104:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../mixins/style-propable"),a=e("../enhanced-button"),l=e("../styles/transitions"),c=i.createClass({displayName:"ClockButton",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{position:i.PropTypes.oneOf(["left","right"])},getDefaultProps:function(){return{position:"left"}},_handleTouchTap:function(){this.setState({selected:!0}),this.props.onTouchTap()},getTheme:function(){return this.context.muiTheme.component.timePicker},render:function(){var e=this.props,t=(e.className,o(e,["className"])),n={root:{position:"absolute",bottom:65,pointerEvents:"auto",height:50,width:50,borderRadius:"100%"},label:{position:"absolute",top:17,left:14},select:{position:"absolute",height:50,width:50,top:0,left:0,opacity:0,borderRadius:"50%",transform:"scale(0)",transition:l.easeOut(),backgroundColor:this.getTheme().accentColor}};return this.props.selected&&(n.label.color=this.getTheme().selectTextColor,n.select.opacity=1,n.select.transform="scale(1)"),"right"===this.props.position?n.root.right="5px":n.root.left="5px",i.createElement(a,r({},t,{style:this.mergeAndPrefix(n.root),disableFocusRipple:!0,disableTouchRipple:!0,onTouchTap:this._handleTouchTap}),i.createElement("span",{style:this.mergeAndPrefix(n.select)}),i.createElement("span",{style:this.mergeAndPrefix(n.label)},this.props.children))}});t.exports=c},{"../enhanced-button":29,"../mixins/style-propable":54,"../styles/transitions":77,react:319}],105:[function(e,t,n){"use strict";function o(e){return 57.29577951308232*e}function r(e){var t=e.target,n=t.getBoundingClientRect(),o={offsetX:e.clientX-n.left,offsetY:e.clientY-n.top};return o}var i=e("react"),s=e("../mixins/style-propable"),a=e("./clock-number"),l=e("./clock-pointer"),c=i.createClass({displayName:"ClockHours",mixins:[s],propTypes:{initialHours:i.PropTypes.number,onChange:i.PropTypes.func,format:i.PropTypes.oneOf(["ampm","24hr"])},center:{x:0,y:0},basePoint:{x:0,y:0},isMousePressed:function(e){return"undefined"==typeof e.buttons?e.nativeEvent.which:e.buttons},getDefaultProps:function(){return{initialHours:(new Date).getHours(),onChange:function(){},format:"ampm"}},componentDidMount:function(){var e=i.findDOMNode(this.refs.mask);this.center={x:e.offsetWidth/2,y:e.offsetHeight/2},this.basePoint={x:this.center.x,y:0}},handleUp:function(e){e.preventDefault(),this.setClock(e.nativeEvent,!0)},handleMove:function(e){e.preventDefault(),1===this.isMousePressed(e)&&this.setClock(e.nativeEvent,!1)},handleTouchMove:function(e){e.preventDefault(),this.setClock(e.changedTouches[0],!1)},handleTouchEnd:function(e){e.preventDefault(),this.setClock(e.changedTouches[0],!0)},setClock:function(e,t){if("undefined"==typeof e.offsetX){var n=r(e);e.offsetX=n.offsetX,e.offsetY=n.offsetY}var o=this.getHours(e.offsetX,e.offsetY);this.props.onChange(o,t)},getHours:function(e,t){var n=30,r=e-this.center.x,i=t-this.center.y,s=this.basePoint.x-this.center.x,a=this.basePoint.y-this.center.y,l=Math.atan2(s,a)-Math.atan2(r,i),c=o(l);c=Math.round(c/n)*n,c%=360;var p=Math.floor(c/n)||0,u=Math.pow(r,2)+Math.pow(i,2),h=Math.sqrt(u);return p=p||12,"24hr"===this.props.format?90>h&&(p+=12,p%=24):p%=12,p},_getSelected:function(){var e=this.props.initialHours;return"ampm"===this.props.format&&(e%=12,e=e||12),e},_getHourNumbers:function(){for(var e=this,t={pointerEvents:"none"},n="ampm"===this.props.format?12:24,o=[],r=1;n>=r;r++)o.push(r%24);return o.map(function(n){var o=e._getSelected()===n;return i.createElement(a,{key:n,style:t,isSelected:o,type:"hour",value:n})})},render:function(){var e={root:{height:"100%",width:"100%",borderRadius:"100%",position:"relative",pointerEvents:"none",boxSizing:"border-box"},hitMask:{height:"100%",width:"100%",pointerEvents:"auto"}},t=this._getSelected(),n=this._getHourNumbers();return i.createElement("div",{ref:"clock",style:this.mergeAndPrefix(e.root)},i.createElement(l,{hasSelected:!0,value:t,type:"hour"}),n,i.createElement("div",{ref:"mask",style:this.mergeAndPrefix(e.hitMask),onTouchMove:this.handleTouchMove,onTouchEnd:this.handleTouchEnd,onMouseUp:this.handleUp,onMouseMove:this.handleMove}))}});t.exports=c},{"../mixins/style-propable":54,"./clock-number":107,"./clock-pointer":108,react:319}],106:[function(e,t,n){"use strict";function o(e){return 57.29577951308232*e}function r(e){var t=e.target,n=t.getBoundingClientRect(),o={offsetX:e.clientX-n.left,offsetY:e.clientY-n.top};return o}var i=e("react"),s=e("../mixins/style-propable"),a=e("./clock-number"),l=e("./clock-pointer"),c=i.createClass({displayName:"ClockMinutes",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{initialMinutes:i.PropTypes.number,onChange:i.PropTypes.func},center:{x:0,y:0},basePoint:{x:0,y:0},isMousePressed:function(e){return"undefined"==typeof e.buttons?e.nativeEvent.which:e.buttons},getDefaultProps:function(){return{initialMinutes:(new Date).getMinutes(),onChange:function(){}}},componentDidMount:function(){var e=i.findDOMNode(this.refs.mask);this.center={x:e.offsetWidth/2,y:e.offsetHeight/2},this.basePoint={x:this.center.x,y:0}},handleUp:function(e){e.preventDefault(),this.setClock(e.nativeEvent,!0)},handleMove:function(e){e.preventDefault(),1===this.isMousePressed(e)&&this.setClock(e.nativeEvent,!1)},handleTouch:function(e){e.preventDefault(),this.setClock(e.changedTouches[0],!1)},setClock:function(e,t){if("undefined"==typeof e.offsetX){var n=r(e);e.offsetX=n.offsetX,e.offsetY=n.offsetY}var o=this.getMinutes(e.offsetX,e.offsetY);this.props.onChange(o,t)},getMinutes:function(e,t){var n=6,r=e-this.center.x,i=t-this.center.y,s=this.basePoint.x-this.center.x,a=this.basePoint.y-this.center.y,l=Math.atan2(s,a)-Math.atan2(r,i),c=o(l);

c=Math.round(c/n)*n,c%=360;var p=Math.floor(c/n)||0;return p},_getMinuteNumbers:function(){for(var e=[],t=0;12>t;t++)e.push(5*t);var n=this.props.initialMinutes,o=!1,r=e.map(function(e){var t=n===e;return t&&(o=!0),i.createElement(a,{key:e,isSelected:t,type:"minute",value:e})});return{numbers:r,hasSelected:o,selected:n}},render:function(){var e={root:{height:"100%",width:"100%",borderRadius:"100%",position:"relative",pointerEvents:"none",boxSizing:"border-box"},hitMask:{height:"100%",width:"100%",pointerEvents:"auto"}},t=this._getMinuteNumbers();return i.createElement("div",{ref:"clock",style:this.mergeAndPrefix(e.root)},i.createElement(l,{value:t.selected,type:"minute"}),t.numbers,i.createElement("div",{ref:"mask",style:this.mergeAndPrefix(e.hitMask),hasSelected:t.hasSelected,onTouchMove:this.handleTouch,onTouchEnd:this.handleTouch,onMouseUp:this.handleUp,onMouseMove:this.handleMove}))}});t.exports=c},{"../mixins/style-propable":54,"./clock-number":107,"./clock-pointer":108,react:319}],107:[function(e,t,n){"use strict";var o=function(){function e(e,t){var n=[],o=!0,r=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);o=!0);}catch(l){r=!0,i=l}finally{try{!o&&a["return"]&&a["return"]()}finally{if(r)throw i}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),r=e("react"),i=e("../mixins/style-propable"),s=r.createClass({displayName:"ClockNumber",mixins:[i],contextTypes:{muiTheme:r.PropTypes.object},propTypes:{value:r.PropTypes.number,type:r.PropTypes.oneOf(["hour","minute"]),onSelected:r.PropTypes.func,isSelected:r.PropTypes.bool},getDefaultProps:function(){return{value:0,type:"minute",isSelected:!1}},getTheme:function(){return this.context.muiTheme.component.timePicker},render:function(){var e=this.props.value,t=!1;"hour"===this.props.type?(t=1>e||e>12,e%=12):e/=5;var n=[[0,5],[54.5,16.6],[94.4,59.5],[109,114],[94.4,168.5],[54.5,208.4],[0,223],[-54.5,208.4],[-94.4,168.5],[-109,114],[-94.4,59.5],[-54.5,19.6]],i=[[0,40],[36.9,49.9],[64,77],[74,114],[64,151],[37,178],[0,188],[-37,178],[-64,151],[-74,114],[-64,77],[-37,50]],s={root:{display:"inline-block",position:"absolute",width:32,height:32,borderRadius:"100%",left:"calc(50% - 16px)",top:10,textAlign:"center",paddingTop:5,userSelect:"none",fontSize:"1.1em",pointerEvents:"none",boxSizing:"border-box"}};this.props.isSelected&&(s.root.backgroundColor=this.getTheme().accentColor,s.root.color=this.getTheme().selectTextColor);var a=n[e];t&&(s.root.width="28px",s.root.height="28px",s.root.left="calc(50% - 14px)",a=i[e]);var l=o(a,2),c=l[0],p=l[1];return s.root.transform="translate("+c+"px, "+p+"px)",r.createElement("span",{style:this.mergeAndPrefix(s.root)},this.props.value)}});t.exports=s},{"../mixins/style-propable":54,react:319}],108:[function(e,t,n){"use strict";var o=e("react"),r=e("../mixins/style-propable"),i=o.createClass({displayName:"ClockPointer",mixins:[r],contextTypes:{muiTheme:o.PropTypes.object},propTypes:{value:o.PropTypes.number,type:o.PropTypes.oneOf(["hour","minute"])},getInitialState:function(){return{inner:this.isInner(this.props.value)}},getDefaultProps:function(){return{value:null,type:"minute",hasSelected:!1}},componentWillReceiveProps:function(e){this.setState({inner:this.isInner(e.value)})},isInner:function(e){return"hour"!==this.props.type?!1:1>e||e>12},getAngle:function(){return"hour"===this.props.type?this.calcAngle(this.props.value,12):this.calcAngle(this.props.value,60)},calcAngle:function(e,t){e%=t;var n=360/t*e;return n},getTheme:function(){return this.context.muiTheme.component.timePicker},render:function(){if(null===this.props.value)return o.createElement("span",null);var e=this.getAngle(),t={root:{height:"30%",background:this.getTheme().accentColor,width:2,left:"calc(50% - 1px)",position:"absolute",bottom:"50%",transformOrigin:"bottom",pointerEvents:"none",transform:"rotateZ("+e+"deg)"},mark:{background:this.getTheme().selectTextColor,border:"4px solid "+this.getTheme().accentColor,width:7,height:7,position:"absolute",top:-5,left:-6,borderRadius:"100%"}};return this.state.inner||(t.root.height="40%"),this.props.hasSelected&&(t.mark.display="none"),o.createElement("div",{style:this.mergeAndPrefix(t.root)},o.createElement("div",{style:t.mark}))}});t.exports=i},{"../mixins/style-propable":54,react:319}],109:[function(e,t,n){"use strict";var o=e("react"),r=e("../mixins/style-propable"),i=e("./time-display"),s=e("./clock-button"),a=e("./clock-hours"),l=e("./clock-minutes"),c=o.createClass({displayName:"Clock",mixins:[r],propTypes:{initialTime:o.PropTypes.object,mode:o.PropTypes.oneOf(["hour","minute"]),format:o.PropTypes.oneOf(["ampm","24hr"]),isActive:o.PropTypes.bool},getDefaultProps:function(){return{initialTime:new Date}},componentWillReceiveProps:function(e){this.setState({selectedTime:e.initialTime})},getInitialState:function(){return{selectedTime:this.props.initialTime,mode:"hour"}},_setMode:function(e){var t=this;setTimeout(function(){t.setState({mode:e})},100)},_setAffix:function(e){if(e!==this._getAffix()){var t=this.state.selectedTime.getHours();return"am"===e?void this.handleChangeHours(t-12):void this.handleChangeHours(t+12)}},_getAffix:function(){if("ampm"!==this.props.format)return"";var e=this.state.selectedTime.getHours();return 12>e?"am":"pm"},_getButtons:function(){var e=[],t=this._getIsAM();return"ampm"===this.props.format&&(e=[o.createElement(s,{position:"left",onTouchTap:this._setAffix.bind(this,"am"),selected:t},"AM"),o.createElement(s,{position:"right",onTouchTap:this._setAffix.bind(this,"pm"),selected:!t},"PM")]),e},_getIsAM:function(){return"am"===this._getAffix()},render:function(){var e=null,t=this._getButtons(),n={root:{},container:{height:280,padding:10}};return e="hour"===this.state.mode?o.createElement(a,{key:"hours",format:this.props.format,onChange:this.handleChangeHours,initialHours:this.state.selectedTime.getHours()}):o.createElement(l,{key:"minutes",onChange:this.handleChangeMinutes,initialMinutes:this.state.selectedTime.getMinutes()}),o.createElement("div",{style:n.root},o.createElement(i,{selectedTime:this.state.selectedTime,mode:this.state.mode,format:this.props.format,affix:this._getAffix(),onSelectHour:this._setMode.bind(this,"hour"),onSelectMin:this._setMode.bind(this,"minute")}),o.createElement("div",{style:n.container},e),t)},handleChangeHours:function(e,t){var n=this,o=new Date(this.state.selectedTime);o.setHours(e),this.setState({selectedTime:o}),t&&setTimeout(function(){n.setState({mode:"minute"})},100)},handleChangeMinutes:function(e){var t=new Date(this.state.selectedTime);t.setMinutes(e),this.setState({selectedTime:t})},getSelectedTime:function(){return this.state.selectedTime}});t.exports=c},{"../mixins/style-propable":54,"./clock-button":104,"./clock-hours":105,"./clock-minutes":106,"./time-display":111,react:319}],110:[function(e,t,n){"use strict";t.exports=e("./time-picker")},{"./time-picker":113}],111:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=function(){function e(e,t){var n=[],o=!0,r=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);o=!0);}catch(l){r=!0,i=l}finally{try{!o&&a["return"]&&a["return"]()}finally{if(r)throw i}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),s=e("react"),a=e("../mixins/style-propable"),l=s.createClass({displayName:"TimeDisplay",mixins:[a],contextTypes:{muiTheme:s.PropTypes.object},propTypes:{selectedTime:s.PropTypes.object.isRequired,format:s.PropTypes.oneOf(["ampm","24hr"]),mode:s.PropTypes.oneOf(["hour","minute"]),affix:s.PropTypes.oneOf(["","pm","am"])},getInitialState:function(){return{transitionDirection:"up"}},getDefaultProps:function(){return{mode:"hour",affix:""}},componentWillReceiveProps:function(e){var t=void 0;e.selectedTime!==this.props.selectedTime&&(t=e.selectedTime>this.props.selectedTime?"up":"down",this.setState({transitionDirection:t}))},sanitizeTime:function(){var e=this.props.selectedTime.getHours(),t=this.props.selectedTime.getMinutes().toString();return"ampm"===this.props.format&&(e%=12,e=e||12),e=e.toString(),e.length<2&&(e="0"+e),t.length<2&&(t="0"+t),[e,t]},getTheme:function(){return this.context.muiTheme.component.timePicker},render:function(){var e=this.props,t=(e.selectedTime,e.mode),n=o(e,["selectedTime","mode"]),a={root:{textAlign:"center",position:"relative",width:280,height:"100%"},time:{margin:"6px 0",lineHeight:"58px",height:58,fontSize:"58px"},box:{padding:"16px 0",backgroundColor:this.getTheme().color,color:this.getTheme().textColor},hour:{},minute:{}},l=this.sanitizeTime(),c=i(l,2),p=c[0],u=c[1];return a[t].color=this.getTheme().accentColor,s.createElement("div",r({},n,{style:this.mergeAndPrefix(a.root)}),s.createElement("div",{style:this.mergeAndPrefix(a.box)},s.createElement("div",{style:this.mergeAndPrefix(a.time)},s.createElement("span",{style:this.mergeAndPrefix(a.hour),onTouchTap:this.props.onSelectHour},p),s.createElement("span",null,":"),s.createElement("span",{style:this.mergeAndPrefix(a.minute),onTouchTap:this.props.onSelectMin},u)),s.createElement("span",{key:"affix"},this.props.affix.toUpperCase())))}});t.exports=l},{"../mixins/style-propable":54,react:319}],112:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../mixins/style-propable"),a=e("../mixins/window-listenable"),l=e("../utils/key-code"),c=e("./clock"),p=e("../dialog"),u=e("../flat-button"),h=i.createClass({displayName:"TimePickerDialog",mixins:[s,a],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{initialTime:i.PropTypes.object,onAccept:i.PropTypes.func,onShow:i.PropTypes.func,onDismiss:i.PropTypes.func},windowListeners:{keyup:"_handleWindowKeyUp"},getTheme:function(){return this.context.muiTheme.component.timePicker},render:function(){var e=this.props,t=e.initialTime,n=(e.onAccept,e.format),s=o(e,["initialTime","onAccept","format"]),a={root:{fontSize:14,color:this.getTheme().clockColor},dialogContent:{width:280},body:{padding:0}},l=[i.createElement(u,{key:0,label:"Cancel",secondary:!0,onTouchTap:this._handleCancelTouchTap}),i.createElement(u,{key:1,label:"OK",secondary:!0,onTouchTap:this._handleOKTouchTap})];return i.createElement(p,r({},s,{ref:"dialogWindow",style:this.mergeAndPrefix(a.root),bodyStyle:this.mergeAndPrefix(a.body),actions:l,contentStyle:a.dialogContent,onDismiss:this._handleDialogDismiss,onShow:this._handleDialogShow,repositionOnUpdate:!1}),i.createElement(c,{ref:"clock",format:n,initialTime:t}))},show:function(){this.refs.dialogWindow.show()},dismiss:function(){this.refs.dialogWindow.dismiss()},_handleCancelTouchTap:function(){this.dismiss()},_handleOKTouchTap:function(){this.dismiss(),this.props.onAccept&&this.props.onAccept(this.refs.clock.getSelectedTime())},_handleDialogShow:function(){this.props.onShow&&this.props.onShow()},_handleDialogDismiss:function(){this.props.onDismiss&&this.props.onDismiss()},_handleWindowKeyUp:function(e){if(this.refs.dialogWindow.isOpen())switch(e.keyCode){case l.ENTER:this._handleOKTouchTap()}}});t.exports=h},{"../dialog":26,"../flat-button":32,"../mixins/style-propable":54,"../mixins/window-listenable":56,"../utils/key-code":133,"./clock":109,react:319}],113:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../mixins/style-propable"),a=e("../mixins/window-listenable"),l=e("./time-picker-dialog"),c=e("../text-field"),p=new Date;p.setHours(0),p.setMinutes(0);var u=i.createClass({displayName:"TimePicker",mixins:[s,a],propTypes:{defaultTime:i.PropTypes.object,format:i.PropTypes.oneOf(["ampm","24hr"]),pedantic:i.PropTypes.bool,onFocus:i.PropTypes.func,onTouchTap:i.PropTypes.func,onChange:i.PropTypes.func,onShow:i.PropTypes.func,onDismiss:i.PropTypes.func},windowListeners:{keyup:"_handleWindowKeyUp"},getDefaultProps:function(){return{defaultTime:p,format:"ampm",pedantic:!1}},getInitialState:function(){return{time:this.props.defaultTime,dialogTime:new Date}},formatTime:function(e){var t=e.getHours(),n=e.getMinutes().toString();if("ampm"===this.props.format){var o=12>t;t%=12;var r=o?" am":" pm";return t=(t||12).toString(),n.length<2&&(n="0"+n),this.props.pedantic&&"12"===t&&"00"===n?" pm"===r?"12 noon":"12 midnight":t+("00"===n?"":":"+n)+r}return t=t.toString(),t.length<2&&(t="0"+t),n.length<2&&(n="0"+n),t+":"+n},render:function(){var e=this.props,t=e.format,n=(e.onFocus,e.onTouchTap,e.onShow),s=e.onDismiss,a=o(e,["format","onFocus","onTouchTap","onShow","onDismiss"]),p=void 0;return this.props.defaultTime&&(p=this.formatTime(this.props.defaultTime)),i.createElement("div",null,i.createElement(c,r({},a,{ref:"input",defaultValue:p,onFocus:this._handleInputFocus,onTouchTap:this._handleInputTouchTap})),i.createElement(l,{ref:"dialogWindow",initialTime:this.state.dialogTime,onAccept:this._handleDialogAccept,onShow:n,onDismiss:s,format:t}))},getTime:function(){return this.state.time},setTime:function(e){this.setState({time:e}),this.refs.input.setValue(this.formatTime(e))},_handleDialogAccept:function(e){this.setTime(e),this.props.onChange&&this.props.onChange(null,e)},_handleInputFocus:function(e){e.target.blur(),this.props.onFocus&&this.props.onFocus(e)},_handleInputTouchTap:function(e){e.preventDefault(),this.setState({dialogTime:this.getTime()}),this.refs.dialogWindow.show(),this.props.onTouchTap&&this.props.onTouchTap(e)}});t.exports=u},{"../mixins/style-propable":54,"../mixins/window-listenable":56,"../text-field":102,"./time-picker-dialog":112,react:319}],114:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./styles/transitions"),l=e("./paper"),c=e("./enhanced-switch"),p=i.createClass({displayName:"Toggle",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{elementStyle:i.PropTypes.object,labelStyle:i.PropTypes.object,onToggle:i.PropTypes.func,toggled:i.PropTypes.bool,defaultToggled:i.PropTypes.bool},getInitialState:function(){return{switched:this.props.toggled||this.props.defaultToggled||this.props.valueLink&&this.props.valueLink.value||!1}},getTheme:function(){return this.context.muiTheme.component.toggle},getStyles:function(){var e=20,t=36,n={icon:{width:36,padding:"4px 0px 6px 2px"},toggleElement:{width:t},track:{transition:a.easeOut(),width:"100%",height:14,borderRadius:30,backgroundColor:this.getTheme().trackOffColor},thumb:{transition:a.easeOut(),position:"absolute",top:1,left:0,width:e,height:e,lineHeight:"24px",borderRadius:"50%",backgroundColor:this.getTheme().thumbOffColor},trackWhenSwitched:{backgroundColor:this.getTheme().trackOnColor},thumbWhenSwitched:{backgroundColor:this.getTheme().thumbOnColor,left:"100%"},trackWhenDisabled:{backgroundColor:this.getTheme().trackDisabledColor},thumbWhenDisabled:{backgroundColor:this.getTheme().thumbDisabledColor},label:{color:this.props.disabled?this.getTheme().labelDisabledColor:this.getTheme().labelColor}};return n},render:function(){var e=this.props,t=(e.onToggle,o(e,["onToggle"])),n=this.getStyles(),s=this.mergeAndPrefix(n.track,this.props.trackStyle,this.state.switched&&n.trackWhenSwitched,this.props.disabled&&n.trackWhenDisabled),a=this.mergeAndPrefix(n.thumb,this.props.thumbStyle,this.state.switched&&n.thumbWhenSwitched,this.props.disabled&&n.thumbWhenDisabled);this.state.switched&&(a.marginLeft="-"+a.width);var p=this.mergeAndPrefix(n.toggleElement,this.props.elementStyle),u=i.createElement("div",{style:p},i.createElement("div",{style:s}),i.createElement(l,{style:a,circle:!0,zDepth:1})),h=this.mergeAndPrefix({top:-10,left:-10},this.props.rippleStyle),d=this.state.switched?this.getTheme().thumbOnColor:this.context.muiTheme.component.textColor,f=this.mergeAndPrefix(n.icon,this.props.iconStyle),m=this.mergeAndPrefix(n.label,this.props.labelStyle),y={ref:"enhancedSwitch",inputType:"checkbox",switchElement:u,rippleStyle:h,rippleColor:d,iconStyle:f,trackStyle:s,thumbStyle:a,labelStyle:m,switched:this.state.switched,onSwitch:this._handleToggle,onParentShouldUpdate:this._handleStateChange,defaultSwitched:this.props.defaultToggled,labelPosition:this.props.labelPosition?this.props.labelPosition:"left"};return this.props.hasOwnProperty("toggled")&&(y.checked=this.props.toggled),i.createElement(c,r({},t,y))},isToggled:function(){return this.refs.enhancedSwitch.isSwitched()},setToggled:function(e){this.refs.enhancedSwitch.setSwitched(e)},_handleToggle:function(e,t){this.props.onToggle&&this.props.onToggle(e,t)},_handleStateChange:function(e){this.setState({switched:e})}});t.exports=p},{"./enhanced-switch":30,"./mixins/style-propable":54,"./paper":58,"./styles/transitions":77,react:319}],115:[function(e,t,n){"use strict";var o=e("react"),r=e("../styles/colors"),i=e("../mixins/style-propable"),s=o.createClass({displayName:"ToolbarGroup",mixins:[i],contextTypes:{muiTheme:o.PropTypes.object},propTypes:{className:o.PropTypes.string,"float":o.PropTypes.string},getDefaultProps:function(){return{"float":"left"}},getTheme:function(){return this.context.muiTheme.component.toolbar},getSpacing:function(){return this.context.muiTheme.spacing.desktopGutter},getStyles:function(){var e=this.getSpacing(),t=(this.getTheme().height-this.context.muiTheme.component.button.height)/2,n={root:{position:"relative","float":this.props["float"]},dropDownMenu:{root:{"float":"left",color:r.lightBlack,display:"inline-block",marginRight:this.getSpacing()},controlBg:{backgroundColor:this.getTheme().menuHoverColor,borderRadius:0},underline:{display:"none"}},button:{"float":"left",margin:t+"px "+e+"px",position:"relative"},icon:{root:{"float":"left",cursor:"pointer",color:this.getTheme().iconColor,lineHeight:this.getTheme().height+"px",paddingLeft:this.getSpacing()},hover:{color:r.darkBlack}},span:{"float":"left",color:this.getTheme().iconColor,lineHeight:this.getTheme().height+"px"}};return n},render:function(){var e=this,t=this.getStyles();this.props.firstChild&&(t.marginLeft=-24),this.props.lastChild&&(t.marginRight=-24);var n=o.Children.map(this.props.children,function(n){if(!n)return null;switch(n.type.displayName){case"DropDownMenu":return o.cloneElement(n,{style:e.mergeStyles(t.dropDownMenu.root,n.props.style),styleControlBg:t.dropDownMenu.controlBg,styleUnderline:t.dropDownMenu.underline});case"DropDownIcon":return o.cloneElement(n,{style:e.mergeStyles({"float":"left"},n.props.style),iconStyle:t.icon.root,onMouseEnter:e._handleMouseEnterDropDownMenu,onMouseLeave:e._handleMouseLeaveDropDownMenu});case"RaisedButton":case"FlatButton":return o.cloneElement(n,{style:e.mergeStyles(t.button,n.props.style)});case"FontIcon":return o.cloneElement(n,{style:e.mergeStyles(t.icon.root,n.props.style),onMouseEnter:e._handleMouseEnterFontIcon,onMouseLeave:e._handleMouseLeaveFontIcon});case"ToolbarSeparator":case"ToolbarTitle":return o.cloneElement(n,{style:e.mergeStyles(t.span,n.props.style)});default:return n}},this);return o.createElement("div",{className:this.props.className,style:this.mergeAndPrefix(t.root,this.props.style)},n)},_handleMouseEnterDropDownMenu:function(e){e.target.style.zIndex=this.getStyles().icon.hover.zIndex,e.target.style.color=this.getStyles().icon.hover.color},_handleMouseLeaveDropDownMenu:function(e){e.target.style.zIndex="auto",e.target.style.color=this.getStyles().icon.root.color},_handleMouseEnterFontIcon:function(e){e.target.style.zIndex=this.getStyles().icon.hover.zIndex,e.target.style.color=this.getStyles().icon.hover.color},_handleMouseLeaveFontIcon:function(e){e.target.style.zIndex="auto",e.target.style.color=this.getStyles().icon.root.color}});t.exports=s},{"../mixins/style-propable":54,"../styles/colors":71,react:319}],116:[function(e,t,n){"use strict";var o=e("react"),r=e("../mixins/style-propable"),i=o.createClass({displayName:"ToolbarSeparator",mixins:[r],contextTypes:{muiTheme:o.PropTypes.object},getTheme:function(){return this.context.muiTheme.component.toolbar},getSpacing:function(){return this.context.muiTheme.spacing},render:function(){var e=this.mergeAndPrefix({backgroundColor:this.getTheme().separatorColor,display:"inline-block",height:this.getSpacing().desktopGutterMore,marginLeft:this.getSpacing().desktopGutter,position:"relative",top:(this.getTheme().height-this.getSpacing().desktopGutterMore)/2,width:1},this.props.style);return o.createElement("span",{className:this.props.className,style:e})}});t.exports=i},{"../mixins/style-propable":54,react:319}],117:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("../mixins/style-propable"),a=i.createClass({displayName:"ToolbarTitle",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{text:i.PropTypes.string},getTheme:function(){return this.context.muiTheme.component.toolbar},render:function(){var e=this.props,t=e.style,n=e.text,s=o(e,["style","text"]),a=this.mergeAndPrefix({paddingRight:this.context.muiTheme.spacing.desktopGutterLess,lineHeight:this.getTheme().height+"px",fontSize:this.getTheme().titleFontSize+"px",display:"inline-block",position:"relative"},t);return i.createElement("span",r({style:a},s),n)}});t.exports=a},{"../mixins/style-propable":54,react:319}],118:[function(e,t,n){"use strict";var o=e("react"),r=e("../mixins/style-propable"),i=o.createClass({displayName:"Toolbar",mixins:[r],contextTypes:{muiTheme:o.PropTypes.object},propTypes:{className:o.PropTypes.string,style:o.PropTypes.object},getTheme:function(){return this.context.muiTheme.component.toolbar},getStyles:function(){return this.mergeAndPrefix({boxSizing:"border-box",WebkitTapHighlightColor:"rgba(0,0,0,0)",backgroundColor:this.getTheme().backgroundColor,height:this.getTheme().height,width:"100%",padding:this.props.noGutter?0:"0px "+this.context.muiTheme.spacing.desktopGutter+"px"},this.props.style)},render:function(){return o.createElement("div",{className:this.props.className,style:this.getStyles()},this.props.children)}});t.exports=i},{"../mixins/style-propable":54,react:319}],119:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react"),s=e("./mixins/style-propable"),a=e("./styles/transitions"),l=e("./styles/colors"),c=i.createClass({displayName:"Tooltip",mixins:[s],contextTypes:{muiTheme:i.PropTypes.object},propTypes:{className:i.PropTypes.string,label:i.PropTypes.string.isRequired,show:i.PropTypes.bool,touch:i.PropTypes.bool,verticalPosition:i.PropTypes.oneOf(["top","bottom"]),horizontalPosition:i.PropTypes.oneOf(["left","right","center"])},componentDidMount:function(){this._setRippleSize(),this._setTooltipPosition()},componentDidUpdate:function(){this._setRippleSize()},getInitialState:function(){return{offsetWidth:null}},getStyles:function(){var e=this.props.verticalPosition,t=this.props.horizontalPosition,n=this.props.touch?10:0,o=this.props.touch?-20:-10,r="bottom"===e?14+n:-14-n,i={root:{position:"absolute",fontFamily:this.context.muiTheme.contentFontFamily,fontSize:"10px",lineHeight:"22px",padding:"0 8px",color:l.white,overflow:"hidden",top:-1e4,borderRadius:2,userSelect:"none",opacity:0,right:"left"===t?12:null,left:"center"===t?(this.state.offsetWidth-48)/2*-1:null,transition:a.easeOut("0ms","top","450ms")+","+a.easeOut("450ms","transform","0ms")+","+a.easeOut("450ms","opacity","0ms")},label:{position:"relative",whiteSpace:"nowrap"},ripple:{position:"absolute",left:"center"===t?"50%":"left"===t?"100%":"0%",top:"bottom"===e?0:"100%",transform:"translate(-50%, -50%)",borderRadius:"50%",backgroundColor:"transparent",transition:a.easeOut("0ms","width","450ms")+","+a.easeOut("0ms","height","450ms")+","+a.easeOut("450ms","backgroundColor","0ms")},rootWhenShown:{top:"top"===e?o:36,opacity:.9,transform:"translate3d(0px, "+r+"px, 0px)",transition:a.easeOut("0ms","top","0ms")+","+a.easeOut("450ms","transform","0ms")+","+a.easeOut("450ms","opacity","0ms")},rootWhenTouched:{fontSize:"14px",lineHeight:"32px",padding:"0 16px"},rippleWhenShown:{backgroundColor:l.grey700,transition:a.easeOut("450ms","width","0ms")+","+a.easeOut("450ms","height","0ms")+","+a.easeOut("450ms","backgroundColor","0ms")}};return i},render:function(){var e=this.props,t=(e.label,o(e,["label"])),n=this.getStyles();return i.createElement("div",r({},t,{style:this.mergeAndPrefix(n.root,this.props.show&&n.rootWhenShown,this.props.touch&&n.rootWhenTouched,this.props.style)}),i.createElement("div",{ref:"ripple",style:this.mergeAndPrefix(n.ripple,this.props.show&&n.rippleWhenShown)}),i.createElement("span",{style:this.mergeAndPrefix(n.label)},this.props.label))},_setRippleSize:function(){var e=i.findDOMNode(this.refs.ripple),t=window.getComputedStyle(i.findDOMNode(this)),n=parseInt(t.getPropertyValue("width"),10)/("center"===this.props.horizontalPosition?2:1),o=parseInt(t.getPropertyValue("height"),10),r=Math.ceil(2*Math.sqrt(Math.pow(o,2)+Math.pow(n,2)));this.props.show?(e.style.height=r+"px",e.style.width=r+"px"):(e.style.width="0px",e.style.height="0px")},_setTooltipPosition:function(){var e=i.findDOMNode(this);this.setState({offsetWidth:e.offsetWidth})}});t.exports=c},{"./mixins/style-propable":54,"./styles/colors":71,"./styles/transitions":77,react:319}],120:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=i.addons.PureRenderMixin,a=e("../mixins/style-propable"),l=e("../styles/auto-prefix"),c=e("../styles/transitions"),p=i.createClass({displayName:"ScaleInChild",mixins:[s,a],propTypes:{enterDelay:i.PropTypes.number,maxScale:i.PropTypes.number,minScale:i.PropTypes.number},getDefaultProps:function(){return{enterDelay:0,maxScale:1,minScale:0}},componentWillAppear:function(e){this._initializeAnimation(e)},componentWillEnter:function(e){this._initializeAnimation(e)},componentDidAppear:function(){this._animate()},componentDidEnter:function(){this._animate()},componentWillLeave:function(e){var t=this,n=i.findDOMNode(this).style;n.opacity="0",l.set(n,"transform","scale("+this.props.minScale+")"),setTimeout(function(){t.isMounted()&&e()}.bind(this),450)},render:function(){var e=this.props,t=e.children,n=(e.enterDelay,e.style),s=o(e,["children","enterDelay","style"]),a=this.mergeAndPrefix({position:"absolute",height:"100%",width:"100%",top:0,left:0,transition:c.easeOut(null,["transform","opacity"])},n);return i.createElement("div",r({},s,{style:a}),t)},_animate:function(){var e=i.findDOMNode(this).style;e.opacity="1",l.set(e,"transform","scale("+this.props.maxScale+")")},_initializeAnimation:function(e){var t=i.findDOMNode(this).style;t.opacity="0",l.set(t,"transform","scale(0)"),setTimeout(e,this.props.enterDelay)}});t.exports=p},{"../mixins/style-propable":54,"../styles/auto-prefix":70,"../styles/transitions":77,"react/addons":147}],121:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=i.addons.PureRenderMixin,a=i.addons.TransitionGroup,l=e("../mixins/style-propable"),c=e("./scale-in-child"),p=i.createClass({displayName:"ScaleIn",mixins:[s,l],propTypes:{childStyle:i.PropTypes.object,enterDelay:i.PropTypes.number,maxScale:i.PropTypes.number,minScale:i.PropTypes.number},getDefaultProps:function(){return{enterDelay:0}},render:function(){var e=this.props,t=e.children,n=e.childStyle,s=e.enterDelay,l=e.maxScale,p=e.minScale,u=e.style,h=o(e,["children","childStyle","enterDelay","maxScale","minScale","style"]),d=this.mergeAndPrefix({position:"relative",overflow:"hidden",height:"100%"},u),f=i.Children.map(t,function(e){return i.createElement(c,{key:e.key,enterDelay:s,maxScale:l,minScale:p,style:n},e)});return i.createElement(a,r({},h,{style:d,component:"div"}),f)}});t.exports=p},{"../mixins/style-propable":54,"./scale-in-child":120,"react/addons":147}],122:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=e("../mixins/style-propable"),a=e("../styles/auto-prefix"),l=e("../styles/transitions"),c=i.createClass({displayName:"SlideInChild",mixins:[s],propTypes:{enterDelay:i.PropTypes.number,getLeaveDirection:i.PropTypes.func.isRequired},getDefaultProps:function(){return{enterDelay:0}},componentWillEnter:function(e){var t=i.findDOMNode(this).style,n="left"===this.props.direction?"100%":"right"===this.props.direction?"-100%":"0",o="up"===this.props.direction?"100%":"down"===this.props.direction?"-100%":"0";t.opacity="0",a.set(t,"transform","translate3d("+n+","+o+",0)"),setTimeout(e,this.props.enterDelay)},componentDidEnter:function(){var e=i.findDOMNode(this).style;e.opacity="1",a.set(e,"transform","translate3d(0,0,0)")},componentWillLeave:function(e){var t=this,n=i.findDOMNode(this).style,o=this.props.getLeaveDirection(),r="left"===o?"-100%":"right"===o?"100%":"0",s="up"===o?"-100%":"down"===o?"100%":"0";n.opacity="0",a.set(n,"transform","translate3d("+r+","+s+",0)"),setTimeout(function(){t.isMounted()&&e()}.bind(this),450)},render:function(){var e=this.props,t=e.children,n=(e.enterDelay,e.getLeaveDirection,e.style),s=o(e,["children","enterDelay","getLeaveDirection","style"]),a=this.mergeAndPrefix({position:"absolute",height:"100%",width:"100%",top:0,left:0,transition:l.easeOut(null,["transform","opacity"])},n);return i.createElement("div",r({},s,{style:a}),t)}});t.exports=c},{"../mixins/style-propable":54,"../styles/auto-prefix":70,"../styles/transitions":77,"react/addons":147}],123:[function(e,t,n){"use strict";function o(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=e("react/addons"),s=i.addons.TransitionGroup,a=e("../mixins/style-propable"),l=e("./slide-in-child"),c=i.createClass({
displayName:"SlideIn",mixins:[a],propTypes:{enterDelay:i.PropTypes.number,childStyle:i.PropTypes.object,direction:i.PropTypes.oneOf(["left","right","up","down"])},getDefaultProps:function(){return{enterDelay:0,direction:"left"}},render:function(){var e=this,t=this.props,n=t.enterDelay,a=t.children,c=t.childStyle,p=t.direction,u=t.style,h=o(t,["enterDelay","children","childStyle","direction","style"]),d=this.mergeAndPrefix({position:"relative",overflow:"hidden",height:"100%"},u),f=i.Children.map(a,function(t){return i.createElement(l,{key:t.key,direction:p,enterDelay:n,getLeaveDirection:e._getLeaveDirection,style:c},t)},this);return i.createElement(s,r({},h,{style:d,component:"div"}),f)},_getLeaveDirection:function(){return this.props.direction}});t.exports=c},{"../mixins/style-propable":54,"./slide-in-child":122,"react/addons":147}],124:[function(e,t,n){"use strict";var o=e("react/addons"),r=o.addons.createFragment;t.exports={create:function(e){var t={},n=0,o=void 0;for(var i in e){var s=e[i];s&&(0===n&&(o=i),t[i]=s,n++)}return 0===n?void 0:1===n?t[o]:r(t)},extend:function(e,t,n){return o.isValidElement(e)?o.Children.map(e,function(e){var r="function"==typeof t?t(e):t,i="function"==typeof n?n(e):n?n:e.props.children;return o.cloneElement(e,r,i)}):e}}},{"react/addons":147}],125:[function(e,t,n){"use strict";t.exports={_luminance:function(e){if(e=this._decomposeColor(e),e.type.indexOf("rgb")>-1){var t=e.values.map(function(e){return e/=255,.03928>=e?e/12.92:Math.pow((e+.055)/1.055,2.4)});return.2126*t[0]+.7152*t[1]+.0722*t[2]}var n="Calculating the relative luminance is not available for HSL and HSLA.";return console.error(n),-1},_convertColorToString:function(e,t){var n=e.type+"("+parseInt(e.values[0])+","+parseInt(e.values[1])+","+parseInt(e.values[2]);return n+=void 0!==t?","+t+")":4===e.values.length?","+e.values[3]+")":")"},_convertHexToRGB:function(e){if(4===e.length){for(var t="#",n=1;n<e.length;n++)t+=e.charAt(n)+e.charAt(n);e=t}var o={r:parseInt(e.substr(1,2),16),g:parseInt(e.substr(3,2),16),b:parseInt(e.substr(5,2),16)};return"rgb("+o.r+","+o.g+","+o.b+")"},_decomposeColor:function(e){if("#"===e.charAt(0))return this._decomposeColor(this._convertHexToRGB(e));var t=e.indexOf("("),n=e.substring(0,t),o=e.substring(t+1,e.length-1).split(",");return{type:n,values:o}},fade:function(e,t){return e=this._decomposeColor(e),("rgb"===e.type||"hsl"===e.type)&&(e.type+="a"),this._convertColorToString(e,t)},lighten:function(e,t){if(e=this._decomposeColor(e),e.type.indexOf("hsl")>-1)return e.values[2]+=t,this._decomposeColor(this._convertColorToString(e));if(e.type.indexOf("rgb")>-1)for(var n=0;3>n;n++)e.values[n]*=1+t,e.values[n]>255&&(e.values[n]=255);return e.type.indexOf("a")<=-1&&(e.type+="a"),this._convertColorToString(e,"0.15")},darken:function(e,t){if(e=this._decomposeColor(e),e.type.indexOf("hsl")>-1)return e.values[2]+=t,this._decomposeColor(this._convertColorToString(e));if(e.type.indexOf("rgb")>-1)for(var n=0;3>n;n++)e.values[n]*=1-t,e.values[n]<0&&(e.values[n]=0);return this._convertColorToString(e)},contrastRatio:function(e,t){var n=this._luminance(e),o=this._luminance(t);return n>=o?((n+.05)/(o+.05)).toFixed(2):((o+.05)/(n+.05)).toFixed(2)},contrastRatioLevel:function(e,t){var n={fail:{range:[0,3],color:"hsl(0, 100%, 40%)"},"aa-large":{range:[3,4.5],color:"hsl(40, 100%, 45%)"},aa:{range:[4.5,7],color:"hsl(80, 60%, 45%)"},aaa:{range:[7,22],color:"hsl(95, 60%, 41%)"}},o=this.contrastRatio(e,t);for(var r in n){var i=n[r].range;if(o>=i[0]&&o<=i[1])return r}}}},{}],126:[function(e,t,n){"use strict";var o=e("./events");t.exports={_testSupportedProps:function(e){var t=void 0,n=document.createElement("div");for(t in e)if(e.hasOwnProperty(t)&&void 0!==n.style[t])return e[t]},transitionEndEventName:function(){return this._testSupportedProps({transition:"transitionend",OTransition:"otransitionend",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"})},animationEndEventName:function(){return this._testSupportedProps({animation:"animationend","-o-animation":"oAnimationEnd","-moz-animation":"animationend","-webkit-animation":"webkitAnimationEnd"})},onTransitionEnd:function(e,t){var n=this.transitionEndEventName();o.once(e,n,function(){return t()})},onAnimationEnd:function(e,t){var n=this.animationEndEventName();o.once(e,n,function(){return t()})}}},{"./events":129}],127:[function(e,t,n){"use strict";t.exports={addDays:function(e,t){var n=this.clone(e);return n.setDate(e.getDate()+t),n},addMonths:function(e,t){var n=this.clone(e);return n.setMonth(e.getMonth()+t),n},addYears:function(e,t){var n=this.clone(e);return n.setFullYear(e.getFullYear()+t),n},clone:function(e){return new Date(e.getTime())},cloneAsDate:function(e){var t=this.clone(e);return t.setHours(0,0,0,0),t},getDaysInMonth:function(e){var t=this.getFirstDayOfMonth(e);return t.setMonth(t.getMonth()+1),t.setDate(t.getDate()-1),t.getDate()},getFirstDayOfMonth:function(e){return new Date(e.getFullYear(),e.getMonth(),1)},getFullMonth:function(e){var t=e.getMonth();switch(t){case 0:return"January";case 1:return"February";case 2:return"March";case 3:return"April";case 4:return"May";case 5:return"June";case 6:return"July";case 7:return"August";case 8:return"September";case 9:return"October";case 10:return"November";case 11:return"December"}},getShortMonth:function(e){var t=e.getMonth();switch(t){case 0:return"Jan";case 1:return"Feb";case 2:return"Mar";case 3:return"Apr";case 4:return"May";case 5:return"Jun";case 6:return"Jul";case 7:return"Aug";case 8:return"Sep";case 9:return"Oct";case 10:return"Nov";case 11:return"Dec"}},getDayOfWeek:function(e){var t=e.getDay();switch(t){case 0:return"Sunday";case 1:return"Monday";case 2:return"Tuesday";case 3:return"Wednesday";case 4:return"Thursday";case 5:return"Friday";case 6:return"Saturday"}},getWeekArray:function(e){for(var t=[],n=this.getDaysInMonth(e),o=void 0,r=void 0,i=void 0,s=void 0,a=[],l=1;n>=l;l++)t.push(new Date(e.getFullYear(),e.getMonth(),l));for(;t.length;){i=t[0].getDay(),o=7-i,r=7-o,s=t.splice(0,o);for(var l=0;r>l;l++)s.unshift(null);a.push(s)}return a},format:function(e){var t=e.getMonth()+1,n=e.getDate(),o=e.getFullYear();return t+"/"+n+"/"+o},isEqualDate:function(e,t){return e&&t&&e.getFullYear()===t.getFullYear()&&e.getMonth()===t.getMonth()&&e.getDate()===t.getDate()},isBeforeDate:function(e,t){var n=this.cloneAsDate(e),o=this.cloneAsDate(t);return n.getTime()<o.getTime()},isAfterDate:function(e,t){var n=this.cloneAsDate(e),o=this.cloneAsDate(t);return n.getTime()>o.getTime()},isBetweenDates:function(e,t,n){return!this.isBeforeDate(e,t)&&!this.isAfterDate(e,n)},isDateObject:function(e){return e instanceof Date},monthDiff:function(e,t){var n=void 0;return n=12*(e.getFullYear()-t.getFullYear()),n+=e.getMonth(),n-=t.getMonth()},yearDiff:function(e,t){return~~(this.monthDiff(e,t)/12)}}},{}],128:[function(e,t,n){"use strict";t.exports={isDescendant:function(e,t){for(var n=t.parentNode;null!==n;){if(n===e)return!0;n=n.parentNode}return!1},offset:function(e){var t=e.getBoundingClientRect();return{top:t.top+document.body.scrollTop,left:t.left+document.body.scrollLeft}},getStyleAttributeAsNumber:function(e,t){var n=e.style[t],o=0;return n&&n.length&&(o=parseInt(n)),o},addClass:function(e,t){e.classList?e.classList.add(t):e.className+=" "+t},removeClass:function(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")},hasClass:function(e,t){return e.classList?e.classList.contains(t):new RegExp("(^| )"+t+"( |$)","gi").test(e.className)},toggleClass:function(e,t){this.hasClass(e,t)?this.removeClass(e,t):this.addClass(e,t)},forceRedraw:function(e){var t=e.style.display;e.style.display="none",e.offsetHeight,e.style.display=t},withoutTransition:function(e,t){var n=e.style.transition;e.style.transition=null,t(),this.forceRedraw(e),e.style.transition=n}}},{}],129:[function(e,t,n){"use strict";t.exports={once:function(e,t,n){for(var o=t.split(" "),r=function s(e){return e.target.removeEventListener(e.type,s),n(e)},i=o.length-1;i>=0;i--)this.on(e,o[i],r)},on:function(e,t,n){e.addEventListener?e.addEventListener(t,n):e.attachEvent("on"+t,function(){n.call(e)})},off:function(e,t,n){e.removeEventListener?e.removeEventListener(t,n):e.detachEvent("on"+t,n)},isKeyboard:function(e){return-1!==["keydown","keypress","keyup"].indexOf(e.type)}}},{}],130:[function(e,t,n){"use strict";function o(e){return"object"==typeof e&&null!==e}var r=function i(e,t){var n={};return Object.keys(e).forEach(function(r){var s=e[r],a=void 0;o(t)&&(a=t[r]),n[r]=o(s)&&!Array.isArray(s)?i(s,a):s}),o(t)&&Object.keys(t).forEach(function(e){var r=t[e];(!o(r)||Array.isArray(r))&&(n[e]=r)}),n};t.exports=r},{}],131:[function(e,t,n){"use strict";function o(e,t){return e?t?i(e,{$merge:t}):e:t}var r=e("react/addons"),i=r.addons.update;t.exports={merge:function(){for(var e=Array.prototype.slice.call(arguments,0),t=e[0],n=1;n<e.length;n++)e[n]&&(t=o(t,e[n]));return t},mergeItem:function(e,t,n){var o={};return o[t]={$merge:n},i(e,o)},push:function(e,t){var n=Array.isArray(t)?t:[t];return i(e,{$push:n})},shift:function(e){return i(e,{$splice:[[0,1]]})}}},{"react/addons":147}],132:[function(e,t,n){"use strict";t.exports={ColorManipulator:e("./color-manipulator"),CssEvent:e("./css-event"),Dom:e("./dom"),Events:e("./events"),Extend:e("./extend"),ImmutabilityHelper:e("./immutability-helper"),KeyCode:e("./key-code"),KeyLine:e("./key-line"),UniqueId:e("./unique-id"),Styles:e("./styles")}},{"./color-manipulator":125,"./css-event":126,"./dom":128,"./events":129,"./extend":130,"./immutability-helper":131,"./key-code":133,"./key-line":134,"./styles":137,"./unique-id":138}],133:[function(e,t,n){"use strict";t.exports={DOWN:40,ESC:27,ENTER:13,LEFT:37,RIGHT:39,SPACE:32,TAB:9,UP:38}},{}],134:[function(e,t,n){"use strict";t.exports={Desktop:{GUTTER:24,GUTTER_LESS:16,INCREMENT:64,MENU_ITEM_HEIGHT:32},getIncrementalDim:function(e){return Math.ceil(e/this.Desktop.INCREMENT)*this.Desktop.INCREMENT}}},{}],135:[function(e,t,n){"use strict";t.exports=function(e,t,n){function o(e,t){return typeof e===t}function r(e){m.cssText=e}function i(e,t){return r(y.join(e+";")+(t||""))}function s(e,t){return!!~(""+e).indexOf(t)}function a(e,t){for(var o in e){var r=e[o];if(!s(r,"-")&&m[r]!==n)return"pfx"==t?r:!0}return!1}function l(e,t,r){for(var i in e){var s=t[e[i]];if(s!==n)return r===!1?e[i]:o(s,"function")?s.bind(r||t):s}return!1}function c(e,t,n){var r=e.charAt(0).toUpperCase()+e.slice(1),i=(e+" "+v.join(r+" ")+r).split(" ");return o(t,"string")||o(t,"undefined")?a(i,t):(i=(e+" "+b.join(r+" ")+r).split(" "),l(i,t,n))}var p="2.8.3",u={},h=t.documentElement,d="modernizr",f=t.createElement(d),m=f.style,y=" -webkit- -moz- -o- -ms- ".split(" "),g="Webkit Moz O ms",v=g.split(" "),b=g.toLowerCase().split(" "),T={},x=[],E=x.slice,C=n,_=function(e,o,r,i){var s=n,a=n,l=n,c=n,p=t.createElement("div"),u=t.body,f=u||t.createElement("body");if(parseInt(r,10))for(;r--;)l=t.createElement("div"),l.id=i?i[r]:d+(r+1),p.appendChild(l);return s=["&#173;",'<style id="s',d,'">',e,"</style>"].join(""),p.id=d,(u?p:f).innerHTML+=s,f.appendChild(p),u||(f.style.background="",f.style.overflow="hidden",c=h.style.overflow,h.style.overflow="hidden",h.appendChild(f)),a=o(p,e),u?p.parentNode.removeChild(p):(f.parentNode.removeChild(f),h.style.overflow=c),!!a},P={}.hasOwnProperty,w=n;w=o(P,"undefined")||o(P.call,"undefined")?function(e,t){return t in e&&o(e.constructor.prototype[t],"undefined")}:function(e,t){return P.call(e,t)},Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if("function"!=typeof t)throw new TypeError;var n=E.call(arguments,1),o=function r(){if(this instanceof r){var o=function(){};o.prototype=t.prototype;var i=new o,s=t.apply(i,n.concat(E.call(arguments)));return Object(s)===s?s:i}return t.apply(e,n.concat(E.call(arguments)))};return o}),T.borderradius=function(){return c("borderRadius")},T.boxshadow=function(){return c("boxShadow")},T.opacity=function(){return i("opacity:.55"),/^0.55$/.test(m.opacity)},T.csstransforms=function(){return!!c("transform")},T.csstransforms3d=function(){var e=!!c("perspective");return e&&"webkitPerspective"in h.style&&_("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(t){e=9===t.offsetLeft&&3===t.offsetHeight}),e},T.csstransitions=function(){return c("transition")};for(var D in T)w(T,D)&&(C=D.toLowerCase(),u[C]=T[D](),x.push((u[C]?"":"no-")+C));return u.addTest=function(e,t){if("object"==typeof e)for(var o in e)w(e,o)&&u.addTest(o,e[o]);else{if(e=e.toLowerCase(),u[e]!==n)return u;t="function"==typeof t?t():t,"undefined"!=typeof enableClasses&&enableClasses&&(h.className+=" "+(t?"":"no-")+e),u[e]=t}return u},r(""),u._version=p,u._prefixes=y,u._domPrefixes=b,u._cssomPrefixes=v,u.testProp=function(e){return a([e])},u.testAllProps=c,u.testStyles=_,u.prefixed=function(e,t,n){return t?c(e,t,n):c(e,"pfx")},u}(window,window.document)},{}],136:[function(e,t,n){"use strict";var o=e("react");t.exports={corners:o.PropTypes.oneOf(["bottom-left","bottom-right","top-left","top-right"]),cornersAndCenter:o.PropTypes.oneOf(["bottom-center","bottom-left","bottom-right","top-center","top-left","top-right"]),stringOrNumber:o.PropTypes.oneOfType([o.PropTypes.string,o.PropTypes.number]),zDepth:o.PropTypes.oneOf([0,1,2,3,4,5])}},{react:319}],137:[function(e,t,n){"use strict";var o=e("../styles/auto-prefix"),r=e("../utils/immutability-helper");t.exports={mergeAndPrefix:function(){var e=r.merge.apply(this,arguments);return o.all(e)}}},{"../styles/auto-prefix":70,"../utils/immutability-helper":131}],138:[function(e,t,n){"use strict";var o=0;t.exports={generate:function(){return"mui-id-"+o++}}},{}],139:[function(e,t,n){function o(){for(var e,t="",n=0;n<arguments.length;n++)if(e=arguments[n])if("string"==typeof e||"number"==typeof e)t+=" "+e;else if("[object Array]"===Object.prototype.toString.call(e))t+=" "+o.apply(null,e);else if("object"==typeof e)for(var r in e)e.hasOwnProperty(r)&&e[r]&&(t+=" "+r);return t.substr(1)}"undefined"!=typeof t&&t.exports&&(t.exports=o),"undefined"!=typeof define&&define.amd&&define("classnames",[],function(){return o})},{}],140:[function(e,t,n){"use strict";function o(e,t){if(!t)return e;t=String(t);var n=!!~t.indexOf("top"),o=!!~t.indexOf("right"),r=!!~t.indexOf("bottom"),i=!!~t.indexOf("left"),s=!!~t.indexOf("all")||!(n||o||r||i),a=!~t.indexOf("point");return e.boundTop=s||n,e.boundRight=s||o,e.boundBottom=s||r,e.boundLeft=s||i,e.boundBox=a,e}function r(e){return{position:{top:e.state.offsetTop,left:e.state.offsetLeft}}}function i(e){return"both"===e.props.axis||"y"===e.props.axis}function s(e){return"both"===e.props.axis||"x"===e.props.axis}function a(e){return"function"==typeof e||"[object Function]"===Object.prototype.toString.call(e)}function l(e,t){for(var n=0,o=(e.length,null);o=e[n];n++)if(t.apply(t,[o,n,e]))return o}function c(e,t){var n=l(["matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector"],function(t){return a(e[t])});return e[n].call(e,t)}function p(e){var t=e.touches&&e.touches[0]||e;return{clientX:t.clientX,clientY:t.clientY}}function u(e,t,n){e&&(e.attachEvent?e.attachEvent("on"+t,n):e.addEventListener?e.addEventListener(t,n,!0):e["on"+t]=n)}function h(e,t,n){e&&(e.detachEvent?e.detachEvent("on"+t,n):e.removeEventListener?e.removeEventListener(t,n,!0):e["on"+t]=null)}var d,f=e("react/addons"),m=function(){},y="undefined"!=typeof window?window:this;"undefined"!=typeof document&&"body"in document&&(d=document.body);var g="ontouchstart"in y||"onmsgesturechange"in y,v=function(){var e={touch:{start:"touchstart",move:"touchmove",end:"touchend"},mouse:{start:"mousedown",move:"mousemove",end:"mouseup"}};return e[g?"touch":"mouse"]}();t.exports=f.createClass({displayName:"Draggable",mixins:[f.addons.PureRenderMixin],propTypes:{axis:f.PropTypes.oneOf(["both","x","y"]),handle:f.PropTypes.string,cancel:f.PropTypes.string,bound:f.PropTypes.string,grid:f.PropTypes.arrayOf(f.PropTypes.number),constrain:f.PropTypes.func,start:f.PropTypes.object,zIndex:f.PropTypes.number,useChild:f.PropTypes.bool,onStart:f.PropTypes.func,onDrag:f.PropTypes.func,onStop:f.PropTypes.func,onMouseDown:f.PropTypes.func},getDefaultProps:function(){return{axis:"both",bound:null,handle:null,cancel:null,grid:null,start:{},zIndex:0/0,useChild:!0,onStart:m,onDrag:m,onStop:m,onMouseDown:m}},getInitialState:function(){var e={dragging:!1,clientX:0,clientY:0,offsetLeft:this.props.start.x||0,offsetTop:this.props.start.y||0};return o(e,this.props.bound),e},componentWillReceiveProps:function(e){var t=o({},e.bound);e.start&&(null!=e.start.x&&(t.offsetLeft=e.start.x||0),null!=e.start.y&&(t.offsetTop=e.start.y||0)),this.setState(t)},componentWillUnmount:function(){h(y,v.move,this.handleDrag),h(y,v.end,this.handleDragEnd)},handleDragStart:function(e){if(this.props.onMouseDown(e),!(this.props.handle&&!c(e.target,this.props.handle)||this.props.cancel&&c(e.target,this.props.cancel))){var t=p(e);this.setState({dragging:!0,clientX:t.clientX,clientY:t.clientY}),this.props.onStart(e,r(this)),u(y,v.move,this.handleDrag),u(y,v.end,this.handleDragEnd),d&&(d.className+=" react-draggable-dragging")}},handleDragEnd:function(e){if(this.state.dragging&&(this.setState({dragging:!1}),this.props.onStop(e,r(this)),h(y,v.move,this.handleDrag),h(y,v.end,this.handleDragEnd),d)){var t=d.className;d.className=t.replace(/(?:^|\s+)react-draggable-dragging\b/," ")}},handleDrag:function(e){var t,n,o=p(e),a=this._toPixels(this.state.offsetLeft),l=this._toPixels(this.state.offsetTop),c={offsetLeft:a,offsetTop:l},u=this.getDOMNode(),h=u.offsetParent;s(this)&&(t=a+o.clientX-this.state.clientX,this.state.boundLeft&&(n=c.offsetLeft-u.offsetLeft,n>t&&(t=n)),this.state.boundRight&&(n+=h.clientWidth,this.state.boundBox&&(n-=u.offsetWidth),t>n&&(t=n)),c.offsetLeft=t),i(this)&&(t=l+o.clientY-this.state.clientY,this.state.boundTop&&(n=c.offsetTop-u.offsetTop,n>t&&(t=n)),this.state.boundBottom&&(n+=h.clientHeight,this.state.boundBox&&(n-=u.offsetHeight),t>n&&(t=n)),c.offsetTop=t);var d=this.props.constrain,f=this.props.grid;if(!d&&Array.isArray(f)){var m=function(e,t,n){var o=e-t;return Math.abs(o)>=n?t+parseInt(o/n,10)*n:t};d=function(e){return{left:m(e.left,e.prevLeft,f[0]),top:m(e.top,e.prevTop,f[1])}}}var y;d&&(y=d({prevLeft:this.state.offsetLeft,prevTop:this.state.offsetTop,left:c.offsetLeft,top:c.offsetTop}),y&&("left"in y&&!isNaN(y.left)&&(c.offsetLeft=y.left),"top"in y&&!isNaN(y.top)&&(c.offsetTop=y.top))),c.clientX=this.state.clientX+(c.offsetLeft-a),c.clientY=this.state.clientY+(c.offsetTop-l),this.setState(c),this.props.onDrag(e,r(this))},onTouchStart:function(e){return e.preventDefault(),this.handleDragStart.apply(this,arguments)},render:function(){var e={top:this.state.offsetTop,left:this.state.offsetLeft};this.state.dragging&&!isNaN(this.props.zIndex)&&(e.zIndex=this.props.zIndex);var t={style:e,className:"react-draggable",onMouseDown:this.handleDragStart,onTouchStart:this.onTouchStart,onMouseUp:this.handleDragEnd,onTouchEnd:this.handleDragEnd};return this.props.useChild?f.addons.cloneWithProps(f.Children.only(this.props.children),t):f.DOM.div(t,this.props.children)},_toPixels:function(e){if("string"==typeof e&&"%"==e.slice(-1))return parseInt(+e.replace("%","")/100*this.getDOMNode().offsetParent.clientWidth,10)||0;var t=parseInt(e,10);return isNaN(t)||!isFinite(t)?0:t}})},{"react/addons":147}],141:[function(e,t,n){function o(e,t){return t?l[e]:c[e]}function r(e,t,n){c[e]=t,l[e]=t,"object"==typeof t&&(l[e]=JSON.stringify(t)),"undefined"!=typeof document&&(document.cookie=a.serialize(e,l[e],n))}function i(e,t){if(delete l[e],delete c[e],"undefined"!=typeof document){var n=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";t&&(n+=" path="+t),document.cookie=n}}function s(e){if(l={},c={},e){var t=a.parse(e);for(var n in t){l[n]=t[n];try{c[n]=JSON.parse(t[n])}catch(o){c[n]=t[n]}}}}var a=e("cookie"),l={},c={};"undefined"!=typeof document&&s(document.cookie);var p={load:o,save:r,remove:i,setRawCookie:s};"undefined"!=typeof window&&(window.reactCookie=p),t.exports=p},{cookie:142}],142:[function(e,t,n){function o(e,t){var n={},o=t||{},r=e.split(/; */),a=o.decode||s;return r.forEach(function(e){var t=e.indexOf("=");if(!(0>t)){var o=e.substr(0,t).trim(),r=e.substr(++t,e.length).trim();'"'==r[0]&&(r=r.slice(1,-1)),void 0==n[o]&&(n[o]=i(r,a))}}),n}function r(e,t,n){var o=n||{},r=o.encode||a,i=[e+"="+r(t)];if(null!=o.maxAge){var s=o.maxAge-0;if(isNaN(s))throw new Error("maxAge should be a Number");i.push("Max-Age="+s)}return o.domain&&i.push("Domain="+o.domain),o.path&&i.push("Path="+o.path),o.expires&&i.push("Expires="+o.expires.toUTCString()),o.httpOnly&&i.push("HttpOnly"),o.secure&&i.push("Secure"),i.join("; ")}function i(e,t){try{return t(e)}catch(n){return e}}n.parse=o,n.serialize=r;var s=decodeURIComponent,a=encodeURIComponent},{}],143:[function(e,t,n){"use strict";function o(e,t,n){var o=u(e)?b.startShouldSetResponder:h(e)?b.moveShouldSetResponder:b.scrollShouldSetResponder,r=g||t,i=l.getPooled(o,r,n);a.accumulateTwoPhaseDispatches(i);var s=y(i);if(i.isPersistent()||i.constructor.release(i),!s||s===g)return null;var p,d=l.getPooled(b.responderGrant,s,n);if(a.accumulateDirectDispatches(d),g){var v=l.getPooled(b.responderTerminationRequest,g,n);a.accumulateDirectDispatches(v);var T=!m(v)||f(v);if(v.isPersistent()||v.constructor.release(v),T){var x=b.responderTerminate,E=l.getPooled(x,g,n);a.accumulateDirectDispatches(E),p=c(p,[d,E]),g=s}else{var C=l.getPooled(b.responderReject,s,n);a.accumulateDirectDispatches(C),p=c(p,C)}}else p=c(p,d),g=s;return p}function r(e){return e===i.topLevelTypes.topScroll||u(e)||v&&h(e)}var i=e("react/lib/EventConstants"),s=e("react/lib/EventPluginUtils"),a=e("react/lib/EventPropagators"),l=e("react/lib/SyntheticEvent"),c=e("react/lib/accumulateInto"),p=e("react/lib/keyOf"),u=s.isStartish,h=s.isMoveish,d=s.isEndish,f=s.executeDirectDispatch,m=s.hasDispatches,y=s.executeDispatchesInOrderStopAtTrue,g=null,v=!1,b={startShouldSetResponder:{phasedRegistrationNames:{bubbled:p({onStartShouldSetResponder:null}),captured:p({onStartShouldSetResponderCapture:null})}},scrollShouldSetResponder:{phasedRegistrationNames:{bubbled:p({onScrollShouldSetResponder:null}),captured:p({onScrollShouldSetResponderCapture:null})}},moveShouldSetResponder:{phasedRegistrationNames:{bubbled:p({onMoveShouldSetResponder:null}),captured:p({onMoveShouldSetResponderCapture:null})}},responderMove:{registrationName:p({onResponderMove:null})},responderRelease:{registrationName:p({onResponderRelease:null})},responderTerminationRequest:{registrationName:p({onResponderTerminationRequest:null})},responderGrant:{registrationName:p({onResponderGrant:null})},responderReject:{registrationName:p({onResponderReject:null})},responderTerminate:{registrationName:p({onResponderTerminate:null})}},T={getResponderID:function(){return g},eventTypes:b,extractEvents:function(e,t,n,i){var s;if(g&&u(e)&&(g=null),u(e)?v=!0:d(e)&&(v=!1),r(e)){var p=o(e,n,i);p&&(s=c(s,p))}var f=h(e)?b.responderMove:d(e)?b.responderRelease:u(e)?b.responderStart:null;if(f){var m=l.getPooled(f,g||"",i);a.accumulateDirectDispatches(m),s=c(s,m)}return f===b.responderRelease&&(g=null),s}};t.exports=T},{"react/lib/EventConstants":162,"react/lib/EventPluginUtils":166,"react/lib/EventPropagators":167,"react/lib/SyntheticEvent":255,"react/lib/accumulateInto":265,"react/lib/keyOf":304}],144:[function(e,t,n){"use strict";function o(e,t){var n=c.extractSingleTouch(t);return n?n[e.page]:e.page in t?t[e.page]:t[e.client]+p[e.envScroll]}function r(e,t){var n=o(T.x,t),r=o(T.y,t);return Math.pow(Math.pow(n-e.x,2)+Math.pow(r-e.y,2),.5)}var i=e("react/lib/EventConstants"),s=e("react/lib/EventPluginUtils"),a=e("react/lib/EventPropagators"),l=e("react/lib/SyntheticUIEvent"),c=e("./TouchEventUtils"),p=e("react/lib/ViewportMetrics"),u=e("react/lib/keyOf"),h=i.topLevelTypes,d=s.isStartish,f=s.isEndish,m=function(e){var t=[h.topTouchCancel,h.topTouchEnd,h.topTouchStart,h.topTouchMove];return t.indexOf(e)>=0},y=10,g=750,v={x:null,y:null},b=null,T={x:{page:"pageX",client:"clientX",envScroll:"currentPageScrollLeft"},y:{page:"pageY",client:"clientY",envScroll:"currentPageScrollTop"}},x=[h.topMouseDown,h.topMouseMove,h.topMouseUp];s.useTouchEvents&&x.push(h.topTouchEnd,h.topTouchStart,h.topTouchMove);var E={touchTap:{phasedRegistrationNames:{bubbled:u({onTouchTap:null}),captured:u({onTouchTapCapture:null})},dependencies:x}},C=function(){return Date.now?Date.now():+new Date},_={tapMoveThreshold:y,ignoreMouseThreshold:g,eventTypes:E,extractEvents:function(e,t,n,i){if(m(e))b=C();else if(b&&C()-b<g)return null;if(!d(e)&&!f(e))return null;var s=null,c=r(v,i);return f(e)&&y>c&&(s=l.getPooled(E.touchTap,n,i)),d(e)?(v.x=o(T.x,i),v.y=o(T.y,i)):f(e)&&(v.x=0,v.y=0),a.accumulateTwoPhaseDispatches(s),s}};t.exports=_},{"./TouchEventUtils":145,"react/lib/EventConstants":162,"react/lib/EventPluginUtils":166,"react/lib/EventPropagators":167,"react/lib/SyntheticUIEvent":261,"react/lib/ViewportMetrics":264,"react/lib/keyOf":304}],145:[function(e,t,n){var o={extractSingleTouch:function(e){var t=e.touches,n=e.changedTouches,o=t&&t.length>0,r=n&&n.length>0;return!o&&r?n[0]:o?t[0]:e}};t.exports=o},{}],146:[function(e,t,n){t.exports=function(){var t=e("react");t.initializeTouchEvents(!0),e("react/lib/EventPluginHub").injection.injectEventPluginsByName({ResponderEventPlugin:e("./ResponderEventPlugin.js"),TapEventPlugin:e("./TapEventPlugin.js")})}},{"./ResponderEventPlugin.js":143,"./TapEventPlugin.js":144,react:319,"react/lib/EventPluginHub":164}],147:[function(e,t,n){t.exports=e("./lib/ReactWithAddons")},{"./lib/ReactWithAddons":247}],148:[function(e,t,n){"use strict";var o=e("./focusNode"),r={componentDidMount:function(){this.props.autoFocus&&o(this.getDOMNode())}};t.exports=r},{"./focusNode":281}],149:[function(e,t,n){"use strict";function o(){var e=window.opera;return"object"==typeof e&&"function"==typeof e.version&&parseInt(e.version(),10)<=12}function r(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}function i(e){switch(e){case S.topCompositionStart:return O.compositionStart;case S.topCompositionEnd:return O.compositionEnd;case S.topCompositionUpdate:return O.compositionUpdate}}function s(e,t){return e===S.topKeyDown&&t.keyCode===x}function a(e,t){switch(e){case S.topKeyUp:return-1!==T.indexOf(t.keyCode);case S.topKeyDown:return t.keyCode!==x;case S.topKeyPress:case S.topMouseDown:case S.topBlur:return!0;default:return!1}}function l(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}function c(e,t,n,o){var r,c;if(E?r=i(e):N?a(e,o)&&(r=O.compositionEnd):s(e,o)&&(r=O.compositionStart),!r)return null;P&&(N||r!==O.compositionStart?r===O.compositionEnd&&N&&(c=N.getData()):N=y.getPooled(t));var p=g.getPooled(r,n,o);if(c)p.data=c;else{var u=l(o);null!==u&&(p.data=u)}return f.accumulateTwoPhaseDispatches(p),p}function p(e,t){switch(e){case S.topCompositionEnd:return l(t);case S.topKeyPress:var n=t.which;return n!==w?null:(M=!0,D);case S.topTextInput:var o=t.data;return o===D&&M?null:o;default:return null}}function u(e,t){if(N){if(e===S.topCompositionEnd||a(e,t)){var n=N.getData();return y.release(N),N=null,n}return null}switch(e){case S.topPaste:return null;case S.topKeyPress:return t.which&&!r(t)?String.fromCharCode(t.which):null;case S.topCompositionEnd:return P?null:t.data;default:return null}}function h(e,t,n,o){var r;if(r=_?p(e,o):u(e,o),!r)return null;var i=v.getPooled(O.beforeInput,n,o);return i.data=r,f.accumulateTwoPhaseDispatches(i),i}var d=e("./EventConstants"),f=e("./EventPropagators"),m=e("./ExecutionEnvironment"),y=e("./FallbackCompositionState"),g=e("./SyntheticCompositionEvent"),v=e("./SyntheticInputEvent"),b=e("./keyOf"),T=[9,13,27,32],x=229,E=m.canUseDOM&&"CompositionEvent"in window,C=null;m.canUseDOM&&"documentMode"in document&&(C=document.documentMode);var _=m.canUseDOM&&"TextEvent"in window&&!C&&!o(),P=m.canUseDOM&&(!E||C&&C>8&&11>=C),w=32,D=String.fromCharCode(w),S=d.topLevelTypes,O={beforeInput:{phasedRegistrationNames:{bubbled:b({onBeforeInput:null}),captured:b({onBeforeInputCapture:null})},dependencies:[S.topCompositionEnd,S.topKeyPress,S.topTextInput,S.topPaste]},compositionEnd:{phasedRegistrationNames:{bubbled:b({onCompositionEnd:null}),captured:b({onCompositionEndCapture:null})},dependencies:[S.topBlur,S.topCompositionEnd,S.topKeyDown,S.topKeyPress,S.topKeyUp,S.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:b({onCompositionStart:null}),captured:b({onCompositionStartCapture:null})},dependencies:[S.topBlur,S.topCompositionStart,S.topKeyDown,S.topKeyPress,S.topKeyUp,S.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:b({onCompositionUpdate:null}),captured:b({onCompositionUpdateCapture:null})},dependencies:[S.topBlur,S.topCompositionUpdate,S.topKeyDown,S.topKeyPress,S.topKeyUp,S.topMouseDown]}},M=!1,N=null,R={eventTypes:O,extractEvents:function(e,t,n,o){return[c(e,t,n,o),h(e,t,n,o)]}};t.exports=R},{"./EventConstants":162,"./EventPropagators":167,"./ExecutionEnvironment":168,"./FallbackCompositionState":169,"./SyntheticCompositionEvent":253,"./SyntheticInputEvent":257,"./keyOf":304}],150:[function(e,t,n){(function(n){var o=e("./invariant"),r={addClass:function(e,t){return"production"!==n.env.NODE_ENV?o(!/\s/.test(t),'CSSCore.addClass takes only a single class name. "%s" contains multiple classes.',t):o(!/\s/.test(t)),t&&(e.classList?e.classList.add(t):r.hasClass(e,t)||(e.className=e.className+" "+t)),e},removeClass:function(e,t){return"production"!==n.env.NODE_ENV?o(!/\s/.test(t),'CSSCore.removeClass takes only a single class name. "%s" contains multiple classes.',t):o(!/\s/.test(t)),t&&(e.classList?e.classList.remove(t):r.hasClass(e,t)&&(e.className=e.className.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,""))),e},conditionClass:function(e,t,n){return(n?r.addClass:r.removeClass)(e,t)},hasClass:function(e,t){return"production"!==n.env.NODE_ENV?o(!/\s/.test(t),"CSS.hasClass takes only a single class name."):o(!/\s/.test(t)),e.classList?!!t&&e.classList.contains(t):(" "+e.className+" ").indexOf(" "+t+" ")>-1}};t.exports=r}).call(this,e("_process"))},{"./invariant":297,_process:1}],151:[function(e,t,n){"use strict";function o(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}var r={boxFlex:!0,boxFlexGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,strokeDashoffset:!0,strokeOpacity:!0,strokeWidth:!0},i=["Webkit","ms","Moz","O"];Object.keys(r).forEach(function(e){i.forEach(function(t){r[o(t,e)]=r[e]})});var s={background:{backgroundImage:!0,backgroundPosition:!0,backgroundRepeat:!0,backgroundColor:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0}},a={isUnitlessNumber:r,shorthandPropertyExpansions:s};t.exports=a},{}],152:[function(e,t,n){(function(n){"use strict";var o=e("./CSSProperty"),r=e("./ExecutionEnvironment"),i=e("./camelizeStyleName"),s=e("./dangerousStyleValue"),a=e("./hyphenateStyleName"),l=e("./memoizeStringOnly"),c=e("./warning"),p=l(function(e){return a(e)}),u="cssFloat";if(r.canUseDOM&&void 0===document.documentElement.style.cssFloat&&(u="styleFloat"),"production"!==n.env.NODE_ENV)var h=/^(?:webkit|moz|o)[A-Z]/,d=/;\s*$/,f={},m={},y=function(e){f.hasOwnProperty(e)&&f[e]||(f[e]=!0,"production"!==n.env.NODE_ENV?c(!1,"Unsupported style property %s. Did you mean %s?",e,i(e)):null)},g=function(e){f.hasOwnProperty(e)&&f[e]||(f[e]=!0,
"production"!==n.env.NODE_ENV?c(!1,"Unsupported vendor-prefixed style property %s. Did you mean %s?",e,e.charAt(0).toUpperCase()+e.slice(1)):null)},v=function(e,t){m.hasOwnProperty(t)&&m[t]||(m[t]=!0,"production"!==n.env.NODE_ENV?c(!1,'Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',e,t.replace(d,"")):null)},b=function(e,t){e.indexOf("-")>-1?y(e):h.test(e)?g(e):d.test(t)&&v(e,t)};var T={createMarkupForStyles:function(e){var t="";for(var o in e)if(e.hasOwnProperty(o)){var r=e[o];"production"!==n.env.NODE_ENV&&b(o,r),null!=r&&(t+=p(o)+":",t+=s(o,r)+";")}return t||null},setValueForStyles:function(e,t){var r=e.style;for(var i in t)if(t.hasOwnProperty(i)){"production"!==n.env.NODE_ENV&&b(i,t[i]);var a=s(i,t[i]);if("float"===i&&(i=u),a)r[i]=a;else{var l=o.shorthandPropertyExpansions[i];if(l)for(var c in l)r[c]="";else r[i]=""}}}};t.exports=T}).call(this,e("_process"))},{"./CSSProperty":151,"./ExecutionEnvironment":168,"./camelizeStyleName":268,"./dangerousStyleValue":275,"./hyphenateStyleName":295,"./memoizeStringOnly":306,"./warning":318,_process:1}],153:[function(e,t,n){(function(n){"use strict";function o(){this._callbacks=null,this._contexts=null}var r=e("./PooledClass"),i=e("./Object.assign"),s=e("./invariant");i(o.prototype,{enqueue:function(e,t){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(e),this._contexts.push(t)},notifyAll:function(){var e=this._callbacks,t=this._contexts;if(e){"production"!==n.env.NODE_ENV?s(e.length===t.length,"Mismatched list of contexts in callback queue"):s(e.length===t.length),this._callbacks=null,this._contexts=null;for(var o=0,r=e.length;r>o;o++)e[o].call(t[o]);e.length=0,t.length=0}},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),r.addPoolingTo(o),t.exports=o}).call(this,e("_process"))},{"./Object.assign":175,"./PooledClass":176,"./invariant":297,_process:1}],154:[function(e,t,n){"use strict";function o(e){return"SELECT"===e.nodeName||"INPUT"===e.nodeName&&"file"===e.type}function r(e){var t=C.getPooled(S.change,M,e);T.accumulateTwoPhaseDispatches(t),E.batchedUpdates(i,t)}function i(e){b.enqueueEvents(e),b.processEventQueue()}function s(e,t){O=e,M=t,O.attachEvent("onchange",r)}function a(){O&&(O.detachEvent("onchange",r),O=null,M=null)}function l(e,t,n){return e===D.topChange?n:void 0}function c(e,t,n){e===D.topFocus?(a(),s(t,n)):e===D.topBlur&&a()}function p(e,t){O=e,M=t,N=e.value,R=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(O,"value",A),O.attachEvent("onpropertychange",h)}function u(){O&&(delete O.value,O.detachEvent("onpropertychange",h),O=null,M=null,N=null,R=null)}function h(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==N&&(N=t,r(e))}}function d(e,t,n){return e===D.topInput?n:void 0}function f(e,t,n){e===D.topFocus?(u(),p(t,n)):e===D.topBlur&&u()}function m(e,t,n){return e!==D.topSelectionChange&&e!==D.topKeyUp&&e!==D.topKeyDown||!O||O.value===N?void 0:(N=O.value,M)}function y(e){return"INPUT"===e.nodeName&&("checkbox"===e.type||"radio"===e.type)}function g(e,t,n){return e===D.topClick?n:void 0}var v=e("./EventConstants"),b=e("./EventPluginHub"),T=e("./EventPropagators"),x=e("./ExecutionEnvironment"),E=e("./ReactUpdates"),C=e("./SyntheticEvent"),_=e("./isEventSupported"),P=e("./isTextInputElement"),w=e("./keyOf"),D=v.topLevelTypes,S={change:{phasedRegistrationNames:{bubbled:w({onChange:null}),captured:w({onChangeCapture:null})},dependencies:[D.topBlur,D.topChange,D.topClick,D.topFocus,D.topInput,D.topKeyDown,D.topKeyUp,D.topSelectionChange]}},O=null,M=null,N=null,R=null,k=!1;x.canUseDOM&&(k=_("change")&&(!("documentMode"in document)||document.documentMode>8));var I=!1;x.canUseDOM&&(I=_("input")&&(!("documentMode"in document)||document.documentMode>9));var A={get:function(){return R.get.call(this)},set:function(e){N=""+e,R.set.call(this,e)}},L={eventTypes:S,extractEvents:function(e,t,n,r){var i,s;if(o(t)?k?i=l:s=c:P(t)?I?i=d:(i=m,s=f):y(t)&&(i=g),i){var a=i(e,t,n);if(a){var p=C.getPooled(S.change,a,r);return T.accumulateTwoPhaseDispatches(p),p}}s&&s(e,t,n)}};t.exports=L},{"./EventConstants":162,"./EventPluginHub":164,"./EventPropagators":167,"./ExecutionEnvironment":168,"./ReactUpdates":246,"./SyntheticEvent":255,"./isEventSupported":298,"./isTextInputElement":300,"./keyOf":304}],155:[function(e,t,n){"use strict";var o=0,r={createReactRootIndex:function(){return o++}};t.exports=r},{}],156:[function(e,t,n){(function(n){"use strict";function o(e,t,n){e.insertBefore(t,e.childNodes[n]||null)}var r=e("./Danger"),i=e("./ReactMultiChildUpdateTypes"),s=e("./setTextContent"),a=e("./invariant"),l={dangerouslyReplaceNodeWithMarkup:r.dangerouslyReplaceNodeWithMarkup,updateTextContent:s,processUpdates:function(e,t){for(var l,c=null,p=null,u=0;u<e.length;u++)if(l=e[u],l.type===i.MOVE_EXISTING||l.type===i.REMOVE_NODE){var h=l.fromIndex,d=l.parentNode.childNodes[h],f=l.parentID;"production"!==n.env.NODE_ENV?a(d,"processUpdates(): Unable to find child %s of element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",h,f):a(d),c=c||{},c[f]=c[f]||[],c[f][h]=d,p=p||[],p.push(d)}var m=r.dangerouslyRenderMarkup(t);if(p)for(var y=0;y<p.length;y++)p[y].parentNode.removeChild(p[y]);for(var g=0;g<e.length;g++)switch(l=e[g],l.type){case i.INSERT_MARKUP:o(l.parentNode,m[l.markupIndex],l.toIndex);break;case i.MOVE_EXISTING:o(l.parentNode,c[l.parentID][l.fromIndex],l.toIndex);break;case i.TEXT_CONTENT:s(l.parentNode,l.textContent);break;case i.REMOVE_NODE:}}};t.exports=l}).call(this,e("_process"))},{"./Danger":159,"./ReactMultiChildUpdateTypes":225,"./invariant":297,"./setTextContent":312,_process:1}],157:[function(e,t,n){(function(n){"use strict";function o(e,t){return(e&t)===t}var r=e("./invariant"),i={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=e.Properties||{},s=e.DOMAttributeNames||{},l=e.DOMPropertyNames||{},c=e.DOMMutationMethods||{};e.isCustomAttribute&&a._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var p in t){"production"!==n.env.NODE_ENV?r(!a.isStandardName.hasOwnProperty(p),"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.",p):r(!a.isStandardName.hasOwnProperty(p)),a.isStandardName[p]=!0;var u=p.toLowerCase();if(a.getPossibleStandardName[u]=p,s.hasOwnProperty(p)){var h=s[p];a.getPossibleStandardName[h]=p,a.getAttributeName[p]=h}else a.getAttributeName[p]=u;a.getPropertyName[p]=l.hasOwnProperty(p)?l[p]:p,a.getMutationMethod[p]=c.hasOwnProperty(p)?c[p]:null;var d=t[p];a.mustUseAttribute[p]=o(d,i.MUST_USE_ATTRIBUTE),a.mustUseProperty[p]=o(d,i.MUST_USE_PROPERTY),a.hasSideEffects[p]=o(d,i.HAS_SIDE_EFFECTS),a.hasBooleanValue[p]=o(d,i.HAS_BOOLEAN_VALUE),a.hasNumericValue[p]=o(d,i.HAS_NUMERIC_VALUE),a.hasPositiveNumericValue[p]=o(d,i.HAS_POSITIVE_NUMERIC_VALUE),a.hasOverloadedBooleanValue[p]=o(d,i.HAS_OVERLOADED_BOOLEAN_VALUE),"production"!==n.env.NODE_ENV?r(!a.mustUseAttribute[p]||!a.mustUseProperty[p],"DOMProperty: Cannot require using both attribute and property: %s",p):r(!a.mustUseAttribute[p]||!a.mustUseProperty[p]),"production"!==n.env.NODE_ENV?r(a.mustUseProperty[p]||!a.hasSideEffects[p],"DOMProperty: Properties that have side effects must use property: %s",p):r(a.mustUseProperty[p]||!a.hasSideEffects[p]),"production"!==n.env.NODE_ENV?r(!!a.hasBooleanValue[p]+!!a.hasNumericValue[p]+!!a.hasOverloadedBooleanValue[p]<=1,"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s",p):r(!!a.hasBooleanValue[p]+!!a.hasNumericValue[p]+!!a.hasOverloadedBooleanValue[p]<=1)}}},s={},a={ID_ATTRIBUTE_NAME:"data-reactid",isStandardName:{},getPossibleStandardName:{},getAttributeName:{},getPropertyName:{},getMutationMethod:{},mustUseAttribute:{},mustUseProperty:{},hasSideEffects:{},hasBooleanValue:{},hasNumericValue:{},hasPositiveNumericValue:{},hasOverloadedBooleanValue:{},_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var t=0;t<a._isCustomAttributeFunctions.length;t++){var n=a._isCustomAttributeFunctions[t];if(n(e))return!0}return!1},getDefaultValueForProperty:function(e,t){var n,o=s[e];return o||(s[e]=o={}),t in o||(n=document.createElement(e),o[t]=n[t]),o[t]},injection:i};t.exports=a}).call(this,e("_process"))},{"./invariant":297,_process:1}],158:[function(e,t,n){(function(n){"use strict";function o(e,t){return null==t||r.hasBooleanValue[e]&&!t||r.hasNumericValue[e]&&isNaN(t)||r.hasPositiveNumericValue[e]&&1>t||r.hasOverloadedBooleanValue[e]&&t===!1}var r=e("./DOMProperty"),i=e("./quoteAttributeValueForBrowser"),s=e("./warning");if("production"!==n.env.NODE_ENV)var a={children:!0,dangerouslySetInnerHTML:!0,key:!0,ref:!0},l={},c=function(e){if(!(a.hasOwnProperty(e)&&a[e]||l.hasOwnProperty(e)&&l[e])){l[e]=!0;var t=e.toLowerCase(),o=r.isCustomAttribute(t)?t:r.getPossibleStandardName.hasOwnProperty(t)?r.getPossibleStandardName[t]:null;"production"!==n.env.NODE_ENV?s(null==o,"Unknown DOM property %s. Did you mean %s?",e,o):null}};var p={createMarkupForID:function(e){return r.ID_ATTRIBUTE_NAME+"="+i(e)},createMarkupForProperty:function(e,t){if(r.isStandardName.hasOwnProperty(e)&&r.isStandardName[e]){if(o(e,t))return"";var s=r.getAttributeName[e];return r.hasBooleanValue[e]||r.hasOverloadedBooleanValue[e]&&t===!0?s:s+"="+i(t)}return r.isCustomAttribute(e)?null==t?"":e+"="+i(t):("production"!==n.env.NODE_ENV&&c(e),null)},setValueForProperty:function(e,t,i){if(r.isStandardName.hasOwnProperty(t)&&r.isStandardName[t]){var s=r.getMutationMethod[t];if(s)s(e,i);else if(o(t,i))this.deleteValueForProperty(e,t);else if(r.mustUseAttribute[t])e.setAttribute(r.getAttributeName[t],""+i);else{var a=r.getPropertyName[t];r.hasSideEffects[t]&&""+e[a]==""+i||(e[a]=i)}}else r.isCustomAttribute(t)?null==i?e.removeAttribute(t):e.setAttribute(t,""+i):"production"!==n.env.NODE_ENV&&c(t)},deleteValueForProperty:function(e,t){if(r.isStandardName.hasOwnProperty(t)&&r.isStandardName[t]){var o=r.getMutationMethod[t];if(o)o(e,void 0);else if(r.mustUseAttribute[t])e.removeAttribute(r.getAttributeName[t]);else{var i=r.getPropertyName[t],s=r.getDefaultValueForProperty(e.nodeName,i);r.hasSideEffects[t]&&""+e[i]===s||(e[i]=s)}}else r.isCustomAttribute(t)?e.removeAttribute(t):"production"!==n.env.NODE_ENV&&c(t)}};t.exports=p}).call(this,e("_process"))},{"./DOMProperty":157,"./quoteAttributeValueForBrowser":310,"./warning":318,_process:1}],159:[function(e,t,n){(function(n){"use strict";function o(e){return e.substring(1,e.indexOf(" "))}var r=e("./ExecutionEnvironment"),i=e("./createNodesFromMarkup"),s=e("./emptyFunction"),a=e("./getMarkupWrap"),l=e("./invariant"),c=/^(<[^ \/>]+)/,p="data-danger-index",u={dangerouslyRenderMarkup:function(e){"production"!==n.env.NODE_ENV?l(r.canUseDOM,"dangerouslyRenderMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering."):l(r.canUseDOM);for(var t,u={},h=0;h<e.length;h++)"production"!==n.env.NODE_ENV?l(e[h],"dangerouslyRenderMarkup(...): Missing markup."):l(e[h]),t=o(e[h]),t=a(t)?t:"*",u[t]=u[t]||[],u[t][h]=e[h];var d=[],f=0;for(t in u)if(u.hasOwnProperty(t)){var m,y=u[t];for(m in y)if(y.hasOwnProperty(m)){var g=y[m];y[m]=g.replace(c,"$1 "+p+'="'+m+'" ')}for(var v=i(y.join(""),s),b=0;b<v.length;++b){var T=v[b];T.hasAttribute&&T.hasAttribute(p)?(m=+T.getAttribute(p),T.removeAttribute(p),"production"!==n.env.NODE_ENV?l(!d.hasOwnProperty(m),"Danger: Assigning to an already-occupied result index."):l(!d.hasOwnProperty(m)),d[m]=T,f+=1):"production"!==n.env.NODE_ENV&&console.error("Danger: Discarding unexpected node:",T)}}return"production"!==n.env.NODE_ENV?l(f===d.length,"Danger: Did not assign to every index of resultList."):l(f===d.length),"production"!==n.env.NODE_ENV?l(d.length===e.length,"Danger: Expected markup to render %s nodes, but rendered %s.",e.length,d.length):l(d.length===e.length),d},dangerouslyReplaceNodeWithMarkup:function(e,t){"production"!==n.env.NODE_ENV?l(r.canUseDOM,"dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering."):l(r.canUseDOM),"production"!==n.env.NODE_ENV?l(t,"dangerouslyReplaceNodeWithMarkup(...): Missing markup."):l(t),"production"!==n.env.NODE_ENV?l("html"!==e.tagName.toLowerCase(),"dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See React.renderToString()."):l("html"!==e.tagName.toLowerCase());var o=i(t,s)[0];e.parentNode.replaceChild(o,e)}};t.exports=u}).call(this,e("_process"))},{"./ExecutionEnvironment":168,"./createNodesFromMarkup":273,"./emptyFunction":276,"./getMarkupWrap":289,"./invariant":297,_process:1}],160:[function(e,t,n){"use strict";var o=e("./keyOf"),r=[o({ResponderEventPlugin:null}),o({SimpleEventPlugin:null}),o({TapEventPlugin:null}),o({EnterLeaveEventPlugin:null}),o({ChangeEventPlugin:null}),o({SelectEventPlugin:null}),o({BeforeInputEventPlugin:null}),o({AnalyticsEventPlugin:null}),o({MobileSafariClickEventPlugin:null})];t.exports=r},{"./keyOf":304}],161:[function(e,t,n){"use strict";var o=e("./EventConstants"),r=e("./EventPropagators"),i=e("./SyntheticMouseEvent"),s=e("./ReactMount"),a=e("./keyOf"),l=o.topLevelTypes,c=s.getFirstReactDOM,p={mouseEnter:{registrationName:a({onMouseEnter:null}),dependencies:[l.topMouseOut,l.topMouseOver]},mouseLeave:{registrationName:a({onMouseLeave:null}),dependencies:[l.topMouseOut,l.topMouseOver]}},u=[null,null],h={eventTypes:p,extractEvents:function(e,t,n,o){if(e===l.topMouseOver&&(o.relatedTarget||o.fromElement))return null;if(e!==l.topMouseOut&&e!==l.topMouseOver)return null;var a;if(t.window===t)a=t;else{var h=t.ownerDocument;a=h?h.defaultView||h.parentWindow:window}var d,f;if(e===l.topMouseOut?(d=t,f=c(o.relatedTarget||o.toElement)||a):(d=a,f=t),d===f)return null;var m=d?s.getID(d):"",y=f?s.getID(f):"",g=i.getPooled(p.mouseLeave,m,o);g.type="mouseleave",g.target=d,g.relatedTarget=f;var v=i.getPooled(p.mouseEnter,y,o);return v.type="mouseenter",v.target=f,v.relatedTarget=d,r.accumulateEnterLeaveDispatches(g,v,m,y),u[0]=g,u[1]=v,u}};t.exports=h},{"./EventConstants":162,"./EventPropagators":167,"./ReactMount":223,"./SyntheticMouseEvent":259,"./keyOf":304}],162:[function(e,t,n){"use strict";var o=e("./keyMirror"),r=o({bubbled:null,captured:null}),i=o({topBlur:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topReset:null,topScroll:null,topSelectionChange:null,topSubmit:null,topTextInput:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topWheel:null}),s={topLevelTypes:i,PropagationPhases:r};t.exports=s},{"./keyMirror":303}],163:[function(e,t,n){(function(n){var o=e("./emptyFunction"),r={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,r){return e.addEventListener?(e.addEventListener(t,r,!0),{remove:function(){e.removeEventListener(t,r,!0)}}):("production"!==n.env.NODE_ENV&&console.error("Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events."),{remove:o})},registerDefault:function(){}};t.exports=r}).call(this,e("_process"))},{"./emptyFunction":276,_process:1}],164:[function(e,t,n){(function(n){"use strict";function o(){var e=h&&h.traverseTwoPhase&&h.traverseEnterLeave;"production"!==n.env.NODE_ENV?l(e,"InstanceHandle not injected before use!"):l(e)}var r=e("./EventPluginRegistry"),i=e("./EventPluginUtils"),s=e("./accumulateInto"),a=e("./forEachAccumulated"),l=e("./invariant"),c={},p=null,u=function(e){if(e){var t=i.executeDispatch,n=r.getPluginModuleForEvent(e);n&&n.executeDispatch&&(t=n.executeDispatch),i.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e)}},h=null,d={injection:{injectMount:i.injection.injectMount,injectInstanceHandle:function(e){h=e,"production"!==n.env.NODE_ENV&&o()},getInstanceHandle:function(){return"production"!==n.env.NODE_ENV&&o(),h},injectEventPluginOrder:r.injectEventPluginOrder,injectEventPluginsByName:r.injectEventPluginsByName},eventNameDispatchConfigs:r.eventNameDispatchConfigs,registrationNameModules:r.registrationNameModules,putListener:function(e,t,o){"production"!==n.env.NODE_ENV?l(!o||"function"==typeof o,"Expected %s listener to be a function, instead got type %s",t,typeof o):l(!o||"function"==typeof o);var r=c[t]||(c[t]={});r[e]=o},getListener:function(e,t){var n=c[t];return n&&n[e]},deleteListener:function(e,t){var n=c[t];n&&delete n[e]},deleteAllListeners:function(e){for(var t in c)delete c[t][e]},extractEvents:function(e,t,n,o){for(var i,a=r.plugins,l=0,c=a.length;c>l;l++){var p=a[l];if(p){var u=p.extractEvents(e,t,n,o);u&&(i=s(i,u))}}return i},enqueueEvents:function(e){e&&(p=s(p,e))},processEventQueue:function(){var e=p;p=null,a(e,u),"production"!==n.env.NODE_ENV?l(!p,"processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."):l(!p)},__purge:function(){c={}},__getListenerBank:function(){return c}};t.exports=d}).call(this,e("_process"))},{"./EventPluginRegistry":165,"./EventPluginUtils":166,"./accumulateInto":265,"./forEachAccumulated":282,"./invariant":297,_process:1}],165:[function(e,t,n){(function(n){"use strict";function o(){if(a)for(var e in l){var t=l[e],o=a.indexOf(e);if("production"!==n.env.NODE_ENV?s(o>-1,"EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.",e):s(o>-1),!c.plugins[o]){"production"!==n.env.NODE_ENV?s(t.extractEvents,"EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.",e):s(t.extractEvents),c.plugins[o]=t;var i=t.eventTypes;for(var p in i)"production"!==n.env.NODE_ENV?s(r(i[p],t,p),"EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",p,e):s(r(i[p],t,p))}}}function r(e,t,o){"production"!==n.env.NODE_ENV?s(!c.eventNameDispatchConfigs.hasOwnProperty(o),"EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.",o):s(!c.eventNameDispatchConfigs.hasOwnProperty(o)),c.eventNameDispatchConfigs[o]=e;var r=e.phasedRegistrationNames;if(r){for(var a in r)if(r.hasOwnProperty(a)){var l=r[a];i(l,t,o)}return!0}return e.registrationName?(i(e.registrationName,t,o),!0):!1}function i(e,t,o){"production"!==n.env.NODE_ENV?s(!c.registrationNameModules[e],"EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.",e):s(!c.registrationNameModules[e]),c.registrationNameModules[e]=t,c.registrationNameDependencies[e]=t.eventTypes[o].dependencies}var s=e("./invariant"),a=null,l={},c={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},injectEventPluginOrder:function(e){"production"!==n.env.NODE_ENV?s(!a,"EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."):s(!a),a=Array.prototype.slice.call(e),o()},injectEventPluginsByName:function(e){var t=!1;for(var r in e)if(e.hasOwnProperty(r)){var i=e[r];l.hasOwnProperty(r)&&l[r]===i||("production"!==n.env.NODE_ENV?s(!l[r],"EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.",r):s(!l[r]),l[r]=i,t=!0)}t&&o()},getPluginModuleForEvent:function(e){var t=e.dispatchConfig;if(t.registrationName)return c.registrationNameModules[t.registrationName]||null;for(var n in t.phasedRegistrationNames)if(t.phasedRegistrationNames.hasOwnProperty(n)){var o=c.registrationNameModules[t.phasedRegistrationNames[n]];if(o)return o}return null},_resetEventPlugins:function(){a=null;for(var e in l)l.hasOwnProperty(e)&&delete l[e];c.plugins.length=0;var t=c.eventNameDispatchConfigs;for(var n in t)t.hasOwnProperty(n)&&delete t[n];var o=c.registrationNameModules;for(var r in o)o.hasOwnProperty(r)&&delete o[r]}};t.exports=c}).call(this,e("_process"))},{"./invariant":297,_process:1}],166:[function(e,t,n){(function(n){"use strict";function o(e){return e===g.topMouseUp||e===g.topTouchEnd||e===g.topTouchCancel}function r(e){return e===g.topMouseMove||e===g.topTouchMove}function i(e){return e===g.topMouseDown||e===g.topTouchStart}function s(e,t){var o=e._dispatchListeners,r=e._dispatchIDs;if("production"!==n.env.NODE_ENV&&d(e),Array.isArray(o))for(var i=0;i<o.length&&!e.isPropagationStopped();i++)t(e,o[i],r[i]);else o&&t(e,o,r)}function a(e,t,n){e.currentTarget=y.Mount.getNode(n);var o=t(e,n);return e.currentTarget=null,o}function l(e,t){s(e,t),e._dispatchListeners=null,e._dispatchIDs=null}function c(e){var t=e._dispatchListeners,o=e._dispatchIDs;if("production"!==n.env.NODE_ENV&&d(e),Array.isArray(t)){for(var r=0;r<t.length&&!e.isPropagationStopped();r++)if(t[r](e,o[r]))return o[r]}else if(t&&t(e,o))return o;return null}function p(e){var t=c(e);return e._dispatchIDs=null,e._dispatchListeners=null,t}function u(e){"production"!==n.env.NODE_ENV&&d(e);var t=e._dispatchListeners,o=e._dispatchIDs;"production"!==n.env.NODE_ENV?m(!Array.isArray(t),"executeDirectDispatch(...): Invalid `event`."):m(!Array.isArray(t));var r=t?t(e,o):null;return e._dispatchListeners=null,e._dispatchIDs=null,r}function h(e){return!!e._dispatchListeners}var d,f=e("./EventConstants"),m=e("./invariant"),y={Mount:null,injectMount:function(e){y.Mount=e,"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?m(e&&e.getNode,"EventPluginUtils.injection.injectMount(...): Injected Mount module is missing getNode."):m(e&&e.getNode))}},g=f.topLevelTypes;"production"!==n.env.NODE_ENV&&(d=function(e){var t=e._dispatchListeners,o=e._dispatchIDs,r=Array.isArray(t),i=Array.isArray(o),s=i?o.length:o?1:0,a=r?t.length:t?1:0;"production"!==n.env.NODE_ENV?m(i===r&&s===a,"EventPluginUtils: Invalid `event`."):m(i===r&&s===a)});var v={isEndish:o,isMoveish:r,isStartish:i,executeDirectDispatch:u,executeDispatch:a,executeDispatchesInOrder:l,executeDispatchesInOrderStopAtTrue:p,hasDispatches:h,injection:y,useTouchEvents:!1};t.exports=v}).call(this,e("_process"))},{"./EventConstants":162,"./invariant":297,_process:1}],167:[function(e,t,n){(function(n){"use strict";function o(e,t,n){var o=t.dispatchConfig.phasedRegistrationNames[n];return y(e,o)}function r(e,t,r){if("production"!==n.env.NODE_ENV&&!e)throw new Error("Dispatching id must not be null");var i=t?m.bubbled:m.captured,s=o(e,r,i);s&&(r._dispatchListeners=d(r._dispatchListeners,s),r._dispatchIDs=d(r._dispatchIDs,e))}function i(e){e&&e.dispatchConfig.phasedRegistrationNames&&h.injection.getInstanceHandle().traverseTwoPhase(e.dispatchMarker,r,e)}function s(e,t,n){if(n&&n.dispatchConfig.registrationName){var o=n.dispatchConfig.registrationName,r=y(e,o);r&&(n._dispatchListeners=d(n._dispatchListeners,r),n._dispatchIDs=d(n._dispatchIDs,e))}}function a(e){e&&e.dispatchConfig.registrationName&&s(e.dispatchMarker,null,e)}function l(e){f(e,i)}function c(e,t,n,o){h.injection.getInstanceHandle().traverseEnterLeave(n,o,s,e,t)}function p(e){f(e,a)}var u=e("./EventConstants"),h=e("./EventPluginHub"),d=e("./accumulateInto"),f=e("./forEachAccumulated"),m=u.PropagationPhases,y=h.getListener,g={accumulateTwoPhaseDispatches:l,accumulateDirectDispatches:p,accumulateEnterLeaveDispatches:c};t.exports=g}).call(this,e("_process"))},{"./EventConstants":162,"./EventPluginHub":164,"./accumulateInto":265,"./forEachAccumulated":282,_process:1}],168:[function(e,t,n){"use strict";var o=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:o,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:o&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:o&&!!window.screen,isInWorker:!o};t.exports=r},{}],169:[function(e,t,n){"use strict";function o(e){this._root=e,this._startText=this.getText(),this._fallbackText=null}var r=e("./PooledClass"),i=e("./Object.assign"),s=e("./getTextContentAccessor");i(o.prototype,{getText:function(){return"value"in this._root?this._root.value:this._root[s()]},getData:function(){if(this._fallbackText)return this._fallbackText;var e,t,n=this._startText,o=n.length,r=this.getText(),i=r.length;for(e=0;o>e&&n[e]===r[e];e++);var s=o-e;for(t=1;s>=t&&n[o-t]===r[i-t];t++);var a=t>1?1-t:void 0;return this._fallbackText=r.slice(e,a),this._fallbackText}}),r.addPoolingTo(o),t.exports=o},{"./Object.assign":175,"./PooledClass":176,"./getTextContentAccessor":292}],170:[function(e,t,n){"use strict";var o,r=e("./DOMProperty"),i=e("./ExecutionEnvironment"),s=r.injection.MUST_USE_ATTRIBUTE,a=r.injection.MUST_USE_PROPERTY,l=r.injection.HAS_BOOLEAN_VALUE,c=r.injection.HAS_SIDE_EFFECTS,p=r.injection.HAS_NUMERIC_VALUE,u=r.injection.HAS_POSITIVE_NUMERIC_VALUE,h=r.injection.HAS_OVERLOADED_BOOLEAN_VALUE;if(i.canUseDOM){var d=document.implementation;o=d&&d.hasFeature&&d.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")}var f={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accept:null,acceptCharset:null,accessKey:null,action:null,allowFullScreen:s|l,allowTransparency:s,alt:null,async:l,autoComplete:null,autoPlay:l,cellPadding:null,cellSpacing:null,charSet:s,checked:a|l,classID:s,className:o?s:a,cols:s|u,colSpan:null,content:null,contentEditable:null,contextMenu:s,controls:a|l,coords:null,crossOrigin:null,data:null,dateTime:s,defer:l,dir:null,disabled:s|l,download:h,draggable:null,encType:null,form:s,formAction:s,formEncType:s,formMethod:s,formNoValidate:l,formTarget:s,frameBorder:s,headers:null,height:s,hidden:s|l,high:null,href:null,hrefLang:null,htmlFor:null,httpEquiv:null,icon:null,id:a,label:null,lang:null,list:s,loop:a|l,low:null,manifest:s,marginHeight:null,marginWidth:null,max:null,maxLength:s,media:s,mediaGroup:null,method:null,min:null,multiple:a|l,muted:a|l,name:null,noValidate:l,open:l,optimum:null,pattern:null,placeholder:null,poster:null,preload:null,radioGroup:null,readOnly:a|l,rel:null,required:l,role:s,rows:s|u,rowSpan:null,sandbox:null,scope:null,scoped:l,scrolling:null,seamless:s|l,selected:a|l,shape:null,size:s|u,sizes:s,span:u,spellCheck:null,src:null,srcDoc:a,srcSet:s,start:p,step:null,style:null,tabIndex:null,target:null,title:null,type:null,useMap:null,value:a|c,width:s,wmode:s,autoCapitalize:null,autoCorrect:null,itemProp:s,itemScope:s|l,itemType:s,itemID:s,itemRef:s,property:null,unselectable:s},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{autoCapitalize:"autocapitalize",autoComplete:"autocomplete",autoCorrect:"autocorrect",autoFocus:"autofocus",autoPlay:"autoplay",encType:"encoding",hrefLang:"hreflang",radioGroup:"radiogroup",spellCheck:"spellcheck",srcDoc:"srcdoc",srcSet:"srcset"}};t.exports=f},{"./DOMProperty":157,"./ExecutionEnvironment":168}],171:[function(e,t,n){"use strict";var o=e("./ReactLink"),r=e("./ReactStateSetters"),i={linkState:function(e){return new o(this.state[e],r.createStateKeySetter(this,e))}};t.exports=i},{"./ReactLink":221,"./ReactStateSetters":240}],172:[function(e,t,n){(function(n){"use strict";function o(e){"production"!==n.env.NODE_ENV?c(null==e.props.checkedLink||null==e.props.valueLink,"Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa."):c(null==e.props.checkedLink||null==e.props.valueLink)}function r(e){o(e),"production"!==n.env.NODE_ENV?c(null==e.props.value&&null==e.props.onChange,"Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink."):c(null==e.props.value&&null==e.props.onChange)}function i(e){o(e),"production"!==n.env.NODE_ENV?c(null==e.props.checked&&null==e.props.onChange,"Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink"):c(null==e.props.checked&&null==e.props.onChange)}function s(e){this.props.valueLink.requestChange(e.target.value)}function a(e){this.props.checkedLink.requestChange(e.target.checked)}var l=e("./ReactPropTypes"),c=e("./invariant"),p={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},u={Mixin:{propTypes:{value:function(e,t,n){return!e[t]||p[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,t,n){return!e[t]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:l.func}},getValue:function(e){return e.props.valueLink?(r(e),e.props.valueLink.value):e.props.value},getChecked:function(e){return e.props.checkedLink?(i(e),e.props.checkedLink.value):e.props.checked},getOnChange:function(e){return e.props.valueLink?(r(e),s):e.props.checkedLink?(i(e),a):e.props.onChange}};t.exports=u}).call(this,e("_process"))},{"./ReactPropTypes":232,"./invariant":297,_process:1}],173:[function(e,t,n){(function(n){"use strict";function o(e){e.remove()}var r=e("./ReactBrowserEventEmitter"),i=e("./accumulateInto"),s=e("./forEachAccumulated"),a=e("./invariant"),l={trapBubbledEvent:function(e,t){"production"!==n.env.NODE_ENV?a(this.isMounted(),"Must be mounted to trap events"):a(this.isMounted());var o=this.getDOMNode();"production"!==n.env.NODE_ENV?a(o,"LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered."):a(o);var s=r.trapBubbledEvent(e,t,o);this._localEventListeners=i(this._localEventListeners,s)},componentWillUnmount:function(){this._localEventListeners&&s(this._localEventListeners,o)}};t.exports=l}).call(this,e("_process"))},{"./ReactBrowserEventEmitter":179,"./accumulateInto":265,"./forEachAccumulated":282,"./invariant":297,_process:1}],174:[function(e,t,n){"use strict";var o=e("./EventConstants"),r=e("./emptyFunction"),i=o.topLevelTypes,s={eventTypes:null,extractEvents:function(e,t,n,o){if(e===i.topTouchStart){var s=o.target;s&&!s.onclick&&(s.onclick=r)}}};t.exports=s},{"./EventConstants":162,"./emptyFunction":276}],175:[function(e,t,n){"use strict";function o(e,t){if(null==e)throw new TypeError("Object.assign target cannot be null or undefined");for(var n=Object(e),o=Object.prototype.hasOwnProperty,r=1;r<arguments.length;r++){var i=arguments[r];if(null!=i){var s=Object(i);for(var a in s)o.call(s,a)&&(n[a]=s[a])}}return n}t.exports=o},{}],176:[function(e,t,n){(function(n){"use strict";

var o=e("./invariant"),r=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},i=function(e,t){var n=this;if(n.instancePool.length){var o=n.instancePool.pop();return n.call(o,e,t),o}return new n(e,t)},s=function(e,t,n){var o=this;if(o.instancePool.length){var r=o.instancePool.pop();return o.call(r,e,t,n),r}return new o(e,t,n)},a=function(e,t,n,o,r){var i=this;if(i.instancePool.length){var s=i.instancePool.pop();return i.call(s,e,t,n,o,r),s}return new i(e,t,n,o,r)},l=function(e){var t=this;"production"!==n.env.NODE_ENV?o(e instanceof t,"Trying to release an instance into a pool of a different type."):o(e instanceof t),e.destructor&&e.destructor(),t.instancePool.length<t.poolSize&&t.instancePool.push(e)},c=10,p=r,u=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||p,n.poolSize||(n.poolSize=c),n.release=l,n},h={addPoolingTo:u,oneArgumentPooler:r,twoArgumentPooler:i,threeArgumentPooler:s,fiveArgumentPooler:a};t.exports=h}).call(this,e("_process"))},{"./invariant":297,_process:1}],177:[function(e,t,n){(function(n){"use strict";var o=e("./EventPluginUtils"),r=e("./ReactChildren"),i=e("./ReactComponent"),s=e("./ReactClass"),a=e("./ReactContext"),l=e("./ReactCurrentOwner"),c=e("./ReactElement"),p=e("./ReactElementValidator"),u=e("./ReactDOM"),h=e("./ReactDOMTextComponent"),d=e("./ReactDefaultInjection"),f=e("./ReactInstanceHandles"),m=e("./ReactMount"),y=e("./ReactPerf"),g=e("./ReactPropTypes"),v=e("./ReactReconciler"),b=e("./ReactServerRendering"),T=e("./Object.assign"),x=e("./findDOMNode"),E=e("./onlyChild");d.inject();var C=c.createElement,_=c.createFactory,P=c.cloneElement;"production"!==n.env.NODE_ENV&&(C=p.createElement,_=p.createFactory,P=p.cloneElement);var w=y.measure("React","render",m.render),D={Children:{map:r.map,forEach:r.forEach,count:r.count,only:E},Component:i,DOM:u,PropTypes:g,initializeTouchEvents:function(e){o.useTouchEvents=e},createClass:s.createClass,createElement:C,cloneElement:P,createFactory:_,createMixin:function(e){return e},constructAndRenderComponent:m.constructAndRenderComponent,constructAndRenderComponentByID:m.constructAndRenderComponentByID,findDOMNode:x,render:w,renderToString:b.renderToString,renderToStaticMarkup:b.renderToStaticMarkup,unmountComponentAtNode:m.unmountComponentAtNode,isValidElement:c.isValidElement,withContext:a.withContext,__spread:T};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({CurrentOwner:l,InstanceHandles:f,Mount:m,Reconciler:v,TextComponent:h}),"production"!==n.env.NODE_ENV){var S=e("./ExecutionEnvironment");if(S.canUseDOM&&window.top===window.self){navigator.userAgent.indexOf("Chrome")>-1&&"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&console.debug("Download the React DevTools for a better development experience: https://fb.me/react-devtools");for(var O=[Array.isArray,Array.prototype.every,Array.prototype.forEach,Array.prototype.indexOf,Array.prototype.map,Date.now,Function.prototype.bind,Object.keys,String.prototype.split,String.prototype.trim,Object.create,Object.freeze],M=0;M<O.length;M++)if(!O[M]){console.error("One or more ES5 shim/shams expected by React are not available: https://fb.me/react-warning-polyfills");break}}}D.version="0.13.3",t.exports=D}).call(this,e("_process"))},{"./EventPluginUtils":166,"./ExecutionEnvironment":168,"./Object.assign":175,"./ReactChildren":183,"./ReactClass":184,"./ReactComponent":185,"./ReactContext":190,"./ReactCurrentOwner":191,"./ReactDOM":192,"./ReactDOMTextComponent":203,"./ReactDefaultInjection":206,"./ReactElement":209,"./ReactElementValidator":210,"./ReactInstanceHandles":218,"./ReactMount":223,"./ReactPerf":228,"./ReactPropTypes":232,"./ReactReconciler":235,"./ReactServerRendering":238,"./findDOMNode":279,"./onlyChild":307,_process:1}],178:[function(e,t,n){"use strict";var o=e("./findDOMNode"),r={getDOMNode:function(){return o(this)}};t.exports=r},{"./findDOMNode":279}],179:[function(e,t,n){"use strict";function o(e){return Object.prototype.hasOwnProperty.call(e,m)||(e[m]=d++,u[e[m]]={}),u[e[m]]}var r=e("./EventConstants"),i=e("./EventPluginHub"),s=e("./EventPluginRegistry"),a=e("./ReactEventEmitterMixin"),l=e("./ViewportMetrics"),c=e("./Object.assign"),p=e("./isEventSupported"),u={},h=!1,d=0,f={topBlur:"blur",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topWheel:"wheel"},m="_reactListenersID"+String(Math.random()).slice(2),y=c({},a,{ReactEventListener:null,injection:{injectReactEventListener:function(e){e.setHandleTopLevel(y.handleTopLevel),y.ReactEventListener=e}},setEnabled:function(e){y.ReactEventListener&&y.ReactEventListener.setEnabled(e)},isEnabled:function(){return!(!y.ReactEventListener||!y.ReactEventListener.isEnabled())},listenTo:function(e,t){for(var n=t,i=o(n),a=s.registrationNameDependencies[e],l=r.topLevelTypes,c=0,u=a.length;u>c;c++){var h=a[c];i.hasOwnProperty(h)&&i[h]||(h===l.topWheel?p("wheel")?y.ReactEventListener.trapBubbledEvent(l.topWheel,"wheel",n):p("mousewheel")?y.ReactEventListener.trapBubbledEvent(l.topWheel,"mousewheel",n):y.ReactEventListener.trapBubbledEvent(l.topWheel,"DOMMouseScroll",n):h===l.topScroll?p("scroll",!0)?y.ReactEventListener.trapCapturedEvent(l.topScroll,"scroll",n):y.ReactEventListener.trapBubbledEvent(l.topScroll,"scroll",y.ReactEventListener.WINDOW_HANDLE):h===l.topFocus||h===l.topBlur?(p("focus",!0)?(y.ReactEventListener.trapCapturedEvent(l.topFocus,"focus",n),y.ReactEventListener.trapCapturedEvent(l.topBlur,"blur",n)):p("focusin")&&(y.ReactEventListener.trapBubbledEvent(l.topFocus,"focusin",n),y.ReactEventListener.trapBubbledEvent(l.topBlur,"focusout",n)),i[l.topBlur]=!0,i[l.topFocus]=!0):f.hasOwnProperty(h)&&y.ReactEventListener.trapBubbledEvent(h,f[h],n),i[h]=!0)}},trapBubbledEvent:function(e,t,n){return y.ReactEventListener.trapBubbledEvent(e,t,n)},trapCapturedEvent:function(e,t,n){return y.ReactEventListener.trapCapturedEvent(e,t,n)},ensureScrollValueMonitoring:function(){if(!h){var e=l.refreshScrollValues;y.ReactEventListener.monitorScrollValue(e),h=!0}},eventNameDispatchConfigs:i.eventNameDispatchConfigs,registrationNameModules:i.registrationNameModules,putListener:i.putListener,getListener:i.getListener,deleteListener:i.deleteListener,deleteAllListeners:i.deleteAllListeners});t.exports=y},{"./EventConstants":162,"./EventPluginHub":164,"./EventPluginRegistry":165,"./Object.assign":175,"./ReactEventEmitterMixin":213,"./ViewportMetrics":264,"./isEventSupported":298}],180:[function(e,t,n){"use strict";var o=e("./React"),r=e("./Object.assign"),i=o.createFactory(e("./ReactTransitionGroup")),s=o.createFactory(e("./ReactCSSTransitionGroupChild")),a=o.createClass({displayName:"ReactCSSTransitionGroup",propTypes:{transitionName:o.PropTypes.string.isRequired,transitionAppear:o.PropTypes.bool,transitionEnter:o.PropTypes.bool,transitionLeave:o.PropTypes.bool},getDefaultProps:function(){return{transitionAppear:!1,transitionEnter:!0,transitionLeave:!0}},_wrapChild:function(e){return s({name:this.props.transitionName,appear:this.props.transitionAppear,enter:this.props.transitionEnter,leave:this.props.transitionLeave},e)},render:function(){return i(r({},this.props,{childFactory:this._wrapChild}))}});t.exports=a},{"./Object.assign":175,"./React":177,"./ReactCSSTransitionGroupChild":181,"./ReactTransitionGroup":244}],181:[function(e,t,n){(function(n){"use strict";var o=e("./React"),r=e("./CSSCore"),i=e("./ReactTransitionEvents"),s=e("./onlyChild"),a=e("./warning"),l=17,c=5e3,p=null;"production"!==n.env.NODE_ENV&&(p=function(){"production"!==n.env.NODE_ENV?a(!1,"transition(): tried to perform an animation without an animationend or transitionend event after timeout (%sms). You should either disable this transition in JS or add a CSS animation/transition.",c):null});var u=o.createClass({displayName:"ReactCSSTransitionGroupChild",transition:function(e,t){var o=this.getDOMNode(),s=this.props.name+"-"+e,a=s+"-active",l=null,u=function(e){e&&e.target!==o||("production"!==n.env.NODE_ENV&&clearTimeout(l),r.removeClass(o,s),r.removeClass(o,a),i.removeEndEventListener(o,u),t&&t())};i.addEndEventListener(o,u),r.addClass(o,s),this.queueClass(a),"production"!==n.env.NODE_ENV&&(l=setTimeout(p,c))},queueClass:function(e){this.classNameQueue.push(e),this.timeout||(this.timeout=setTimeout(this.flushClassNameQueue,l))},flushClassNameQueue:function(){this.isMounted()&&this.classNameQueue.forEach(r.addClass.bind(r,this.getDOMNode())),this.classNameQueue.length=0,this.timeout=null},componentWillMount:function(){this.classNameQueue=[]},componentWillUnmount:function(){this.timeout&&clearTimeout(this.timeout)},componentWillAppear:function(e){this.props.appear?this.transition("appear",e):e()},componentWillEnter:function(e){this.props.enter?this.transition("enter",e):e()},componentWillLeave:function(e){this.props.leave?this.transition("leave",e):e()},render:function(){return s(this.props.children)}});t.exports=u}).call(this,e("_process"))},{"./CSSCore":150,"./React":177,"./ReactTransitionEvents":243,"./onlyChild":307,"./warning":318,_process:1}],182:[function(e,t,n){"use strict";var o=e("./ReactReconciler"),r=e("./flattenChildren"),i=e("./instantiateReactComponent"),s=e("./shouldUpdateReactComponent"),a={instantiateChildren:function(e,t,n){var o=r(e);for(var s in o)if(o.hasOwnProperty(s)){var a=o[s],l=i(a,null);o[s]=l}return o},updateChildren:function(e,t,n,a){var l=r(t);if(!l&&!e)return null;var c;for(c in l)if(l.hasOwnProperty(c)){var p=e&&e[c],u=p&&p._currentElement,h=l[c];if(s(u,h))o.receiveComponent(p,h,n,a),l[c]=p;else{p&&o.unmountComponent(p,c);var d=i(h,null);l[c]=d}}for(c in e)!e.hasOwnProperty(c)||l&&l.hasOwnProperty(c)||o.unmountComponent(e[c]);return l},unmountChildren:function(e){for(var t in e){var n=e[t];o.unmountComponent(n)}}};t.exports=a},{"./ReactReconciler":235,"./flattenChildren":280,"./instantiateReactComponent":296,"./shouldUpdateReactComponent":314}],183:[function(e,t,n){(function(n){"use strict";function o(e,t){this.forEachFunction=e,this.forEachContext=t}function r(e,t,n,o){var r=e;r.forEachFunction.call(r.forEachContext,t,o)}function i(e,t,n){if(null==e)return e;var i=o.getPooled(t,n);d(e,r,i),o.release(i)}function s(e,t,n){this.mapResult=e,this.mapFunction=t,this.mapContext=n}function a(e,t,o,r){var i=e,s=i.mapResult,a=!s.hasOwnProperty(o);if("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?f(a,"ReactChildren.map(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",o):null),a){var l=i.mapFunction.call(i.mapContext,t,r);s[o]=l}}function l(e,t,n){if(null==e)return e;var o={},r=s.getPooled(o,t,n);return d(e,a,r),s.release(r),h.create(o)}function c(e,t,n,o){return null}function p(e,t){return d(e,c,null)}var u=e("./PooledClass"),h=e("./ReactFragment"),d=e("./traverseAllChildren"),f=e("./warning"),m=u.twoArgumentPooler,y=u.threeArgumentPooler;u.addPoolingTo(o,m),u.addPoolingTo(s,y);var g={forEach:i,map:l,count:p};t.exports=g}).call(this,e("_process"))},{"./PooledClass":176,"./ReactFragment":215,"./traverseAllChildren":316,"./warning":318,_process:1}],184:[function(e,t,n){(function(n){"use strict";function o(e,t,o){for(var r in t)t.hasOwnProperty(r)&&("production"!==n.env.NODE_ENV?P("function"==typeof t[r],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",e.displayName||"ReactClass",b[o],r):null)}function r(e,t){var o=O.hasOwnProperty(t)?O[t]:null;R.hasOwnProperty(t)&&("production"!==n.env.NODE_ENV?E(o===D.OVERRIDE_BASE,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",t):E(o===D.OVERRIDE_BASE)),e.hasOwnProperty(t)&&("production"!==n.env.NODE_ENV?E(o===D.DEFINE_MANY||o===D.DEFINE_MANY_MERGED,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",t):E(o===D.DEFINE_MANY||o===D.DEFINE_MANY_MERGED))}function i(e,t){if(t){"production"!==n.env.NODE_ENV?E("function"!=typeof t,"ReactClass: You're attempting to use a component class as a mixin. Instead, just use a regular object."):E("function"!=typeof t),"production"!==n.env.NODE_ENV?E(!f.isValidElement(t),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object."):E(!f.isValidElement(t));var o=e.prototype;t.hasOwnProperty(w)&&M.mixins(e,t.mixins);for(var i in t)if(t.hasOwnProperty(i)&&i!==w){var s=t[i];if(r(o,i),M.hasOwnProperty(i))M[i](e,s);else{var a=O.hasOwnProperty(i),p=o.hasOwnProperty(i),u=s&&s.__reactDontBind,h="function"==typeof s,d=h&&!a&&!p&&!u;if(d)o.__reactAutoBindMap||(o.__reactAutoBindMap={}),o.__reactAutoBindMap[i]=s,o[i]=s;else if(p){var m=O[i];"production"!==n.env.NODE_ENV?E(a&&(m===D.DEFINE_MANY_MERGED||m===D.DEFINE_MANY),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",m,i):E(a&&(m===D.DEFINE_MANY_MERGED||m===D.DEFINE_MANY)),m===D.DEFINE_MANY_MERGED?o[i]=l(o[i],s):m===D.DEFINE_MANY&&(o[i]=c(o[i],s))}else o[i]=s,"production"!==n.env.NODE_ENV&&"function"==typeof s&&t.displayName&&(o[i].displayName=t.displayName+"_"+i)}}}}function s(e,t){if(t)for(var o in t){var r=t[o];if(t.hasOwnProperty(o)){var i=o in M;"production"!==n.env.NODE_ENV?E(!i,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',o):E(!i);var s=o in e;"production"!==n.env.NODE_ENV?E(!s,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",o):E(!s),e[o]=r}}}function a(e,t){"production"!==n.env.NODE_ENV?E(e&&t&&"object"==typeof e&&"object"==typeof t,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."):E(e&&t&&"object"==typeof e&&"object"==typeof t);for(var o in t)t.hasOwnProperty(o)&&("production"!==n.env.NODE_ENV?E(void 0===e[o],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",o):E(void 0===e[o]),e[o]=t[o]);return e}function l(e,t){return function(){var n=e.apply(this,arguments),o=t.apply(this,arguments);if(null==n)return o;if(null==o)return n;var r={};return a(r,n),a(r,o),r}}function c(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function p(e,t){var o=t.bind(e);if("production"!==n.env.NODE_ENV){o.__reactBoundContext=e,o.__reactBoundMethod=t,o.__reactBoundArguments=null;var r=e.constructor.displayName,i=o.bind;o.bind=function(s){for(var a=[],l=1,c=arguments.length;c>l;l++)a.push(arguments[l]);if(s!==e&&null!==s)"production"!==n.env.NODE_ENV?P(!1,"bind(): React component methods may only be bound to the component instance. See %s",r):null;else if(!a.length)return"production"!==n.env.NODE_ENV?P(!1,"bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s",r):null,o;var p=i.apply(o,arguments);return p.__reactBoundContext=e,p.__reactBoundMethod=t,p.__reactBoundArguments=a,p}}return o}function u(e){for(var t in e.__reactAutoBindMap)if(e.__reactAutoBindMap.hasOwnProperty(t)){var n=e.__reactAutoBindMap[t];e[t]=p(e,m.guard(n,e.constructor.displayName+"."+t))}}var h=e("./ReactComponent"),d=e("./ReactCurrentOwner"),f=e("./ReactElement"),m=e("./ReactErrorUtils"),y=e("./ReactInstanceMap"),g=e("./ReactLifeCycle"),v=e("./ReactPropTypeLocations"),b=e("./ReactPropTypeLocationNames"),T=e("./ReactUpdateQueue"),x=e("./Object.assign"),E=e("./invariant"),C=e("./keyMirror"),_=e("./keyOf"),P=e("./warning"),w=_({mixins:null}),D=C({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),S=[],O={mixins:D.DEFINE_MANY,statics:D.DEFINE_MANY,propTypes:D.DEFINE_MANY,contextTypes:D.DEFINE_MANY,childContextTypes:D.DEFINE_MANY,getDefaultProps:D.DEFINE_MANY_MERGED,getInitialState:D.DEFINE_MANY_MERGED,getChildContext:D.DEFINE_MANY_MERGED,render:D.DEFINE_ONCE,componentWillMount:D.DEFINE_MANY,componentDidMount:D.DEFINE_MANY,componentWillReceiveProps:D.DEFINE_MANY,shouldComponentUpdate:D.DEFINE_ONCE,componentWillUpdate:D.DEFINE_MANY,componentDidUpdate:D.DEFINE_MANY,componentWillUnmount:D.DEFINE_MANY,updateComponent:D.OVERRIDE_BASE},M={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)i(e,t[n])},childContextTypes:function(e,t){"production"!==n.env.NODE_ENV&&o(e,t,v.childContext),e.childContextTypes=x({},e.childContextTypes,t)},contextTypes:function(e,t){"production"!==n.env.NODE_ENV&&o(e,t,v.context),e.contextTypes=x({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps=e.getDefaultProps?l(e.getDefaultProps,t):t},propTypes:function(e,t){"production"!==n.env.NODE_ENV&&o(e,t,v.prop),e.propTypes=x({},e.propTypes,t)},statics:function(e,t){s(e,t)}},N={enumerable:!1,get:function(){var e=this.displayName||this.name||"Component";return"production"!==n.env.NODE_ENV?P(!1,"%s.type is deprecated. Use %s directly to access the class.",e,e):null,Object.defineProperty(this,"type",{value:this}),this}},R={replaceState:function(e,t){T.enqueueReplaceState(this,e),t&&T.enqueueCallback(this,t)},isMounted:function(){if("production"!==n.env.NODE_ENV){var e=d.current;null!==e&&("production"!==n.env.NODE_ENV?P(e._warnedAboutRefsInRender,"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",e.getName()||"A component"):null,e._warnedAboutRefsInRender=!0)}var t=y.get(this);return t&&t!==g.currentlyMountingInstance},setProps:function(e,t){T.enqueueSetProps(this,e),t&&T.enqueueCallback(this,t)},replaceProps:function(e,t){T.enqueueReplaceProps(this,e),t&&T.enqueueCallback(this,t)}},k=function(){};x(k.prototype,h.prototype,R);var I={createClass:function(e){var t=function(e,o){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?P(this instanceof t,"Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory"):null),this.__reactAutoBindMap&&u(this),this.props=e,this.context=o,this.state=null;var r=this.getInitialState?this.getInitialState():null;"production"!==n.env.NODE_ENV&&"undefined"==typeof r&&this.getInitialState._isMockFunction&&(r=null),"production"!==n.env.NODE_ENV?E("object"==typeof r&&!Array.isArray(r),"%s.getInitialState(): must return an object or null",t.displayName||"ReactCompositeComponent"):E("object"==typeof r&&!Array.isArray(r)),this.state=r};t.prototype=new k,t.prototype.constructor=t,S.forEach(i.bind(null,t)),i(t,e),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),"production"!==n.env.NODE_ENV&&(t.getDefaultProps&&(t.getDefaultProps.isReactClassApproved={}),t.prototype.getInitialState&&(t.prototype.getInitialState.isReactClassApproved={})),"production"!==n.env.NODE_ENV?E(t.prototype.render,"createClass(...): Class specification must implement a `render` method."):E(t.prototype.render),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?P(!t.prototype.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",e.displayName||"A component"):null);for(var o in O)t.prototype[o]||(t.prototype[o]=null);if(t.type=t,"production"!==n.env.NODE_ENV)try{Object.defineProperty(t,"type",N)}catch(r){}return t},injection:{injectMixin:function(e){S.push(e)}}};t.exports=I}).call(this,e("_process"))},{"./Object.assign":175,"./ReactComponent":185,"./ReactCurrentOwner":191,"./ReactElement":209,"./ReactErrorUtils":212,"./ReactInstanceMap":219,"./ReactLifeCycle":220,"./ReactPropTypeLocationNames":230,"./ReactPropTypeLocations":231,"./ReactUpdateQueue":245,"./invariant":297,"./keyMirror":303,"./keyOf":304,"./warning":318,_process:1}],185:[function(e,t,n){(function(n){"use strict";function o(e,t){this.props=e,this.context=t}var r=e("./ReactUpdateQueue"),i=e("./invariant"),s=e("./warning");if(o.prototype.setState=function(e,t){"production"!==n.env.NODE_ENV?i("object"==typeof e||"function"==typeof e||null==e,"setState(...): takes an object of state variables to update or a function which returns an object of state variables."):i("object"==typeof e||"function"==typeof e||null==e),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?s(null!=e,"setState(...): You passed an undefined or null state object; instead, use forceUpdate()."):null),r.enqueueSetState(this,e),t&&r.enqueueCallback(this,t)},o.prototype.forceUpdate=function(e){r.enqueueForceUpdate(this),e&&r.enqueueCallback(this,e)},"production"!==n.env.NODE_ENV){var a={getDOMNode:["getDOMNode","Use React.findDOMNode(component) instead."],isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceProps:["replaceProps","Instead, call React.render again at the top level."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."],setProps:["setProps","Instead, call React.render again at the top level."]},l=function(e,t){try{Object.defineProperty(o.prototype,e,{get:function(){return void("production"!==n.env.NODE_ENV?s(!1,"%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1]):null)}})}catch(r){}};for(var c in a)a.hasOwnProperty(c)&&l(c,a[c])}t.exports=o}).call(this,e("_process"))},{"./ReactUpdateQueue":245,"./invariant":297,"./warning":318,_process:1}],186:[function(e,t,n){"use strict";var o=e("./ReactDOMIDOperations"),r=e("./ReactMount"),i={processChildrenUpdates:o.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkupByID:o.dangerouslyReplaceNodeWithMarkupByID,unmountIDFromEnvironment:function(e){r.purgeID(e)}};t.exports=i},{"./ReactDOMIDOperations":196,"./ReactMount":223}],187:[function(e,t,n){(function(n){"use strict";var o=e("./invariant"),r=!1,i={unmountIDFromEnvironment:null,replaceNodeWithMarkupByID:null,processChildrenUpdates:null,injection:{injectEnvironment:function(e){"production"!==n.env.NODE_ENV?o(!r,"ReactCompositeComponent: injectEnvironment() can only be called once."):o(!r),i.unmountIDFromEnvironment=e.unmountIDFromEnvironment,i.replaceNodeWithMarkupByID=e.replaceNodeWithMarkupByID,i.processChildrenUpdates=e.processChildrenUpdates,r=!0}}};t.exports=i}).call(this,e("_process"))},{"./invariant":297,_process:1}],188:[function(e,t,n){"use strict";var o=e("./shallowEqual"),r={shouldComponentUpdate:function(e,t){return!o(this.props,e)||!o(this.state,t)}};t.exports=r},{"./shallowEqual":313}],189:[function(e,t,n){(function(n){"use strict";function o(e){var t=e._currentElement._owner||null;if(t){var n=t.getName();if(n)return" Check the render method of `"+n+"`."}return""}var r=e("./ReactComponentEnvironment"),i=e("./ReactContext"),s=e("./ReactCurrentOwner"),a=e("./ReactElement"),l=e("./ReactElementValidator"),c=e("./ReactInstanceMap"),p=e("./ReactLifeCycle"),u=e("./ReactNativeComponent"),h=e("./ReactPerf"),d=e("./ReactPropTypeLocations"),f=e("./ReactPropTypeLocationNames"),m=e("./ReactReconciler"),y=e("./ReactUpdates"),g=e("./Object.assign"),v=e("./emptyObject"),b=e("./invariant"),T=e("./shouldUpdateReactComponent"),x=e("./warning"),E=1,C={construct:function(e){this._currentElement=e,this._rootNodeID=null,this._instance=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._isTopLevel=!1,this._pendingCallbacks=null},mountComponent:function(e,t,o){this._context=o,this._mountOrder=E++,this._rootNodeID=e;var r=this._processProps(this._currentElement.props),i=this._processContext(this._currentElement._context),s=u.getComponentClassForElement(this._currentElement),a=new s(r,i);"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?x(null!=a.render,"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render` in your component or you may have accidentally tried to render an element whose type is a function that isn't a React component.",s.displayName||s.name||"Component"):null),a.props=r,a.context=i,a.refs=v,this._instance=a,c.set(a,this),"production"!==n.env.NODE_ENV&&this._warnIfContextsDiffer(this._currentElement._context,o),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?x(!a.getInitialState||a.getInitialState.isReactClassApproved,"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",this.getName()||"a component"):null,"production"!==n.env.NODE_ENV?x(!a.getDefaultProps||a.getDefaultProps.isReactClassApproved,"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",this.getName()||"a component"):null,"production"!==n.env.NODE_ENV?x(!a.propTypes,"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",this.getName()||"a component"):null,"production"!==n.env.NODE_ENV?x(!a.contextTypes,"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",this.getName()||"a component"):null,"production"!==n.env.NODE_ENV?x("function"!=typeof a.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",this.getName()||"A component"):null);var l=a.state;void 0===l&&(a.state=l=null),"production"!==n.env.NODE_ENV?b("object"==typeof l&&!Array.isArray(l),"%s.state: must be set to an object or null",this.getName()||"ReactCompositeComponent"):b("object"==typeof l&&!Array.isArray(l)),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1;var h,d,f=p.currentlyMountingInstance;p.currentlyMountingInstance=this;try{a.componentWillMount&&(a.componentWillMount(),this._pendingStateQueue&&(a.state=this._processPendingState(a.props,a.context))),h=this._getValidatedChildContext(o),d=this._renderValidatedComponent(h)}finally{p.currentlyMountingInstance=f}this._renderedComponent=this._instantiateReactComponent(d,this._currentElement.type);var y=m.mountComponent(this._renderedComponent,e,t,this._mergeChildContext(o,h));return a.componentDidMount&&t.getReactMountReady().enqueue(a.componentDidMount,a),y},unmountComponent:function(){var e=this._instance;if(e.componentWillUnmount){var t=p.currentlyUnmountingInstance;p.currentlyUnmountingInstance=this;try{e.componentWillUnmount()}finally{p.currentlyUnmountingInstance=t}}m.unmountComponent(this._renderedComponent),this._renderedComponent=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=null,c.remove(e)},_setPropsInternal:function(e,t){var n=this._pendingElement||this._currentElement;this._pendingElement=a.cloneAndReplaceProps(n,g({},n.props,e)),y.enqueueUpdate(this,t)},_maskContext:function(e){var t=null;if("string"==typeof this._currentElement.type)return v;var n=this._currentElement.type.contextTypes;if(!n)return v;t={};for(var o in n)t[o]=e[o];return t},_processContext:function(e){var t=this._maskContext(e);if("production"!==n.env.NODE_ENV){var o=u.getComponentClassForElement(this._currentElement);o.contextTypes&&this._checkPropTypes(o.contextTypes,t,d.context)}return t},_getValidatedChildContext:function(e){var t=this._instance,o=t.getChildContext&&t.getChildContext();if(o){"production"!==n.env.NODE_ENV?b("object"==typeof t.constructor.childContextTypes,"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",this.getName()||"ReactCompositeComponent"):b("object"==typeof t.constructor.childContextTypes),"production"!==n.env.NODE_ENV&&this._checkPropTypes(t.constructor.childContextTypes,o,d.childContext);for(var r in o)"production"!==n.env.NODE_ENV?b(r in t.constructor.childContextTypes,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',this.getName()||"ReactCompositeComponent",r):b(r in t.constructor.childContextTypes);return o}return null},_mergeChildContext:function(e,t){return t?g({},e,t):e},_processProps:function(e){if("production"!==n.env.NODE_ENV){var t=u.getComponentClassForElement(this._currentElement);t.propTypes&&this._checkPropTypes(t.propTypes,e,d.prop)}return e},_checkPropTypes:function(e,t,r){var i=this.getName();for(var s in e)if(e.hasOwnProperty(s)){var a;try{"production"!==n.env.NODE_ENV?b("function"==typeof e[s],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",i||"React class",f[r],s):b("function"==typeof e[s]),a=e[s](t,s,i,r)}catch(l){a=l}if(a instanceof Error){var c=o(this);r===d.prop?"production"!==n.env.NODE_ENV?x(!1,"Failed Composite propType: %s%s",a.message,c):null:"production"!==n.env.NODE_ENV?x(!1,"Failed Context Types: %s%s",a.message,c):null}}},receiveComponent:function(e,t,n){var o=this._currentElement,r=this._context;this._pendingElement=null,this.updateComponent(t,o,e,r,n)},performUpdateIfNecessary:function(e){null!=this._pendingElement&&m.receiveComponent(this,this._pendingElement||this._currentElement,e,this._context),(null!==this._pendingStateQueue||this._pendingForceUpdate)&&("production"!==n.env.NODE_ENV&&l.checkAndWarnForMutatedProps(this._currentElement),this.updateComponent(e,this._currentElement,this._currentElement,this._context,this._context))},_warnIfContextsDiffer:function(e,t){e=this._maskContext(e),t=this._maskContext(t);for(var o=Object.keys(t).sort(),r=this.getName()||"ReactCompositeComponent",i=0;i<o.length;i++){var s=o[i];"production"!==n.env.NODE_ENV?x(e[s]===t[s],"owner-based and parent-based contexts differ (values: `%s` vs `%s`) for key (%s) while mounting %s (see: http://fb.me/react-context-by-parent)",e[s],t[s],s,r):null}},updateComponent:function(e,t,o,r,i){var s=this._instance,a=s.context,l=s.props;t!==o&&(a=this._processContext(o._context),l=this._processProps(o.props),"production"!==n.env.NODE_ENV&&null!=i&&this._warnIfContextsDiffer(o._context,i),s.componentWillReceiveProps&&s.componentWillReceiveProps(l,a));var c=this._processPendingState(l,a),p=this._pendingForceUpdate||!s.shouldComponentUpdate||s.shouldComponentUpdate(l,c,a);"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?x("undefined"!=typeof p,"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",this.getName()||"ReactCompositeComponent"):null),p?(this._pendingForceUpdate=!1,this._performComponentUpdate(o,l,c,a,e,i)):(this._currentElement=o,
this._context=i,s.props=l,s.state=c,s.context=a)},_processPendingState:function(e,t){var n=this._instance,o=this._pendingStateQueue,r=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!o)return n.state;if(r&&1===o.length)return o[0];for(var i=g({},r?o[0]:n.state),s=r?1:0;s<o.length;s++){var a=o[s];g(i,"function"==typeof a?a.call(n,i,e,t):a)}return i},_performComponentUpdate:function(e,t,n,o,r,i){var s=this._instance,a=s.props,l=s.state,c=s.context;s.componentWillUpdate&&s.componentWillUpdate(t,n,o),this._currentElement=e,this._context=i,s.props=t,s.state=n,s.context=o,this._updateRenderedComponent(r,i),s.componentDidUpdate&&r.getReactMountReady().enqueue(s.componentDidUpdate.bind(s,a,l,c),s)},_updateRenderedComponent:function(e,t){var n=this._renderedComponent,o=n._currentElement,r=this._getValidatedChildContext(),i=this._renderValidatedComponent(r);if(T(o,i))m.receiveComponent(n,i,e,this._mergeChildContext(t,r));else{var s=this._rootNodeID,a=n._rootNodeID;m.unmountComponent(n),this._renderedComponent=this._instantiateReactComponent(i,this._currentElement.type);var l=m.mountComponent(this._renderedComponent,s,e,this._mergeChildContext(t,r));this._replaceNodeWithMarkupByID(a,l)}},_replaceNodeWithMarkupByID:function(e,t){r.replaceNodeWithMarkupByID(e,t)},_renderValidatedComponentWithoutOwnerOrContext:function(){var e=this._instance,t=e.render();return"production"!==n.env.NODE_ENV&&"undefined"==typeof t&&e.render._isMockFunction&&(t=null),t},_renderValidatedComponent:function(e){var t,o=i.current;i.current=this._mergeChildContext(this._currentElement._context,e),s.current=this;try{t=this._renderValidatedComponentWithoutOwnerOrContext()}finally{i.current=o,s.current=null}return"production"!==n.env.NODE_ENV?b(null===t||t===!1||a.isValidElement(t),"%s.render(): A valid ReactComponent must be returned. You may have returned undefined, an array or some other invalid object.",this.getName()||"ReactCompositeComponent"):b(null===t||t===!1||a.isValidElement(t)),t},attachRef:function(e,t){var n=this.getPublicInstance(),o=n.refs===v?n.refs={}:n.refs;o[e]=t.getPublicInstance()},detachRef:function(e){var t=this.getPublicInstance().refs;delete t[e]},getName:function(){var e=this._currentElement.type,t=this._instance&&this._instance.constructor;return e.displayName||t&&t.displayName||e.name||t&&t.name||null},getPublicInstance:function(){return this._instance},_instantiateReactComponent:null};h.measureMethods(C,"ReactCompositeComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent",_renderValidatedComponent:"_renderValidatedComponent"});var _={Mixin:C};t.exports=_}).call(this,e("_process"))},{"./Object.assign":175,"./ReactComponentEnvironment":187,"./ReactContext":190,"./ReactCurrentOwner":191,"./ReactElement":209,"./ReactElementValidator":210,"./ReactInstanceMap":219,"./ReactLifeCycle":220,"./ReactNativeComponent":226,"./ReactPerf":228,"./ReactPropTypeLocationNames":230,"./ReactPropTypeLocations":231,"./ReactReconciler":235,"./ReactUpdates":246,"./emptyObject":277,"./invariant":297,"./shouldUpdateReactComponent":314,"./warning":318,_process:1}],190:[function(e,t,n){(function(n){"use strict";var o=e("./Object.assign"),r=e("./emptyObject"),i=e("./warning"),s=!1,a={current:r,withContext:function(e,t){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?i(s,"withContext is deprecated and will be removed in a future version. Use a wrapper component with getChildContext instead."):null,s=!0);var r,l=a.current;a.current=o({},l,e);try{r=t()}finally{a.current=l}return r}};t.exports=a}).call(this,e("_process"))},{"./Object.assign":175,"./emptyObject":277,"./warning":318,_process:1}],191:[function(e,t,n){"use strict";var o={current:null};t.exports=o},{}],192:[function(e,t,n){(function(n){"use strict";function o(e){return"production"!==n.env.NODE_ENV?i.createFactory(e):r.createFactory(e)}var r=e("./ReactElement"),i=e("./ReactElementValidator"),s=e("./mapObject"),a=s({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul","var":"var",video:"video",wbr:"wbr",circle:"circle",clipPath:"clipPath",defs:"defs",ellipse:"ellipse",g:"g",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},o);t.exports=a}).call(this,e("_process"))},{"./ReactElement":209,"./ReactElementValidator":210,"./mapObject":305,_process:1}],193:[function(e,t,n){"use strict";var o=e("./AutoFocusMixin"),r=e("./ReactBrowserComponentMixin"),i=e("./ReactClass"),s=e("./ReactElement"),a=e("./keyMirror"),l=s.createFactory("button"),c=a({onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0}),p=i.createClass({displayName:"ReactDOMButton",tagName:"BUTTON",mixins:[o,r],render:function(){var e={};for(var t in this.props)!this.props.hasOwnProperty(t)||this.props.disabled&&c[t]||(e[t]=this.props[t]);return l(e,this.props.children)}});t.exports=p},{"./AutoFocusMixin":148,"./ReactBrowserComponentMixin":178,"./ReactClass":184,"./ReactElement":209,"./keyMirror":303}],194:[function(e,t,n){(function(n){"use strict";function o(e){e&&(null!=e.dangerouslySetInnerHTML&&("production"!==n.env.NODE_ENV?g(null==e.children,"Can only set one of `children` or `props.dangerouslySetInnerHTML`."):g(null==e.children),"production"!==n.env.NODE_ENV?g("object"==typeof e.dangerouslySetInnerHTML&&"__html"in e.dangerouslySetInnerHTML,"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information."):g("object"==typeof e.dangerouslySetInnerHTML&&"__html"in e.dangerouslySetInnerHTML)),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?T(null==e.innerHTML,"Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."):null,"production"!==n.env.NODE_ENV?T(!e.contentEditable||null==e.children,"A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."):null),"production"!==n.env.NODE_ENV?g(null==e.style||"object"==typeof e.style,"The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."):g(null==e.style||"object"==typeof e.style))}function r(e,t,o,r){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?T("onScroll"!==t||v("scroll",!0),"This browser doesn't support the `onScroll` event"):null);var i=h.findReactContainerForID(e);if(i){var s=i.nodeType===w?i.ownerDocument:i;E(t,s)}r.getPutListenerQueue().enqueuePutListener(e,t,o)}function i(e){N.call(M,e)||("production"!==n.env.NODE_ENV?g(O.test(e),"Invalid tag: %s",e):g(O.test(e)),M[e]=!0)}function s(e){i(e),this._tag=e,this._renderedChildren=null,this._previousStyleCopy=null,this._rootNodeID=null}var a=e("./CSSPropertyOperations"),l=e("./DOMProperty"),c=e("./DOMPropertyOperations"),p=e("./ReactBrowserEventEmitter"),u=e("./ReactComponentBrowserEnvironment"),h=e("./ReactMount"),d=e("./ReactMultiChild"),f=e("./ReactPerf"),m=e("./Object.assign"),y=e("./escapeTextContentForBrowser"),g=e("./invariant"),v=e("./isEventSupported"),b=e("./keyOf"),T=e("./warning"),x=p.deleteListener,E=p.listenTo,C=p.registrationNameModules,_={string:!0,number:!0},P=b({style:null}),w=1,D=null,S={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},O=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,M={},N={}.hasOwnProperty;s.displayName="ReactDOMComponent",s.Mixin={construct:function(e){this._currentElement=e},mountComponent:function(e,t,n){this._rootNodeID=e,o(this._currentElement.props);var r=S[this._tag]?"":"</"+this._tag+">";return this._createOpenTagMarkupAndPutListeners(t)+this._createContentMarkup(t,n)+r},_createOpenTagMarkupAndPutListeners:function(e){var t=this._currentElement.props,n="<"+this._tag;for(var o in t)if(t.hasOwnProperty(o)){var i=t[o];if(null!=i)if(C.hasOwnProperty(o))r(this._rootNodeID,o,i,e);else{o===P&&(i&&(i=this._previousStyleCopy=m({},t.style)),i=a.createMarkupForStyles(i));var s=c.createMarkupForProperty(o,i);s&&(n+=" "+s)}}if(e.renderToStaticMarkup)return n+">";var l=c.createMarkupForID(this._rootNodeID);return n+" "+l+">"},_createContentMarkup:function(e,t){var n="";("listing"===this._tag||"pre"===this._tag||"textarea"===this._tag)&&(n="\n");var o=this._currentElement.props,r=o.dangerouslySetInnerHTML;if(null!=r){if(null!=r.__html)return n+r.__html}else{var i=_[typeof o.children]?o.children:null,s=null!=i?null:o.children;if(null!=i)return n+y(i);if(null!=s){var a=this.mountChildren(s,e,t);return n+a.join("")}}return n},receiveComponent:function(e,t,n){var o=this._currentElement;this._currentElement=e,this.updateComponent(t,o,e,n)},updateComponent:function(e,t,n,r){o(this._currentElement.props),this._updateDOMProperties(t.props,e),this._updateDOMChildren(t.props,e,r)},_updateDOMProperties:function(e,t){var n,o,i,s=this._currentElement.props;for(n in e)if(!s.hasOwnProperty(n)&&e.hasOwnProperty(n))if(n===P){var a=this._previousStyleCopy;for(o in a)a.hasOwnProperty(o)&&(i=i||{},i[o]="");this._previousStyleCopy=null}else C.hasOwnProperty(n)?x(this._rootNodeID,n):(l.isStandardName[n]||l.isCustomAttribute(n))&&D.deletePropertyByID(this._rootNodeID,n);for(n in s){var c=s[n],p=n===P?this._previousStyleCopy:e[n];if(s.hasOwnProperty(n)&&c!==p)if(n===P)if(c?c=this._previousStyleCopy=m({},c):this._previousStyleCopy=null,p){for(o in p)!p.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(i=i||{},i[o]="");for(o in c)c.hasOwnProperty(o)&&p[o]!==c[o]&&(i=i||{},i[o]=c[o])}else i=c;else C.hasOwnProperty(n)?r(this._rootNodeID,n,c,t):(l.isStandardName[n]||l.isCustomAttribute(n))&&D.updatePropertyByID(this._rootNodeID,n,c)}i&&D.updateStylesByID(this._rootNodeID,i)},_updateDOMChildren:function(e,t,n){var o=this._currentElement.props,r=_[typeof e.children]?e.children:null,i=_[typeof o.children]?o.children:null,s=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,a=o.dangerouslySetInnerHTML&&o.dangerouslySetInnerHTML.__html,l=null!=r?null:e.children,c=null!=i?null:o.children,p=null!=r||null!=s,u=null!=i||null!=a;null!=l&&null==c?this.updateChildren(null,t,n):p&&!u&&this.updateTextContent(""),null!=i?r!==i&&this.updateTextContent(""+i):null!=a?s!==a&&D.updateInnerHTMLByID(this._rootNodeID,a):null!=c&&this.updateChildren(c,t,n)},unmountComponent:function(){this.unmountChildren(),p.deleteAllListeners(this._rootNodeID),u.unmountIDFromEnvironment(this._rootNodeID),this._rootNodeID=null}},f.measureMethods(s,"ReactDOMComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent"}),m(s.prototype,s.Mixin,d.Mixin),s.injection={injectIDOperations:function(e){s.BackendIDOperations=D=e}},t.exports=s}).call(this,e("_process"))},{"./CSSPropertyOperations":152,"./DOMProperty":157,"./DOMPropertyOperations":158,"./Object.assign":175,"./ReactBrowserEventEmitter":179,"./ReactComponentBrowserEnvironment":186,"./ReactMount":223,"./ReactMultiChild":224,"./ReactPerf":228,"./escapeTextContentForBrowser":278,"./invariant":297,"./isEventSupported":298,"./keyOf":304,"./warning":318,_process:1}],195:[function(e,t,n){"use strict";var o=e("./EventConstants"),r=e("./LocalEventTrapMixin"),i=e("./ReactBrowserComponentMixin"),s=e("./ReactClass"),a=e("./ReactElement"),l=a.createFactory("form"),c=s.createClass({displayName:"ReactDOMForm",tagName:"FORM",mixins:[i,r],render:function(){return l(this.props)},componentDidMount:function(){this.trapBubbledEvent(o.topLevelTypes.topReset,"reset"),this.trapBubbledEvent(o.topLevelTypes.topSubmit,"submit")}});t.exports=c},{"./EventConstants":162,"./LocalEventTrapMixin":173,"./ReactBrowserComponentMixin":178,"./ReactClass":184,"./ReactElement":209}],196:[function(e,t,n){(function(n){"use strict";var o=e("./CSSPropertyOperations"),r=e("./DOMChildrenOperations"),i=e("./DOMPropertyOperations"),s=e("./ReactMount"),a=e("./ReactPerf"),l=e("./invariant"),c=e("./setInnerHTML"),p={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},u={updatePropertyByID:function(e,t,o){var r=s.getNode(e);"production"!==n.env.NODE_ENV?l(!p.hasOwnProperty(t),"updatePropertyByID(...): %s",p[t]):l(!p.hasOwnProperty(t)),null!=o?i.setValueForProperty(r,t,o):i.deleteValueForProperty(r,t)},deletePropertyByID:function(e,t,o){var r=s.getNode(e);"production"!==n.env.NODE_ENV?l(!p.hasOwnProperty(t),"updatePropertyByID(...): %s",p[t]):l(!p.hasOwnProperty(t)),i.deleteValueForProperty(r,t,o)},updateStylesByID:function(e,t){var n=s.getNode(e);o.setValueForStyles(n,t)},updateInnerHTMLByID:function(e,t){var n=s.getNode(e);c(n,t)},updateTextContentByID:function(e,t){var n=s.getNode(e);r.updateTextContent(n,t)},dangerouslyReplaceNodeWithMarkupByID:function(e,t){var n=s.getNode(e);r.dangerouslyReplaceNodeWithMarkup(n,t)},dangerouslyProcessChildrenUpdates:function(e,t){for(var n=0;n<e.length;n++)e[n].parentNode=s.getNode(e[n].parentID);r.processUpdates(e,t)}};a.measureMethods(u,"ReactDOMIDOperations",{updatePropertyByID:"updatePropertyByID",deletePropertyByID:"deletePropertyByID",updateStylesByID:"updateStylesByID",updateInnerHTMLByID:"updateInnerHTMLByID",updateTextContentByID:"updateTextContentByID",dangerouslyReplaceNodeWithMarkupByID:"dangerouslyReplaceNodeWithMarkupByID",dangerouslyProcessChildrenUpdates:"dangerouslyProcessChildrenUpdates"}),t.exports=u}).call(this,e("_process"))},{"./CSSPropertyOperations":152,"./DOMChildrenOperations":156,"./DOMPropertyOperations":158,"./ReactMount":223,"./ReactPerf":228,"./invariant":297,"./setInnerHTML":311,_process:1}],197:[function(e,t,n){"use strict";var o=e("./EventConstants"),r=e("./LocalEventTrapMixin"),i=e("./ReactBrowserComponentMixin"),s=e("./ReactClass"),a=e("./ReactElement"),l=a.createFactory("iframe"),c=s.createClass({displayName:"ReactDOMIframe",tagName:"IFRAME",mixins:[i,r],render:function(){return l(this.props)},componentDidMount:function(){this.trapBubbledEvent(o.topLevelTypes.topLoad,"load")}});t.exports=c},{"./EventConstants":162,"./LocalEventTrapMixin":173,"./ReactBrowserComponentMixin":178,"./ReactClass":184,"./ReactElement":209}],198:[function(e,t,n){"use strict";var o=e("./EventConstants"),r=e("./LocalEventTrapMixin"),i=e("./ReactBrowserComponentMixin"),s=e("./ReactClass"),a=e("./ReactElement"),l=a.createFactory("img"),c=s.createClass({displayName:"ReactDOMImg",tagName:"IMG",mixins:[i,r],render:function(){return l(this.props)},componentDidMount:function(){this.trapBubbledEvent(o.topLevelTypes.topLoad,"load"),this.trapBubbledEvent(o.topLevelTypes.topError,"error")}});t.exports=c},{"./EventConstants":162,"./LocalEventTrapMixin":173,"./ReactBrowserComponentMixin":178,"./ReactClass":184,"./ReactElement":209}],199:[function(e,t,n){(function(n){"use strict";function o(){this.isMounted()&&this.forceUpdate()}var r=e("./AutoFocusMixin"),i=e("./DOMPropertyOperations"),s=e("./LinkedValueUtils"),a=e("./ReactBrowserComponentMixin"),l=e("./ReactClass"),c=e("./ReactElement"),p=e("./ReactMount"),u=e("./ReactUpdates"),h=e("./Object.assign"),d=e("./invariant"),f=c.createFactory("input"),m={},y=l.createClass({displayName:"ReactDOMInput",tagName:"INPUT",mixins:[r,s.Mixin,a],getInitialState:function(){var e=this.props.defaultValue;return{initialChecked:this.props.defaultChecked||!1,initialValue:null!=e?e:null}},render:function(){var e=h({},this.props);e.defaultChecked=null,e.defaultValue=null;var t=s.getValue(this);e.value=null!=t?t:this.state.initialValue;var n=s.getChecked(this);return e.checked=null!=n?n:this.state.initialChecked,e.onChange=this._handleChange,f(e,this.props.children)},componentDidMount:function(){var e=p.getID(this.getDOMNode());m[e]=this},componentWillUnmount:function(){var e=this.getDOMNode(),t=p.getID(e);delete m[t]},componentDidUpdate:function(e,t,n){var o=this.getDOMNode();null!=this.props.checked&&i.setValueForProperty(o,"checked",this.props.checked||!1);var r=s.getValue(this);null!=r&&i.setValueForProperty(o,"value",""+r)},_handleChange:function(e){var t,r=s.getOnChange(this);r&&(t=r.call(this,e)),u.asap(o,this);var i=this.props.name;if("radio"===this.props.type&&null!=i){for(var a=this.getDOMNode(),l=a;l.parentNode;)l=l.parentNode;for(var c=l.querySelectorAll("input[name="+JSON.stringify(""+i)+'][type="radio"]'),h=0,f=c.length;f>h;h++){var y=c[h];if(y!==a&&y.form===a.form){var g=p.getID(y);"production"!==n.env.NODE_ENV?d(g,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."):d(g);var v=m[g];"production"!==n.env.NODE_ENV?d(v,"ReactDOMInput: Unknown radio button ID %s.",g):d(v),u.asap(o,v)}}}return t}});t.exports=y}).call(this,e("_process"))},{"./AutoFocusMixin":148,"./DOMPropertyOperations":158,"./LinkedValueUtils":172,"./Object.assign":175,"./ReactBrowserComponentMixin":178,"./ReactClass":184,"./ReactElement":209,"./ReactMount":223,"./ReactUpdates":246,"./invariant":297,_process:1}],200:[function(e,t,n){(function(n){"use strict";var o=e("./ReactBrowserComponentMixin"),r=e("./ReactClass"),i=e("./ReactElement"),s=e("./warning"),a=i.createFactory("option"),l=r.createClass({displayName:"ReactDOMOption",tagName:"OPTION",mixins:[o],componentWillMount:function(){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?s(null==this.props.selected,"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."):null)},render:function(){return a(this.props,this.props.children)}});t.exports=l}).call(this,e("_process"))},{"./ReactBrowserComponentMixin":178,"./ReactClass":184,"./ReactElement":209,"./warning":318,_process:1}],201:[function(e,t,n){"use strict";function o(){if(this._pendingUpdate){this._pendingUpdate=!1;var e=a.getValue(this);null!=e&&this.isMounted()&&i(this,e)}}function r(e,t,n){if(null==e[t])return null;if(e.multiple){if(!Array.isArray(e[t]))return new Error("The `"+t+"` prop supplied to <select> must be an array if `multiple` is true.")}else if(Array.isArray(e[t]))return new Error("The `"+t+"` prop supplied to <select> must be a scalar value if `multiple` is false.")}function i(e,t){var n,o,r,i=e.getDOMNode().options;if(e.props.multiple){for(n={},o=0,r=t.length;r>o;o++)n[""+t[o]]=!0;for(o=0,r=i.length;r>o;o++){var s=n.hasOwnProperty(i[o].value);i[o].selected!==s&&(i[o].selected=s)}}else{for(n=""+t,o=0,r=i.length;r>o;o++)if(i[o].value===n)return void(i[o].selected=!0);i.length&&(i[0].selected=!0)}}var s=e("./AutoFocusMixin"),a=e("./LinkedValueUtils"),l=e("./ReactBrowserComponentMixin"),c=e("./ReactClass"),p=e("./ReactElement"),u=e("./ReactUpdates"),h=e("./Object.assign"),d=p.createFactory("select"),f=c.createClass({displayName:"ReactDOMSelect",tagName:"SELECT",mixins:[s,a.Mixin,l],propTypes:{defaultValue:r,value:r},render:function(){var e=h({},this.props);return e.onChange=this._handleChange,e.value=null,d(e,this.props.children)},componentWillMount:function(){this._pendingUpdate=!1},componentDidMount:function(){var e=a.getValue(this);null!=e?i(this,e):null!=this.props.defaultValue&&i(this,this.props.defaultValue)},componentDidUpdate:function(e){var t=a.getValue(this);null!=t?(this._pendingUpdate=!1,i(this,t)):!e.multiple!=!this.props.multiple&&(null!=this.props.defaultValue?i(this,this.props.defaultValue):i(this,this.props.multiple?[]:""))},_handleChange:function(e){var t,n=a.getOnChange(this);return n&&(t=n.call(this,e)),this._pendingUpdate=!0,u.asap(o,this),t}});t.exports=f},{"./AutoFocusMixin":148,"./LinkedValueUtils":172,"./Object.assign":175,"./ReactBrowserComponentMixin":178,"./ReactClass":184,"./ReactElement":209,"./ReactUpdates":246}],202:[function(e,t,n){"use strict";function o(e,t,n,o){return e===n&&t===o}function r(e){var t=document.selection,n=t.createRange(),o=n.text.length,r=n.duplicate();r.moveToElementText(e),r.setEndPoint("EndToStart",n);var i=r.text.length,s=i+o;return{start:i,end:s}}function i(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var n=t.anchorNode,r=t.anchorOffset,i=t.focusNode,s=t.focusOffset,a=t.getRangeAt(0),l=o(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset),c=l?0:a.toString().length,p=a.cloneRange();p.selectNodeContents(e),p.setEnd(a.startContainer,a.startOffset);var u=o(p.startContainer,p.startOffset,p.endContainer,p.endOffset),h=u?0:p.toString().length,d=h+c,f=document.createRange();f.setStart(n,r),f.setEnd(i,s);var m=f.collapsed;return{start:m?d:h,end:m?h:d}}function s(e,t){var n,o,r=document.selection.createRange().duplicate();"undefined"==typeof t.end?(n=t.start,o=n):t.start>t.end?(n=t.end,o=t.start):(n=t.start,o=t.end),r.moveToElementText(e),r.moveStart("character",n),r.setEndPoint("EndToStart",r),r.moveEnd("character",o-n),r.select()}function a(e,t){if(window.getSelection){var n=window.getSelection(),o=e[p()].length,r=Math.min(t.start,o),i="undefined"==typeof t.end?r:Math.min(t.end,o);if(!n.extend&&r>i){var s=i;i=r,r=s}var a=c(e,r),l=c(e,i);if(a&&l){var u=document.createRange();u.setStart(a.node,a.offset),n.removeAllRanges(),r>i?(n.addRange(u),n.extend(l.node,l.offset)):(u.setEnd(l.node,l.offset),n.addRange(u))}}}var l=e("./ExecutionEnvironment"),c=e("./getNodeForCharacterOffset"),p=e("./getTextContentAccessor"),u=l.canUseDOM&&"selection"in document&&!("getSelection"in window),h={getOffsets:u?r:i,setOffsets:u?s:a};t.exports=h},{"./ExecutionEnvironment":168,"./getNodeForCharacterOffset":290,"./getTextContentAccessor":292}],203:[function(e,t,n){"use strict";var o=e("./DOMPropertyOperations"),r=e("./ReactComponentBrowserEnvironment"),i=e("./ReactDOMComponent"),s=e("./Object.assign"),a=e("./escapeTextContentForBrowser"),l=function(e){};s(l.prototype,{construct:function(e){this._currentElement=e,this._stringText=""+e,this._rootNodeID=null,this._mountIndex=0},mountComponent:function(e,t,n){this._rootNodeID=e;var r=a(this._stringText);return t.renderToStaticMarkup?r:"<span "+o.createMarkupForID(e)+">"+r+"</span>"},receiveComponent:function(e,t){if(e!==this._currentElement){this._currentElement=e;var n=""+e;n!==this._stringText&&(this._stringText=n,i.BackendIDOperations.updateTextContentByID(this._rootNodeID,n))}},unmountComponent:function(){r.unmountIDFromEnvironment(this._rootNodeID)}}),t.exports=l},{"./DOMPropertyOperations":158,"./Object.assign":175,"./ReactComponentBrowserEnvironment":186,"./ReactDOMComponent":194,"./escapeTextContentForBrowser":278}],204:[function(e,t,n){(function(n){"use strict";function o(){this.isMounted()&&this.forceUpdate()}var r=e("./AutoFocusMixin"),i=e("./DOMPropertyOperations"),s=e("./LinkedValueUtils"),a=e("./ReactBrowserComponentMixin"),l=e("./ReactClass"),c=e("./ReactElement"),p=e("./ReactUpdates"),u=e("./Object.assign"),h=e("./invariant"),d=e("./warning"),f=c.createFactory("textarea"),m=l.createClass({displayName:"ReactDOMTextarea",tagName:"TEXTAREA",mixins:[r,s.Mixin,a],getInitialState:function(){var e=this.props.defaultValue,t=this.props.children;null!=t&&("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?d(!1,"Use the `defaultValue` or `value` props instead of setting children on <textarea>."):null),"production"!==n.env.NODE_ENV?h(null==e,"If you supply `defaultValue` on a <textarea>, do not pass children."):h(null==e),Array.isArray(t)&&("production"!==n.env.NODE_ENV?h(t.length<=1,"<textarea> can only have at most one child."):h(t.length<=1),t=t[0]),e=""+t),null==e&&(e="");var o=s.getValue(this);return{initialValue:""+(null!=o?o:e)}},render:function(){var e=u({},this.props);return"production"!==n.env.NODE_ENV?h(null==e.dangerouslySetInnerHTML,"`dangerouslySetInnerHTML` does not make sense on <textarea>."):h(null==e.dangerouslySetInnerHTML),e.defaultValue=null,e.value=null,e.onChange=this._handleChange,f(e,this.state.initialValue)},componentDidUpdate:function(e,t,n){var o=s.getValue(this);if(null!=o){var r=this.getDOMNode();i.setValueForProperty(r,"value",""+o)}},_handleChange:function(e){var t,n=s.getOnChange(this);return n&&(t=n.call(this,e)),p.asap(o,this),t}});t.exports=m}).call(this,e("_process"))},{"./AutoFocusMixin":148,"./DOMPropertyOperations":158,"./LinkedValueUtils":172,"./Object.assign":175,"./ReactBrowserComponentMixin":178,"./ReactClass":184,"./ReactElement":209,"./ReactUpdates":246,"./invariant":297,"./warning":318,_process:1}],205:[function(e,t,n){"use strict";function o(){this.reinitializeTransaction()}var r=e("./ReactUpdates"),i=e("./Transaction"),s=e("./Object.assign"),a=e("./emptyFunction"),l={initialize:a,close:function(){h.isBatchingUpdates=!1}},c={initialize:a,close:r.flushBatchedUpdates.bind(r)},p=[c,l];s(o.prototype,i.Mixin,{getTransactionWrappers:function(){return p}});var u=new o,h={isBatchingUpdates:!1,batchedUpdates:function(e,t,n,o,r){var i=h.isBatchingUpdates;h.isBatchingUpdates=!0,i?e(t,n,o,r):u.perform(e,null,t,n,o,r)}};t.exports=h},{"./Object.assign":175,"./ReactUpdates":246,"./Transaction":263,"./emptyFunction":276}],206:[function(e,t,n){(function(n){"use strict";function o(e){return f.createClass({tagName:e.toUpperCase(),render:function(){return new S(e,null,null,null,null,this.props)}})}function r(){if(M.EventEmitter.injectReactEventListener(O),M.EventPluginHub.injectEventPluginOrder(l),M.EventPluginHub.injectInstanceHandle(N),M.EventPluginHub.injectMount(R),M.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:L,EnterLeaveEventPlugin:c,ChangeEventPlugin:s,MobileSafariClickEventPlugin:h,SelectEventPlugin:I,BeforeInputEventPlugin:i}),M.NativeComponent.injectGenericComponentClass(g),M.NativeComponent.injectTextComponentClass(D),M.NativeComponent.injectAutoWrapper(o),M.Class.injectMixin(d),M.NativeComponent.injectComponentClasses({button:v,form:b,iframe:E,img:T,input:C,option:_,select:P,textarea:w,html:F("html"),head:F("head"),body:F("body")}),M.DOMProperty.injectDOMPropertyConfig(u),M.DOMProperty.injectDOMPropertyConfig(j),M.EmptyComponent.injectEmptyComponent("noscript"),M.Updates.injectReconcileTransaction(k),M.Updates.injectBatchingStrategy(y),M.RootIndex.injectCreateReactRootIndex(p.canUseDOM?a.createReactRootIndex:A.createReactRootIndex),M.Component.injectEnvironment(m),M.DOMComponent.injectIDOperations(x),"production"!==n.env.NODE_ENV){var t=p.canUseDOM&&window.location.href||"";if(/[?&]react_perf\b/.test(t)){var r=e("./ReactDefaultPerf");r.start()}}}var i=e("./BeforeInputEventPlugin"),s=e("./ChangeEventPlugin"),a=e("./ClientReactRootIndex"),l=e("./DefaultEventPluginOrder"),c=e("./EnterLeaveEventPlugin"),p=e("./ExecutionEnvironment"),u=e("./HTMLDOMPropertyConfig"),h=e("./MobileSafariClickEventPlugin"),d=e("./ReactBrowserComponentMixin"),f=e("./ReactClass"),m=e("./ReactComponentBrowserEnvironment"),y=e("./ReactDefaultBatchingStrategy"),g=e("./ReactDOMComponent"),v=e("./ReactDOMButton"),b=e("./ReactDOMForm"),T=e("./ReactDOMImg"),x=e("./ReactDOMIDOperations"),E=e("./ReactDOMIframe"),C=e("./ReactDOMInput"),_=e("./ReactDOMOption"),P=e("./ReactDOMSelect"),w=e("./ReactDOMTextarea"),D=e("./ReactDOMTextComponent"),S=e("./ReactElement"),O=e("./ReactEventListener"),M=e("./ReactInjection"),N=e("./ReactInstanceHandles"),R=e("./ReactMount"),k=e("./ReactReconcileTransaction"),I=e("./SelectEventPlugin"),A=e("./ServerReactRootIndex"),L=e("./SimpleEventPlugin"),j=e("./SVGDOMPropertyConfig"),F=e("./createFullPageComponent");t.exports={inject:r}}).call(this,e("_process"))},{"./BeforeInputEventPlugin":149,"./ChangeEventPlugin":154,"./ClientReactRootIndex":155,"./DefaultEventPluginOrder":160,"./EnterLeaveEventPlugin":161,"./ExecutionEnvironment":168,"./HTMLDOMPropertyConfig":170,"./MobileSafariClickEventPlugin":174,"./ReactBrowserComponentMixin":178,"./ReactClass":184,"./ReactComponentBrowserEnvironment":186,"./ReactDOMButton":193,"./ReactDOMComponent":194,"./ReactDOMForm":195,"./ReactDOMIDOperations":196,"./ReactDOMIframe":197,"./ReactDOMImg":198,"./ReactDOMInput":199,"./ReactDOMOption":200,"./ReactDOMSelect":201,"./ReactDOMTextComponent":203,"./ReactDOMTextarea":204,"./ReactDefaultBatchingStrategy":205,"./ReactDefaultPerf":207,"./ReactElement":209,"./ReactEventListener":214,"./ReactInjection":216,"./ReactInstanceHandles":218,"./ReactMount":223,"./ReactReconcileTransaction":234,"./SVGDOMPropertyConfig":248,"./SelectEventPlugin":249,"./ServerReactRootIndex":250,"./SimpleEventPlugin":251,"./createFullPageComponent":272,_process:1}],207:[function(e,t,n){"use strict";function o(e){return Math.floor(100*e)/100}function r(e,t,n){e[t]=(e[t]||0)+n}var i=e("./DOMProperty"),s=e("./ReactDefaultPerfAnalysis"),a=e("./ReactMount"),l=e("./ReactPerf"),c=e("./performanceNow"),p={_allMeasurements:[],_mountStack:[0],_injected:!1,start:function(){p._injected||l.injection.injectMeasure(p.measure),p._allMeasurements.length=0,l.enableMeasure=!0},stop:function(){l.enableMeasure=!1},getLastMeasurements:function(){return p._allMeasurements},printExclusive:function(e){e=e||p._allMeasurements;var t=s.getExclusiveSummary(e);console.table(t.map(function(e){return{"Component class name":e.componentName,"Total inclusive time (ms)":o(e.inclusive),"Exclusive mount time (ms)":o(e.exclusive),"Exclusive render time (ms)":o(e.render),"Mount time per instance (ms)":o(e.exclusive/e.count),"Render time per instance (ms)":o(e.render/e.count),Instances:e.count}}))},printInclusive:function(e){e=e||p._allMeasurements;var t=s.getInclusiveSummary(e);console.table(t.map(function(e){return{"Owner > component":e.componentName,"Inclusive time (ms)":o(e.time),Instances:e.count}})),console.log("Total time:",s.getTotalTime(e).toFixed(2)+" ms")},getMeasurementsSummaryMap:function(e){var t=s.getInclusiveSummary(e,!0);return t.map(function(e){return{"Owner > component":e.componentName,"Wasted time (ms)":e.time,Instances:e.count}})},printWasted:function(e){e=e||p._allMeasurements,console.table(p.getMeasurementsSummaryMap(e)),console.log("Total time:",s.getTotalTime(e).toFixed(2)+" ms")},printDOM:function(e){e=e||p._allMeasurements;var t=s.getDOMSummary(e);console.table(t.map(function(e){var t={};return t[i.ID_ATTRIBUTE_NAME]=e.id,t.type=e.type,t.args=JSON.stringify(e.args),t})),console.log("Total time:",s.getTotalTime(e).toFixed(2)+" ms")},_recordWrite:function(e,t,n,o){var r=p._allMeasurements[p._allMeasurements.length-1].writes;r[e]=r[e]||[],r[e].push({type:t,time:n,args:o})},measure:function(e,t,n){return function(){for(var o=[],i=0,s=arguments.length;s>i;i++)o.push(arguments[i]);var l,u,h;if("_renderNewRootComponent"===t||"flushBatchedUpdates"===t)return p._allMeasurements.push({exclusive:{},inclusive:{},render:{},counts:{},
writes:{},displayNames:{},totalTime:0}),h=c(),u=n.apply(this,o),p._allMeasurements[p._allMeasurements.length-1].totalTime=c()-h,u;if("_mountImageIntoNode"===t||"ReactDOMIDOperations"===e){if(h=c(),u=n.apply(this,o),l=c()-h,"_mountImageIntoNode"===t){var d=a.getID(o[1]);p._recordWrite(d,t,l,o[0])}else"dangerouslyProcessChildrenUpdates"===t?o[0].forEach(function(e){var t={};null!==e.fromIndex&&(t.fromIndex=e.fromIndex),null!==e.toIndex&&(t.toIndex=e.toIndex),null!==e.textContent&&(t.textContent=e.textContent),null!==e.markupIndex&&(t.markup=o[1][e.markupIndex]),p._recordWrite(e.parentID,e.type,l,t)}):p._recordWrite(o[0],t,l,Array.prototype.slice.call(o,1));return u}if("ReactCompositeComponent"!==e||"mountComponent"!==t&&"updateComponent"!==t&&"_renderValidatedComponent"!==t)return n.apply(this,o);if("string"==typeof this._currentElement.type)return n.apply(this,o);var f="mountComponent"===t?o[0]:this._rootNodeID,m="_renderValidatedComponent"===t,y="mountComponent"===t,g=p._mountStack,v=p._allMeasurements[p._allMeasurements.length-1];if(m?r(v.counts,f,1):y&&g.push(0),h=c(),u=n.apply(this,o),l=c()-h,m)r(v.render,f,l);else if(y){var b=g.pop();g[g.length-1]+=l,r(v.exclusive,f,l-b),r(v.inclusive,f,l)}else r(v.inclusive,f,l);return v.displayNames[f]={current:this.getName(),owner:this._currentElement._owner?this._currentElement._owner.getName():"<root>"},u}}};t.exports=p},{"./DOMProperty":157,"./ReactDefaultPerfAnalysis":208,"./ReactMount":223,"./ReactPerf":228,"./performanceNow":309}],208:[function(e,t,n){function o(e){for(var t=0,n=0;n<e.length;n++){var o=e[n];t+=o.totalTime}return t}function r(e){for(var t=[],n=0;n<e.length;n++){var o,r=e[n];for(o in r.writes)r.writes[o].forEach(function(e){t.push({id:o,type:p[e.type]||e.type,args:e.args})})}return t}function i(e){for(var t,n={},o=0;o<e.length;o++){var r=e[o],i=l({},r.exclusive,r.inclusive);for(var s in i)t=r.displayNames[s].current,n[t]=n[t]||{componentName:t,inclusive:0,exclusive:0,render:0,count:0},r.render[s]&&(n[t].render+=r.render[s]),r.exclusive[s]&&(n[t].exclusive+=r.exclusive[s]),r.inclusive[s]&&(n[t].inclusive+=r.inclusive[s]),r.counts[s]&&(n[t].count+=r.counts[s])}var a=[];for(t in n)n[t].exclusive>=c&&a.push(n[t]);return a.sort(function(e,t){return t.exclusive-e.exclusive}),a}function s(e,t){for(var n,o={},r=0;r<e.length;r++){var i,s=e[r],p=l({},s.exclusive,s.inclusive);t&&(i=a(s));for(var u in p)if(!t||i[u]){var h=s.displayNames[u];n=h.owner+" > "+h.current,o[n]=o[n]||{componentName:n,time:0,count:0},s.inclusive[u]&&(o[n].time+=s.inclusive[u]),s.counts[u]&&(o[n].count+=s.counts[u])}}var d=[];for(n in o)o[n].time>=c&&d.push(o[n]);return d.sort(function(e,t){return t.time-e.time}),d}function a(e){var t={},n=Object.keys(e.writes),o=l({},e.exclusive,e.inclusive);for(var r in o){for(var i=!1,s=0;s<n.length;s++)if(0===n[s].indexOf(r)){i=!0;break}!i&&e.counts[r]>0&&(t[r]=!0)}return t}var l=e("./Object.assign"),c=1.2,p={_mountImageIntoNode:"set innerHTML",INSERT_MARKUP:"set innerHTML",MOVE_EXISTING:"move",REMOVE_NODE:"remove",TEXT_CONTENT:"set textContent",updatePropertyByID:"update attribute",deletePropertyByID:"delete attribute",updateStylesByID:"update styles",updateInnerHTMLByID:"set innerHTML",dangerouslyReplaceNodeWithMarkupByID:"replace"},u={getExclusiveSummary:i,getInclusiveSummary:s,getDOMSummary:r,getTotalTime:o};t.exports=u},{"./Object.assign":175}],209:[function(e,t,n){(function(n){"use strict";function o(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:function(){return this._store?this._store[t]:null},set:function(e){"production"!==n.env.NODE_ENV?l(!1,"Don't set the %s property of the React element. Instead, specify the correct value when initially creating the element.",t):null,this._store[t]=e}})}function r(e){try{var t={props:!0};for(var n in t)o(e,n);p=!0}catch(r){}}var i=e("./ReactContext"),s=e("./ReactCurrentOwner"),a=e("./Object.assign"),l=e("./warning"),c={key:!0,ref:!0},p=!1,u=function(e,t,o,r,i,s){if(this.type=e,this.key=t,this.ref=o,this._owner=r,this._context=i,"production"!==n.env.NODE_ENV){this._store={props:s,originalProps:a({},s)};try{Object.defineProperty(this._store,"validated",{configurable:!1,enumerable:!1,writable:!0})}catch(l){}if(this._store.validated=!1,p)return void Object.freeze(this)}this.props=s};u.prototype={_isReactElement:!0},"production"!==n.env.NODE_ENV&&r(u.prototype),u.createElement=function(e,t,n){var o,r={},a=null,l=null;if(null!=t){l=void 0===t.ref?null:t.ref,a=void 0===t.key?null:""+t.key;for(o in t)t.hasOwnProperty(o)&&!c.hasOwnProperty(o)&&(r[o]=t[o])}var p=arguments.length-2;if(1===p)r.children=n;else if(p>1){for(var h=Array(p),d=0;p>d;d++)h[d]=arguments[d+2];r.children=h}if(e&&e.defaultProps){var f=e.defaultProps;for(o in f)"undefined"==typeof r[o]&&(r[o]=f[o])}return new u(e,a,l,s.current,i.current,r)},u.createFactory=function(e){var t=u.createElement.bind(null,e);return t.type=e,t},u.cloneAndReplaceProps=function(e,t){var o=new u(e.type,e.key,e.ref,e._owner,e._context,t);return"production"!==n.env.NODE_ENV&&(o._store.validated=e._store.validated),o},u.cloneElement=function(e,t,n){var o,r=a({},e.props),i=e.key,l=e.ref,p=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,p=s.current),void 0!==t.key&&(i=""+t.key);for(o in t)t.hasOwnProperty(o)&&!c.hasOwnProperty(o)&&(r[o]=t[o])}var h=arguments.length-2;if(1===h)r.children=n;else if(h>1){for(var d=Array(h),f=0;h>f;f++)d[f]=arguments[f+2];r.children=d}return new u(e.type,i,l,p,e._context,r)},u.isValidElement=function(e){var t=!(!e||!e._isReactElement);return t},t.exports=u}).call(this,e("_process"))},{"./Object.assign":175,"./ReactContext":190,"./ReactCurrentOwner":191,"./warning":318,_process:1}],210:[function(e,t,n){(function(n){"use strict";function o(){if(b.current){var e=b.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function r(e){var t=e&&e.getPublicInstance();if(!t)return void 0;var n=t.constructor;return n?n.displayName||n.name||void 0:void 0}function i(){var e=b.current;return e&&r(e)||void 0}function s(e,t){e._store.validated||null!=e.key||(e._store.validated=!0,l('Each child in an array or iterator should have a unique "key" prop.',e,t))}function a(e,t,n){w.test(e)&&l("Child objects should have non-numeric keys so ordering is preserved.",t,n)}function l(e,t,o){var s=i(),a="string"==typeof o?o:o.displayName||o.name,l=s||a,c=_[e]||(_[e]={});if(!c.hasOwnProperty(l)){c[l]=!0;var p=s?" Check the render method of "+s+".":a?" Check the React.render call using <"+a+">.":"",u="";if(t&&t._owner&&t._owner!==b.current){var h=r(t._owner);u=" It was passed a child from "+h+"."}"production"!==n.env.NODE_ENV?C(!1,e+"%s%s See https://fb.me/react-warning-keys for more information.",p,u):null}}function c(e,t){if(Array.isArray(e))for(var n=0;n<e.length;n++){var o=e[n];m.isValidElement(o)&&s(o,t)}else if(m.isValidElement(e))e._store.validated=!0;else if(e){var r=x(e);if(r){if(r!==e.entries)for(var i,l=r.call(e);!(i=l.next()).done;)m.isValidElement(i.value)&&s(i.value,t)}else if("object"==typeof e){var c=y.extractIfFragment(e);for(var p in c)c.hasOwnProperty(p)&&a(p,c[p],t)}}}function p(e,t,r,i){for(var s in t)if(t.hasOwnProperty(s)){var a;try{"production"!==n.env.NODE_ENV?E("function"==typeof t[s],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",e||"React class",v[i],s):E("function"==typeof t[s]),a=t[s](r,s,e,i)}catch(l){a=l}if(a instanceof Error&&!(a.message in P)){P[a.message]=!0;var c=o(this);"production"!==n.env.NODE_ENV?C(!1,"Failed propType: %s%s",a.message,c):null}}}function u(e,t){var o=t.type,r="string"==typeof o?o:o.displayName,i=t._owner?t._owner.getPublicInstance().constructor.displayName:null,s=e+"|"+r+"|"+i;if(!D.hasOwnProperty(s)){D[s]=!0;var a="";r&&(a=" <"+r+" />");var l="";i&&(l=" The element was created by "+i+"."),"production"!==n.env.NODE_ENV?C(!1,"Don't set .props.%s of the React component%s. Instead, specify the correct value when initially creating the element or use React.cloneElement to make a new element with updated props.%s",e,a,l):null}}function h(e,t){return e!==e?t!==t:0===e&&0===t?1/e===1/t:e===t}function d(e){if(e._store){var t=e._store.originalProps,n=e.props;for(var o in n)n.hasOwnProperty(o)&&(t.hasOwnProperty(o)&&h(t[o],n[o])||(u(o,e),t[o]=n[o]))}}function f(e){if(null!=e.type){var t=T.getComponentClassForElement(e),o=t.displayName||t.name;t.propTypes&&p(o,t.propTypes,e.props,g.prop),"function"==typeof t.getDefaultProps&&("production"!==n.env.NODE_ENV?C(t.getDefaultProps.isReactClassApproved,"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead."):null)}}var m=e("./ReactElement"),y=e("./ReactFragment"),g=e("./ReactPropTypeLocations"),v=e("./ReactPropTypeLocationNames"),b=e("./ReactCurrentOwner"),T=e("./ReactNativeComponent"),x=e("./getIteratorFn"),E=e("./invariant"),C=e("./warning"),_={},P={},w=/^\d+$/,D={},S={checkAndWarnForMutatedProps:d,createElement:function(e,t,o){"production"!==n.env.NODE_ENV?C(null!=e,"React.createElement: type should not be null or undefined. It should be a string (for DOM elements) or a ReactClass (for composite components)."):null;var r=m.createElement.apply(this,arguments);if(null==r)return r;for(var i=2;i<arguments.length;i++)c(arguments[i],e);return f(r),r},createFactory:function(e){var t=S.createElement.bind(null,e);if(t.type=e,"production"!==n.env.NODE_ENV)try{Object.defineProperty(t,"type",{enumerable:!1,get:function(){return"production"!==n.env.NODE_ENV?C(!1,"Factory.type is deprecated. Access the class directly before passing it to createFactory."):null,Object.defineProperty(this,"type",{value:e}),e}})}catch(o){}return t},cloneElement:function(e,t,n){for(var o=m.cloneElement.apply(this,arguments),r=2;r<arguments.length;r++)c(arguments[r],o.type);return f(o),o}};t.exports=S}).call(this,e("_process"))},{"./ReactCurrentOwner":191,"./ReactElement":209,"./ReactFragment":215,"./ReactNativeComponent":226,"./ReactPropTypeLocationNames":230,"./ReactPropTypeLocations":231,"./getIteratorFn":288,"./invariant":297,"./warning":318,_process:1}],211:[function(e,t,n){(function(n){"use strict";function o(e){p[e]=!0}function r(e){delete p[e]}function i(e){return!!p[e]}var s,a=e("./ReactElement"),l=e("./ReactInstanceMap"),c=e("./invariant"),p={},u={injectEmptyComponent:function(e){s=a.createFactory(e)}},h=function(){};h.prototype.componentDidMount=function(){var e=l.get(this);e&&o(e._rootNodeID)},h.prototype.componentWillUnmount=function(){var e=l.get(this);e&&r(e._rootNodeID)},h.prototype.render=function(){return"production"!==n.env.NODE_ENV?c(s,"Trying to return null from a render, but no null placeholder component was injected."):c(s),s()};var d=a.createElement(h),f={emptyElement:d,injection:u,isNullComponentID:i};t.exports=f}).call(this,e("_process"))},{"./ReactElement":209,"./ReactInstanceMap":219,"./invariant":297,_process:1}],212:[function(e,t,n){"use strict";var o={guard:function(e,t){return e}};t.exports=o},{}],213:[function(e,t,n){"use strict";function o(e){r.enqueueEvents(e),r.processEventQueue()}var r=e("./EventPluginHub"),i={handleTopLevel:function(e,t,n,i){var s=r.extractEvents(e,t,n,i);o(s)}};t.exports=i},{"./EventPluginHub":164}],214:[function(e,t,n){"use strict";function o(e){var t=u.getID(e),n=p.getReactRootIDFromNodeID(t),o=u.findReactContainerForID(n),r=u.getFirstReactDOM(o);return r}function r(e,t){this.topLevelType=e,this.nativeEvent=t,this.ancestors=[]}function i(e){for(var t=u.getFirstReactDOM(f(e.nativeEvent))||window,n=t;n;)e.ancestors.push(n),n=o(n);for(var r=0,i=e.ancestors.length;i>r;r++){t=e.ancestors[r];var s=u.getID(t)||"";y._handleTopLevel(e.topLevelType,t,s,e.nativeEvent)}}function s(e){var t=m(window);e(t)}var a=e("./EventListener"),l=e("./ExecutionEnvironment"),c=e("./PooledClass"),p=e("./ReactInstanceHandles"),u=e("./ReactMount"),h=e("./ReactUpdates"),d=e("./Object.assign"),f=e("./getEventTarget"),m=e("./getUnboundedScrollPosition");d(r.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),c.addPoolingTo(r,c.twoArgumentPooler);var y={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:l.canUseDOM?window:null,setHandleTopLevel:function(e){y._handleTopLevel=e},setEnabled:function(e){y._enabled=!!e},isEnabled:function(){return y._enabled},trapBubbledEvent:function(e,t,n){var o=n;return o?a.listen(o,t,y.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,t,n){var o=n;return o?a.capture(o,t,y.dispatchEvent.bind(null,e)):null},monitorScrollValue:function(e){var t=s.bind(null,e);a.listen(window,"scroll",t)},dispatchEvent:function(e,t){if(y._enabled){var n=r.getPooled(e,t);try{h.batchedUpdates(i,n)}finally{r.release(n)}}}};t.exports=y},{"./EventListener":163,"./ExecutionEnvironment":168,"./Object.assign":175,"./PooledClass":176,"./ReactInstanceHandles":218,"./ReactMount":223,"./ReactUpdates":246,"./getEventTarget":287,"./getUnboundedScrollPosition":293}],215:[function(e,t,n){(function(n){"use strict";var o=e("./ReactElement"),r=e("./warning");if("production"!==n.env.NODE_ENV){var i="_reactFragment",s="_reactDidWarn",a=!1;try{var l=function(){return 1};Object.defineProperty({},i,{enumerable:!1,value:!0}),Object.defineProperty({},"key",{enumerable:!0,get:l}),a=!0}catch(c){}var p=function(e,t){Object.defineProperty(e,t,{enumerable:!0,get:function(){return"production"!==n.env.NODE_ENV?r(this[s],"A ReactFragment is an opaque type. Accessing any of its properties is deprecated. Pass it to one of the React.Children helpers."):null,this[s]=!0,this[i][t]},set:function(e){"production"!==n.env.NODE_ENV?r(this[s],"A ReactFragment is an immutable opaque type. Mutating its properties is deprecated."):null,this[s]=!0,this[i][t]=e}})},u={},h=function(e){var t="";for(var n in e)t+=n+":"+typeof e[n]+",";var o=!!u[t];return u[t]=!0,o}}var d={create:function(e){if("production"!==n.env.NODE_ENV){if("object"!=typeof e||!e||Array.isArray(e))return"production"!==n.env.NODE_ENV?r(!1,"React.addons.createFragment only accepts a single object.",e):null,e;if(o.isValidElement(e))return"production"!==n.env.NODE_ENV?r(!1,"React.addons.createFragment does not accept a ReactElement without a wrapper object."):null,e;if(a){var t={};Object.defineProperty(t,i,{enumerable:!1,value:e}),Object.defineProperty(t,s,{writable:!0,enumerable:!1,value:!1});for(var l in e)p(t,l);return Object.preventExtensions(t),t}}return e},extract:function(e){return"production"!==n.env.NODE_ENV&&a?e[i]?e[i]:("production"!==n.env.NODE_ENV?r(h(e),"Any use of a keyed object should be wrapped in React.addons.createFragment(object) before being passed as a child."):null,e):e},extractIfFragment:function(e){if("production"!==n.env.NODE_ENV&&a){if(e[i])return e[i];for(var t in e)if(e.hasOwnProperty(t)&&o.isValidElement(e[t]))return d.extract(e)}return e}};t.exports=d}).call(this,e("_process"))},{"./ReactElement":209,"./warning":318,_process:1}],216:[function(e,t,n){"use strict";var o=e("./DOMProperty"),r=e("./EventPluginHub"),i=e("./ReactComponentEnvironment"),s=e("./ReactClass"),a=e("./ReactEmptyComponent"),l=e("./ReactBrowserEventEmitter"),c=e("./ReactNativeComponent"),p=e("./ReactDOMComponent"),u=e("./ReactPerf"),h=e("./ReactRootIndex"),d=e("./ReactUpdates"),f={Component:i.injection,Class:s.injection,DOMComponent:p.injection,DOMProperty:o.injection,EmptyComponent:a.injection,EventPluginHub:r.injection,EventEmitter:l.injection,NativeComponent:c.injection,Perf:u.injection,RootIndex:h.injection,Updates:d.injection};t.exports=f},{"./DOMProperty":157,"./EventPluginHub":164,"./ReactBrowserEventEmitter":179,"./ReactClass":184,"./ReactComponentEnvironment":187,"./ReactDOMComponent":194,"./ReactEmptyComponent":211,"./ReactNativeComponent":226,"./ReactPerf":228,"./ReactRootIndex":237,"./ReactUpdates":246}],217:[function(e,t,n){"use strict";function o(e){return i(document.documentElement,e)}var r=e("./ReactDOMSelection"),i=e("./containsNode"),s=e("./focusNode"),a=e("./getActiveElement"),l={hasSelectionCapabilities:function(e){return e&&("INPUT"===e.nodeName&&"text"===e.type||"TEXTAREA"===e.nodeName||"true"===e.contentEditable)},getSelectionInformation:function(){var e=a();return{focusedElem:e,selectionRange:l.hasSelectionCapabilities(e)?l.getSelection(e):null}},restoreSelection:function(e){var t=a(),n=e.focusedElem,r=e.selectionRange;t!==n&&o(n)&&(l.hasSelectionCapabilities(n)&&l.setSelection(n,r),s(n))},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&"INPUT"===e.nodeName){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=r.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,o=t.end;if("undefined"==typeof o&&(o=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(o,e.value.length);else if(document.selection&&"INPUT"===e.nodeName){var i=e.createTextRange();i.collapse(!0),i.moveStart("character",n),i.moveEnd("character",o-n),i.select()}else r.setOffsets(e,t)}};t.exports=l},{"./ReactDOMSelection":202,"./containsNode":270,"./focusNode":281,"./getActiveElement":283}],218:[function(e,t,n){(function(n){"use strict";function o(e){return d+e.toString(36)}function r(e,t){return e.charAt(t)===d||t===e.length}function i(e){return""===e||e.charAt(0)===d&&e.charAt(e.length-1)!==d}function s(e,t){return 0===t.indexOf(e)&&r(t,e.length)}function a(e){return e?e.substr(0,e.lastIndexOf(d)):""}function l(e,t){if("production"!==n.env.NODE_ENV?h(i(e)&&i(t),"getNextDescendantID(%s, %s): Received an invalid React DOM ID.",e,t):h(i(e)&&i(t)),"production"!==n.env.NODE_ENV?h(s(e,t),"getNextDescendantID(...): React has made an invalid assumption about the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.",e,t):h(s(e,t)),e===t)return e;var o,a=e.length+f;for(o=a;o<t.length&&!r(t,o);o++);return t.substr(0,o)}function c(e,t){var o=Math.min(e.length,t.length);if(0===o)return"";for(var s=0,a=0;o>=a;a++)if(r(e,a)&&r(t,a))s=a;else if(e.charAt(a)!==t.charAt(a))break;var l=e.substr(0,s);return"production"!==n.env.NODE_ENV?h(i(l),"getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s",e,t,l):h(i(l)),l}function p(e,t,o,r,i,c){e=e||"",t=t||"","production"!==n.env.NODE_ENV?h(e!==t,"traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.",e):h(e!==t);var p=s(t,e);"production"!==n.env.NODE_ENV?h(p||s(e,t),"traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do not have a parent path.",e,t):h(p||s(e,t));for(var u=0,d=p?a:l,f=e;;f=d(f,t)){var y;if(i&&f===e||c&&f===t||(y=o(f,p,r)),y===!1||f===t)break;"production"!==n.env.NODE_ENV?h(u++<m,"traverseParentPath(%s, %s, ...): Detected an infinite loop while traversing the React DOM ID tree. This may be due to malformed IDs: %s",e,t):h(u++<m)}}var u=e("./ReactRootIndex"),h=e("./invariant"),d=".",f=d.length,m=100,y={createReactRootID:function(){return o(u.createReactRootIndex())},createReactID:function(e,t){return e+t},getReactRootIDFromNodeID:function(e){if(e&&e.charAt(0)===d&&e.length>1){var t=e.indexOf(d,1);return t>-1?e.substr(0,t):e}return null},traverseEnterLeave:function(e,t,n,o,r){var i=c(e,t);i!==e&&p(e,i,n,o,!1,!0),i!==t&&p(i,t,n,r,!0,!1)},traverseTwoPhase:function(e,t,n){e&&(p("",e,t,n,!0,!1),p(e,"",t,n,!1,!0))},traverseAncestors:function(e,t,n){p("",e,t,n,!0,!1)},_getFirstCommonAncestorID:c,_getNextDescendantID:l,isAncestorIDOf:s,SEPARATOR:d};t.exports=y}).call(this,e("_process"))},{"./ReactRootIndex":237,"./invariant":297,_process:1}],219:[function(e,t,n){"use strict";var o={remove:function(e){e._reactInternalInstance=void 0},get:function(e){return e._reactInternalInstance},has:function(e){return void 0!==e._reactInternalInstance},set:function(e,t){e._reactInternalInstance=t}};t.exports=o},{}],220:[function(e,t,n){"use strict";var o={currentlyMountingInstance:null,currentlyUnmountingInstance:null};t.exports=o},{}],221:[function(e,t,n){"use strict";function o(e,t){this.value=e,this.requestChange=t}function r(e){var t={value:"undefined"==typeof e?i.PropTypes.any.isRequired:e.isRequired,requestChange:i.PropTypes.func.isRequired};return i.PropTypes.shape(t)}var i=e("./React");o.PropTypes={link:r},t.exports=o},{"./React":177}],222:[function(e,t,n){"use strict";var o=e("./adler32"),r={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var t=o(e);return e.replace(">"," "+r.CHECKSUM_ATTR_NAME+'="'+t+'">')},canReuseMarkup:function(e,t){var n=t.getAttribute(r.CHECKSUM_ATTR_NAME);n=n&&parseInt(n,10);var i=o(e);return i===n}};t.exports=r},{"./adler32":266}],223:[function(e,t,n){(function(n){"use strict";function o(e,t){for(var n=Math.min(e.length,t.length),o=0;n>o;o++)if(e.charAt(o)!==t.charAt(o))return o;return e.length===t.length?-1:n}function r(e){var t=N(e);return t&&q.getID(t)}function i(e){var t=s(e);if(t)if(B.hasOwnProperty(t)){var o=B[t];o!==e&&("production"!==n.env.NODE_ENV?k(!p(o,t),"ReactMount: Two valid but unequal nodes with the same `%s`: %s",F,t):k(!p(o,t)),B[t]=e)}else B[t]=e;return t}function s(e){return e&&e.getAttribute&&e.getAttribute(F)||""}function a(e,t){var n=s(e);n!==t&&delete B[n],e.setAttribute(F,t),B[t]=e}function l(e){return B.hasOwnProperty(e)&&p(B[e],e)||(B[e]=q.findReactNodeByID(e)),B[e]}function c(e){var t=C.get(e)._rootNodeID;return x.isNullComponentID(t)?null:(B.hasOwnProperty(t)&&p(B[t],t)||(B[t]=q.findReactNodeByID(t)),B[t])}function p(e,t){if(e){"production"!==n.env.NODE_ENV?k(s(e)===t,"ReactMount: Unexpected modification of `%s`",F):k(s(e)===t);var o=q.findReactContainerForID(t);if(o&&M(o,e))return!0}return!1}function u(e){delete B[e]}function h(e){var t=B[e];return t&&p(t,e)?void(Y=t):!1}function d(e){Y=null,E.traverseAncestors(e,h);var t=Y;return Y=null,t}function f(e,t,n,o,r){var i=w.mountComponent(e,t,o,O);e._isTopLevel=!0,q._mountImageIntoNode(i,n,r)}function m(e,t,n,o){var r=S.ReactReconcileTransaction.getPooled();r.perform(f,null,e,t,n,r,o),S.ReactReconcileTransaction.release(r)}var y=e("./DOMProperty"),g=e("./ReactBrowserEventEmitter"),v=e("./ReactCurrentOwner"),b=e("./ReactElement"),T=e("./ReactElementValidator"),x=e("./ReactEmptyComponent"),E=e("./ReactInstanceHandles"),C=e("./ReactInstanceMap"),_=e("./ReactMarkupChecksum"),P=e("./ReactPerf"),w=e("./ReactReconciler"),D=e("./ReactUpdateQueue"),S=e("./ReactUpdates"),O=e("./emptyObject"),M=e("./containsNode"),N=e("./getReactRootElementInContainer"),R=e("./instantiateReactComponent"),k=e("./invariant"),I=e("./setInnerHTML"),A=e("./shouldUpdateReactComponent"),L=e("./warning"),j=E.SEPARATOR,F=y.ID_ATTRIBUTE_NAME,B={},V=1,U=9,W={},H={};if("production"!==n.env.NODE_ENV)var z={};var K=[],Y=null,q={_instancesByReactRootID:W,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,o,i){return"production"!==n.env.NODE_ENV&&T.checkAndWarnForMutatedProps(t),q.scrollMonitor(o,function(){D.enqueueElementInternal(e,t),i&&D.enqueueCallbackInternal(e,i)}),"production"!==n.env.NODE_ENV&&(z[r(o)]=N(o)),e},_registerComponent:function(e,t){"production"!==n.env.NODE_ENV?k(t&&(t.nodeType===V||t.nodeType===U),"_registerComponent(...): Target container is not a DOM element."):k(t&&(t.nodeType===V||t.nodeType===U)),g.ensureScrollValueMonitoring();var o=q.registerContainer(t);return W[o]=e,o},_renderNewRootComponent:function(e,t,o){"production"!==n.env.NODE_ENV?L(null==v.current,"_renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null;var r=R(e,null),i=q._registerComponent(r,t);return S.batchedUpdates(m,r,i,t,o),"production"!==n.env.NODE_ENV&&(z[i]=N(t)),r},render:function(e,t,o){"production"!==n.env.NODE_ENV?k(b.isValidElement(e),"React.render(): Invalid component element.%s","string"==typeof e?" Instead of passing an element string, make sure to instantiate it by passing it to React.createElement.":"function"==typeof e?" Instead of passing a component class, make sure to instantiate it by passing it to React.createElement.":null!=e&&void 0!==e.props?" This may be caused by unintentionally loading two independent copies of React.":""):k(b.isValidElement(e));var i=W[r(t)];if(i){var s=i._currentElement;if(A(s,e))return q._updateRootComponent(i,e,t,o).getPublicInstance();q.unmountComponentAtNode(t)}var a=N(t),l=a&&q.isRenderedByReact(a);if("production"!==n.env.NODE_ENV&&(!l||a.nextSibling))for(var c=a;c;){if(q.isRenderedByReact(c)){"production"!==n.env.NODE_ENV?L(!1,"render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup."):null;break}c=c.nextSibling}var p=l&&!i,u=q._renderNewRootComponent(e,t,p).getPublicInstance();return o&&o.call(u),u},constructAndRenderComponent:function(e,t,n){var o=b.createElement(e,t);return q.render(o,n)},constructAndRenderComponentByID:function(e,t,o){var r=document.getElementById(o);return"production"!==n.env.NODE_ENV?k(r,'Tried to get element with id of "%s" but it is not present on the page.',o):k(r),q.constructAndRenderComponent(e,t,r)},registerContainer:function(e){var t=r(e);return t&&(t=E.getReactRootIDFromNodeID(t)),t||(t=E.createReactRootID()),H[t]=e,t},unmountComponentAtNode:function(e){"production"!==n.env.NODE_ENV?L(null==v.current,"unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null,"production"!==n.env.NODE_ENV?k(e&&(e.nodeType===V||e.nodeType===U),"unmountComponentAtNode(...): Target container is not a DOM element."):k(e&&(e.nodeType===V||e.nodeType===U));var t=r(e),o=W[t];return o?(q.unmountComponentFromNode(o,e),delete W[t],delete H[t],"production"!==n.env.NODE_ENV&&delete z[t],!0):!1},unmountComponentFromNode:function(e,t){for(w.unmountComponent(e),t.nodeType===U&&(t=t.documentElement);t.lastChild;)t.removeChild(t.lastChild)},findReactContainerForID:function(e){var t=E.getReactRootIDFromNodeID(e),o=H[t];if("production"!==n.env.NODE_ENV){var r=z[t];if(r&&r.parentNode!==o){"production"!==n.env.NODE_ENV?k(s(r)===t,"ReactMount: Root element ID differed from reactRootID."):k(s(r)===t);var i=o.firstChild;i&&t===s(i)?z[t]=i:"production"!==n.env.NODE_ENV?L(!1,"ReactMount: Root element has been removed from its original container. New container:",r.parentNode):null}}return o},findReactNodeByID:function(e){var t=q.findReactContainerForID(e);return q.findComponentRoot(t,e)},isRenderedByReact:function(e){if(1!==e.nodeType)return!1;var t=q.getID(e);return t?t.charAt(0)===j:!1},getFirstReactDOM:function(e){for(var t=e;t&&t.parentNode!==t;){if(q.isRenderedByReact(t))return t;t=t.parentNode}return null},findComponentRoot:function(e,t){var o=K,r=0,i=d(t)||e;for(o[0]=i.firstChild,o.length=1;r<o.length;){for(var s,a=o[r++];a;){var l=q.getID(a);l?t===l?s=a:E.isAncestorIDOf(l,t)&&(o.length=r=0,o.push(a.firstChild)):o.push(a.firstChild),a=a.nextSibling}if(s)return o.length=0,s}o.length=0,"production"!==n.env.NODE_ENV?k(!1,"findComponentRoot(..., %s): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",t,q.getID(e)):k(!1)},_mountImageIntoNode:function(e,t,r){if("production"!==n.env.NODE_ENV?k(t&&(t.nodeType===V||t.nodeType===U),"mountComponentIntoNode(...): Target container is not valid."):k(t&&(t.nodeType===V||t.nodeType===U)),r){var i=N(t);if(_.canReuseMarkup(e,i))return;var s=i.getAttribute(_.CHECKSUM_ATTR_NAME);i.removeAttribute(_.CHECKSUM_ATTR_NAME);var a=i.outerHTML;i.setAttribute(_.CHECKSUM_ATTR_NAME,s);var l=o(e,a),c=" (client) "+e.substring(l-20,l+20)+"\n (server) "+a.substring(l-20,l+20);"production"!==n.env.NODE_ENV?k(t.nodeType!==U,"You're trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s",c):k(t.nodeType!==U),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?L(!1,"React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n%s",c):null)}"production"!==n.env.NODE_ENV?k(t.nodeType!==U,"You're trying to render a component to the document but you didn't use server rendering. We can't do this without using server rendering due to cross-browser quirks. See React.renderToString() for server rendering."):k(t.nodeType!==U),I(t,e)},getReactRootID:r,getID:i,setID:a,getNode:l,getNodeFromInstance:c,purgeID:u};P.measureMethods(q,"ReactMount",{_renderNewRootComponent:"_renderNewRootComponent",_mountImageIntoNode:"_mountImageIntoNode"}),t.exports=q}).call(this,e("_process"))},{"./DOMProperty":157,"./ReactBrowserEventEmitter":179,"./ReactCurrentOwner":191,"./ReactElement":209,"./ReactElementValidator":210,"./ReactEmptyComponent":211,"./ReactInstanceHandles":218,"./ReactInstanceMap":219,"./ReactMarkupChecksum":222,"./ReactPerf":228,"./ReactReconciler":235,"./ReactUpdateQueue":245,"./ReactUpdates":246,"./containsNode":270,"./emptyObject":277,"./getReactRootElementInContainer":291,"./instantiateReactComponent":296,"./invariant":297,"./setInnerHTML":311,"./shouldUpdateReactComponent":314,"./warning":318,_process:1}],224:[function(e,t,n){"use strict";function o(e,t,n){f.push({parentID:e,parentNode:null,type:p.INSERT_MARKUP,markupIndex:m.push(t)-1,textContent:null,fromIndex:null,toIndex:n})}function r(e,t,n){f.push({parentID:e,parentNode:null,type:p.MOVE_EXISTING,markupIndex:null,textContent:null,fromIndex:t,toIndex:n})}function i(e,t){f.push({parentID:e,parentNode:null,type:p.REMOVE_NODE,markupIndex:null,textContent:null,fromIndex:t,toIndex:null})}function s(e,t){f.push({parentID:e,parentNode:null,type:p.TEXT_CONTENT,markupIndex:null,textContent:t,fromIndex:null,toIndex:null})}function a(){f.length&&(c.processChildrenUpdates(f,m),l())}function l(){f.length=0,m.length=0}var c=e("./ReactComponentEnvironment"),p=e("./ReactMultiChildUpdateTypes"),u=e("./ReactReconciler"),h=e("./ReactChildReconciler"),d=0,f=[],m=[],y={Mixin:{mountChildren:function(e,t,n){var o=h.instantiateChildren(e,t,n);this._renderedChildren=o;var r=[],i=0;for(var s in o)if(o.hasOwnProperty(s)){var a=o[s],l=this._rootNodeID+s,c=u.mountComponent(a,l,t,n);a._mountIndex=i,r.push(c),i++}return r},updateTextContent:function(e){d++;var t=!0;try{var n=this._renderedChildren;h.unmountChildren(n);for(var o in n)n.hasOwnProperty(o)&&this._unmountChildByName(n[o],o);this.setTextContent(e),t=!1}finally{d--,d||(t?l():a())}},updateChildren:function(e,t,n){d++;var o=!0;try{this._updateChildren(e,t,n),o=!1}finally{d--,d||(o?l():a())}},_updateChildren:function(e,t,n){var o=this._renderedChildren,r=h.updateChildren(o,e,t,n);if(this._renderedChildren=r,r||o){var i,s=0,a=0;for(i in r)if(r.hasOwnProperty(i)){var l=o&&o[i],c=r[i];l===c?(this.moveChild(l,a,s),s=Math.max(l._mountIndex,s),l._mountIndex=a):(l&&(s=Math.max(l._mountIndex,s),this._unmountChildByName(l,i)),this._mountChildByNameAtIndex(c,i,a,t,n)),a++}for(i in o)!o.hasOwnProperty(i)||r&&r.hasOwnProperty(i)||this._unmountChildByName(o[i],i)}},unmountChildren:function(){var e=this._renderedChildren;

h.unmountChildren(e),this._renderedChildren=null},moveChild:function(e,t,n){e._mountIndex<n&&r(this._rootNodeID,e._mountIndex,t)},createChild:function(e,t){o(this._rootNodeID,t,e._mountIndex)},removeChild:function(e){i(this._rootNodeID,e._mountIndex)},setTextContent:function(e){s(this._rootNodeID,e)},_mountChildByNameAtIndex:function(e,t,n,o,r){var i=this._rootNodeID+t,s=u.mountComponent(e,i,o,r);e._mountIndex=n,this.createChild(e,s)},_unmountChildByName:function(e,t){this.removeChild(e),e._mountIndex=null}}};t.exports=y},{"./ReactChildReconciler":182,"./ReactComponentEnvironment":187,"./ReactMultiChildUpdateTypes":225,"./ReactReconciler":235}],225:[function(e,t,n){"use strict";var o=e("./keyMirror"),r=o({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,TEXT_CONTENT:null});t.exports=r},{"./keyMirror":303}],226:[function(e,t,n){(function(n){"use strict";function o(e){if("function"==typeof e.type)return e.type;var t=e.type,n=u[t];return null==n&&(u[t]=n=c(t)),n}function r(e){return"production"!==n.env.NODE_ENV?l(p,"There is no registered component for the tag %s",e.type):l(p),new p(e.type,e.props)}function i(e){return new h(e)}function s(e){return e instanceof h}var a=e("./Object.assign"),l=e("./invariant"),c=null,p=null,u={},h=null,d={injectGenericComponentClass:function(e){p=e},injectTextComponentClass:function(e){h=e},injectComponentClasses:function(e){a(u,e)},injectAutoWrapper:function(e){c=e}},f={getComponentClassForElement:o,createInternalComponent:r,createInstanceForText:i,isTextComponent:s,injection:d};t.exports=f}).call(this,e("_process"))},{"./Object.assign":175,"./invariant":297,_process:1}],227:[function(e,t,n){(function(n){"use strict";var o=e("./invariant"),r={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,t,i){"production"!==n.env.NODE_ENV?o(r.isValidOwner(i),"addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):o(r.isValidOwner(i)),i.attachRef(t,e)},removeComponentAsRefFrom:function(e,t,i){"production"!==n.env.NODE_ENV?o(r.isValidOwner(i),"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This usually means that you're trying to remove a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):o(r.isValidOwner(i)),i.getPublicInstance().refs[t]===e.getPublicInstance()&&i.detachRef(t)}};t.exports=r}).call(this,e("_process"))},{"./invariant":297,_process:1}],228:[function(e,t,n){(function(e){"use strict";function n(e,t,n){return n}var o={enableMeasure:!1,storedMeasure:n,measureMethods:function(t,n,r){if("production"!==e.env.NODE_ENV)for(var i in r)r.hasOwnProperty(i)&&(t[i]=o.measure(n,r[i],t[i]))},measure:function(t,n,r){if("production"!==e.env.NODE_ENV){var i=null,s=function(){return o.enableMeasure?(i||(i=o.storedMeasure(t,n,r)),i.apply(this,arguments)):r.apply(this,arguments)};return s.displayName=t+"_"+n,s}return r},injection:{injectMeasure:function(e){o.storedMeasure=e}}};t.exports=o}).call(this,e("_process"))},{_process:1}],229:[function(e,t,n){"use strict";function o(e){return function(t,n,o){t[n]=t.hasOwnProperty(n)?e(t[n],o):o}}function r(e,t){for(var n in t)if(t.hasOwnProperty(n)){var o=c[n];o&&c.hasOwnProperty(n)?o(e,n,t[n]):e.hasOwnProperty(n)||(e[n]=t[n])}return e}var i=e("./Object.assign"),s=e("./emptyFunction"),a=e("./joinClasses"),l=o(function(e,t){return i({},t,e)}),c={children:s,className:o(a),style:l},p={mergeProps:function(e,t){return r(i({},e),t)}};t.exports=p},{"./Object.assign":175,"./emptyFunction":276,"./joinClasses":302}],230:[function(e,t,n){(function(e){"use strict";var n={};"production"!==e.env.NODE_ENV&&(n={prop:"prop",context:"context",childContext:"child context"}),t.exports=n}).call(this,e("_process"))},{_process:1}],231:[function(e,t,n){"use strict";var o=e("./keyMirror"),r=o({prop:null,context:null,childContext:null});t.exports=r},{"./keyMirror":303}],232:[function(e,t,n){"use strict";function o(e){function t(t,n,o,r,i){if(r=r||x,null==n[o]){var s=b[i];return t?new Error("Required "+s+" `"+o+"` was not specified in "+("`"+r+"`.")):null}return e(n,o,r,i)}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function r(e){function t(t,n,o,r){var i=t[n],s=m(i);if(s!==e){var a=b[r],l=y(i);return new Error("Invalid "+a+" `"+n+"` of type `"+l+"` "+("supplied to `"+o+"`, expected `"+e+"`."))}return null}return o(t)}function i(){return o(T.thatReturns(null))}function s(e){function t(t,n,o,r){var i=t[n];if(!Array.isArray(i)){var s=b[r],a=m(i);return new Error("Invalid "+s+" `"+n+"` of type "+("`"+a+"` supplied to `"+o+"`, expected an array."))}for(var l=0;l<i.length;l++){var c=e(i,l,o,r);if(c instanceof Error)return c}return null}return o(t)}function a(){function e(e,t,n,o){if(!g.isValidElement(e[t])){var r=b[o];return new Error("Invalid "+r+" `"+t+"` supplied to "+("`"+n+"`, expected a ReactElement."))}return null}return o(e)}function l(e){function t(t,n,o,r){if(!(t[n]instanceof e)){var i=b[r],s=e.name||x;return new Error("Invalid "+i+" `"+n+"` supplied to "+("`"+o+"`, expected instance of `"+s+"`."))}return null}return o(t)}function c(e){function t(t,n,o,r){for(var i=t[n],s=0;s<e.length;s++)if(i===e[s])return null;var a=b[r],l=JSON.stringify(e);return new Error("Invalid "+a+" `"+n+"` of value `"+i+"` "+("supplied to `"+o+"`, expected one of "+l+"."))}return o(t)}function p(e){function t(t,n,o,r){var i=t[n],s=m(i);if("object"!==s){var a=b[r];return new Error("Invalid "+a+" `"+n+"` of type "+("`"+s+"` supplied to `"+o+"`, expected an object."))}for(var l in i)if(i.hasOwnProperty(l)){var c=e(i,l,o,r);if(c instanceof Error)return c}return null}return o(t)}function u(e){function t(t,n,o,r){for(var i=0;i<e.length;i++){var s=e[i];if(null==s(t,n,o,r))return null}var a=b[r];return new Error("Invalid "+a+" `"+n+"` supplied to "+("`"+o+"`."))}return o(t)}function h(){function e(e,t,n,o){if(!f(e[t])){var r=b[o];return new Error("Invalid "+r+" `"+t+"` supplied to "+("`"+n+"`, expected a ReactNode."))}return null}return o(e)}function d(e){function t(t,n,o,r){var i=t[n],s=m(i);if("object"!==s){var a=b[r];return new Error("Invalid "+a+" `"+n+"` of type `"+s+"` "+("supplied to `"+o+"`, expected `object`."))}for(var l in e){var c=e[l];if(c){var p=c(i,l,o,r);if(p)return p}}return null}return o(t)}function f(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(f);if(null===e||g.isValidElement(e))return!0;e=v.extractIfFragment(e);for(var t in e)if(!f(e[t]))return!1;return!0;default:return!1}}function m(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":t}function y(e){var t=m(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}var g=e("./ReactElement"),v=e("./ReactFragment"),b=e("./ReactPropTypeLocationNames"),T=e("./emptyFunction"),x="<<anonymous>>",E=a(),C=h(),_={array:r("array"),bool:r("boolean"),func:r("function"),number:r("number"),object:r("object"),string:r("string"),any:i(),arrayOf:s,element:E,instanceOf:l,node:C,objectOf:p,oneOf:c,oneOfType:u,shape:d};t.exports=_},{"./ReactElement":209,"./ReactFragment":215,"./ReactPropTypeLocationNames":230,"./emptyFunction":276}],233:[function(e,t,n){"use strict";function o(){this.listenersToPut=[]}var r=e("./PooledClass"),i=e("./ReactBrowserEventEmitter"),s=e("./Object.assign");s(o.prototype,{enqueuePutListener:function(e,t,n){this.listenersToPut.push({rootNodeID:e,propKey:t,propValue:n})},putListeners:function(){for(var e=0;e<this.listenersToPut.length;e++){var t=this.listenersToPut[e];i.putListener(t.rootNodeID,t.propKey,t.propValue)}},reset:function(){this.listenersToPut.length=0},destructor:function(){this.reset()}}),r.addPoolingTo(o),t.exports=o},{"./Object.assign":175,"./PooledClass":176,"./ReactBrowserEventEmitter":179}],234:[function(e,t,n){"use strict";function o(){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=r.getPooled(null),this.putListenerQueue=l.getPooled()}var r=e("./CallbackQueue"),i=e("./PooledClass"),s=e("./ReactBrowserEventEmitter"),a=e("./ReactInputSelection"),l=e("./ReactPutListenerQueue"),c=e("./Transaction"),p=e("./Object.assign"),u={initialize:a.getSelectionInformation,close:a.restoreSelection},h={initialize:function(){var e=s.isEnabled();return s.setEnabled(!1),e},close:function(e){s.setEnabled(e)}},d={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},f={initialize:function(){this.putListenerQueue.reset()},close:function(){this.putListenerQueue.putListeners()}},m=[f,u,h,d],y={getTransactionWrappers:function(){return m},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){r.release(this.reactMountReady),this.reactMountReady=null,l.release(this.putListenerQueue),this.putListenerQueue=null}};p(o.prototype,c.Mixin,y),i.addPoolingTo(o),t.exports=o},{"./CallbackQueue":153,"./Object.assign":175,"./PooledClass":176,"./ReactBrowserEventEmitter":179,"./ReactInputSelection":217,"./ReactPutListenerQueue":233,"./Transaction":263}],235:[function(e,t,n){(function(n){"use strict";function o(){r.attachRefs(this,this._currentElement)}var r=e("./ReactRef"),i=e("./ReactElementValidator"),s={mountComponent:function(e,t,r,s){var a=e.mountComponent(t,r,s);return"production"!==n.env.NODE_ENV&&i.checkAndWarnForMutatedProps(e._currentElement),r.getReactMountReady().enqueue(o,e),a},unmountComponent:function(e){r.detachRefs(e,e._currentElement),e.unmountComponent()},receiveComponent:function(e,t,s,a){var l=e._currentElement;if(t!==l||null==t._owner){"production"!==n.env.NODE_ENV&&i.checkAndWarnForMutatedProps(t);var c=r.shouldUpdateRefs(l,t);c&&r.detachRefs(e,l),e.receiveComponent(t,s,a),c&&s.getReactMountReady().enqueue(o,e)}},performUpdateIfNecessary:function(e,t){e.performUpdateIfNecessary(t)}};t.exports=s}).call(this,e("_process"))},{"./ReactElementValidator":210,"./ReactRef":236,_process:1}],236:[function(e,t,n){"use strict";function o(e,t,n){"function"==typeof e?e(t.getPublicInstance()):i.addComponentAsRefTo(t,e,n)}function r(e,t,n){"function"==typeof e?e(null):i.removeComponentAsRefFrom(t,e,n)}var i=e("./ReactOwner"),s={};s.attachRefs=function(e,t){var n=t.ref;null!=n&&o(n,e,t._owner)},s.shouldUpdateRefs=function(e,t){return t._owner!==e._owner||t.ref!==e.ref},s.detachRefs=function(e,t){var n=t.ref;null!=n&&r(n,e,t._owner)},t.exports=s},{"./ReactOwner":227}],237:[function(e,t,n){"use strict";var o={injectCreateReactRootIndex:function(e){r.createReactRootIndex=e}},r={createReactRootIndex:null,injection:o};t.exports=r},{}],238:[function(e,t,n){(function(n){"use strict";function o(e){"production"!==n.env.NODE_ENV?u(i.isValidElement(e),"renderToString(): You must pass a valid ReactElement."):u(i.isValidElement(e));var t;try{var o=s.createReactRootID();return t=l.getPooled(!1),t.perform(function(){var n=p(e,null),r=n.mountComponent(o,t,c);return a.addChecksumToMarkup(r)},null)}finally{l.release(t)}}function r(e){"production"!==n.env.NODE_ENV?u(i.isValidElement(e),"renderToStaticMarkup(): You must pass a valid ReactElement."):u(i.isValidElement(e));var t;try{var o=s.createReactRootID();return t=l.getPooled(!0),t.perform(function(){var n=p(e,null);return n.mountComponent(o,t,c)},null)}finally{l.release(t)}}var i=e("./ReactElement"),s=e("./ReactInstanceHandles"),a=e("./ReactMarkupChecksum"),l=e("./ReactServerRenderingTransaction"),c=e("./emptyObject"),p=e("./instantiateReactComponent"),u=e("./invariant");t.exports={renderToString:o,renderToStaticMarkup:r}}).call(this,e("_process"))},{"./ReactElement":209,"./ReactInstanceHandles":218,"./ReactMarkupChecksum":222,"./ReactServerRenderingTransaction":239,"./emptyObject":277,"./instantiateReactComponent":296,"./invariant":297,_process:1}],239:[function(e,t,n){"use strict";function o(e){this.reinitializeTransaction(),this.renderToStaticMarkup=e,this.reactMountReady=i.getPooled(null),this.putListenerQueue=s.getPooled()}var r=e("./PooledClass"),i=e("./CallbackQueue"),s=e("./ReactPutListenerQueue"),a=e("./Transaction"),l=e("./Object.assign"),c=e("./emptyFunction"),p={initialize:function(){this.reactMountReady.reset()},close:c},u={initialize:function(){this.putListenerQueue.reset()},close:c},h=[u,p],d={getTransactionWrappers:function(){return h},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){i.release(this.reactMountReady),this.reactMountReady=null,s.release(this.putListenerQueue),this.putListenerQueue=null}};l(o.prototype,a.Mixin,d),r.addPoolingTo(o),t.exports=o},{"./CallbackQueue":153,"./Object.assign":175,"./PooledClass":176,"./ReactPutListenerQueue":233,"./Transaction":263,"./emptyFunction":276}],240:[function(e,t,n){"use strict";function o(e,t){var n={};return function(o){n[t]=o,e.setState(n)}}var r={createStateSetter:function(e,t){return function(n,o,r,i,s,a){var l=t.call(e,n,o,r,i,s,a);l&&e.setState(l)}},createStateKeySetter:function(e,t){var n=e.__keySetters||(e.__keySetters={});return n[t]||(n[t]=o(e,t))}};r.Mixin={createStateSetter:function(e){return r.createStateSetter(this,e)},createStateKeySetter:function(e){return r.createStateKeySetter(this,e)}},t.exports=r},{}],241:[function(e,t,n){"use strict";function o(e){}function r(e){return function(t,n){var r;C.isDOMComponent(t)?r=t.getDOMNode():t.tagName&&(r=t);var i=new o;i.target=r;var s=new b(d.eventNameDispatchConfigs[e],g.getID(r),i);T(s,n),c.accumulateTwoPhaseDispatches(s),v.batchedUpdates(function(){l.enqueueEvents(s),l.processEventQueue()})}}function i(){C.Simulate={};var e;for(e in d.eventNameDispatchConfigs)C.Simulate[e]=r(e)}function s(e){return function(t,n){var r=new o(e);T(r,n),C.isDOMComponent(t)?C.simulateNativeEventOnDOMComponent(e,t,r):t.tagName&&C.simulateNativeEventOnNode(e,t,r)}}var a=e("./EventConstants"),l=e("./EventPluginHub"),c=e("./EventPropagators"),p=e("./React"),u=e("./ReactElement"),h=e("./ReactEmptyComponent"),d=e("./ReactBrowserEventEmitter"),f=e("./ReactCompositeComponent"),m=e("./ReactInstanceHandles"),y=e("./ReactInstanceMap"),g=e("./ReactMount"),v=e("./ReactUpdates"),b=e("./SyntheticEvent"),T=e("./Object.assign"),x=e("./emptyObject"),E=a.topLevelTypes,C={renderIntoDocument:function(e){var t=document.createElement("div");return p.render(e,t)},isElement:function(e){return u.isValidElement(e)},isElementOfType:function(e,t){return u.isValidElement(e)&&e.type===t},isDOMComponent:function(e){return!!(e&&e.tagName&&e.getDOMNode)},isDOMComponentElement:function(e){return!!(e&&u.isValidElement(e)&&e.tagName)},isCompositeComponent:function(e){return"function"==typeof e.render&&"function"==typeof e.setState},isCompositeComponentWithType:function(e,t){return!(!C.isCompositeComponent(e)||e.constructor!==t)},isCompositeComponentElement:function(e){if(!u.isValidElement(e))return!1;var t=e.type.prototype;return"function"==typeof t.render&&"function"==typeof t.setState},isCompositeComponentElementWithType:function(e,t){return!(!C.isCompositeComponentElement(e)||e.constructor!==t)},getRenderedChildOfCompositeComponent:function(e){if(!C.isCompositeComponent(e))return null;var t=y.get(e);return t._renderedComponent.getPublicInstance()},findAllInRenderedTree:function(e,t){if(!e)return[];var n=t(e)?[e]:[];if(C.isDOMComponent(e)){var o,r=y.get(e),i=r._renderedComponent._renderedChildren;for(o in i)i.hasOwnProperty(o)&&i[o].getPublicInstance&&(n=n.concat(C.findAllInRenderedTree(i[o].getPublicInstance(),t)))}else C.isCompositeComponent(e)&&(n=n.concat(C.findAllInRenderedTree(C.getRenderedChildOfCompositeComponent(e),t)));return n},scryRenderedDOMComponentsWithClass:function(e,t){return C.findAllInRenderedTree(e,function(e){var n=e.props.className;return C.isDOMComponent(e)&&n&&-1!==(" "+n+" ").indexOf(" "+t+" ")})},findRenderedDOMComponentWithClass:function(e,t){var n=C.scryRenderedDOMComponentsWithClass(e,t);if(1!==n.length)throw new Error("Did not find exactly one match (found: "+n.length+") for class:"+t);return n[0]},scryRenderedDOMComponentsWithTag:function(e,t){return C.findAllInRenderedTree(e,function(e){return C.isDOMComponent(e)&&e.tagName===t.toUpperCase()})},findRenderedDOMComponentWithTag:function(e,t){var n=C.scryRenderedDOMComponentsWithTag(e,t);if(1!==n.length)throw new Error("Did not find exactly one match for tag:"+t);return n[0]},scryRenderedComponentsWithType:function(e,t){return C.findAllInRenderedTree(e,function(e){return C.isCompositeComponentWithType(e,t)})},findRenderedComponentWithType:function(e,t){var n=C.scryRenderedComponentsWithType(e,t);if(1!==n.length)throw new Error("Did not find exactly one match for componentType:"+t);return n[0]},mockComponent:function(e,t){return t=t||e.mockTagName||"div",e.prototype.render.mockImplementation(function(){return p.createElement(t,null,this.props.children)}),this},simulateNativeEventOnNode:function(e,t,n){n.target=t,d.ReactEventListener.dispatchEvent(e,n)},simulateNativeEventOnDOMComponent:function(e,t,n){C.simulateNativeEventOnNode(e,t.getDOMNode(),n)},nativeTouchData:function(e,t){return{touches:[{pageX:e,pageY:t}]}},createRenderer:function(){return new _},Simulate:null,SimulateNative:{}},_=function(){this._instance=null};_.prototype.getRenderOutput=function(){return this._instance&&this._instance._renderedComponent&&this._instance._renderedComponent._renderedOutput||null};var P=function(e){this._renderedOutput=e,this._currentElement=null===e||e===!1?h.emptyElement:e};P.prototype={mountComponent:function(){},receiveComponent:function(e){this._renderedOutput=e,this._currentElement=null===e||e===!1?h.emptyElement:e},unmountComponent:function(){}};var w=function(){};T(w.prototype,f.Mixin,{_instantiateReactComponent:function(e){return new P(e)},_replaceNodeWithMarkupByID:function(){},_renderValidatedComponent:f.Mixin._renderValidatedComponentWithoutOwnerOrContext}),_.prototype.render=function(e,t){t||(t=x);var n=v.ReactReconcileTransaction.getPooled();this._render(e,n,t),v.ReactReconcileTransaction.release(n)},_.prototype.unmount=function(){this._instance&&this._instance.unmountComponent()},_.prototype._render=function(e,t,n){if(this._instance)this._instance.receiveComponent(e,t,n);else{var o=m.createReactRootID(),r=new w(e.type);r.construct(e),r.mountComponent(o,t,n),this._instance=r}};var D=l.injection.injectEventPluginOrder;l.injection.injectEventPluginOrder=function(){D.apply(this,arguments),i()};var S=l.injection.injectEventPluginsByName;l.injection.injectEventPluginsByName=function(){S.apply(this,arguments),i()},i();var O;for(O in E){var M=0===O.indexOf("top")?O.charAt(3).toLowerCase()+O.substr(4):O;C.SimulateNative[M]=s(O)}t.exports=C},{"./EventConstants":162,"./EventPluginHub":164,"./EventPropagators":167,"./Object.assign":175,"./React":177,"./ReactBrowserEventEmitter":179,"./ReactCompositeComponent":189,"./ReactElement":209,"./ReactEmptyComponent":211,"./ReactInstanceHandles":218,"./ReactInstanceMap":219,"./ReactMount":223,"./ReactUpdates":246,"./SyntheticEvent":255,"./emptyObject":277}],242:[function(e,t,n){"use strict";var o=e("./ReactChildren"),r=e("./ReactFragment"),i={getChildMapping:function(e){return e?r.extract(o.map(e,function(e){return e})):e},mergeChildMappings:function(e,t){function n(n){return t.hasOwnProperty(n)?t[n]:e[n]}e=e||{},t=t||{};var o={},r=[];for(var i in e)t.hasOwnProperty(i)?r.length&&(o[i]=r,r=[]):r.push(i);var s,a={};for(var l in t){if(o.hasOwnProperty(l))for(s=0;s<o[l].length;s++){var c=o[l][s];a[o[l][s]]=n(c)}a[l]=n(l)}for(s=0;s<r.length;s++)a[r[s]]=n(r[s]);return a}};t.exports=i},{"./ReactChildren":183,"./ReactFragment":215}],243:[function(e,t,n){"use strict";function o(){var e=document.createElement("div"),t=e.style;"AnimationEvent"in window||delete a.animationend.animation,"TransitionEvent"in window||delete a.transitionend.transition;for(var n in a){var o=a[n];for(var r in o)if(r in t){l.push(o[r]);break}}}function r(e,t,n){e.addEventListener(t,n,!1)}function i(e,t,n){e.removeEventListener(t,n,!1)}var s=e("./ExecutionEnvironment"),a={transitionend:{transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"mozTransitionEnd",OTransition:"oTransitionEnd",msTransition:"MSTransitionEnd"},animationend:{animation:"animationend",WebkitAnimation:"webkitAnimationEnd",MozAnimation:"mozAnimationEnd",OAnimation:"oAnimationEnd",msAnimation:"MSAnimationEnd"}},l=[];s.canUseDOM&&o();var c={addEndEventListener:function(e,t){return 0===l.length?void window.setTimeout(t,0):void l.forEach(function(n){r(e,n,t)})},removeEndEventListener:function(e,t){0!==l.length&&l.forEach(function(n){i(e,n,t)})}};t.exports=c},{"./ExecutionEnvironment":168}],244:[function(e,t,n){"use strict";var o=e("./React"),r=e("./ReactTransitionChildMapping"),i=e("./Object.assign"),s=e("./cloneWithProps"),a=e("./emptyFunction"),l=o.createClass({displayName:"ReactTransitionGroup",propTypes:{component:o.PropTypes.any,childFactory:o.PropTypes.func},getDefaultProps:function(){return{component:"span",childFactory:a.thatReturnsArgument}},getInitialState:function(){return{children:r.getChildMapping(this.props.children)}},componentWillMount:function(){this.currentlyTransitioningKeys={},this.keysToEnter=[],this.keysToLeave=[]},componentDidMount:function(){var e=this.state.children;for(var t in e)e[t]&&this.performAppear(t)},componentWillReceiveProps:function(e){var t=r.getChildMapping(e.children),n=this.state.children;this.setState({children:r.mergeChildMappings(n,t)});var o;for(o in t){var i=n&&n.hasOwnProperty(o);!t[o]||i||this.currentlyTransitioningKeys[o]||this.keysToEnter.push(o)}for(o in n){var s=t&&t.hasOwnProperty(o);!n[o]||s||this.currentlyTransitioningKeys[o]||this.keysToLeave.push(o)}},componentDidUpdate:function(){var e=this.keysToEnter;this.keysToEnter=[],e.forEach(this.performEnter);var t=this.keysToLeave;this.keysToLeave=[],t.forEach(this.performLeave)},performAppear:function(e){this.currentlyTransitioningKeys[e]=!0;var t=this.refs[e];t.componentWillAppear?t.componentWillAppear(this._handleDoneAppearing.bind(this,e)):this._handleDoneAppearing(e)},_handleDoneAppearing:function(e){var t=this.refs[e];t.componentDidAppear&&t.componentDidAppear(),delete this.currentlyTransitioningKeys[e];var n=r.getChildMapping(this.props.children);n&&n.hasOwnProperty(e)||this.performLeave(e)},performEnter:function(e){this.currentlyTransitioningKeys[e]=!0;var t=this.refs[e];t.componentWillEnter?t.componentWillEnter(this._handleDoneEntering.bind(this,e)):this._handleDoneEntering(e)},_handleDoneEntering:function(e){var t=this.refs[e];t.componentDidEnter&&t.componentDidEnter(),delete this.currentlyTransitioningKeys[e];var n=r.getChildMapping(this.props.children);n&&n.hasOwnProperty(e)||this.performLeave(e)},performLeave:function(e){this.currentlyTransitioningKeys[e]=!0;var t=this.refs[e];t.componentWillLeave?t.componentWillLeave(this._handleDoneLeaving.bind(this,e)):this._handleDoneLeaving(e)},_handleDoneLeaving:function(e){var t=this.refs[e];t.componentDidLeave&&t.componentDidLeave(),delete this.currentlyTransitioningKeys[e];var n=r.getChildMapping(this.props.children);if(n&&n.hasOwnProperty(e))this.performEnter(e);else{var o=i({},this.state.children);delete o[e],this.setState({children:o})}},render:function(){var e=[];for(var t in this.state.children){var n=this.state.children[t];n&&e.push(s(this.props.childFactory(n),{ref:t,key:t}))}return o.createElement(this.props.component,this.props,e)}});t.exports=l},{"./Object.assign":175,"./React":177,"./ReactTransitionChildMapping":242,"./cloneWithProps":269,"./emptyFunction":276}],245:[function(e,t,n){(function(n){"use strict";function o(e){e!==i.currentlyMountingInstance&&c.enqueueUpdate(e)}function r(e,t){"production"!==n.env.NODE_ENV?u(null==s.current,"%s(...): Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.",t):u(null==s.current);var o=l.get(e);return o?o===i.currentlyUnmountingInstance?null:o:("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?h(!t,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op.",t,t):null),null)}var i=e("./ReactLifeCycle"),s=e("./ReactCurrentOwner"),a=e("./ReactElement"),l=e("./ReactInstanceMap"),c=e("./ReactUpdates"),p=e("./Object.assign"),u=e("./invariant"),h=e("./warning"),d={enqueueCallback:function(e,t){"production"!==n.env.NODE_ENV?u("function"==typeof t,"enqueueCallback(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."):u("function"==typeof t);var s=r(e);return s&&s!==i.currentlyMountingInstance?(s._pendingCallbacks?s._pendingCallbacks.push(t):s._pendingCallbacks=[t],void o(s)):null},enqueueCallbackInternal:function(e,t){"production"!==n.env.NODE_ENV?u("function"==typeof t,"enqueueCallback(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."):u("function"==typeof t),e._pendingCallbacks?e._pendingCallbacks.push(t):e._pendingCallbacks=[t],o(e)},enqueueForceUpdate:function(e){var t=r(e,"forceUpdate");t&&(t._pendingForceUpdate=!0,o(t))},enqueueReplaceState:function(e,t){var n=r(e,"replaceState");n&&(n._pendingStateQueue=[t],n._pendingReplaceState=!0,o(n))},enqueueSetState:function(e,t){var n=r(e,"setState");if(n){var i=n._pendingStateQueue||(n._pendingStateQueue=[]);i.push(t),o(n)}},enqueueSetProps:function(e,t){var i=r(e,"setProps");if(i){"production"!==n.env.NODE_ENV?u(i._isTopLevel,"setProps(...): You called `setProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."):u(i._isTopLevel);var s=i._pendingElement||i._currentElement,l=p({},s.props,t);i._pendingElement=a.cloneAndReplaceProps(s,l),o(i)}},enqueueReplaceProps:function(e,t){var i=r(e,"replaceProps");if(i){"production"!==n.env.NODE_ENV?u(i._isTopLevel,"replaceProps(...): You called `replaceProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."):u(i._isTopLevel);var s=i._pendingElement||i._currentElement;i._pendingElement=a.cloneAndReplaceProps(s,t),o(i)}},enqueueElementInternal:function(e,t){e._pendingElement=t,o(e)}};t.exports=d}).call(this,e("_process"))},{"./Object.assign":175,"./ReactCurrentOwner":191,"./ReactElement":209,"./ReactInstanceMap":219,"./ReactLifeCycle":220,"./ReactUpdates":246,"./invariant":297,"./warning":318,_process:1}],246:[function(e,t,n){(function(n){"use strict";function o(){"production"!==n.env.NODE_ENV?g(S.ReactReconcileTransaction&&E,"ReactUpdates: must inject a reconcile transaction class and batching strategy"):g(S.ReactReconcileTransaction&&E)}function r(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=p.getPooled(),this.reconcileTransaction=S.ReactReconcileTransaction.getPooled()}function i(e,t,n,r,i){o(),E.batchedUpdates(e,t,n,r,i)}function s(e,t){return e._mountOrder-t._mountOrder}function a(e){var t=e.dirtyComponentsLength;"production"!==n.env.NODE_ENV?g(t===b.length,"Expected flush transaction's stored dirty-components length (%s) to match dirty-components array length (%s).",t,b.length):g(t===b.length),b.sort(s);for(var o=0;t>o;o++){var r=b[o],i=r._pendingCallbacks;if(r._pendingCallbacks=null,f.performUpdateIfNecessary(r,e.reconcileTransaction),i)for(var a=0;a<i.length;a++)e.callbackQueue.enqueue(i[a],r.getPublicInstance())}}function l(e){return o(),"production"!==n.env.NODE_ENV?v(null==h.current,"enqueueUpdate(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null,E.isBatchingUpdates?void b.push(e):void E.batchedUpdates(l,e)}function c(e,t){"production"!==n.env.NODE_ENV?g(E.isBatchingUpdates,"ReactUpdates.asap: Can't enqueue an asap callback in a context whereupdates are not being batched."):g(E.isBatchingUpdates),T.enqueue(e,t),x=!0}var p=e("./CallbackQueue"),u=e("./PooledClass"),h=e("./ReactCurrentOwner"),d=e("./ReactPerf"),f=e("./ReactReconciler"),m=e("./Transaction"),y=e("./Object.assign"),g=e("./invariant"),v=e("./warning"),b=[],T=p.getPooled(),x=!1,E=null,C={initialize:function(){this.dirtyComponentsLength=b.length},close:function(){this.dirtyComponentsLength!==b.length?(b.splice(0,this.dirtyComponentsLength),w()):b.length=0}},_={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},P=[C,_];y(r.prototype,m.Mixin,{getTransactionWrappers:function(){return P},destructor:function(){this.dirtyComponentsLength=null,p.release(this.callbackQueue),this.callbackQueue=null,S.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(e,t,n){return m.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,e,t,n)}}),u.addPoolingTo(r);var w=function(){for(;b.length||x;){if(b.length){var e=r.getPooled();e.perform(a,null,e),r.release(e)}if(x){x=!1;var t=T;T=p.getPooled(),t.notifyAll(),p.release(t)}}};w=d.measure("ReactUpdates","flushBatchedUpdates",w);var D={injectReconcileTransaction:function(e){"production"!==n.env.NODE_ENV?g(e,"ReactUpdates: must provide a reconcile transaction class"):g(e),S.ReactReconcileTransaction=e},injectBatchingStrategy:function(e){"production"!==n.env.NODE_ENV?g(e,"ReactUpdates: must provide a batching strategy"):g(e),"production"!==n.env.NODE_ENV?g("function"==typeof e.batchedUpdates,"ReactUpdates: must provide a batchedUpdates() function"):g("function"==typeof e.batchedUpdates),"production"!==n.env.NODE_ENV?g("boolean"==typeof e.isBatchingUpdates,"ReactUpdates: must provide an isBatchingUpdates boolean attribute"):g("boolean"==typeof e.isBatchingUpdates),E=e}},S={ReactReconcileTransaction:null,batchedUpdates:i,enqueueUpdate:l,flushBatchedUpdates:w,injection:D,asap:c};t.exports=S}).call(this,e("_process"))},{"./CallbackQueue":153,"./Object.assign":175,"./PooledClass":176,"./ReactCurrentOwner":191,"./ReactPerf":228,"./ReactReconciler":235,"./Transaction":263,"./invariant":297,"./warning":318,_process:1}],247:[function(e,t,n){(function(n){"use strict";var o=e("./LinkedStateMixin"),r=e("./React"),i=e("./ReactComponentWithPureRenderMixin"),s=e("./ReactCSSTransitionGroup"),a=e("./ReactFragment"),l=e("./ReactTransitionGroup"),c=e("./ReactUpdates"),p=e("./cx"),u=e("./cloneWithProps"),h=e("./update");r.addons={CSSTransitionGroup:s,LinkedStateMixin:o,PureRenderMixin:i,TransitionGroup:l,batchedUpdates:c.batchedUpdates,classSet:p,cloneWithProps:u,createFragment:a.create,update:h},"production"!==n.env.NODE_ENV&&(r.addons.Perf=e("./ReactDefaultPerf"),r.addons.TestUtils=e("./ReactTestUtils")),t.exports=r}).call(this,e("_process"))},{"./LinkedStateMixin":171,"./React":177,"./ReactCSSTransitionGroup":180,"./ReactComponentWithPureRenderMixin":188,"./ReactDefaultPerf":207,"./ReactFragment":215,"./ReactTestUtils":241,"./ReactTransitionGroup":244,"./ReactUpdates":246,"./cloneWithProps":269,"./cx":274,"./update":317,_process:1}],248:[function(e,t,n){"use strict";var o=e("./DOMProperty"),r=o.injection.MUST_USE_ATTRIBUTE,i={Properties:{clipPath:r,cx:r,cy:r,d:r,dx:r,dy:r,fill:r,fillOpacity:r,fontFamily:r,fontSize:r,fx:r,fy:r,gradientTransform:r,gradientUnits:r,
markerEnd:r,markerMid:r,markerStart:r,offset:r,opacity:r,patternContentUnits:r,patternUnits:r,points:r,preserveAspectRatio:r,r:r,rx:r,ry:r,spreadMethod:r,stopColor:r,stopOpacity:r,stroke:r,strokeDasharray:r,strokeLinecap:r,strokeOpacity:r,strokeWidth:r,textAnchor:r,transform:r,version:r,viewBox:r,x1:r,x2:r,x:r,y1:r,y2:r,y:r},DOMAttributeNames:{clipPath:"clip-path",fillOpacity:"fill-opacity",fontFamily:"font-family",fontSize:"font-size",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",patternContentUnits:"patternContentUnits",patternUnits:"patternUnits",preserveAspectRatio:"preserveAspectRatio",spreadMethod:"spreadMethod",stopColor:"stop-color",stopOpacity:"stop-opacity",strokeDasharray:"stroke-dasharray",strokeLinecap:"stroke-linecap",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",textAnchor:"text-anchor",viewBox:"viewBox"}};t.exports=i},{"./DOMProperty":157}],249:[function(e,t,n){"use strict";function o(e){if("selectionStart"in e&&a.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function r(e){if(v||null==m||m!==c())return null;var t=o(m);if(!g||!h(g,t)){g=t;var n=l.getPooled(f.select,y,e);return n.type="select",n.target=m,s.accumulateTwoPhaseDispatches(n),n}}var i=e("./EventConstants"),s=e("./EventPropagators"),a=e("./ReactInputSelection"),l=e("./SyntheticEvent"),c=e("./getActiveElement"),p=e("./isTextInputElement"),u=e("./keyOf"),h=e("./shallowEqual"),d=i.topLevelTypes,f={select:{phasedRegistrationNames:{bubbled:u({onSelect:null}),captured:u({onSelectCapture:null})},dependencies:[d.topBlur,d.topContextMenu,d.topFocus,d.topKeyDown,d.topMouseDown,d.topMouseUp,d.topSelectionChange]}},m=null,y=null,g=null,v=!1,b={eventTypes:f,extractEvents:function(e,t,n,o){switch(e){case d.topFocus:(p(t)||"true"===t.contentEditable)&&(m=t,y=n,g=null);break;case d.topBlur:m=null,y=null,g=null;break;case d.topMouseDown:v=!0;break;case d.topContextMenu:case d.topMouseUp:return v=!1,r(o);case d.topSelectionChange:case d.topKeyDown:case d.topKeyUp:return r(o)}}};t.exports=b},{"./EventConstants":162,"./EventPropagators":167,"./ReactInputSelection":217,"./SyntheticEvent":255,"./getActiveElement":283,"./isTextInputElement":300,"./keyOf":304,"./shallowEqual":313}],250:[function(e,t,n){"use strict";var o=Math.pow(2,53),r={createReactRootIndex:function(){return Math.ceil(Math.random()*o)}};t.exports=r},{}],251:[function(e,t,n){(function(n){"use strict";var o=e("./EventConstants"),r=e("./EventPluginUtils"),i=e("./EventPropagators"),s=e("./SyntheticClipboardEvent"),a=e("./SyntheticEvent"),l=e("./SyntheticFocusEvent"),c=e("./SyntheticKeyboardEvent"),p=e("./SyntheticMouseEvent"),u=e("./SyntheticDragEvent"),h=e("./SyntheticTouchEvent"),d=e("./SyntheticUIEvent"),f=e("./SyntheticWheelEvent"),m=e("./getEventCharCode"),y=e("./invariant"),g=e("./keyOf"),v=e("./warning"),b=o.topLevelTypes,T={blur:{phasedRegistrationNames:{bubbled:g({onBlur:!0}),captured:g({onBlurCapture:!0})}},click:{phasedRegistrationNames:{bubbled:g({onClick:!0}),captured:g({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:g({onContextMenu:!0}),captured:g({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:g({onCopy:!0}),captured:g({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:g({onCut:!0}),captured:g({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:g({onDoubleClick:!0}),captured:g({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:g({onDrag:!0}),captured:g({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:g({onDragEnd:!0}),captured:g({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:g({onDragEnter:!0}),captured:g({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:g({onDragExit:!0}),captured:g({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:g({onDragLeave:!0}),captured:g({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:g({onDragOver:!0}),captured:g({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:g({onDragStart:!0}),captured:g({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:g({onDrop:!0}),captured:g({onDropCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:g({onFocus:!0}),captured:g({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:g({onInput:!0}),captured:g({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:g({onKeyDown:!0}),captured:g({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:g({onKeyPress:!0}),captured:g({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:g({onKeyUp:!0}),captured:g({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:g({onLoad:!0}),captured:g({onLoadCapture:!0})}},error:{phasedRegistrationNames:{bubbled:g({onError:!0}),captured:g({onErrorCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:g({onMouseDown:!0}),captured:g({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:g({onMouseMove:!0}),captured:g({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:g({onMouseOut:!0}),captured:g({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:g({onMouseOver:!0}),captured:g({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:g({onMouseUp:!0}),captured:g({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:g({onPaste:!0}),captured:g({onPasteCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:g({onReset:!0}),captured:g({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:g({onScroll:!0}),captured:g({onScrollCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:g({onSubmit:!0}),captured:g({onSubmitCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:g({onTouchCancel:!0}),captured:g({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:g({onTouchEnd:!0}),captured:g({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:g({onTouchMove:!0}),captured:g({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:g({onTouchStart:!0}),captured:g({onTouchStartCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:g({onWheel:!0}),captured:g({onWheelCapture:!0})}}},x={topBlur:T.blur,topClick:T.click,topContextMenu:T.contextMenu,topCopy:T.copy,topCut:T.cut,topDoubleClick:T.doubleClick,topDrag:T.drag,topDragEnd:T.dragEnd,topDragEnter:T.dragEnter,topDragExit:T.dragExit,topDragLeave:T.dragLeave,topDragOver:T.dragOver,topDragStart:T.dragStart,topDrop:T.drop,topError:T.error,topFocus:T.focus,topInput:T.input,topKeyDown:T.keyDown,topKeyPress:T.keyPress,topKeyUp:T.keyUp,topLoad:T.load,topMouseDown:T.mouseDown,topMouseMove:T.mouseMove,topMouseOut:T.mouseOut,topMouseOver:T.mouseOver,topMouseUp:T.mouseUp,topPaste:T.paste,topReset:T.reset,topScroll:T.scroll,topSubmit:T.submit,topTouchCancel:T.touchCancel,topTouchEnd:T.touchEnd,topTouchMove:T.touchMove,topTouchStart:T.touchStart,topWheel:T.wheel};for(var E in x)x[E].dependencies=[E];var C={eventTypes:T,executeDispatch:function(e,t,o){var i=r.executeDispatch(e,t,o);"production"!==n.env.NODE_ENV?v("boolean"!=typeof i,"Returning `false` from an event handler is deprecated and will be ignored in a future release. Instead, manually call e.stopPropagation() or e.preventDefault(), as appropriate."):null,i===!1&&(e.stopPropagation(),e.preventDefault())},extractEvents:function(e,t,o,r){var g=x[e];if(!g)return null;var v;switch(e){case b.topInput:case b.topLoad:case b.topError:case b.topReset:case b.topSubmit:v=a;break;case b.topKeyPress:if(0===m(r))return null;case b.topKeyDown:case b.topKeyUp:v=c;break;case b.topBlur:case b.topFocus:v=l;break;case b.topClick:if(2===r.button)return null;case b.topContextMenu:case b.topDoubleClick:case b.topMouseDown:case b.topMouseMove:case b.topMouseOut:case b.topMouseOver:case b.topMouseUp:v=p;break;case b.topDrag:case b.topDragEnd:case b.topDragEnter:case b.topDragExit:case b.topDragLeave:case b.topDragOver:case b.topDragStart:case b.topDrop:v=u;break;case b.topTouchCancel:case b.topTouchEnd:case b.topTouchMove:case b.topTouchStart:v=h;break;case b.topScroll:v=d;break;case b.topWheel:v=f;break;case b.topCopy:case b.topCut:case b.topPaste:v=s}"production"!==n.env.NODE_ENV?y(v,"SimpleEventPlugin: Unhandled event type, `%s`.",e):y(v);var T=v.getPooled(g,o,r);return i.accumulateTwoPhaseDispatches(T),T}};t.exports=C}).call(this,e("_process"))},{"./EventConstants":162,"./EventPluginUtils":166,"./EventPropagators":167,"./SyntheticClipboardEvent":252,"./SyntheticDragEvent":254,"./SyntheticEvent":255,"./SyntheticFocusEvent":256,"./SyntheticKeyboardEvent":258,"./SyntheticMouseEvent":259,"./SyntheticTouchEvent":260,"./SyntheticUIEvent":261,"./SyntheticWheelEvent":262,"./getEventCharCode":284,"./invariant":297,"./keyOf":304,"./warning":318,_process:1}],252:[function(e,t,n){"use strict";function o(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),i={clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}};r.augmentClass(o,i),t.exports=o},{"./SyntheticEvent":255}],253:[function(e,t,n){"use strict";function o(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),i={data:null};r.augmentClass(o,i),t.exports=o},{"./SyntheticEvent":255}],254:[function(e,t,n){"use strict";function o(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticMouseEvent"),i={dataTransfer:null};r.augmentClass(o,i),t.exports=o},{"./SyntheticMouseEvent":259}],255:[function(e,t,n){"use strict";function o(e,t,n){this.dispatchConfig=e,this.dispatchMarker=t,this.nativeEvent=n;var o=this.constructor.Interface;for(var r in o)if(o.hasOwnProperty(r)){var i=o[r];this[r]=i?i(n):n[r]}var a=null!=n.defaultPrevented?n.defaultPrevented:n.returnValue===!1;this.isDefaultPrevented=a?s.thatReturnsTrue:s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse}var r=e("./PooledClass"),i=e("./Object.assign"),s=e("./emptyFunction"),a=e("./getEventTarget"),l={type:null,target:a,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};i(o.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e.preventDefault?e.preventDefault():e.returnValue=!1,this.isDefaultPrevented=s.thatReturnsTrue},stopPropagation:function(){var e=this.nativeEvent;e.stopPropagation?e.stopPropagation():e.cancelBubble=!0,this.isPropagationStopped=s.thatReturnsTrue},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)this[t]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),o.Interface=l,o.augmentClass=function(e,t){var n=this,o=Object.create(n.prototype);i(o,e.prototype),e.prototype=o,e.prototype.constructor=e,e.Interface=i({},n.Interface,t),e.augmentClass=n.augmentClass,r.addPoolingTo(e,r.threeArgumentPooler)},r.addPoolingTo(o,r.threeArgumentPooler),t.exports=o},{"./Object.assign":175,"./PooledClass":176,"./emptyFunction":276,"./getEventTarget":287}],256:[function(e,t,n){"use strict";function o(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),i={relatedTarget:null};r.augmentClass(o,i),t.exports=o},{"./SyntheticUIEvent":261}],257:[function(e,t,n){"use strict";function o(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),i={data:null};r.augmentClass(o,i),t.exports=o},{"./SyntheticEvent":255}],258:[function(e,t,n){"use strict";function o(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),i=e("./getEventCharCode"),s=e("./getEventKey"),a=e("./getEventModifierState"),l={key:s,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:a,charCode:function(e){return"keypress"===e.type?i(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?i(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}};r.augmentClass(o,l),t.exports=o},{"./SyntheticUIEvent":261,"./getEventCharCode":284,"./getEventKey":285,"./getEventModifierState":286}],259:[function(e,t,n){"use strict";function o(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),i=e("./ViewportMetrics"),s=e("./getEventModifierState"),a={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:s,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+i.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+i.currentScrollTop}};r.augmentClass(o,a),t.exports=o},{"./SyntheticUIEvent":261,"./ViewportMetrics":264,"./getEventModifierState":286}],260:[function(e,t,n){"use strict";function o(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),i=e("./getEventModifierState"),s={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:i};r.augmentClass(o,s),t.exports=o},{"./SyntheticUIEvent":261,"./getEventModifierState":286}],261:[function(e,t,n){"use strict";function o(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),i=e("./getEventTarget"),s={view:function(e){if(e.view)return e.view;var t=i(e);if(null!=t&&t.window===t)return t;var n=t.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(e){return e.detail||0}};r.augmentClass(o,s),t.exports=o},{"./SyntheticEvent":255,"./getEventTarget":287}],262:[function(e,t,n){"use strict";function o(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticMouseEvent"),i={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};r.augmentClass(o,i),t.exports=o},{"./SyntheticMouseEvent":259}],263:[function(e,t,n){(function(n){"use strict";var o=e("./invariant"),r={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(e,t,r,i,s,a,l,c){"production"!==n.env.NODE_ENV?o(!this.isInTransaction(),"Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction."):o(!this.isInTransaction());var p,u;try{this._isInTransaction=!0,p=!0,this.initializeAll(0),u=e.call(t,r,i,s,a,l,c),p=!1}finally{try{if(p)try{this.closeAll(0)}catch(h){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return u},initializeAll:function(e){for(var t=this.transactionWrappers,n=e;n<t.length;n++){var o=t[n];try{this.wrapperInitData[n]=i.OBSERVED_ERROR,this.wrapperInitData[n]=o.initialize?o.initialize.call(this):null}finally{if(this.wrapperInitData[n]===i.OBSERVED_ERROR)try{this.initializeAll(n+1)}catch(r){}}}},closeAll:function(e){"production"!==n.env.NODE_ENV?o(this.isInTransaction(),"Transaction.closeAll(): Cannot close transaction when none are open."):o(this.isInTransaction());for(var t=this.transactionWrappers,r=e;r<t.length;r++){var s,a=t[r],l=this.wrapperInitData[r];try{s=!0,l!==i.OBSERVED_ERROR&&a.close&&a.close.call(this,l),s=!1}finally{if(s)try{this.closeAll(r+1)}catch(c){}}}this.wrapperInitData.length=0}},i={Mixin:r,OBSERVED_ERROR:{}};t.exports=i}).call(this,e("_process"))},{"./invariant":297,_process:1}],264:[function(e,t,n){"use strict";var o={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(e){o.currentScrollLeft=e.x,o.currentScrollTop=e.y}};t.exports=o},{}],265:[function(e,t,n){(function(n){"use strict";function o(e,t){if("production"!==n.env.NODE_ENV?r(null!=t,"accumulateInto(...): Accumulated items must not be null or undefined."):r(null!=t),null==e)return t;var o=Array.isArray(e),i=Array.isArray(t);return o&&i?(e.push.apply(e,t),e):o?(e.push(t),e):i?[e].concat(t):[e,t]}var r=e("./invariant");t.exports=o}).call(this,e("_process"))},{"./invariant":297,_process:1}],266:[function(e,t,n){"use strict";function o(e){for(var t=1,n=0,o=0;o<e.length;o++)t=(t+e.charCodeAt(o))%r,n=(n+t)%r;return t|n<<16}var r=65521;t.exports=o},{}],267:[function(e,t,n){function o(e){return e.replace(r,function(e,t){return t.toUpperCase()})}var r=/-(.)/g;t.exports=o},{}],268:[function(e,t,n){"use strict";function o(e){return r(e.replace(i,"ms-"))}var r=e("./camelize"),i=/^-ms-/;t.exports=o},{"./camelize":267}],269:[function(e,t,n){(function(n){"use strict";function o(e,t){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?a(!e.ref,"You are calling cloneWithProps() on a child with a ref. This is dangerous because you're creating a new child which will not be added as a ref to its parent."):null);var o=i.mergeProps(t,e.props);return!o.hasOwnProperty(l)&&e.props.hasOwnProperty(l)&&(o.children=e.props.children),r.createElement(e.type,o)}var r=e("./ReactElement"),i=e("./ReactPropTransferer"),s=e("./keyOf"),a=e("./warning"),l=s({children:null});t.exports=o}).call(this,e("_process"))},{"./ReactElement":209,"./ReactPropTransferer":229,"./keyOf":304,"./warning":318,_process:1}],270:[function(e,t,n){function o(e,t){return e&&t?e===t?!0:r(e)?!1:r(t)?o(e,t.parentNode):e.contains?e.contains(t):e.compareDocumentPosition?!!(16&e.compareDocumentPosition(t)):!1:!1}var r=e("./isTextNode");t.exports=o},{"./isTextNode":301}],271:[function(e,t,n){function o(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}function r(e){return o(e)?Array.isArray(e)?e.slice():i(e):[e]}var i=e("./toArray");t.exports=r},{"./toArray":315}],272:[function(e,t,n){(function(n){"use strict";function o(e){var t=i.createFactory(e),o=r.createClass({tagName:e.toUpperCase(),displayName:"ReactFullPageComponent"+e,componentWillUnmount:function(){"production"!==n.env.NODE_ENV?s(!1,"%s tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.",this.constructor.displayName):s(!1)},render:function(){return t(this.props)}});return o}var r=e("./ReactClass"),i=e("./ReactElement"),s=e("./invariant");t.exports=o}).call(this,e("_process"))},{"./ReactClass":184,"./ReactElement":209,"./invariant":297,_process:1}],273:[function(e,t,n){(function(n){function o(e){var t=e.match(p);return t&&t[1].toLowerCase()}function r(e,t){var r=c;"production"!==n.env.NODE_ENV?l(!!c,"createNodesFromMarkup dummy not initialized"):l(!!c);var i=o(e),p=i&&a(i);if(p){r.innerHTML=p[1]+e+p[2];for(var u=p[0];u--;)r=r.lastChild}else r.innerHTML=e;var h=r.getElementsByTagName("script");h.length&&("production"!==n.env.NODE_ENV?l(t,"createNodesFromMarkup(...): Unexpected <script> element rendered."):l(t),s(h).forEach(t));for(var d=s(r.childNodes);r.lastChild;)r.removeChild(r.lastChild);return d}var i=e("./ExecutionEnvironment"),s=e("./createArrayFromMixed"),a=e("./getMarkupWrap"),l=e("./invariant"),c=i.canUseDOM?document.createElement("div"):null,p=/^\s*<(\w+)/;t.exports=r}).call(this,e("_process"))},{"./ExecutionEnvironment":168,"./createArrayFromMixed":271,"./getMarkupWrap":289,"./invariant":297,_process:1}],274:[function(e,t,n){(function(n){"use strict";function o(e){return"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?r(i,"React.addons.classSet will be deprecated in a future version. See http://fb.me/react-addons-classset"):null,i=!0),"object"==typeof e?Object.keys(e).filter(function(t){return e[t]}).join(" "):Array.prototype.join.call(arguments," ")}var r=e("./warning"),i=!1;t.exports=o}).call(this,e("_process"))},{"./warning":318,_process:1}],275:[function(e,t,n){"use strict";function o(e,t){var n=null==t||"boolean"==typeof t||""===t;if(n)return"";var o=isNaN(t);return o||0===t||i.hasOwnProperty(e)&&i[e]?""+t:("string"==typeof t&&(t=t.trim()),t+"px")}var r=e("./CSSProperty"),i=r.isUnitlessNumber;t.exports=o},{"./CSSProperty":151}],276:[function(e,t,n){function o(e){return function(){return e}}function r(){}r.thatReturns=o,r.thatReturnsFalse=o(!1),r.thatReturnsTrue=o(!0),r.thatReturnsNull=o(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},t.exports=r},{}],277:[function(e,t,n){(function(e){"use strict";var n={};"production"!==e.env.NODE_ENV&&Object.freeze(n),t.exports=n}).call(this,e("_process"))},{_process:1}],278:[function(e,t,n){"use strict";function o(e){return i[e]}function r(e){return(""+e).replace(s,o)}var i={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},s=/[&><"']/g;t.exports=r},{}],279:[function(e,t,n){(function(n){"use strict";function o(e){if("production"!==n.env.NODE_ENV){var t=r.current;null!==t&&("production"!==n.env.NODE_ENV?c(t._warnedAboutRefsInRender,"%s is accessing getDOMNode or findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",t.getName()||"A component"):null,t._warnedAboutRefsInRender=!0)}return null==e?null:l(e)?e:i.has(e)?s.getNodeFromInstance(e):("production"!==n.env.NODE_ENV?a(null==e.render||"function"!=typeof e.render,"Component (with keys: %s) contains `render` method but is not mounted in the DOM",Object.keys(e)):a(null==e.render||"function"!=typeof e.render),void("production"!==n.env.NODE_ENV?a(!1,"Element appears to be neither ReactComponent nor DOMNode (keys: %s)",Object.keys(e)):a(!1)))}var r=e("./ReactCurrentOwner"),i=e("./ReactInstanceMap"),s=e("./ReactMount"),a=e("./invariant"),l=e("./isNode"),c=e("./warning");t.exports=o}).call(this,e("_process"))},{"./ReactCurrentOwner":191,"./ReactInstanceMap":219,"./ReactMount":223,"./invariant":297,"./isNode":299,"./warning":318,_process:1}],280:[function(e,t,n){(function(n){"use strict";function o(e,t,o){var r=e,i=!r.hasOwnProperty(o);"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?s(i,"flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",o):null),i&&null!=t&&(r[o]=t)}function r(e){if(null==e)return e;var t={};return i(e,o,t),t}var i=e("./traverseAllChildren"),s=e("./warning");t.exports=r}).call(this,e("_process"))},{"./traverseAllChildren":316,"./warning":318,_process:1}],281:[function(e,t,n){"use strict";function o(e){try{e.focus()}catch(t){}}t.exports=o},{}],282:[function(e,t,n){"use strict";var o=function(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)};t.exports=o},{}],283:[function(e,t,n){function o(){try{return document.activeElement||document.body}catch(e){return document.body}}t.exports=o},{}],284:[function(e,t,n){"use strict";function o(e){var t,n=e.keyCode;return"charCode"in e?(t=e.charCode,0===t&&13===n&&(t=13)):t=n,t>=32||13===t?t:0}t.exports=o},{}],285:[function(e,t,n){"use strict";function o(e){if(e.key){var t=i[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n=r(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?s[e.keyCode]||"Unidentified":""}var r=e("./getEventCharCode"),i={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},s={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};t.exports=o},{"./getEventCharCode":284}],286:[function(e,t,n){"use strict";function o(e){var t=this,n=t.nativeEvent;if(n.getModifierState)return n.getModifierState(e);var o=i[e];return o?!!n[o]:!1}function r(e){return o}var i={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};t.exports=r},{}],287:[function(e,t,n){"use strict";function o(e){var t=e.target||e.srcElement||window;return 3===t.nodeType?t.parentNode:t}t.exports=o},{}],288:[function(e,t,n){"use strict";function o(e){var t=e&&(r&&e[r]||e[i]);return"function"==typeof t?t:void 0}var r="function"==typeof Symbol&&Symbol.iterator,i="@@iterator";t.exports=o},{}],289:[function(e,t,n){(function(n){function o(e){return"production"!==n.env.NODE_ENV?i(!!s,"Markup wrapping node not initialized"):i(!!s),h.hasOwnProperty(e)||(e="*"),a.hasOwnProperty(e)||(s.innerHTML="*"===e?"<link />":"<"+e+"></"+e+">",a[e]=!s.firstChild),a[e]?h[e]:null}var r=e("./ExecutionEnvironment"),i=e("./invariant"),s=r.canUseDOM?document.createElement("div"):null,a={circle:!0,clipPath:!0,defs:!0,ellipse:!0,g:!0,line:!0,linearGradient:!0,path:!0,polygon:!0,polyline:!0,radialGradient:!0,rect:!0,stop:!0,text:!0},l=[1,'<select multiple="true">',"</select>"],c=[1,"<table>","</table>"],p=[3,"<table><tbody><tr>","</tr></tbody></table>"],u=[1,"<svg>","</svg>"],h={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:l,option:l,caption:c,colgroup:c,tbody:c,tfoot:c,thead:c,td:p,th:p,circle:u,clipPath:u,defs:u,ellipse:u,g:u,line:u,linearGradient:u,path:u,polygon:u,polyline:u,radialGradient:u,rect:u,stop:u,text:u};t.exports=o}).call(this,e("_process"))},{"./ExecutionEnvironment":168,"./invariant":297,_process:1}],290:[function(e,t,n){"use strict";function o(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function r(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function i(e,t){for(var n=o(e),i=0,s=0;n;){if(3===n.nodeType){if(s=i+n.textContent.length,t>=i&&s>=t)return{node:n,offset:t-i};i=s}n=o(r(n))}}t.exports=i},{}],291:[function(e,t,n){"use strict";function o(e){return e?e.nodeType===r?e.documentElement:e.firstChild:null}var r=9;t.exports=o},{}],292:[function(e,t,n){"use strict";function o(){return!i&&r.canUseDOM&&(i="textContent"in document.documentElement?"textContent":"innerText"),i}var r=e("./ExecutionEnvironment"),i=null;t.exports=o},{"./ExecutionEnvironment":168}],293:[function(e,t,n){"use strict";function o(e){return e===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:e.scrollLeft,y:e.scrollTop}}t.exports=o},{}],294:[function(e,t,n){function o(e){return e.replace(r,"-$1").toLowerCase()}var r=/([A-Z])/g;t.exports=o},{}],295:[function(e,t,n){"use strict";function o(e){return r(e).replace(i,"-ms-")}var r=e("./hyphenate"),i=/^ms-/;t.exports=o},{"./hyphenate":294}],296:[function(e,t,n){(function(n){"use strict";function o(e){return"function"==typeof e&&"undefined"!=typeof e.prototype&&"function"==typeof e.prototype.mountComponent&&"function"==typeof e.prototype.receiveComponent}function r(e,t){var r;if((null===e||e===!1)&&(e=s.emptyElement),"object"==typeof e){var i=e;"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?p(i&&("function"==typeof i.type||"string"==typeof i.type),"Only functions or strings can be mounted as React components."):null),r=t===i.type&&"string"==typeof i.type?a.createInternalComponent(i):o(i.type)?new i.type(i):new u}else"string"==typeof e||"number"==typeof e?r=a.createInstanceForText(e):"production"!==n.env.NODE_ENV?c(!1,"Encountered invalid React node of type %s",typeof e):c(!1);return"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?p("function"==typeof r.construct&&"function"==typeof r.mountComponent&&"function"==typeof r.receiveComponent&&"function"==typeof r.unmountComponent,"Only React Components can be mounted."):null),r.construct(e),r._mountIndex=0,r._mountImage=null,"production"!==n.env.NODE_ENV&&(r._isOwnerNecessary=!1,r._warnedAboutRefsInRender=!1),"production"!==n.env.NODE_ENV&&Object.preventExtensions&&Object.preventExtensions(r),r}var i=e("./ReactCompositeComponent"),s=e("./ReactEmptyComponent"),a=e("./ReactNativeComponent"),l=e("./Object.assign"),c=e("./invariant"),p=e("./warning"),u=function(){};l(u.prototype,i.Mixin,{_instantiateReactComponent:r}),t.exports=r}).call(this,e("_process"))},{"./Object.assign":175,"./ReactCompositeComponent":189,"./ReactEmptyComponent":211,"./ReactNativeComponent":226,"./invariant":297,"./warning":318,_process:1}],297:[function(e,t,n){(function(e){"use strict";var n=function(t,n,o,r,i,s,a,l){if("production"!==e.env.NODE_ENV&&void 0===n)throw new Error("invariant requires an error message argument");if(!t){var c;if(void 0===n)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var p=[o,r,i,s,a,l],u=0;c=new Error("Invariant Violation: "+n.replace(/%s/g,function(){return p[u++]}))}throw c.framesToPop=1,c}};t.exports=n}).call(this,e("_process"))},{_process:1}],298:[function(e,t,n){"use strict";function o(e,t){if(!i.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,o=n in document;if(!o){var s=document.createElement("div");s.setAttribute(n,"return;"),o="function"==typeof s[n]}return!o&&r&&"wheel"===e&&(o=document.implementation.hasFeature("Events.wheel","3.0")),o}var r,i=e("./ExecutionEnvironment");i.canUseDOM&&(r=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),t.exports=o},{"./ExecutionEnvironment":168}],299:[function(e,t,n){function o(e){return!(!e||!("function"==typeof Node?e instanceof Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}t.exports=o},{}],300:[function(e,t,n){"use strict";function o(e){return e&&("INPUT"===e.nodeName&&r[e.type]||"TEXTAREA"===e.nodeName)}var r={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};t.exports=o},{}],301:[function(e,t,n){function o(e){return r(e)&&3==e.nodeType}var r=e("./isNode");t.exports=o},{"./isNode":299}],302:[function(e,t,n){"use strict";function o(e){e||(e="");var t,n=arguments.length;if(n>1)for(var o=1;n>o;o++)t=arguments[o],t&&(e=(e?e+" ":"")+t);return e}t.exports=o},{}],303:[function(e,t,n){(function(n){"use strict";var o=e("./invariant"),r=function(e){var t,r={};"production"!==n.env.NODE_ENV?o(e instanceof Object&&!Array.isArray(e),"keyMirror(...): Argument must be an object."):o(e instanceof Object&&!Array.isArray(e));for(t in e)e.hasOwnProperty(t)&&(r[t]=t);return r};t.exports=r}).call(this,e("_process"))},{"./invariant":297,_process:1}],304:[function(e,t,n){var o=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};t.exports=o},{}],305:[function(e,t,n){"use strict";function o(e,t,n){if(!e)return null;var o={};for(var i in e)r.call(e,i)&&(o[i]=t.call(n,e[i],i,e));return o}var r=Object.prototype.hasOwnProperty;t.exports=o},{}],306:[function(e,t,n){"use strict";function o(e){var t={};return function(n){return t.hasOwnProperty(n)||(t[n]=e.call(this,n)),t[n]}}t.exports=o},{}],307:[function(e,t,n){(function(n){"use strict";function o(e){return"production"!==n.env.NODE_ENV?i(r.isValidElement(e),"onlyChild must be passed a children with exactly one child."):i(r.isValidElement(e)),
e}var r=e("./ReactElement"),i=e("./invariant");t.exports=o}).call(this,e("_process"))},{"./ReactElement":209,"./invariant":297,_process:1}],308:[function(e,t,n){"use strict";var o,r=e("./ExecutionEnvironment");r.canUseDOM&&(o=window.performance||window.msPerformance||window.webkitPerformance),t.exports=o||{}},{"./ExecutionEnvironment":168}],309:[function(e,t,n){var o=e("./performance");o&&o.now||(o=Date);var r=o.now.bind(o);t.exports=r},{"./performance":308}],310:[function(e,t,n){"use strict";function o(e){return'"'+r(e)+'"'}var r=e("./escapeTextContentForBrowser");t.exports=o},{"./escapeTextContentForBrowser":278}],311:[function(e,t,n){"use strict";var o=e("./ExecutionEnvironment"),r=/^[ \r\n\t\f]/,i=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,s=function(e,t){e.innerHTML=t};if("undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction&&(s=function(e,t){MSApp.execUnsafeLocalFunction(function(){e.innerHTML=t})}),o.canUseDOM){var a=document.createElement("div");a.innerHTML=" ",""===a.innerHTML&&(s=function(e,t){if(e.parentNode&&e.parentNode.replaceChild(e,e),r.test(t)||"<"===t[0]&&i.test(t)){e.innerHTML="\ufeff"+t;var n=e.firstChild;1===n.data.length?e.removeChild(n):n.deleteData(0,1)}else e.innerHTML=t})}t.exports=s},{"./ExecutionEnvironment":168}],312:[function(e,t,n){"use strict";var o=e("./ExecutionEnvironment"),r=e("./escapeTextContentForBrowser"),i=e("./setInnerHTML"),s=function(e,t){e.textContent=t};o.canUseDOM&&("textContent"in document.documentElement||(s=function(e,t){i(e,r(t))})),t.exports=s},{"./ExecutionEnvironment":168,"./escapeTextContentForBrowser":278,"./setInnerHTML":311}],313:[function(e,t,n){"use strict";function o(e,t){if(e===t)return!0;var n;for(n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||e[n]!==t[n]))return!1;for(n in t)if(t.hasOwnProperty(n)&&!e.hasOwnProperty(n))return!1;return!0}t.exports=o},{}],314:[function(e,t,n){(function(n){"use strict";function o(e,t){if(null!=e&&null!=t){var o=typeof e,i=typeof t;if("string"===o||"number"===o)return"string"===i||"number"===i;if("object"===i&&e.type===t.type&&e.key===t.key){var s=e._owner===t._owner,a=null,l=null,c=null;return"production"!==n.env.NODE_ENV&&(s||(null!=e._owner&&null!=e._owner.getPublicInstance()&&null!=e._owner.getPublicInstance().constructor&&(a=e._owner.getPublicInstance().constructor.displayName),null!=t._owner&&null!=t._owner.getPublicInstance()&&null!=t._owner.getPublicInstance().constructor&&(l=t._owner.getPublicInstance().constructor.displayName),null!=t.type&&null!=t.type.displayName&&(c=t.type.displayName),null!=t.type&&"string"==typeof t.type&&(c=t.type),("string"!=typeof t.type||"input"===t.type||"textarea"===t.type)&&(null!=e._owner&&e._owner._isOwnerNecessary===!1||null!=t._owner&&t._owner._isOwnerNecessary===!1)&&(null!=e._owner&&(e._owner._isOwnerNecessary=!0),null!=t._owner&&(t._owner._isOwnerNecessary=!0),"production"!==n.env.NODE_ENV?r(!1,"<%s /> is being rendered by both %s and %s using the same key (%s) in the same place. Currently, this means that they don't preserve state. This behavior should be very rare so we're considering deprecating it. Please contact the React team and explain your use case so that we can take that into consideration.",c||"Unknown Component",a||"[Unknown]",l||"[Unknown]",e.key):null))),s}}return!1}var r=e("./warning");t.exports=o}).call(this,e("_process"))},{"./warning":318,_process:1}],315:[function(e,t,n){(function(n){function o(e){var t=e.length;if("production"!==n.env.NODE_ENV?r(!Array.isArray(e)&&("object"==typeof e||"function"==typeof e),"toArray: Array-like object expected"):r(!Array.isArray(e)&&("object"==typeof e||"function"==typeof e)),"production"!==n.env.NODE_ENV?r("number"==typeof t,"toArray: Object needs a length property"):r("number"==typeof t),"production"!==n.env.NODE_ENV?r(0===t||t-1 in e,"toArray: Object should have keys for indices"):r(0===t||t-1 in e),e.hasOwnProperty)try{return Array.prototype.slice.call(e)}catch(o){}for(var i=Array(t),s=0;t>s;s++)i[s]=e[s];return i}var r=e("./invariant");t.exports=o}).call(this,e("_process"))},{"./invariant":297,_process:1}],316:[function(e,t,n){(function(n){"use strict";function o(e){return g[e]}function r(e,t){return e&&null!=e.key?s(e.key):t.toString(36)}function i(e){return(""+e).replace(v,o)}function s(e){return"$"+i(e)}function a(e,t,o,i,l){var u=typeof e;if(("undefined"===u||"boolean"===u)&&(e=null),null===e||"string"===u||"number"===u||c.isValidElement(e))return i(l,e,""===t?m+r(e,0):t,o),1;var g,v,T,x=0;if(Array.isArray(e))for(var E=0;E<e.length;E++)g=e[E],v=(""!==t?t+y:m)+r(g,E),T=o+x,x+=a(g,v,T,i,l);else{var C=h(e);if(C){var _,P=C.call(e);if(C!==e.entries)for(var w=0;!(_=P.next()).done;)g=_.value,v=(""!==t?t+y:m)+r(g,w++),T=o+x,x+=a(g,v,T,i,l);else for("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?f(b,"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead."):null,b=!0);!(_=P.next()).done;){var D=_.value;D&&(g=D[1],v=(""!==t?t+y:m)+s(D[0])+y+r(g,0),T=o+x,x+=a(g,v,T,i,l))}}else if("object"===u){"production"!==n.env.NODE_ENV?d(1!==e.nodeType,"traverseAllChildren(...): Encountered an invalid child; DOM elements are not valid children of React components."):d(1!==e.nodeType);var S=p.extract(e);for(var O in S)S.hasOwnProperty(O)&&(g=S[O],v=(""!==t?t+y:m)+s(O)+y+r(g,0),T=o+x,x+=a(g,v,T,i,l))}}return x}function l(e,t,n){return null==e?0:a(e,"",0,t,n)}var c=e("./ReactElement"),p=e("./ReactFragment"),u=e("./ReactInstanceHandles"),h=e("./getIteratorFn"),d=e("./invariant"),f=e("./warning"),m=u.SEPARATOR,y=":",g={"=":"=0",".":"=1",":":"=2"},v=/[=.:]/g,b=!1;t.exports=l}).call(this,e("_process"))},{"./ReactElement":209,"./ReactFragment":215,"./ReactInstanceHandles":218,"./getIteratorFn":288,"./invariant":297,"./warning":318,_process:1}],317:[function(e,t,n){(function(n){"use strict";function o(e){return Array.isArray(e)?e.concat():e&&"object"==typeof e?s(new e.constructor,e):e}function r(e,t,o){"production"!==n.env.NODE_ENV?l(Array.isArray(e),"update(): expected target of %s to be an array; got %s.",o,e):l(Array.isArray(e));var r=t[o];"production"!==n.env.NODE_ENV?l(Array.isArray(r),"update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?",o,r):l(Array.isArray(r))}function i(e,t){if("production"!==n.env.NODE_ENV?l("object"==typeof t,"update(): You provided a key path to update() that did not contain one of %s. Did you forget to include {%s: ...}?",y.join(", "),d):l("object"==typeof t),c.call(t,d))return"production"!==n.env.NODE_ENV?l(1===Object.keys(t).length,"Cannot have more than one key in an object with %s",d):l(1===Object.keys(t).length),t[d];var a=o(e);if(c.call(t,f)){var v=t[f];"production"!==n.env.NODE_ENV?l(v&&"object"==typeof v,"update(): %s expects a spec of type 'object'; got %s",f,v):l(v&&"object"==typeof v),"production"!==n.env.NODE_ENV?l(a&&"object"==typeof a,"update(): %s expects a target of type 'object'; got %s",f,a):l(a&&"object"==typeof a),s(a,t[f])}c.call(t,p)&&(r(e,t,p),t[p].forEach(function(e){a.push(e)})),c.call(t,u)&&(r(e,t,u),t[u].forEach(function(e){a.unshift(e)})),c.call(t,h)&&("production"!==n.env.NODE_ENV?l(Array.isArray(e),"Expected %s target to be an array; got %s",h,e):l(Array.isArray(e)),"production"!==n.env.NODE_ENV?l(Array.isArray(t[h]),"update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",h,t[h]):l(Array.isArray(t[h])),t[h].forEach(function(e){"production"!==n.env.NODE_ENV?l(Array.isArray(e),"update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",h,t[h]):l(Array.isArray(e)),a.splice.apply(a,e)})),c.call(t,m)&&("production"!==n.env.NODE_ENV?l("function"==typeof t[m],"update(): expected spec of %s to be a function; got %s.",m,t[m]):l("function"==typeof t[m]),a=t[m](a));for(var b in t)g.hasOwnProperty(b)&&g[b]||(a[b]=i(e[b],t[b]));return a}var s=e("./Object.assign"),a=e("./keyOf"),l=e("./invariant"),c={}.hasOwnProperty,p=a({$push:null}),u=a({$unshift:null}),h=a({$splice:null}),d=a({$set:null}),f=a({$merge:null}),m=a({$apply:null}),y=[p,u,h,d,f,m],g={};y.forEach(function(e){g[e]=!0}),t.exports=i}).call(this,e("_process"))},{"./Object.assign":175,"./invariant":297,"./keyOf":304,_process:1}],318:[function(e,t,n){(function(n){"use strict";var o=e("./emptyFunction"),r=o;"production"!==n.env.NODE_ENV&&(r=function(e,t){for(var n=[],o=2,r=arguments.length;r>o;o++)n.push(arguments[o]);if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(t.length<10||/^[s\W]*$/.test(t))throw new Error("The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: "+t);if(0!==t.indexOf("Failed Composite propType: ")&&!e){var i=0,s="Warning: "+t.replace(/%s/g,function(){return n[i++]});console.warn(s);try{throw new Error(s)}catch(a){}}}),t.exports=r}).call(this,e("_process"))},{"./emptyFunction":276,_process:1}],319:[function(e,t,n){t.exports=e("./lib/React")},{"./lib/React":177}],320:[function(e,t,n){"use strict";function o(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function r(){}var i="function"!=typeof Object.create?"~":!1;r.prototype._events=void 0,r.prototype.listeners=function(e,t){var n=i?i+e:e,o=this._events&&this._events[n];if(t)return!!o;if(!o)return[];if(o.fn)return[o.fn];for(var r=0,s=o.length,a=new Array(s);s>r;r++)a[r]=o[r].fn;return a},r.prototype.emit=function(e,t,n,o,r,s){var a=i?i+e:e;if(!this._events||!this._events[a])return!1;var l,c,p=this._events[a],u=arguments.length;if("function"==typeof p.fn){switch(p.once&&this.removeListener(e,p.fn,void 0,!0),u){case 1:return p.fn.call(p.context),!0;case 2:return p.fn.call(p.context,t),!0;case 3:return p.fn.call(p.context,t,n),!0;case 4:return p.fn.call(p.context,t,n,o),!0;case 5:return p.fn.call(p.context,t,n,o,r),!0;case 6:return p.fn.call(p.context,t,n,o,r,s),!0}for(c=1,l=new Array(u-1);u>c;c++)l[c-1]=arguments[c];p.fn.apply(p.context,l)}else{var h,d=p.length;for(c=0;d>c;c++)switch(p[c].once&&this.removeListener(e,p[c].fn,void 0,!0),u){case 1:p[c].fn.call(p[c].context);break;case 2:p[c].fn.call(p[c].context,t);break;case 3:p[c].fn.call(p[c].context,t,n);break;default:if(!l)for(h=1,l=new Array(u-1);u>h;h++)l[h-1]=arguments[h];p[c].fn.apply(p[c].context,l)}}return!0},r.prototype.on=function(e,t,n){var r=new o(t,n||this),s=i?i+e:e;return this._events||(this._events=i?{}:Object.create(null)),this._events[s]?this._events[s].fn?this._events[s]=[this._events[s],r]:this._events[s].push(r):this._events[s]=r,this},r.prototype.once=function(e,t,n){var r=new o(t,n||this,!0),s=i?i+e:e;return this._events||(this._events=i?{}:Object.create(null)),this._events[s]?this._events[s].fn?this._events[s]=[this._events[s],r]:this._events[s].push(r):this._events[s]=r,this},r.prototype.removeListener=function(e,t,n,o){var r=i?i+e:e;if(!this._events||!this._events[r])return this;var s=this._events[r],a=[];if(t)if(s.fn)(s.fn!==t||o&&!s.once||n&&s.context!==n)&&a.push(s);else for(var l=0,c=s.length;c>l;l++)(s[l].fn!==t||o&&!s[l].once||n&&s[l].context!==n)&&a.push(s[l]);return a.length?this._events[r]=1===a.length?a[0]:a:delete this._events[r],this},r.prototype.removeAllListeners=function(e){return this._events?(e?delete this._events[i?i+e:e]:this._events=i?{}:Object.create(null),this):this},r.prototype.off=r.prototype.removeListener,r.prototype.addListener=r.prototype.on,r.prototype.setMaxListeners=function(){return this},r.prefixed=i,"undefined"!=typeof t&&(t.exports=r)},{}],321:[function(e,t,n){"use strict";t.exports={}},{}],322:[function(e,t,n){"use strict";n.createdStores=[],n.createdActions=[],n.reset=function(){for(;n.createdStores.length;)n.createdStores.pop();for(;n.createdActions.length;)n.createdActions.pop()}},{}],323:[function(e,t,n){"use strict";var o=e("./utils"),r=e("./joins").instanceJoinCreator,i=function(e){for(var t,n=0,o={};n<(e.children||[]).length;++n)t=e.children[n],e[t]&&(o[t]=e[t]);return o},s=function a(e){var t={};for(var n in e){var r=e[n],s=i(r),l=a(s);t[n]=r;for(var c in l){var p=l[c];t[n+o.capitalize(c)]=p}}return t};t.exports={hasListener:function(e){for(var t,n,o,r=0;r<(this.subscriptions||[]).length;++r)for(o=[].concat(this.subscriptions[r].listenable),t=0;t<o.length;t++)if(n=o[t],n===e||n.hasListener&&n.hasListener(e))return!0;return!1},listenToMany:function(e){var t=s(e);for(var n in t){var r=o.callbackName(n),i=this[r]?r:this[n]?n:void 0;i&&this.listenTo(t[n],i,this[r+"Default"]||this[i+"Default"]||i)}},validateListening:function(e){return e===this?"Listener is not able to listen to itself":o.isFunction(e.listen)?e.hasListener&&e.hasListener(this)?"Listener cannot listen to this listenable because of circular loop":void 0:e+" is missing a listen method"},listenTo:function(e,t,n){var r,i,s,a=this.subscriptions=this.subscriptions||[];return o.throwIf(this.validateListening(e)),this.fetchInitialState(e,n),r=e.listen(this[t]||t,this),i=function(){var e=a.indexOf(s);o.throwIf(-1===e,"Tried to remove listen already gone from subscriptions list!"),a.splice(e,1),r()},s={stop:i,listenable:e},a.push(s),s},stopListeningTo:function(e){for(var t,n=0,r=this.subscriptions||[];n<r.length;n++)if(t=r[n],t.listenable===e)return t.stop(),o.throwIf(-1!==r.indexOf(t),"Failed to remove listen from subscriptions list!"),!0;return!1},stopListeningToAll:function(){for(var e,t=this.subscriptions||[];e=t.length;)t[0].stop(),o.throwIf(t.length!==e-1,"Failed to remove listen from subscriptions list!")},fetchInitialState:function(e,t){t=t&&this[t]||t;var n=this;if(o.isFunction(t)&&o.isFunction(e.getInitialState)){var r=e.getInitialState();r&&o.isFunction(r.then)?r.then(function(){t.apply(n,arguments)}):t.call(this,r)}},joinTrailing:r("last"),joinLeading:r("first"),joinConcat:r("all"),joinStrict:r("strict")}},{"./joins":330,"./utils":332}],324:[function(e,t,n){"use strict";var o=e("./utils");t.exports={preEmit:function(){},shouldEmit:function(){return!0},listen:function(e,t){t=t||this;var n=function(n){r||e.apply(t,n)},o=this,r=!1;return this.emitter.addListener(this.eventLabel,n),function(){r=!0,o.emitter.removeListener(o.eventLabel,n)}},promise:function(e){var t=this,n=this.children.indexOf("completed")>=0&&this.children.indexOf("failed")>=0;if(!n)throw new Error('Publisher must have "completed" and "failed" child publishers');e.then(function(e){return t.completed(e)},function(e){return t.failed(e)})},listenAndPromise:function(e,t){var n=this;t=t||this,this.willCallPromise=(this.willCallPromise||0)+1;var o=this.listen(function(){if(!e)throw new Error("Expected a function returning a promise but got "+e);var o=arguments,r=e.apply(t,o);return n.promise.call(n,r)},t);return function(){n.willCallPromise--,o.call(n)}},trigger:function(){var e=arguments,t=this.preEmit.apply(this,e);e=void 0===t?e:o.isArguments(t)?t:[].concat(t),this.shouldEmit.apply(this,e)&&this.emitter.emit(this.eventLabel,e)},triggerAsync:function(){var e=arguments,t=this;o.nextTick(function(){t.trigger.apply(t,e)})},triggerPromise:function(){var e=this,t=arguments,n=this.children.indexOf("completed")>=0&&this.children.indexOf("failed")>=0,r=o.createPromise(function(r,i){if(e.willCallPromise)return void o.nextTick(function(){var n=e.promise;e.promise=function(t){return t.then(r,i),e.promise=n,e.promise.apply(e,arguments)},e.trigger.apply(e,t)});if(n)var s=e.completed.listen(function(e){s(),a(),r(e)}),a=e.failed.listen(function(e){s(),a(),i(e)});e.triggerAsync.apply(e,t),n||r()});return r}}},{"./utils":332}],325:[function(e,t,n){"use strict";t.exports={}},{}],326:[function(e,t,n){"use strict";t.exports=function(e,t){for(var n in t)if(Object.getOwnPropertyDescriptor&&Object.defineProperty){var o=Object.getOwnPropertyDescriptor(t,n);if(!o.value||"function"!=typeof o.value||!t.hasOwnProperty(n))continue;e[n]=t[n].bind(e)}else{var r=t[n];if("function"!=typeof r||!t.hasOwnProperty(n))continue;e[n]=r.bind(e)}return e}},{}],327:[function(e,t,n){"use strict";var o=e("./utils"),r=e("./ActionMethods"),i=e("./PublisherMethods"),s=e("./Keep"),a={preEmit:1,shouldEmit:1},l=function c(e){e=e||{},o.isObject(e)||(e={actionName:e});for(var t in r)if(!a[t]&&i[t])throw new Error("Cannot override API method "+t+" in Reflux.ActionMethods. Use another method name or override it on Reflux.PublisherMethods instead.");for(var n in e)if(!a[n]&&i[n])throw new Error("Cannot override API method "+n+" in action creation. Use another method name or override it on Reflux.PublisherMethods instead.");e.children=e.children||[],e.asyncResult&&(e.children=e.children.concat(["completed","failed"]));for(var l=0,p={};l<e.children.length;l++){var u=e.children[l];p[u]=c(u)}var h=o.extend({eventLabel:"action",emitter:new o.EventEmitter,_isAction:!0},i,r,e),d=function f(){var e=f.sync?"trigger":o.environment.hasPromise?"triggerPromise":"triggerAsync";return f[e].apply(f,arguments)};return o.extend(d,p,h),s.createdActions.push(d),d};t.exports=l},{"./ActionMethods":321,"./Keep":322,"./PublisherMethods":324,"./utils":332}],328:[function(e,t,n){"use strict";var o=e("./utils"),r=e("./Keep"),i=e("./mixer"),s=e("./bindMethods"),a={preEmit:1,shouldEmit:1};t.exports=function(t){function n(){var e,n=0;if(this.subscriptions=[],this.emitter=new o.EventEmitter,this.eventLabel="change",s(this,t),this.init&&o.isFunction(this.init)&&this.init(),this.listenables)for(e=[].concat(this.listenables);n<e.length;n++)this.listenToMany(e[n])}var l=e("./StoreMethods"),c=e("./PublisherMethods"),p=e("./ListenerMethods");t=t||{};for(var u in l)if(!a[u]&&(c[u]||p[u]))throw new Error("Cannot override API method "+u+" in Reflux.StoreMethods. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.");for(var h in t)if(!a[h]&&(c[h]||p[h]))throw new Error("Cannot override API method "+h+" in store creation. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.");t=i(t),o.extend(n.prototype,p,c,l,t);var d=new n;return r.createdStores.push(d),d}},{"./Keep":322,"./ListenerMethods":323,"./PublisherMethods":324,"./StoreMethods":325,"./bindMethods":326,"./mixer":331,"./utils":332}],329:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o={version:{"reflux-core":"0.2.1"}};o.ActionMethods=e("./ActionMethods"),o.ListenerMethods=e("./ListenerMethods"),o.PublisherMethods=e("./PublisherMethods"),o.StoreMethods=e("./StoreMethods"),o.createAction=e("./createAction"),o.createStore=e("./createStore");var r=e("./joins").staticJoinCreator;o.joinTrailing=o.all=r("last"),o.joinLeading=r("first"),o.joinStrict=r("strict"),o.joinConcat=r("all");var i=o.utils=e("./utils");o.EventEmitter=i.EventEmitter,o.Promise=i.Promise,o.createActions=function(){var e=function(e,t){Object.keys(e).forEach(function(n){var r=e[n];t[n]=o.createAction(r)})};return function(t){var n={};return t instanceof Array?t.forEach(function(t){i.isObject(t)?e(t,n):n[t]=o.createAction(t)}):e(t,n),n}}(),o.setEventEmitter=function(e){o.EventEmitter=i.EventEmitter=e},o.setPromise=function(e){o.Promise=i.Promise=e},o.setPromiseFactory=function(e){i.createPromise=e},o.nextTick=function(e){i.nextTick=e},o.use=function(e){e(o)},o.__keep=e("./Keep"),Function.prototype.bind||console.error("Function.prototype.bind not available. ES5 shim required. https://github.com/spoike/refluxjs#es5"),n["default"]=o,t.exports=n["default"]},{"./ActionMethods":321,"./Keep":322,"./ListenerMethods":323,"./PublisherMethods":324,"./StoreMethods":325,"./createAction":327,"./createStore":328,"./joins":330,"./utils":332}],330:[function(e,t,n){"use strict";function o(e,t,n){return function(){var o,r=n.subscriptions,i=r?r.indexOf(e):-1;for(l.throwIf(-1===i,"Tried to remove join already gone from subscriptions list!"),o=0;o<t.length;o++)t[o]();r.splice(i,1)}}function r(e){e.listenablesEmitted=new Array(e.numberOfListenables),e.args=new Array(e.numberOfListenables)}function i(e,t){return function(){var n=c.call(arguments);if(t.listenablesEmitted[e])switch(t.strategy){case"strict":throw new Error("Strict join failed because listener triggered twice.");case"last":t.args[e]=n;break;case"all":t.args[e].push(n)}else t.listenablesEmitted[e]=!0,t.args[e]="all"===t.strategy?[n]:n;s(t)}}function s(e){for(var t=0;t<e.numberOfListenables;t++)if(!e.listenablesEmitted[t])return;e.callback.apply(e.listener,e.args),r(e)}var a=e("./createStore"),l=e("./utils"),c=Array.prototype.slice,p={strict:"joinStrict",first:"joinLeading",last:"joinTrailing",all:"joinConcat"};n.staticJoinCreator=function(e){return function(){var t=c.call(arguments);return a({init:function(){this[p[e]].apply(this,t.concat("triggerAsync"))}})}},n.instanceJoinCreator=function(e){return function(){l.throwIf(arguments.length<2,"Cannot create a join with less than 2 listenables!");var t,n,s=c.call(arguments),a=s.pop(),p=s.length,u={numberOfListenables:p,callback:this[a]||a,listener:this,strategy:e},h=[];for(t=0;p>t;t++)l.throwIf(this.validateListening(s[t]));for(t=0;p>t;t++)h.push(s[t].listen(i(t,u),this));return r(u),n={listenable:s},n.stop=o(n,h,this),this.subscriptions=(this.subscriptions||[]).concat(n),n}}},{"./createStore":328,"./utils":332}],331:[function(e,t,n){"use strict";var o=e("./utils");t.exports=function(e){var t={init:[],preEmit:[],shouldEmit:[]},n=function r(e){var n={};return e.mixins&&e.mixins.forEach(function(e){o.extend(n,r(e))}),o.extend(n,e),Object.keys(t).forEach(function(n){e.hasOwnProperty(n)&&t[n].push(e[n])}),n}(e);return t.init.length>1&&(n.init=function(){var e=arguments;t.init.forEach(function(t){t.apply(this,e)},this)}),t.preEmit.length>1&&(n.preEmit=function(){return t.preEmit.reduce(function(e,t){var n=t.apply(this,e);return void 0===n?e:[n]}.bind(this),arguments)}),t.shouldEmit.length>1&&(n.shouldEmit=function(){var e=arguments;return!t.shouldEmit.some(function(t){return!t.apply(this,e)},this)}),Object.keys(t).forEach(function(e){1===t[e].length&&(n[e]=t[e][0])}),n}},{"./utils":332}],332:[function(require,module,exports){"use strict";function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}function callbackName(e,t){return t=t||"on",t+exports.capitalize(e)}function checkEnv(target){var flag=void 0;try{eval(target)&&(flag=!0)}catch(e){flag=!1}environment[callbackName(target,"has")]=flag}function isObject(e){var t=typeof e;return"function"===t||"object"===t&&!!e}function extend(e){if(!isObject(e))return e;for(var t,n,o=1,r=arguments.length;r>o;o++){t=arguments[o];for(n in t)if(Object.getOwnPropertyDescriptor&&Object.defineProperty){var i=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,i)}else e[n]=t[n]}return e}function isFunction(e){return"function"==typeof e}function object(e,t){for(var n={},o=0;o<e.length;o++)n[e[o]]=t[o];return n}function isArguments(e){return"object"==typeof e&&"callee"in e&&"number"==typeof e.length}function throwIf(e,t){if(e)throw Error(t||e)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.capitalize=capitalize,exports.callbackName=callbackName,exports.isObject=isObject,exports.extend=extend,exports.isFunction=isFunction,exports.object=object,exports.isArguments=isArguments,exports.throwIf=throwIf;var environment={};exports.environment=environment,checkEnv("setImmediate"),checkEnv("Promise"),exports.EventEmitter=require("eventemitter3"),exports.nextTick=environment.hasSetImmediate?function(e){setImmediate(e)}:function(e){setTimeout(e,0)},environment.hasPromise?(exports.Promise=Promise,exports.createPromise=function(e){return new exports.Promise(e)}):(exports.Promise=null,exports.createPromise=function(){})},{eventemitter3:320}],333:[function(e,t,n){var o=e("reflux-core/lib/utils"),r=e("reflux-core/lib/ListenerMethods");t.exports=o.extend({componentWillUnmount:r.stopListeningToAll},r)},{"reflux-core/lib/ListenerMethods":323,"reflux-core/lib/utils":332}],334:[function(e,t,n){var o=e("reflux-core/lib/ListenerMethods"),r=e("./ListenerMixin"),i=e("reflux-core/lib/utils");t.exports=function(e,t){return{getInitialState:function(){return i.isFunction(e.getInitialState)?void 0===t?e.getInitialState():i.object([t],[e.getInitialState()]):{}},componentDidMount:function(){i.extend(this,o);var n=this,r=void 0===t?this.setState:function(e){("undefined"==typeof n.isMounted||n.isMounted()===!0)&&n.setState(i.object([t],[e]))};this.listenTo(e,r)},componentWillUnmount:r.componentWillUnmount}}},{"./ListenerMixin":333,"reflux-core/lib/ListenerMethods":323,"reflux-core/lib/utils":332}],335:[function(e,t,n){var o=e("reflux-core/lib/ListenerMethods"),r=e("./ListenerMixin"),i=e("reflux-core/lib/utils");t.exports=function(e,t,n){return n=i.isFunction(t)?t:n,{getInitialState:function(){if(i.isFunction(e.getInitialState)){if(i.isFunction(t))return n.call(this,e.getInitialState());var o=n.call(this,e.getInitialState());return"undefined"!=typeof o?i.object([t],[o]):{}}return{}},componentDidMount:function(){i.extend(this,o);var r=this,s=function(e){if(i.isFunction(t))r.setState(n.call(r,e));else{var o=n.call(r,e);r.setState(i.object([t],[o]))}};this.listenTo(e,s)},componentWillUnmount:r.componentWillUnmount}}},{"./ListenerMixin":333,"reflux-core/lib/ListenerMethods":323,"reflux-core/lib/utils":332}],336:[function(e,t,n){var o=e("reflux-core");o.connect=e("./connect"),o.connectFilter=e("./connectFilter"),o.ListenerMixin=e("./ListenerMixin"),o.listenTo=e("./listenTo"),o.listenToMany=e("./listenToMany"),t.exports=o},{"./ListenerMixin":333,"./connect":334,"./connectFilter":335,"./listenTo":337,"./listenToMany":338,"reflux-core":329}],337:[function(e,t,n){var o=e("reflux-core/lib/ListenerMethods");t.exports=function(e,t,n){return{componentDidMount:function(){for(var r in o)if(this[r]!==o[r]){if(this[r])throw"Can't have other property '"+r+"' when using Reflux.listenTo!";this[r]=o[r]}this.listenTo(e,t,n)},componentWillUnmount:o.stopListeningToAll}}},{"reflux-core/lib/ListenerMethods":323}],338:[function(e,t,n){var o=e("reflux-core/lib/ListenerMethods");t.exports=function(e){return{componentDidMount:function(){for(var t in o)if(this[t]!==o[t]){if(this[t])throw"Can't have other property '"+t+"' when using Reflux.listenToMany!";this[t]=o[t]}this.listenToMany(e)},componentWillUnmount:o.stopListeningToAll}}},{"reflux-core/lib/ListenerMethods":323}],339:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var r=e("reflux"),i=o(r),s=i["default"].createActions(["authenticate"]);t.exports=s},{reflux:336}],340:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var r=e("reflux"),i=o(r),s=e("actions/AuthActions"),a=o(s),l={authenticated:!1,secret:null},c=i["default"].createStore({listenables:a["default"],onAuthenticate:function(e){var t=this;fetch("/api/auth/",{method:"post",body:e}).then(function(n){200==n.status&&(l={authenticated:!0,secret:e}),t.trigger(l)})}});t.exports=c},{"actions/AuthActions":339,reflux:336}],341:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var r=e("react"),i=o(r),s=e("react-cookie"),a=o(s),l=e("reflux"),c=o(l),p=e("actions/AuthActions"),u=o(p),h=e("stores/AuthStore"),d=o(h),f=e("react-tap-event-plugin"),m=o(f),y=e("material-ui"),g=o(y),v=new g["default"].Styles.ThemeManager;m["default"]();var b=i["default"].createClass({displayName:"Auth",mixins:[c["default"].listenTo(d["default"],"onAuthChanged")],childContextTypes:{muiTheme:i["default"].PropTypes.Object},getChildContext:function(){return{muiTheme:v.getCurrentTheme()}},onAuthChanged:function(e){e.authenticated?(a["default"].save("authSecret",e.secret),window.location.href="/cms"):this.refs.secretField.setErrorText("Incorrect Secret")},_onSubmit:function(){u["default"].authenticate(this.refs.secretField.getValue()),this.refs.secretField.clearValue()},render:function(){return i["default"].createElement("section",{id:"auth-container"},i["default"].createElement(y.TextField,{ref:"secretField",hintText:"secret",type:"password"}),i["default"].createElement(y.RaisedButton,{label:"submit",style:{marginLeft:"20"},onTouchTap:this._onSubmit}))}});i["default"].render(i["default"].createElement(b,null),document.getElementById("auth"))},{"actions/AuthActions":339,"material-ui":36,react:319,"react-cookie":141,"react-tap-event-plugin":146,reflux:336,"stores/AuthStore":340}]},{},[341]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkF1dGguanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLDEsIm1vZHVsZSIsImNsZWFuVXBOZXh0VGljayIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJjb25jYXQiLCJxdWV1ZUluZGV4IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibGVuIiwicnVuIiwiY2xlYXJUaW1lb3V0IiwiSXRlbSIsImZ1biIsImFycmF5IiwidGhpcyIsIm5vb3AiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJhcmdzIiwiQXJyYXkiLCJhcmd1bWVudHMiLCJwdXNoIiwicHJvdG90eXBlIiwiYXBwbHkiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJiaW5kaW5nIiwibmFtZSIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLDIsIlJlYWN0IiwiU3R5bGVQcm9wYWJsZSIsIlR5cG9ncmFwaHkiLCJJY29uQnV0dG9uIiwiTmF2aWdhdGlvbk1lbnUiLCJQYXBlciIsIkFwcEJhciIsImNyZWF0ZUNsYXNzIiwiZGlzcGxheU5hbWUiLCJtaXhpbnMiLCJjb250ZXh0VHlwZXMiLCJtdWlUaGVtZSIsIlByb3BUeXBlcyIsIm9iamVjdCIsInByb3BUeXBlcyIsIm9uTGVmdEljb25CdXR0b25Ub3VjaFRhcCIsImZ1bmMiLCJvblJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwIiwic2hvd01lbnVJY29uQnV0dG9uIiwiYm9vbCIsInN0eWxlIiwiaWNvbkNsYXNzTmFtZUxlZnQiLCJzdHJpbmciLCJpY29uQ2xhc3NOYW1lUmlnaHQiLCJpY29uRWxlbWVudExlZnQiLCJlbGVtZW50IiwiaWNvbkVsZW1lbnRSaWdodCIsImljb25TdHlsZVJpZ2h0Iiwibm9kZSIsInpEZXB0aCIsIm51bWJlciIsImdldERlZmF1bHRQcm9wcyIsImNvbXBvbmVudERpZE1vdW50IiwiTk9ERV9FTlYiLCJwcm9wcyIsImNvbnNvbGUiLCJ3YXJuIiwiZ2V0U3R5bGVzIiwic3BhY2luZyIsImNvbnRleHQiLCJ0aGVtZVZhcmlhYmxlcyIsImNvbXBvbmVudCIsImFwcEJhciIsImljb25CdXR0b25TaXplIiwiYnV0dG9uIiwiZmxhdEJ1dHRvblNpemUiLCJzdHlsZXMiLCJyb290IiwiekluZGV4Iiwid2lkdGgiLCJkaXNwbGF5IiwibWluSGVpZ2h0IiwiaGVpZ2h0IiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJwYWRkaW5nTGVmdCIsImRlc2t0b3BHdXR0ZXIiLCJwYWRkaW5nUmlnaHQiLCJ3aGl0ZVNwYWNlIiwib3ZlcmZsb3ciLCJ0ZXh0T3ZlcmZsb3ciLCJtYXJnaW4iLCJwYWRkaW5nVG9wIiwibGV0dGVyU3BhY2luZyIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsImZvbnRXZWlnaHROb3JtYWwiLCJ0ZXh0Q29sb3IiLCJsaW5lSGVpZ2h0IiwibWFpbkVsZW1lbnQiLCJib3hGbGV4IiwiZmxleCIsImljb25CdXR0b24iLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkxlZnQiLCJpY29uU3R5bGUiLCJmaWxsIiwiZmxhdEJ1dHRvbiIsInJlbmRlciIsIm1lbnVFbGVtZW50TGVmdCIsInVuZGVmaW5lZCIsIm1lbnVFbGVtZW50UmlnaHQiLCJpY29uUmlnaHRTdHlsZSIsIm1lcmdlQW5kUHJlZml4IiwidGl0bGVFbGVtZW50IiwiU3RyaW5nIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJjbG9uZUVsZW1lbnQiLCJjaGlsZCIsImljb25DbGFzc05hbWUiLCJvblRvdWNoVGFwIiwiX29uTGVmdEljb25CdXR0b25Ub3VjaFRhcCIsIm1lcmdlU3R5bGVzIiwiX29uUmlnaHRJY29uQnV0dG9uVG91Y2hUYXAiLCJyb3VuZGVkIiwiY2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJldmVudCIsIi4vaWNvbi1idXR0b24iLCIuL21peGlucy9zdHlsZS1wcm9wYWJsZSIsIi4vcGFwZXIiLCIuL3N0eWxlcy90eXBvZ3JhcGh5IiwiLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9tZW51IiwiX3Byb2Nlc3MiLCJyZWFjdCIsMywiQXBwQ2FudmFzIiwiX3RoaXMiLCJwYWxldHRlIiwiY2FudmFzQ29sb3IiLCJXZWJraXRGb250U21vb3RoaW5nIiwibmV3Q2hpbGRyZW4iLCJDaGlsZHJlbiIsIm1hcCIsImN1cnJlbnRDaGlsZCIsInBvc2l0aW9uIiw0LCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJvYmoiLCJrZXlzIiwidGFyZ2V0IiwiaW5kZXhPZiIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJzb3VyY2UiLCJrZXkiLCJDb2xvcnMiLCJBdmF0YXIiLCJpY29uIiwic2l6ZSIsInNyYyIsImdyZXk0MDAiLCJ3aGl0ZSIsIl9wcm9wcyIsIm90aGVyIiwidXNlclNlbGVjdCIsImJvcmRlclJhZGl1cyIsImJvcmRlckNvbG9yIiwiYXZhdGFyIiwiYm9yZGVyIiwidGV4dEFsaWduIiwic3R5bGVJY29uIiwiaWNvbkVsZW1lbnQiLCIuL3N0eWxlcy9jb2xvcnMiLCJyZWFjdC9hZGRvbnMiLDUsIkF1dG9QcmVmaXgiLCJCZWZvcmVBZnRlcldyYXBwZXIiLCJiZWZvcmVTdHlsZSIsImFmdGVyU3R5bGUiLCJiZWZvcmVFbGVtZW50VHlwZSIsImFmdGVyRWxlbWVudFR5cGUiLCJlbGVtZW50VHlwZSIsImJlZm9yZUVsZW1lbnQiLCJhZnRlckVsZW1lbnQiLCJhbGwiLCJib3hTaXppbmciLCIuL3N0eWxlcy9hdXRvLXByZWZpeCIsNiwiUHVyZVJlbmRlck1peGluIiwiYWRkb25zIiwiU3R5bGVzIiwiRmxhdEJ1dHRvbkxhYmVsIiwibGFiZWwiLCJnZXRDb250ZXh0UHJvcHMiLCJ0aGVtZSIsInNwYWNpbmdEZXNrdG9wR3V0dGVyTGVzcyIsImRlc2t0b3BHdXR0ZXJMZXNzIiwiY29udGV4dFByb3BzIiwibWVyZ2VkUm9vdFN0eWxlcyIsInBhZGRpbmciLCIuLi91dGlscy9zdHlsZXMiLDcsIkNhcmRBY3Rpb25zIiwiZXhwYW5kYWJsZSIsInNob3dFeHBhbmRhYmxlQnV0dG9uIiw4LCJPcGVuSWNvbiIsIkNsb3NlSWNvbiIsIkNhcmRFeHBhbmRhYmxlIiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJvbkV4cGFuZGluZyIsImlzUmVxdWlyZWQiLCJleHBhbmRlZCIsIl9vbkV4cGFuZGluZyIsImV4cGFuZGFibGVCdG4iLCJvbkNsaWNrIiwiLi4vaWNvbi1idXR0b24iLCIuLi9zdmctaWNvbnMvaGFyZHdhcmUva2V5Ym9hcmQtYXJyb3ctZG93biIsIi4uL3N2Zy1pY29ucy9oYXJkd2FyZS9rZXlib2FyZC1hcnJvdy11cCIsOSwiQ2FyZEhlYWRlciIsInRpdGxlQ29sb3IiLCJ0aXRsZVN0eWxlIiwic3VidGl0bGUiLCJzdWJ0aXRsZUNvbG9yIiwic3VidGl0bGVTdHlsZSIsInRleHRTdHlsZSIsImRhcmtCbGFjayIsImxpZ2h0QmxhY2siLCJmb250V2VpZ2h0TWVkaXVtIiwidGV4dCIsInZlcnRpY2FsQWxpZ24iLCJyb290U3R5bGUiLCJpc1ZhbGlkRWxlbWVudCIsImF2YXRhck1lcmdlZFN0eWxlIiwiLi4vYXZhdGFyIiwiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlIiwiLi4vc3R5bGVzIiwxMCwiQ2FyZE1lZGlhIiwib3ZlcmxheSIsIm92ZXJsYXlTdHlsZSIsIm92ZXJsYXlDb250YWluZXJTdHlsZSIsIm92ZXJsYXlDb250ZW50U3R5bGUiLCJtZWRpYVN0eWxlIiwib3ZlcmxheUNvbnRhaW5lciIsImxlZnQiLCJvdmVybGF5Q29udGVudCIsImJhY2tncm91bmQiLCJtZWRpYSIsIm1lZGlhQ2hpbGQiLCJtYXhXaWR0aCIsIm1pbldpZHRoIiwib3ZlcmxheUNoaWxkcmVuIiwiZGFya1doaXRlIiwibGlnaHRXaGl0ZSIsMTEsIkNhcmRUZXh0IiwiY2siLDEyLCJDYXJkVGl0bGUiLDEzLCJDYXJkIiwiZ2V0SW5pdGlhbFN0YXRlIiwiaW5pdGlhbGx5RXhwYW5kZWQiLCJvbkV4cGFuZENoYW5nZSIsIl9vbkV4cGFuZGFibGUiLCJ2YWx1ZSIsInNldFN0YXRlIiwibGFzdEVsZW1lbnQiLCJzdGF0ZSIsImFkZEJvdHRvbVBhZGRpbmciLCJtZXJnZWRTdHlsZXMiLCJwYWRkaW5nQm90dG9tIiwiLi4vcGFwZXIiLCIuL2NhcmQtZXhwYW5kYWJsZSIsMTQsIkVuaGFuY2VkU3dpdGNoIiwiVHJhbnNpdGlvbnMiLCJDaGVja2JveE91dGxpbmUiLCJDaGVja2JveENoZWNrZWQiLCJDaGVja2JveCIsImNoZWNrZWQiLCJjaGVja2VkSWNvbiIsImRlZmF1bHRDaGVja2VkIiwibGFiZWxTdHlsZSIsIm9uQ2hlY2siLCJ1bkNoZWNrZWRJY29uIiwic3dpdGNoZWQiLCJ2YWx1ZUxpbmsiLCJnZXRUaGVtZSIsImNoZWNrYm94IiwiY2hlY2tib3hTaXplIiwiY2hlY2siLCJvcGFjaXR5IiwidHJhbnNmb3JtIiwidHJhbnNpdGlvbk9yaWdpbiIsInRyYW5zaXRpb24iLCJlYXNlT3V0IiwiY2hlY2tlZENvbG9yIiwiYm94IiwiYm94Q29sb3IiLCJjaGVja1doZW5Td2l0Y2hlZCIsImJveFdoZW5Td2l0Y2hlZCIsImNoZWNrV2hlbkRpc2FibGVkIiwiZGlzYWJsZWRDb2xvciIsImJveFdoZW5EaXNhYmxlZCIsImRpc2FibGVkIiwibGFiZWxEaXNhYmxlZENvbG9yIiwibGFiZWxDb2xvciIsImJveFN0eWxlcyIsImNoZWNrU3R5bGVzIiwiY2hlY2tlZEVsZW1lbnQiLCJ1bkNoZWNrZWRFbGVtZW50IiwiY2hlY2tib3hFbGVtZW50IiwicmlwcGxlQ29sb3IiLCJtZXJnZWRJY29uU3R5bGUiLCJlbmhhbmNlZFN3aXRjaFByb3BzIiwicmVmIiwiaW5wdXRUeXBlIiwic3dpdGNoRWxlbWVudCIsIm9uU3dpdGNoIiwiX2hhbmRsZUNoZWNrIiwib25QYXJlbnRTaG91bGRVcGRhdGUiLCJfaGFuZGxlU3RhdGVDaGFuZ2UiLCJkZWZhdWx0U3dpdGNoZWQiLCJsYWJlbFBvc2l0aW9uIiwiaXNDaGVja2VkIiwicmVmcyIsImVuaGFuY2VkU3dpdGNoIiwiaXNTd2l0Y2hlZCIsInNldENoZWNrZWQiLCJuZXdDaGVja2VkVmFsdWUiLCJzZXRTd2l0Y2hlZCIsImlzSW5wdXRDaGVja2VkIiwibmV3U3dpdGNoZWQiLCIuL2VuaGFuY2VkLXN3aXRjaCIsIi4vc3R5bGVzL3RyYW5zaXRpb25zIiwiLi9zdmctaWNvbnMvdG9nZ2xlL2NoZWNrLWJveCIsIi4vc3ZnLWljb25zL3RvZ2dsZS9jaGVjay1ib3gtb3V0bGluZS1ibGFuayIsMTUsIkNpcmN1bGFyUHJvZ3Jlc3MiLCJtb2RlIiwib25lT2YiLCJtaW4iLCJtYXgiLCJpbm5lclN0eWxlIiwiX2dldFJlbGF0aXZlVmFsdWUiLCJjbGFtcGVkVmFsdWUiLCJNYXRoIiwicmFuZ2VWYWx1ZSIsInJlbFZhbHVlIiwicm91bmQiLCJ3cmFwcGVyIiwiZmluZERPTU5vZGUiLCJwYXRoIiwiX3NjYWxlUGF0aCIsIl9yb3RhdGVXcmFwcGVyIiwic3RlcCIsImJpbmQiLCJpc01vdW50ZWQiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwic2V0Iiwiem9vbSIsImNyZWF0ZSIsInN2ZyIsInN0cm9rZSIsInByaW1hcnkxQ29sb3IiLCJzdHJva2VMaW5lY2FwIiwicmVsVmFsIiwiY3giLCJjeSIsInN0cm9rZVdpZHRoIiwic3Ryb2tlTWl0ZXJsaW1pdCIsMTYsIkNsZWFyRml4IiwiYmVmb3JlIiwiY29udGVudCIsImFmdGVyIiwiY2xlYXIiLCIuL2JlZm9yZS1hZnRlci13cmFwcGVyIiwxNywiRGF0ZVRpbWUiLCJEYXlCdXR0b24iLCJDYWxlbmRhck1vbnRoIiwiZGlzcGxheURhdGUiLCJvbkRheVRvdWNoVGFwIiwic2VsZWN0ZWREYXRlIiwibWluRGF0ZSIsIm1heERhdGUiLCJzaG91bGREaXNhYmxlRGF0ZSIsImF1dG9PayIsIl9nZXRXZWVrRWxlbWVudHMiLCJpc1NlbGVjdGVkRGF0ZURpc2FibGVkIiwiX3NlbGVjdGVkRGF0ZURpc2FibGVkIiwid2Vla0FycmF5IiwiZ2V0V2Vla0FycmF5Iiwid2VlayIsIl9nZXREYXlFbGVtZW50cyIsIl90aGlzMiIsImRheSIsImoiLCJpc1NhbWVEYXRlIiwiaXNFcXVhbERhdGUiLCJfc2hvdWxkRGlzYWJsZURhdGUiLCJzZWxlY3RlZCIsImRhdGUiLCJfaGFuZGxlRGF5VG91Y2hUYXAiLCJpc0JldHdlZW5EYXRlcyIsIi4uL2NsZWFyZml4IiwiLi4vdXRpbHMvZGF0ZS10aW1lIiwiLi9kYXktYnV0dG9uIiwxOCwiVG9vbGJhciIsIlRvb2xiYXJHcm91cCIsIk5hdmlnYXRpb25DaGV2cm9uTGVmdCIsIk5hdmlnYXRpb25DaGV2cm9uTGVmdERvdWJsZSIsIk5hdmlnYXRpb25DaGV2cm9uUmlnaHQiLCJOYXZpZ2F0aW9uQ2hldnJvblJpZ2h0RG91YmxlIiwiU2xpZGVJblRyYW5zaXRpb25Hcm91cCIsIkNhbGVuZGFyVG9vbGJhciIsIm9uTW9udGhDaGFuZ2UiLCJvblllYXJDaGFuZ2UiLCJwcmV2WWVhciIsIm5leHRZZWFyIiwicHJldk1vbnRoIiwibmV4dE1vbnRoIiwiaGlkZVllYXJDaGFuZ2VCdXR0b25zIiwidHJhbnNpdGlvbkRpcmVjdGlvbiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJkaXJlY3Rpb24iLCJfc3R5bGVzIiwibW9udGgiLCJnZXRGdWxsTW9udGgiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJwcmV2WWVhckNoYW5nZUJ1dHRvbiIsIl9nZXRQcmV2WWVhckNoYW5nZUJ1dHRvbiIsIm5leHRZZWFyQ2hhbmdlQnV0dG9uIiwiX2dldE5leHRZZWFyQ2hhbmdlQnV0dG9uIiwibm9HdXR0ZXIiLCJmbG9hdCIsIl9wcmV2TW9udGhUb3VjaFRhcCIsIl9uZXh0TW9udGhUb3VjaFRhcCIsIl9wcmV2WWVhclRvdWNoVGFwIiwiX25leHRZZWFyVG91Y2hUYXAiLCIuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi1jaGV2cm9uLWxlZnQtZG91YmxlIiwiLi4vc3ZnLWljb25zL25hdmlnYXRpb24tY2hldnJvbi1yaWdodC1kb3VibGUiLCIuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9jaGV2cm9uLWxlZnQiLCIuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9jaGV2cm9uLXJpZ2h0IiwiLi4vdG9vbGJhci90b29sYmFyIiwiLi4vdG9vbGJhci90b29sYmFyLWdyb3VwIiwiLi4vdHJhbnNpdGlvbi1ncm91cHMvc2xpZGUtaW4iLDE5LCJZZWFyQnV0dG9uIiwiQ2FsZW5kYXJZZWFyIiwib25ZZWFyVG91Y2hUYXAiLCJfc2Nyb2xsVG9TZWxlY3RlZFllYXIiLCJjb21wb25lbnREaWRVcGRhdGUiLCJ5ZWFycyIsIl9nZXRZZWFycyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsIm1pblllYXIiLCJtYXhZZWFyIiwiZGF0ZUNoZWNrIiwiY2xvbmUiLCJzZXRGdWxsWWVhciIsInNlbGVjdGVkUHJvcHMiLCJ5ZWFyQnV0dG9uIiwiX2hhbmRsZVllYXJUb3VjaFRhcCIsInNlbGVjdGVkWWVhckJ1dHRvbiIsImNvbnRhaW5lciIsImdldERPTU5vZGUiLCJ5ZWFyQnV0dG9uTm9kZSIsImNvbnRhaW5lckhlaWdodCIsImNsaWVudEhlaWdodCIsInllYXJCdXR0b25Ob2RlSGVpZ2h0Iiwic2Nyb2xsWU9mZnNldCIsIm9mZnNldFRvcCIsInNjcm9sbFRvcCIsIi4uL3N0eWxlcy9jb2xvcnMiLCIuL3llYXItYnV0dG9uIiwyMCwiV2luZG93TGlzdGVuYWJsZSIsIktleUNvZGUiLCJEYXRlRGlzcGxheSIsIkNhbGVuZGFyIiwiaW5pdGlhbERhdGUiLCJpc0FjdGl2ZSIsImhpZGVUb29sYmFyWWVhckNoYW5nZSIsInNob3VsZFNob3dNb250aERheVBpY2tlckZpcnN0Iiwic2hvdWxkU2hvd1llYXJQaWNrZXJGaXJzdCIsInNob3dZZWFyU2VsZWN0b3IiLCJ3aW5kb3dMaXN0ZW5lcnMiLCJrZXlkb3duIiwiRGF0ZSIsImFkZFllYXJzIiwiZ2V0Rmlyc3REYXlPZk1vbnRoIiwiZGlzcGxheU1vbnRoRGF5IiwidHJhbnNpdGlvbkVudGVyIiwiZCIsInllYXJDb3VudCIsInllYXJEaWZmIiwid2Vla0NvdW50IiwidG9vbGJhckludGVyYWN0aW9ucyIsIl9nZXRUb29sYmFySW50ZXJhY3Rpb25zIiwiaXNNdWx0aVllYXJSYW5nZSIsImlzTGFuZHNjYXBlIiwiY2FsZW5kYXJDb250YWluZXIiLCJ5ZWFyQ29udGFpbmVyIiwiZGF0ZURpc3BsYXkiLCJ3ZWVrVGl0bGUiLCJ3ZWVrVGl0bGVEYXkiLCJsaXN0U3R5bGUiLCJoYW5kbGVNb250aERheUNsaWNrIiwiX2hhbmRsZU1vbnRoRGF5Q2xpY2siLCJoYW5kbGVZZWFyQ2xpY2siLCJfaGFuZGxlWWVhckNsaWNrIiwieWVhclNlbGVjdGlvbkF2YWlsYWJsZSIsIm1vbnRoRGF5U2VsZWN0ZWQiLCJfaGFuZGxlTW9udGhDaGFuZ2UiLCJfaGFuZGxlWWVhckNoYW5nZSIsInRvRGF0ZVN0cmluZyIsIl95ZWFyU2VsZWN0b3IiLCJnZXRTZWxlY3RlZERhdGUiLCJjYWxlbmRhciIsIl9hZGRTZWxlY3RlZERheXMiLCJkYXlzIiwiX3NldFNlbGVjdGVkRGF0ZSIsImFkZERheXMiLCJfYWRkU2VsZWN0ZWRNb250aHMiLCJtb250aHMiLCJhZGRNb250aHMiLCJfYWRkU2VsZWN0ZWRZZWFycyIsIl9zZXREaXNwbGF5RGF0ZSIsIm5ld1NlbGVjdGVkRGF0ZSIsIm5ld0Rpc3BsYXlEYXRlIiwiYWRqdXN0ZWREYXRlIiwiaXNCZWZvcmVEYXRlIiwiaXNBZnRlckRhdGUiLCJtb250aERpZmYiLCJfaGFuZGxlV2luZG93S2V5RG93biIsImtleUNvZGUiLCJVUCIsImFsdEtleSIsInNoaWZ0S2V5IiwiRE9XTiIsIlJJR0hUIiwiTEVGVCIsIi4uL21peGlucy93aW5kb3ctbGlzdGVuYWJsZSIsIi4uL3N0eWxlcy90cmFuc2l0aW9ucyIsIi4uL3V0aWxzL2tleS1jb2RlIiwiLi9jYWxlbmRhci1tb250aCIsIi4vY2FsZW5kYXItdG9vbGJhciIsIi4vY2FsZW5kYXIteWVhciIsIi4vZGF0ZS1kaXNwbGF5IiwyMSwic2VsZWN0ZWRZZWFyIiwiZGF0ZVBpY2tlciIsImRheU9mV2VlayIsImdldERheU9mV2VlayIsImdldFNob3J0TW9udGgiLCJnZXREYXRlIiwiZGF0ZVlQb3NpdGlvbiIsImRheVlQb3NpdGlvbiIsInllYXJZUG9zaXRpb24iLCJkYXRlQ29udGFpbmVyIiwiZG93Q29udGFpbmVyIiwic2VsZWN0Q29sb3IiLCJkb3ciLCJzZWxlY3RUZXh0Q29sb3IiLCJjdXJzb3IiLCJ0ZXh0VHJhbnNmb3JtIiwiLi4vc3R5bGVzL2F1dG8tcHJlZml4IiwyMiwiQ3NzRXZlbnQiLCJEaWFsb2ciLCJGbGF0QnV0dG9uIiwiRGF0ZVBpY2tlckRpYWxvZyIsIm9uQWNjZXB0Iiwib25TaG93Iiwib25EaXNtaXNzIiwib25DbGlja0F3YXkiLCJrZXl1cCIsImlzQ2FsZW5kYXJBY3RpdmUiLCJzaG93TW9udGhEYXlQaWNrZXIiLCJjYWxlbmRhclRleHRDb2xvciIsImRpYWxvZ0NvbnRlbnQiLCJkaWFsb2dCb2R5Q29udGVudCIsImFjdGlvbnMiLCJzZWNvbmRhcnkiLCJfaGFuZGxlQ2FuY2VsVG91Y2hUYXAiLCJfaGFuZGxlT0tUb3VjaFRhcCIsImNvbnRlbnRTdHlsZSIsImJvZHlTdHlsZSIsIl9oYW5kbGVEaWFsb2dEaXNtaXNzIiwiX2hhbmRsZURpYWxvZ1Nob3ciLCJfaGFuZGxlRGlhbG9nQ2xpY2tBd2F5IiwicmVwb3NpdGlvbk9uVXBkYXRlIiwiX29uRGF5VG91Y2hUYXAiLCJzaG93IiwiZGlhbG9nIiwiZGlzbWlzcyIsIm9uVHJhbnNpdGlvbkVuZCIsIl9oYW5kbGVXaW5kb3dLZXlVcCIsIkVOVEVSIiwiLi4vZGlhbG9nIiwiLi4vZmxhdC1idXR0b24iLCIuLi91dGlscy9jc3MtZXZlbnQiLCIuL2NhbGVuZGFyIiwyMywiVGV4dEZpZWxkIiwiRGF0ZVBpY2tlciIsImRlZmF1bHREYXRlIiwiZm9ybWF0RGF0ZSIsIm9uQ2hhbmdlIiwib25Gb2N1cyIsInRleHRGaWVsZFN0eWxlIiwiZm9ybWF0IiwiX2lzQ29udHJvbGxlZCIsIl9nZXRDb250cm9sbGVkRGF0ZSIsImRpYWxvZ0RhdGUiLCJuZXdEYXRlIiwiX2hhbmRsZUlucHV0Rm9jdXMiLCJfaGFuZGxlSW5wdXRUb3VjaFRhcCIsIl9oYW5kbGVEaWFsb2dBY2NlcHQiLCJzZXREYXRlIiwiZXJyb3IiLCJvcGVuRGlhbG9nIiwiZGlhbG9nV2luZG93IiwiZm9jdXMiLCJyZXF1ZXN0Q2hhbmdlIiwiYmx1ciIsImlzRGF0ZU9iamVjdCIsIi4uL3RleHQtZmllbGQiLCIuL2RhdGUtcGlja2VyLWRpYWxvZyIsMjQsIlRyYW5zaXRpb24iLCJFbmhhbmNlZEJ1dHRvbiIsImhvdmVyIiwiV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3IiLCJidXR0b25TdGF0ZSIsImhvdmVyU3R5bGUiLCJkaXNhYmxlRm9jdXNSaXBwbGUiLCJkaXNhYmxlVG91Y2hSaXBwbGUiLCJvbk1vdXNlRW50ZXIiLCJfaGFuZGxlTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsIl9oYW5kbGVNb3VzZUxlYXZlIiwiX2hhbmRsZVRvdWNoVGFwIiwib25LZXlib2FyZEZvY3VzIiwiX2hhbmRsZUtleWJvYXJkRm9jdXMiLCJrZXlib2FyZEZvY3VzZWQiLCIuLi9lbmhhbmNlZC1idXR0b24iLDI1LDI2LCJPdmVybGF5IiwiUmVhY3RUcmFuc2l0aW9uR3JvdXAiLCJUcmFuc2l0aW9uR3JvdXAiLCJUcmFuc2l0aW9uSXRlbSIsImNvbXBvbmVudFdpbGxFbnRlciIsImNhbGxiYWNrIiwiZGVza3RvcEtleWxpbmVJbmNyZW1lbnQiLCJjb21wb25lbnRXaWxsTGVhdmUiLCJhdXRvRGV0ZWN0V2luZG93SGVpZ2h0IiwiYXV0b1Njcm9sbEJvZHlDb250ZW50IiwiY29udGVudENsYXNzTmFtZSIsIm1vZGFsIiwib3BlbkltbWVkaWF0ZWx5IiwicmVzaXplIiwib3BlbiIsIl9wb3NpdGlvbkRpYWxvZyIsImRpYWxvZ092ZXJsYXkiLCJwcmV2ZW50U2Nyb2xsaW5nIiwiX29uU2hvdyIsIm1haW4iLCJib2R5IiwiZ3V0dGVyIiwicGFwZXIiLCJfZ2V0QWN0aW9uc0NvbnRhaW5lciIsInRvU3RyaW5nIiwiYXV0b0xvY2tTY3JvbGxpbmciLCJfaGFuZGxlT3ZlcmxheVRvdWNoVGFwIiwiaXNPcGVuIiwiYWxsb3dTY3JvbGxpbmciLCJfb25EaXNtaXNzIiwiX2dldEFjdGlvbiIsImFjdGlvbkpTT04iLCJfdGhpczMiLCJhY3Rpb25Gb2N1cyIsImFjdGlvbkNvbnRhaW5lciIsImFjdGlvbk9iamVjdHMiLCJhY3Rpb25TdHlsZSIsIm1hcmdpbkJvdHRvbSIsImN1cnJlbnRBY3Rpb24iLCJ3aW5kb3ciLCJpbm5lckhlaWdodCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwibWluUGFkZGluZ1RvcCIsImRpYWxvZ1dpbmRvd0hlaWdodCIsIm9mZnNldEhlaWdodCIsIm1heERpYWxvZ0NvbnRlbnRIZWlnaHQiLCJwcmV2aW91c1NpYmxpbmciLCJuZXh0U2libGluZyIsIm1heEhlaWdodCIsInN0b3BQcm9wYWdhdGlvbiIsIkVTQyIsIi4vZmxhdC1idXR0b24iLCIuL21peGlucy93aW5kb3ctbGlzdGVuYWJsZSIsIi4vb3ZlcmxheSIsIi4vdXRpbHMvY3NzLWV2ZW50IiwiLi91dGlscy9rZXktY29kZSIsMjcsIkNsaWNrQXdheWFibGUiLCJGb250SWNvbiIsIk1lbnUiLCJEcm9wRG93bkljb24iLCJtZW51SXRlbXMiLCJjbG9zZU9uTWVudUl0ZW1Ub3VjaFRhcCIsImljb25MaWdhdHVyZSIsImNvbXBvbmVudENsaWNrQXdheSIsImljb25XaWR0aCIsImRlc2t0b3BUb29sYmFySGVpZ2h0IiwiZGVza3RvcERyb3BEb3duTWVudUZvbnRTaXplIiwibWVudSIsIm1lbnVJdGVtIiwiaWNvblNpemUiLCJkZXNrdG9wRHJvcERvd25NZW51SXRlbUhlaWdodCIsIl9vbkNvbnRyb2xDbGljayIsIm1lbnVJdGVtU3R5bGUiLCJoaWRlYWJsZSIsInZpc2libGUiLCJvbkl0ZW1UYXAiLCJfb25NZW51SXRlbUNsaWNrIiwicGF5bG9hZCIsIi4vZm9udC1pY29uIiwiLi9tZW51L21lbnUiLCIuL21peGlucy9jbGljay1hd2F5YWJsZSIsMjgsIkRyb3BEb3duQXJyb3ciLCJEcm9wRG93bk1lbnUiLCJkaXNwbGF5TWVtYmVyIiwidmFsdWVNZW1iZXIiLCJhdXRvV2lkdGgiLCJ1bmRlcmxpbmVTdHlsZSIsInNlbGVjdGVkSW5kZXgiLCJfc2V0V2lkdGgiLCJfc2V0U2VsZWN0ZWRJbmRleCIsImFjY2VudENvbG9yIiwiZHJvcERvd25NZW51IiwiZGVza3RvcFN1YmhlYWRlckhlaWdodCIsIm91dGxpbmUiLCJjb250cm9sIiwiY29udHJvbEJnIiwidW5kZXJsaW5lIiwiYm9yZGVyVG9wIiwiZGVza3RvcEd1dHRlck1pbmkiLCJyb290V2hlbk9wZW4iLCJsYWJlbFdoZW5PcGVuIiwiZ2V0SW5wdXROb2RlIiwiaXRlbSIsImRpc3BsYXlWYWx1ZSIsImFzc2VydCIsInNlbGVjdGVkSXRlbSIsIm9uS2V5RG93biIsIl9vbktleURvd24iLCJvbkJsdXIiLCJvblJlcXVlc3RDbG9zZSIsIl9vbk1lbnVSZXF1ZXN0Q2xvc2UiLCJlbCIsIm1lbnVJdGVtc0RvbSIsIm9mZnNldFdpZHRoIiwid2hpY2giLCJfc2VsZWN0UHJldmlvdXNJdGVtIiwiX3NlbGVjdE5leHRJdGVtIiwiU1BBQ0UiLCJwcmV2ZW50RGVmYXVsdCIsIi4vY2xlYXJmaXgiLCIuL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2Fycm93LWRyb3AtZG93biIsMjksIkZvY3VzUmlwcGxlIiwiVG91Y2hSaXBwbGUiLCJzdHlsZUluamVjdGVkIiwidGFiUHJlc3NlZCIsImNlbnRlclJpcHBsZSIsImNvbnRhaW5lckVsZW1lbnQiLCJvbmVPZlR5cGUiLCJkaXNhYmxlS2V5Ym9hcmRGb2N1cyIsImxpbmtCdXR0b24iLCJmb2N1c1JpcHBsZUNvbG9yIiwidG91Y2hSaXBwbGVDb2xvciIsImZvY3VzUmlwcGxlT3BhY2l0eSIsInRvdWNoUmlwcGxlT3BhY2l0eSIsIm9uS2V5VXAiLCJ0YWJJbmRleCIsImlzS2V5Ym9hcmRGb2N1c2VkIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJmb250IiwiZm9udEZhbWlseSIsImNvbnRlbnRGb250RmFtaWx5IiwidGFwSGlnaGxpZ2h0Q29sb3IiLCJ0cmFuc3BhcmVudCIsImFwcGVhcmFuY2UiLCJ0ZXh0RGVjb3JhdGlvbiIsImJ1dHRvblByb3BzIiwiX2hhbmRsZUJsdXIiLCJfaGFuZGxlRm9jdXMiLCJfaGFuZGxlS2V5VXAiLCJfaGFuZGxlS2V5RG93biIsImJ1dHRvbkNoaWxkcmVuIiwiX2NyZWF0ZUJ1dHRvbkNoaWxkcmVuIiwicmVtb3ZlS2V5Ym9hcmRGb2N1cyIsInNldEtleWJvYXJkRm9jdXMiLCJfY2FuY2VsRm9jdXNUaW1lb3V0IiwiX2ZvY3VzVGltZW91dCIsIl9wcm9wczIiLCJmb2N1c1JpcHBsZSIsInRvdWNoUmlwcGxlIiwiVEFCIiwiLi9yaXBwbGVzL2ZvY3VzLXJpcHBsZSIsIi4vcmlwcGxlcy90b3VjaC1yaXBwbGUiLCIuL3V0aWxzL2NoaWxkcmVuIiwzMCwiVW5pcXVlSWQiLCJpZCIsInJpcHBsZVN0eWxlIiwidGh1bWJTdHlsZSIsInRyYWNrU3R5bGUiLCJyZXF1aXJlZCIsInBhcmVudFdpZHRoIiwiZ2V0RXZlbldpZHRoIiwicGFyc2VJbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImlucHV0Tm9kZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJfaGFuZGxlUmVzaXplIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFzQ2hlY2tlZExpbmtQcm9wIiwiaGFzQ2hlY2tlZFByb3AiLCJoYXNUb2dnbGVkUHJvcCIsImhhc05ld0RlZmF1bHRQcm9wIiwibmV3U3RhdGUiLCJ0b2dnbGVkIiwiY2hlY2tlZExpbmsiLCJzd2l0Y2hXaWR0aCIsImxhYmVsV2lkdGgiLCJpbnB1dCIsInBvaW50ZXJFdmVudHMiLCJjb250cm9scyIsIndyYXAiLCJyaXBwbGUiLCJvbk1vdXNlVXAiLCJvbk1vdXNlRG93biIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hFbmQiLCJ3cmFwU3R5bGVzIiwiaW5wdXRJZCIsImdlbmVyYXRlIiwibGFiZWxFbGVtZW50IiwiaHRtbEZvciIsImlucHV0UHJvcHMiLCJoaWRlVG91Y2hSaXBwbGUiLCJfaGFuZGxlTW91c2VVcCIsIl9oYW5kbGVNb3VzZURvd24iLCJfaGFuZGxlVG91Y2hTdGFydCIsIl9oYW5kbGVUb3VjaEVuZCIsIl9oYW5kbGVDaGFuZ2UiLCJpbnB1dEVsZW1lbnQiLCJyaXBwbGVzIiwiY2lyY2xlIiwibGFiZWxQb3NpdGlvbkV4aXN0IiwiZWxlbWVudHNJbk9yZGVyIiwidG9VcHBlckNhc2UiLCJuZXdTd2l0Y2hlZFZhbHVlIiwibWVzc2FnZSIsImdldFZhbHVlIiwiX3RhYlByZXNzZWQiLCJfaGFuZGxlV2luZG93S2V5ZG93biIsIl9oYW5kbGVXaW5kb3dLZXl1cCIsInN0YXJ0IiwiZW5kIiwiLi91dGlscy91bmlxdWUtaWQiLDMxLCJFbmhhbmNlZFRleHRhcmVhIiwib25IZWlnaHRDaGFuZ2UiLCJ0ZXh0YXJlYVN0eWxlIiwicm93cyIsIl9zeW5jSGVpZ2h0V2l0aFNoYWRvdyIsInRleHRBcmVhU3R5bGVzIiwiaW5wdXRTdHlsZXMiLCJzaGFkb3dTdHlsZXMiLCJkZWZhdWx0VmFsdWUiLCJyZWFkT25seSIsInNldFZhbHVlIiwibmV3VmFsdWUiLCJzaGFkb3ciLCJjdXJyZW50SGVpZ2h0IiwibmV3SGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwzMiwidmFsaWRhdGVMYWJlbCIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsIkNvbG9yTWFuaXB1bGF0b3IiLCJJbW11dGFiaWxpdHlIZWxwZXIiLCJob3ZlckNvbG9yIiwicHJpbWFyeSIsImhvdmVyZWQiLCJ0b3VjaCIsImJ1dHRvblRoZW1lIiwiZmxhdEJ1dHRvblRoZW1lIiwiYnV0dG9uQ29sb3IiLCJidXR0b25IZWlnaHQiLCJidXR0b25NaW5XaWR0aCIsImRpc2FibGVkVGV4dENvbG9yIiwicHJpbWFyeVRleHRDb2xvciIsInNlY29uZGFyeVRleHRDb2xvciIsImRlZmF1bHRDb2xvciIsImRlZmF1bHRIb3ZlckNvbG9yIiwiZmFkZSIsImxpZ2h0ZW4iLCJkZWZhdWx0UmlwcGxlQ29sb3IiLCJidXR0b25Ib3ZlckNvbG9yIiwiYnV0dG9uUmlwcGxlQ29sb3IiLCJtZXJnZSIsImZvbnRTdHlsZUJ1dHRvbkZvbnRTaXplIiwiZW5oYW5jZWRCdXR0b25DaGlsZHJlbiIsIi4vYnV0dG9ucy9mbGF0LWJ1dHRvbi1sYWJlbCIsIi4vZW5oYW5jZWQtYnV0dG9uIiwiLi91dGlscy9jb2xvci1tYW5pcHVsYXRvciIsIi4vdXRpbHMvaW1tdXRhYmlsaXR5LWhlbHBlciIsMzMsImdldFpEZXB0aCIsImluaXRpYWxaRGVwdGgiLCJGbG9hdGluZ0FjdGlvbkJ1dHRvbiIsIm1pbmkiLCJjb21wb25lbnRXaWxsTW91bnQiLCJuZXdQcm9wcyIsIndhcm5pbmciLCJfZ2V0QmFja2dyb3VuZENvbG9yIiwic2Vjb25kYXJ5Q29sb3IiLCJmbG9hdGluZ0FjdGlvbkJ1dHRvbiIsIl9nZXRJY29uQ29sb3IiLCJzZWNvbmRhcnlJY29uQ29sb3IiLCJpY29uQ29sb3IiLCJidXR0b25TaXplIiwiY29udGFpbmVyV2hlbk1pbmkiLCJtaW5pU2l6ZSIsIm92ZXJsYXlXaGVuSG92ZXJlZCIsImljb25XaGVuTWluaSIsImV4dGVuZCIsImJ1dHRvbkV2ZW50SGFuZGxlcnMiLDM0LCJvZmZDb2xvciIsIm9uQ29sb3IiLDM1LCJUb29sdGlwIiwidG9vbHRpcCIsInRvb2x0aXBTdHlsZXMiLCJ0b29sdGlwUG9zaXRpb24iLCJjb3JuZXJzQW5kQ2VudGVyIiwidG9vbHRpcFNob3duIiwiZm9udGljb24iLCJzcGxpdCIsInRvb2x0aXBFbGVtZW50IiwidmVydGljYWxQb3NpdGlvbiIsImhvcml6b250YWxQb3NpdGlvbiIsImljb25Ib3ZlckNvbG9yIiwiaWNvblN0eWxlRm9udEljb24iLCJjaGlsZHJlblN0eWxlIiwiX3Nob3dUb29sdGlwIiwiX2hpZGVUb29sdGlwIiwiLi90b29sdGlwIiwiLi91dGlscy9wcm9wLXR5cGVzIiwzNiwiSWNvbk1lbnUiLCJMZWZ0TmF2IiwiTGluZWFyUHJvZ3Jlc3MiLCJMaXN0IiwiTGlzdERpdmlkZXIiLCJMaXN0SXRlbSIsIk1lbnVJdGVtIiwiTWl4aW5zIiwiUmFkaW9CdXR0b24iLCJSYWRpb0J1dHRvbkdyb3VwIiwiUmFpc2VkQnV0dG9uIiwiUmVmcmVzaEluZGljYXRvciIsIlJpcHBsZXMiLCJTZWxlY3RGaWVsZCIsIlNsaWRlciIsIlN2Z0ljb24iLCJJY29ucyIsIlNuYWNrYmFyIiwiVGFiIiwiVGFicyIsIlRhYmxlIiwiVGFibGVGb290ZXIiLCJUYWJsZUhlYWRlciIsIlRhYmxlSGVhZGVyQ29sdW1uIiwiVGhlbWUiLCJUb2dnbGUiLCJUaW1lUGlja2VyIiwiVG9vbGJhclNlcGFyYXRvciIsIlRvb2xiYXJUaXRsZSIsIlV0aWxzIiwiLi9hcHAtYmFyIiwiLi9hcHAtY2FudmFzIiwiLi9hdmF0YXIiLCIuL2NhcmQvY2FyZCIsIi4vY2FyZC9jYXJkLWFjdGlvbnMiLCIuL2NhcmQvY2FyZC1leHBhbmRhYmxlIiwiLi9jYXJkL2NhcmQtaGVhZGVyIiwiLi9jYXJkL2NhcmQtbWVkaWEiLCIuL2NhcmQvY2FyZC10ZXh0IiwiLi9jYXJkL2NhcmQtdGl0bGUiLCIuL2NoZWNrYm94IiwiLi9jaXJjdWxhci1wcm9ncmVzcyIsIi4vZGF0ZS1waWNrZXIvZGF0ZS1waWNrZXIiLCIuL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLWRpYWxvZyIsIi4vZGlhbG9nIiwiLi9kcm9wLWRvd24taWNvbiIsIi4vZHJvcC1kb3duLW1lbnUiLCIuL2Zsb2F0aW5nLWFjdGlvbi1idXR0b24iLCIuL2xlZnQtbmF2IiwiLi9saW5lYXItcHJvZ3Jlc3MiLCIuL2xpc3RzL2xpc3QiLCIuL2xpc3RzL2xpc3QtZGl2aWRlciIsIi4vbGlzdHMvbGlzdC1pdGVtIiwiLi9tZW51L21lbnUtaXRlbSIsIi4vbWVudXMvaWNvbi1tZW51IiwiLi9taXhpbnMvIiwiLi9yYWRpby1idXR0b24iLCIuL3JhZGlvLWJ1dHRvbi1ncm91cCIsIi4vcmFpc2VkLWJ1dHRvbiIsIi4vcmVmcmVzaC1pbmRpY2F0b3IiLCIuL3JpcHBsZXMvIiwiLi9zZWxlY3QtZmllbGQiLCIuL3NsaWRlciIsIi4vc25hY2tiYXIiLCIuL3N0eWxlcy8iLCIuL3N2Zy1pY29uIiwiLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9jaGV2cm9uLWxlZnQiLCIuL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2NoZXZyb24tcmlnaHQiLCIuL3RhYmxlL3RhYmxlIiwiLi90YWJsZS90YWJsZS1mb290ZXIiLCIuL3RhYmxlL3RhYmxlLWhlYWRlciIsIi4vdGFibGUvdGFibGUtaGVhZGVyLWNvbHVtbiIsIi4vdGFicy90YWIiLCIuL3RhYnMvdGFicyIsIi4vdGV4dC1maWVsZCIsIi4vdGhlbWUiLCIuL3RpbWUtcGlja2VyIiwiLi90b2dnbGUiLCIuL3Rvb2xiYXIvdG9vbGJhciIsIi4vdG9vbGJhci90b29sYmFyLWdyb3VwIiwiLi90b29sYmFyL3Rvb2xiYXItc2VwYXJhdG9yIiwiLi90b29sYmFyL3Rvb2xiYXItdGl0bGUiLCIuL3V0aWxzLyIsMzcsIklua0JhciIsImFjY2VudDFDb2xvciIsMzgsIm9wZW5OYXZFdmVudEhhbmRsZXIiLCJkaXNhYmxlU3dpcGVUb09wZW4iLCJkb2NrZWQiLCJoZWFkZXIiLCJvbk5hdk9wZW4iLCJvbk5hdkNsb3NlIiwib3BlblJpZ2h0IiwibWVudUl0ZW1DbGFzc05hbWUiLCJtZW51SXRlbUNsYXNzTmFtZVN1YmhlYWRlciIsIm1lbnVJdGVtQ2xhc3NOYW1lTGluayIsIl9tYXliZVN3aXBpbmciLCJfdG91Y2hTdGFydFgiLCJfdG91Y2hTdGFydFkiLCJfc3dpcGVTdGFydFgiLCJzd2lwaW5nIiwiX3VwZGF0ZU1lbnVIZWlnaHQiLCJfZW5hYmxlU3dpcGVIYW5kbGluZyIsIl9kaXNhYmxlU3dpcGVIYW5kbGluZyIsInRvZ2dsZSIsImNsb3NlIiwiZ2V0VGhlbWVQYWxldHRlIiwibGVmdE5hdiIsIngiLCJfZ2V0VHJhbnNsYXRlTXVsdGlwbGllciIsIl9nZXRNYXhUcmFuc2xhdGVYIiwiZGVza3RvcExlZnROYXZNZW51SXRlbUhlaWdodCIsInJvb3RXaGVuT3BlblJpZ2h0IiwibWVudUl0ZW1MaW5rIiwibWVudUl0ZW1TdWJoZWFkZXIiLCJ0cmFuc2l0aW9uRW5hYmxlZCIsIl9vbk92ZXJsYXlUb3VjaFRhcCIsIm1lbnVJdGVtU3R5bGVMaW5rIiwibWVudUl0ZW1TdHlsZVN1YmhlYWRlciIsImNsaWNrQXdheWFibGVFbGVtZW50IiwibWVudUhlaWdodCIsIl9vbldpbmRvd0tleVVwIiwiX29uV2luZG93UmVzaXplIiwiX29uQm9keVRvdWNoU3RhcnQiLCJ0b3VjaFN0YXJ0WCIsInRvdWNoZXMiLCJwYWdlWCIsInRvdWNoU3RhcnRZIiwicGFnZVkiLCJfb25Cb2R5VG91Y2hNb3ZlIiwiX29uQm9keVRvdWNoRW5kIiwiX3NldFBvc2l0aW9uIiwidHJhbnNsYXRlWCIsInNpbmdsZSIsInNldE9wYWNpdHkiLCJfZ2V0VHJhbnNsYXRlWCIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJkWEFicyIsImFicyIsImRZQWJzIiwidGhyZXNob2xkIiwiY2hhbmdlZFRvdWNoZXMiLCJ0cmFuc2xhdGVSYXRpbyIsMzksImJhcjEiLCJiYXIyIiwiX2JhclVwZGF0ZSIsImJhckVsZW1lbnQiLCJzdGVwVmFsdWVzIiwicHJpbWFyeTNDb2xvciIsImJhciIsImJhckZyYWdtZW50MSIsImJhckZyYWdtZW50MiIsNDAsImluc2V0Iiw0MSwiTGlzdE5lc3RlZCIsImF1dG9HZW5lcmF0ZU5lc3RlZEluZGljYXRvciIsImlubmVyRGl2U3R5bGUiLCJpbnNldENoaWxkcmVuIiwibGVmdEF2YXRhciIsImxlZnRDaGVja2JveCIsImxlZnRJY29uIiwibmVzdGVkTGV2ZWwiLCJvbk5lc3RlZExpc3RUb2dnbGUiLCJyaWdodEF2YXRhciIsInJpZ2h0SWNvbiIsInJpZ2h0SWNvbkJ1dHRvbiIsInJpZ2h0VG9nZ2xlIiwicHJpbWFyeVRleHQiLCJzZWNvbmRhcnlUZXh0Iiwic2Vjb25kYXJ5VGV4dExpbmVzIiwicmlnaHRJY29uQnV0dG9uSG92ZXJlZCIsInJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXNlZCIsInNpbmdsZUF2YXRhciIsInNpbmdsZU5vQXZhdGFyIiwidHdvTGluZSIsInRocmVlTGluZSIsImhhc0NoZWNrYm94IiwiaW5uZXJEaXYiLCJsaXN0SXRlbSIsIm5lc3RlZExldmVsRGVwdGgiLCJpY29ucyIsImdyZXk2MDAiLCJhdmF0YXJzIiwidGV4dExpZ2h0QmxhY2siLCJXZWJraXRMaW5lQ2xhbXAiLCJXZWJraXRCb3hPcmllbnQiLCJjb250ZW50Q2hpbGRyZW4iLCJuZXN0ZWRMaXN0SXRlbXMiLCJmb3JFYWNoIiwiX3B1c2hFbGVtZW50IiwiaGFzTmVzdExpc3RJdGVtcyIsImhhc1JpZ2h0RWxlbWVudCIsIm5lZWRzTmVzdGVkSW5kaWNhdG9yIiwicmlnaHRJY29uQnV0dG9uRWxlbWVudCIsInJpZ2h0SWNvbkJ1dHRvbkhhbmRsZXJzIiwiX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXMiLCJfaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VFbnRlciIsIl9oYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZUxlYXZlIiwiX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwIiwiX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlVXAiLCJfaGFuZGxlTmVzdGVkTGlzdFRvZ2dsZSIsIm5lc3RlZExpc3QiLCJzZWNvbmRhcnlUZXh0RWxlbWVudCIsIl9jcmVhdGVUZXh0RWxlbWVudCIsIl9jcmVhdGVMYWJlbEVsZW1lbnQiLCJfY3JlYXRlRGlzYWJsZWRFbGVtZW50IiwiYXBwbHlGb2N1c1N0YXRlIiwiZm9jdXNTdGF0ZSIsImVuaGFuY2VkQnV0dG9uIiwiYnV0dG9uRWwiLCJtZXJnZWREaXZTdHlsZXMiLCJfcHJvcHMzIiwibWVyZ2VkTGFiZWxTdHlsZXMiLCJkYXRhIiwiaXNBbkVsZW1lbnQiLCJfaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VEb3duIiwiYmFzZVN0eWxlcyIsImFkZGl0aW9uYWxQcm9wcyIsIi4uL3N0eWxlcy90eXBvZ3JhcGh5IiwiLi4vc3ZnLWljb25zL25hdmlnYXRpb24vYXJyb3ctZHJvcC1kb3duIiwiLi4vc3ZnLWljb25zL25hdmlnYXRpb24vYXJyb3ctZHJvcC11cCIsIi4uL3V0aWxzL2NvbG9yLW1hbmlwdWxhdG9yIiwiLi9saXN0LW5lc3RlZCIsNDIsIi4vbGlzdCIsNDMsImluc2V0U3ViaGVhZGVyIiwic3ViaGVhZGVyIiwic3ViaGVhZGVyU3R5bGUiLCJzdWJoZWFkZXJFbGVtZW50IiwibWVyZ2VkU3ViaGVhZGVyU3R5bGVzIiwiLi4vdXRpbHMvcHJvcC10eXBlcyIsNDQsIkxpbmtNZW51SXRlbSIsImluZGV4IiwiYWN0aXZlIiwicm9vdFdoZW5Ib3ZlcmVkIiwicm9vdFdoZW5TZWxlY3RlZCIsInNlbGVjdGVkVGV4dENvbG9yIiwicm9vdFdoZW5EaXNhYmxlZCIsIm9uQ2xpY2tIYW5kbGVyIiwiX3N0b3BMaW5rIiwibGlua0F0dHJpYnV0ZSIsImxpbmsiLCJsaW5rU3R5bGVzIiw0NSwiVHlwZXMiLCJMSU5LIiwiU1VCSEVBREVSIiwiTkVTVEVEIiwiaWNvblJpZ2h0Q2xhc3NOYW1lIiwiYXR0cmlidXRlIiwib25Ub2dnbGUiLCJzdGF0aWNzIiwiZ2V0U3BhY2luZyIsImljb25SaWdodCIsImRhdGFIZWlnaHQiLCJyYWRpb0J1dHRvbiIsInRvZ2dsZUVsZW1lbnQiLCJfaGFuZGxlVG9nZ2xlIiwiLi4vZm9udC1pY29uIiwiLi4vdG9nZ2xlIiw0NiwiS2V5TGluZSIsIlN1YmhlYWRlck1lbnVJdGVtIiwiTmVzdGVkTWVudUl0ZW0iLCJhY3RpdmVJbmRleCIsIl9jbG9zZU5lc3RlZE1lbnUiLCJfcG9zaXRpb25OZXN0ZWRNZW51IiwiaWNvbkN1c3RvbUFycm93RHJvcFJpZ2h0IiwiX29wZW5OZXN0ZWRNZW51Iiwib25Nb3VzZU92ZXIiLCJfaGFuZGxlTW91c2VPdmVyIiwib25Nb3VzZU91dCIsIl9oYW5kbGVNb3VzZU91dCIsIl9vblBhcmVudEl0ZW1UYXAiLCJfb25NZW51SXRlbVRhcCIsInRvZ2dsZU5lc3RlZE1lbnUiLCJuZXN0ZWRNZW51IiwibmVzdGVkTWVudVNob3duIiwiX3NldEtleVdpZHRoIiwiX3JlbmRlclZpc2liaWxpdHkiLCJwcmV2UHJvcHMiLCJjb250YWluZXJCYWNrZ3JvdW5kQ29sb3IiLCJtZW51U3ViaGVhZGVyIiwiX2dldENoaWxkcmVuIiwiaXRlbUNvbXBvbmVudCIsImlzRGlzYWJsZWQiLCJfY2hpbGRyZW4iLCJfbmVzdGVkQ2hpbGRyZW4iLCJmaXJzdENoaWxkIiwibmVzdGVkIiwiaXRlbXMiLCJfb25JdGVtQWN0aXZhdGVkIiwiX29uSXRlbURlYWN0aXZhdGVkIiwiX29uTmVzdGVkSXRlbVRhcCIsIl9vbkl0ZW1UYXAiLCJtZW51V2lkdGgiLCJnZXRJbmNyZW1lbnRhbERpbSIsIl9leHBhbmRIaWRlYWJsZU1lbnUiLCJfY29sbGFwc2VIaWRlYWJsZU1lbnUiLCJwYXBlckNvbnRhaW5lciIsIl9nZXRIaWRkZW5NZW51SGVpZ2h0IiwiX25leHRBbmltYXRpb25GcmFtZSIsInZpc2liaWxpdHkiLCJvcmlnaW5hbE9wYWNpdHkiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfb25JdGVtVG9nZ2xlIiwib25JdGVtVG9nZ2xlIiwiYWN0aXZlS2V5IiwiX2FjdGl2YXRlUHJldmlvdXNJdGVtIiwiX2FjdGl2YXRlTmV4dEl0ZW0iLCJfdHJ5VG9nZ2xlTmVzdGVkIiwiX2Nsb3NlIiwiX3RyaWdnZXJTZWxlY3Rpb24iLCIuLi9taXhpbnMvY2xpY2stYXdheWFibGUiLCIuLi91dGlscy9rZXktbGluZSIsIi4vbGluay1tZW51LWl0ZW0iLCIuL21lbnUtaXRlbSIsIi4vc3ViaGVhZGVyLW1lbnUtaXRlbSIsNDcsImd1dHRlck1pbmkiLCJzdWJoZWFkZXJIZWlnaHQiLCJyb290V2hlbkZpcnN0Q2hpbGQiLDQ4LCJFdmVudHMiLCJjbG9zZU9uSXRlbVRvdWNoVGFwIiwiaWNvbkJ1dHRvbkVsZW1lbnQiLCJvcGVuRGlyZWN0aW9uIiwiY29ybmVycyIsIm9uSXRlbVRvdWNoVGFwIiwibWVudVN0eWxlIiwidG91Y2hUYXBDbG9zZURlbGF5IiwiaWNvbkJ1dHRvblJlZiIsIm1lbnVJbml0aWFsbHlLZXlib2FyZEZvY3VzZWQiLCJfdGltZW91dCIsIm9wZW5Eb3duIiwib3BlbkxlZnQiLCJtZXJnZWRNZW51U3R5bGVzIiwiaXNLZXlib2FyZCIsImFuaW1hdGVkIiwiaW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkIiwib25Fc2NLZXlEb3duIiwiX2hhbmRsZU1lbnVFc2NLZXlEb3duIiwiX2hhbmRsZUl0ZW1Ub3VjaFRhcCIsIi4uL21lbnVzL21lbnUiLCIuLi91dGlscy9ldmVudHMiLDQ5LCJ1cGRhdGUiLCJDb250cm9sbGFibGUiLCJkZXNrdG9wIiwibXVsdGlwbGUiLCJzZWxlY3RlZE1lbnVJdGVtU3R5bGUiLCJzdHJpbmdPck51bWJlciIsIl9nZXRTZWxlY3RlZEluZGV4IiwiZm9jdXNJbmRleCIsImtleVdpZHRoIiwiY29tcG9uZW50RGlkRW50ZXIiLCJfYW5pbWF0ZU9wZW4iLCJfc2V0U2NvbGxQb3NpdGlvbiIsInRyYW5zZm9ybU9yaWdpbiIsImxpc3QiLCJtZW51SXRlbUNvbnRhaW5lciIsInNlbGVjdGVkTWVudUl0ZW0iLCJtZXJnZWRMaXN0U3R5bGVzIiwiY3VtdWxhdGl2ZURlbGF5IiwiY2FzY2FkZUNoaWxkcmVuQ291bnQiLCJfZ2V0Q2FzY2FkZUNoaWxkcmVuQ291bnQiLCJjdW11bGF0aXZlRGVsYXlJbmNyZW1lbnQiLCJjZWlsIiwibWVudUl0ZW1JbmRleCIsImNoaWxkSXNBRGl2aWRlciIsImNoaWxkSXNEaXNhYmxlZCIsImNoaWxkcmVuQ29udGFpbmVyU3R5bGVzIiwidHJhbnNpdGlvbkRlbGF5IiwiY2xvbmVkQ2hpbGQiLCJfY2xvbmVNZW51SXRlbSIsInNldEtleWJvYXJkRm9jdXNlZCIsInNjcm9sbENvbnRhaW5lclN0eWxlIiwic2Nyb2xsQ29udGFpbmVyIiwibWVudUNvbnRhaW5lcnMiLCJjaGlsZE5vZGVzIiwiY2hpbGRJbmRleCIsIl9pc0NoaWxkU2VsZWN0ZWQiLCJzZWxlY3RlZENoaWxkcmVuU3R5bGVzIiwibWVyZ2VkQ2hpbGRyZW5TdHlsZXMiLCJpc0ZvY3VzZWQiLCJfaGFuZGxlTWVudUl0ZW1Ub3VjaFRhcCIsIl9kZWNyZW1lbnRLZXlib2FyZEZvY3VzSW5kZXgiLCJfc2V0Rm9jdXNJbmRleCIsImNvdW50IiwibWVudUl0ZW1IZWlnaHQiLCJfZ2V0TWVudUl0ZW1Db3VudCIsIm1lbnVJdGVtQ291bnQiLCJfdGhpczQiLCJfaW5jcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4IiwiZ2V0VmFsdWVMaW5rIiwibWVudVZhbHVlIiwiaXRlbVZhbHVlIiwibmV3TWVudVZhbHVlIiwiJHB1c2giLCIkc3BsaWNlIiwibWF4SW5kZXgiLCJjaGlsZFZhbHVlIiwibmV3SW5kZXgiLCJmb2N1c2VkTWVudUl0ZW0iLCJzZWxlY3RlZE9mZlNldCIsImxpc3RFbCIsImVsV2lkdGgiLCJrZXlJbmNyZW1lbnRzIiwibmV3V2lkdGgiLCIuLi9saXN0cy9saXN0IiwiLi4vbWl4aW5zL2NvbnRyb2xsYWJsZSIsNTAsImNsYXNzTmFtZXMiLCJnZXRDbGFzc2VzIiwiaW5pdGlhbENsYXNzZXMiLCJhZGRpdGlvbmFsQ2xhc3NPYmoiLCJjbGFzc1N0cmluZyIsImdldENsYXNzU2V0IiwiY2xhc3NPYmoiLCJjbGFzc25hbWVzIiw1MSwiRG9tIiwibWFudWFsbHlCaW5kQ2xpY2tBd2F5IiwiX2JpbmRDbGlja0F3YXkiLCJfdW5iaW5kQ2xpY2tBd2F5IiwiX2NoZWNrQ2xpY2tBd2F5IiwiaXNEZXNjZW5kYW50IiwiY29udGFpbnMiLCIuLi91dGlscy9kb20iLDUyLCJzaGFwZSIsNTMsIkNsYXNzYWJsZSIsIlN0eWxlUmVzaXphYmxlIiwiLi9jbGFzc2FibGUiLCIuL2NsaWNrLWF3YXlhYmxlIiwiLi9zdHlsZS1wcm9wYWJsZSIsIi4vc3R5bGUtcmVzaXphYmxlIiwiLi93aW5kb3ctbGlzdGVuYWJsZSIsNTQsIi4uL3V0aWxzL2ltbXV0YWJpbGl0eS1oZWxwZXIiLDU1LCJTaXplcyIsIlNNQUxMIiwiTUVESVVNIiwiTEFSR0UiLCJkZXZpY2VTaXplIiwiX3VwZGF0ZURldmljZVNpemUiLCJtYW51YWxseUJpbmRSZXNpemUiLCJfYmluZFJlc2l6ZSIsIl91bmJpbmRSZXNpemUiLCJpc0RldmljZVNpemUiLCJkZXNpcmVkU2l6ZSIsImlubmVyV2lkdGgiLDU2LCJsaXN0ZW5lcnMiLCJldmVudE5hbWUiLCJjYWxsYmFja05hbWUiLDU3LCJfb3JpZ2luYWxCb2R5T3ZlcmZsb3ciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm92ZWZsb3ciLCJfcHJldmVudFNjcm9sbGluZyIsIl9hbGxvd1Njcm9sbGluZyIsIndpbGxDaGFuZ2UiLCJyb290V2hlblNob3duIiw1OCwiYm94U2hhZG93IiwiX2dldFpEZXB0aFNoYWRvd3MiLCJzaGFkb3dzIiw1OSwidmFsdWVTZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsIl9oYXNDaGVja0F0dHJpYnV0ZSIsIm51bWJlckNoZWNrZWRSYWRpb0J1dHRvbnMiLCJjbnQiLCJvcHRpb24iLCJvcHRpb25zIiwiX29wdGlvbiRwcm9wcyIsIl9vbkNoYW5nZSIsIl91cGRhdGVSYWRpb0J1dHRvbnMiLCJuZXdTZWxlY3Rpb24iLCJnZXRTZWxlY3RlZFZhbHVlIiwic2V0U2VsZWN0ZWRWYWx1ZSIsIm5ld1NlbGVjdGlvblZhbHVlIiwiY2xlYXJWYWx1ZSIsNjAsIlJhZGlvQnV0dG9uT2ZmIiwiUmFkaW9CdXR0b25PbiIsInRhcmdldFdoZW5DaGVja2VkIiwiZmlsbFdoZW5DaGVja2VkIiwidGFyZ2V0V2hlbkRpc2FibGVkIiwiZmlsbFdoZW5EaXNhYmxlZCIsIm9uU3R5bGVzIiwib2ZmU3R5bGVzIiwicmFkaW9CdXR0b25FbGVtZW50IiwiLi9zdmctaWNvbnMvdG9nZ2xlL3JhZGlvLWJ1dHRvbi1jaGVja2VkIiwiLi9zdmctaWNvbnMvdG9nZ2xlL3JhZGlvLWJ1dHRvbi11bmNoZWNrZWQiLDYxLCJkaXNhYmxlZEJhY2tncm91bmRDb2xvciIsImRpc2FibGVkTGFiZWxDb2xvciIsImZ1bGxXaWR0aCIsInRvdWNoZWQiLCJwcmltYXJ5Q29sb3IiLCJfZ2V0TGFiZWxDb2xvciIsImdldFRoZW1lQnV0dG9uIiwicmFpc2VkQnV0dG9uIiwiYW1vdW50IiwicmlwcGxlT3BhY2l0eSIsNjIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9zbGljZWRUb0FycmF5Iiwic2xpY2VJdGVyYXRvciIsImFyciIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsImVyciIsImlzQXJyYXkiLCJUeXBlRXJyb3IiLCJfcmVhY3QiLCJfcmVhY3QyIiwiVklFV0JPWF9TSVpFIiwicGVyY2VudGFnZSIsInN0YXR1cyIsIl9nZXRSb290U3R5bGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCJwYXBlclNpemUiLCJfZ2V0UGFwZXJTaXplIiwiY2hpbGRyZW5DbXAiLCJjaXJjbGVTdHlsZSIsIl9nZXRDaXJjbGVTdHlsZSIsInZpZXdCb3giLCJhdHRyIiwicG9seWdvblN0eWxlIiwiX2dldFBvbHlnb25TdHlsZSIsIl9nZXRUaGVtZSIsInJlZnJlc2hJbmRpY2F0b3IiLCJfZ2V0UGFkZGluZ1NpemUiLCJfZ2V0Q2lyY2xlQXR0ciIsInJhZGl1Iiwib3JpZ2luWCIsIm9yaWdpblkiLCJfZ2V0QXJjRGVnIiwicCIsImJlZ2luRGVnIiwiZW5kRGVnIiwiX2dldEZhY3RvciIsInAxIiwiaXNMb2FkaW5nIiwicGVyaW1ldGVyIiwiUEkiLCJfZ2V0QXJjRGVnMiIsIl9nZXRBcmNEZWcyMiIsImFyY0xlbiIsImRhc2hPZmZzZXQiLCJsb2FkaW5nU3Ryb2tlQ29sb3IiLCJzdHJva2VDb2xvciIsInRyaWFuZ2xlQ3giLCJ0cmlhbmdsZUN5IiwiZHgiLCJ0cmlhbmdsZVBhdGgiLCJfZ2V0QXJjRGVnMyIsIl9nZXRBcmNEZWczMiIsInBvaW50cyIsImN1cnJTdGVwIiwiX3RpbWVyMSIsInByZWZpeGVkIiwiX3RpbWVyMiIsNjMsIkNpcmNsZVJpcHBsZSIsImNvbXBvbmVudFdpbGxBcHBlYXIiLCJfaW5pdGlhbGl6ZUFuaW1hdGlvbiIsImNvbXBvbmVudERpZEFwcGVhciIsIl9hbmltYXRlIiw2NCwiU2NhbGVJblRyYW5zaXRpb25Hcm91cCIsInB1bHNhdGVEdXJhdGlvbiIsIl9zZXRSaXBwbGVTaXplIiwiX3B1bHNhdGUiLCJfZ2V0UmlwcGxlRWxlbWVudCIsIm1heFNjYWxlIiwiaW5uZXJTdHlsZXMiLCJlYXNlSW5PdXRGdW5jdGlvbiIsImlubmVyQ2lyY2xlIiwic3RhcnRTY2FsZSIsImVuZFNjYWxlIiwiY3VycmVudFNjYWxlIiwibmV4dFNjYWxlIiwiLi4vdHJhbnNpdGlvbi1ncm91cHMvc2NhbGUtaW4iLDY1LCIuL2NpcmNsZS1yaXBwbGUiLCIuL2ZvY3VzLXJpcHBsZSIsIi4vdG91Y2gtcmlwcGxlIiw2NiwiaGFzUmlwcGxlcyIsIm5leHRLZXkiLCJfc3RhdGUiLCJyaXBwbGVHcm91cCIsImlzUmlwcGxlVG91Y2hHZW5lcmF0ZWQiLCJ0b3VjaEdlbmVyYXRlZCIsIl9nZXRSaXBwbGVTdHlsZSIsImN1cnJlbnRSaXBwbGVzIiwic2hpZnQiLCJlbEhlaWdodCIsIm9mZnNldCIsImlzVG91Y2hFdmVudCIsInBvaW50ZXJYIiwicG9pbnRlclkiLCJ0b3BMZWZ0RGlhZyIsIl9jYWxjRGlhZyIsInRvcFJpZ2h0RGlhZyIsImJvdFJpZ2h0RGlhZyIsImJvdExlZnREaWFnIiwicmlwcGxlUmFkaXVzIiwicmlwcGxlU2l6ZSIsImIiLCJzcXJ0Iiw2NywiZXJyb3JUZXh0IiwiZmxvYXRpbmdMYWJlbFRleHQiLCJzZWxlY3RGaWVsZFJvb3QiLCJlcnJvclN0eWxlIiwiaGludFRleHQiLCJtdWx0aUxpbmUiLCJvbkVudGVyS2V5RG93biIsImlucHV0U3R5bGUiLCJmbG9hdGluZ0xhYmVsU3R5bGUiLCJ0ZXh0RmllbGRQcm9wcyIsImRyb3BEb3duTWVudVByb3BzIiw2OCwiRHJhZ2dhYmxlIiwibWluTWF4UHJvcFR5cGUiLCJlcnJvck1zZyIsInZhbHVlSW5SYW5nZVByb3BUeXBlIiwiZGVzY3JpcHRpb24iLCJvbkRyYWdTdGFydCIsIm9uRHJhZ1N0b3AiLCJwZXJjZW50IiwiaXNOYU4iLCJkcmFnZ2luZyIsImZvY3VzZWQiLCJzbGlkZXIiLCJoYW5kbGVTaXplIiwidHJhY2tTaXplIiwiaGFuZGxlU2l6ZURpc2FibGVkIiwiZmlsbEd1dHRlciIsInRvdWNoQ2FsbG91dCIsImhhbmRsZVNpemVBY3RpdmUiLCJ0cmFjayIsImZpbGxlZEFuZFJlbWFpbmluZyIsInBlcmNlbnRaZXJvUmVtYWluaW5nIiwiaGFuZGxlIiwic2VsZWN0aW9uQ29sb3IiLCJiYWNrZ3JvdW5kQ2xpcCIsImhhbmRsZVdoZW5EaXNhYmxlZCIsInRyYWNrQ29sb3IiLCJoYW5kbGVXaGVuUGVyY2VudFplcm8iLCJoYW5kbGVGaWxsQ29sb3IiLCJoYW5kbGVXaGVuQWN0aXZlIiwidHJhY2tDb2xvclNlbGVjdGVkIiwiaGFuZGxlV2hlbkRpc2FibGVkQW5kWmVybyIsImhhbmRsZVdoZW5QZXJjZW50WmVyb0FuZEhvdmVyZWQiLCJoYW5kbGVDb2xvclplcm8iLCJmaWxsZWQiLCJyZW1haW5pbmciLCJvdGhlcnMiLCJzbGlkZXJTdHlsZXMiLCJ0cmFja1N0eWxlcyIsImZpbGxlZFN0eWxlcyIsInJlbWFpbmluZ1N0eWxlcyIsImhhbmRsZVN0eWxlcyIsInJpcHBsZVNob3dDb25kaXRpb24iLCJfb25Gb2N1cyIsIl9vbkJsdXIiLCJfb25Nb3VzZURvd24iLCJfb25Nb3VzZUVudGVyIiwiX29uTW91c2VMZWF2ZSIsIl9vbk1vdXNlVXAiLCJheGlzIiwiYm91bmQiLCJjYW5jZWwiLCJjb25zdHJhaW4iLCJfY29uc3RyYWluIiwib25TdGFydCIsIl9vbkRyYWdTdGFydCIsIm9uU3RvcCIsIl9vbkRyYWdTdG9wIiwib25EcmFnIiwiX29uRHJhZ1VwZGF0ZSIsIl9vbk1vdXNlRG93bktub2IiLCJnZXRQZXJjZW50Iiwic2V0UGVyY2VudCIsIl9hbGlnblZhbHVlIiwiX3BlcmNlbnRUb1ZhbHVlIiwidmFsIiwidmFsTW9kU3RlcCIsImFsaWduVmFsdWUiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsInBvcyIsInBpeGVsTWF4IiwiY2xpZW50V2lkdGgiLCJwaXhlbFN0ZXAiLCJkaXN0YW5jZSIsIm5leHREaXN0YW5jZSIsIl9wb3MiLCJjbGllbnRYIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiX2RyYWdYIiwidWkiLCJfdXBkYXRlV2l0aENoYW5nZUV2ZW50IiwicmVhY3QtZHJhZ2dhYmxlMiIsNjksIl9hdXRvSGlkZVRpbWVySWQiLCJhY3Rpb24iLCJhdXRvSGlkZUR1cmF0aW9uIiwib25BY3Rpb25Ub3VjaFRhcCIsIm9wZW5Pbk1vdW50IiwiX3NldEF1dG9IaWRlVGltZXIiLCJwcmV2U3RhdGUiLCJfY2xlYXJBdXRvSGlkZVRpbWVyIiwic25hY2tiYXIiLCJhY3Rpb25Db2xvciIsInJvb3RTdHlsZXMiLCJhY3Rpb25CdXR0b24iLDcwLCJpc0Jyb3dzZXIiLCJNb2Rlcm5penIiLCJwcmVmaXhlZEtleXMiLCJwcmVmaXhlZFN0eWxlIiwicHJlZktleSIsInNpbmdsZUh5cGhlbmVkIiwic3RyIiwicmVwbGFjZSIsIm0xIiwidG9Mb3dlckNhc2UiLCIuLi91dGlscy9tb2Rlcm5penIuY3VzdG9tIiw3MSwicmVkNTAiLCJyZWQxMDAiLCJyZWQyMDAiLCJyZWQzMDAiLCJyZWQ0MDAiLCJyZWQ1MDAiLCJyZWQ2MDAiLCJyZWQ3MDAiLCJyZWQ4MDAiLCJyZWQ5MDAiLCJyZWRBMTAwIiwicmVkQTIwMCIsInJlZEE0MDAiLCJyZWRBNzAwIiwicGluazUwIiwicGluazEwMCIsInBpbmsyMDAiLCJwaW5rMzAwIiwicGluazQwMCIsInBpbms1MDAiLCJwaW5rNjAwIiwicGluazcwMCIsInBpbms4MDAiLCJwaW5rOTAwIiwicGlua0ExMDAiLCJwaW5rQTIwMCIsInBpbmtBNDAwIiwicGlua0E3MDAiLCJwdXJwbGU1MCIsInB1cnBsZTEwMCIsInB1cnBsZTIwMCIsInB1cnBsZTMwMCIsInB1cnBsZTQwMCIsInB1cnBsZTUwMCIsInB1cnBsZTYwMCIsInB1cnBsZTcwMCIsInB1cnBsZTgwMCIsInB1cnBsZTkwMCIsInB1cnBsZUExMDAiLCJwdXJwbGVBMjAwIiwicHVycGxlQTQwMCIsInB1cnBsZUE3MDAiLCJkZWVwUHVycGxlNTAiLCJkZWVwUHVycGxlMTAwIiwiZGVlcFB1cnBsZTIwMCIsImRlZXBQdXJwbGUzMDAiLCJkZWVwUHVycGxlNDAwIiwiZGVlcFB1cnBsZTUwMCIsImRlZXBQdXJwbGU2MDAiLCJkZWVwUHVycGxlNzAwIiwiZGVlcFB1cnBsZTgwMCIsImRlZXBQdXJwbGU5MDAiLCJkZWVwUHVycGxlQTEwMCIsImRlZXBQdXJwbGVBMjAwIiwiZGVlcFB1cnBsZUE0MDAiLCJkZWVwUHVycGxlQTcwMCIsImluZGlnbzUwIiwiaW5kaWdvMTAwIiwiaW5kaWdvMjAwIiwiaW5kaWdvMzAwIiwiaW5kaWdvNDAwIiwiaW5kaWdvNTAwIiwiaW5kaWdvNjAwIiwiaW5kaWdvNzAwIiwiaW5kaWdvODAwIiwiaW5kaWdvOTAwIiwiaW5kaWdvQTEwMCIsImluZGlnb0EyMDAiLCJpbmRpZ29BNDAwIiwiaW5kaWdvQTcwMCIsImJsdWU1MCIsImJsdWUxMDAiLCJibHVlMjAwIiwiYmx1ZTMwMCIsImJsdWU0MDAiLCJibHVlNTAwIiwiYmx1ZTYwMCIsImJsdWU3MDAiLCJibHVlODAwIiwiYmx1ZTkwMCIsImJsdWVBMTAwIiwiYmx1ZUEyMDAiLCJibHVlQTQwMCIsImJsdWVBNzAwIiwibGlnaHRCbHVlNTAiLCJsaWdodEJsdWUxMDAiLCJsaWdodEJsdWUyMDAiLCJsaWdodEJsdWUzMDAiLCJsaWdodEJsdWU0MDAiLCJsaWdodEJsdWU1MDAiLCJsaWdodEJsdWU2MDAiLCJsaWdodEJsdWU3MDAiLCJsaWdodEJsdWU4MDAiLCJsaWdodEJsdWU5MDAiLCJsaWdodEJsdWVBMTAwIiwibGlnaHRCbHVlQTIwMCIsImxpZ2h0Qmx1ZUE0MDAiLCJsaWdodEJsdWVBNzAwIiwiY3lhbjUwIiwiY3lhbjEwMCIsImN5YW4yMDAiLCJjeWFuMzAwIiwiY3lhbjQwMCIsImN5YW41MDAiLCJjeWFuNjAwIiwiY3lhbjcwMCIsImN5YW44MDAiLCJjeWFuOTAwIiwiY3lhbkExMDAiLCJjeWFuQTIwMCIsImN5YW5BNDAwIiwiY3lhbkE3MDAiLCJ0ZWFsNTAiLCJ0ZWFsMTAwIiwidGVhbDIwMCIsInRlYWwzMDAiLCJ0ZWFsNDAwIiwidGVhbDUwMCIsInRlYWw2MDAiLCJ0ZWFsNzAwIiwidGVhbDgwMCIsInRlYWw5MDAiLCJ0ZWFsQTEwMCIsInRlYWxBMjAwIiwidGVhbEE0MDAiLCJ0ZWFsQTcwMCIsImdyZWVuNTAiLCJncmVlbjEwMCIsImdyZWVuMjAwIiwiZ3JlZW4zMDAiLCJncmVlbjQwMCIsImdyZWVuNTAwIiwiZ3JlZW42MDAiLCJncmVlbjcwMCIsImdyZWVuODAwIiwiZ3JlZW45MDAiLCJncmVlbkExMDAiLCJncmVlbkEyMDAiLCJncmVlbkE0MDAiLCJncmVlbkE3MDAiLCJsaWdodEdyZWVuNTAiLCJsaWdodEdyZWVuMTAwIiwibGlnaHRHcmVlbjIwMCIsImxpZ2h0R3JlZW4zMDAiLCJsaWdodEdyZWVuNDAwIiwibGlnaHRHcmVlbjUwMCIsImxpZ2h0R3JlZW42MDAiLCJsaWdodEdyZWVuNzAwIiwibGlnaHRHcmVlbjgwMCIsImxpZ2h0R3JlZW45MDAiLCJsaWdodEdyZWVuQTEwMCIsImxpZ2h0R3JlZW5BMjAwIiwibGlnaHRHcmVlbkE0MDAiLCJsaWdodEdyZWVuQTcwMCIsImxpbWU1MCIsImxpbWUxMDAiLCJsaW1lMjAwIiwibGltZTMwMCIsImxpbWU0MDAiLCJsaW1lNTAwIiwibGltZTYwMCIsImxpbWU3MDAiLCJsaW1lODAwIiwibGltZTkwMCIsImxpbWVBMTAwIiwibGltZUEyMDAiLCJsaW1lQTQwMCIsImxpbWVBNzAwIiwieWVsbG93NTAiLCJ5ZWxsb3cxMDAiLCJ5ZWxsb3cyMDAiLCJ5ZWxsb3czMDAiLCJ5ZWxsb3c0MDAiLCJ5ZWxsb3c1MDAiLCJ5ZWxsb3c2MDAiLCJ5ZWxsb3c3MDAiLCJ5ZWxsb3c4MDAiLCJ5ZWxsb3c5MDAiLCJ5ZWxsb3dBMTAwIiwieWVsbG93QTIwMCIsInllbGxvd0E0MDAiLCJ5ZWxsb3dBNzAwIiwiYW1iZXI1MCIsImFtYmVyMTAwIiwiYW1iZXIyMDAiLCJhbWJlcjMwMCIsImFtYmVyNDAwIiwiYW1iZXI1MDAiLCJhbWJlcjYwMCIsImFtYmVyNzAwIiwiYW1iZXI4MDAiLCJhbWJlcjkwMCIsImFtYmVyQTEwMCIsImFtYmVyQTIwMCIsImFtYmVyQTQwMCIsImFtYmVyQTcwMCIsIm9yYW5nZTUwIiwib3JhbmdlMTAwIiwib3JhbmdlMjAwIiwib3JhbmdlMzAwIiwib3JhbmdlNDAwIiwib3JhbmdlNTAwIiwib3JhbmdlNjAwIiwib3JhbmdlNzAwIiwib3JhbmdlODAwIiwib3JhbmdlOTAwIiwib3JhbmdlQTEwMCIsIm9yYW5nZUEyMDAiLCJvcmFuZ2VBNDAwIiwib3JhbmdlQTcwMCIsImRlZXBPcmFuZ2U1MCIsImRlZXBPcmFuZ2UxMDAiLCJkZWVwT3JhbmdlMjAwIiwiZGVlcE9yYW5nZTMwMCIsImRlZXBPcmFuZ2U0MDAiLCJkZWVwT3JhbmdlNTAwIiwiZGVlcE9yYW5nZTYwMCIsImRlZXBPcmFuZ2U3MDAiLCJkZWVwT3JhbmdlODAwIiwiZGVlcE9yYW5nZTkwMCIsImRlZXBPcmFuZ2VBMTAwIiwiZGVlcE9yYW5nZUEyMDAiLCJkZWVwT3JhbmdlQTQwMCIsImRlZXBPcmFuZ2VBNzAwIiwiYnJvd241MCIsImJyb3duMTAwIiwiYnJvd24yMDAiLCJicm93bjMwMCIsImJyb3duNDAwIiwiYnJvd241MDAiLCJicm93bjYwMCIsImJyb3duNzAwIiwiYnJvd244MDAiLCJicm93bjkwMCIsImJsdWVHcmV5NTAiLCJibHVlR3JleTEwMCIsImJsdWVHcmV5MjAwIiwiYmx1ZUdyZXkzMDAiLCJibHVlR3JleTQwMCIsImJsdWVHcmV5NTAwIiwiYmx1ZUdyZXk2MDAiLCJibHVlR3JleTcwMCIsImJsdWVHcmV5ODAwIiwiYmx1ZUdyZXk5MDAiLCJncmV5NTAiLCJncmV5MTAwIiwiZ3JleTIwMCIsImdyZXkzMDAiLCJncmV5NTAwIiwiZ3JleTcwMCIsImdyZXk4MDAiLCJncmV5OTAwIiwiYmxhY2siLCJmdWxsQmxhY2siLCJtaW5CbGFjayIsImZhaW50QmxhY2siLCJmdWxsV2hpdGUiLDcyLCJTcGFjaW5nIiwiVGhlbWVNYW5hZ2VyIiwiLi9hdXRvLXByZWZpeCIsIi4vY29sb3JzIiwiLi9zcGFjaW5nIiwiLi90aGVtZS1tYW5hZ2VyIiwiLi90cmFuc2l0aW9ucyIsIi4vdHlwb2dyYXBoeSIsNzMsImRlc2t0b3BHdXR0ZXJNb3JlIiw3NCwiRXh0ZW5kIiwiTElHSFQiLCJEQVJLIiwidHlwZXMiLCJ0ZW1wbGF0ZSIsImdldFBhbGV0dGUiLCJnZXRDb21wb25lbnRUaGVtZXMiLCJnZXRDdXJyZW50VGhlbWUiLCJzZXRUaGVtZSIsIm5ld1RoZW1lIiwic2V0U3BhY2luZyIsInNldFBhbGV0dGUiLCJzZXRDb21wb25lbnRUaGVtZXMiLCJuZXdTcGFjaW5nIiwibmV3UGFsZXR0ZSIsIm92ZXJyaWRlcyIsIi4uL3V0aWxzL2V4dGVuZCIsIi4vdGhlbWVzL2RhcmstdGhlbWUiLCIuL3RoZW1lcy9saWdodC10aGVtZSIsNzUsIkRhcmtUaGVtZSIsImNhcmRDb2xvciIsInRodW1iT25Db2xvciIsInRodW1iT2ZmQ29sb3IiLCJ0aHVtYkRpc2FibGVkQ29sb3IiLCJ0aHVtYlJlcXVpcmVkQ29sb3IiLCJ0cmFja09uQ29sb3IiLCJ0cmFja09mZkNvbG9yIiwidHJhY2tEaXNhYmxlZENvbG9yIiwiLi4vLi4vdXRpbHMvY29sb3ItbWFuaXB1bGF0b3IiLCIuLi9jb2xvcnMiLDc2LCJMaWdodFRoZW1lIiwicHJpbWFyeTJDb2xvciIsImFjY2VudDJDb2xvciIsImFjY2VudDNDb2xvciIsInJlcXVpcmVkQ29sb3IiLCJ0YWJsZSIsInRhYmxlSGVhZGVyIiwidGFibGVIZWFkZXJDb2x1bW4iLCJ0YWJsZUZvb3RlciIsInRhYmxlUm93Iiwic3RyaXBlQ29sb3IiLCJzZWxlY3RlZENvbG9yIiwidGFibGVSb3dDb2x1bW4iLCJ0aW1lUGlja2VyIiwiY2xvY2tDb2xvciIsInRvb2xiYXIiLCJkYXJrZW4iLCJ0aXRsZUZvbnRTaXplIiwic2VwYXJhdG9yQ29sb3IiLCJtZW51SG92ZXJDb2xvciIsInRhYnMiLCJ0ZXh0RmllbGQiLCJoaW50Q29sb3IiLCJmbG9hdGluZ0xhYmVsQ29sb3IiLCJlcnJvckNvbG9yIiwiZm9jdXNDb2xvciIsInRyYWNrUmVxdWlyZWRDb2xvciIsIi4uL3NwYWNpbmciLDc3LCJlYXNlT3V0RnVuY3Rpb24iLCJkdXJhdGlvbiIsInByb3BlcnR5IiwiZGVsYXkiLCJlYXNlRnVuY3Rpb24iLCJ0cmFuc2l0aW9ucyIsNzgsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJ0ZXh0RnVsbEJsYWNrIiwidGV4dERhcmtCbGFjayIsInRleHRNaW5CbGFjayIsInRleHRGdWxsV2hpdGUiLCJ0ZXh0RGFya1doaXRlIiwidGV4dExpZ2h0V2hpdGUiLCJmb250V2VpZ2h0TGlnaHQiLDc5LCJldmVudHMiLDgwLCJIYXJkd2FyZUtleWJvYXJkQXJyb3dEb3duIiwiLi4vLi4vc3ZnLWljb24iLDgxLCJIYXJkd2FyZUtleWJvYXJkQXJyb3dVcCIsODIsIi4uL3N2Zy1pY29uIiw4Myw4NCwiTmF2aWdhdGlvbkFycm93RHJvcERvd24iLDg1LCJOYXZpZ2F0aW9uQXJyb3dEcm9wVXAiLDg2LDg3LDg4LDg5LCJUb2dnbGVDaGVja0JveE91dGxpbmVCbGFuayIsOTAsIlRvZ2dsZUNoZWNrQm94Iiw5MSwiVG9nZ2xlUmFkaW9CdXR0b25DaGVja2VkIiw5MiwiVG9nZ2xlUmFkaW9CdXR0b25VbmNoZWNrZWQiLDkzLCJjb2x1bW5zIiwiY2VsbCIsIl9nZXRGb290ZXJSb3ciLCJfZ2V0Q29sdW1uSGVhZGVycyIsImZvb3RlckRhdGEiLCJrZXlQcmVmaXgiLCJmb290ZXJzIiwiX2Zvb3RlckRhdGEkaW5kZXgiLDk0LCJjb2x1bW5OdW1iZXIiLCJoYW5kbGVycyIsIl9vbkNsaWNrIiwiLi4vdG9vbHRpcCIsOTUsInN1cGVySGVhZGVyQ29sdW1ucyIsIm9uU2VsZWN0QWxsIiwiZGlzcGxheVNlbGVjdEFsbCIsImVuYWJsZVNlbGVjdEFsbCIsImZpeGVkIiwiYm9yZGVyQm90dG9tIiwiX2dldFN1cGVySGVhZGVyUm93IiwiX2dldEhlYWRlclJvdyIsImdldFN1cGVySGVhZGVyUm93Iiwic3VwZXJIZWFkZXIiLCJnZXRIZWFkZXJSb3ciLCJzbGljZSIsInNwbGljZSIsIl9nZXRTZWxlY3RBbGxDaGVja2JveCIsIl9nZXRIZWFkZXJDb2x1bW5zIiwiaGVhZGVyRGF0YSIsImhlYWRlcnMiLCJfaGVhZGVyRGF0YSRpbmRleCIsIl9vblNlbGVjdEFsbCIsIl9vbkNvbHVtbkNsaWNrIiwib25Db2x1bW5DbGljayIsIi4uL2NoZWNrYm94IiwiLi90YWJsZS1oZWFkZXItY29sdW1uIiw5NiwiVGFibGVSb3dDb2x1bW4iLCJvbkhvdmVyIiwib25Ib3ZlckV4aXQiLCJob3ZlcmFibGUiLDk3LCJUYWJsZVJvdyIsInJvd051bWJlciIsIm9uUm93Q2xpY2siLCJvbkNlbGxDbGljayIsIm9uUm93SG92ZXIiLCJvblJvd0hvdmVyRXhpdCIsIm9uQ2VsbEhvdmVyIiwib25DZWxsSG92ZXJFeGl0Iiwic2VsZWN0YWJsZSIsInN0cmlwZWQiLCJkaXNwbGF5Qm9yZGVyIiwiZGlzcGxheVJvd0NoZWNrYm94IiwiY2VsbEJnQ29sb3IiLCJfZ2V0Um93Q2hlY2tib3giLCJfZ2V0Q29sdW1ucyIsInJvd0NvbHVtbnMiLCJfY29sdW1ucyRpbmRleCIsImNvbHVtbkNvbXBvbmVudCIsIl9vbkNlbGxDbGljayIsIl9vbkNlbGxIb3ZlciIsIl9vbkNlbGxIb3ZlckV4aXQiLCJfb25Sb3dDbGljayIsIl9vblJvd0hvdmVyIiwiX29uUm93SG92ZXJFeGl0IiwiY29sdW1uSW5kZXgiLCJyb3dTZWxlY3RDQiIsImN0cmxLZXkiLCIuL3RhYmxlLXJvdy1jb2x1bW4iLDk4LCJyb3dEYXRhIiwiY2FuU2VsZWN0QWxsIiwiY29sdW1uT3JkZXIiLCJkZWZhdWx0Q29sdW1uV2lkdGgiLCJkZXNlbGVjdE9uQ2xpY2thd2F5IiwiZml4ZWRGb290ZXIiLCJmaXhlZEhlYWRlciIsImZvb3RlciIsImZvb3RlckNvbHVtbnMiLCJoZWFkZXJDb2x1bW5zIiwibXVsdGlTZWxlY3RhYmxlIiwib25Sb3dTZWxlY3Rpb24iLCJwcmVTY2FuUm93RGF0YSIsInNob3dSb3dIb3ZlciIsInN0cmlwZWRSb3dzIiwicHJlU2VsZWN0ZWRSb3dzIiwiaWR4Iiwicm93Iiwic2VsZWN0ZWRSb3dzIiwiYm9yZGVyQ29sbGFwc2UiLCJib3JkZXJTcGFjaW5nIiwidGFibGVMYXlvdXQiLCJib2R5VGFibGUiLCJ0YWJsZVdyYXBwZXIiLCJ0SGVhZCIsIl9nZXRIZWFkZXIiLCJ0Qm9keSIsIl9nZXRCb2R5IiwidEZvb3QiLCJfZ2V0Rm9vdGVyIiwiaGVhZGVyVGFibGUiLCJmb290ZXJUYWJsZSIsImlubGluZUhlYWRlciIsImlubGluZUZvb3RlciIsIm9yZGVyZWRIZWFkZXJDb2x1bW5zIiwiX29yZGVyQ29sdW1uQmFzZWREYXRhIiwib3JkZXJlZEZvb3RlckNvbHVtbnMiLCJfaXNSb3dTZWxlY3RlZCIsIl9oYW5kbGVSb3dDbGljayIsIl9oYW5kbGVDZWxsQ2xpY2siLCJfaGFuZGxlUm93SG92ZXIiLCJfaGFuZGxlUm93SG92ZXJFeGl0IiwiX2hhbmRsZUNlbGxIb3ZlciIsIl9oYW5kbGVDZWxsSG92ZXJFeGl0IiwiY29sdW1uQmFzZWREYXRhIiwiY2IiLCJvcmRlcmVkRGF0YSIsInJvd0lkeCIsIm9yZGVyZWRSb3dEYXRhIiwiY29sSWR4IiwiY29sdW1uSWQiLCJjb2x1bW5EYXRhIiwiX3NldENvbHVtbldpZHRocyIsImNvbHVtbiIsImFsbFJvd3NTZWxlY3RlZCIsInNlbGVjdGlvbiIsIl9pc1ZhbHVlSW5SYW5nZSIsInJhbmdlIiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiX3Byb2Nlc3NSb3dTZWxlY3Rpb24iLCJsYXN0U2VsZWN0aW9uIiwibWV0YUtleSIsIl9nZXRDb2x1bW5JZCIsIi4vdGFibGUtZm9vdGVyIiwiLi90YWJsZS1oZWFkZXIiLCIuL3RhYmxlLXJvdyIsOTksImhhbmRsZVRvdWNoVGFwIiwicm91dGVOYW1lIiwicm91dGUiLCIuLi9zdHlsZXMvY29sb3JzLmpzIiwxMDAsIlRhYlRlbXBsYXRlIiwxMDEsImluaXRpYWxTZWxlY3RlZEluZGV4Iiwib25BY3RpdmUiLCJ0YWJXaWR0aCIsInRhYkl0ZW1Db250YWluZXJTdHlsZSIsImNvbnRlbnRDb250YWluZXJTdHlsZSIsImlua0JhclN0eWxlIiwiY29udGVudENvbnRhaW5lckNsYXNzTmFtZSIsImdldFRhYkNvdW50IiwiX3VwZGF0ZVRhYldpZHRoIiwidGFiIiwidGFiSXRlbUNvbnRhaW5lciIsInRhYkNvbnRlbnQiLCJmaXhlZFdpZHRoIiwiY2xvbmVXaXRoUHJvcHMiLCJfdGFiV2lkdGhQcm9wSXNWYWxpZCIsIi4uL2luay1iYXIiLCIuL3RhYlRlbXBsYXRlIiwxMDIsImlzVmFsaWQiLCJoYXNWYWx1ZSIsIl91bmlxdWVJZCIsImhhc1ZhbHVlTGlua1Byb3AiLCJoYXNWYWx1ZVByb3AiLCJoYXNOZXdEZWZhdWx0VmFsdWUiLCJoaW50IiwiTW96Qm94U2l6aW5nIiwidW5kZXJsaW5lQWZ0ZXIiLCJmbG9hdGluZ0xhYmVsIiwidGV4dGFyZWEiLCJmb2N1c1VuZGVybGluZSIsImVycm9yVGV4dEVsZW1lbnQiLCJoaW50VGV4dEVsZW1lbnQiLCJmbG9hdGluZ0xhYmVsVGV4dEVsZW1lbnQiLCJfZ2V0UmVmIiwiX2hhbmRsZUlucHV0Qmx1ciIsIl9oYW5kbGVJbnB1dEtleURvd24iLCJfaGFuZGxlSW5wdXRDaGFuZ2UiLCJfaGFuZGxlVGV4dEFyZWFIZWlnaHRDaGFuZ2UiLCJ1bmRlcmxpbmVFbGVtZW50IiwiZm9jdXNVbmRlcmxpbmVFbGVtZW50IiwiX2dldElucHV0Tm9kZSIsInNldEVycm9yVGV4dCIsIm5ld0Vycm9yVGV4dCIsIi4vZW5oYW5jZWQtdGV4dGFyZWEiLDEwMywiZ2V0RGlzcGxheU5hbWUiLCJDb21wb25lbnQiLCJjdXN0b21UaGVtZSIsImNoaWxkQ29udGV4dFR5cGVzIiwibXVpVGhlbWVNYW5hZ2VyIiwiZ2V0Q2hpbGRDb250ZXh0IiwidGhlbWVNYW5hZ2VyIiwiLi9zdHlsZXMvdGhlbWUtbWFuYWdlciIsMTA0LCJDbG9ja0J1dHRvbiIsInNlbGVjdCIsMTA1LCJyYWQyZGVnIiwicmFkIiwiZ2V0VG91Y2hFdmVudE9mZnNldFZhbHVlcyIsImJvdW5kaW5nUmVjdCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiY2xpZW50WSIsIkNsb2NrTnVtYmVyIiwiQ2xvY2tQb2ludGVyIiwiQ2xvY2tIb3VycyIsImluaXRpYWxIb3VycyIsImNlbnRlciIsInkiLCJiYXNlUG9pbnQiLCJpc01vdXNlUHJlc3NlZCIsImJ1dHRvbnMiLCJuYXRpdmVFdmVudCIsImdldEhvdXJzIiwiY2xvY2tFbGVtZW50IiwibWFzayIsImhhbmRsZVVwIiwic2V0Q2xvY2siLCJoYW5kbGVNb3ZlIiwiaGFuZGxlVG91Y2hNb3ZlIiwiaGFuZGxlVG91Y2hFbmQiLCJmaW5pc2giLCJob3VycyIsImF0YW4iLCJhdGFuMiIsImRlZyIsImZsb29yIiwiZGVsdGEiLCJwb3ciLCJfZ2V0U2VsZWN0ZWQiLCJob3VyIiwiX2dldEhvdXJOdW1iZXJzIiwiaG91clNpemUiLCJpc1NlbGVjdGVkIiwiaGl0TWFzayIsIm51bWJlcnMiLCJoYXNTZWxlY3RlZCIsIm9uVG91Y2hNb3ZlIiwib25Nb3VzZU1vdmUiLCIuL2Nsb2NrLW51bWJlciIsIi4vY2xvY2stcG9pbnRlciIsMTA2LCJDbG9ja01pbnV0ZXMiLCJpbml0aWFsTWludXRlcyIsImdldE1pbnV0ZXMiLCJoYW5kbGVUb3VjaCIsIm1pbnV0ZXMiLCJfZ2V0TWludXRlTnVtYmVycyIsInNlbGVjdGVkTWludXRlcyIsIm1pbnV0ZSIsMTA3LCJvblNlbGVjdGVkIiwiaW5uZXIiLCJwb3NpdGlvbnMiLCJpbm5lclBvc2l0aW9ucyIsInRyYW5zZm9ybVBvcyIsIl90cmFuc2Zvcm1Qb3MiLDEwOCwiaXNJbm5lciIsImdldEFuZ2xlIiwiY2FsY0FuZ2xlIiwiYmFzZSIsImFuZ2xlIiwibWFyayIsMTA5LCJUaW1lRGlzcGxheSIsIkNsb2NrIiwiaW5pdGlhbFRpbWUiLCJzZWxlY3RlZFRpbWUiLCJfc2V0TW9kZSIsIl9zZXRBZmZpeCIsImFmZml4IiwiX2dldEFmZml4IiwiaGFuZGxlQ2hhbmdlSG91cnMiLCJfZ2V0QnV0dG9ucyIsImlzQU0iLCJfZ2V0SXNBTSIsImNsb2NrIiwiaGFuZGxlQ2hhbmdlTWludXRlcyIsIm9uU2VsZWN0SG91ciIsIm9uU2VsZWN0TWluIiwiZmluaXNoZWQiLCJ0aW1lIiwic2V0SG91cnMiLCJzZXRNaW51dGVzIiwiZ2V0U2VsZWN0ZWRUaW1lIiwiLi9jbG9jay1idXR0b24iLCIuL2Nsb2NrLWhvdXJzIiwiLi9jbG9jay1taW51dGVzIiwiLi90aW1lLWRpc3BsYXkiLDExMCwxMTEsInNhbml0aXplVGltZSIsIl9zYW5pdGl6ZVRpbWUiLCJfc2FuaXRpemVUaW1lMiIsMTEyLCJUaW1lUGlja2VyRGlhbG9nIiwiLi9jbG9jayIsMTEzLCJlbXB0eVRpbWUiLCJkZWZhdWx0VGltZSIsInBlZGFudGljIiwiZGlhbG9nVGltZSIsImZvcm1hdFRpbWUiLCJtaW5zIiwiYWRkaXRpb25hbCIsImRlZmF1bHRJbnB1dFZhbHVlIiwiZ2V0VGltZSIsInNldFRpbWUiLCIuL3RpbWUtcGlja2VyLWRpYWxvZyIsMTE0LCJlbGVtZW50U3R5bGUiLCJkZWZhdWx0VG9nZ2xlZCIsInRvZ2dsZVNpemUiLCJ0b2dnbGVUcmFja1dpZHRoIiwidGh1bWIiLCJ0cmFja1doZW5Td2l0Y2hlZCIsInRodW1iV2hlblN3aXRjaGVkIiwidHJhY2tXaGVuRGlzYWJsZWQiLCJ0aHVtYldoZW5EaXNhYmxlZCIsInRodW1iU3R5bGVzIiwidG9nZ2xlRWxlbWVudFN0eWxlcyIsImN1c3RvbVJpcHBsZVN0eWxlIiwiaXNUb2dnbGVkIiwic2V0VG9nZ2xlZCIsIm5ld1RvZ2dsZWRWYWx1ZSIsMTE1LCJtYXJnaW5Ib3Jpem9udGFsIiwibWFyZ2luVmVydGljYWwiLCJzcGFuIiwibGFzdENoaWxkIiwic3R5bGVDb250cm9sQmciLCJzdHlsZVVuZGVybGluZSIsIl9oYW5kbGVNb3VzZUVudGVyRHJvcERvd25NZW51IiwiX2hhbmRsZU1vdXNlTGVhdmVEcm9wRG93bk1lbnUiLCJfaGFuZGxlTW91c2VFbnRlckZvbnRJY29uIiwiX2hhbmRsZU1vdXNlTGVhdmVGb250SWNvbiIsMTE2LDExNywxMTgsMTE5LCJfc2V0VG9vbHRpcFBvc2l0aW9uIiwidG91Y2hNYXJnaW5PZmZzZXQiLCJ0b3VjaE9mZnNldFRvcCIsInJvb3RXaGVuVG91Y2hlZCIsInJpcHBsZVdoZW5TaG93biIsInRvb2x0aXBXaWR0aCIsInRvb2x0aXBIZWlnaHQiLCJyaXBwbGVEaWFtZXRlciIsMTIwLCJTY2FsZUluQ2hpbGQiLCJlbnRlckRlbGF5IiwibWluU2NhbGUiLDEyMSwiU2NhbGVJbiIsImNoaWxkU3R5bGUiLCIuL3NjYWxlLWluLWNoaWxkIiwxMjIsIlNsaWRlSW5DaGlsZCIsImdldExlYXZlRGlyZWN0aW9uIiwxMjMsIlNsaWRlSW4iLCJfZ2V0TGVhdmVEaXJlY3Rpb24iLCIuL3NsaWRlLWluLWNoaWxkIiwxMjQsImNyZWF0ZUZyYWdtZW50IiwiZnJhZ21lbnRzIiwibmV3RnJhZ21lbnRzIiwidmFsaWRDaGlsZHJlbkNvdW50IiwiZmlyc3RLZXkiLCJleHRlbmRlZFByb3BzIiwiZXh0ZW5kZWRDaGlsZHJlbiIsMTI1LCJfbHVtaW5hbmNlIiwiX2RlY29tcG9zZUNvbG9yIiwicmdiIiwidmFsdWVzIiwiX2NvbnZlcnRDb2xvclRvU3RyaW5nIiwiYWRkaXRvbmFsVmFsdWUiLCJfY29udmVydEhleFRvUkdCIiwiZXh0ZW5kZWRDb2xvciIsImNoYXJBdCIsInN1YnN0ciIsImciLCJtYXJrZXIiLCJzdWJzdHJpbmciLCJjb250cmFzdFJhdGlvIiwiZm9yZWdyb3VuZCIsImx1bUEiLCJsdW1CIiwiY29udHJhc3RSYXRpb0xldmVsIiwibGV2ZWxzIiwiZmFpbCIsImFhLWxhcmdlIiwiYWEiLCJhYWEiLCJyYXRpbyIsImxldmVsIiwxMjYsIl90ZXN0U3VwcG9ydGVkUHJvcHMiLCJ0cmFuc2l0aW9uRW5kRXZlbnROYW1lIiwiT1RyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsImFuaW1hdGlvbkVuZEV2ZW50TmFtZSIsImFuaW1hdGlvbiIsIi1vLWFuaW1hdGlvbiIsIi1tb3otYW5pbWF0aW9uIiwiLXdlYmtpdC1hbmltYXRpb24iLCJ0cmFuc2l0aW9uRW5kIiwib25BbmltYXRpb25FbmQiLCJhbmltYXRpb25FbmQiLCIuL2V2ZW50cyIsMTI3LCJzZXRNb250aCIsImdldE1vbnRoIiwiY2xvbmVBc0RhdGUiLCJjbG9uZWREYXRlIiwiZ2V0RGF5c0luTW9udGgiLCJyZXN1bHREYXRlIiwiZ2V0RGF5IiwiZGF5QXJyYXkiLCJkYXlzSW5Nb250aCIsImRheXNJbldlZWsiLCJlbXB0eURheXMiLCJmaXJzdERheU9mV2VlayIsInVuc2hpZnQiLCJtIiwiZDEiLCJkMiIsImRhdGUxIiwiZGF0ZTIiLCJkYXRlVG9DaGVjayIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLDEyOCwicGFyZW50IiwicGFyZW50Tm9kZSIsInJlY3QiLCJzY3JvbGxMZWZ0IiwiZ2V0U3R5bGVBdHRyaWJ1dGVBc051bWJlciIsImF0dHJTdHlsZSIsImF0dHJOdW0iLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZUNsYXNzIiwicmVtb3ZlIiwiUmVnRXhwIiwiam9pbiIsImhhc0NsYXNzIiwidGVzdCIsInRvZ2dsZUNsYXNzIiwiZm9yY2VSZWRyYXciLCJvcmlnaW5hbERpc3BsYXkiLCJ3aXRob3V0VHJhbnNpdGlvbiIsIm9yaWdpbmFsVHJhbnNpdGlvbiIsMTI5LCJ0eXBlQXJyYXkiLCJyZWN1cnNpdmVGdW5jdGlvbiIsImF0dGFjaEV2ZW50IiwiZGV0YWNoRXZlbnQiLDEzMCwiaXNPYmplY3QiLCJvdmVycmlkZSIsIm1lcmdlZE9iamVjdCIsImJhc2VQcm9wIiwib3ZlcnJpZGVQcm9wIiwib3ZlcnJpZGVLZXkiLDEzMSwibWVyZ2VTaW5nbGUiLCJvYmpBIiwib2JqQiIsIiRtZXJnZSIsIm1lcmdlSXRlbSIsIm5ld1ZhbHVlT2JqZWN0IiwiY29tbWFuZCIsIm5ld09iaiIsMTMyLCIuL2NvbG9yLW1hbmlwdWxhdG9yIiwiLi9jc3MtZXZlbnQiLCIuL2RvbSIsIi4vZXh0ZW5kIiwiLi9pbW11dGFiaWxpdHktaGVscGVyIiwiLi9rZXktY29kZSIsIi4va2V5LWxpbmUiLCIuL3N0eWxlcyIsIi4vdW5pcXVlLWlkIiwxMzMsMTM0LCJEZXNrdG9wIiwiR1VUVEVSIiwiR1VUVEVSX0xFU1MiLCJJTkNSRU1FTlQiLCJNRU5VX0lURU1fSEVJR0hUIiwiZGltIiwxMzUsImlzIiwic2V0Q3NzIiwibVN0eWxlIiwiY3NzVGV4dCIsInNldENzc0FsbCIsInN0cjEiLCJzdHIyIiwicHJlZml4ZXMiLCJ0ZXN0UHJvcHMiLCJwcm9wIiwidGVzdERPTVByb3BzIiwiZWxlbSIsInRlc3RQcm9wc0FsbCIsInVjUHJvcCIsImNzc29tUHJlZml4ZXMiLCJkb21QcmVmaXhlcyIsImRvY0VsZW1lbnQiLCJtb2QiLCJtb2RFbGVtIiwib21QcmVmaXhlcyIsInRlc3RzIiwiY2xhc3NlcyIsImZlYXR1cmVOYW1lIiwiaW5qZWN0RWxlbWVudFdpdGhTdHlsZXMiLCJydWxlIiwibm9kZXMiLCJ0ZXN0bmFtZXMiLCJyZXQiLCJkb2NPdmVyZmxvdyIsImRpdiIsImZha2VCb2R5IiwicmVtb3ZlQ2hpbGQiLCJfaGFzT3duUHJvcGVydHkiLCJoYXNPd25Qcm9wIiwiY29uc3RydWN0b3IiLCJGdW5jdGlvbiIsInRoYXQiLCJGIiwiX3NlbGYiLCJyZXN1bHQiLCJib3JkZXJyYWRpdXMiLCJib3hzaGFkb3ciLCJjc3N0cmFuc2Zvcm1zIiwiY3NzdHJhbnNmb3JtczNkIiwib2Zmc2V0TGVmdCIsImNzc3RyYW5zaXRpb25zIiwiZmVhdHVyZSIsImFkZFRlc3QiLCJlbmFibGVDbGFzc2VzIiwiX3ZlcnNpb24iLCJfcHJlZml4ZXMiLCJfZG9tUHJlZml4ZXMiLCJfY3Nzb21QcmVmaXhlcyIsInRlc3RQcm9wIiwidGVzdEFsbFByb3BzIiwidGVzdFN0eWxlcyIsMTM2LDEzNywxMzgsMTM5LCJhcmciLCJkZWZpbmUiLCJhbWQiLDE0MCwidXBkYXRlQm91bmRTdGF0ZSIsImJvdW5kVG9wIiwiYm91bmRSaWdodCIsImJvdW5kQm90dG9tIiwiYm91bmRMZWZ0IiwiYm91bmRBbGwiLCJib3VuZEJveCIsImNyZWF0ZVVJRXZlbnQiLCJkcmFnZ2FibGUiLCJjYW5EcmFnWSIsImNhbkRyYWdYIiwiaXNGdW5jdGlvbiIsImZpbmRJbkFycmF5IiwibWF0Y2hlc1NlbGVjdG9yIiwic2VsZWN0b3IiLCJtZXRob2QiLCJnZXRDb250cm9sUG9zaXRpb24iLCJhZGRFdmVudCIsImhhbmRsZXIiLCJyZW1vdmVFdmVudCIsImJvZHlFbGVtZW50IiwiZW1wdHlGdW5jdGlvbiIsImlzVG91Y2hEZXZpY2UiLCJkcmFnRXZlbnRGb3IiLCJldmVudHNGb3IiLCJtb3ZlIiwibW91c2UiLCJncmlkIiwiYXJyYXlPZiIsInVzZUNoaWxkIiwiTmFOIiwiaGFuZGxlRHJhZyIsImhhbmRsZURyYWdFbmQiLCJoYW5kbGVEcmFnU3RhcnQiLCJkcmFnUG9pbnQiLCJib3VuZGluZ1ZhbHVlIiwiX3RvUGl4ZWxzIiwib2Zmc2V0UGFyZW50IiwiY29uc3RyYWluT2Zmc2V0IiwicHJldiIsInNuYXAiLCJwcmV2TGVmdCIsInByZXZUb3AiLCJvbmx5IiwiRE9NIiwiaXNGaW5pdGUiLDE0MSwibG9hZCIsImRvTm90UGFyc2UiLCJfcmF3Q29va2llcyIsIl9jb29raWVzIiwic2F2ZSIsIm9wdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb29raWUiLCJzZXJpYWxpemUiLCJyZW1vdmVDb29raWUiLCJzZXRSYXdDb29raWUiLCJyYXdDb29raWUiLCJyYXdDb29raWVzIiwicGFyc2UiLCJyZWFjdENvb2tpZSIsMTQyLCJwYWlycyIsImRlYyIsImRlY29kZSIsInBhaXIiLCJlcV9pZHgiLCJ0cmltIiwidHJ5RGVjb2RlIiwiZW5jIiwiZW5jb2RlIiwibWF4QWdlIiwiZG9tYWluIiwiZXhwaXJlcyIsInRvVVRDU3RyaW5nIiwiaHR0cE9ubHkiLCJzZWN1cmUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVVUklDb21wb25lbnQiLDE0Mywic2V0UmVzcG9uZGVyQW5kRXh0cmFjdFRyYW5zZmVyIiwidG9wTGV2ZWxUeXBlIiwidG9wTGV2ZWxUYXJnZXRJRCIsInNob3VsZFNldEV2ZW50VHlwZSIsImlzU3RhcnRpc2giLCJldmVudFR5cGVzIiwic3RhcnRTaG91bGRTZXRSZXNwb25kZXIiLCJpc01vdmVpc2giLCJtb3ZlU2hvdWxkU2V0UmVzcG9uZGVyIiwic2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyIiwiYnViYmxlU2hvdWxkU2V0RnJvbSIsInJlc3BvbmRlcklEIiwic2hvdWxkU2V0RXZlbnQiLCJTeW50aGV0aWNFdmVudCIsImdldFBvb2xlZCIsIkV2ZW50UHJvcGFnYXRvcnMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwid2FudHNSZXNwb25kZXJJRCIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiZXh0cmFjdGVkIiwiZ3JhbnRFdmVudCIsInJlc3BvbmRlckdyYW50IiwiYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMiLCJ0ZXJtaW5hdGlvblJlcXVlc3RFdmVudCIsInJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCIsInNob3VsZFN3aXRjaCIsImhhc0Rpc3BhdGNoZXMiLCJleGVjdXRlRGlyZWN0RGlzcGF0Y2giLCJ0ZXJtaW5hdGVUeXBlIiwicmVzcG9uZGVyVGVybWluYXRlIiwidGVybWluYXRlRXZlbnQiLCJhY2N1bXVsYXRlSW50byIsInJlamVjdEV2ZW50IiwicmVzcG9uZGVyUmVqZWN0IiwiY2FuVHJpZ2dlclRyYW5zZmVyIiwiRXZlbnRDb25zdGFudHMiLCJ0b3BMZXZlbFR5cGVzIiwidG9wU2Nyb2xsIiwiaXNQcmVzc2luZyIsIkV2ZW50UGx1Z2luVXRpbHMiLCJrZXlPZiIsImlzRW5kaXNoIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJidWJibGVkIiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlciIsImNhcHR1cmVkIiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUiLCJvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlciIsIm9uU2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSIsIm9uTW92ZVNob3VsZFNldFJlc3BvbmRlciIsIm9uTW92ZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmUiLCJyZXNwb25kZXJNb3ZlIiwicmVnaXN0cmF0aW9uTmFtZSIsIm9uUmVzcG9uZGVyTW92ZSIsInJlc3BvbmRlclJlbGVhc2UiLCJvblJlc3BvbmRlclJlbGVhc2UiLCJvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdCIsIm9uUmVzcG9uZGVyR3JhbnQiLCJvblJlc3BvbmRlclJlamVjdCIsIm9uUmVzcG9uZGVyVGVybWluYXRlIiwiUmVzcG9uZGVyRXZlbnRQbHVnaW4iLCJnZXRSZXNwb25kZXJJRCIsImV4dHJhY3RFdmVudHMiLCJ0b3BMZXZlbFRhcmdldCIsInRyYW5zZmVyIiwicmVzcG9uZGVyU3RhcnQiLCJnZXN0dXJlIiwicmVhY3QvbGliL0V2ZW50Q29uc3RhbnRzIiwicmVhY3QvbGliL0V2ZW50UGx1Z2luVXRpbHMiLCJyZWFjdC9saWIvRXZlbnRQcm9wYWdhdG9ycyIsInJlYWN0L2xpYi9TeW50aGV0aWNFdmVudCIsInJlYWN0L2xpYi9hY2N1bXVsYXRlSW50byIsInJlYWN0L2xpYi9rZXlPZiIsMTQ0LCJnZXRBeGlzQ29vcmRPZkV2ZW50Iiwic2luZ2xlVG91Y2giLCJUb3VjaEV2ZW50VXRpbHMiLCJleHRyYWN0U2luZ2xlVG91Y2giLCJwYWdlIiwiY2xpZW50IiwiVmlld3BvcnRNZXRyaWNzIiwiZW52U2Nyb2xsIiwiZ2V0RGlzdGFuY2UiLCJjb29yZHMiLCJBeGlzIiwiU3ludGhldGljVUlFdmVudCIsImlzVG91Y2giLCJ0b3VjaFR5cGVzIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUb3VjaE1vdmUiLCJ0YXBNb3ZlVGhyZXNob2xkIiwiaWdub3JlTW91c2VUaHJlc2hvbGQiLCJzdGFydENvb3JkcyIsImxhc3RUb3VjaEV2ZW50IiwiZGVwZW5kZW5jaWVzIiwidG9wTW91c2VEb3duIiwidG9wTW91c2VNb3ZlIiwidG9wTW91c2VVcCIsInVzZVRvdWNoRXZlbnRzIiwidG91Y2hUYXAiLCJvblRvdWNoVGFwQ2FwdHVyZSIsIm5vdyIsIlRhcEV2ZW50UGx1Z2luIiwiLi9Ub3VjaEV2ZW50VXRpbHMiLCJyZWFjdC9saWIvU3ludGhldGljVUlFdmVudCIsInJlYWN0L2xpYi9WaWV3cG9ydE1ldHJpY3MiLDE0NSwiaGFzVG91Y2hlcyIsImhhc0NoYW5nZWRUb3VjaGVzIiwxNDYsImluaXRpYWxpemVUb3VjaEV2ZW50cyIsImluamVjdGlvbiIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIi4vUmVzcG9uZGVyRXZlbnRQbHVnaW4uanMiLCIuL1RhcEV2ZW50UGx1Z2luLmpzIiwicmVhY3QvbGliL0V2ZW50UGx1Z2luSHViIiwxNDcsIi4vbGliL1JlYWN0V2l0aEFkZG9ucyIsMTQ4LCJmb2N1c05vZGUiLCJBdXRvRm9jdXNNaXhpbiIsImF1dG9Gb2N1cyIsIi4vZm9jdXNOb2RlIiwxNDksImlzUHJlc3RvIiwib3BlcmEiLCJpc0tleXByZXNzQ29tbWFuZCIsImdldENvbXBvc2l0aW9uRXZlbnRUeXBlIiwidG9wQ29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25VcGRhdGUiLCJjb21wb3NpdGlvblVwZGF0ZSIsImlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0IiwidG9wS2V5RG93biIsIlNUQVJUX0tFWUNPREUiLCJpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQiLCJ0b3BLZXlVcCIsIkVORF9LRVlDT0RFUyIsInRvcEtleVByZXNzIiwidG9wQmx1ciIsImdldERhdGFGcm9tQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJleHRyYWN0Q29tcG9zaXRpb25FdmVudCIsImV2ZW50VHlwZSIsImZhbGxiYWNrRGF0YSIsImNhblVzZUNvbXBvc2l0aW9uRXZlbnQiLCJjdXJyZW50Q29tcG9zaXRpb24iLCJ1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSIsImdldERhdGEiLCJGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUiLCJTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50IiwiY3VzdG9tRGF0YSIsImdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnMiLCJTUEFDRUJBUl9DT0RFIiwiaGFzU3BhY2VLZXlwcmVzcyIsIlNQQUNFQkFSX0NIQVIiLCJ0b3BUZXh0SW5wdXQiLCJjaGFycyIsImdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyIsInRvcFBhc3RlIiwiZnJvbUNoYXJDb2RlIiwiZXh0cmFjdEJlZm9yZUlucHV0RXZlbnQiLCJjYW5Vc2VUZXh0SW5wdXRFdmVudCIsIlN5bnRoZXRpY0lucHV0RXZlbnQiLCJiZWZvcmVJbnB1dCIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlRE9NIiwiZG9jdW1lbnRNb2RlIiwib25CZWZvcmVJbnB1dCIsIm9uQmVmb3JlSW5wdXRDYXB0dXJlIiwib25Db21wb3NpdGlvbkVuZCIsIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZSIsIm9uQ29tcG9zaXRpb25VcGRhdGUiLCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZSIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCIuL0V2ZW50Q29uc3RhbnRzIiwiLi9FdmVudFByb3BhZ2F0b3JzIiwiLi9FeGVjdXRpb25FbnZpcm9ubWVudCIsIi4vRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlIiwiLi9TeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50IiwiLi9TeW50aGV0aWNJbnB1dEV2ZW50IiwiLi9rZXlPZiIsMTUwLCJpbnZhcmlhbnQiLCJDU1NDb3JlIiwiY29uZGl0aW9uQ2xhc3MiLCIuL2ludmFyaWFudCIsMTUxLCJwcmVmaXhLZXkiLCJwcmVmaXgiLCJpc1VuaXRsZXNzTnVtYmVyIiwiYm94RmxleEdyb3VwIiwiY29sdW1uQ291bnQiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJsaW5lQ2xhbXAiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJmaWxsT3BhY2l0eSIsInN0cm9rZU9wYWNpdHkiLCJzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnMiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYm9yZGVyV2lkdGgiLCJib3JkZXJTdHlsZSIsImJvcmRlckJvdHRvbVdpZHRoIiwiYm9yZGVyQm90dG9tU3R5bGUiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckxlZnQiLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJMZWZ0U3R5bGUiLCJib3JkZXJMZWZ0Q29sb3IiLCJib3JkZXJSaWdodCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJSaWdodFN0eWxlIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyVG9wU3R5bGUiLCJib3JkZXJUb3BDb2xvciIsImZvbnRTdHlsZSIsImZvbnRWYXJpYW50IiwiQ1NTUHJvcGVydHkiLDE1MiwiY2FtZWxpemVTdHlsZU5hbWUiLCJkYW5nZXJvdXNTdHlsZVZhbHVlIiwiaHlwaGVuYXRlU3R5bGVOYW1lIiwibWVtb2l6ZVN0cmluZ09ubHkiLCJwcm9jZXNzU3R5bGVOYW1lIiwic3R5bGVOYW1lIiwic3R5bGVGbG9hdEFjY2Vzc29yIiwiY3NzRmxvYXQiLCJiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4iLCJiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4iLCJ3YXJuZWRTdHlsZU5hbWVzIiwid2FybmVkU3R5bGVWYWx1ZXMiLCJ3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSIsIndhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZSIsIndhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbiIsIndhcm5WYWxpZFN0eWxlIiwiQ1NTUHJvcGVydHlPcGVyYXRpb25zIiwiY3JlYXRlTWFya3VwRm9yU3R5bGVzIiwic2VyaWFsaXplZCIsInN0eWxlVmFsdWUiLCJzZXRWYWx1ZUZvclN0eWxlcyIsImV4cGFuc2lvbiIsImluZGl2aWR1YWxTdHlsZU5hbWUiLCIuL0NTU1Byb3BlcnR5IiwiLi9jYW1lbGl6ZVN0eWxlTmFtZSIsIi4vZGFuZ2Vyb3VzU3R5bGVWYWx1ZSIsIi4vaHlwaGVuYXRlU3R5bGVOYW1lIiwiLi9tZW1vaXplU3RyaW5nT25seSIsIi4vd2FybmluZyIsMTUzLCJDYWxsYmFja1F1ZXVlIiwiX2NhbGxiYWNrcyIsIl9jb250ZXh0cyIsIlBvb2xlZENsYXNzIiwiZW5xdWV1ZSIsIm5vdGlmeUFsbCIsImNhbGxiYWNrcyIsImNvbnRleHRzIiwicmVzZXQiLCJkZXN0cnVjdG9yIiwiYWRkUG9vbGluZ1RvIiwiLi9PYmplY3QuYXNzaWduIiwiLi9Qb29sZWRDbGFzcyIsMTU0LCJzaG91bGRVc2VDaGFuZ2VFdmVudCIsIm5vZGVOYW1lIiwibWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCIsImNoYW5nZSIsImFjdGl2ZUVsZW1lbnRJRCIsIlJlYWN0VXBkYXRlcyIsImJhdGNoZWRVcGRhdGVzIiwicnVuRXZlbnRJbkJhdGNoIiwiRXZlbnRQbHVnaW5IdWIiLCJlbnF1ZXVlRXZlbnRzIiwicHJvY2Vzc0V2ZW50UXVldWUiLCJzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgiLCJ0YXJnZXRJRCIsImFjdGl2ZUVsZW1lbnQiLCJzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCIsImdldFRhcmdldElERm9yQ2hhbmdlRXZlbnQiLCJ0b3BDaGFuZ2UiLCJoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFOCIsInRvcEZvY3VzIiwic3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlIiwiYWN0aXZlRWxlbWVudFZhbHVlIiwiYWN0aXZlRWxlbWVudFZhbHVlUHJvcCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5IiwibmV3VmFsdWVQcm9wIiwiaGFuZGxlUHJvcGVydHlDaGFuZ2UiLCJzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSIsInByb3BlcnR5TmFtZSIsInNyY0VsZW1lbnQiLCJnZXRUYXJnZXRJREZvcklucHV0RXZlbnQiLCJ0b3BJbnB1dCIsImhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRJRSIsImdldFRhcmdldElERm9ySW5wdXRFdmVudElFIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwic2hvdWxkVXNlQ2xpY2tFdmVudCIsImdldFRhcmdldElERm9yQ2xpY2tFdmVudCIsInRvcENsaWNrIiwiaXNFdmVudFN1cHBvcnRlZCIsImlzVGV4dElucHV0RWxlbWVudCIsIm9uQ2hhbmdlQ2FwdHVyZSIsImRvZXNDaGFuZ2VFdmVudEJ1YmJsZSIsImlzSW5wdXRFdmVudFN1cHBvcnRlZCIsImdldCIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiZ2V0VGFyZ2V0SURGdW5jIiwiaGFuZGxlRXZlbnRGdW5jIiwiLi9FdmVudFBsdWdpbkh1YiIsIi4vUmVhY3RVcGRhdGVzIiwiLi9TeW50aGV0aWNFdmVudCIsIi4vaXNFdmVudFN1cHBvcnRlZCIsIi4vaXNUZXh0SW5wdXRFbGVtZW50IiwxNTUsIm5leHRSZWFjdFJvb3RJbmRleCIsIkNsaWVudFJlYWN0Um9vdEluZGV4IiwiY3JlYXRlUmVhY3RSb290SW5kZXgiLDE1NiwiaW5zZXJ0Q2hpbGRBdCIsImNoaWxkTm9kZSIsImluc2VydEJlZm9yZSIsIkRhbmdlciIsIlJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzIiwic2V0VGV4dENvbnRlbnQiLCJET01DaGlsZHJlbk9wZXJhdGlvbnMiLCJkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCIsInVwZGF0ZVRleHRDb250ZW50IiwicHJvY2Vzc1VwZGF0ZXMiLCJ1cGRhdGVzIiwibWFya3VwTGlzdCIsImluaXRpYWxDaGlsZHJlbiIsInVwZGF0ZWRDaGlsZHJlbiIsIk1PVkVfRVhJU1RJTkciLCJSRU1PVkVfTk9ERSIsInVwZGF0ZWRJbmRleCIsImZyb21JbmRleCIsInVwZGF0ZWRDaGlsZCIsInBhcmVudElEIiwicmVuZGVyZWRNYXJrdXAiLCJkYW5nZXJvdXNseVJlbmRlck1hcmt1cCIsImsiLCJJTlNFUlRfTUFSS1VQIiwibWFya3VwSW5kZXgiLCJ0b0luZGV4IiwiVEVYVF9DT05URU5UIiwidGV4dENvbnRlbnQiLCIuL0RhbmdlciIsIi4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMiLCIuL3NldFRleHRDb250ZW50IiwxNTcsImNoZWNrTWFzayIsImJpdG1hc2siLCJET01Qcm9wZXJ0eUluamVjdGlvbiIsIk1VU1RfVVNFX0FUVFJJQlVURSIsIk1VU1RfVVNFX1BST1BFUlRZIiwiSEFTX1NJREVfRUZGRUNUUyIsIkhBU19CT09MRUFOX1ZBTFVFIiwiSEFTX05VTUVSSUNfVkFMVUUiLCJIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSIsIkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUiLCJpbmplY3RET01Qcm9wZXJ0eUNvbmZpZyIsImRvbVByb3BlcnR5Q29uZmlnIiwiUHJvcGVydGllcyIsIkRPTUF0dHJpYnV0ZU5hbWVzIiwiRE9NUHJvcGVydHlOYW1lcyIsIkRPTU11dGF0aW9uTWV0aG9kcyIsImlzQ3VzdG9tQXR0cmlidXRlIiwiRE9NUHJvcGVydHkiLCJfaXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnMiLCJpc1N0YW5kYXJkTmFtZSIsImxvd2VyQ2FzZWQiLCJnZXRQb3NzaWJsZVN0YW5kYXJkTmFtZSIsImF0dHJpYnV0ZU5hbWUiLCJnZXRBdHRyaWJ1dGVOYW1lIiwiZ2V0UHJvcGVydHlOYW1lIiwiZ2V0TXV0YXRpb25NZXRob2QiLCJwcm9wQ29uZmlnIiwibXVzdFVzZUF0dHJpYnV0ZSIsIm11c3RVc2VQcm9wZXJ0eSIsImhhc1NpZGVFZmZlY3RzIiwiaGFzQm9vbGVhblZhbHVlIiwiaGFzTnVtZXJpY1ZhbHVlIiwiaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUiLCJoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlIiwiZGVmYXVsdFZhbHVlQ2FjaGUiLCJJRF9BVFRSSUJVVEVfTkFNRSIsImlzQ3VzdG9tQXR0cmlidXRlRm4iLCJnZXREZWZhdWx0VmFsdWVGb3JQcm9wZXJ0eSIsInRlc3RFbGVtZW50Iiwibm9kZURlZmF1bHRzIiwxNTgsInNob3VsZElnbm9yZVZhbHVlIiwicXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIiLCJyZWFjdFByb3BzIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJ3YXJuZWRQcm9wZXJ0aWVzIiwid2FyblVua25vd25Qcm9wZXJ0eSIsImxvd2VyQ2FzZWROYW1lIiwic3RhbmRhcmROYW1lIiwiRE9NUHJvcGVydHlPcGVyYXRpb25zIiwiY3JlYXRlTWFya3VwRm9ySUQiLCJjcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eSIsInNldFZhbHVlRm9yUHJvcGVydHkiLCJtdXRhdGlvbk1ldGhvZCIsImRlbGV0ZVZhbHVlRm9yUHJvcGVydHkiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCIuL0RPTVByb3BlcnR5IiwiLi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlciIsMTU5LCJnZXROb2RlTmFtZSIsIm1hcmt1cCIsImNyZWF0ZU5vZGVzRnJvbU1hcmt1cCIsImdldE1hcmt1cFdyYXAiLCJPUEVOX1RBR19OQU1FX0VYUCIsIlJFU1VMVF9JTkRFWF9BVFRSIiwibWFya3VwQnlOb2RlTmFtZSIsInJlc3VsdExpc3QiLCJyZXN1bHRMaXN0QXNzaWdubWVudENvdW50IiwicmVzdWx0SW5kZXgiLCJtYXJrdXBMaXN0QnlOb2RlTmFtZSIsInJlbmRlck5vZGVzIiwicmVuZGVyTm9kZSIsImhhc0F0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsIm9sZENoaWxkIiwidGFnTmFtZSIsIm5ld0NoaWxkIiwicmVwbGFjZUNoaWxkIiwiLi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXAiLCIuL2VtcHR5RnVuY3Rpb24iLCIuL2dldE1hcmt1cFdyYXAiLDE2MCwiRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQW5hbHl0aWNzRXZlbnRQbHVnaW4iLCJNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luIiwxNjEsIlN5bnRoZXRpY01vdXNlRXZlbnQiLCJSZWFjdE1vdW50IiwiZ2V0Rmlyc3RSZWFjdERPTSIsIm1vdXNlRW50ZXIiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsIm1vdXNlTGVhdmUiLCJleHRyYWN0ZWRFdmVudHMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ3aW4iLCJkb2MiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJmcm9tIiwidG8iLCJ0b0VsZW1lbnQiLCJmcm9tSUQiLCJnZXRJRCIsInRvSUQiLCJsZWF2ZSIsImVudGVyIiwiYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzIiwiLi9SZWFjdE1vdW50IiwiLi9TeW50aGV0aWNNb3VzZUV2ZW50IiwxNjIsImtleU1pcnJvciIsIlByb3BhZ2F0aW9uUGhhc2VzIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRXJyb3IiLCJ0b3BMb2FkIiwidG9wUmVzZXQiLCJ0b3BTdWJtaXQiLCJ0b3BXaGVlbCIsIi4va2V5TWlycm9yIiwxNjMsIkV2ZW50TGlzdGVuZXIiLCJsaXN0ZW4iLCJjYXB0dXJlIiwicmVnaXN0ZXJEZWZhdWx0IiwxNjQsInZhbGlkYXRlSW5zdGFuY2VIYW5kbGUiLCJ2YWxpZCIsIkluc3RhbmNlSGFuZGxlIiwidHJhdmVyc2VUd29QaGFzZSIsInRyYXZlcnNlRW50ZXJMZWF2ZSIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJmb3JFYWNoQWNjdW11bGF0ZWQiLCJsaXN0ZW5lckJhbmsiLCJldmVudFF1ZXVlIiwiZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlIiwiZXhlY3V0ZURpc3BhdGNoIiwiUGx1Z2luTW9kdWxlIiwiZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQiLCJleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIiLCJpbmplY3RNb3VudCIsImluamVjdEluc3RhbmNlSGFuZGxlIiwiSW5qZWN0ZWRJbnN0YW5jZUhhbmRsZSIsImdldEluc3RhbmNlSGFuZGxlIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicHV0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImJhbmtGb3JSZWdpc3RyYXRpb25OYW1lIiwiZ2V0TGlzdGVuZXIiLCJkZWxldGVMaXN0ZW5lciIsImRlbGV0ZUFsbExpc3RlbmVycyIsInBsdWdpbnMiLCJwb3NzaWJsZVBsdWdpbiIsInByb2Nlc3NpbmdFdmVudFF1ZXVlIiwiX19wdXJnZSIsIl9fZ2V0TGlzdGVuZXJCYW5rIiwiLi9FdmVudFBsdWdpblJlZ2lzdHJ5IiwiLi9FdmVudFBsdWdpblV0aWxzIiwiLi9hY2N1bXVsYXRlSW50byIsIi4vZm9yRWFjaEFjY3VtdWxhdGVkIiwxNjUsInJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nIiwiRXZlbnRQbHVnaW5PcmRlciIsInBsdWdpbk5hbWUiLCJuYW1lc1RvUGx1Z2lucyIsInBsdWdpbkluZGV4IiwicHVibGlzaGVkRXZlbnRzIiwicHVibGlzaEV2ZW50Rm9yUGx1Z2luIiwiZGlzcGF0Y2hDb25maWciLCJwaGFzZU5hbWUiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lIiwicHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwiSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyIsImlzT3JkZXJpbmdEaXJ0eSIsInBoYXNlIiwiX3Jlc2V0RXZlbnRQbHVnaW5zIiwxNjYsImZvckVhY2hFdmVudERpc3BhdGNoIiwiZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJkaXNwYXRjaElEcyIsIl9kaXNwYXRjaElEcyIsInZhbGlkYXRlRXZlbnREaXNwYXRjaGVzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJkb21JRCIsImN1cnJlbnRUYXJnZXQiLCJNb3VudCIsImdldE5vZGUiLCJyZXR1cm5WYWx1ZSIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsIiwiZGlzcGF0Y2hMaXN0ZW5lciIsImRpc3BhdGNoSUQiLCJyZXMiLCJJbmplY3RlZE1vdW50IiwibGlzdGVuZXJzSXNBcnIiLCJpZHNJc0FyciIsIklEc0xlbiIsImxpc3RlbmVyc0xlbiIsMTY3LCJsaXN0ZW5lckF0UGhhc2UiLCJwcm9wYWdhdGlvblBoYXNlIiwiYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyIsInVwd2FyZHMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlIiwiZGlzcGF0Y2hNYXJrZXIiLCJhY2N1bXVsYXRlRGlzcGF0Y2hlcyIsImlnbm9yZWREaXJlY3Rpb24iLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSIsMTY4LCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLDE2OSwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiZ2V0VGV4dCIsIl9mYWxsYmFja1RleHQiLCJnZXRUZXh0Q29udGVudEFjY2Vzc29yIiwic3RhcnRWYWx1ZSIsInN0YXJ0TGVuZ3RoIiwiZW5kVmFsdWUiLCJlbmRMZW5ndGgiLCJtaW5FbmQiLCJzbGljZVRhaWwiLCIuL2dldFRleHRDb250ZW50QWNjZXNzb3IiLDE3MCwiaGFzU1ZHIiwiaW1wbGVtZW50YXRpb24iLCJoYXNGZWF0dXJlIiwiSFRNTERPTVByb3BlcnR5Q29uZmlnIiwiYWNjZXB0IiwiYWNjZXB0Q2hhcnNldCIsImFjY2Vzc0tleSIsImFsbG93RnVsbFNjcmVlbiIsImFsbG93VHJhbnNwYXJlbmN5IiwiYWx0IiwiYXN5bmMiLCJhdXRvQ29tcGxldGUiLCJhdXRvUGxheSIsImNlbGxQYWRkaW5nIiwiY2VsbFNwYWNpbmciLCJjaGFyU2V0IiwiY2xhc3NJRCIsImNvbHMiLCJjb2xTcGFuIiwiY29udGVudEVkaXRhYmxlIiwiY29udGV4dE1lbnUiLCJjcm9zc09yaWdpbiIsImRhdGVUaW1lIiwiZGVmZXIiLCJkb3dubG9hZCIsImVuY1R5cGUiLCJmb3JtIiwiZm9ybUFjdGlvbiIsImZvcm1FbmNUeXBlIiwiZm9ybU1ldGhvZCIsImZvcm1Ob1ZhbGlkYXRlIiwiZm9ybVRhcmdldCIsImZyYW1lQm9yZGVyIiwiaGlkZGVuIiwiaGlnaCIsImhyZWYiLCJocmVmTGFuZyIsImh0dHBFcXVpdiIsImxhbmciLCJsb29wIiwibG93IiwibWFuaWZlc3QiLCJtYXJnaW5IZWlnaHQiLCJtYXJnaW5XaWR0aCIsIm1heExlbmd0aCIsIm1lZGlhR3JvdXAiLCJtdXRlZCIsIm5vVmFsaWRhdGUiLCJvcHRpbXVtIiwicGF0dGVybiIsInBsYWNlaG9sZGVyIiwicG9zdGVyIiwicHJlbG9hZCIsInJhZGlvR3JvdXAiLCJyZWwiLCJyb2xlIiwicm93U3BhbiIsInNhbmRib3giLCJzY29wZSIsInNjb3BlZCIsInNjcm9sbGluZyIsInNlYW1sZXNzIiwic2l6ZXMiLCJzcGVsbENoZWNrIiwic3JjRG9jIiwic3JjU2V0IiwidXNlTWFwIiwid21vZGUiLCJhdXRvQ2FwaXRhbGl6ZSIsImF1dG9Db3JyZWN0IiwiaXRlbVByb3AiLCJpdGVtU2NvcGUiLCJpdGVtVHlwZSIsIml0ZW1JRCIsIml0ZW1SZWYiLCJ1bnNlbGVjdGFibGUiLDE3MSwiUmVhY3RMaW5rIiwiUmVhY3RTdGF0ZVNldHRlcnMiLCJMaW5rZWRTdGF0ZU1peGluIiwibGlua1N0YXRlIiwiY3JlYXRlU3RhdGVLZXlTZXR0ZXIiLCIuL1JlYWN0TGluayIsIi4vUmVhY3RTdGF0ZVNldHRlcnMiLDE3MiwiX2Fzc2VydFNpbmdsZUxpbmsiLCJfYXNzZXJ0VmFsdWVMaW5rIiwiX2Fzc2VydENoZWNrZWRMaW5rIiwiX2hhbmRsZUxpbmtlZFZhbHVlQ2hhbmdlIiwiX2hhbmRsZUxpbmtlZENoZWNrQ2hhbmdlIiwiUmVhY3RQcm9wVHlwZXMiLCJoYXNSZWFkT25seVZhbHVlIiwiaW1hZ2UiLCJyYWRpbyIsInN1Ym1pdCIsIkxpbmtlZFZhbHVlVXRpbHMiLCJNaXhpbiIsImdldENoZWNrZWQiLCJnZXRPbkNoYW5nZSIsIi4vUmVhY3RQcm9wVHlwZXMiLDE3MywiUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyIiwiTG9jYWxFdmVudFRyYXBNaXhpbiIsInRyYXBCdWJibGVkRXZlbnQiLCJoYW5kbGVyQmFzZU5hbWUiLCJfbG9jYWxFdmVudExpc3RlbmVycyIsIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyIiwxNzQsIm9uY2xpY2siLDE3NSwic291cmNlcyIsIm5leHRJbmRleCIsIm5leHRTb3VyY2UiLDE3Niwib25lQXJndW1lbnRQb29sZXIiLCJjb3B5RmllbGRzRnJvbSIsIktsYXNzIiwiaW5zdGFuY2VQb29sIiwicG9wIiwidHdvQXJndW1lbnRQb29sZXIiLCJhMSIsImEyIiwidGhyZWVBcmd1bWVudFBvb2xlciIsImEzIiwiZml2ZUFyZ3VtZW50UG9vbGVyIiwiYTQiLCJhNSIsInN0YW5kYXJkUmVsZWFzZXIiLCJwb29sU2l6ZSIsIkRFRkFVTFRfUE9PTF9TSVpFIiwiREVGQVVMVF9QT09MRVIiLCJDb3B5Q29uc3RydWN0b3IiLCJwb29sZXIiLCJOZXdLbGFzcyIsMTc3LCJSZWFjdENoaWxkcmVuIiwiUmVhY3RDb21wb25lbnQiLCJSZWFjdENsYXNzIiwiUmVhY3RDb250ZXh0IiwiUmVhY3RDdXJyZW50T3duZXIiLCJSZWFjdEVsZW1lbnQiLCJSZWFjdEVsZW1lbnRWYWxpZGF0b3IiLCJSZWFjdERPTSIsIlJlYWN0RE9NVGV4dENvbXBvbmVudCIsIlJlYWN0RGVmYXVsdEluamVjdGlvbiIsIlJlYWN0SW5zdGFuY2VIYW5kbGVzIiwiUmVhY3RQZXJmIiwiUmVhY3RSZWNvbmNpbGVyIiwiUmVhY3RTZXJ2ZXJSZW5kZXJpbmciLCJvbmx5Q2hpbGQiLCJpbmplY3QiLCJjcmVhdGVGYWN0b3J5IiwibWVhc3VyZSIsInNob3VsZFVzZVRvdWNoIiwiY3JlYXRlTWl4aW4iLCJtaXhpbiIsImNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudCIsImNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudEJ5SUQiLCJyZW5kZXJUb1N0cmluZyIsInJlbmRlclRvU3RhdGljTWFya3VwIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsIndpdGhDb250ZXh0IiwiX19zcHJlYWQiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJDdXJyZW50T3duZXIiLCJJbnN0YW5jZUhhbmRsZXMiLCJSZWNvbmNpbGVyIiwiVGV4dENvbXBvbmVudCIsInNlbGYiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJkZWJ1ZyIsImV4cGVjdGVkRmVhdHVyZXMiLCJldmVyeSIsImZyZWV6ZSIsIi4vUmVhY3RDaGlsZHJlbiIsIi4vUmVhY3RDbGFzcyIsIi4vUmVhY3RDb21wb25lbnQiLCIuL1JlYWN0Q29udGV4dCIsIi4vUmVhY3RDdXJyZW50T3duZXIiLCIuL1JlYWN0RE9NIiwiLi9SZWFjdERPTVRleHRDb21wb25lbnQiLCIuL1JlYWN0RGVmYXVsdEluamVjdGlvbiIsIi4vUmVhY3RFbGVtZW50IiwiLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3IiLCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzIiwiLi9SZWFjdFBlcmYiLCIuL1JlYWN0UmVjb25jaWxlciIsIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmciLCIuL2ZpbmRET01Ob2RlIiwiLi9vbmx5Q2hpbGQiLDE3OCwiUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4iLDE3OSwiZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQiLCJtb3VudEF0IiwidG9wTGlzdGVuZXJzSURLZXkiLCJyZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIiLCJhbHJlYWR5TGlzdGVuaW5nVG8iLCJSZWFjdEV2ZW50RW1pdHRlck1peGluIiwiaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUiLCJ0b3BFdmVudE1hcHBpbmciLCJyYW5kb20iLCJSZWFjdEV2ZW50TGlzdGVuZXIiLCJpbmplY3RSZWFjdEV2ZW50TGlzdGVuZXIiLCJzZXRIYW5kbGVUb3BMZXZlbCIsImhhbmRsZVRvcExldmVsIiwic2V0RW5hYmxlZCIsImVuYWJsZWQiLCJpc0VuYWJsZWQiLCJsaXN0ZW5UbyIsImNvbnRlbnREb2N1bWVudEhhbmRsZSIsImlzTGlzdGVuaW5nIiwiZGVwZW5kZW5jeSIsInRyYXBDYXB0dXJlZEV2ZW50IiwiV0lORE9XX0hBTkRMRSIsImVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZyIsInJlZnJlc2giLCJyZWZyZXNoU2Nyb2xsVmFsdWVzIiwibW9uaXRvclNjcm9sbFZhbHVlIiwiLi9SZWFjdEV2ZW50RW1pdHRlck1peGluIiwiLi9WaWV3cG9ydE1ldHJpY3MiLDE4MCwiUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCIsIlJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwIiwidHJhbnNpdGlvbk5hbWUiLCJ0cmFuc2l0aW9uQXBwZWFyIiwidHJhbnNpdGlvbkxlYXZlIiwiX3dyYXBDaGlsZCIsImFwcGVhciIsImNoaWxkRmFjdG9yeSIsIi4vUmVhY3QiLCIuL1JlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQiLCIuL1JlYWN0VHJhbnNpdGlvbkdyb3VwIiwxODEsIlJlYWN0VHJhbnNpdGlvbkV2ZW50cyIsIlRJQ0siLCJOT19FVkVOVF9USU1FT1VUIiwibm9FdmVudExpc3RlbmVyIiwiYW5pbWF0aW9uVHlwZSIsImZpbmlzaENhbGxiYWNrIiwiYWN0aXZlQ2xhc3NOYW1lIiwibm9FdmVudFRpbWVvdXQiLCJlbmRMaXN0ZW5lciIsInJlbW92ZUVuZEV2ZW50TGlzdGVuZXIiLCJhZGRFbmRFdmVudExpc3RlbmVyIiwicXVldWVDbGFzcyIsImNsYXNzTmFtZVF1ZXVlIiwiZmx1c2hDbGFzc05hbWVRdWV1ZSIsIi4vQ1NTQ29yZSIsIi4vUmVhY3RUcmFuc2l0aW9uRXZlbnRzIiwxODIsImZsYXR0ZW5DaGlsZHJlbiIsImluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQiLCJzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCIsIlJlYWN0Q2hpbGRSZWNvbmNpbGVyIiwiaW5zdGFudGlhdGVDaGlsZHJlbiIsIm5lc3RlZENoaWxkTm9kZXMiLCJ0cmFuc2FjdGlvbiIsImNoaWxkSW5zdGFuY2UiLCJ1cGRhdGVDaGlsZHJlbiIsInByZXZDaGlsZHJlbiIsIm5leHROZXN0ZWRDaGlsZE5vZGVzIiwibmV4dENoaWxkcmVuIiwicHJldkNoaWxkIiwicHJldkVsZW1lbnQiLCJfY3VycmVudEVsZW1lbnQiLCJuZXh0RWxlbWVudCIsInJlY2VpdmVDb21wb25lbnQiLCJ1bm1vdW50Q29tcG9uZW50IiwibmV4dENoaWxkSW5zdGFuY2UiLCJ1bm1vdW50Q2hpbGRyZW4iLCJyZW5kZXJlZENoaWxkcmVuIiwicmVuZGVyZWRDaGlsZCIsIi4vZmxhdHRlbkNoaWxkcmVuIiwiLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50IiwiLi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCIsMTgzLCJGb3JFYWNoQm9va0tlZXBpbmciLCJmb3JFYWNoRnVuY3Rpb24iLCJmb3JFYWNoQ29udGV4dCIsImZvckVhY2hTaW5nbGVDaGlsZCIsInRyYXZlcnNlQ29udGV4dCIsImZvckVhY2hCb29rS2VlcGluZyIsImZvckVhY2hDaGlsZHJlbiIsImZvckVhY2hGdW5jIiwidHJhdmVyc2VBbGxDaGlsZHJlbiIsIk1hcEJvb2tLZWVwaW5nIiwibWFwUmVzdWx0IiwibWFwRnVuY3Rpb24iLCJtYXBDb250ZXh0IiwibWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCIsIm1hcEJvb2tLZWVwaW5nIiwia2V5VW5pcXVlIiwibWFwcGVkQ2hpbGQiLCJtYXBDaGlsZHJlbiIsIlJlYWN0RnJhZ21lbnQiLCJmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSIsImNvdW50Q2hpbGRyZW4iLCIuL1JlYWN0RnJhZ21lbnQiLCIuL3RyYXZlcnNlQWxsQ2hpbGRyZW4iLDE4NCwidmFsaWRhdGVUeXBlRGVmIiwidHlwZURlZiIsImxvY2F0aW9uIiwiUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMiLCJ2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlIiwicHJvdG8iLCJzcGVjUG9saWN5IiwiUmVhY3RDbGFzc0ludGVyZmFjZSIsIlJlYWN0Q2xhc3NNaXhpbiIsIlNwZWNQb2xpY3kiLCJPVkVSUklERV9CQVNFIiwiREVGSU5FX01BTlkiLCJERUZJTkVfTUFOWV9NRVJHRUQiLCJtaXhTcGVjSW50b0NvbXBvbmVudCIsInNwZWMiLCJNSVhJTlNfS0VZIiwiUkVTRVJWRURfU1BFQ19LRVlTIiwiaXNSZWFjdENsYXNzTWV0aG9kIiwiaXNBbHJlYWR5RGVmaW5lZCIsIm1hcmtlZERvbnRCaW5kIiwiX19yZWFjdERvbnRCaW5kIiwic2hvdWxkQXV0b0JpbmQiLCJfX3JlYWN0QXV0b0JpbmRNYXAiLCJjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbiIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsIm1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50IiwiaXNSZXNlcnZlZCIsImlzSW5oZXJpdGVkIiwibWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyIsIm9uZSIsInR3byIsImMiLCJiaW5kQXV0b0JpbmRNZXRob2QiLCJib3VuZE1ldGhvZCIsIl9fcmVhY3RCb3VuZENvbnRleHQiLCJfX3JlYWN0Qm91bmRNZXRob2QiLCJfX3JlYWN0Qm91bmRBcmd1bWVudHMiLCJfYmluZCIsIm5ld1RoaXMiLCIkX18wIiwiJF9fMSIsInJlYm91bmRNZXRob2QiLCJiaW5kQXV0b0JpbmRNZXRob2RzIiwiYXV0b0JpbmRLZXkiLCJSZWFjdEVycm9yVXRpbHMiLCJndWFyZCIsIlJlYWN0SW5zdGFuY2VNYXAiLCJSZWFjdExpZmVDeWNsZSIsIlJlYWN0UHJvcFR5cGVMb2NhdGlvbnMiLCJSZWFjdFVwZGF0ZVF1ZXVlIiwiREVGSU5FX09OQ0UiLCJpbmplY3RlZE1peGlucyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJjaGlsZENvbnRleHQiLCJ0eXBlRGVwcmVjYXRpb25EZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInJlcGxhY2VTdGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlQ2FsbGJhY2siLCJvd25lciIsImN1cnJlbnQiLCJfd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIiLCJnZXROYW1lIiwiaW50ZXJuYWxJbnN0YW5jZSIsImN1cnJlbnRseU1vdW50aW5nSW5zdGFuY2UiLCJzZXRQcm9wcyIsInBhcnRpYWxQcm9wcyIsImVucXVldWVTZXRQcm9wcyIsInJlcGxhY2VQcm9wcyIsImVucXVldWVSZXBsYWNlUHJvcHMiLCJSZWFjdENsYXNzQ29tcG9uZW50IiwiaW5pdGlhbFN0YXRlIiwiX2lzTW9ja0Z1bmN0aW9uIiwiZGVmYXVsdFByb3BzIiwiaXNSZWFjdENsYXNzQXBwcm92ZWQiLCJjb21wb25lbnRTaG91bGRVcGRhdGUiLCJtZXRob2ROYW1lIiwiaW5qZWN0TWl4aW4iLCIuL1JlYWN0RXJyb3JVdGlscyIsIi4vUmVhY3RJbnN0YW5jZU1hcCIsIi4vUmVhY3RMaWZlQ3ljbGUiLCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzIiwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zIiwiLi9SZWFjdFVwZGF0ZVF1ZXVlIiwxODUsInBhcnRpYWxTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZGVwcmVjYXRlZEFQSXMiLCJkZWZpbmVEZXByZWNhdGlvbldhcm5pbmciLCJpbmZvIiwiZm5OYW1lIiwxODYsIlJlYWN0RE9NSURPcGVyYXRpb25zIiwiUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQiLCJwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzIiwiZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzIiwicmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCIsImRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCIsInVubW91bnRJREZyb21FbnZpcm9ubWVudCIsInJvb3ROb2RlSUQiLCJwdXJnZUlEIiwiLi9SZWFjdERPTUlET3BlcmF0aW9ucyIsMTg3LCJpbmplY3RlZCIsIlJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQiLCJpbmplY3RFbnZpcm9ubWVudCIsImVudmlyb25tZW50IiwxODgsInNoYWxsb3dFcXVhbCIsIlJlYWN0Q29tcG9uZW50V2l0aFB1cmVSZW5kZXJNaXhpbiIsIm5leHRTdGF0ZSIsIi4vc2hhbGxvd0VxdWFsIiwxODksImdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSIsIl9vd25lciIsIlJlYWN0TmF0aXZlQ29tcG9uZW50IiwiZW1wdHlPYmplY3QiLCJuZXh0TW91bnRJRCIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW4iLCJjb25zdHJ1Y3QiLCJfcm9vdE5vZGVJRCIsIl9pbnN0YW5jZSIsIl9wZW5kaW5nRWxlbWVudCIsIl9wZW5kaW5nU3RhdGVRdWV1ZSIsIl9wZW5kaW5nUmVwbGFjZVN0YXRlIiwiX3BlbmRpbmdGb3JjZVVwZGF0ZSIsIl9yZW5kZXJlZENvbXBvbmVudCIsIl9jb250ZXh0IiwiX21vdW50T3JkZXIiLCJfaXNUb3BMZXZlbCIsIl9wZW5kaW5nQ2FsbGJhY2tzIiwibW91bnRDb21wb25lbnQiLCJyb290SUQiLCJwdWJsaWNQcm9wcyIsIl9wcm9jZXNzUHJvcHMiLCJwdWJsaWNDb250ZXh0IiwiX3Byb2Nlc3NDb250ZXh0IiwiZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50IiwiaW5zdCIsIl93YXJuSWZDb250ZXh0c0RpZmZlciIsInJlbmRlcmVkRWxlbWVudCIsInByZXZpb3VzbHlNb3VudGluZyIsIl9wcm9jZXNzUGVuZGluZ1N0YXRlIiwiX2dldFZhbGlkYXRlZENoaWxkQ29udGV4dCIsIl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQiLCJfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCIsIl9tZXJnZUNoaWxkQ29udGV4dCIsImdldFJlYWN0TW91bnRSZWFkeSIsInByZXZpb3VzbHlVbm1vdW50aW5nIiwiY3VycmVudGx5VW5tb3VudGluZ0luc3RhbmNlIiwiX3NldFByb3BzSW50ZXJuYWwiLCJjbG9uZUFuZFJlcGxhY2VQcm9wcyIsImVucXVldWVVcGRhdGUiLCJfbWFza0NvbnRleHQiLCJtYXNrZWRDb250ZXh0IiwiY29udGV4dE5hbWUiLCJfY2hlY2tQcm9wVHlwZXMiLCJjdXJyZW50Q29udGV4dCIsImV4IiwiYWRkZW5kdW0iLCJuZXh0Q29udGV4dCIsInByZXZDb250ZXh0IiwicGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5IiwiY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFByb3BzIiwib3duZXJCYXNlZENvbnRleHQiLCJwYXJlbnRCYXNlZENvbnRleHQiLCJwYXJlbnRLZXlzIiwic29ydCIsInByZXZQYXJlbnRFbGVtZW50IiwibmV4dFBhcmVudEVsZW1lbnQiLCJwcmV2VW5tYXNrZWRDb250ZXh0IiwibmV4dFVubWFza2VkQ29udGV4dCIsInNob3VsZFVwZGF0ZSIsIl9wZXJmb3JtQ29tcG9uZW50VXBkYXRlIiwicGFydGlhbCIsInVubWFza2VkQ29udGV4dCIsIl91cGRhdGVSZW5kZXJlZENvbXBvbmVudCIsInByZXZDb21wb25lbnRJbnN0YW5jZSIsInByZXZSZW5kZXJlZEVsZW1lbnQiLCJuZXh0UmVuZGVyZWRFbGVtZW50IiwidGhpc0lEIiwicHJldkNvbXBvbmVudElEIiwibmV4dE1hcmt1cCIsIl9yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEIiwiX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dCIsInJlbmRlcmVkQ29tcG9uZW50IiwicHJldmlvdXNDb250ZXh0IiwiYXR0YWNoUmVmIiwiZ2V0UHVibGljSW5zdGFuY2UiLCJkZXRhY2hSZWYiLCJtZWFzdXJlTWV0aG9kcyIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50IiwiLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50IiwiLi9SZWFjdE5hdGl2ZUNvbXBvbmVudCIsIi4vZW1wdHlPYmplY3QiLDE5MCwiZGlkV2FybiIsIm5ld0NvbnRleHQiLCJzY29wZWRDYWxsYmFjayIsMTkxLDE5MiwiY3JlYXRlRE9NRmFjdG9yeSIsInRhZyIsIm1hcE9iamVjdCIsImFiYnIiLCJhZGRyZXNzIiwiYXJlYSIsImFydGljbGUiLCJhc2lkZSIsImF1ZGlvIiwiYmRpIiwiYmRvIiwiYmlnIiwiYmxvY2txdW90ZSIsImJyIiwiY2FudmFzIiwiY2FwdGlvbiIsImNpdGUiLCJjb2wiLCJjb2xncm91cCIsImRhdGFsaXN0IiwiZGQiLCJkZWwiLCJkZXRhaWxzIiwiZGZuIiwiZGwiLCJkdCIsImVtIiwiZW1iZWQiLCJmaWVsZHNldCIsImZpZ2NhcHRpb24iLCJmaWd1cmUiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJoZWFkIiwiaHIiLCJodG1sIiwiaWZyYW1lIiwiaW1nIiwiaW5zIiwia2JkIiwia2V5Z2VuIiwibGVnZW5kIiwibGkiLCJtZW51aXRlbSIsIm1ldGEiLCJtZXRlciIsIm5hdiIsIm5vc2NyaXB0Iiwib2wiLCJvcHRncm91cCIsIm91dHB1dCIsInBhcmFtIiwicGljdHVyZSIsInByZSIsInByb2dyZXNzIiwicSIsInJwIiwicnQiLCJydWJ5Iiwic2FtcCIsInNjcmlwdCIsInNlY3Rpb24iLCJzbWFsbCIsInN0cm9uZyIsInN1YiIsInN1bW1hcnkiLCJzdXAiLCJ0Ym9keSIsInRkIiwidGZvb3QiLCJ0aCIsInRoZWFkIiwidHIiLCJ1bCIsInZhciIsInZpZGVvIiwid2JyIiwiY2xpcFBhdGgiLCJkZWZzIiwiZWxsaXBzZSIsImxpbmUiLCJsaW5lYXJHcmFkaWVudCIsInBvbHlnb24iLCJwb2x5bGluZSIsInJhZGlhbEdyYWRpZW50Iiwic3RvcCIsInRzcGFuIiwiLi9tYXBPYmplY3QiLDE5MywibW91c2VMaXN0ZW5lck5hbWVzIiwib25Eb3VibGVDbGljayIsIm9uQ2xpY2tDYXB0dXJlIiwib25Eb3VibGVDbGlja0NhcHR1cmUiLCJvbk1vdXNlRG93bkNhcHR1cmUiLCJvbk1vdXNlTW92ZUNhcHR1cmUiLCJvbk1vdXNlVXBDYXB0dXJlIiwiUmVhY3RET01CdXR0b24iLCIuL0F1dG9Gb2N1c01peGluIiwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiIsMTk0LCJhc3NlcnRWYWxpZFByb3BzIiwiZmluZFJlYWN0Q29udGFpbmVyRm9ySUQiLCJub2RlVHlwZSIsIkVMRU1FTlRfTk9ERV9UWVBFIiwiZ2V0UHV0TGlzdGVuZXJRdWV1ZSIsImVucXVldWVQdXRMaXN0ZW5lciIsInZhbGlkYXRlRGFuZ2Vyb3VzVGFnIiwidmFsaWRhdGVkVGFnQ2FjaGUiLCJWQUxJRF9UQUdfUkVHRVgiLCJSZWFjdERPTUNvbXBvbmVudCIsIl90YWciLCJfcmVuZGVyZWRDaGlsZHJlbiIsIl9wcmV2aW91c1N0eWxlQ29weSIsIlJlYWN0TXVsdGlDaGlsZCIsImVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciIsIkNPTlRFTlRfVFlQRVMiLCJTVFlMRSIsIkJhY2tlbmRJRE9wZXJhdGlvbnMiLCJvbWl0dGVkQ2xvc2VUYWdzIiwiY2xvc2VUYWciLCJfY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVycyIsIl9jcmVhdGVDb250ZW50TWFya3VwIiwicHJvcEtleSIsInByb3BWYWx1ZSIsIm1hcmt1cEZvcklEIiwiX19odG1sIiwiY29udGVudFRvVXNlIiwiY2hpbGRyZW5Ub1VzZSIsIm1vdW50SW1hZ2VzIiwibW91bnRDaGlsZHJlbiIsIl91cGRhdGVET01Qcm9wZXJ0aWVzIiwiX3VwZGF0ZURPTUNoaWxkcmVuIiwibGFzdFByb3BzIiwic3R5bGVVcGRhdGVzIiwibGFzdFN0eWxlIiwiZGVsZXRlUHJvcGVydHlCeUlEIiwibmV4dFByb3AiLCJsYXN0UHJvcCIsInVwZGF0ZVByb3BlcnR5QnlJRCIsInVwZGF0ZVN0eWxlc0J5SUQiLCJsYXN0Q29udGVudCIsIm5leHRDb250ZW50IiwibGFzdEh0bWwiLCJuZXh0SHRtbCIsImxhc3RDaGlsZHJlbiIsImxhc3RIYXNDb250ZW50T3JIdG1sIiwibmV4dEhhc0NvbnRlbnRPckh0bWwiLCJ1cGRhdGVJbm5lckhUTUxCeUlEIiwiaW5qZWN0SURPcGVyYXRpb25zIiwiSURPcGVyYXRpb25zIiwiLi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMiLCIuL0RPTVByb3BlcnR5T3BlcmF0aW9ucyIsIi4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQiLCIuL1JlYWN0TXVsdGlDaGlsZCIsIi4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyIiwxOTUsIlJlYWN0RE9NRm9ybSIsIi4vTG9jYWxFdmVudFRyYXBNaXhpbiIsMTk2LCJzZXRJbm5lckhUTUwiLCJJTlZBTElEX1BST1BFUlRZX0VSUk9SUyIsInVwZGF0ZVRleHRDb250ZW50QnlJRCIsIi4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zIiwiLi9zZXRJbm5lckhUTUwiLDE5NywiUmVhY3RET01JZnJhbWUiLDE5OCwiUmVhY3RET01JbWciLDE5OSwiZm9yY2VVcGRhdGVJZk1vdW50ZWQiLCJpbnN0YW5jZXNCeVJlYWN0SUQiLCJSZWFjdERPTUlucHV0IiwiaW5pdGlhbENoZWNrZWQiLCJpbml0aWFsVmFsdWUiLCJyb290Tm9kZSIsImFzYXAiLCJxdWVyeVJvb3QiLCJncm91cCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJncm91cExlbiIsIm90aGVyTm9kZSIsIm90aGVySUQiLCJvdGhlckluc3RhbmNlIiwiLi9MaW5rZWRWYWx1ZVV0aWxzIiwyMDAsIlJlYWN0RE9NT3B0aW9uIiwyMDEsInVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkIiwiX3BlbmRpbmdVcGRhdGUiLCJ1cGRhdGVPcHRpb25zIiwic2VsZWN0VmFsdWVUeXBlIiwic2VsZWN0ZWRWYWx1ZSIsIlJlYWN0RE9NU2VsZWN0IiwyMDIsImlzQ29sbGFwc2VkIiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzT2Zmc2V0IiwiZ2V0SUVPZmZzZXRzIiwic2VsZWN0ZWRSYW5nZSIsImNyZWF0ZVJhbmdlIiwic2VsZWN0ZWRMZW5ndGgiLCJmcm9tU3RhcnQiLCJkdXBsaWNhdGUiLCJtb3ZlVG9FbGVtZW50VGV4dCIsInNldEVuZFBvaW50Iiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJnZXRNb2Rlcm5PZmZzZXRzIiwicmFuZ2VDb3VudCIsImN1cnJlbnRSYW5nZSIsImdldFJhbmdlQXQiLCJpc1NlbGVjdGlvbkNvbGxhcHNlZCIsInJhbmdlTGVuZ3RoIiwidGVtcFJhbmdlIiwiY2xvbmVSYW5nZSIsInNlbGVjdE5vZGVDb250ZW50cyIsInNldEVuZCIsInN0YXJ0Q29udGFpbmVyIiwiaXNUZW1wUmFuZ2VDb2xsYXBzZWQiLCJlbmRDb250YWluZXIiLCJkZXRlY3Rpb25SYW5nZSIsInNldFN0YXJ0IiwiaXNCYWNrd2FyZCIsImNvbGxhcHNlZCIsInNldElFT2Zmc2V0cyIsIm9mZnNldHMiLCJtb3ZlU3RhcnQiLCJtb3ZlRW5kIiwic2V0TW9kZXJuT2Zmc2V0cyIsInRlbXAiLCJzdGFydE1hcmtlciIsImdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQiLCJlbmRNYXJrZXIiLCJhZGRSYW5nZSIsInVzZUlFT2Zmc2V0cyIsIlJlYWN0RE9NU2VsZWN0aW9uIiwiZ2V0T2Zmc2V0cyIsInNldE9mZnNldHMiLCIuL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQiLDIwMywiX3N0cmluZ1RleHQiLCJfbW91bnRJbmRleCIsImVzY2FwZWRUZXh0IiwibmV4dFRleHQiLCJuZXh0U3RyaW5nVGV4dCIsIi4vUmVhY3RET01Db21wb25lbnQiLDIwNCwiUmVhY3RET01UZXh0YXJlYSIsMjA1LCJSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24iLCJyZWluaXRpYWxpemVUcmFuc2FjdGlvbiIsIlRyYW5zYWN0aW9uIiwiUkVTRVRfQkFUQ0hFRF9VUERBVEVTIiwiaW5pdGlhbGl6ZSIsIlJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kiLCJpc0JhdGNoaW5nVXBkYXRlcyIsIkZMVVNIX0JBVENIRURfVVBEQVRFUyIsImZsdXNoQmF0Y2hlZFVwZGF0ZXMiLCJUUkFOU0FDVElPTl9XUkFQUEVSUyIsImdldFRyYW5zYWN0aW9uV3JhcHBlcnMiLCJhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzIiwicGVyZm9ybSIsIi4vVHJhbnNhY3Rpb24iLDIwNiwiYXV0b0dlbmVyYXRlV3JhcHBlckNsYXNzIiwiUmVhY3RJbmplY3Rpb24iLCJFdmVudEVtaXR0ZXIiLCJOYXRpdmVDb21wb25lbnQiLCJpbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3MiLCJpbmplY3RUZXh0Q29tcG9uZW50Q2xhc3MiLCJpbmplY3RBdXRvV3JhcHBlciIsIkNsYXNzIiwiaW5qZWN0Q29tcG9uZW50Q2xhc3NlcyIsImNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50IiwiU1ZHRE9NUHJvcGVydHlDb25maWciLCJFbXB0eUNvbXBvbmVudCIsImluamVjdEVtcHR5Q29tcG9uZW50IiwiVXBkYXRlcyIsImluamVjdFJlY29uY2lsZVRyYW5zYWN0aW9uIiwiUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiIsImluamVjdEJhdGNoaW5nU3RyYXRlZ3kiLCJSb290SW5kZXgiLCJpbmplY3RDcmVhdGVSZWFjdFJvb3RJbmRleCIsIlNlcnZlclJlYWN0Um9vdEluZGV4IiwiRE9NQ29tcG9uZW50IiwidXJsIiwiUmVhY3REZWZhdWx0UGVyZiIsIi4vQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsIi4vQ2hhbmdlRXZlbnRQbHVnaW4iLCIuL0NsaWVudFJlYWN0Um9vdEluZGV4IiwiLi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlciIsIi4vRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiLi9IVE1MRE9NUHJvcGVydHlDb25maWciLCIuL01vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4iLCIuL1JlYWN0RE9NQnV0dG9uIiwiLi9SZWFjdERPTUZvcm0iLCIuL1JlYWN0RE9NSWZyYW1lIiwiLi9SZWFjdERPTUltZyIsIi4vUmVhY3RET01JbnB1dCIsIi4vUmVhY3RET01PcHRpb24iLCIuL1JlYWN0RE9NU2VsZWN0IiwiLi9SZWFjdERPTVRleHRhcmVhIiwiLi9SZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5IiwiLi9SZWFjdERlZmF1bHRQZXJmIiwiLi9SZWFjdEV2ZW50TGlzdGVuZXIiLCIuL1JlYWN0SW5qZWN0aW9uIiwiLi9SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uIiwiLi9TVkdET01Qcm9wZXJ0eUNvbmZpZyIsIi4vU2VsZWN0RXZlbnRQbHVnaW4iLCIuL1NlcnZlclJlYWN0Um9vdEluZGV4IiwiLi9TaW1wbGVFdmVudFBsdWdpbiIsIi4vY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQiLDIwNywicm91bmRGbG9hdCIsImFkZFZhbHVlIiwiUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzIiwicGVyZm9ybWFuY2VOb3ciLCJfYWxsTWVhc3VyZW1lbnRzIiwiX21vdW50U3RhY2siLCJfaW5qZWN0ZWQiLCJpbmplY3RNZWFzdXJlIiwiZW5hYmxlTWVhc3VyZSIsImdldExhc3RNZWFzdXJlbWVudHMiLCJwcmludEV4Y2x1c2l2ZSIsIm1lYXN1cmVtZW50cyIsImdldEV4Y2x1c2l2ZVN1bW1hcnkiLCJDb21wb25lbnQgY2xhc3MgbmFtZSIsIlRvdGFsIGluY2x1c2l2ZSB0aW1lIChtcykiLCJpbmNsdXNpdmUiLCJFeGNsdXNpdmUgbW91bnQgdGltZSAobXMpIiwiZXhjbHVzaXZlIiwiRXhjbHVzaXZlIHJlbmRlciB0aW1lIChtcykiLCJNb3VudCB0aW1lIHBlciBpbnN0YW5jZSAobXMpIiwiUmVuZGVyIHRpbWUgcGVyIGluc3RhbmNlIChtcykiLCJJbnN0YW5jZXMiLCJwcmludEluY2x1c2l2ZSIsImdldEluY2x1c2l2ZVN1bW1hcnkiLCJPd25lciA+IGNvbXBvbmVudCIsIkluY2x1c2l2ZSB0aW1lIChtcykiLCJsb2ciLCJnZXRUb3RhbFRpbWUiLCJnZXRNZWFzdXJlbWVudHNTdW1tYXJ5TWFwIiwiV2FzdGVkIHRpbWUgKG1zKSIsInByaW50V2FzdGVkIiwicHJpbnRET00iLCJnZXRET01TdW1tYXJ5IiwiX3JlY29yZFdyaXRlIiwidG90YWxUaW1lIiwid3JpdGVzIiwibW9kdWxlTmFtZSIsInJ2IiwiY291bnRzIiwiZGlzcGxheU5hbWVzIiwibW91bnRJRCIsIndyaXRlQXJncyIsImlzUmVuZGVyIiwiaXNNb3VudCIsIm1vdW50U3RhY2siLCJlbnRyeSIsInN1Yk1vdW50VGltZSIsIi4vUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzIiwiLi9wZXJmb3JtYW5jZU5vdyIsMjA4LCJtZWFzdXJlbWVudCIsIndyaXRlIiwiRE9NX09QRVJBVElPTl9UWVBFUyIsImNhbmRpZGF0ZXMiLCJhbGxJRHMiLCJET05UX0NBUkVfVEhSRVNIT0xEIiwib25seUNsZWFuIiwiaW5jbHVzaXZlS2V5IiwiY2xlYW5Db21wb25lbnRzIiwiZ2V0VW5jaGFuZ2VkQ29tcG9uZW50cyIsImRpcnR5TGVhZklEcyIsImlzRGlydHkiLCJfbW91bnRJbWFnZUludG9Ob2RlIiwyMDksImRlZmluZVdhcm5pbmdQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIl9zdG9yZSIsImRlZmluZU11dGF0aW9uTWVtYnJhbmUiLCJwc2V1ZG9Gcm96ZW5Qcm9wZXJ0aWVzIiwidXNlTXV0YXRpb25NZW1icmFuZSIsIlJFU0VSVkVEX1BST1BTIiwib3JpZ2luYWxQcm9wcyIsIndyaXRhYmxlIiwidmFsaWRhdGVkIiwiX2lzUmVhY3RFbGVtZW50IiwiY29uZmlnIiwiY2hpbGRyZW5MZW5ndGgiLCJjaGlsZEFycmF5IiwiZmFjdG9yeSIsIm9sZEVsZW1lbnQiLCJuZXdFbGVtZW50IiwiaXNFbGVtZW50IiwyMTAsInB1YmxpY0luc3RhbmNlIiwiZ2V0Q3VycmVudE93bmVyRGlzcGxheU5hbWUiLCJ2YWxpZGF0ZUV4cGxpY2l0S2V5IiwicGFyZW50VHlwZSIsIndhcm5BbmRNb25pdG9yRm9yS2V5VXNlIiwidmFsaWRhdGVQcm9wZXJ0eUtleSIsIk5VTUVSSUNfUFJPUEVSVFlfUkVHRVgiLCJvd25lck5hbWUiLCJwYXJlbnROYW1lIiwidXNlTmFtZSIsIm1lbW9pemVyIiwib3duZXJIYXNLZXlVc2VXYXJuaW5nIiwicGFyZW50T3JPd25lckFkZGVuZHVtIiwiY2hpbGRPd25lckFkZGVuZHVtIiwiY2hpbGRPd25lck5hbWUiLCJ2YWxpZGF0ZUNoaWxkS2V5cyIsIml0ZXJhdG9yRm4iLCJnZXRJdGVyYXRvckZuIiwiZW50cmllcyIsImZyYWdtZW50IiwiZXh0cmFjdElmRnJhZ21lbnQiLCJjaGVja1Byb3BUeXBlcyIsImxvZ2dlZFR5cGVGYWlsdXJlcyIsIndhcm5Gb3JQcm9wc011dGF0aW9uIiwiZWxlbWVudE5hbWUiLCJ3YXJuaW5nS2V5Iiwid2FybmVkUHJvcHNNdXRhdGlvbnMiLCJlbGVtZW50SW5mbyIsIm93bmVySW5mbyIsInZhbGlkYXRlUHJvcFR5cGVzIiwiY29tcG9uZW50Q2xhc3MiLCJ2YWxpZGF0ZWRGYWN0b3J5IiwiLi9nZXRJdGVyYXRvckZuIiwyMTEsInJlZ2lzdGVyTnVsbENvbXBvbmVudElEIiwibnVsbENvbXBvbmVudElEc1JlZ2lzdHJ5IiwiZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRCIsImlzTnVsbENvbXBvbmVudElEIiwiUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbiIsImVtcHR5Q29tcG9uZW50IiwiUmVhY3RFbXB0eUNvbXBvbmVudFR5cGUiLCJlbXB0eUVsZW1lbnQiLCJSZWFjdEVtcHR5Q29tcG9uZW50IiwyMTIsMjEzLCJydW5FdmVudFF1ZXVlSW5CYXRjaCIsMjE0LCJmaW5kUGFyZW50Iiwibm9kZUlEIiwiZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEIiwiVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nIiwiYW5jZXN0b3JzIiwiaGFuZGxlVG9wTGV2ZWxJbXBsIiwiYm9va0tlZXBpbmciLCJnZXRFdmVudFRhcmdldCIsImFuY2VzdG9yIiwiX2hhbmRsZVRvcExldmVsIiwic2Nyb2xsVmFsdWVNb25pdG9yIiwic2Nyb2xsUG9zaXRpb24iLCJnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbiIsIl9lbmFibGVkIiwiZGlzcGF0Y2hFdmVudCIsIi4vRXZlbnRMaXN0ZW5lciIsIi4vZ2V0RXZlbnRUYXJnZXQiLCIuL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uIiwyMTUsImZyYWdtZW50S2V5IiwiZGlkV2FybktleSIsImNhbldhcm5Gb3JSZWFjdEZyYWdtZW50IiwiZHVtbXkiLCJwcm94eVByb3BlcnR5QWNjZXNzV2l0aFdhcm5pbmciLCJpc3N1ZWRXYXJuaW5ncyIsImRpZFdhcm5Gb3JGcmFnbWVudCIsImZyYWdtZW50Q2FjaGVLZXkiLCJhbHJlYWR5V2FybmVkT25jZSIsInByb3h5IiwicHJldmVudEV4dGVuc2lvbnMiLCJleHRyYWN0IiwyMTYsIlJlYWN0Um9vdEluZGV4IiwiUGVyZiIsIi4vUmVhY3RFbXB0eUNvbXBvbmVudCIsIi4vUmVhY3RSb290SW5kZXgiLDIxNywiaXNJbkRvY3VtZW50IiwiY29udGFpbnNOb2RlIiwiZ2V0QWN0aXZlRWxlbWVudCIsIlJlYWN0SW5wdXRTZWxlY3Rpb24iLCJoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMiLCJnZXRTZWxlY3Rpb25JbmZvcm1hdGlvbiIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJyZXN0b3JlU2VsZWN0aW9uIiwicHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiIsImN1ckZvY3VzZWRFbGVtIiwicHJpb3JGb2N1c2VkRWxlbSIsInByaW9yU2VsZWN0aW9uUmFuZ2UiLCJzZXRTZWxlY3Rpb24iLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsInBhcmVudEVsZW1lbnQiLCJjcmVhdGVUZXh0UmFuZ2UiLCJjb2xsYXBzZSIsIi4vUmVhY3RET01TZWxlY3Rpb24iLCIuL2NvbnRhaW5zTm9kZSIsIi4vZ2V0QWN0aXZlRWxlbWVudCIsMjE4LCJnZXRSZWFjdFJvb3RJRFN0cmluZyIsIlNFUEFSQVRPUiIsImlzQm91bmRhcnkiLCJpc1ZhbGlkSUQiLCJpc0FuY2VzdG9ySURPZiIsImFuY2VzdG9ySUQiLCJkZXNjZW5kYW50SUQiLCJnZXRQYXJlbnRJRCIsImxhc3RJbmRleE9mIiwiZ2V0TmV4dERlc2NlbmRhbnRJRCIsImRlc3RpbmF0aW9uSUQiLCJTRVBBUkFUT1JfTEVOR1RIIiwiZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEIiwib25lSUQiLCJ0d29JRCIsIm1pbkxlbmd0aCIsImxhc3RDb21tb25NYXJrZXJJbmRleCIsImxvbmdlc3RDb21tb25JRCIsInRyYXZlcnNlUGFyZW50UGF0aCIsInNraXBGaXJzdCIsInNraXBMYXN0IiwidHJhdmVyc2VVcCIsImRlcHRoIiwidHJhdmVyc2UiLCJNQVhfVFJFRV9ERVBUSCIsImNyZWF0ZVJlYWN0Um9vdElEIiwiY3JlYXRlUmVhY3RJRCIsImxlYXZlSUQiLCJlbnRlcklEIiwidXBBcmciLCJkb3duQXJnIiwidHJhdmVyc2VBbmNlc3RvcnMiLCJfZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEIiwiX2dldE5leHREZXNjZW5kYW50SUQiLDIxOSwiX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSIsImhhcyIsMjIwLDIyMSwiY3JlYXRlTGlua1R5cGVDaGVja2VyIiwibGlua1R5cGUiLCJzaGFwZXMiLCJhbnkiLDIyMiwiYWRsZXIzMiIsIlJlYWN0TWFya3VwQ2hlY2tzdW0iLCJDSEVDS1NVTV9BVFRSX05BTUUiLCJhZGRDaGVja3N1bVRvTWFya3VwIiwiY2hlY2tzdW0iLCJjYW5SZXVzZU1hcmt1cCIsImV4aXN0aW5nQ2hlY2tzdW0iLCJtYXJrdXBDaGVja3N1bSIsIi4vYWRsZXIzMiIsMjIzLCJmaXJzdERpZmZlcmVuY2VJbmRleCIsInN0cmluZzEiLCJzdHJpbmcyIiwibWluTGVuIiwiZ2V0UmVhY3RSb290SUQiLCJyb290RWxlbWVudCIsImdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lciIsImludGVybmFsR2V0SUQiLCJub2RlQ2FjaGUiLCJjYWNoZWQiLCJBVFRSX05BTUUiLCJzZXRJRCIsIm9sZElEIiwiZmluZFJlYWN0Tm9kZUJ5SUQiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvckltcGwiLCJkZWVwZXN0Tm9kZVNvRmFyIiwiZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvciIsImZvdW5kTm9kZSIsIm1vdW50Q29tcG9uZW50SW50b05vZGUiLCJjb21wb25lbnRJbnN0YW5jZSIsInNob3VsZFJldXNlTWFya3VwIiwiYmF0Y2hlZE1vdW50Q29tcG9uZW50SW50b05vZGUiLCJET0NfTk9ERV9UWVBFIiwiaW5zdGFuY2VzQnlSZWFjdFJvb3RJRCIsImNvbnRhaW5lcnNCeVJlYWN0Um9vdElEIiwicm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRCIsImZpbmRDb21wb25lbnRSb290UmV1c2FibGVBcnJheSIsIl9pbnN0YW5jZXNCeVJlYWN0Um9vdElEIiwic2Nyb2xsTW9uaXRvciIsInJlbmRlckNhbGxiYWNrIiwiX3VwZGF0ZVJvb3RDb21wb25lbnQiLCJwcmV2Q29tcG9uZW50IiwiZW5xdWV1ZUVsZW1lbnRJbnRlcm5hbCIsImVucXVldWVDYWxsYmFja0ludGVybmFsIiwiX3JlZ2lzdGVyQ29tcG9uZW50IiwibmV4dENvbXBvbmVudCIsInJlYWN0Um9vdElEIiwicmVnaXN0ZXJDb250YWluZXIiLCJfcmVuZGVyTmV3Um9vdENvbXBvbmVudCIsInJlYWN0Um9vdEVsZW1lbnQiLCJjb250YWluZXJIYXNSZWFjdE1hcmt1cCIsImlzUmVuZGVyZWRCeVJlYWN0Iiwicm9vdEVsZW1lbnRTaWJsaW5nIiwiZG9tTm9kZSIsImdldEVsZW1lbnRCeUlkIiwidW5tb3VudENvbXBvbmVudEZyb21Ob2RlIiwiY29udGFpbmVyQ2hpbGQiLCJyZWFjdFJvb3QiLCJmaW5kQ29tcG9uZW50Um9vdCIsImFuY2VzdG9yTm9kZSIsImZpcnN0Q2hpbGRyZW4iLCJkZWVwZXN0QW5jZXN0b3IiLCJ0YXJnZXRDaGlsZCIsImNoaWxkSUQiLCJyb290TWFya3VwIiwib3V0ZXJIVE1MIiwiZGlmZkluZGV4IiwiZGlmZmVyZW5jZSIsIi4vUmVhY3RNYXJrdXBDaGVja3N1bSIsIi4vZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyIiwyMjQsImVucXVldWVNYXJrdXAiLCJ1cGRhdGVRdWV1ZSIsIm1hcmt1cFF1ZXVlIiwiZW5xdWV1ZU1vdmUiLCJlbnF1ZXVlUmVtb3ZlIiwiZW5xdWV1ZVRleHRDb250ZW50IiwicHJvY2Vzc1F1ZXVlIiwiY2xlYXJRdWV1ZSIsInVwZGF0ZURlcHRoIiwibmVzdGVkQ2hpbGRyZW4iLCJtb3VudEltYWdlIiwiZXJyb3JUaHJvd24iLCJfdW5tb3VudENoaWxkQnlOYW1lIiwibmV4dE5lc3RlZENoaWxkcmVuIiwiX3VwZGF0ZUNoaWxkcmVuIiwibGFzdEluZGV4IiwibmV4dENoaWxkIiwibW92ZUNoaWxkIiwiX21vdW50Q2hpbGRCeU5hbWVBdEluZGV4IiwiY3JlYXRlQ2hpbGQiLCIuL1JlYWN0Q2hpbGRSZWNvbmNpbGVyIiwyMjUsMjI2LCJ0YWdUb0NvbXBvbmVudENsYXNzIiwiY3JlYXRlSW50ZXJuYWxDb21wb25lbnQiLCJnZW5lcmljQ29tcG9uZW50Q2xhc3MiLCJjcmVhdGVJbnN0YW5jZUZvclRleHQiLCJ0ZXh0Q29tcG9uZW50Q2xhc3MiLCJpc1RleHRDb21wb25lbnQiLCJSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvbiIsImNvbXBvbmVudENsYXNzZXMiLCJ3cmFwcGVyRmFjdG9yeSIsMjI3LCJSZWFjdE93bmVyIiwiaXNWYWxpZE93bmVyIiwiYWRkQ29tcG9uZW50QXNSZWZUbyIsInJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbSIsMjI4LCJfbm9NZWFzdXJlIiwib2JqTmFtZSIsInN0b3JlZE1lYXN1cmUiLCJvYmplY3ROYW1lIiwibWV0aG9kTmFtZXMiLCJtZWFzdXJlZEZ1bmMiLDIyOSwiY3JlYXRlVHJhbnNmZXJTdHJhdGVneSIsIm1lcmdlU3RyYXRlZ3kiLCJ0cmFuc2ZlckludG8iLCJ0aGlzS2V5IiwidHJhbnNmZXJTdHJhdGVneSIsIlRyYW5zZmVyU3RyYXRlZ2llcyIsImpvaW5DbGFzc2VzIiwidHJhbnNmZXJTdHJhdGVneU1lcmdlIiwiUmVhY3RQcm9wVHJhbnNmZXJlciIsIm1lcmdlUHJvcHMiLCJvbGRQcm9wcyIsIi4vam9pbkNsYXNzZXMiLDIzMCwyMzEsMjMyLCJjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciIsInZhbGlkYXRlIiwiY2hlY2tUeXBlIiwiQU5PTllNT1VTIiwibG9jYXRpb25OYW1lIiwiY2hhaW5lZENoZWNrVHlwZSIsImNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyIiwiZXhwZWN0ZWRUeXBlIiwicHJvcFR5cGUiLCJnZXRQcm9wVHlwZSIsInByZWNpc2VUeXBlIiwiZ2V0UHJlY2lzZVR5cGUiLCJjcmVhdGVBbnlUeXBlQ2hlY2tlciIsInRoYXRSZXR1cm5zIiwiY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyIiwidHlwZUNoZWNrZXIiLCJjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIiLCJjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyIiwiZXhwZWN0ZWRDbGFzcyIsImV4cGVjdGVkQ2xhc3NOYW1lIiwiY3JlYXRlRW51bVR5cGVDaGVja2VyIiwiZXhwZWN0ZWRWYWx1ZXMiLCJ2YWx1ZXNTdHJpbmciLCJjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyIiwiY3JlYXRlVW5pb25UeXBlQ2hlY2tlciIsImFycmF5T2ZUeXBlQ2hlY2tlcnMiLCJjaGVja2VyIiwiY3JlYXRlTm9kZUNoZWNrZXIiLCJpc05vZGUiLCJjcmVhdGVTaGFwZVR5cGVDaGVja2VyIiwic2hhcGVUeXBlcyIsImVsZW1lbnRUeXBlQ2hlY2tlciIsIm5vZGVUeXBlQ2hlY2tlciIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsMjMzLCJSZWFjdFB1dExpc3RlbmVyUXVldWUiLCJsaXN0ZW5lcnNUb1B1dCIsInB1dExpc3RlbmVycyIsImxpc3RlbmVyVG9QdXQiLDIzNCwicmVhY3RNb3VudFJlYWR5IiwicHV0TGlzdGVuZXJRdWV1ZSIsIlNFTEVDVElPTl9SRVNUT1JBVElPTiIsIkVWRU5UX1NVUFBSRVNTSU9OIiwiY3VycmVudGx5RW5hYmxlZCIsInByZXZpb3VzbHlFbmFibGVkIiwiT05fRE9NX1JFQURZX1FVRVVFSU5HIiwiUFVUX0xJU1RFTkVSX1FVRVVFSU5HIiwiLi9DYWxsYmFja1F1ZXVlIiwiLi9SZWFjdElucHV0U2VsZWN0aW9uIiwiLi9SZWFjdFB1dExpc3RlbmVyUXVldWUiLDIzNSwiYXR0YWNoUmVmcyIsIlJlYWN0UmVmIiwiZGV0YWNoUmVmcyIsInJlZnNDaGFuZ2VkIiwic2hvdWxkVXBkYXRlUmVmcyIsIi4vUmVhY3RSZWYiLDIzNiwiLi9SZWFjdE93bmVyIiwyMzcsIlJlYWN0Um9vdEluZGV4SW5qZWN0aW9uIiwiX2NyZWF0ZVJlYWN0Um9vdEluZGV4IiwyMzgsIlJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24iLCIuL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24iLDIzOSwyNDAsImNyZWF0ZVN0YXRlU2V0dGVyIiwiZnVuY1JldHVybmluZ1N0YXRlIiwiY2FjaGUiLCJfX2tleVNldHRlcnMiLDI0MSwiRXZlbnQiLCJzdWZmaXgiLCJtYWtlU2ltdWxhdG9yIiwiZG9tQ29tcG9uZW50T3JOb2RlIiwiZXZlbnREYXRhIiwiUmVhY3RUZXN0VXRpbHMiLCJpc0RPTUNvbXBvbmVudCIsImZha2VOYXRpdmVFdmVudCIsImJ1aWxkU2ltdWxhdG9ycyIsIlNpbXVsYXRlIiwibWFrZU5hdGl2ZVNpbXVsYXRvciIsIm5hdGl2ZUV2ZW50RGF0YSIsInNpbXVsYXRlTmF0aXZlRXZlbnRPbkRPTUNvbXBvbmVudCIsInNpbXVsYXRlTmF0aXZlRXZlbnRPbk5vZGUiLCJyZW5kZXJJbnRvRG9jdW1lbnQiLCJpc0VsZW1lbnRPZlR5cGUiLCJjb252ZW5pZW5jZUNvbnN0cnVjdG9yIiwiaXNET01Db21wb25lbnRFbGVtZW50IiwiaXNDb21wb3NpdGVDb21wb25lbnQiLCJpc0NvbXBvc2l0ZUNvbXBvbmVudFdpdGhUeXBlIiwiaXNDb21wb3NpdGVDb21wb25lbnRFbGVtZW50IiwiaXNDb21wb3NpdGVDb21wb25lbnRFbGVtZW50V2l0aFR5cGUiLCJnZXRSZW5kZXJlZENoaWxkT2ZDb21wb3NpdGVDb21wb25lbnQiLCJmaW5kQWxsSW5SZW5kZXJlZFRyZWUiLCJzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzIiwiaW5zdENsYXNzTmFtZSIsImZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyIsInNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoVGFnIiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aFRhZyIsInNjcnlSZW5kZXJlZENvbXBvbmVudHNXaXRoVHlwZSIsImNvbXBvbmVudFR5cGUiLCJmaW5kUmVuZGVyZWRDb21wb25lbnRXaXRoVHlwZSIsIm1vY2tDb21wb25lbnQiLCJtb2NrVGFnTmFtZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImNvbXAiLCJuYXRpdmVUb3VjaERhdGEiLCJjcmVhdGVSZW5kZXJlciIsIlJlYWN0U2hhbGxvd1JlbmRlcmVyIiwiU2ltdWxhdGVOYXRpdmUiLCJnZXRSZW5kZXJPdXRwdXQiLCJfcmVuZGVyZWRPdXRwdXQiLCJOb29wSW50ZXJuYWxDb21wb25lbnQiLCJTaGFsbG93Q29tcG9uZW50V3JhcHBlciIsIl9yZW5kZXIiLCJ1bm1vdW50Iiwib2xkSW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsIm9sZEluamVjdEV2ZW50UGx1Z2lucyIsImNvbnZlbmllbmNlTmFtZSIsIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnQiLDI0MiwiUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiZ2V0VmFsdWVGb3JLZXkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsInByZXZLZXkiLCJjaGlsZE1hcHBpbmciLCJwZW5kaW5nTmV4dEtleSIsMjQzLCJkZXRlY3RFdmVudHMiLCJ0ZXN0RWwiLCJFVkVOVF9OQU1FX01BUCIsImFuaW1hdGlvbmVuZCIsInRyYW5zaXRpb25lbmQiLCJiYXNlRXZlbnROYW1lIiwiYmFzZUV2ZW50cyIsImVuZEV2ZW50cyIsImV2ZW50TGlzdGVuZXIiLCJtc1RyYW5zaXRpb24iLCJXZWJraXRBbmltYXRpb24iLCJNb3pBbmltYXRpb24iLCJPQW5pbWF0aW9uIiwibXNBbmltYXRpb24iLCJlbmRFdmVudCIsMjQ0LCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwiY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXMiLCJrZXlzVG9FbnRlciIsImtleXNUb0xlYXZlIiwiaW5pdGlhbENoaWxkTWFwcGluZyIsInBlcmZvcm1BcHBlYXIiLCJuZXh0Q2hpbGRNYXBwaW5nIiwicHJldkNoaWxkTWFwcGluZyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUxlYXZlIiwiX2hhbmRsZURvbmVBcHBlYXJpbmciLCJjdXJyZW50Q2hpbGRNYXBwaW5nIiwiX2hhbmRsZURvbmVFbnRlcmluZyIsIl9oYW5kbGVEb25lTGVhdmluZyIsImNvbXBvbmVudERpZExlYXZlIiwiY2hpbGRyZW5Ub1JlbmRlciIsIi4vUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nIiwiLi9jbG9uZVdpdGhQcm9wcyIsMjQ1LCJnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUiLCJjYWxsZXJOYW1lIiwiY29tcGxldGVTdGF0ZSIsMjQ2LCJlbnN1cmVJbmplY3RlZCIsImJhdGNoaW5nU3RyYXRlZ3kiLCJSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uIiwiZGlydHlDb21wb25lbnRzTGVuZ3RoIiwiY2FsbGJhY2tRdWV1ZSIsInJlY29uY2lsZVRyYW5zYWN0aW9uIiwibW91bnRPcmRlckNvbXBhcmF0b3IiLCJjMSIsImMyIiwicnVuQmF0Y2hlZFVwZGF0ZXMiLCJkaXJ0eUNvbXBvbmVudHMiLCJhc2FwQ2FsbGJhY2tRdWV1ZSIsImFzYXBFbnF1ZXVlZCIsIk5FU1RFRF9VUERBVEVTIiwiVVBEQVRFX1FVRVVFSU5HIiwiUmVhY3RVcGRhdGVzSW5qZWN0aW9uIiwiUmVjb25jaWxlVHJhbnNhY3Rpb24iLCJfYmF0Y2hpbmdTdHJhdGVneSIsMjQ3LCJDU1NUcmFuc2l0aW9uR3JvdXAiLCJjbGFzc1NldCIsIlRlc3RVdGlscyIsIi4vTGlua2VkU3RhdGVNaXhpbiIsIi4vUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXAiLCIuL1JlYWN0Q29tcG9uZW50V2l0aFB1cmVSZW5kZXJNaXhpbiIsIi4vUmVhY3RUZXN0VXRpbHMiLCIuL2N4IiwiLi91cGRhdGUiLDI0OCwiZHkiLCJmeCIsImZ5IiwiZ3JhZGllbnRUcmFuc2Zvcm0iLCJncmFkaWVudFVuaXRzIiwibWFya2VyRW5kIiwibWFya2VyTWlkIiwibWFya2VyU3RhcnQiLCJwYXR0ZXJuQ29udGVudFVuaXRzIiwicGF0dGVyblVuaXRzIiwicHJlc2VydmVBc3BlY3RSYXRpbyIsInJ4IiwicnkiLCJzcHJlYWRNZXRob2QiLCJzdG9wQ29sb3IiLCJzdG9wT3BhY2l0eSIsInRleHRBbmNob3IiLCJ4MSIsIngyIiwieTEiLCJ5MiIsMjQ5LCJib3VuZGluZ1RvcCIsImJvdW5kaW5nTGVmdCIsImNvbnN0cnVjdFNlbGVjdEV2ZW50IiwibW91c2VEb3duIiwiY3VycmVudFNlbGVjdGlvbiIsInN5bnRoZXRpY0V2ZW50Iiwib25TZWxlY3QiLCJvblNlbGVjdENhcHR1cmUiLDI1MCwiR0xPQkFMX01PVU5UX1BPSU5UX01BWCIsMjUxLCJTeW50aGV0aWNDbGlwYm9hcmRFdmVudCIsIlN5bnRoZXRpY0ZvY3VzRXZlbnQiLCJTeW50aGV0aWNLZXlib2FyZEV2ZW50IiwiU3ludGhldGljRHJhZ0V2ZW50IiwiU3ludGhldGljVG91Y2hFdmVudCIsIlN5bnRoZXRpY1doZWVsRXZlbnQiLCJnZXRFdmVudENoYXJDb2RlIiwib25CbHVyQ2FwdHVyZSIsImNsaWNrIiwib25Db250ZXh0TWVudSIsIm9uQ29udGV4dE1lbnVDYXB0dXJlIiwiY29weSIsIm9uQ29weSIsIm9uQ29weUNhcHR1cmUiLCJjdXQiLCJvbkN1dCIsIm9uQ3V0Q2FwdHVyZSIsImRvdWJsZUNsaWNrIiwiZHJhZyIsIm9uRHJhZ0NhcHR1cmUiLCJkcmFnRW5kIiwib25EcmFnRW5kIiwib25EcmFnRW5kQ2FwdHVyZSIsImRyYWdFbnRlciIsIm9uRHJhZ0VudGVyIiwib25EcmFnRW50ZXJDYXB0dXJlIiwiZHJhZ0V4aXQiLCJvbkRyYWdFeGl0Iiwib25EcmFnRXhpdENhcHR1cmUiLCJkcmFnTGVhdmUiLCJvbkRyYWdMZWF2ZSIsIm9uRHJhZ0xlYXZlQ2FwdHVyZSIsImRyYWdPdmVyIiwib25EcmFnT3ZlciIsIm9uRHJhZ092ZXJDYXB0dXJlIiwiZHJhZ1N0YXJ0Iiwib25EcmFnU3RhcnRDYXB0dXJlIiwiZHJvcCIsIm9uRHJvcCIsIm9uRHJvcENhcHR1cmUiLCJvbkZvY3VzQ2FwdHVyZSIsIm9uSW5wdXQiLCJvbklucHV0Q2FwdHVyZSIsImtleURvd24iLCJvbktleURvd25DYXB0dXJlIiwia2V5UHJlc3MiLCJvbktleVByZXNzIiwib25LZXlQcmVzc0NhcHR1cmUiLCJrZXlVcCIsIm9uS2V5VXBDYXB0dXJlIiwib25Mb2FkIiwib25Mb2FkQ2FwdHVyZSIsIm9uRXJyb3IiLCJvbkVycm9yQ2FwdHVyZSIsIm1vdXNlTW92ZSIsIm1vdXNlT3V0Iiwib25Nb3VzZU91dENhcHR1cmUiLCJtb3VzZU92ZXIiLCJvbk1vdXNlT3ZlckNhcHR1cmUiLCJtb3VzZVVwIiwicGFzdGUiLCJvblBhc3RlIiwib25QYXN0ZUNhcHR1cmUiLCJvblJlc2V0Iiwib25SZXNldENhcHR1cmUiLCJzY3JvbGwiLCJvblNjcm9sbCIsIm9uU2Nyb2xsQ2FwdHVyZSIsIm9uU3VibWl0Iiwib25TdWJtaXRDYXB0dXJlIiwidG91Y2hDYW5jZWwiLCJvblRvdWNoQ2FuY2VsIiwib25Ub3VjaENhbmNlbENhcHR1cmUiLCJ0b3VjaEVuZCIsIm9uVG91Y2hFbmRDYXB0dXJlIiwidG91Y2hNb3ZlIiwib25Ub3VjaE1vdmVDYXB0dXJlIiwidG91Y2hTdGFydCIsIm9uVG91Y2hTdGFydENhcHR1cmUiLCJ3aGVlbCIsIm9uV2hlZWwiLCJvbldoZWVsQ2FwdHVyZSIsInRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZyIsIkV2ZW50Q29uc3RydWN0b3IiLCIuL1N5bnRoZXRpY0NsaXBib2FyZEV2ZW50IiwiLi9TeW50aGV0aWNEcmFnRXZlbnQiLCIuL1N5bnRoZXRpY0ZvY3VzRXZlbnQiLCIuL1N5bnRoZXRpY0tleWJvYXJkRXZlbnQiLCIuL1N5bnRoZXRpY1RvdWNoRXZlbnQiLCIuL1N5bnRoZXRpY1VJRXZlbnQiLCIuL1N5bnRoZXRpY1doZWVsRXZlbnQiLCIuL2dldEV2ZW50Q2hhckNvZGUiLDI1MiwiQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UiLCJjbGlwYm9hcmREYXRhIiwiYXVnbWVudENsYXNzIiwyNTMsIkNvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UiLDI1NCwiRHJhZ0V2ZW50SW50ZXJmYWNlIiwiZGF0YVRyYW5zZmVyIiwyNTUsIkludGVyZmFjZSIsIm5vcm1hbGl6ZSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwiRXZlbnRJbnRlcmZhY2UiLCJ0aGF0UmV0dXJuc051bGwiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiU3VwZXIiLDI1NiwiRm9jdXNFdmVudEludGVyZmFjZSIsMjU3LCJJbnB1dEV2ZW50SW50ZXJmYWNlIiwyNTgsImdldEV2ZW50S2V5IiwiZ2V0RXZlbnRNb2RpZmllclN0YXRlIiwiS2V5Ym9hcmRFdmVudEludGVyZmFjZSIsInJlcGVhdCIsImxvY2FsZSIsImdldE1vZGlmaWVyU3RhdGUiLCJjaGFyQ29kZSIsIi4vZ2V0RXZlbnRLZXkiLCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZSIsMjU5LCJNb3VzZUV2ZW50SW50ZXJmYWNlIiwic2NyZWVuWCIsInNjcmVlblkiLCJjdXJyZW50U2Nyb2xsTGVmdCIsImN1cnJlbnRTY3JvbGxUb3AiLDI2MCwiVG91Y2hFdmVudEludGVyZmFjZSIsInRhcmdldFRvdWNoZXMiLDI2MSwiVUlFdmVudEludGVyZmFjZSIsInZpZXciLDI2MiwiV2hlZWxFdmVudEludGVyZmFjZSIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwyNjMsInRyYW5zYWN0aW9uV3JhcHBlcnMiLCJ3cmFwcGVySW5pdERhdGEiLCJfaXNJblRyYW5zYWN0aW9uIiwiaXNJblRyYW5zYWN0aW9uIiwiaW5pdGlhbGl6ZUFsbCIsImNsb3NlQWxsIiwic3RhcnRJbmRleCIsIk9CU0VSVkVEX0VSUk9SIiwiaW5pdERhdGEiLDI2NCwyNjUsImN1cnJlbnRJc0FycmF5IiwibmV4dElzQXJyYXkiLDI2NiwiY2hhckNvZGVBdCIsIk1PRCIsMjY3LCJjYW1lbGl6ZSIsIl9oeXBoZW5QYXR0ZXJuIiwiXyIsImNoYXJhY3RlciIsMjY4LCJtc1BhdHRlcm4iLCIuL2NhbWVsaXplIiwyNjksIkNISUxEUkVOX1BST1AiLCIuL1JlYWN0UHJvcFRyYW5zZmVyZXIiLDI3MCwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiaXNUZXh0Tm9kZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiLi9pc1RleHROb2RlIiwyNzEsImhhc0FycmF5TmF0dXJlIiwiY3JlYXRlQXJyYXlGcm9tTWl4ZWQiLCJ0b0FycmF5IiwiLi90b0FycmF5IiwyNzIsImVsZW1lbnRGYWN0b3J5IiwiRnVsbFBhZ2VDb21wb25lbnQiLDI3Mywibm9kZU5hbWVNYXRjaCIsIm1hdGNoIiwibm9kZU5hbWVQYXR0ZXJuIiwiaGFuZGxlU2NyaXB0IiwiZHVtbXlOb2RlIiwid3JhcERlcHRoIiwic2NyaXB0cyIsIi4vY3JlYXRlQXJyYXlGcm9tTWl4ZWQiLDI3NCwid2FybmVkIiwiZmlsdGVyIiwyNzUsImlzRW1wdHkiLCJpc05vbk51bWVyaWMiLDI3NiwibWFrZUVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJuc1RoaXMiLDI3NywyNzgsImVzY2FwZXIiLCJFU0NBUEVfTE9PS1VQIiwiRVNDQVBFX1JFR0VYIiwiJiIsIj4iLCI8IiwiXCIiLCInIiwyNzksImNvbXBvbmVudE9yRWxlbWVudCIsIi4vaXNOb2RlIiwyODAsImZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0IiwyODEsMjgyLDI4MywyODQsMjg1LCJub3JtYWxpemVLZXkiLCJ0cmFuc2xhdGVUb0tleSIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsMjg2LCJtb2RpZmllclN0YXRlR2V0dGVyIiwia2V5QXJnIiwia2V5UHJvcCIsIm1vZGlmaWVyS2V5VG9Qcm9wIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsMjg3LDI4OCwibWF5YmVJdGVyYWJsZSIsIklURVJBVE9SX1NZTUJPTCIsIkZBVVhfSVRFUkFUT1JfU1lNQk9MIiwyODksIm1hcmt1cFdyYXAiLCJzaG91bGRXcmFwIiwic2VsZWN0V3JhcCIsInRhYmxlV3JhcCIsInRyV3JhcCIsInN2Z1dyYXAiLCIqIiwyOTAsImdldExlYWZOb2RlIiwiZ2V0U2libGluZ05vZGUiLCJub2RlU3RhcnQiLCJub2RlRW5kIiwyOTEsMjkyLCJjb250ZW50S2V5IiwyOTMsInNjcm9sbGFibGUiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwyOTQsImh5cGhlbmF0ZSIsIl91cHBlcmNhc2VQYXR0ZXJuIiwyOTUsIi4vaHlwaGVuYXRlIiwyOTYsImlzSW50ZXJuYWxDb21wb25lbnRUeXBlIiwicGFyZW50Q29tcG9zaXRlVHlwZSIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlciIsIl9tb3VudEltYWdlIiwiX2lzT3duZXJOZWNlc3NhcnkiLDI5NywiY29uZGl0aW9uIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsMjk4LCJldmVudE5hbWVTdWZmaXgiLCJpc1N1cHBvcnRlZCIsInVzZUhhc0ZlYXR1cmUiLDI5OSwiTm9kZSIsMzAwLCJzdXBwb3J0ZWRJbnB1dFR5cGVzIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwicGFzc3dvcmQiLCJzZWFyY2giLCJ0ZWwiLDMwMSwzMDIsIm5leHRDbGFzcyIsImFyZ0xlbmd0aCIsImlpIiwzMDMsMzA0LCJvbmVLZXlPYmoiLDMwNSwzMDYsMzA3LDMwOCwicGVyZm9ybWFuY2UiLCJtc1BlcmZvcm1hbmNlIiwid2Via2l0UGVyZm9ybWFuY2UiLDMwOSwiLi9wZXJmb3JtYW5jZSIsMzEwLDMxMSwiV0hJVEVTUEFDRV9URVNUIiwiTk9OVklTSUJMRV9URVNUIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsInRleHROb2RlIiwiZGVsZXRlRGF0YSIsMzEyLDMxMywzMTQsInByZXZUeXBlIiwibmV4dFR5cGUiLCJvd25lcnNNYXRjaCIsInByZXZOYW1lIiwibmV4dE5hbWUiLCJuZXh0RGlzcGxheU5hbWUiLDMxNSwzMTYsInVzZXJQcm92aWRlZEtleUVzY2FwZXIiLCJ1c2VyUHJvdmlkZWRLZXlFc2NhcGVyTG9va3VwIiwiZ2V0Q29tcG9uZW50S2V5Iiwid3JhcFVzZXJQcm92aWRlZEtleSIsImVzY2FwZVVzZXJQcm92aWRlZEtleSIsInVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4IiwidHJhdmVyc2VBbGxDaGlsZHJlbkltcGwiLCJuYW1lU29GYXIiLCJpbmRleFNvRmFyIiwic3VidHJlZUNvdW50IiwiU1VCU0VQQVJBVE9SIiwiZGlkV2FybkFib3V0TWFwcyIsIj0iLCIuIiwiOiIsMzE3LCJzaGFsbG93Q29weSIsImludmFyaWFudEFycmF5Q2FzZSIsInNwZWNWYWx1ZSIsIkFMTF9DT01NQU5EU19MSVNUIiwiQ09NTUFORF9TRVQiLCJuZXh0VmFsdWUiLCJDT01NQU5EX01FUkdFIiwibWVyZ2VPYmoiLCJDT01NQU5EX1BVU0giLCJDT01NQU5EX1VOU0hJRlQiLCJDT01NQU5EX1NQTElDRSIsIkNPTU1BTkRfQVBQTFkiLCJBTExfQ09NTUFORFNfU0VUIiwiJHVuc2hpZnQiLCIkc2V0IiwiJGFwcGx5IiwzMTgsMzE5LCIuL2xpYi9SZWFjdCIsMzIwLCJFRSIsImZuIiwiX2V2ZW50cyIsImV4aXN0cyIsImV2dCIsImF2YWlsYWJsZSIsImVlIiwic2V0TWF4TGlzdGVuZXJzIiwzMjEsMzIyLCJjcmVhdGVkU3RvcmVzIiwiY3JlYXRlZEFjdGlvbnMiLDMyMywibWFrZXIiLCJpbnN0YW5jZUpvaW5DcmVhdG9yIiwibWFwQ2hpbGRMaXN0ZW5hYmxlcyIsImxpc3RlbmFibGUiLCJjaGlsZE5hbWUiLCJmbGF0dGVuTGlzdGVuYWJsZXMiLCJsaXN0ZW5hYmxlcyIsImZsYXR0ZW5lZCIsImNoaWxkTWFwIiwiY2hpbGRLZXkiLCJjaGlsZExpc3RlbmFibGUiLCJjYXBpdGFsaXplIiwiaGFzTGlzdGVuZXIiLCJzdWJzY3JpcHRpb25zIiwibGlzdGVuVG9NYW55IiwiYWxsTGlzdGVuYWJsZXMiLCJjYm5hbWUiLCJsb2NhbG5hbWUiLCJ2YWxpZGF0ZUxpc3RlbmluZyIsImRlZmF1bHRDYWxsYmFjayIsImRlc3ViIiwidW5zdWJzY3JpYmVyIiwic3Vic2NyaXB0aW9ub2JqIiwic3VicyIsInRocm93SWYiLCJmZXRjaEluaXRpYWxTdGF0ZSIsInN0b3BMaXN0ZW5pbmdUbyIsInN0b3BMaXN0ZW5pbmdUb0FsbCIsIm1lIiwidGhlbiIsImpvaW5UcmFpbGluZyIsImpvaW5MZWFkaW5nIiwiam9pbkNvbmNhdCIsImpvaW5TdHJpY3QiLCIuL2pvaW5zIiwiLi91dGlscyIsMzI0LCJwcmVFbWl0Iiwic2hvdWxkRW1pdCIsImJpbmRDb250ZXh0IiwiZXZlbnRIYW5kbGVyIiwiYWJvcnRlZCIsImVtaXR0ZXIiLCJldmVudExhYmVsIiwicHJvbWlzZSIsIl9wcm9taXNlIiwiY2FuSGFuZGxlUHJvbWlzZSIsInJlc3BvbnNlIiwiY29tcGxldGVkIiwiZmFpbGVkIiwibGlzdGVuQW5kUHJvbWlzZSIsIndpbGxDYWxsUHJvbWlzZSIsInJlbW92ZUxpc3RlbiIsInRyaWdnZXIiLCJpc0FyZ3VtZW50cyIsInRyaWdnZXJBc3luYyIsInRyaWdnZXJQcm9taXNlIiwiY3JlYXRlUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwcmV2aW91c1Byb21pc2UiLCJpbnB1dFByb21pc2UiLCJyZW1vdmVTdWNjZXNzIiwiYXJnc0FyciIsInJlbW92ZUZhaWxlZCIsMzI1LDMyNiwic3RvcmUiLCJkZWZpbml0aW9uIiwicHJvcGVydHlEZXNjcmlwdG9yIiwzMjcsIkFjdGlvbk1ldGhvZHMiLCJQdWJsaXNoZXJNZXRob2RzIiwiS2VlcCIsImFsbG93ZWQiLCJjcmVhdGVBY3Rpb24iLCJhY3Rpb25OYW1lIiwiYXN5bmNSZXN1bHQiLCJjaGlsZEFjdGlvbnMiLCJfaXNBY3Rpb24iLCJmdW5jdG9yIiwidHJpZ2dlclR5cGUiLCJzeW5jIiwiaGFzUHJvbWlzZSIsIi4vQWN0aW9uTWV0aG9kcyIsIi4vS2VlcCIsIi4vUHVibGlzaGVyTWV0aG9kcyIsMzI4LCJtaXhlciIsImJpbmRNZXRob2RzIiwiU3RvcmUiLCJpbml0IiwiU3RvcmVNZXRob2RzIiwiTGlzdGVuZXJNZXRob2RzIiwiLi9MaXN0ZW5lck1ldGhvZHMiLCIuL1N0b3JlTWV0aG9kcyIsIi4vYmluZE1ldGhvZHMiLCIuL21peGVyIiwzMjksIlJlZmx1eCIsInJlZmx1eC1jb3JlIiwiY3JlYXRlU3RvcmUiLCJzdGF0aWNKb2luQ3JlYXRvciIsInV0aWxzIiwiUHJvbWlzZSIsImNyZWF0ZUFjdGlvbnMiLCJyZWR1Y2VyIiwiZGVmaW5pdGlvbnMiLCJzZXRFdmVudEVtaXR0ZXIiLCJjdHgiLCJzZXRQcm9taXNlIiwic2V0UHJvbWlzZUZhY3RvcnkiLCJ1c2UiLCJwbHVnaW5DYiIsIl9fa2VlcCIsIi4vY3JlYXRlQWN0aW9uIiwiLi9jcmVhdGVTdG9yZSIsMzMwLCJtYWtlU3RvcHBlciIsInN1Ym9iaiIsImNhbmNlbHMiLCJsaXN0ZW5hYmxlc0VtaXR0ZWQiLCJudW1iZXJPZkxpc3RlbmFibGVzIiwibmV3TGlzdGVuZXIiLCJjYWxsYXJncyIsInN0cmF0ZWd5IiwiZW1pdElmQWxsTGlzdGVuYWJsZXNFbWl0dGVkIiwic3RyYXRlZ3lNZXRob2ROYW1lcyIsInN0cmljdCIsImZpcnN0IiwibGFzdCIsMzMxLCJkZWYiLCJjb21wb3NlZCIsInVwZGF0ZWQiLCJtaXhEZWYiLCJtaXhlZCIsInN1Yk1peGluIiwiY29tcG9zYWJsZSIsInJlZHVjZSIsInNvbWUiLDMzMiwiY2hlY2tFbnYiLCJmbGFnIiwiZXZhbCIsInZhbHMiLCJtc2ciLCJoYXNTZXRJbW1lZGlhdGUiLCJzZXRJbW1lZGlhdGUiLCJyZXNvbHZlciIsImV2ZW50ZW1pdHRlcjMiLDMzMywicmVmbHV4LWNvcmUvbGliL0xpc3RlbmVyTWV0aG9kcyIsInJlZmx1eC1jb3JlL2xpYi91dGlscyIsMzM0LCJMaXN0ZW5lck1peGluIiwidiIsIi4vTGlzdGVuZXJNaXhpbiIsMzM1LCJmaWx0ZXJGdW5jIiwzMzYsImNvbm5lY3QiLCJjb25uZWN0RmlsdGVyIiwiLi9jb25uZWN0IiwiLi9jb25uZWN0RmlsdGVyIiwiLi9saXN0ZW5UbyIsIi4vbGlzdGVuVG9NYW55IiwzMzcsImluaXRpYWwiLDMzOCwzMzksIl9yZWZsdXgiLCJfcmVmbHV4MiIsIkF1dGhBY3Rpb25zIiwicmVmbHV4IiwzNDAsIl9hY3Rpb25zQXV0aEFjdGlvbnMiLCJfYWN0aW9uc0F1dGhBY3Rpb25zMiIsIl9hdXRoU3RhdGUiLCJhdXRoZW50aWNhdGVkIiwic2VjcmV0IiwiQXV0aFN0b3JlIiwib25BdXRoZW50aWNhdGUiLCJmZXRjaCIsImFjdGlvbnMvQXV0aEFjdGlvbnMiLDM0MSwiX3JlYWN0Q29va2llIiwiX3JlYWN0Q29va2llMiIsIl9zdG9yZXNBdXRoU3RvcmUiLCJfc3RvcmVzQXV0aFN0b3JlMiIsIl9yZWFjdFRhcEV2ZW50UGx1Z2luIiwiX3JlYWN0VGFwRXZlbnRQbHVnaW4yIiwiX21hdGVyaWFsVWkiLCJfbWF0ZXJpYWxVaTIiLCJBdXRoIiwib25BdXRoQ2hhbmdlZCIsImF1dGhTdGF0ZSIsInNlY3JldEZpZWxkIiwiX29uU3VibWl0IiwiYXV0aGVudGljYXRlIiwibWF0ZXJpYWwtdWkiLCJyZWFjdC1jb29raWUiLCJyZWFjdC10YXAtZXZlbnQtcGx1Z2luIiwic3RvcmVzL0F1dGhTdG9yZSJdLCJtYXBwaW5ncyI6IkNBQUEsUUFBVUEsR0FBRUMsRUFBRUMsRUFBRUMsR0FBRyxRQUFTQyxHQUFFQyxFQUFFQyxHQUFHLElBQUlKLEVBQUVHLEdBQUcsQ0FBQyxJQUFJSixFQUFFSSxHQUFHLENBQUMsR0FBSUUsR0FBa0Isa0JBQVRDLFVBQXFCQSxPQUFRLEtBQUlGLEdBQUdDLEVBQUUs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VyxVQUNYQyxVQUFXLFVBQ1hDLFVBQVcsVUFDWEMsVUFBVyxVQUNYQyxVQUFXLFVBQ1hDLFdBQVksVUFDWkMsV0FBWSxVQUNaQyxXQUFZLFVBQ1pDLFdBQVksVUFFWkMsT0FBUSxVQUNSQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVEMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVEMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVEMsUUFBUyxVQUNUQyxTQUFVLFVBQ1ZDLFNBQVUsVUFDVkMsU0FBVSxVQUNWQyxTQUFVLFVBRVZDLFlBQWEsVUFDYkMsYUFBYyxVQUNkQyxhQUFjLFVBQ2RDLGFBQWMsVUFDZEMsYUFBYyxVQUNkQyxhQUFjLFVBQ2RDLGFBQWMsVUFDZEMsYUFBYyxVQUNkQyxhQUFjLFVBQ2RDLGFBQWMsVUFDZEMsY0FBZSxVQUNmQyxjQUFlLFVBQ2ZDLGNBQWUsVUFDZkMsY0FBZSxVQUVmQyxPQUFRLFVBQ1JDLFFBQVMsVUFDVEMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVEMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVEMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFNBQVUsVUFDVkMsU0FBVSxVQUNWQyxTQUFVLFVBQ1ZDLFNBQVUsVUFFVkMsT0FBUSxVQUNSQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVEMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVEMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVEMsUUFBUyxVQUNUQyxTQUFVLFVBQ1ZDLFNBQVUsVUFDVkMsU0FBVSxVQUNWQyxTQUFVLFVBRVZDLFFBQVMsVUFDVEMsU0FBVSxVQUNWQyxTQUFVLFVBQ1ZDLFNBQVUsVUFDVkMsU0FBVSxVQUNWQyxTQUFVLFVBQ1ZDLFNBQVUsVUFDVkMsU0FBVSxVQUNWQyxTQUFVLFVBQ1ZDLFNBQVUsVUFDVkMsVUFBVyxVQUNYQyxVQUFXLFVBQ1hDLFVBQVcsVUFDWEMsVUFBVyxVQUVYQyxhQUFjLFVBQ2RDLGNBQWUsVUFDZkMsY0FBZSxVQUNmQyxj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QUFXajRDLGNBQWNtcUssRUFBWWh6SSxjQUMzQ255QixNQUFPLFNBQ1BuSixPQUFTdUQsV0FBWSxNQUNyQmlCLFdBQVkxSCxLQUFLOHhLLGVBTXpCeHlILEdBQVEsV0FBV3o0QyxPQUFPeTRDLEVBQVEsV0FBV2o0QyxjQUFjcXFLLEVBQU0sTUFBT3RsSixTQUFTK3NILGVBQWUsV0FFN0Y2M0Isc0JBQXNCLElBQUlnQixjQUFjLEdBQUd4cEssTUFBUSxJQUFJeXBLLGVBQWUsSUFBSUMseUJBQXlCLElBQUk1QixPQUFTLElBQUk2QixtQkFBbUIsV0FBVyIsImZpbGUiOiJBdXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cbn0se31dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUeXBvZ3JhcGh5ID0gcmVxdWlyZSgnLi9zdHlsZXMvdHlwb2dyYXBoeScpO1xudmFyIEljb25CdXR0b24gPSByZXF1aXJlKCcuL2ljb24tYnV0dG9uJyk7XG52YXIgTmF2aWdhdGlvbk1lbnUgPSByZXF1aXJlKCcuL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL21lbnUnKTtcbnZhciBQYXBlciA9IHJlcXVpcmUoJy4vcGFwZXInKTtcblxudmFyIEFwcEJhciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdBcHBCYXInLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgb25MZWZ0SWNvbkJ1dHRvblRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBzaG93TWVudUljb25CdXR0b246IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGljb25DbGFzc05hbWVMZWZ0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGljb25DbGFzc05hbWVSaWdodDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpY29uRWxlbWVudExlZnQ6IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LFxuICAgIGljb25FbGVtZW50UmlnaHQ6IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LFxuICAgIGljb25TdHlsZVJpZ2h0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIHRpdGxlOiBSZWFjdC5Qcm9wVHlwZXMubm9kZSxcbiAgICB6RGVwdGg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXJcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2hvd01lbnVJY29uQnV0dG9uOiB0cnVlLFxuICAgICAgdGl0bGU6ICcnLFxuICAgICAgekRlcHRoOiAxXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmljb25FbGVtZW50TGVmdCAmJiB0aGlzLnByb3BzLmljb25DbGFzc05hbWVMZWZ0KSB7XG4gICAgICAgIGNvbnNvbGUud2FybignUHJvcGVydGllcyBpY29uQ2xhc3NOYW1lTGVmdCBhbmQgaWNvbkVsZW1lbnRMZWZ0IGNhbm5vdCBiZSBzaW11bHRhbmVvdXNseSAnICsgJ2RlZmluZWQuIFBsZWFzZSB1c2Ugb25lIG9yIHRoZSBvdGhlci4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvcHMuaWNvbkVsZW1lbnRSaWdodCAmJiB0aGlzLnByb3BzLmljb25DbGFzc05hbWVSaWdodCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1Byb3BlcnRpZXMgaWNvbkNsYXNzTmFtZVJpZ2h0IGFuZCBpY29uRWxlbWVudFJpZ2h0IGNhbm5vdCBiZSBzaW11bHRhbmVvdXNseSAnICsgJ2RlZmluZWQuIFBsZWFzZSB1c2Ugb25lIG9yIHRoZSBvdGhlci4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHNwYWNpbmcgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZztcbiAgICB2YXIgdGhlbWVWYXJpYWJsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmFwcEJhcjtcbiAgICB2YXIgaWNvbkJ1dHRvblNpemUgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmJ1dHRvbi5pY29uQnV0dG9uU2l6ZTtcbiAgICB2YXIgZmxhdEJ1dHRvblNpemUgPSAzNjtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICB6SW5kZXg6IDUsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGRpc3BsYXk6ICctd2Via2l0LWJveDsgZGlzcGxheTogLXdlYmtpdC1mbGV4OyBkaXNwbGF5OiBmbGV4JyxcbiAgICAgICAgbWluSGVpZ2h0OiB0aGVtZVZhcmlhYmxlcy5oZWlnaHQsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWVWYXJpYWJsZXMuY29sb3IsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nLmRlc2t0b3BHdXR0ZXIsXG4gICAgICAgIHBhZGRpbmdSaWdodDogc3BhY2luZy5kZXNrdG9wR3V0dGVyXG4gICAgICB9LFxuICAgICAgdGl0bGU6IHtcbiAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IDAsXG4gICAgICAgIGZvbnRTaXplOiAyNCxcbiAgICAgICAgZm9udFdlaWdodDogVHlwb2dyYXBoeS5mb250V2VpZ2h0Tm9ybWFsLFxuICAgICAgICBjb2xvcjogdGhlbWVWYXJpYWJsZXMudGV4dENvbG9yLFxuICAgICAgICBsaW5lSGVpZ2h0OiB0aGVtZVZhcmlhYmxlcy5oZWlnaHQgKyAncHgnXG4gICAgICB9LFxuICAgICAgbWFpbkVsZW1lbnQ6IHtcbiAgICAgICAgYm94RmxleDogMSxcbiAgICAgICAgZmxleDogJzEnXG4gICAgICB9LFxuICAgICAgaWNvbkJ1dHRvbjoge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIG1hcmdpblRvcDogKHRoZW1lVmFyaWFibGVzLmhlaWdodCAtIGljb25CdXR0b25TaXplKSAvIDIsXG4gICAgICAgICAgbWFyZ2luUmlnaHQ6IDgsXG4gICAgICAgICAgbWFyZ2luTGVmdDogLTE2XG4gICAgICAgIH0sXG4gICAgICAgIGljb25TdHlsZToge1xuICAgICAgICAgIGZpbGw6IHRoZW1lVmFyaWFibGVzLnRleHRDb2xvcixcbiAgICAgICAgICBjb2xvcjogdGhlbWVWYXJpYWJsZXMudGV4dENvbG9yXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBmbGF0QnV0dG9uOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZVZhcmlhYmxlcy50ZXh0Q29sb3IsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgbWFyZ2luVG9wOiAoaWNvbkJ1dHRvblNpemUgLSBmbGF0QnV0dG9uU2l6ZSkgLyAyICsgMlxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIG1lbnVFbGVtZW50TGVmdCA9IHVuZGVmaW5lZDtcbiAgICB2YXIgbWVudUVsZW1lbnRSaWdodCA9IHVuZGVmaW5lZDtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICB2YXIgdGl0bGUgPSBwcm9wcy50aXRsZTtcbiAgICB2YXIgaWNvblJpZ2h0U3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5pY29uQnV0dG9uLnN0eWxlLCB7XG4gICAgICBtYXJnaW5SaWdodDogLTE2LFxuICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nXG4gICAgfSwgcHJvcHMuaWNvblN0eWxlUmlnaHQpO1xuICAgIHZhciB0aXRsZUVsZW1lbnQgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIC8vIElmIHRoZSB0aXRsZSBpcyBhIHN0cmluZywgd3JhcCBpbiBhbiBoMSB0YWcuXG4gICAgICAvLyBJZiBub3QsIGp1c3QgdXNlIGl0IGFzIGEgbm9kZS5cbiAgICAgIHRpdGxlRWxlbWVudCA9IHR5cGVvZiB0aXRsZSA9PT0gJ3N0cmluZycgfHwgdGl0bGUgaW5zdGFuY2VvZiBTdHJpbmcgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnaDEnLFxuICAgICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy50aXRsZSwgc3R5bGVzLm1haW5FbGVtZW50KSB9LFxuICAgICAgICB0aXRsZVxuICAgICAgKSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5tYWluRWxlbWVudCkgfSxcbiAgICAgICAgdGl0bGVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLnNob3dNZW51SWNvbkJ1dHRvbikge1xuICAgICAgdmFyIGljb25FbGVtZW50TGVmdCA9IHByb3BzLmljb25FbGVtZW50TGVmdDtcblxuICAgICAgaWYgKGljb25FbGVtZW50TGVmdCkge1xuICAgICAgICBzd2l0Y2ggKGljb25FbGVtZW50TGVmdC50eXBlLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgY2FzZSAnSWNvbkJ1dHRvbic6XG4gICAgICAgICAgICBpY29uRWxlbWVudExlZnQgPSBSZWFjdC5jbG9uZUVsZW1lbnQoaWNvbkVsZW1lbnRMZWZ0LCB7XG4gICAgICAgICAgICAgIGljb25TdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaWNvbkJ1dHRvbi5pY29uU3R5bGUpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVudUVsZW1lbnRMZWZ0ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaWNvbkJ1dHRvbi5zdHlsZSB9LFxuICAgICAgICAgIGljb25FbGVtZW50TGVmdFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNoaWxkID0gcHJvcHMuaWNvbkNsYXNzTmFtZUxlZnQgPyAnJyA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2aWdhdGlvbk1lbnUsIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmljb25CdXR0b24uaWNvblN0eWxlKSB9KTtcbiAgICAgICAgbWVudUVsZW1lbnRMZWZ0ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBJY29uQnV0dG9uLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5pY29uQnV0dG9uLnN0eWxlKSxcbiAgICAgICAgICAgIGljb25TdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaWNvbkJ1dHRvbi5pY29uU3R5bGUpLFxuICAgICAgICAgICAgaWNvbkNsYXNzTmFtZTogcHJvcHMuaWNvbkNsYXNzTmFtZUxlZnQsXG4gICAgICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9vbkxlZnRJY29uQnV0dG9uVG91Y2hUYXAgfSxcbiAgICAgICAgICBjaGlsZFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9wcy5pY29uRWxlbWVudFJpZ2h0KSB7XG4gICAgICB2YXIgaWNvbkVsZW1lbnRSaWdodCA9IHByb3BzLmljb25FbGVtZW50UmlnaHQ7XG5cbiAgICAgIHN3aXRjaCAoaWNvbkVsZW1lbnRSaWdodC50eXBlLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgIGNhc2UgJ0ljb25CdXR0b24nOlxuICAgICAgICAgIGljb25FbGVtZW50UmlnaHQgPSBSZWFjdC5jbG9uZUVsZW1lbnQoaWNvbkVsZW1lbnRSaWdodCwge1xuICAgICAgICAgICAgaWNvblN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5pY29uQnV0dG9uLmljb25TdHlsZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdGbGF0QnV0dG9uJzpcbiAgICAgICAgICBpY29uRWxlbWVudFJpZ2h0ID0gUmVhY3QuY2xvbmVFbGVtZW50KGljb25FbGVtZW50UmlnaHQsIHtcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5mbGF0QnV0dG9uLCBpY29uRWxlbWVudFJpZ2h0LnByb3BzLnN0eWxlKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBtZW51RWxlbWVudFJpZ2h0ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IGljb25SaWdodFN0eWxlIH0sXG4gICAgICAgIGljb25FbGVtZW50UmlnaHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChwcm9wcy5pY29uQ2xhc3NOYW1lUmlnaHQpIHtcbiAgICAgIG1lbnVFbGVtZW50UmlnaHQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25CdXR0b24sIHtcbiAgICAgICAgc3R5bGU6IGljb25SaWdodFN0eWxlLFxuICAgICAgICBpY29uU3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmljb25CdXR0b24uaWNvblN0eWxlKSxcbiAgICAgICAgaWNvbkNsYXNzTmFtZTogcHJvcHMuaWNvbkNsYXNzTmFtZVJpZ2h0LFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9vblJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgUGFwZXIsXG4gICAgICB7XG4gICAgICAgIHJvdW5kZWQ6IGZhbHNlLFxuICAgICAgICBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHByb3BzLnN0eWxlKSxcbiAgICAgICAgekRlcHRoOiBwcm9wcy56RGVwdGggfSxcbiAgICAgIG1lbnVFbGVtZW50TGVmdCxcbiAgICAgIHRpdGxlRWxlbWVudCxcbiAgICAgIG1lbnVFbGVtZW50UmlnaHQsXG4gICAgICBwcm9wcy5jaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgX29uTGVmdEljb25CdXR0b25Ub3VjaFRhcDogZnVuY3Rpb24gX29uTGVmdEljb25CdXR0b25Ub3VjaFRhcChldmVudCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTGVmdEljb25CdXR0b25Ub3VjaFRhcCkge1xuICAgICAgdGhpcy5wcm9wcy5vbkxlZnRJY29uQnV0dG9uVG91Y2hUYXAoZXZlbnQpO1xuICAgIH1cbiAgfSxcblxuICBfb25SaWdodEljb25CdXR0b25Ub3VjaFRhcDogZnVuY3Rpb24gX29uUmlnaHRJY29uQnV0dG9uVG91Y2hUYXAoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwKSB7XG4gICAgICB0aGlzLnByb3BzLm9uUmlnaHRJY29uQnV0dG9uVG91Y2hUYXAoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHBCYXI7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9pY29uLWJ1dHRvblwiOjM1LFwiLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4vcGFwZXJcIjo1OCxcIi4vc3R5bGVzL3R5cG9ncmFwaHlcIjo3OCxcIi4vc3ZnLWljb25zL25hdmlnYXRpb24vbWVudVwiOjg4LFwiX3Byb2Nlc3NcIjoxLFwicmVhY3RcIjozMTl9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIEFwcENhbnZhcyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdBcHBDYW52YXMnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5jb250ZXh0Lm11aVRoZW1lLnBhbGV0dGUuY2FudmFzQ29sb3IsXG4gICAgICBXZWJraXRGb250U21vb3RoaW5nOiAnYW50aWFsaWFzZWQnXG4gICAgfTtcblxuICAgIHZhciBuZXdDaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLm1hcCh0aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY3VycmVudENoaWxkKSB7XG4gICAgICBpZiAoIWN1cnJlbnRDaGlsZCkge1xuICAgICAgICAvLyBJZiB1bmRlZmluZWQsIHNraXAgaXRcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoY3VycmVudENoaWxkLnR5cGUuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgY2FzZSAnQXBwQmFyJzpcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGN1cnJlbnRDaGlsZCwge1xuICAgICAgICAgICAgc3R5bGU6IF90aGlzLm1lcmdlU3R5bGVzKHtcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCdcbiAgICAgICAgICAgIH0sIGN1cnJlbnRDaGlsZC5wcm9wcy5zdHlsZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gY3VycmVudENoaWxkO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcyB9LFxuICAgICAgbmV3Q2hpbGRyZW5cbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcENhbnZhcztcbn0se1wiLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcInJlYWN0XCI6MzE5fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQ29sb3JzID0gcmVxdWlyZSgnLi9zdHlsZXMvY29sb3JzJyk7XG5cbnZhciBBdmF0YXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQXZhdGFyJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGJhY2tncm91bmRDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpY29uOiBSZWFjdC5Qcm9wVHlwZXMuZWxlbWVudCxcbiAgICBzaXplOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIHNyYzogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5ncmV5NDAwLFxuICAgICAgY29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgIHNpemU6IDQwXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgYmFja2dyb3VuZENvbG9yID0gX3Byb3BzLmJhY2tncm91bmRDb2xvcjtcbiAgICB2YXIgY29sb3IgPSBfcHJvcHMuY29sb3I7XG4gICAgdmFyIGljb24gPSBfcHJvcHMuaWNvbjtcbiAgICB2YXIgc2l6ZSA9IF9wcm9wcy5zaXplO1xuICAgIHZhciBzcmMgPSBfcHJvcHMuc3JjO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnYmFja2dyb3VuZENvbG9yJywgJ2NvbG9yJywgJ2ljb24nLCAnc2l6ZScsICdzcmMnLCAnc3R5bGUnXSk7XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChzcmMpIHtcbiAgICAgIHZhciBib3JkZXJDb2xvciA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQuYXZhdGFyLmJvcmRlckNvbG9yO1xuXG4gICAgICBpZiAoYm9yZGVyQ29sb3IpIHtcbiAgICAgICAgc3R5bGVzLnJvb3QgPSB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5yb290LCB7XG4gICAgICAgICAgaGVpZ2h0OiBzaXplIC0gMixcbiAgICAgICAgICB3aWR0aDogc2l6ZSAtIDIsXG4gICAgICAgICAgYm9yZGVyOiAnc29saWQgMXB4ICcgKyBib3JkZXJDb2xvclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzcmM6IHNyYywgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHN0eWxlKSB9KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlcy5yb290ID0gdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMucm9vdCwge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgbGluZUhlaWdodDogc2l6ZSArICdweCcsXG4gICAgICAgIGZvbnRTaXplOiBzaXplIC8gMiArIDQsXG4gICAgICAgIGNvbG9yOiBjb2xvclxuICAgICAgfSk7XG5cbiAgICAgIHZhciBzdHlsZUljb24gPSB7XG4gICAgICAgIG1hcmdpbjogOFxuICAgICAgfTtcblxuICAgICAgdmFyIGljb25FbGVtZW50ID0gaWNvbiA/IFJlYWN0LmNsb25lRWxlbWVudChpY29uLCB7XG4gICAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVJY29uLCBpY29uLnByb3BzLnN0eWxlKVxuICAgICAgfSkgOiBudWxsO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgc3R5bGUpIH0pLFxuICAgICAgICBpY29uRWxlbWVudCxcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF2YXRhcjtcbn0se1wiLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4vc3R5bGVzL2NvbG9yc1wiOjcxLFwicmVhY3QvYWRkb25zXCI6MTQ3fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBBdXRvUHJlZml4ID0gcmVxdWlyZSgnLi9zdHlsZXMvYXV0by1wcmVmaXgnKTtcblxuLyoqXG4gKiAgQmVmb3JlQWZ0ZXJXcmFwcGVyXG4gKiAgICBBbiBhbHRlcm5hdGl2ZSBmb3IgdGhlIDo6YmVmb3JlIGFuZCA6OmFmdGVyIGNzcyBwc2V1ZG8tZWxlbWVudHMgZm9yXG4gKiAgICBjb21wb25lbnRzIHdob3NlIHN0eWxlcyBhcmUgZGVmaW5lZCBpbiBqYXZhc2NyaXB0IGluc3RlYWQgb2YgY3NzLlxuICpcbiAqICBVc2FnZTogRm9yIHRoZSBlbGVtZW50IHRoYXQgd2Ugd2FudCB0byBhcHBseSBiZWZvcmUgYW5kIGFmdGVyIGVsZW1lbnRzIHRvLFxuICogICAgd3JhcCBpdHMgY2hpbGRyZW4gd2l0aCBCZWZvcmVBZnRlcldyYXBwZXIuIEZvciBleGFtcGxlOlxuICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFwZXI+XG4gKiAgPFBhcGVyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PiAvLyBTZWUgbm90aWNlXG4gKiAgICA8QmVmb3JlQWZ0ZXJXcmFwcGVyPiAgICAgICAgcmVuZGVycyAgICAgICAgIDxkaXYvPiAvLyBiZWZvcmUgZWxlbWVudFxuICogICAgICBbY2hpbGRyZW4gb2YgcGFwZXJdICAgICAgIC0tLS0tLT4gICAgICAgICBbY2hpbGRyZW4gb2YgcGFwZXJdXG4gKiAgICA8L0JlZm9yZUFmdGVyV3JhcHBlcj4gICAgICAgICAgICAgICAgICAgICAgIDxkaXYvPiAvLyBhZnRlciBlbGVtZW50XG4gKiAgPC9QYXBlcj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1BhcGVyPlxuICpcbiAqICBOb3RpY2U6IE5vdGljZSB0aGF0IHRoaXMgZGl2IGJ1bmRsZXMgdG9nZXRoZXIgb3VyIGVsZW1lbnRzLiBJZiB0aGUgZWxlbWVudFxuICogICAgdGhhdCB3ZSB3YW50IHRvIGFwcGx5IGJlZm9yZSBhbmQgYWZ0ZXIgZWxlbWVudHMgaXMgYSBIVE1MIHRhZyAoaS5lLiBhXG4gKiAgICBkaXYsIHAsIG9yIGJ1dHRvbiB0YWcpLCB3ZSBjYW4gYXZvaWQgdGhpcyBleHRyYSBuZXN0aW5nIGJ5IHBhc3NpbmcgdXNpbmdcbiAqICAgIHRoZSBCZWZvcmVBZnRlcldyYXBwZXIgaW4gcGxhY2Ugb2Ygc2FpZCB0YWcgbGlrZSBzbzpcbiAqXG4gKiAgPHA+XG4gKiAgICA8QmVmb3JlQWZ0ZXJXcmFwcGVyPiAgIGRvIHRoaXMgaW5zdGVhZCAgIDxCZWZvcmVBZnRlcldyYXBwZXIgZWxlbWVudFR5cGU9J3AnPlxuICogICAgICBbY2hpbGRyZW4gb2YgcF0gICAgICAgICAgLS0tLS0tPiAgICAgICAgIFtjaGlsZHJlbiBvZiBwXVxuICogICAgPC9CZWZvcmVBZnRlcldyYXBwZXI+ICAgICAgICAgICAgICAgICAgICA8L0JlZm9yZUFmdGVyV3JhcHBlcj5cbiAqICA8L3A+XG4gKlxuICogIEJlZm9yZUFmdGVyV3JhcHBlciBmZWF0dXJlcyBzcHJlYWQgZnVuY3Rpb25hbGl0eS4gVGhpcyBtZWFucyB0aGF0IHdlIGNhblxuICogIHBhc3MgSFRNTCB0YWcgcHJvcGVydGllcyBkaXJlY3RseSBpbnRvIHRoZSBCZWZvcmVBZnRlcldyYXBwZXIgdGFnLlxuICpcbiAqICBXaGVuIHVzaW5nIEJlZm9yZUFmdGVyV3JhcHBlciwgZW5zdXJlIHRoYXQgdGhlIHBhcmVudCBvZiB0aGUgYmVmb3JlRWxlbWVudFxuICogIGFuZCBhZnRlckVsZW1lbnQgaGF2ZSBhIGRlZmluZWQgc3R5bGUgcG9zaXRpb24uXG4gKi9cblxudmFyIEJlZm9yZUFmdGVyV3JhcHBlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdCZWZvcmVBZnRlcldyYXBwZXInLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGJlZm9yZVN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGFmdGVyU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgYmVmb3JlRWxlbWVudFR5cGU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWZ0ZXJFbGVtZW50VHlwZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBlbGVtZW50VHlwZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBiZWZvcmVFbGVtZW50VHlwZTogJ2RpdicsXG4gICAgICBhZnRlckVsZW1lbnRUeXBlOiAnZGl2JyxcbiAgICAgIGVsZW1lbnRUeXBlOiAnZGl2J1xuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGJlZm9yZVN0eWxlID0gX3Byb3BzLmJlZm9yZVN0eWxlO1xuICAgIHZhciBhZnRlclN0eWxlID0gX3Byb3BzLmFmdGVyU3R5bGU7XG4gICAgdmFyIGJlZm9yZUVsZW1lbnRUeXBlID0gX3Byb3BzLmJlZm9yZUVsZW1lbnRUeXBlO1xuICAgIHZhciBhZnRlckVsZW1lbnRUeXBlID0gX3Byb3BzLmFmdGVyRWxlbWVudFR5cGU7XG4gICAgdmFyIGVsZW1lbnRUeXBlID0gX3Byb3BzLmVsZW1lbnRUeXBlO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydiZWZvcmVTdHlsZScsICdhZnRlclN0eWxlJywgJ2JlZm9yZUVsZW1lbnRUeXBlJywgJ2FmdGVyRWxlbWVudFR5cGUnLCAnZWxlbWVudFR5cGUnXSk7XG5cbiAgICB2YXIgYmVmb3JlRWxlbWVudCA9IHVuZGVmaW5lZCxcbiAgICAgICAgYWZ0ZXJFbGVtZW50ID0gdW5kZWZpbmVkO1xuXG4gICAgYmVmb3JlU3R5bGUgPSBBdXRvUHJlZml4LmFsbCh7IGJveFNpemluZzogJ2JvcmRlci1ib3gnIH0pO1xuICAgIGFmdGVyU3R5bGUgPSBBdXRvUHJlZml4LmFsbCh7IGJveFNpemluZzogJ2JvcmRlci1ib3gnIH0pO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuYmVmb3JlU3R5bGUpIGJlZm9yZUVsZW1lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMuYmVmb3JlRWxlbWVudFR5cGUsIHtcbiAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KGJlZm9yZVN0eWxlLCB0aGlzLnByb3BzLmJlZm9yZVN0eWxlKSxcbiAgICAgIGtleTogJzo6YmVmb3JlJ1xuICAgIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLmFmdGVyU3R5bGUpIGFmdGVyRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5hZnRlckVsZW1lbnRUeXBlLCB7XG4gICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChhZnRlclN0eWxlLCB0aGlzLnByb3BzLmFmdGVyU3R5bGUpLFxuICAgICAga2V5OiAnOjphZnRlcidcbiAgICB9KTtcblxuICAgIHZhciBjaGlsZHJlbiA9IFtiZWZvcmVFbGVtZW50LCB0aGlzLnByb3BzLmNoaWxkcmVuLCBhZnRlckVsZW1lbnRdO1xuXG4gICAgdmFyIHByb3BzID0gb3RoZXI7XG4gICAgcHJvcHMuc3R5bGUgPSB0aGlzLnByb3BzLnN0eWxlO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5lbGVtZW50VHlwZSwgcHJvcHMsIGNoaWxkcmVuKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBCZWZvcmVBZnRlcldyYXBwZXI7XG59LHtcIi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL3N0eWxlcy9hdXRvLXByZWZpeFwiOjcwLFwicmVhY3RcIjozMTl9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgUHVyZVJlbmRlck1peGluID0gUmVhY3QuYWRkb25zLlB1cmVSZW5kZXJNaXhpbjtcbnZhciBTdHlsZXMgPSByZXF1aXJlKCcuLi91dGlscy9zdHlsZXMnKTtcblxudmFyIEZsYXRCdXR0b25MYWJlbCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdGbGF0QnV0dG9uTGFiZWwnLFxuXG4gIG1peGluczogW1B1cmVSZW5kZXJNaXhpbl0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBsYWJlbDogUmVhY3QuUHJvcFR5cGVzLm5vZGUsXG4gICAgc3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBnZXRDb250ZXh0UHJvcHM6IGZ1bmN0aW9uIGdldENvbnRleHRQcm9wcygpIHtcbiAgICB2YXIgdGhlbWUgPSB0aGlzLmNvbnRleHQubXVpVGhlbWU7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3BhY2luZ0Rlc2t0b3BHdXR0ZXJMZXNzOiB0aGVtZS5zcGFjaW5nLmRlc2t0b3BHdXR0ZXJMZXNzXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgbGFiZWwgPSBfcHJvcHMubGFiZWw7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXG4gICAgdmFyIGNvbnRleHRQcm9wcyA9IHRoaXMuZ2V0Q29udGV4dFByb3BzKCk7XG5cbiAgICB2YXIgbWVyZ2VkUm9vdFN0eWxlcyA9IFN0eWxlcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHBhZGRpbmc6ICcwICcgKyBjb250ZXh0UHJvcHMuc3BhY2luZ0Rlc2t0b3BHdXR0ZXJMZXNzICsgJ3B4J1xuICAgIH0sIHN0eWxlKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3NwYW4nLFxuICAgICAgeyBzdHlsZTogbWVyZ2VkUm9vdFN0eWxlcyB9LFxuICAgICAgbGFiZWxcbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZsYXRCdXR0b25MYWJlbDtcbn0se1wiLi4vdXRpbHMvc3R5bGVzXCI6MTM3LFwicmVhY3QvYWRkb25zXCI6MTQ3fV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBDYXJkQWN0aW9ucyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdDYXJkQWN0aW9ucycsXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgcGFkZGluZzogOCxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGV4cGFuZGFibGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHNob3dFeHBhbmRhYmxlQnV0dG9uOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4ubWFwKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBzdHlsZTogeyBtYXJnaW5SaWdodDogOCB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgeyBzdHlsZTogc3R5bGVzLnJvb3QgfSksXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhcmRBY3Rpb25zO1xufSx7XCJyZWFjdFwiOjMxOX1dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIE9wZW5JY29uID0gcmVxdWlyZSgnLi4vc3ZnLWljb25zL2hhcmR3YXJlL2tleWJvYXJkLWFycm93LXVwJyk7XG52YXIgQ2xvc2VJY29uID0gcmVxdWlyZSgnLi4vc3ZnLWljb25zL2hhcmR3YXJlL2tleWJvYXJkLWFycm93LWRvd24nKTtcbnZhciBJY29uQnV0dG9uID0gcmVxdWlyZSgnLi4vaWNvbi1idXR0b24nKTtcblxudmFyIENhcmRFeHBhbmRhYmxlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0NhcmRFeHBhbmRhYmxlJyxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm9vdDoge1xuICAgICAgICByaWdodDogNCxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIG1hcmdpbjogJ2F1dG8nLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgb25FeHBhbmRpbmc6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZXhwYW5kZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgX29uRXhwYW5kaW5nOiBmdW5jdGlvbiBfb25FeHBhbmRpbmcoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZXhwYW5kZWQgPT09IHRydWUpIHRoaXMucHJvcHMub25FeHBhbmRpbmcoZmFsc2UpO2Vsc2UgdGhpcy5wcm9wcy5vbkV4cGFuZGluZyh0cnVlKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcblxuICAgIHZhciBleHBhbmRhYmxlID0gdW5kZWZpbmVkO1xuICAgIGlmICh0aGlzLnByb3BzLmV4cGFuZGVkID09PSB0cnVlKSBleHBhbmRhYmxlID0gUmVhY3QuY3JlYXRlRWxlbWVudChPcGVuSWNvbiwgbnVsbCk7ZWxzZSBleHBhbmRhYmxlID0gUmVhY3QuY3JlYXRlRWxlbWVudChDbG9zZUljb24sIG51bGwpO1xuXG4gICAgdmFyIGV4cGFuZGFibGVCdG4gPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgSWNvbkJ1dHRvbixcbiAgICAgIHtcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5yb290LFxuICAgICAgICBvbkNsaWNrOiB0aGlzLl9vbkV4cGFuZGluZyB9LFxuICAgICAgZXhwYW5kYWJsZVxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwYW5kYWJsZUJ0bjtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FyZEV4cGFuZGFibGU7XG59LHtcIi4uL2ljb24tYnV0dG9uXCI6MzUsXCIuLi9zdmctaWNvbnMvaGFyZHdhcmUva2V5Ym9hcmQtYXJyb3ctZG93blwiOjgwLFwiLi4vc3ZnLWljb25zL2hhcmR3YXJlL2tleWJvYXJkLWFycm93LXVwXCI6ODEsXCJyZWFjdFwiOjMxOX1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlcyA9IHJlcXVpcmUoJy4uL3N0eWxlcycpO1xudmFyIEF2YXRhciA9IHJlcXVpcmUoJy4uL2F2YXRhcicpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIENhcmRIZWFkZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2FyZEhlYWRlcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgdGl0bGU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGl0bGVDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0aXRsZVN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIHN1YnRpdGxlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN1YnRpdGxlQ29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3VidGl0bGVTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0ZXh0U3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgZXhwYW5kYWJsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd0V4cGFuZGFibGVCdXR0b246IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpdGxlQ29sb3I6IFN0eWxlcy5Db2xvcnMuZGFya0JsYWNrLFxuICAgICAgc3VidGl0bGVDb2xvcjogU3R5bGVzLkNvbG9ycy5saWdodEJsYWNrXG4gICAgfTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBoZWlnaHQ6IDcyLFxuICAgICAgICBwYWRkaW5nOiAxNixcbiAgICAgICAgZm9udFdlaWdodDogU3R5bGVzLlR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bSxcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgdGV4dDoge1xuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCdcbiAgICAgIH0sXG4gICAgICBhdmF0YXI6IHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IDE2XG4gICAgICB9LFxuICAgICAgdGl0bGU6IHtcbiAgICAgICAgY29sb3I6IHRoaXMucHJvcHMudGl0bGVDb2xvcixcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgZm9udFNpemU6IDE1XG4gICAgICB9LFxuICAgICAgc3VidGl0bGU6IHtcbiAgICAgICAgY29sb3I6IHRoaXMucHJvcHMuc3VidGl0bGVDb2xvcixcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgZm9udFNpemU6IDE0XG4gICAgICB9XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICB2YXIgcm9vdFN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5zdHlsZSk7XG4gICAgdmFyIHRleHRTdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnRleHQsIHRoaXMucHJvcHMudGV4dFN0eWxlKTtcbiAgICB2YXIgdGl0bGVTdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnRpdGxlLCB0aGlzLnByb3BzLnRpdGxlU3R5bGUpO1xuICAgIHZhciBzdWJ0aXRsZVN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuc3VidGl0bGUsIHRoaXMucHJvcHMuc3VidGl0bGVTdHlsZSk7XG5cbiAgICB2YXIgYXZhdGFyID0gdGhpcy5wcm9wcy5hdmF0YXI7XG4gICAgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KHRoaXMucHJvcHMuYXZhdGFyKSkge1xuICAgICAgdmFyIGF2YXRhck1lcmdlZFN0eWxlID0gdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMuYXZhdGFyLCBhdmF0YXIucHJvcHMuc3R5bGUpO1xuICAgICAgYXZhdGFyID0gUmVhY3QuY2xvbmVFbGVtZW50KGF2YXRhciwgeyBzdHlsZTogYXZhdGFyTWVyZ2VkU3R5bGUgfSk7XG4gICAgfSBlbHNlIGF2YXRhciA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXZhdGFyLCB7IHNyYzogdGhpcy5wcm9wcy5hdmF0YXIsIHN0eWxlOiBzdHlsZXMuYXZhdGFyIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7IHN0eWxlOiByb290U3R5bGUgfSksXG4gICAgICBhdmF0YXIsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogdGV4dFN0eWxlIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgIHsgc3R5bGU6IHRpdGxlU3R5bGUgfSxcbiAgICAgICAgICB0aGlzLnByb3BzLnRpdGxlXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgIHsgc3R5bGU6IHN1YnRpdGxlU3R5bGUgfSxcbiAgICAgICAgICB0aGlzLnByb3BzLnN1YnRpdGxlXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FyZEhlYWRlcjtcbn0se1wiLi4vYXZhdGFyXCI6NCxcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi4vc3R5bGVzXCI6NzIsXCJyZWFjdFwiOjMxOX1dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZXMgPSByZXF1aXJlKCcuLi9zdHlsZXMnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG5cbnZhciBDYXJkTWVkaWEgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2FyZE1lZGlhJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBvdmVybGF5OiBSZWFjdC5Qcm9wVHlwZXMubm9kZSxcbiAgICBzdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvdmVybGF5U3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgb3ZlcmxheUNvbnRhaW5lclN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG92ZXJsYXlDb250ZW50U3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgbWVkaWFTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBleHBhbmRhYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICByb290OiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgb3ZlcmxheUNvbnRhaW5lcjoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICBsZWZ0OiAwXG4gICAgICB9LFxuICAgICAgb3ZlcmxheToge1xuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBvdmVybGF5Q29udGVudDoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgcGFkZGluZ1RvcDogOCxcbiAgICAgICAgYmFja2dyb3VuZDogU3R5bGVzLkNvbG9ycy5saWdodEJsYWNrXG4gICAgICB9LFxuICAgICAgbWVkaWE6IHt9LFxuICAgICAgbWVkaWFDaGlsZDoge1xuICAgICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgbWluV2lkdGg6ICcxMDAlJ1xuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuICAgIHZhciByb290U3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnN0eWxlKTtcbiAgICB2YXIgbWVkaWFTdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1lZGlhLCB0aGlzLnByb3BzLm1lZGlhU3R5bGUpO1xuICAgIHZhciBvdmVybGF5Q29udGFpbmVyU3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5vdmVybGF5Q29udGFpbmVyLCB0aGlzLnByb3BzLm92ZXJsYXlDb250YWluZXJTdHlsZSk7XG4gICAgdmFyIG92ZXJsYXlDb250ZW50U3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5vdmVybGF5Q29udGVudCwgdGhpcy5wcm9wcy5vdmVybGF5Q29udGVudFN0eWxlKTtcbiAgICB2YXIgb3ZlcmxheVN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMub3ZlcmxheSwgdGhpcy5wcm9wcy5vdmVybGF5U3R5bGUpO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4ubWFwKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgeyBzdHlsZTogX3RoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1lZGlhQ2hpbGQsIGNoaWxkLnByb3BzLnN0eWxlKSB9KTtcbiAgICB9KTtcblxuICAgIHZhciBvdmVybGF5Q2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5vdmVybGF5LCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC50eXBlLmRpc3BsYXlOYW1lID09PSAnQ2FyZEhlYWRlcicgfHwgY2hpbGQudHlwZS5kaXNwbGF5TmFtZSA9PT0gJ0NhcmRUaXRsZScpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgIHRpdGxlQ29sb3I6IFN0eWxlcy5Db2xvcnMuZGFya1doaXRlLFxuICAgICAgICAgIHN1YnRpdGxlQ29sb3I6IFN0eWxlcy5Db2xvcnMubGlnaHRXaGl0ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGQudHlwZS5kaXNwbGF5TmFtZSA9PT0gJ0NhcmRUZXh0Jykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgY29sb3I6IFN0eWxlcy5Db2xvcnMuZGFya1doaXRlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7IHN0eWxlOiByb290U3R5bGUgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogbWVkaWFTdHlsZSB9LFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKSxcbiAgICAgIHRoaXMucHJvcHMub3ZlcmxheSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBvdmVybGF5Q29udGFpbmVyU3R5bGUgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBvdmVybGF5U3R5bGUgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBvdmVybGF5Q29udGVudFN0eWxlIH0sXG4gICAgICAgICAgICBvdmVybGF5Q2hpbGRyZW5cbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICkgOiAnJ1xuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhcmRNZWRpYTtcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi9zdHlsZXNcIjo3MixcInJlYWN0XCI6MzE5fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlcyA9IHJlcXVpcmUoJy4uL3N0eWxlcycpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIENhcmRUZXh0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0NhcmRUZXh0JyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBleHBhbmRhYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb2xvcjogU3R5bGVzLkNvbG9ycy5ja1xuICAgIH07XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgcGFkZGluZzogMTYsXG4gICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgIGNvbG9yOiB0aGlzLnByb3BzLmNvbG9yXG4gICAgICB9XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICB2YXIgcm9vdFN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5zdHlsZSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHsgc3R5bGU6IHJvb3RTdHlsZSB9KSxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYXJkVGV4dDtcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi9zdHlsZXNcIjo3MixcInJlYWN0XCI6MzE5fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlcyA9IHJlcXVpcmUoJy4uL3N0eWxlcycpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIENhcmRUaXRsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdDYXJkVGl0bGUnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIHRpdGxlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRpdGxlQ29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgdGl0bGVTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzdWJ0aXRsZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdWJ0aXRsZUNvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN1YnRpdGxlU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgZXhwYW5kYWJsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd0V4cGFuZGFibGVCdXR0b246IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpdGxlQ29sb3I6IFN0eWxlcy5Db2xvcnMuZGFya0JsYWNrLFxuICAgICAgc3VidGl0bGVDb2xvcjogU3R5bGVzLkNvbG9ycy5saWdodEJsYWNrXG4gICAgfTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBwYWRkaW5nOiAxNixcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICB0aXRsZToge1xuICAgICAgICBmb250U2l6ZTogMjQsXG4gICAgICAgIGNvbG9yOiB0aGlzLnByb3BzLnRpdGxlQ29sb3IsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICczNnB4J1xuICAgICAgfSxcbiAgICAgIHN1YnRpdGxlOiB7XG4gICAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgICAgY29sb3I6IHRoaXMucHJvcHMuc3VidGl0bGVDb2xvcixcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgdmFyIHJvb3RTdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUpO1xuICAgIHZhciB0aXRsZVN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMudGl0bGUsIHRoaXMucHJvcHMudGl0bGVTdHlsZSk7XG4gICAgdmFyIHN1YnRpdGxlU3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5zdWJ0aXRsZSwgdGhpcy5wcm9wcy5zdWJ0aXRsZVN0eWxlKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgeyBzdHlsZTogcm9vdFN0eWxlIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IHN0eWxlOiB0aXRsZVN0eWxlIH0sXG4gICAgICAgIHRoaXMucHJvcHMudGl0bGVcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHsgc3R5bGU6IHN1YnRpdGxlU3R5bGUgfSxcbiAgICAgICAgdGhpcy5wcm9wcy5zdWJ0aXRsZVxuICAgICAgKSxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYXJkVGl0bGU7XG59LHtcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi4vc3R5bGVzXCI6NzIsXCJyZWFjdFwiOjMxOX1dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFBhcGVyID0gcmVxdWlyZSgnLi4vcGFwZXInKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQ2FyZEV4cGFuZGFibGUgPSByZXF1aXJlKCcuL2NhcmQtZXhwYW5kYWJsZScpO1xuXG52YXIgQ2FyZCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdDYXJkJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4geyBleHBhbmRlZDogdGhpcy5wcm9wcy5pbml0aWFsbHlFeHBhbmRlZCA/IHRydWUgOiBmYWxzZSB9O1xuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIHN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGV4cGFuZGFibGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGluaXRpYWxseUV4cGFuZGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvbkV4cGFuZENoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmNcbiAgfSxcblxuICBfb25FeHBhbmRhYmxlOiBmdW5jdGlvbiBfb25FeHBhbmRhYmxlKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGV4cGFuZGVkOiB2YWx1ZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkV4cGFuZENoYW5nZSkgdGhpcy5wcm9wcy5vbkV4cGFuZENoYW5nZSh2YWx1ZSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBsYXN0RWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICB2YXIgbmV3Q2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGN1cnJlbnRDaGlsZCkge1xuICAgICAgaWYgKCFjdXJyZW50Q2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMuc3RhdGUuZXhwYW5kZWQgPT09IGZhbHNlICYmIGN1cnJlbnRDaGlsZC5wcm9wcy5leHBhbmRhYmxlID09PSB0cnVlKSByZXR1cm47XG4gICAgICBpZiAoY3VycmVudENoaWxkLnByb3BzLnNob3dFeHBhbmRhYmxlQnV0dG9uID09PSB0cnVlKSB7XG4gICAgICAgIGxhc3RFbGVtZW50ID0gUmVhY3QuY2xvbmVFbGVtZW50KGN1cnJlbnRDaGlsZCwge30sIGN1cnJlbnRDaGlsZC5wcm9wcy5jaGlsZHJlbiwgUmVhY3QuY3JlYXRlRWxlbWVudChDYXJkRXhwYW5kYWJsZSwgeyBleHBhbmRlZDogX3RoaXMuc3RhdGUuZXhwYW5kZWQsIG9uRXhwYW5kaW5nOiBfdGhpcy5fb25FeHBhbmRhYmxlIH0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxhc3RFbGVtZW50ID0gY3VycmVudENoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxhc3RFbGVtZW50O1xuICAgIH0sIHRoaXMpO1xuXG4gICAgLy8gSWYgdGhlIGxhc3QgZWxlbWVudCBpcyB0ZXh0IG9yIGEgdGl0bGUgd2Ugc2hvdWxkIGFkZFxuICAgIC8vIDhweCBwYWRkaW5nIHRvIHRoZSBib3R0b20gb2YgdGhlIGNhcmRcbiAgICB2YXIgYWRkQm90dG9tUGFkZGluZyA9IGxhc3RFbGVtZW50ICYmIChsYXN0RWxlbWVudC50eXBlLmRpc3BsYXlOYW1lID09PSAnQ2FyZFRleHQnIHx8IGxhc3RFbGVtZW50LnR5cGUuZGlzcGxheU5hbWUgPT09ICdDYXJkVGl0bGUnKTtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3N0eWxlJ10pO1xuXG4gICAgdmFyIG1lcmdlZFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoe1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgekluZGV4OiAxXG4gICAgfSwgc3R5bGUpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBQYXBlcixcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzdHlsZTogbWVyZ2VkU3R5bGVzIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHsgcGFkZGluZ0JvdHRvbTogYWRkQm90dG9tUGFkZGluZyA/IDggOiAwIH0gfSxcbiAgICAgICAgbmV3Q2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYXJkO1xufSx7XCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4uL3BhcGVyXCI6NTgsXCIuL2NhcmQtZXhwYW5kYWJsZVwiOjgsXCJyZWFjdFwiOjMxOX1dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIEVuaGFuY2VkU3dpdGNoID0gcmVxdWlyZSgnLi9lbmhhbmNlZC1zd2l0Y2gnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgQ2hlY2tib3hPdXRsaW5lID0gcmVxdWlyZSgnLi9zdmctaWNvbnMvdG9nZ2xlL2NoZWNrLWJveC1vdXRsaW5lLWJsYW5rJyk7XG52YXIgQ2hlY2tib3hDaGVja2VkID0gcmVxdWlyZSgnLi9zdmctaWNvbnMvdG9nZ2xlL2NoZWNrLWJveCcpO1xuXG52YXIgQ2hlY2tib3ggPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2hlY2tib3gnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY2hlY2tlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgY2hlY2tlZEljb246IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LFxuICAgIGRlZmF1bHRDaGVja2VkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBpY29uU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgbGFiZWxTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvbkNoZWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICB1bkNoZWNrZWRJY29uOiBSZWFjdC5Qcm9wVHlwZXMuZWxlbWVudFxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzd2l0Y2hlZDogdGhpcy5wcm9wcy5jaGVja2VkIHx8IHRoaXMucHJvcHMuZGVmYXVsdENoZWNrZWQgfHwgdGhpcy5wcm9wcy52YWx1ZUxpbmsgJiYgdGhpcy5wcm9wcy52YWx1ZUxpbmsudmFsdWUgfHwgZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5jaGVja2JveDtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgY2hlY2tib3hTaXplID0gMjQ7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIGljb246IHtcbiAgICAgICAgaGVpZ2h0OiBjaGVja2JveFNpemUsXG4gICAgICAgIHdpZHRoOiBjaGVja2JveFNpemVcbiAgICAgIH0sXG4gICAgICBjaGVjazoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICB0cmFuc2l0aW9uT3JpZ2luOiAnNTAlIDUwJScsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoJzQ1MG1zJywgJ29wYWNpdHknLCAnMG1zJykgKyAnLCAnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnMG1zJywgJ3RyYW5zZm9ybScsICc0NTBtcycpLFxuICAgICAgICBmaWxsOiB0aGlzLmdldFRoZW1lKCkuY2hlY2tlZENvbG9yXG4gICAgICB9LFxuICAgICAgYm94OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBmaWxsOiB0aGlzLmdldFRoZW1lKCkuYm94Q29sb3IsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoJzJzJywgbnVsbCwgJzIwMG1zJylcbiAgICAgIH0sXG4gICAgICBjaGVja1doZW5Td2l0Y2hlZDoge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKScsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoJzBtcycsICdvcGFjaXR5JywgJzBtcycpICsgJywgJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzgwMG1zJywgJ3RyYW5zZm9ybScsICcwbXMnKVxuICAgICAgfSxcbiAgICAgIGJveFdoZW5Td2l0Y2hlZDoge1xuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCcxMDBtcycsIG51bGwsICcwbXMnKSxcbiAgICAgICAgZmlsbDogdGhpcy5nZXRUaGVtZSgpLmNoZWNrZWRDb2xvclxuICAgICAgfSxcbiAgICAgIGNoZWNrV2hlbkRpc2FibGVkOiB7XG4gICAgICAgIGZpbGw6IHRoaXMuZ2V0VGhlbWUoKS5kaXNhYmxlZENvbG9yXG4gICAgICB9LFxuICAgICAgYm94V2hlbkRpc2FibGVkOiB7XG4gICAgICAgIGZpbGw6IHRoaXMuZ2V0VGhlbWUoKS5kaXNhYmxlZENvbG9yXG4gICAgICB9LFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgY29sb3I6IHRoaXMucHJvcHMuZGlzYWJsZWQgPyB0aGlzLmdldFRoZW1lKCkubGFiZWxEaXNhYmxlZENvbG9yIDogdGhpcy5nZXRUaGVtZSgpLmxhYmVsQ29sb3JcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgaWNvblN0eWxlID0gX3Byb3BzLmljb25TdHlsZTtcbiAgICB2YXIgb25DaGVjayA9IF9wcm9wcy5vbkNoZWNrO1xuICAgIHZhciBjaGVja2VkSWNvbiA9IF9wcm9wcy5jaGVja2VkSWNvbjtcbiAgICB2YXIgdW5DaGVja2VkSWNvbiA9IF9wcm9wcy51bkNoZWNrZWRJY29uO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydpY29uU3R5bGUnLCAnb25DaGVjaycsICdjaGVja2VkSWNvbicsICd1bkNoZWNrZWRJY29uJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgdmFyIGJveFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmJveCwgdGhpcy5zdGF0ZS5zd2l0Y2hlZCAmJiBzdHlsZXMuYm94V2hlblN3aXRjaGVkLCBpY29uU3R5bGUsIHRoaXMucHJvcHMuZGlzYWJsZWQgJiYgc3R5bGVzLmJveFdoZW5EaXNhYmxlZCk7XG4gICAgdmFyIGNoZWNrU3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuY2hlY2ssIHRoaXMuc3RhdGUuc3dpdGNoZWQgJiYgc3R5bGVzLmNoZWNrV2hlblN3aXRjaGVkLCBpY29uU3R5bGUsIHRoaXMucHJvcHMuZGlzYWJsZWQgJiYgc3R5bGVzLmNoZWNrV2hlbkRpc2FibGVkKTtcblxuICAgIHZhciBjaGVja2VkRWxlbWVudCA9IGNoZWNrZWRJY29uID8gUmVhY3QuY2xvbmVFbGVtZW50KGNoZWNrZWRJY29uLCB7XG4gICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChjaGVja1N0eWxlcywgY2hlY2tlZEljb24ucHJvcHMuc3R5bGUpXG4gICAgfSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrYm94Q2hlY2tlZCwge1xuICAgICAgc3R5bGU6IGNoZWNrU3R5bGVzXG4gICAgfSk7XG5cbiAgICB2YXIgdW5DaGVja2VkRWxlbWVudCA9IHVuQ2hlY2tlZEljb24gPyBSZWFjdC5jbG9uZUVsZW1lbnQodW5DaGVja2VkSWNvbiwge1xuICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoYm94U3R5bGVzLCB1bkNoZWNrZWRJY29uLnByb3BzLnN0eWxlKVxuICAgIH0pIDogUmVhY3QuY3JlYXRlRWxlbWVudChDaGVja2JveE91dGxpbmUsIHtcbiAgICAgIHN0eWxlOiBib3hTdHlsZXNcbiAgICB9KTtcblxuICAgIHZhciBjaGVja2JveEVsZW1lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBudWxsLFxuICAgICAgdW5DaGVja2VkRWxlbWVudCxcbiAgICAgIGNoZWNrZWRFbGVtZW50XG4gICAgKTtcblxuICAgIHZhciByaXBwbGVDb2xvciA9IHRoaXMuc3RhdGUuc3dpdGNoZWQgPyBjaGVja1N0eWxlcy5maWxsIDogYm94U3R5bGVzLmZpbGw7XG4gICAgdmFyIG1lcmdlZEljb25TdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmljb24sIGljb25TdHlsZSk7XG5cbiAgICB2YXIgbGFiZWxTdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmxhYmVsLCB0aGlzLnByb3BzLmxhYmVsU3R5bGUpO1xuXG4gICAgdmFyIGVuaGFuY2VkU3dpdGNoUHJvcHMgPSB7XG4gICAgICByZWY6ICdlbmhhbmNlZFN3aXRjaCcsXG4gICAgICBpbnB1dFR5cGU6ICdjaGVja2JveCcsXG4gICAgICBzd2l0Y2hlZDogdGhpcy5zdGF0ZS5zd2l0Y2hlZCxcbiAgICAgIHN3aXRjaEVsZW1lbnQ6IGNoZWNrYm94RWxlbWVudCxcbiAgICAgIHJpcHBsZUNvbG9yOiByaXBwbGVDb2xvcixcbiAgICAgIGljb25TdHlsZTogbWVyZ2VkSWNvblN0eWxlLFxuICAgICAgb25Td2l0Y2g6IHRoaXMuX2hhbmRsZUNoZWNrLFxuICAgICAgbGFiZWxTdHlsZTogbGFiZWxTdHlsZSxcbiAgICAgIG9uUGFyZW50U2hvdWxkVXBkYXRlOiB0aGlzLl9oYW5kbGVTdGF0ZUNoYW5nZSxcbiAgICAgIGRlZmF1bHRTd2l0Y2hlZDogdGhpcy5wcm9wcy5kZWZhdWx0Q2hlY2tlZCxcbiAgICAgIGxhYmVsUG9zaXRpb246IHRoaXMucHJvcHMubGFiZWxQb3NpdGlvbiA/IHRoaXMucHJvcHMubGFiZWxQb3NpdGlvbiA6ICdyaWdodCdcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW5oYW5jZWRTd2l0Y2gsIF9leHRlbmRzKHt9LCBvdGhlciwgZW5oYW5jZWRTd2l0Y2hQcm9wcykpO1xuICB9LFxuXG4gIGlzQ2hlY2tlZDogZnVuY3Rpb24gaXNDaGVja2VkKCkge1xuICAgIHJldHVybiB0aGlzLnJlZnMuZW5oYW5jZWRTd2l0Y2guaXNTd2l0Y2hlZCgpO1xuICB9LFxuXG4gIHNldENoZWNrZWQ6IGZ1bmN0aW9uIHNldENoZWNrZWQobmV3Q2hlY2tlZFZhbHVlKSB7XG4gICAgdGhpcy5yZWZzLmVuaGFuY2VkU3dpdGNoLnNldFN3aXRjaGVkKG5ld0NoZWNrZWRWYWx1ZSk7XG4gIH0sXG5cbiAgX2hhbmRsZUNoZWNrOiBmdW5jdGlvbiBfaGFuZGxlQ2hlY2soZSwgaXNJbnB1dENoZWNrZWQpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoZWNrKSB0aGlzLnByb3BzLm9uQ2hlY2soZSwgaXNJbnB1dENoZWNrZWQpO1xuICB9LFxuXG4gIF9oYW5kbGVTdGF0ZUNoYW5nZTogZnVuY3Rpb24gX2hhbmRsZVN0YXRlQ2hhbmdlKG5ld1N3aXRjaGVkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHN3aXRjaGVkOiBuZXdTd2l0Y2hlZCB9KTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDaGVja2JveDtcbn0se1wiLi9lbmhhbmNlZC1zd2l0Y2hcIjozMCxcIi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL3N0eWxlcy90cmFuc2l0aW9uc1wiOjc3LFwiLi9zdmctaWNvbnMvdG9nZ2xlL2NoZWNrLWJveFwiOjkwLFwiLi9zdmctaWNvbnMvdG9nZ2xlL2NoZWNrLWJveC1vdXRsaW5lLWJsYW5rXCI6ODksXCJyZWFjdFwiOjMxOX1dLDE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIEF1dG9QcmVmaXggPSByZXF1aXJlKCcuL3N0eWxlcy9hdXRvLXByZWZpeCcpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcblxudmFyIENpcmN1bGFyUHJvZ3Jlc3MgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2lyY3VsYXJQcm9ncmVzcycsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgbW9kZTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZSddKSxcbiAgICB2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBtaW46IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgbWF4OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIHNpemU6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgY29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaW5uZXJTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgX2dldFJlbGF0aXZlVmFsdWU6IGZ1bmN0aW9uIF9nZXRSZWxhdGl2ZVZhbHVlKCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgdmFyIG1pbiA9IHRoaXMucHJvcHMubWluO1xuICAgIHZhciBtYXggPSB0aGlzLnByb3BzLm1heDtcblxuICAgIHZhciBjbGFtcGVkVmFsdWUgPSBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4KTtcbiAgICB2YXIgcmFuZ2VWYWx1ZSA9IG1heCAtIG1pbjtcbiAgICB2YXIgcmVsVmFsdWUgPSBNYXRoLnJvdW5kKGNsYW1wZWRWYWx1ZSAvIHJhbmdlVmFsdWUgKiAxMDAwMCkgLyAxMDAwMDtcbiAgICByZXR1cm4gcmVsVmFsdWUgKiAxMDA7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHZhciB3cmFwcGVyID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLndyYXBwZXIpO1xuICAgIHZhciBwYXRoID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLnBhdGgpO1xuXG4gICAgdGhpcy5fc2NhbGVQYXRoKHBhdGgpO1xuICAgIHRoaXMuX3JvdGF0ZVdyYXBwZXIod3JhcHBlcik7XG4gIH0sXG5cbiAgX3NjYWxlUGF0aDogZnVuY3Rpb24gX3NjYWxlUGF0aChwYXRoLCBzdGVwKSB7XG4gICAgc3RlcCA9IHN0ZXAgfHwgMDtcbiAgICBzdGVwICU9IDM7XG5cbiAgICBzZXRUaW1lb3V0KHRoaXMuX3NjYWxlUGF0aC5iaW5kKHRoaXMsIHBhdGgsIHN0ZXAgKyAxKSwgc3RlcCA/IDc1MCA6IDI1MCk7XG5cbiAgICBpZiAoIXRoaXMuaXNNb3VudGVkKCkpIHJldHVybjtcbiAgICBpZiAodGhpcy5wcm9wcy5tb2RlICE9PSAnaW5kZXRlcm1pbmF0ZScpIHJldHVybjtcblxuICAgIGlmIChzdGVwID09PSAwKSB7XG4gICAgICBwYXRoLnN0eWxlLnN0cm9rZURhc2hhcnJheSA9ICcxLCAyMDAnO1xuICAgICAgcGF0aC5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gMDtcbiAgICAgIHBhdGguc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBtcyc7XG4gICAgfSBlbHNlIGlmIChzdGVwID09PSAxKSB7XG4gICAgICBwYXRoLnN0eWxlLnN0cm9rZURhc2hhcnJheSA9ICc4OSwgMjAwJztcbiAgICAgIHBhdGguc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IC0zNTtcbiAgICAgIHBhdGguc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzc1MG1zJztcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aC5zdHlsZS5zdHJva2VEYXNoYXJyYXkgPSAnODksMjAwJztcbiAgICAgIHBhdGguc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IC0xMjQ7XG4gICAgICBwYXRoLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICc4NTBtcyc7XG4gICAgfVxuICB9LFxuXG4gIF9yb3RhdGVXcmFwcGVyOiBmdW5jdGlvbiBfcm90YXRlV3JhcHBlcih3cmFwcGVyKSB7XG4gICAgc2V0VGltZW91dCh0aGlzLl9yb3RhdGVXcmFwcGVyLmJpbmQodGhpcywgd3JhcHBlciksIDEwMDUwKTtcblxuICAgIGlmICghdGhpcy5pc01vdW50ZWQoKSkgcmV0dXJuO1xuICAgIGlmICh0aGlzLnByb3BzLm1vZGUgIT09ICdpbmRldGVybWluYXRlJykgcmV0dXJuO1xuXG4gICAgQXV0b1ByZWZpeC5zZXQod3JhcHBlci5zdHlsZSwgJ3RyYW5zZm9ybScsIG51bGwpO1xuICAgIEF1dG9QcmVmaXguc2V0KHdyYXBwZXIuc3R5bGUsICd0cmFuc2Zvcm0nLCAncm90YXRlKDBkZWcpJyk7XG4gICAgd3JhcHBlci5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgQXV0b1ByZWZpeC5zZXQod3JhcHBlci5zdHlsZSwgJ3RyYW5zZm9ybScsICdyb3RhdGUoMTgwMGRlZyknKTtcbiAgICAgIHdyYXBwZXIuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzEwcyc7XG4gICAgICAvL3dyYXBwZXIuc3R5bGUud2Via2l0VHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gXCJsaW5lYXJcIjtcbiAgICAgIEF1dG9QcmVmaXguc2V0KHdyYXBwZXIuc3R5bGUsICd0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24nLCAnbGluZWFyJyk7XG4gICAgfSwgNTApO1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtb2RlOiAnaW5kZXRlcm1pbmF0ZScsXG4gICAgICB2YWx1ZTogMCxcbiAgICAgIG1pbjogMCxcbiAgICAgIG1heDogMTAwLFxuICAgICAgc2l6ZTogMVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcyh6b29tKSB7XG4gICAgem9vbSAqPSAxLjQ7XG4gICAgdmFyIHNpemUgPSAnNTBweCc7XG5cbiAgICB2YXIgbWFyZ2luID0gTWF0aC5yb3VuZCgoNTAgKiB6b29tIC0gNTApIC8gMik7XG5cbiAgICBpZiAobWFyZ2luIDwgMCkgbWFyZ2luID0gMDtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBtYXJnaW46IG1hcmdpbiArICdweCcsXG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICB3aWR0aDogc2l6ZSxcbiAgICAgICAgaGVpZ2h0OiBzaXplXG4gICAgICB9LFxuICAgICAgd3JhcHBlcjoge1xuICAgICAgICB3aWR0aDogc2l6ZSxcbiAgICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgICBtYXJnaW46ICc1cHgnLFxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCAnMjBzJywgbnVsbCwgJ2xpbmVhcicpXG4gICAgICB9LFxuICAgICAgc3ZnOiB7XG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKCcgKyB6b29tICsgJyknLFxuICAgICAgICB3aWR0aDogc2l6ZVxuICAgICAgfSxcbiAgICAgIHBhdGg6IHtcbiAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiAnODksMjAwJyxcbiAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogMCxcbiAgICAgICAgc3Ryb2tlOiB0aGlzLnByb3BzLmNvbG9yIHx8IHRoaXMuZ2V0VGhlbWUoKS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICBzdHJva2VMaW5lY2FwOiAncm91bmQnLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5jcmVhdGUoJ2FsbCcsICcxLjVzJywgbnVsbCwgJ2Vhc2UtaW4tb3V0JylcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQXV0b1ByZWZpeC5zZXQoc3R5bGVzLndyYXBwZXIsICd0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24nLCAnbGluZWFyJyk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09PSAnZGV0ZXJtaW5hdGUnKSB7XG4gICAgICB2YXIgcmVsVmFsID0gdGhpcy5fZ2V0UmVsYXRpdmVWYWx1ZSgpO1xuICAgICAgc3R5bGVzLnBhdGgudHJhbnNpdGlvbiA9IFRyYW5zaXRpb25zLmNyZWF0ZSgnYWxsJywgJzAuM3MnLCBudWxsLCAnbGluZWFyJyk7XG4gICAgICBzdHlsZXMucGF0aC5zdHJva2VEYXNoYXJyYXkgPSBNYXRoLnJvdW5kKHJlbFZhbCAqIDEuMjUpICsgJywyMDAnO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuICAgIHZhciBpbm5lclN0eWxlID0gX3Byb3BzLmlubmVyU3R5bGU7XG4gICAgdmFyIHNpemUgPSBfcHJvcHMuc2l6ZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnc3R5bGUnLCAnaW5uZXJTdHlsZScsICdzaXplJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKHNpemUgfHwgMSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCBzdHlsZSkgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyByZWY6ICd3cmFwcGVyJywgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLndyYXBwZXIsIGlubmVyU3R5bGUpIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3N2ZycsXG4gICAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuc3ZnKSB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2NpcmNsZScsIHsgcmVmOiAncGF0aCcsIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5wYXRoKSwgY3g6ICcyNScsIGN5OiAnMjUnLCByOiAnMjAnLCBmaWxsOiAnbm9uZScsIHN0cm9rZVdpZHRoOiAnMi41Jywgc3Ryb2tlTWl0ZXJsaW1pdDogJzEwJyB9KVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2lyY3VsYXJQcm9ncmVzcztcbn0se1wiLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4vc3R5bGVzL2F1dG8tcHJlZml4XCI6NzAsXCIuL3N0eWxlcy90cmFuc2l0aW9uc1wiOjc3LFwicmVhY3RcIjozMTl9XSwxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBCZWZvcmVBZnRlcldyYXBwZXIgPSByZXF1aXJlKCcuL2JlZm9yZS1hZnRlci13cmFwcGVyJyk7XG5cbnZhciBDbGVhckZpeCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdDbGVhckZpeCcsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydzdHlsZSddKTtcblxuICAgIHZhciBiZWZvcmUgPSBmdW5jdGlvbiBiZWZvcmUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiAnXFwnIFxcJycsXG4gICAgICAgIGRpc3BsYXk6ICd0YWJsZSdcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBhZnRlciA9IGJlZm9yZSgpO1xuICAgIGFmdGVyLmNsZWFyID0gJ2JvdGgnO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBCZWZvcmVBZnRlcldyYXBwZXIsXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgYmVmb3JlU3R5bGU6IGJlZm9yZSgpLFxuICAgICAgICBhZnRlclN0eWxlOiBhZnRlcixcbiAgICAgICAgc3R5bGU6IHRoaXMucHJvcHMuc3R5bGUgfSksXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xlYXJGaXg7XG59LHtcIi4vYmVmb3JlLWFmdGVyLXdyYXBwZXJcIjo1LFwicmVhY3RcIjozMTl9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgRGF0ZVRpbWUgPSByZXF1aXJlKCcuLi91dGlscy9kYXRlLXRpbWUnKTtcbnZhciBEYXlCdXR0b24gPSByZXF1aXJlKCcuL2RheS1idXR0b24nKTtcbnZhciBDbGVhckZpeCA9IHJlcXVpcmUoJy4uL2NsZWFyZml4Jyk7XG5cbnZhciBDYWxlbmRhck1vbnRoID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0NhbGVuZGFyTW9udGgnLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGRpc3BsYXlEYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgb25EYXlUb3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2VsZWN0ZWREYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgbWluRGF0ZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtYXhEYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIHNob3VsZERpc2FibGVEYXRlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBhdXRvT2s6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIGxpbmVIZWlnaHQ6ICczMnB4JyxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICBwYWRkaW5nOiAnOHB4IDE0cHggMCAxNHB4J1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzIH0sXG4gICAgICB0aGlzLl9nZXRXZWVrRWxlbWVudHMoKVxuICAgICk7XG4gIH0sXG5cbiAgaXNTZWxlY3RlZERhdGVEaXNhYmxlZDogZnVuY3Rpb24gaXNTZWxlY3RlZERhdGVEaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWREYXRlRGlzYWJsZWQ7XG4gIH0sXG5cbiAgX2dldFdlZWtFbGVtZW50czogZnVuY3Rpb24gX2dldFdlZWtFbGVtZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHdlZWtBcnJheSA9IERhdGVUaW1lLmdldFdlZWtBcnJheSh0aGlzLnByb3BzLmRpc3BsYXlEYXRlKTtcblxuICAgIHJldHVybiB3ZWVrQXJyYXkubWFwKGZ1bmN0aW9uICh3ZWVrLCBpKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgQ2xlYXJGaXgsXG4gICAgICAgIHsga2V5OiBpIH0sXG4gICAgICAgIF90aGlzLl9nZXREYXlFbGVtZW50cyh3ZWVrLCBpKVxuICAgICAgKTtcbiAgICB9LCB0aGlzKTtcbiAgfSxcblxuICBfZ2V0RGF5RWxlbWVudHM6IGZ1bmN0aW9uIF9nZXREYXlFbGVtZW50cyh3ZWVrLCBpKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICByZXR1cm4gd2Vlay5tYXAoZnVuY3Rpb24gKGRheSwgaikge1xuICAgICAgdmFyIGlzU2FtZURhdGUgPSBEYXRlVGltZS5pc0VxdWFsRGF0ZShfdGhpczIucHJvcHMuc2VsZWN0ZWREYXRlLCBkYXkpO1xuICAgICAgdmFyIGRpc2FibGVkID0gX3RoaXMyLl9zaG91bGREaXNhYmxlRGF0ZShkYXkpO1xuICAgICAgdmFyIHNlbGVjdGVkID0gIWRpc2FibGVkICYmIGlzU2FtZURhdGU7XG5cbiAgICAgIGlmIChpc1NhbWVEYXRlKSB7XG4gICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgIF90aGlzMi5fc2VsZWN0ZWREYXRlRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMi5fc2VsZWN0ZWREYXRlRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEYXlCdXR0b24sIHtcbiAgICAgICAga2V5OiAnZGInICsgaSArIGosXG4gICAgICAgIGRhdGU6IGRheSxcbiAgICAgICAgb25Ub3VjaFRhcDogX3RoaXMyLl9oYW5kbGVEYXlUb3VjaFRhcCxcbiAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLFxuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQgfSk7XG4gICAgfSwgdGhpcyk7XG4gIH0sXG5cbiAgX2hhbmRsZURheVRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlRGF5VG91Y2hUYXAoZSwgZGF0ZSkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uRGF5VG91Y2hUYXApIHRoaXMucHJvcHMub25EYXlUb3VjaFRhcChlLCBkYXRlKTtcbiAgfSxcblxuICBfc2hvdWxkRGlzYWJsZURhdGU6IGZ1bmN0aW9uIF9zaG91bGREaXNhYmxlRGF0ZShkYXkpIHtcbiAgICBpZiAoZGF5ID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGRpc2FibGVkID0gIURhdGVUaW1lLmlzQmV0d2VlbkRhdGVzKGRheSwgdGhpcy5wcm9wcy5taW5EYXRlLCB0aGlzLnByb3BzLm1heERhdGUpO1xuICAgIGlmICghZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5zaG91bGREaXNhYmxlRGF0ZSkgZGlzYWJsZWQgPSB0aGlzLnByb3BzLnNob3VsZERpc2FibGVEYXRlKGRheSk7XG5cbiAgICByZXR1cm4gZGlzYWJsZWQ7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FsZW5kYXJNb250aDtcbn0se1wiLi4vY2xlYXJmaXhcIjoxNixcIi4uL3V0aWxzL2RhdGUtdGltZVwiOjEyNyxcIi4vZGF5LWJ1dHRvblwiOjI0LFwicmVhY3RcIjozMTl9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgRGF0ZVRpbWUgPSByZXF1aXJlKCcuLi91dGlscy9kYXRlLXRpbWUnKTtcbnZhciBJY29uQnV0dG9uID0gcmVxdWlyZSgnLi4vaWNvbi1idXR0b24nKTtcbnZhciBUb29sYmFyID0gcmVxdWlyZSgnLi4vdG9vbGJhci90b29sYmFyJyk7XG52YXIgVG9vbGJhckdyb3VwID0gcmVxdWlyZSgnLi4vdG9vbGJhci90b29sYmFyLWdyb3VwJyk7XG52YXIgTmF2aWdhdGlvbkNoZXZyb25MZWZ0ID0gcmVxdWlyZSgnLi4vc3ZnLWljb25zL25hdmlnYXRpb24vY2hldnJvbi1sZWZ0Jyk7XG52YXIgTmF2aWdhdGlvbkNoZXZyb25MZWZ0RG91YmxlID0gcmVxdWlyZSgnLi4vc3ZnLWljb25zL25hdmlnYXRpb24tY2hldnJvbi1sZWZ0LWRvdWJsZScpO1xudmFyIE5hdmlnYXRpb25DaGV2cm9uUmlnaHQgPSByZXF1aXJlKCcuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9jaGV2cm9uLXJpZ2h0Jyk7XG52YXIgTmF2aWdhdGlvbkNoZXZyb25SaWdodERvdWJsZSA9IHJlcXVpcmUoJy4uL3N2Zy1pY29ucy9uYXZpZ2F0aW9uLWNoZXZyb24tcmlnaHQtZG91YmxlJyk7XG52YXIgU2xpZGVJblRyYW5zaXRpb25Hcm91cCA9IHJlcXVpcmUoJy4uL3RyYW5zaXRpb24tZ3JvdXBzL3NsaWRlLWluJyk7XG5cbnZhciBDYWxlbmRhclRvb2xiYXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2FsZW5kYXJUb29sYmFyJyxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBkaXNwbGF5RGF0ZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIG9uTW9udGhDaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uWWVhckNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgcHJldlllYXI6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIG5leHRZZWFyOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBwcmV2TW9udGg6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIG5leHRNb250aDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgaGlkZVllYXJDaGFuZ2VCdXR0b25zOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmV2WWVhcjogdHJ1ZSxcbiAgICAgIG5leHRZZWFyOiB0cnVlLFxuICAgICAgcHJldk1vbnRoOiB0cnVlLFxuICAgICAgbmV4dE1vbnRoOiB0cnVlLFxuICAgICAgaGlkZVllYXJDaGFuZ2VCdXR0b25zOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zaXRpb25EaXJlY3Rpb246ICd1cCdcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIGRpcmVjdGlvbiA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChuZXh0UHJvcHMuZGlzcGxheURhdGUgIT09IHRoaXMucHJvcHMuZGlzcGxheURhdGUpIHtcbiAgICAgIGRpcmVjdGlvbiA9IG5leHRQcm9wcy5kaXNwbGF5RGF0ZSA+IHRoaXMucHJvcHMuZGlzcGxheURhdGUgPyAndXAnIDogJ2Rvd24nO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHRyYW5zaXRpb25EaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIF9zdHlsZXM6IGZ1bmN0aW9uIF9zdHlsZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2luaGVyaXQnXG4gICAgICB9LFxuXG4gICAgICB0aXRsZToge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnMTdweCcsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcxNHB4JyxcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMTRweCcsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICc1MDAnLFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgICB9XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgbW9udGggPSBEYXRlVGltZS5nZXRGdWxsTW9udGgodGhpcy5wcm9wcy5kaXNwbGF5RGF0ZSk7XG4gICAgdmFyIHllYXIgPSB0aGlzLnByb3BzLmRpc3BsYXlEYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgdmFyIHByZXZZZWFyQ2hhbmdlQnV0dG9uID0gdGhpcy5fZ2V0UHJldlllYXJDaGFuZ2VCdXR0b24oKTtcbiAgICB2YXIgbmV4dFllYXJDaGFuZ2VCdXR0b24gPSB0aGlzLl9nZXROZXh0WWVhckNoYW5nZUJ1dHRvbigpO1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLl9zdHlsZXMoKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVG9vbGJhcixcbiAgICAgIHsgY2xhc3NOYW1lOiAnbXVpLWRhdGUtcGlja2VyLWNhbGVuZGFyLXRvb2xiYXInLCBzdHlsZTogc3R5bGVzLnJvb3QsIG5vR3V0dGVyOiB0cnVlIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBTbGlkZUluVHJhbnNpdGlvbkdyb3VwLFxuICAgICAgICB7XG4gICAgICAgICAgc3R5bGU6IHN0eWxlcy50aXRsZSxcbiAgICAgICAgICBkaXJlY3Rpb246IHRoaXMuc3RhdGUudHJhbnNpdGlvbkRpcmVjdGlvbiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsga2V5OiBtb250aCArICdfJyArIHllYXIgfSxcbiAgICAgICAgICBtb250aCxcbiAgICAgICAgICAnICcsXG4gICAgICAgICAgeWVhclxuICAgICAgICApXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgVG9vbGJhckdyb3VwLFxuICAgICAgICB7IGtleTogMCwgZmxvYXQ6ICdsZWZ0JyB9LFxuICAgICAgICBwcmV2WWVhckNoYW5nZUJ1dHRvbixcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBJY29uQnV0dG9uLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuYnV0dG9uLFxuICAgICAgICAgICAgZGlzYWJsZWQ6ICF0aGlzLnByb3BzLnByZXZNb250aCxcbiAgICAgICAgICAgIG9uVG91Y2hUYXA6IHRoaXMuX3ByZXZNb250aFRvdWNoVGFwIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ2hldnJvbkxlZnQsIG51bGwpXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBUb29sYmFyR3JvdXAsXG4gICAgICAgIHsga2V5OiAxLCBmbG9hdDogJ3JpZ2h0JyB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEljb25CdXR0b24sXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5idXR0b24sXG4gICAgICAgICAgICBkaXNhYmxlZDogIXRoaXMucHJvcHMubmV4dE1vbnRoLFxuICAgICAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5fbmV4dE1vbnRoVG91Y2hUYXAgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE5hdmlnYXRpb25DaGV2cm9uUmlnaHQsIG51bGwpXG4gICAgICAgICksXG4gICAgICAgIG5leHRZZWFyQ2hhbmdlQnV0dG9uXG4gICAgICApXG4gICAgKTtcbiAgfSxcblxuICBfZ2V0UHJldlllYXJDaGFuZ2VCdXR0b246IGZ1bmN0aW9uIF9nZXRQcmV2WWVhckNoYW5nZUJ1dHRvbigpIHtcbiAgICB2YXIgc3R5bGUgPSB7XG4gICAgICBkaXNwbGF5OiB0aGlzLnByb3BzLmhpZGVZZWFyQ2hhbmdlQnV0dG9ucyA/ICdub25lJyA6ICcnXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgSWNvbkJ1dHRvbixcbiAgICAgIHtcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBkaXNhYmxlZDogIXRoaXMucHJvcHMucHJldlllYXIsXG4gICAgICAgIG9uVG91Y2hUYXA6IHRoaXMuX3ByZXZZZWFyVG91Y2hUYXAgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2aWdhdGlvbkNoZXZyb25MZWZ0RG91YmxlLCBudWxsKVxuICAgICk7XG4gIH0sXG5cbiAgX2dldE5leHRZZWFyQ2hhbmdlQnV0dG9uOiBmdW5jdGlvbiBfZ2V0TmV4dFllYXJDaGFuZ2VCdXR0b24oKSB7XG4gICAgdmFyIHN0eWxlID0ge1xuICAgICAgZGlzcGxheTogdGhpcy5wcm9wcy5oaWRlWWVhckNoYW5nZUJ1dHRvbnMgPyAnbm9uZScgOiAnJ1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIEljb25CdXR0b24sXG4gICAgICB7XG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgZGlzYWJsZWQ6ICF0aGlzLnByb3BzLm5leHRZZWFyLFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9uZXh0WWVhclRvdWNoVGFwIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE5hdmlnYXRpb25DaGV2cm9uUmlnaHREb3VibGUsIG51bGwpXG4gICAgKTtcbiAgfSxcblxuICBfcHJldlllYXJUb3VjaFRhcDogZnVuY3Rpb24gX3ByZXZZZWFyVG91Y2hUYXAoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25ZZWFyQ2hhbmdlICYmIHRoaXMucHJvcHMucHJldlllYXIpIHRoaXMucHJvcHMub25ZZWFyQ2hhbmdlKC0xKTtcbiAgfSxcblxuICBfbmV4dFllYXJUb3VjaFRhcDogZnVuY3Rpb24gX25leHRZZWFyVG91Y2hUYXAoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25ZZWFyQ2hhbmdlICYmIHRoaXMucHJvcHMubmV4dFllYXIpIHRoaXMucHJvcHMub25ZZWFyQ2hhbmdlKDEpO1xuICB9LFxuXG4gIF9wcmV2TW9udGhUb3VjaFRhcDogZnVuY3Rpb24gX3ByZXZNb250aFRvdWNoVGFwKCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW9udGhDaGFuZ2UgJiYgdGhpcy5wcm9wcy5wcmV2TW9udGgpIHRoaXMucHJvcHMub25Nb250aENoYW5nZSgtMSk7XG4gIH0sXG5cbiAgX25leHRNb250aFRvdWNoVGFwOiBmdW5jdGlvbiBfbmV4dE1vbnRoVG91Y2hUYXAoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb250aENoYW5nZSAmJiB0aGlzLnByb3BzLm5leHRNb250aCkgdGhpcy5wcm9wcy5vbk1vbnRoQ2hhbmdlKDEpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbGVuZGFyVG9vbGJhcjtcbn0se1wiLi4vaWNvbi1idXR0b25cIjozNSxcIi4uL3N2Zy1pY29ucy9uYXZpZ2F0aW9uLWNoZXZyb24tbGVmdC1kb3VibGVcIjo4MixcIi4uL3N2Zy1pY29ucy9uYXZpZ2F0aW9uLWNoZXZyb24tcmlnaHQtZG91YmxlXCI6ODMsXCIuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9jaGV2cm9uLWxlZnRcIjo4NixcIi4uL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2NoZXZyb24tcmlnaHRcIjo4NyxcIi4uL3Rvb2xiYXIvdG9vbGJhclwiOjExOCxcIi4uL3Rvb2xiYXIvdG9vbGJhci1ncm91cFwiOjExNSxcIi4uL3RyYW5zaXRpb24tZ3JvdXBzL3NsaWRlLWluXCI6MTIzLFwiLi4vdXRpbHMvZGF0ZS10aW1lXCI6MTI3LFwicmVhY3RcIjozMTl9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIENvbG9ycyA9IHJlcXVpcmUoJy4uL3N0eWxlcy9jb2xvcnMnKTtcbnZhciBEYXRlVGltZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RhdGUtdGltZScpO1xudmFyIFllYXJCdXR0b24gPSByZXF1aXJlKCcuL3llYXItYnV0dG9uJyk7XG5cbnZhciBDYWxlbmRhclllYXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2FsZW5kYXJZZWFyJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBkaXNwbGF5RGF0ZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIG9uWWVhclRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3RlZERhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBtaW5EYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG1heERhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fc2Nyb2xsVG9TZWxlY3RlZFllYXIoKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLl9zY3JvbGxUb1NlbGVjdGVkWWVhcigpO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciB5ZWFycyA9IHRoaXMuX2dldFllYXJzKCk7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgaGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICBsaW5lSGVpZ2h0OiAnMzZweCcsXG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgcGFkZGluZzogJzhweCAxNHB4IDAgMTRweCcsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gICAgICBvdmVyZmxvd1k6ICdzY3JvbGwnXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMgfSxcbiAgICAgIHllYXJzXG4gICAgKTtcbiAgfSxcblxuICBfZ2V0WWVhcnM6IGZ1bmN0aW9uIF9nZXRZZWFycygpIHtcbiAgICB2YXIgbWluWWVhciA9IHRoaXMucHJvcHMubWluRGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIHZhciBtYXhZZWFyID0gdGhpcy5wcm9wcy5tYXhEYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgICB2YXIgeWVhcnMgPSBbXTtcbiAgICB2YXIgZGF0ZUNoZWNrID0gRGF0ZVRpbWUuY2xvbmUodGhpcy5wcm9wcy5zZWxlY3RlZERhdGUpO1xuICAgIGZvciAodmFyIHllYXIgPSBtaW5ZZWFyOyB5ZWFyIDw9IG1heFllYXI7IHllYXIrKykge1xuICAgICAgZGF0ZUNoZWNrLnNldEZ1bGxZZWFyKHllYXIpO1xuICAgICAgaWYgKCFEYXRlVGltZS5pc0JldHdlZW5EYXRlcyhkYXRlQ2hlY2ssIHRoaXMucHJvcHMubWluRGF0ZSwgdGhpcy5wcm9wcy5tYXhEYXRlKSkgY29udGludWU7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLnByb3BzLnNlbGVjdGVkRGF0ZS5nZXRGdWxsWWVhcigpID09PSB5ZWFyO1xuICAgICAgdmFyIHNlbGVjdGVkUHJvcHMgPSB7fTtcbiAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICBzZWxlY3RlZFByb3BzID0geyByZWY6ICdzZWxlY3RlZFllYXJCdXR0b24nIH07XG4gICAgICB9XG5cbiAgICAgIHZhciB5ZWFyQnV0dG9uID0gUmVhY3QuY3JlYXRlRWxlbWVudChZZWFyQnV0dG9uLCBfZXh0ZW5kcyh7XG4gICAgICAgIGtleTogJ3liJyArIHllYXIsXG4gICAgICAgIHllYXI6IHllYXIsXG4gICAgICAgIG9uVG91Y2hUYXA6IHRoaXMuX2hhbmRsZVllYXJUb3VjaFRhcCxcbiAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkXG4gICAgICB9LCBzZWxlY3RlZFByb3BzKSk7XG5cbiAgICAgIHllYXJzLnB1c2goeWVhckJ1dHRvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHllYXJzO1xuICB9LFxuXG4gIF9zY3JvbGxUb1NlbGVjdGVkWWVhcjogZnVuY3Rpb24gX3Njcm9sbFRvU2VsZWN0ZWRZZWFyKCkge1xuICAgIGlmICh0aGlzLnJlZnMuc2VsZWN0ZWRZZWFyQnV0dG9uID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIHZhciBjb250YWluZXIgPSB0aGlzLmdldERPTU5vZGUoKTtcbiAgICB2YXIgeWVhckJ1dHRvbk5vZGUgPSB0aGlzLnJlZnMuc2VsZWN0ZWRZZWFyQnV0dG9uLmdldERPTU5vZGUoKTtcblxuICAgIHZhciBjb250YWluZXJIZWlnaHQgPSBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xuICAgIHZhciB5ZWFyQnV0dG9uTm9kZUhlaWdodCA9IHllYXJCdXR0b25Ob2RlLmNsaWVudEhlaWdodCB8fCAzMjtcblxuICAgIHZhciBzY3JvbGxZT2Zmc2V0ID0geWVhckJ1dHRvbk5vZGUub2Zmc2V0VG9wICsgeWVhckJ1dHRvbk5vZGVIZWlnaHQgLyAyIC0gY29udGFpbmVySGVpZ2h0IC8gMjtcbiAgICBjb250YWluZXIuc2Nyb2xsVG9wID0gc2Nyb2xsWU9mZnNldDtcbiAgfSxcblxuICBfaGFuZGxlWWVhclRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlWWVhclRvdWNoVGFwKGUsIHllYXIpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblllYXJUb3VjaFRhcCkgdGhpcy5wcm9wcy5vblllYXJUb3VjaFRhcChlLCB5ZWFyKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYWxlbmRhclllYXI7XG59LHtcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi4vc3R5bGVzL2NvbG9yc1wiOjcxLFwiLi4vdXRpbHMvZGF0ZS10aW1lXCI6MTI3LFwiLi95ZWFyLWJ1dHRvblwiOjI1LFwicmVhY3RcIjozMTl9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFdpbmRvd0xpc3RlbmFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvd2luZG93LWxpc3RlbmFibGUnKTtcbnZhciBEYXRlVGltZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RhdGUtdGltZScpO1xudmFyIEtleUNvZGUgPSByZXF1aXJlKCcuLi91dGlscy9rZXktY29kZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgQ2FsZW5kYXJNb250aCA9IHJlcXVpcmUoJy4vY2FsZW5kYXItbW9udGgnKTtcbnZhciBDYWxlbmRhclllYXIgPSByZXF1aXJlKCcuL2NhbGVuZGFyLXllYXInKTtcbnZhciBDYWxlbmRhclRvb2xiYXIgPSByZXF1aXJlKCcuL2NhbGVuZGFyLXRvb2xiYXInKTtcbnZhciBEYXRlRGlzcGxheSA9IHJlcXVpcmUoJy4vZGF0ZS1kaXNwbGF5Jyk7XG52YXIgU2xpZGVJblRyYW5zaXRpb25Hcm91cCA9IHJlcXVpcmUoJy4uL3RyYW5zaXRpb24tZ3JvdXBzL3NsaWRlLWluJyk7XG52YXIgQ2xlYXJGaXggPSByZXF1aXJlKCcuLi9jbGVhcmZpeCcpO1xuXG52YXIgQ2FsZW5kYXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2FsZW5kYXInLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGUsIFdpbmRvd0xpc3RlbmFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGluaXRpYWxEYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGlzQWN0aXZlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBtaW5EYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG1heERhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgc2hvdWxkRGlzYWJsZURhdGU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIGhpZGVUb29sYmFyWWVhckNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvdWxkU2hvd01vbnRoRGF5UGlja2VyRmlyc3Q6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHNob3VsZFNob3dZZWFyUGlja2VyRmlyc3Q6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHNob3dZZWFyU2VsZWN0b3I6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIG9uRGF5VG91Y2hUYXA6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gIH0sXG5cbiAgd2luZG93TGlzdGVuZXJzOiB7XG4gICAgJ2tleWRvd24nOiAnX2hhbmRsZVdpbmRvd0tleURvd24nXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRpYWxEYXRlOiBuZXcgRGF0ZSgpLFxuICAgICAgbWluRGF0ZTogRGF0ZVRpbWUuYWRkWWVhcnMobmV3IERhdGUoKSwgLTEwMCksXG4gICAgICBtYXhEYXRlOiBEYXRlVGltZS5hZGRZZWFycyhuZXcgRGF0ZSgpLCAxMDApLFxuICAgICAgaGlkZVRvb2xiYXJZZWFyQ2hhbmdlOiBmYWxzZSxcbiAgICAgIHNob3VsZFNob3dNb250aERheVBpY2tlckZpcnN0OiB0cnVlLFxuICAgICAgc2hvdWxkU2hvd1llYXJQaWNrZXJGaXJzdDogZmFsc2UsXG4gICAgICBzaG93WWVhclNlbGVjdG9yOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BsYXlEYXRlOiBEYXRlVGltZS5nZXRGaXJzdERheU9mTW9udGgodGhpcy5wcm9wcy5pbml0aWFsRGF0ZSksXG4gICAgICBzZWxlY3RlZERhdGU6IHRoaXMucHJvcHMuaW5pdGlhbERhdGUsXG4gICAgICB0cmFuc2l0aW9uRGlyZWN0aW9uOiAnbGVmdCcsXG4gICAgICBkaXNwbGF5TW9udGhEYXk6IHRoaXMucHJvcHMuc2hvdWxkU2hvd01vbnRoRGF5UGlja2VyRmlyc3QgfHwgdGhpcy5wcm9wcy5zaG91bGRTaG93WWVhclBpY2tlckZpcnN0IHx8IHRydWUsXG4gICAgICB0cmFuc2l0aW9uRW50ZXI6IHRydWVcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5pbml0aWFsRGF0ZSAhPT0gdGhpcy5wcm9wcy5pbml0aWFsRGF0ZSkge1xuICAgICAgdmFyIGQgPSBuZXh0UHJvcHMuaW5pdGlhbERhdGUgfHwgbmV3IERhdGUoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkaXNwbGF5RGF0ZTogRGF0ZVRpbWUuZ2V0Rmlyc3REYXlPZk1vbnRoKGQpLFxuICAgICAgICBzZWxlY3RlZERhdGU6IGRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChuZXh0UHJvcHMuc2hvdWxkU2hvd01vbnRoRGF5UGlja2VyRmlyc3QpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBkaXNwbGF5TW9udGhEYXk6IG5leHRQcm9wcy5zaG91bGRTaG93TW9udGhEYXlQaWNrZXJGaXJzdCB9KTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHllYXJDb3VudCA9IERhdGVUaW1lLnllYXJEaWZmKHRoaXMucHJvcHMubWF4RGF0ZSwgdGhpcy5wcm9wcy5taW5EYXRlKSArIDE7XG4gICAgdmFyIHdlZWtDb3VudCA9IERhdGVUaW1lLmdldFdlZWtBcnJheSh0aGlzLnN0YXRlLmRpc3BsYXlEYXRlKS5sZW5ndGg7XG4gICAgdmFyIHRvb2xiYXJJbnRlcmFjdGlvbnMgPSB0aGlzLl9nZXRUb29sYmFySW50ZXJhY3Rpb25zKCk7XG4gICAgdmFyIGhpZGVZZWFyQ2hhbmdlQnV0dG9ucyA9IHRoaXMucHJvcHMuaGlkZVRvb2xiYXJZZWFyQ2hhbmdlIHx8ICF0aGlzLnByb3BzLnNob3dZZWFyU2VsZWN0b3I7XG4gICAgdmFyIGlzTXVsdGlZZWFyUmFuZ2UgPSB5ZWFyQ291bnQgPiAyOyAvLyBXYW50IGEgeWVhciByYW5nZSBncmVhdGVyIHRoYW4gMS4gRXguIFsyMDE0LDIwMTZdIGhhcyBhIGNvdW50IG9mIDNcbiAgICB2YXIgaXNMYW5kc2NhcGUgPSB0aGlzLnByb3BzLm1vZGUgPT09ICdsYW5kc2NhcGUnO1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGZvbnRTaXplOiAxMlxuICAgICAgfSxcbiAgICAgIGNhbGVuZGFyQ29udGFpbmVyOiB7XG4gICAgICAgIHdpZHRoOiBpc0xhbmRzY2FwZSA/IDI4MCA6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiB3ZWVrQ291bnQgPT09IDUgPyAyNjggOiB3ZWVrQ291bnQgPT09IDYgPyAzMDggOiAyMjgsXG4gICAgICAgIGZsb2F0OiBpc0xhbmRzY2FwZSA/ICdyaWdodCcgOiAnbm9uZScsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoJzE1MG1zJywgJ2hlaWdodCcpLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgIH0sXG4gICAgICB5ZWFyQ29udGFpbmVyOiB7XG4gICAgICAgIHdpZHRoOiAyODAsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgaGVpZ2h0OiB5ZWFyQ291bnQgPCA2ID8geWVhckNvdW50ICogNTYgKyAxMCA6IHdlZWtDb3VudCA9PT0gNSA/IDI2OCA6IHdlZWtDb3VudCA9PT0gNiA/IDMwOCA6IDIyOCxcbiAgICAgICAgZmxvYXQ6IGlzTGFuZHNjYXBlID8gJ3JpZ2h0JyA6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIGRhdGVEaXNwbGF5OiB7XG4gICAgICAgIHdpZHRoOiBpc0xhbmRzY2FwZSA/IDI4MCA6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGZsb2F0OiBpc0xhbmRzY2FwZSA/ICdsZWZ0JyA6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIHdlZWtUaXRsZToge1xuICAgICAgICBwYWRkaW5nOiAnMCAxNHB4JyxcbiAgICAgICAgbGluZUhlaWdodDogJzEycHgnLFxuICAgICAgICBvcGFjaXR5OiAnMC41JyxcbiAgICAgICAgaGVpZ2h0OiAxMixcbiAgICAgICAgZm9udFdlaWdodDogJzUwMCcsXG4gICAgICAgIG1hcmdpbjogMFxuICAgICAgfSxcbiAgICAgIHdlZWtUaXRsZURheToge1xuICAgICAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgd2lkdGg6IDMyLFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICBtYXJnaW46ICcwIDJweCdcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuZGlzcGxheU1vbnRoRGF5IHx8ICF0aGlzLnByb3BzLnNob3dZZWFyU2VsZWN0b3IpIHtcbiAgICAgIHN0eWxlcy55ZWFyQ29udGFpbmVyLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlcy5jYWxlbmRhckNvbnRhaW5lci5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQ2xlYXJGaXgsXG4gICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290KSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChEYXRlRGlzcGxheSwge1xuICAgICAgICBzdHlsZTogc3R5bGVzLmRhdGVEaXNwbGF5LFxuICAgICAgICBzZWxlY3RlZERhdGU6IHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlLFxuICAgICAgICBoYW5kbGVNb250aERheUNsaWNrOiB0aGlzLl9oYW5kbGVNb250aERheUNsaWNrLFxuICAgICAgICBoYW5kbGVZZWFyQ2xpY2s6IHRoaXMuX2hhbmRsZVllYXJDbGljayxcbiAgICAgICAgeWVhclNlbGVjdGlvbkF2YWlsYWJsZTogdGhpcy5wcm9wcy5zaG93WWVhclNlbGVjdG9yICYmIGlzTXVsdGlZZWFyUmFuZ2UsXG4gICAgICAgIG1vbnRoRGF5U2VsZWN0ZWQ6IHRoaXMuc3RhdGUuZGlzcGxheU1vbnRoRGF5LFxuICAgICAgICBtb2RlOiB0aGlzLnByb3BzLm1vZGUsXG4gICAgICAgIHdlZWtDb3VudDogd2Vla0NvdW50IH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5jYWxlbmRhckNvbnRhaW5lciB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENhbGVuZGFyVG9vbGJhciwge1xuICAgICAgICAgIGRpc3BsYXlEYXRlOiB0aGlzLnN0YXRlLmRpc3BsYXlEYXRlLFxuICAgICAgICAgIG9uTW9udGhDaGFuZ2U6IHRoaXMuX2hhbmRsZU1vbnRoQ2hhbmdlLFxuICAgICAgICAgIG9uWWVhckNoYW5nZTogdGhpcy5faGFuZGxlWWVhckNoYW5nZSxcbiAgICAgICAgICBwcmV2TW9udGg6IHRvb2xiYXJJbnRlcmFjdGlvbnMucHJldk1vbnRoLFxuICAgICAgICAgIG5leHRNb250aDogdG9vbGJhckludGVyYWN0aW9ucy5uZXh0TW9udGgsXG4gICAgICAgICAgcHJldlllYXI6IHRvb2xiYXJJbnRlcmFjdGlvbnMucHJldlllYXIsXG4gICAgICAgICAgbmV4dFllYXI6IHRvb2xiYXJJbnRlcmFjdGlvbnMubmV4dFllYXIsXG4gICAgICAgICAgaGlkZVllYXJDaGFuZ2VCdXR0b25zOiBoaWRlWWVhckNoYW5nZUJ1dHRvbnMgfSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgQ2xlYXJGaXgsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZWxlbWVudFR5cGU6ICd1bCcsXG4gICAgICAgICAgICBzdHlsZTogc3R5bGVzLndlZWtUaXRsZSB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLndlZWtUaXRsZURheSB9LFxuICAgICAgICAgICAgJ1MnXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy53ZWVrVGl0bGVEYXkgfSxcbiAgICAgICAgICAgICdNJ1xuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMud2Vla1RpdGxlRGF5IH0sXG4gICAgICAgICAgICAnVCdcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLndlZWtUaXRsZURheSB9LFxuICAgICAgICAgICAgJ1cnXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy53ZWVrVGl0bGVEYXkgfSxcbiAgICAgICAgICAgICdUJ1xuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMud2Vla1RpdGxlRGF5IH0sXG4gICAgICAgICAgICAnRidcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLndlZWtUaXRsZURheSB9LFxuICAgICAgICAgICAgJ1MnXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFNsaWRlSW5UcmFuc2l0aW9uR3JvdXAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlyZWN0aW9uOiB0aGlzLnN0YXRlLnRyYW5zaXRpb25EaXJlY3Rpb24gfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENhbGVuZGFyTW9udGgsIHtcbiAgICAgICAgICAgIGtleTogdGhpcy5zdGF0ZS5kaXNwbGF5RGF0ZS50b0RhdGVTdHJpbmcoKSxcbiAgICAgICAgICAgIHJlZjogJ2NhbGVuZGFyJyxcbiAgICAgICAgICAgIGRpc3BsYXlEYXRlOiB0aGlzLnN0YXRlLmRpc3BsYXlEYXRlLFxuICAgICAgICAgICAgb25EYXlUb3VjaFRhcDogdGhpcy5faGFuZGxlRGF5VG91Y2hUYXAsXG4gICAgICAgICAgICBzZWxlY3RlZERhdGU6IHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlLFxuICAgICAgICAgICAgbWluRGF0ZTogdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICAgICAgbWF4RGF0ZTogdGhpcy5wcm9wcy5tYXhEYXRlLFxuICAgICAgICAgICAgc2hvdWxkRGlzYWJsZURhdGU6IHRoaXMucHJvcHMuc2hvdWxkRGlzYWJsZURhdGUgfSlcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMueWVhckNvbnRhaW5lciB9LFxuICAgICAgICB0aGlzLl95ZWFyU2VsZWN0b3IoKVxuICAgICAgKVxuICAgICk7XG4gIH0sXG5cbiAgX3llYXJTZWxlY3RvcjogZnVuY3Rpb24gX3llYXJTZWxlY3RvcigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93WWVhclNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDYWxlbmRhclllYXIsIHtcbiAgICAgICAga2V5OiAneWVhcnMnLFxuICAgICAgICBkaXNwbGF5RGF0ZTogdGhpcy5zdGF0ZS5kaXNwbGF5RGF0ZSxcbiAgICAgICAgb25ZZWFyVG91Y2hUYXA6IHRoaXMuX2hhbmRsZVllYXJUb3VjaFRhcCxcbiAgICAgICAgc2VsZWN0ZWREYXRlOiB0aGlzLnN0YXRlLnNlbGVjdGVkRGF0ZSxcbiAgICAgICAgbWluRGF0ZTogdGhpcy5wcm9wcy5taW5EYXRlLFxuICAgICAgICBtYXhEYXRlOiB0aGlzLnByb3BzLm1heERhdGUgfSk7XG4gICAgfVxuICB9LFxuXG4gIGdldFNlbGVjdGVkRGF0ZTogZnVuY3Rpb24gZ2V0U2VsZWN0ZWREYXRlKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnNlbGVjdGVkRGF0ZTtcbiAgfSxcblxuICBpc1NlbGVjdGVkRGF0ZURpc2FibGVkOiBmdW5jdGlvbiBpc1NlbGVjdGVkRGF0ZURpc2FibGVkKCkge1xuICAgIHJldHVybiB0aGlzLnJlZnMuY2FsZW5kYXIuaXNTZWxlY3RlZERhdGVEaXNhYmxlZCgpO1xuICB9LFxuXG4gIF9hZGRTZWxlY3RlZERheXM6IGZ1bmN0aW9uIF9hZGRTZWxlY3RlZERheXMoZGF5cykge1xuICAgIHRoaXMuX3NldFNlbGVjdGVkRGF0ZShEYXRlVGltZS5hZGREYXlzKHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlLCBkYXlzKSk7XG4gIH0sXG5cbiAgX2FkZFNlbGVjdGVkTW9udGhzOiBmdW5jdGlvbiBfYWRkU2VsZWN0ZWRNb250aHMobW9udGhzKSB7XG4gICAgdGhpcy5fc2V0U2VsZWN0ZWREYXRlKERhdGVUaW1lLmFkZE1vbnRocyh0aGlzLnN0YXRlLnNlbGVjdGVkRGF0ZSwgbW9udGhzKSk7XG4gIH0sXG5cbiAgX2FkZFNlbGVjdGVkWWVhcnM6IGZ1bmN0aW9uIF9hZGRTZWxlY3RlZFllYXJzKHllYXJzKSB7XG4gICAgdGhpcy5fc2V0U2VsZWN0ZWREYXRlKERhdGVUaW1lLmFkZFllYXJzKHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlLCB5ZWFycykpO1xuICB9LFxuXG4gIF9zZXREaXNwbGF5RGF0ZTogZnVuY3Rpb24gX3NldERpc3BsYXlEYXRlKGQsIG5ld1NlbGVjdGVkRGF0ZSkge1xuICAgIHZhciBuZXdEaXNwbGF5RGF0ZSA9IERhdGVUaW1lLmdldEZpcnN0RGF5T2ZNb250aChkKTtcbiAgICB2YXIgZGlyZWN0aW9uID0gbmV3RGlzcGxheURhdGUgPiB0aGlzLnN0YXRlLmRpc3BsYXlEYXRlID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAgIGlmIChuZXdEaXNwbGF5RGF0ZSAhPT0gdGhpcy5zdGF0ZS5kaXNwbGF5RGF0ZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGRpc3BsYXlEYXRlOiBuZXdEaXNwbGF5RGF0ZSxcbiAgICAgICAgdHJhbnNpdGlvbkRpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgICAgICBzZWxlY3RlZERhdGU6IG5ld1NlbGVjdGVkRGF0ZSB8fCB0aGlzLnN0YXRlLnNlbGVjdGVkRGF0ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIF9zZXRTZWxlY3RlZERhdGU6IGZ1bmN0aW9uIF9zZXRTZWxlY3RlZERhdGUoZGF0ZSkge1xuICAgIHZhciBhZGp1c3RlZERhdGUgPSBkYXRlO1xuICAgIGlmIChEYXRlVGltZS5pc0JlZm9yZURhdGUoZGF0ZSwgdGhpcy5wcm9wcy5taW5EYXRlKSkge1xuICAgICAgYWRqdXN0ZWREYXRlID0gdGhpcy5wcm9wcy5taW5EYXRlO1xuICAgIH0gZWxzZSBpZiAoRGF0ZVRpbWUuaXNBZnRlckRhdGUoZGF0ZSwgdGhpcy5wcm9wcy5tYXhEYXRlKSkge1xuICAgICAgYWRqdXN0ZWREYXRlID0gdGhpcy5wcm9wcy5tYXhEYXRlO1xuICAgIH1cblxuICAgIHZhciBuZXdEaXNwbGF5RGF0ZSA9IERhdGVUaW1lLmdldEZpcnN0RGF5T2ZNb250aChhZGp1c3RlZERhdGUpO1xuICAgIGlmIChuZXdEaXNwbGF5RGF0ZSAhPT0gdGhpcy5zdGF0ZS5kaXNwbGF5RGF0ZSkge1xuICAgICAgdGhpcy5fc2V0RGlzcGxheURhdGUobmV3RGlzcGxheURhdGUsIGFkanVzdGVkRGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzZWxlY3RlZERhdGU6IGFkanVzdGVkRGF0ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVEYXlUb3VjaFRhcDogZnVuY3Rpb24gX2hhbmRsZURheVRvdWNoVGFwKGUsIGRhdGUpIHtcbiAgICB0aGlzLl9zZXRTZWxlY3RlZERhdGUoZGF0ZSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25EYXlUb3VjaFRhcCkgdGhpcy5wcm9wcy5vbkRheVRvdWNoVGFwKGUsIGRhdGUpO1xuICB9LFxuXG4gIF9oYW5kbGVNb250aENoYW5nZTogZnVuY3Rpb24gX2hhbmRsZU1vbnRoQ2hhbmdlKG1vbnRocykge1xuICAgIHRoaXMuX2FkZFNlbGVjdGVkTW9udGhzKG1vbnRocyk7XG4gIH0sXG5cbiAgX2hhbmRsZVllYXJDaGFuZ2U6IGZ1bmN0aW9uIF9oYW5kbGVZZWFyQ2hhbmdlKHllYXJzKSB7XG4gICAgdGhpcy5fYWRkU2VsZWN0ZWRZZWFycyh5ZWFycyk7XG4gIH0sXG5cbiAgX2hhbmRsZVllYXJUb3VjaFRhcDogZnVuY3Rpb24gX2hhbmRsZVllYXJUb3VjaFRhcChlLCB5ZWFyKSB7XG4gICAgdmFyIGRhdGUgPSBEYXRlVGltZS5jbG9uZSh0aGlzLnN0YXRlLnNlbGVjdGVkRGF0ZSk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyKTtcbiAgICB0aGlzLl9zZXRTZWxlY3RlZERhdGUoZGF0ZSwgZSk7XG4gIH0sXG5cbiAgX2dldFRvb2xiYXJJbnRlcmFjdGlvbnM6IGZ1bmN0aW9uIF9nZXRUb29sYmFySW50ZXJhY3Rpb25zKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmV2TW9udGg6IERhdGVUaW1lLm1vbnRoRGlmZih0aGlzLnN0YXRlLnNlbGVjdGVkRGF0ZSwgdGhpcy5wcm9wcy5taW5EYXRlKSA+IDAsXG4gICAgICBuZXh0TW9udGg6IERhdGVUaW1lLm1vbnRoRGlmZih0aGlzLnN0YXRlLnNlbGVjdGVkRGF0ZSwgdGhpcy5wcm9wcy5tYXhEYXRlKSA8IDAsXG4gICAgICBwcmV2WWVhcjogRGF0ZVRpbWUueWVhckRpZmYodGhpcy5zdGF0ZS5zZWxlY3RlZERhdGUsIHRoaXMucHJvcHMubWluRGF0ZSkgPiAwLFxuICAgICAgbmV4dFllYXI6IERhdGVUaW1lLnllYXJEaWZmKHRoaXMuc3RhdGUuc2VsZWN0ZWREYXRlLCB0aGlzLnByb3BzLm1heERhdGUpIDwgMFxuICAgIH07XG4gIH0sXG5cbiAgX2hhbmRsZU1vbnRoRGF5Q2xpY2s6IGZ1bmN0aW9uIF9oYW5kbGVNb250aERheUNsaWNrKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBkaXNwbGF5TW9udGhEYXk6IHRydWUgfSk7XG4gIH0sXG5cbiAgX2hhbmRsZVllYXJDbGljazogZnVuY3Rpb24gX2hhbmRsZVllYXJDbGljaygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZGlzcGxheU1vbnRoRGF5OiBmYWxzZSB9KTtcbiAgfSxcblxuICBfaGFuZGxlV2luZG93S2V5RG93bjogZnVuY3Rpb24gX2hhbmRsZVdpbmRvd0tleURvd24oZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmlzQWN0aXZlKSB7XG5cbiAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgS2V5Q29kZS5VUDpcbiAgICAgICAgICBpZiAoZS5hbHRLZXkgJiYgZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkU2VsZWN0ZWRZZWFycygtMSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRTZWxlY3RlZE1vbnRocygtMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZFNlbGVjdGVkRGF5cygtNyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgS2V5Q29kZS5ET1dOOlxuICAgICAgICAgIGlmIChlLmFsdEtleSAmJiBlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRTZWxlY3RlZFllYXJzKDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkU2VsZWN0ZWRNb250aHMoMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZFNlbGVjdGVkRGF5cyg3KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBLZXlDb2RlLlJJR0hUOlxuICAgICAgICAgIGlmIChlLmFsdEtleSAmJiBlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRTZWxlY3RlZFllYXJzKDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkU2VsZWN0ZWRNb250aHMoMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZFNlbGVjdGVkRGF5cygxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBLZXlDb2RlLkxFRlQ6XG4gICAgICAgICAgaWYgKGUuYWx0S2V5ICYmIGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZFNlbGVjdGVkWWVhcnMoLTEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkU2VsZWN0ZWRNb250aHMoLTEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRTZWxlY3RlZERheXMoLTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FsZW5kYXI7XG59LHtcIi4uL2NsZWFyZml4XCI6MTYsXCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4uL21peGlucy93aW5kb3ctbGlzdGVuYWJsZVwiOjU2LFwiLi4vc3R5bGVzL3RyYW5zaXRpb25zXCI6NzcsXCIuLi90cmFuc2l0aW9uLWdyb3Vwcy9zbGlkZS1pblwiOjEyMyxcIi4uL3V0aWxzL2RhdGUtdGltZVwiOjEyNyxcIi4uL3V0aWxzL2tleS1jb2RlXCI6MTMzLFwiLi9jYWxlbmRhci1tb250aFwiOjE3LFwiLi9jYWxlbmRhci10b29sYmFyXCI6MTgsXCIuL2NhbGVuZGFyLXllYXJcIjoxOSxcIi4vZGF0ZS1kaXNwbGF5XCI6MjEsXCJyZWFjdFwiOjMxOX1dLDIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBEYXRlVGltZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RhdGUtdGltZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgQXV0b1ByZWZpeCA9IHJlcXVpcmUoJy4uL3N0eWxlcy9hdXRvLXByZWZpeCcpO1xudmFyIFNsaWRlSW5UcmFuc2l0aW9uR3JvdXAgPSByZXF1aXJlKCcuLi90cmFuc2l0aW9uLWdyb3Vwcy9zbGlkZS1pbicpO1xuXG52YXIgRGF0ZURpc3BsYXkgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRGF0ZURpc3BsYXknLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgc2VsZWN0ZWREYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgd2Vla0NvdW50OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIHllYXJTZWxlY3Rpb25BdmFpbGFibGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIG1vbnRoRGF5U2VsZWN0ZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdlZWtDb3VudDogNCxcbiAgICAgIHllYXJTZWxlY3Rpb25BdmFpbGFibGU6IHRydWUsXG4gICAgICBtb250aERheVNlbGVjdGVkOiB0cnVlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNpdGlvbkRpcmVjdGlvbjogJ3VwJyxcbiAgICAgIHNlbGVjdGVkWWVhcjogIXRoaXMucHJvcHMubW9udGhEYXlTZWxlY3RlZFxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5leHRQcm9wcy5zZWxlY3RlZERhdGUgIT09IHRoaXMucHJvcHMuc2VsZWN0ZWREYXRlKSB7XG4gICAgICBkaXJlY3Rpb24gPSBuZXh0UHJvcHMuc2VsZWN0ZWREYXRlID4gdGhpcy5wcm9wcy5zZWxlY3RlZERhdGUgPyAndXAnIDogJ2Rvd24nO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHRyYW5zaXRpb25EaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG5leHRQcm9wcy5tb250aERheVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZFllYXI6ICFuZXh0UHJvcHMubW9udGhEYXlTZWxlY3RlZCB9KTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmRhdGVQaWNrZXI7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHNlbGVjdGVkRGF0ZSA9IF9wcm9wcy5zZWxlY3RlZERhdGU7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydzZWxlY3RlZERhdGUnLCAnc3R5bGUnXSk7XG5cbiAgICB2YXIgZGF5T2ZXZWVrID0gRGF0ZVRpbWUuZ2V0RGF5T2ZXZWVrKHRoaXMucHJvcHMuc2VsZWN0ZWREYXRlKTtcbiAgICB2YXIgbW9udGggPSBEYXRlVGltZS5nZXRTaG9ydE1vbnRoKHRoaXMucHJvcHMuc2VsZWN0ZWREYXRlKTtcbiAgICB2YXIgZGF5ID0gdGhpcy5wcm9wcy5zZWxlY3RlZERhdGUuZ2V0RGF0ZSgpO1xuICAgIHZhciB5ZWFyID0gdGhpcy5wcm9wcy5zZWxlY3RlZERhdGUuZ2V0RnVsbFllYXIoKTtcblxuICAgIHZhciBpc0xhbmRzY2FwZSA9IHRoaXMucHJvcHMubW9kZSA9PT0gJ2xhbmRzY2FwZSc7XG4gICAgdmFyIGRhdGVZUG9zaXRpb24gPSAwO1xuICAgIHZhciBkYXlZUG9zaXRpb24gPSAzMDtcbiAgICB2YXIgeWVhcllQb3NpdGlvbiA9IDk1O1xuXG4gICAgaWYgKGlzTGFuZHNjYXBlKSB7XG4gICAgICBkYXRlWVBvc2l0aW9uID0gdGhpcy5wcm9wcy53ZWVrQ291bnQgPT09IDUgPyAxNCA6IHRoaXMucHJvcHMud2Vla0NvdW50ID09PSA2ID8gMzQgOiA4O1xuICAgICAgeWVhcllQb3NpdGlvbiA9IHRoaXMucHJvcHMud2Vla0NvdW50ID09PSA0ID8gMTE0IDogMTUwO1xuICAgICAgaWYgKHRoaXMucHJvcHMud2Vla0NvdW50ID4gNCkgZGF5WVBvc2l0aW9uID0gNTA7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG5cbiAgICAgIGRhdGVDb250YWluZXI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuY29sb3IsXG4gICAgICAgIGhlaWdodDogaXNMYW5kc2NhcGUgPyB0aGlzLnByb3BzLndlZWtDb3VudCAqIDQwICsgMzYgOiAxNTAsXG4gICAgICAgIHBhZGRpbmc6ICcxNnB4IDAnLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgICB9LFxuXG4gICAgICBkYXRlOiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBjb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRleHRDb2xvcixcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCcgKyBkYXRlWVBvc2l0aW9uICsgJ3B4LDApJ1xuICAgICAgfSxcblxuICAgICAgZG93Q29udGFpbmVyOiB7XG4gICAgICAgIGhlaWdodDogMzIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnNlbGVjdENvbG9yLFxuICAgICAgICBib3JkZXJSYWRpdXM6IGlzTGFuZHNjYXBlID8gJzJweCAwIDAgMCcgOiAnMnB4IDJweCAwIDAnLFxuICAgICAgICBwYWRkaW5nVG9wOiA5LFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgICAgfSxcblxuICAgICAgZG93OiB7XG4gICAgICAgIGZvbnRTaXplOiAxMyxcbiAgICAgICAgbGluZUhlaWdodDogJzEzcHgnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5zZWxlY3RUZXh0Q29sb3JcbiAgICAgIH0sXG5cbiAgICAgIGRheToge1xuICAgICAgICByb290OiB7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgbGluZUhlaWdodDogaXNMYW5kc2NhcGUgPyAnNzZweCcgOiAnNThweCcsXG4gICAgICAgICAgZm9udFNpemU6IGlzTGFuZHNjYXBlID8gNzYgOiA1OCxcbiAgICAgICAgICBoZWlnaHQ6IGlzTGFuZHNjYXBlID8gNzYgOiA1OCxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIG9wYWNpdHk6IHRoaXMuc3RhdGUuc2VsZWN0ZWRZZWFyID8gMC43IDogMS4wLFxuICAgICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKSxcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCcgKyBkYXlZUG9zaXRpb24gKyAncHgsMCknXG4gICAgICAgIH0sXG5cbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICB3aWR0aDogMTAwLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICAgICAgICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICAgICAgICAgIGN1cnNvcjogIXRoaXMuc3RhdGUuc2VsZWN0ZWRZZWFyID8gJ2RlZmF1bHQnIDogJ3BvaW50ZXInXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIG1vbnRoOiB7XG4gICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB0b3A6IGlzTGFuZHNjYXBlID8gMCA6IDEsXG4gICAgICAgICAgZm9udFNpemU6IGlzTGFuZHNjYXBlID8gMjYgOiAyMixcbiAgICAgICAgICBsaW5lSGVpZ2h0OiBpc0xhbmRzY2FwZSA/ICcyNnB4JyA6ICcyMnB4JyxcbiAgICAgICAgICBoZWlnaHQ6IGlzTGFuZHNjYXBlID8gMjYgOiAyMixcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgICAgIG9wYWNpdHk6IHRoaXMuc3RhdGUuc2VsZWN0ZWRZZWFyID8gMC43IDogMS4wXG4gICAgICAgIH0sXG5cbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICB3aWR0aDogMTAwLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICAgICAgICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICAgICAgICAgIGN1cnNvcjogIXRoaXMuc3RhdGUuc2VsZWN0ZWRZZWFyID8gJ2RlZmF1bHQnIDogJ3BvaW50ZXInXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHllYXI6IHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICBmb250U2l6ZTogaXNMYW5kc2NhcGUgPyAyNiA6IDIyLFxuICAgICAgICAgIGxpbmVIZWlnaHQ6IGlzTGFuZHNjYXBlID8gJzI2cHgnIDogJzIycHgnLFxuICAgICAgICAgIGhlaWdodDogaXNMYW5kc2NhcGUgPyAyNiA6IDIyLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgICAgICAgb3BhY2l0eTogdGhpcy5zdGF0ZS5zZWxlY3RlZFllYXIgPyAxLjAgOiAwLjcsXG4gICAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsJyArIHllYXJZUG9zaXRpb24gKyAncHgsMCknXG4gICAgICAgIH0sXG5cbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICB3aWR0aDogMTAwLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICAgICAgICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICAgICAgICAgIGN1cnNvcjogIXRoaXMucHJvcHMueWVhclNlbGVjdGlvbkF2YWlsYWJsZSB8fCB0aGlzLnN0YXRlLnNlbGVjdGVkWWVhciA/ICdkZWZhdWx0JyA6ICdwb2ludGVyJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUpIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5kb3dDb250YWluZXIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBTbGlkZUluVHJhbnNpdGlvbkdyb3VwLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuZG93LFxuICAgICAgICAgICAgZGlyZWN0aW9uOiB0aGlzLnN0YXRlLnRyYW5zaXRpb25EaXJlY3Rpb24gfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGtleTogZGF5T2ZXZWVrIH0sXG4gICAgICAgICAgICBkYXlPZldlZWtcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogQXV0b1ByZWZpeC5hbGwoc3R5bGVzLmRhdGVDb250YWluZXIpIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogQXV0b1ByZWZpeC5hbGwoc3R5bGVzLmRhdGUpIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFNsaWRlSW5UcmFuc2l0aW9uR3JvdXAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMubW9udGgucm9vdCxcbiAgICAgICAgICAgICAgZGlyZWN0aW9uOiB0aGlzLnN0YXRlLnRyYW5zaXRpb25EaXJlY3Rpb24gfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICB7IGtleTogbW9udGgsIHN0eWxlOiBzdHlsZXMubW9udGgudGl0bGUsIG9uVG91Y2hUYXA6IHRoaXMuX2hhbmRsZU1vbnRoRGF5Q2xpY2sgfSxcbiAgICAgICAgICAgICAgbW9udGhcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBTbGlkZUluVHJhbnNpdGlvbkdyb3VwLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzdHlsZTogc3R5bGVzLmRheS5yb290LFxuICAgICAgICAgICAgICBkaXJlY3Rpb246IHRoaXMuc3RhdGUudHJhbnNpdGlvbkRpcmVjdGlvbiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIHsga2V5OiBkYXksIHN0eWxlOiBzdHlsZXMuZGF5LnRpdGxlLCBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVNb250aERheUNsaWNrIH0sXG4gICAgICAgICAgICAgIGRheVxuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFNsaWRlSW5UcmFuc2l0aW9uR3JvdXAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMueWVhci5yb290LFxuICAgICAgICAgICAgICBkaXJlY3Rpb246IHRoaXMuc3RhdGUudHJhbnNpdGlvbkRpcmVjdGlvbiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIHsga2V5OiB5ZWFyLCBzdHlsZTogc3R5bGVzLnllYXIudGl0bGUsIG9uVG91Y2hUYXA6IHRoaXMuX2hhbmRsZVllYXJDbGljayB9LFxuICAgICAgICAgICAgICB5ZWFyXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfSxcblxuICBfaGFuZGxlTW9udGhEYXlDbGljazogZnVuY3Rpb24gX2hhbmRsZU1vbnRoRGF5Q2xpY2soKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuaGFuZGxlTW9udGhEYXlDbGljayAmJiB0aGlzLnN0YXRlLnNlbGVjdGVkWWVhcikge1xuICAgICAgdGhpcy5wcm9wcy5oYW5kbGVNb250aERheUNsaWNrKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMueWVhclNlbGVjdGlvbkF2YWlsYWJsZSkgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkWWVhcjogZmFsc2UgfSk7XG4gIH0sXG5cbiAgX2hhbmRsZVllYXJDbGljazogZnVuY3Rpb24gX2hhbmRsZVllYXJDbGljaygpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5oYW5kbGVZZWFyQ2xpY2sgJiYgIXRoaXMuc3RhdGUuc2VsZWN0ZWRZZWFyICYmIHRoaXMucHJvcHMueWVhclNlbGVjdGlvbkF2YWlsYWJsZSkge1xuICAgICAgdGhpcy5wcm9wcy5oYW5kbGVZZWFyQ2xpY2soKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy55ZWFyU2VsZWN0aW9uQXZhaWxhYmxlKSB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRZZWFyOiB0cnVlIH0pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGVEaXNwbGF5O1xufSx7XCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4uL3N0eWxlcy9hdXRvLXByZWZpeFwiOjcwLFwiLi4vc3R5bGVzL3RyYW5zaXRpb25zXCI6NzcsXCIuLi90cmFuc2l0aW9uLWdyb3Vwcy9zbGlkZS1pblwiOjEyMyxcIi4uL3V0aWxzL2RhdGUtdGltZVwiOjEyNyxcInJlYWN0XCI6MzE5fV0sMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFdpbmRvd0xpc3RlbmFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvd2luZG93LWxpc3RlbmFibGUnKTtcbnZhciBDc3NFdmVudCA9IHJlcXVpcmUoJy4uL3V0aWxzL2Nzcy1ldmVudCcpO1xudmFyIEtleUNvZGUgPSByZXF1aXJlKCcuLi91dGlscy9rZXktY29kZScpO1xudmFyIENhbGVuZGFyID0gcmVxdWlyZSgnLi9jYWxlbmRhcicpO1xudmFyIERpYWxvZyA9IHJlcXVpcmUoJy4uL2RpYWxvZycpO1xudmFyIEZsYXRCdXR0b24gPSByZXF1aXJlKCcuLi9mbGF0LWJ1dHRvbicpO1xuXG52YXIgRGF0ZVBpY2tlckRpYWxvZyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdEYXRlUGlja2VyRGlhbG9nJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlLCBXaW5kb3dMaXN0ZW5hYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGluaXRpYWxEYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG9uQWNjZXB0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblNob3c6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uRGlzbWlzczogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DbGlja0F3YXk6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG1pbkRhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgbWF4RGF0ZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzaG91bGREaXNhYmxlRGF0ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGlkZVRvb2xiYXJZZWFyQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzaG93WWVhclNlbGVjdG9yOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIHdpbmRvd0xpc3RlbmVyczoge1xuICAgIGtleXVwOiAnX2hhbmRsZVdpbmRvd0tleVVwJ1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0NhbGVuZGFyQWN0aXZlOiBmYWxzZSxcbiAgICAgIHNob3dNb250aERheVBpY2tlcjogdHJ1ZVxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGluaXRpYWxEYXRlID0gX3Byb3BzLmluaXRpYWxEYXRlO1xuICAgIHZhciBvbkFjY2VwdCA9IF9wcm9wcy5vbkFjY2VwdDtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2luaXRpYWxEYXRlJywgJ29uQWNjZXB0JywgJ3N0eWxlJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgICBjb2xvcjogdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5kYXRlUGlja2VyLmNhbGVuZGFyVGV4dENvbG9yXG4gICAgICB9LFxuXG4gICAgICBkaWFsb2dDb250ZW50OiB7XG4gICAgICAgIHdpZHRoOiB0aGlzLnByb3BzLm1vZGUgPT09ICdsYW5kc2NhcGUnID8gNTYwIDogMjgwXG4gICAgICB9LFxuXG4gICAgICBkaWFsb2dCb2R5Q29udGVudDoge1xuICAgICAgICBwYWRkaW5nOiAwXG4gICAgICB9LFxuXG4gICAgICBhY3Rpb25zOiB7XG4gICAgICAgIG1hcmdpblJpZ2h0OiA4XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBhY3Rpb25zID0gW1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmxhdEJ1dHRvbiwge1xuICAgICAga2V5OiAwLFxuICAgICAgbGFiZWw6ICdDYW5jZWwnLFxuICAgICAgc2Vjb25kYXJ5OiB0cnVlLFxuICAgICAgc3R5bGU6IHN0eWxlcy5hY3Rpb25zLFxuICAgICAgb25Ub3VjaFRhcDogdGhpcy5faGFuZGxlQ2FuY2VsVG91Y2hUYXAgfSldO1xuXG4gICAgaWYgKCF0aGlzLnByb3BzLmF1dG9Paykge1xuICAgICAgYWN0aW9ucy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmxhdEJ1dHRvbiwge1xuICAgICAgICBrZXk6IDEsXG4gICAgICAgIGxhYmVsOiAnT0snLFxuICAgICAgICBzZWNvbmRhcnk6IHRydWUsXG4gICAgICAgIGRpc2FibGVkOiB0aGlzLnJlZnMuY2FsZW5kYXIgIT09IHVuZGVmaW5lZCAmJiB0aGlzLnJlZnMuY2FsZW5kYXIuaXNTZWxlY3RlZERhdGVEaXNhYmxlZCgpLFxuICAgICAgICBzdHlsZTogc3R5bGVzLmFjdGlvbnMsXG4gICAgICAgIG9uVG91Y2hUYXA6IHRoaXMuX2hhbmRsZU9LVG91Y2hUYXAgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgRGlhbG9nLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHJlZjogJ2RpYWxvZycsXG4gICAgICAgIHN0eWxlOiBzdHlsZXMucm9vdCxcbiAgICAgICAgY29udGVudFN0eWxlOiBzdHlsZXMuZGlhbG9nQ29udGVudCxcbiAgICAgICAgYm9keVN0eWxlOiBzdHlsZXMuZGlhbG9nQm9keUNvbnRlbnQsXG4gICAgICAgIGFjdGlvbnM6IGFjdGlvbnMsXG4gICAgICAgIG9uRGlzbWlzczogdGhpcy5faGFuZGxlRGlhbG9nRGlzbWlzcyxcbiAgICAgICAgb25TaG93OiB0aGlzLl9oYW5kbGVEaWFsb2dTaG93LFxuICAgICAgICBvbkNsaWNrQXdheTogdGhpcy5faGFuZGxlRGlhbG9nQ2xpY2tBd2F5LFxuICAgICAgICByZXBvc2l0aW9uT25VcGRhdGU6IGZhbHNlIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDYWxlbmRhciwge1xuICAgICAgICByZWY6ICdjYWxlbmRhcicsXG4gICAgICAgIG9uRGF5VG91Y2hUYXA6IHRoaXMuX29uRGF5VG91Y2hUYXAsXG4gICAgICAgIGluaXRpYWxEYXRlOiB0aGlzLnByb3BzLmluaXRpYWxEYXRlLFxuICAgICAgICBpc0FjdGl2ZTogdGhpcy5zdGF0ZS5pc0NhbGVuZGFyQWN0aXZlLFxuICAgICAgICBtaW5EYXRlOiB0aGlzLnByb3BzLm1pbkRhdGUsXG4gICAgICAgIG1heERhdGU6IHRoaXMucHJvcHMubWF4RGF0ZSxcbiAgICAgICAgc2hvdWxkRGlzYWJsZURhdGU6IHRoaXMucHJvcHMuc2hvdWxkRGlzYWJsZURhdGUsXG4gICAgICAgIHNob3VsZFNob3dNb250aERheVBpY2tlckZpcnN0OiB0aGlzLnN0YXRlLnNob3dNb250aERheVBpY2tlcixcbiAgICAgICAgaGlkZVRvb2xiYXJZZWFyQ2hhbmdlOiB0aGlzLnByb3BzLmhpZGVUb29sYmFyWWVhckNoYW5nZSxcbiAgICAgICAgc2hvd1llYXJTZWxlY3RvcjogdGhpcy5wcm9wcy5zaG93WWVhclNlbGVjdG9yLFxuICAgICAgICBtb2RlOiB0aGlzLnByb3BzLm1vZGUgfSlcbiAgICApO1xuICB9LFxuXG4gIHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgdGhpcy5yZWZzLmRpYWxvZy5zaG93KCk7XG4gIH0sXG5cbiAgZGlzbWlzczogZnVuY3Rpb24gZGlzbWlzcygpIHtcbiAgICB0aGlzLnJlZnMuZGlhbG9nLmRpc21pc3MoKTtcbiAgfSxcblxuICBfb25EYXlUb3VjaFRhcDogZnVuY3Rpb24gX29uRGF5VG91Y2hUYXAoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYXV0b09rKSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMuX2hhbmRsZU9LVG91Y2hUYXAsIDMwMCk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVDYW5jZWxUb3VjaFRhcDogZnVuY3Rpb24gX2hhbmRsZUNhbmNlbFRvdWNoVGFwKCkge1xuICAgIHRoaXMuZGlzbWlzcygpO1xuICB9LFxuXG4gIF9oYW5kbGVPS1RvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlT0tUb3VjaFRhcCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkFjY2VwdCAmJiAhdGhpcy5yZWZzLmNhbGVuZGFyLmlzU2VsZWN0ZWREYXRlRGlzYWJsZWQoKSkge1xuICAgICAgdGhpcy5wcm9wcy5vbkFjY2VwdCh0aGlzLnJlZnMuY2FsZW5kYXIuZ2V0U2VsZWN0ZWREYXRlKCkpO1xuICAgIH1cblxuICAgIHRoaXMuZGlzbWlzcygpO1xuICB9LFxuXG4gIF9oYW5kbGVEaWFsb2dTaG93OiBmdW5jdGlvbiBfaGFuZGxlRGlhbG9nU2hvdygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzQ2FsZW5kYXJBY3RpdmU6IHRydWVcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnByb3BzLm9uU2hvdykgdGhpcy5wcm9wcy5vblNob3coKTtcbiAgfSxcblxuICBfaGFuZGxlRGlhbG9nRGlzbWlzczogZnVuY3Rpb24gX2hhbmRsZURpYWxvZ0Rpc21pc3MoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIENzc0V2ZW50Lm9uVHJhbnNpdGlvbkVuZCh0aGlzLnJlZnMuZGlhbG9nLmdldERPTU5vZGUoKSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0NhbGVuZGFyQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgc2hvd01vbnRoRGF5UGlja2VyOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnByb3BzLm9uRGlzbWlzcykgdGhpcy5wcm9wcy5vbkRpc21pc3MoKTtcbiAgfSxcblxuICBfaGFuZGxlRGlhbG9nQ2xpY2tBd2F5OiBmdW5jdGlvbiBfaGFuZGxlRGlhbG9nQ2xpY2tBd2F5KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgQ3NzRXZlbnQub25UcmFuc2l0aW9uRW5kKHRoaXMucmVmcy5kaWFsb2cuZ2V0RE9NTm9kZSgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICBpc0NhbGVuZGFyQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgc2hvd01vbnRoRGF5UGlja2VyOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2tBd2F5KSB0aGlzLnByb3BzLm9uQ2xpY2tBd2F5KCk7XG4gIH0sXG5cbiAgX2hhbmRsZVdpbmRvd0tleVVwOiBmdW5jdGlvbiBfaGFuZGxlV2luZG93S2V5VXAoZSkge1xuICAgIGlmICh0aGlzLnN0YXRlLmlzQ2FsZW5kYXJBY3RpdmUpIHtcbiAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgS2V5Q29kZS5FTlRFUjpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVPS1RvdWNoVGFwKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGVQaWNrZXJEaWFsb2c7XG59LHtcIi4uL2RpYWxvZ1wiOjI2LFwiLi4vZmxhdC1idXR0b25cIjozMixcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi4vbWl4aW5zL3dpbmRvdy1saXN0ZW5hYmxlXCI6NTYsXCIuLi91dGlscy9jc3MtZXZlbnRcIjoxMjYsXCIuLi91dGlscy9rZXktY29kZVwiOjEzMyxcIi4vY2FsZW5kYXJcIjoyMCxcInJlYWN0XCI6MzE5fV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBXaW5kb3dMaXN0ZW5hYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3dpbmRvdy1saXN0ZW5hYmxlJyk7XG52YXIgRGF0ZVRpbWUgPSByZXF1aXJlKCcuLi91dGlscy9kYXRlLXRpbWUnKTtcbnZhciBEYXRlUGlja2VyRGlhbG9nID0gcmVxdWlyZSgnLi9kYXRlLXBpY2tlci1kaWFsb2cnKTtcbnZhciBUZXh0RmllbGQgPSByZXF1aXJlKCcuLi90ZXh0LWZpZWxkJyk7XG5cbnZhciBEYXRlUGlja2VyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0RhdGVQaWNrZXInLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGUsIFdpbmRvd0xpc3RlbmFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGF1dG9PazogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZGVmYXVsdERhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgZm9ybWF0RGF0ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGlkZVRvb2xiYXJZZWFyQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBtYXhEYXRlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG1pbkRhdGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgbW9kZTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsncG9ydHJhaXQnLCAnbGFuZHNjYXBlJywgJ2lubGluZSddKSxcbiAgICBvbkRpc21pc3M6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkZvY3VzOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblNob3c6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uVG91Y2hUYXA6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIHNob3VsZERpc2FibGVEYXRlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBzaG93WWVhclNlbGVjdG9yOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0ZXh0RmllbGRTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHdpbmRvd0xpc3RlbmVyczoge1xuICAgIGtleXVwOiAnX2hhbmRsZVdpbmRvd0tleVVwJ1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtYXREYXRlOiBEYXRlVGltZS5mb3JtYXQsXG4gICAgICBhdXRvT2s6IGZhbHNlLFxuICAgICAgc2hvd1llYXJTZWxlY3RvcjogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkYXRlOiB0aGlzLl9pc0NvbnRyb2xsZWQoKSA/IHRoaXMuX2dldENvbnRyb2xsZWREYXRlKCkgOiB0aGlzLnByb3BzLmRlZmF1bHREYXRlLFxuICAgICAgZGlhbG9nRGF0ZTogbmV3IERhdGUoKVxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAodGhpcy5faXNDb250cm9sbGVkKCkpIHtcbiAgICAgIHZhciBuZXdEYXRlID0gdGhpcy5fZ2V0Q29udHJvbGxlZERhdGUobmV4dFByb3BzKTtcbiAgICAgIGlmICghRGF0ZVRpbWUuaXNFcXVhbERhdGUodGhpcy5zdGF0ZS5kYXRlLCBuZXdEYXRlKSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBkYXRlOiBuZXdEYXRlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgYXV0b09rID0gX3Byb3BzLmF1dG9PaztcbiAgICB2YXIgZGVmYXVsdERhdGUgPSBfcHJvcHMuZGVmYXVsdERhdGU7XG4gICAgdmFyIGZvcm1hdERhdGUgPSBfcHJvcHMuZm9ybWF0RGF0ZTtcbiAgICB2YXIgbWF4RGF0ZSA9IF9wcm9wcy5tYXhEYXRlO1xuICAgIHZhciBtaW5EYXRlID0gX3Byb3BzLm1pbkRhdGU7XG4gICAgdmFyIG1vZGUgPSBfcHJvcHMubW9kZTtcbiAgICB2YXIgb25EaXNtaXNzID0gX3Byb3BzLm9uRGlzbWlzcztcbiAgICB2YXIgb25Gb2N1cyA9IF9wcm9wcy5vbkZvY3VzO1xuICAgIHZhciBvblRvdWNoVGFwID0gX3Byb3BzLm9uVG91Y2hUYXA7XG4gICAgdmFyIG9uU2hvdyA9IF9wcm9wcy5vblNob3c7XG4gICAgdmFyIHNob3dZZWFyU2VsZWN0b3IgPSBfcHJvcHMuc2hvd1llYXJTZWxlY3RvcjtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG4gICAgdmFyIHRleHRGaWVsZFN0eWxlID0gX3Byb3BzLnRleHRGaWVsZFN0eWxlO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydhdXRvT2snLCAnZGVmYXVsdERhdGUnLCAnZm9ybWF0RGF0ZScsICdtYXhEYXRlJywgJ21pbkRhdGUnLCAnbW9kZScsICdvbkRpc21pc3MnLCAnb25Gb2N1cycsICdvblRvdWNoVGFwJywgJ29uU2hvdycsICdzaG93WWVhclNlbGVjdG9yJywgJ3N0eWxlJywgJ3RleHRGaWVsZFN0eWxlJ10pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRleHRGaWVsZCwgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHN0eWxlOiB0ZXh0RmllbGRTdHlsZSxcbiAgICAgICAgcmVmOiAnaW5wdXQnLFxuICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5kYXRlID8gZm9ybWF0RGF0ZSh0aGlzLnN0YXRlLmRhdGUpIDogdW5kZWZpbmVkLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLl9oYW5kbGVJbnB1dEZvY3VzLFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVJbnB1dFRvdWNoVGFwIH0pKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0ZVBpY2tlckRpYWxvZywge1xuICAgICAgICByZWY6ICdkaWFsb2dXaW5kb3cnLFxuICAgICAgICBtb2RlOiBtb2RlLFxuICAgICAgICBpbml0aWFsRGF0ZTogdGhpcy5zdGF0ZS5kaWFsb2dEYXRlLFxuICAgICAgICBvbkFjY2VwdDogdGhpcy5faGFuZGxlRGlhbG9nQWNjZXB0LFxuICAgICAgICBvblNob3c6IG9uU2hvdyxcbiAgICAgICAgb25EaXNtaXNzOiB0aGlzLl9oYW5kbGVEaWFsb2dEaXNtaXNzLFxuICAgICAgICBtaW5EYXRlOiBtaW5EYXRlLFxuICAgICAgICBtYXhEYXRlOiBtYXhEYXRlLFxuICAgICAgICBhdXRvT2s6IGF1dG9PayxcbiAgICAgICAgc2hvd1llYXJTZWxlY3Rvcjogc2hvd1llYXJTZWxlY3RvcixcbiAgICAgICAgc2hvdWxkRGlzYWJsZURhdGU6IHRoaXMucHJvcHMuc2hvdWxkRGlzYWJsZURhdGUsXG4gICAgICAgIGhpZGVUb29sYmFyWWVhckNoYW5nZTogdGhpcy5wcm9wcy5oaWRlVG9vbGJhclllYXJDaGFuZ2UgfSlcbiAgICApO1xuICB9LFxuXG4gIGdldERhdGU6IGZ1bmN0aW9uIGdldERhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZGF0ZTtcbiAgfSxcblxuICBzZXREYXRlOiBmdW5jdGlvbiBzZXREYXRlKGQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0aGlzLl9pc0NvbnRyb2xsZWQoKSkge1xuICAgICAgY29uc29sZS5lcnJvcignQ2Fubm90IGNhbGwgRGF0ZVBpY2tlci5zZXREYXRlIHdoZW4gdmFsdWUgb3IgdmFsdWVMaW5rIGlzIGRlZmluZWQgYXMgYSBwcm9wZXJ0eS4nKTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkYXRlOiBkXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE9wZW4gdGhlIGRhdGUtcGlja2VyIGRpYWxvZyBwcm9ncmFtbWF0aWNhbGx5IGZyb20gYSBwYXJlbnQuXG4gICAqL1xuICBvcGVuRGlhbG9nOiBmdW5jdGlvbiBvcGVuRGlhbG9nKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZGlhbG9nRGF0ZTogdGhpcy5nZXREYXRlKClcbiAgICB9LCB0aGlzLnJlZnMuZGlhbG9nV2luZG93LnNob3cpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBbGlhcyBmb3IgYG9wZW5EaWFsb2coKWAgZm9yIGFuIGFwaSBjb25zaXN0ZW50IHdpdGggVGV4dEZpZWxkLlxuICAgKi9cbiAgZm9jdXM6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgIHRoaXMub3BlbkRpYWxvZygpO1xuICB9LFxuXG4gIF9oYW5kbGVEaWFsb2dBY2NlcHQ6IGZ1bmN0aW9uIF9oYW5kbGVEaWFsb2dBY2NlcHQoZCkge1xuICAgIGlmICghdGhpcy5faXNDb250cm9sbGVkKCkpIHtcbiAgICAgIHRoaXMuc2V0RGF0ZShkKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHRoaXMucHJvcHMub25DaGFuZ2UobnVsbCwgZCk7XG4gICAgaWYgKHRoaXMucHJvcHMudmFsdWVMaW5rKSB0aGlzLnByb3BzLnZhbHVlTGluay5yZXF1ZXN0Q2hhbmdlKGQpO1xuICB9LFxuXG4gIF9oYW5kbGVEaWFsb2dEaXNtaXNzOiBmdW5jdGlvbiBfaGFuZGxlRGlhbG9nRGlzbWlzcygpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkRpc21pc3MpIHRoaXMucHJvcHMub25EaXNtaXNzKCk7XG4gIH0sXG5cbiAgX2hhbmRsZUlucHV0Rm9jdXM6IGZ1bmN0aW9uIF9oYW5kbGVJbnB1dEZvY3VzKGUpIHtcbiAgICBlLnRhcmdldC5ibHVyKCk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Gb2N1cykgdGhpcy5wcm9wcy5vbkZvY3VzKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVJbnB1dFRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlSW5wdXRUb3VjaFRhcChlKSB7XG4gICAgdGhpcy5vcGVuRGlhbG9nKCk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Ub3VjaFRhcCkgdGhpcy5wcm9wcy5vblRvdWNoVGFwKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVXaW5kb3dLZXlVcDogZnVuY3Rpb24gX2hhbmRsZVdpbmRvd0tleVVwKCkge30sXG5cbiAgX2lzQ29udHJvbGxlZDogZnVuY3Rpb24gX2lzQ29udHJvbGxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSB8fCB0aGlzLnByb3BzLmhhc093blByb3BlcnR5KCd2YWx1ZUxpbmsnKTtcbiAgfSxcblxuICBfZ2V0Q29udHJvbGxlZERhdGU6IGZ1bmN0aW9uIF9nZXRDb250cm9sbGVkRGF0ZSgpIHtcbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHRoaXMucHJvcHMgOiBhcmd1bWVudHNbMF07XG5cbiAgICBpZiAoRGF0ZVRpbWUuaXNEYXRlT2JqZWN0KHByb3BzLnZhbHVlKSkge1xuICAgICAgcmV0dXJuIHByb3BzLnZhbHVlO1xuICAgIH0gZWxzZSBpZiAocHJvcHMudmFsdWVMaW5rICYmIERhdGVUaW1lLmlzRGF0ZU9iamVjdChwcm9wcy52YWx1ZUxpbmsudmFsdWUpKSB7XG4gICAgICByZXR1cm4gcHJvcHMudmFsdWVMaW5rLnZhbHVlO1xuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXRlUGlja2VyO1xuXG4vL1RPIERPOiBvcGVuIHRoZSBkaWFsb2cgaWYgaW5wdXQgaGFzIGZvY3VzXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi9taXhpbnMvd2luZG93LWxpc3RlbmFibGVcIjo1NixcIi4uL3RleHQtZmllbGRcIjoxMDIsXCIuLi91dGlscy9kYXRlLXRpbWVcIjoxMjcsXCIuL2RhdGUtcGlja2VyLWRpYWxvZ1wiOjIyLFwiX3Byb2Nlc3NcIjoxLFwicmVhY3RcIjozMTl9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbiA9IHJlcXVpcmUoJy4uL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIERhdGVUaW1lID0gcmVxdWlyZSgnLi4vdXRpbHMvZGF0ZS10aW1lJyk7XG52YXIgRW5oYW5jZWRCdXR0b24gPSByZXF1aXJlKCcuLi9lbmhhbmNlZC1idXR0b24nKTtcblxudmFyIERheUJ1dHRvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdEYXlCdXR0b24nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZGF0ZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvblRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3RlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzYWJsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhvdmVyOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmRhdGVQaWNrZXI7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGRhdGUgPSBfcHJvcHMuZGF0ZTtcbiAgICB2YXIgb25Ub3VjaFRhcCA9IF9wcm9wcy5vblRvdWNoVGFwO1xuICAgIHZhciBzZWxlY3RlZCA9IF9wcm9wcy5zZWxlY3RlZDtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnZGF0ZScsICdvblRvdWNoVGFwJywgJ3NlbGVjdGVkJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICB3aWR0aDogMzYsXG4gICAgICAgIHBhZGRpbmc6ICc0cHggMnB4J1xuICAgICAgfSxcblxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGNvbG9yOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZS50ZXh0Q29sb3JcbiAgICAgIH0sXG5cbiAgICAgIGJ1dHRvblN0YXRlOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBoZWlnaHQ6IDMyLFxuICAgICAgICB3aWR0aDogMzIsXG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbi5lYXNlT3V0KCksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnNlbGVjdENvbG9yXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0aGlzLnN0YXRlLmhvdmVyKSB7XG4gICAgICBzdHlsZXMubGFiZWwuY29sb3IgPSB0aGlzLmdldFRoZW1lKCkuc2VsZWN0VGV4dENvbG9yO1xuICAgICAgc3R5bGVzLmJ1dHRvblN0YXRlLm9wYWNpdHkgPSAnMC42JztcbiAgICAgIHN0eWxlcy5idXR0b25TdGF0ZS50cmFuc2Zvcm0gPSAnc2NhbGUoMSknO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICBzdHlsZXMubGFiZWwuY29sb3IgPSB0aGlzLmdldFRoZW1lKCkuc2VsZWN0VGV4dENvbG9yO1xuICAgICAgc3R5bGVzLmJ1dHRvblN0YXRlLm9wYWNpdHkgPSAxO1xuICAgICAgc3R5bGVzLmJ1dHRvblN0YXRlLnRyYW5zZm9ybSA9ICdzY2FsZSgxKSc7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBzdHlsZXMucm9vdC5vcGFjaXR5ID0gJzAuNic7XG4gICAgfVxuXG4gICAgaWYgKERhdGVUaW1lLmlzRXF1YWxEYXRlKHRoaXMucHJvcHMuZGF0ZSwgbmV3IERhdGUoKSkgJiYgIXRoaXMucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgIHN0eWxlcy5sYWJlbC5jb2xvciA9IHRoaXMuZ2V0VGhlbWUoKS5jb2xvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kYXRlID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIEVuaGFuY2VkQnV0dG9uLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZXMucm9vdCxcbiAgICAgICAgaG92ZXJTdHlsZTogc3R5bGVzLmhvdmVyLFxuICAgICAgICBkaXNhYmxlZDogdGhpcy5wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlOiB0cnVlLFxuICAgICAgICBkaXNhYmxlVG91Y2hSaXBwbGU6IHRydWUsXG4gICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5faGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLl9oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVUb3VjaFRhcCxcbiAgICAgICAgb25LZXlib2FyZEZvY3VzOiB0aGlzLl9oYW5kbGVLZXlib2FyZEZvY3VzIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmJ1dHRvblN0YXRlIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgdGhpcy5wcm9wcy5kYXRlLmdldERhdGUoKVxuICAgICAgKVxuICAgICkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBzdHlsZTogc3R5bGVzLnJvb3QgfSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlRW50ZXI6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZUVudGVyKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCkgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyOiB0cnVlIH0pO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZUxlYXZlOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VMZWF2ZSgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQpIHRoaXMuc2V0U3RhdGUoeyBob3ZlcjogZmFsc2UgfSk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hUYXAoZSkge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiB0aGlzLnByb3BzLm9uVG91Y2hUYXApIHRoaXMucHJvcHMub25Ub3VjaFRhcChlLCB0aGlzLnByb3BzLmRhdGUpO1xuICB9LFxuXG4gIF9oYW5kbGVLZXlib2FyZEZvY3VzOiBmdW5jdGlvbiBfaGFuZGxlS2V5Ym9hcmRGb2N1cyhlLCBrZXlib2FyZEZvY3VzZWQpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5vbktleWJvYXJkRm9jdXMpIHRoaXMucHJvcHMub25LZXlib2FyZEZvY3VzKGUsIGtleWJvYXJkRm9jdXNlZCwgdGhpcy5wcm9wcy5kYXRlKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYXlCdXR0b247XG59LHtcIi4uL2VuaGFuY2VkLWJ1dHRvblwiOjI5LFwiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi9zdHlsZXMvdHJhbnNpdGlvbnNcIjo3NyxcIi4uL3V0aWxzL2RhdGUtdGltZVwiOjEyNyxcInJlYWN0XCI6MzE5fV0sMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIEVuaGFuY2VkQnV0dG9uID0gcmVxdWlyZSgnLi4vZW5oYW5jZWQtYnV0dG9uJyk7XG5cbnZhciBZZWFyQnV0dG9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1llYXJCdXR0b24nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgeWVhcjogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBvblRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3RlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXI6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQuZGF0ZVBpY2tlcjtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZTtcbiAgICB2YXIgeWVhciA9IF9wcm9wcy55ZWFyO1xuICAgIHZhciBvblRvdWNoVGFwID0gX3Byb3BzLm9uVG91Y2hUYXA7XG4gICAgdmFyIHNlbGVjdGVkID0gX3Byb3BzLnNlbGVjdGVkO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbGFzc05hbWUnLCAneWVhcicsICdvblRvdWNoVGFwJywgJ3NlbGVjdGVkJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgICAgICB3aWR0aDogMzYsXG4gICAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgICAgcGFkZGluZzogJzhweCAycHgnXG4gICAgICB9LFxuXG4gICAgICBsYWJlbDoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgdG9wOiAtMSxcbiAgICAgICAgY29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlLnRleHRDb2xvclxuICAgICAgfSxcblxuICAgICAgYnV0dG9uU3RhdGU6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGhlaWdodDogMzIsXG4gICAgICAgIHdpZHRoOiAzMixcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5zZWxlY3RDb2xvclxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5ob3Zlcikge1xuICAgICAgc3R5bGVzLmxhYmVsLmNvbG9yID0gdGhpcy5nZXRUaGVtZSgpLnNlbGVjdFRleHRDb2xvcjtcbiAgICAgIHN0eWxlcy5idXR0b25TdGF0ZS5vcGFjaXR5ID0gMC42O1xuICAgICAgc3R5bGVzLmJ1dHRvblN0YXRlLnRyYW5zZm9ybSA9ICdzY2FsZSgxLjUpJztcbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgIHN0eWxlcy5sYWJlbC5jb2xvciA9IHRoaXMuZ2V0VGhlbWUoKS5zZWxlY3RUZXh0Q29sb3I7XG4gICAgICBzdHlsZXMuYnV0dG9uU3RhdGUub3BhY2l0eSA9IDE7XG4gICAgICBzdHlsZXMuYnV0dG9uU3RhdGUudHJhbnNmb3JtID0gJ3NjYWxlKDEuNSknO1xuICAgIH1cblxuICAgIGlmICh5ZWFyID09PSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkpIHtcbiAgICAgIHN0eWxlcy5yb290LmNvbG9yID0gdGhpcy5nZXRUaGVtZSgpLmNvbG9yO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgRW5oYW5jZWRCdXR0b24sXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5yb290LFxuICAgICAgICBkaXNhYmxlRm9jdXNSaXBwbGU6IHRydWUsXG4gICAgICAgIGRpc2FibGVUb3VjaFJpcHBsZTogdHJ1ZSxcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLl9oYW5kbGVNb3VzZUVudGVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuX2hhbmRsZU1vdXNlTGVhdmUsXG4gICAgICAgIG9uVG91Y2hUYXA6IHRoaXMuX2hhbmRsZVRvdWNoVGFwIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmJ1dHRvblN0YXRlIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgeWVhclxuICAgICAgKVxuICAgICk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlRW50ZXI6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZUVudGVyKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBob3ZlcjogdHJ1ZSB9KTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VMZWF2ZTogZnVuY3Rpb24gX2hhbmRsZU1vdXNlTGVhdmUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyOiBmYWxzZSB9KTtcbiAgfSxcblxuICBfaGFuZGxlVG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVUb3VjaFRhcChlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Ub3VjaFRhcCkgdGhpcy5wcm9wcy5vblRvdWNoVGFwKGUsIHRoaXMucHJvcHMueWVhcik7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gWWVhckJ1dHRvbjtcbn0se1wiLi4vZW5oYW5jZWQtYnV0dG9uXCI6MjksXCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcInJlYWN0XCI6MzE5fV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xudmFyIFdpbmRvd0xpc3RlbmFibGUgPSByZXF1aXJlKCcuL21peGlucy93aW5kb3ctbGlzdGVuYWJsZScpO1xudmFyIENzc0V2ZW50ID0gcmVxdWlyZSgnLi91dGlscy9jc3MtZXZlbnQnKTtcbnZhciBLZXlDb2RlID0gcmVxdWlyZSgnLi91dGlscy9rZXktY29kZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBGbGF0QnV0dG9uID0gcmVxdWlyZSgnLi9mbGF0LWJ1dHRvbicpO1xudmFyIE92ZXJsYXkgPSByZXF1aXJlKCcuL292ZXJsYXknKTtcbnZhciBQYXBlciA9IHJlcXVpcmUoJy4vcGFwZXInKTtcblxudmFyIFJlYWN0VHJhbnNpdGlvbkdyb3VwID0gUmVhY3QuYWRkb25zLlRyYW5zaXRpb25Hcm91cDtcblxudmFyIFRyYW5zaXRpb25JdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RyYW5zaXRpb25JdGVtJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdHlsZToge31cbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxFbnRlcjogZnVuY3Rpb24gY29tcG9uZW50V2lsbEVudGVyKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNwYWNpbmcgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZztcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc3R5bGU6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgJyArIHNwYWNpbmcuZGVza3RvcEtleWxpbmVJbmNyZW1lbnQgKyAncHgsIDApJ1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc2V0VGltZW91dChjYWxsYmFjaywgNDUwKTsgLy8gbWF0Y2hlcyB0cmFuc2l0aW9uIGR1cmF0aW9uXG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbExlYXZlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTGVhdmUoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzdHlsZToge1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAwLCAwKSdcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNldFRpbWVvdXQoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5pc01vdW50ZWQoKSkgY2FsbGJhY2soKTtcbiAgICB9KS5iaW5kKHRoaXMpLCA0NTApOyAvLyBtYXRjaGVzIHRyYW5zaXRpb24gZHVyYXRpb25cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3N0eWxlJ10pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeCh0aGlzLnN0YXRlLnN0eWxlLCBzdHlsZSkgfSksXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfVxufSk7XG5cbnZhciBEaWFsb2cgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRGlhbG9nJyxcblxuICBtaXhpbnM6IFtXaW5kb3dMaXN0ZW5hYmxlLCBTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGFjdGlvbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcbiAgICBhdXRvRGV0ZWN0V2luZG93SGVpZ2h0OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBhdXRvU2Nyb2xsQm9keUNvbnRlbnQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGJvZHlTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjb250ZW50Q2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbnRlbnRTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtb2RhbDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgb3BlbkltbWVkaWF0ZWx5OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvbkNsaWNrQXdheTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25EaXNtaXNzOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblNob3c6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIHJlcG9zaXRpb25PblVwZGF0ZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgdGl0bGU6IFJlYWN0LlByb3BUeXBlcy5ub2RlXG4gIH0sXG5cbiAgd2luZG93TGlzdGVuZXJzOiB7XG4gICAga2V5dXA6ICdfaGFuZGxlV2luZG93S2V5VXAnLFxuICAgIHJlc2l6ZTogJ19wb3NpdGlvbkRpYWxvZydcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXV0b0RldGVjdFdpbmRvd0hlaWdodDogZmFsc2UsXG4gICAgICBhdXRvU2Nyb2xsQm9keUNvbnRlbnQ6IGZhbHNlLFxuICAgICAgYWN0aW9uczogW10sXG4gICAgICBtb2RhbDogZmFsc2UsXG4gICAgICByZXBvc2l0aW9uT25VcGRhdGU6IHRydWVcbiAgICB9O1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvcGVuOiB0aGlzLnByb3BzLm9wZW5JbW1lZGlhdGVseSB8fCBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX3Bvc2l0aW9uRGlhbG9nKCk7XG4gICAgaWYgKHRoaXMucHJvcHMub3BlbkltbWVkaWF0ZWx5KSB7XG4gICAgICB0aGlzLnJlZnMuZGlhbG9nT3ZlcmxheS5wcmV2ZW50U2Nyb2xsaW5nKCk7XG4gICAgICB0aGlzLl9vblNob3coKTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5fcG9zaXRpb25EaWFsb2coKTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3BhY2luZyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nO1xuXG4gICAgdmFyIG1haW4gPSB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgIHpJbmRleDogMTAsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAtMTAwMDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCcwbXMnLCAnbGVmdCcsICc0NTBtcycpXG4gICAgfTtcblxuICAgIHZhciBjb250ZW50ID0ge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB3aWR0aDogJzc1JScsXG4gICAgICBtYXhXaWR0aDogc3BhY2luZy5kZXNrdG9wS2V5bGluZUluY3JlbWVudCAqIDEyLFxuICAgICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICAgIHpJbmRleDogMTBcbiAgICB9O1xuXG4gICAgdmFyIGJvZHkgPSB7XG4gICAgICBwYWRkaW5nOiBzcGFjaW5nLmRlc2t0b3BHdXR0ZXIsXG4gICAgICBvdmVyZmxvd1k6IHRoaXMucHJvcHMuYXV0b1Njcm9sbEJvZHlDb250ZW50ID8gJ2F1dG8nIDogJ2hpZGRlbicsXG4gICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nXG4gICAgfTtcblxuICAgIHZhciBndXR0ZXIgPSBzcGFjaW5nLmRlc2t0b3BHdXR0ZXIgKyAncHggJztcbiAgICB2YXIgdGl0bGUgPSB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICBwYWRkaW5nOiBndXR0ZXIgKyBndXR0ZXIgKyAnMCAnICsgZ3V0dGVyLFxuICAgICAgY29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlLnRleHRDb2xvcixcbiAgICAgIGZvbnRTaXplOiAyNCxcbiAgICAgIGxpbmVIZWlnaHQ6ICczMnB4JyxcbiAgICAgIGZvbnRXZWlnaHQ6ICc0MDAnXG4gICAgfTtcblxuICAgIGlmICh0aGlzLnN0YXRlLm9wZW4pIHtcbiAgICAgIG1haW4gPSB0aGlzLm1lcmdlQW5kUHJlZml4KG1haW4sIHtcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnMG1zJywgJ2xlZnQnLCAnMG1zJylcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtYWluOiB0aGlzLm1lcmdlQW5kUHJlZml4KG1haW4sIHRoaXMucHJvcHMuc3R5bGUpLFxuICAgICAgY29udGVudDogdGhpcy5tZXJnZUFuZFByZWZpeChjb250ZW50LCB0aGlzLnByb3BzLmNvbnRlbnRTdHlsZSksXG4gICAgICBwYXBlcjoge1xuICAgICAgICBiYWNrZ3JvdW5kOiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY2FudmFzQ29sb3JcbiAgICAgIH0sXG4gICAgICBib2R5OiB0aGlzLm1lcmdlU3R5bGVzKGJvZHksIHRoaXMucHJvcHMuYm9keVN0eWxlKSxcbiAgICAgIHRpdGxlOiB0aGlzLm1lcmdlU3R5bGVzKHRpdGxlLCB0aGlzLnByb3BzLnRpdGxlU3R5bGUpXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICB2YXIgYWN0aW9ucyA9IHRoaXMuX2dldEFjdGlvbnNDb250YWluZXIodGhpcy5wcm9wcy5hY3Rpb25zKTtcbiAgICB2YXIgdGl0bGUgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHRoaXMucHJvcHMudGl0bGUpIHtcbiAgICAgIC8vIElmIHRoZSB0aXRsZSBpcyBhIHN0cmluZywgd3JhcCBpbiBhbiBoMyB0YWcuXG4gICAgICAvLyBJZiBub3QsIGp1c3QgdXNlIGl0IGFzIGEgbm9kZS5cbiAgICAgIHRpdGxlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMucHJvcHMudGl0bGUpID09PSAnW29iamVjdCBTdHJpbmddJyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdoMycsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy50aXRsZSB9LFxuICAgICAgICB0aGlzLnByb3BzLnRpdGxlXG4gICAgICApIDogdGhpcy5wcm9wcy50aXRsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyByZWY6ICdjb250YWluZXInLCBzdHlsZTogc3R5bGVzLm1haW4gfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFJlYWN0VHJhbnNpdGlvbkdyb3VwLFxuICAgICAgICB7IGNvbXBvbmVudDogJ2RpdicsIHJlZjogJ2RpYWxvZ1dpbmRvdycgfSxcbiAgICAgICAgdGhpcy5zdGF0ZS5vcGVuICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgVHJhbnNpdGlvbkl0ZW0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNvbnRlbnRDbGFzc05hbWUsXG4gICAgICAgICAgICBzdHlsZTogc3R5bGVzLmNvbnRlbnQgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgUGFwZXIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMucGFwZXIsXG4gICAgICAgICAgICAgIHpEZXB0aDogNCB9LFxuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgeyByZWY6ICdkaWFsb2dDb250ZW50Jywgc3R5bGU6IHN0eWxlcy5ib2R5IH0sXG4gICAgICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBhY3Rpb25zXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChPdmVybGF5LCB7XG4gICAgICAgIHJlZjogJ2RpYWxvZ092ZXJsYXknLFxuICAgICAgICBzaG93OiB0aGlzLnN0YXRlLm9wZW4sXG4gICAgICAgIGF1dG9Mb2NrU2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5faGFuZGxlT3ZlcmxheVRvdWNoVGFwIH0pXG4gICAgKTtcbiAgfSxcblxuICBpc09wZW46IGZ1bmN0aW9uIGlzT3BlbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5vcGVuO1xuICB9LFxuXG4gIGRpc21pc3M6IGZ1bmN0aW9uIGRpc21pc3MoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBDc3NFdmVudC5vblRyYW5zaXRpb25FbmQodGhpcy5nZXRET01Ob2RlKCksIChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucmVmcy5kaWFsb2dPdmVybGF5LmFsbG93U2Nyb2xsaW5nKCk7XG4gICAgfSkuYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogZmFsc2UgfSk7XG4gICAgdGhpcy5fb25EaXNtaXNzKCk7XG4gIH0sXG5cbiAgc2hvdzogZnVuY3Rpb24gc2hvdygpIHtcbiAgICB0aGlzLnJlZnMuZGlhbG9nT3ZlcmxheS5wcmV2ZW50U2Nyb2xsaW5nKCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IHRydWUgfSwgdGhpcy5fb25TaG93KTtcbiAgfSxcblxuICBfZ2V0QWN0aW9uOiBmdW5jdGlvbiBfZ2V0QWN0aW9uKGFjdGlvbkpTT04sIGtleSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIHN0eWxlcyA9IHsgbWFyZ2luUmlnaHQ6IDggfTtcbiAgICB2YXIgcHJvcHMgPSB7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIHNlY29uZGFyeTogdHJ1ZSxcbiAgICAgIG9uQ2xpY2s6IGFjdGlvbkpTT04ub25DbGljayxcbiAgICAgIG9uVG91Y2hUYXA6IGZ1bmN0aW9uIG9uVG91Y2hUYXAoKSB7XG4gICAgICAgIGlmIChhY3Rpb25KU09OLm9uVG91Y2hUYXApIHtcbiAgICAgICAgICBhY3Rpb25KU09OLm9uVG91Y2hUYXAuY2FsbCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGFjdGlvbkpTT04ub25DbGljayB8fCBhY3Rpb25KU09OLm9uVG91Y2hUYXApKSB7XG4gICAgICAgICAgX3RoaXMzLmRpc21pc3MoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGxhYmVsOiBhY3Rpb25KU09OLnRleHQsXG4gICAgICBzdHlsZTogc3R5bGVzXG4gICAgfTtcbiAgICBpZiAoYWN0aW9uSlNPTi5yZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGFjdGlvbkpTT04ucmVmO1xuICAgICAgcHJvcHMua2V5Ym9hcmRGb2N1c2VkID0gYWN0aW9uSlNPTi5yZWYgPT09IHRoaXMucHJvcHMuYWN0aW9uRm9jdXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmxhdEJ1dHRvbiwgcHJvcHMpO1xuICB9LFxuXG4gIF9nZXRBY3Rpb25zQ29udGFpbmVyOiBmdW5jdGlvbiBfZ2V0QWN0aW9uc0NvbnRhaW5lcihhY3Rpb25zKSB7XG4gICAgdmFyIGFjdGlvbkNvbnRhaW5lciA9IHVuZGVmaW5lZDtcbiAgICB2YXIgYWN0aW9uT2JqZWN0cyA9IFtdO1xuICAgIHZhciBhY3Rpb25TdHlsZSA9IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgIHBhZGRpbmc6IDgsXG4gICAgICBtYXJnaW5Cb3R0b206IDgsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgdGV4dEFsaWduOiAncmlnaHQnXG4gICAgfTtcblxuICAgIGlmIChhY3Rpb25zLmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJyZW50QWN0aW9uID0gYWN0aW9uc1tpXTtcblxuICAgICAgICAvL2lmIHRoZSBjdXJyZW50IGFjdGlvbiBpc24ndCBhIHJlYWN0IG9iamVjdCwgY3JlYXRlIG9uZVxuICAgICAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGN1cnJlbnRBY3Rpb24pKSB7XG4gICAgICAgICAgY3VycmVudEFjdGlvbiA9IHRoaXMuX2dldEFjdGlvbihjdXJyZW50QWN0aW9uLCBpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFjdGlvbk9iamVjdHMucHVzaChjdXJyZW50QWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgYWN0aW9uQ29udGFpbmVyID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IGFjdGlvblN0eWxlIH0sXG4gICAgICAgIGFjdGlvbk9iamVjdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbkNvbnRhaW5lcjtcbiAgfSxcblxuICBfcG9zaXRpb25EaWFsb2c6IGZ1bmN0aW9uIF9wb3NpdGlvbkRpYWxvZygpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICB2YXIgY2xpZW50SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgfHwgZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7XG4gICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgICB2YXIgZGlhbG9nV2luZG93ID0gdGhpcy5yZWZzLmRpYWxvZ1dpbmRvdy5nZXRET01Ob2RlKCk7XG4gICAgICB2YXIgZGlhbG9nQ29udGVudCA9IHRoaXMucmVmcy5kaWFsb2dDb250ZW50LmdldERPTU5vZGUoKTtcbiAgICAgIHZhciBtaW5QYWRkaW5nVG9wID0gMTY7XG5cbiAgICAgIC8vUmVzZXQgdGhlIGhlaWdodCBpbiBjYXNlIHRoZSB3aW5kb3cgd2FzIHJlc2l6ZWQuXG4gICAgICBkaWFsb2dXaW5kb3cuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICBkaWFsb2dDb250ZW50LnN0eWxlLmhlaWdodCA9ICcnO1xuXG4gICAgICB2YXIgZGlhbG9nV2luZG93SGVpZ2h0ID0gZGlhbG9nV2luZG93Lm9mZnNldEhlaWdodDtcbiAgICAgIHZhciBwYWRkaW5nVG9wID0gKGNsaWVudEhlaWdodCAtIGRpYWxvZ1dpbmRvd0hlaWdodCkgLyAyIC0gNjQ7XG4gICAgICBpZiAocGFkZGluZ1RvcCA8IG1pblBhZGRpbmdUb3ApIHBhZGRpbmdUb3AgPSBtaW5QYWRkaW5nVG9wO1xuXG4gICAgICAvL1ZlcnRpY2FsbHkgY2VudGVyIHRoZSBkaWFsb2cgd2luZG93LCBidXQgbWFrZSBzdXJlIGl0IGRvZXNuJ3RcbiAgICAgIC8vdHJhbnNpdGlvbiB0byB0aGF0IHBvc2l0aW9uLlxuICAgICAgaWYgKHRoaXMucHJvcHMucmVwb3NpdGlvbk9uVXBkYXRlIHx8ICFjb250YWluZXIuc3R5bGUucGFkZGluZ1RvcCkge1xuICAgICAgICBjb250YWluZXIuc3R5bGUucGFkZGluZ1RvcCA9IHBhZGRpbmdUb3AgKyAncHgnO1xuICAgICAgfVxuXG4gICAgICAvLyBGb3JjZSBhIGhlaWdodCBpZiB0aGUgZGlhbG9nIGlzIHRhbGxlciB0aGFuIGNsaWVudEhlaWdodFxuICAgICAgaWYgKHRoaXMucHJvcHMuYXV0b0RldGVjdFdpbmRvd0hlaWdodCB8fCB0aGlzLnByb3BzLmF1dG9TY3JvbGxCb2R5Q29udGVudCkge1xuICAgICAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICAgICAgdmFyIG1heERpYWxvZ0NvbnRlbnRIZWlnaHQgPSBjbGllbnRIZWlnaHQgLSAyICogKHN0eWxlcy5ib2R5LnBhZGRpbmcgKyA2NCk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMudGl0bGUpIG1heERpYWxvZ0NvbnRlbnRIZWlnaHQgLT0gZGlhbG9nQ29udGVudC5wcmV2aW91c1NpYmxpbmcub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5hY3Rpb25zKSBtYXhEaWFsb2dDb250ZW50SGVpZ2h0IC09IGRpYWxvZ0NvbnRlbnQubmV4dFNpYmxpbmcub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgIGRpYWxvZ0NvbnRlbnQuc3R5bGUubWF4SGVpZ2h0ID0gbWF4RGlhbG9nQ29udGVudEhlaWdodCArICdweCc7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIF9vblNob3c6IGZ1bmN0aW9uIF9vblNob3coKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25TaG93KSB0aGlzLnByb3BzLm9uU2hvdygpO1xuICB9LFxuXG4gIF9vbkRpc21pc3M6IGZ1bmN0aW9uIF9vbkRpc21pc3MoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25EaXNtaXNzKSB0aGlzLnByb3BzLm9uRGlzbWlzcygpO1xuICB9LFxuXG4gIF9oYW5kbGVPdmVybGF5VG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVPdmVybGF5VG91Y2hUYXAoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLm1vZGFsKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc21pc3MoKTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2tBd2F5KSB0aGlzLnByb3BzLm9uQ2xpY2tBd2F5KCk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVXaW5kb3dLZXlVcDogZnVuY3Rpb24gX2hhbmRsZVdpbmRvd0tleVVwKGUpIHtcbiAgICBpZiAoZS5rZXlDb2RlID09PSBLZXlDb2RlLkVTQyAmJiAhdGhpcy5wcm9wcy5tb2RhbCkge1xuICAgICAgdGhpcy5kaXNtaXNzKCk7XG4gICAgfVxuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERpYWxvZztcbn0se1wiLi9mbGF0LWJ1dHRvblwiOjMyLFwiLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4vbWl4aW5zL3dpbmRvdy1saXN0ZW5hYmxlXCI6NTYsXCIuL292ZXJsYXlcIjo1NyxcIi4vcGFwZXJcIjo1OCxcIi4vc3R5bGVzL3RyYW5zaXRpb25zXCI6NzcsXCIuL3V0aWxzL2Nzcy1ldmVudFwiOjEyNixcIi4vdXRpbHMva2V5LWNvZGVcIjoxMzMsXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSwyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgQ2xpY2tBd2F5YWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL2NsaWNrLWF3YXlhYmxlJyk7XG52YXIgRm9udEljb24gPSByZXF1aXJlKCcuL2ZvbnQtaWNvbicpO1xudmFyIE1lbnUgPSByZXF1aXJlKCcuL21lbnUvbWVudScpO1xuXG52YXIgRHJvcERvd25JY29uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0Ryb3BEb3duSWNvbicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZSwgQ2xpY2tBd2F5YWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgbWVudUl0ZW1zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICBjbG9zZU9uTWVudUl0ZW1Ub3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgaWNvblN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGljb25DbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaWNvbkxpZ2F0dXJlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZW46IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xvc2VPbk1lbnVJdGVtVG91Y2hUYXA6IHRydWVcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHt9LFxuXG4gIGNvbXBvbmVudENsaWNrQXdheTogZnVuY3Rpb24gY29tcG9uZW50Q2xpY2tBd2F5KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiBmYWxzZSB9KTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3BhY2luZyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nO1xuICAgIHZhciBpY29uV2lkdGggPSA0ODtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgd2lkdGg6IGljb25XaWR0aCArICdweCAhaW1wb3J0YW50JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGhlaWdodDogc3BhY2luZy5kZXNrdG9wVG9vbGJhckhlaWdodCxcbiAgICAgICAgZm9udFNpemU6IHNwYWNpbmcuZGVza3RvcERyb3BEb3duTWVudUZvbnRTaXplLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgfSxcbiAgICAgIG1lbnU6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICByaWdodDogJy0xNHB4ICFpbXBvcnRhbnQnLFxuICAgICAgICB0b3A6ICc5cHggIWltcG9ydGFudCcsXG4gICAgICAgIG9wYWNpdHk6IHRoaXMuc3RhdGUub3BlbiA/IDEgOiAwXG4gICAgICB9LFxuICAgICAgbWVudUl0ZW06IHsgLy8gc2ltaWxhaXIgdG8gZHJvcCBkb3duIG1lbnUncyBtZW51IGl0ZW0gc3R5bGVzXG4gICAgICAgIHBhZGRpbmdSaWdodDogc3BhY2luZy5pY29uU2l6ZSArIHNwYWNpbmcuZGVza3RvcEd1dHRlckxlc3MgKiAyLFxuICAgICAgICBoZWlnaHQ6IHNwYWNpbmcuZGVza3RvcERyb3BEb3duTWVudUl0ZW1IZWlnaHQsXG4gICAgICAgIGxpbmVIZWlnaHQ6IHNwYWNpbmcuZGVza3RvcERyb3BEb3duTWVudUl0ZW1IZWlnaHQgKyAncHgnXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcbiAgICB2YXIgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW47XG4gICAgdmFyIG1lbnVJdGVtcyA9IF9wcm9wcy5tZW51SXRlbXM7XG4gICAgdmFyIGNsb3NlT25NZW51SXRlbVRvdWNoVGFwID0gX3Byb3BzLmNsb3NlT25NZW51SXRlbVRvdWNoVGFwO1xuICAgIHZhciBpY29uU3R5bGUgPSBfcHJvcHMuaWNvblN0eWxlO1xuICAgIHZhciBpY29uQ2xhc3NOYW1lID0gX3Byb3BzLmljb25DbGFzc05hbWU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3N0eWxlJywgJ2NoaWxkcmVuJywgJ21lbnVJdGVtcycsICdjbG9zZU9uTWVudUl0ZW1Ub3VjaFRhcCcsICdpY29uU3R5bGUnLCAnaWNvbkNsYXNzTmFtZSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5zdHlsZSkgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBvblRvdWNoVGFwOiB0aGlzLl9vbkNvbnRyb2xDbGljayB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEZvbnRJY29uLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogaWNvbkNsYXNzTmFtZSxcbiAgICAgICAgICAgIHN0eWxlOiBpY29uU3R5bGUgfSxcbiAgICAgICAgICB0aGlzLnByb3BzLmljb25MaWdhdHVyZVxuICAgICAgICApLFxuICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNZW51LCB7XG4gICAgICAgIHJlZjogJ21lbnVJdGVtcycsXG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5tZW51KSxcbiAgICAgICAgbWVudUl0ZW1zOiBtZW51SXRlbXMsXG4gICAgICAgIG1lbnVJdGVtU3R5bGU6IHN0eWxlcy5tZW51SXRlbSxcbiAgICAgICAgaGlkZWFibGU6IHRydWUsXG4gICAgICAgIHZpc2libGU6IHRoaXMuc3RhdGUub3BlbixcbiAgICAgICAgb25JdGVtVGFwOiB0aGlzLl9vbk1lbnVJdGVtQ2xpY2sgfSlcbiAgICApO1xuICB9LFxuXG4gIF9vbkNvbnRyb2xDbGljazogZnVuY3Rpb24gX29uQ29udHJvbENsaWNrKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiAhdGhpcy5zdGF0ZS5vcGVuIH0pO1xuICB9LFxuXG4gIF9vbk1lbnVJdGVtQ2xpY2s6IGZ1bmN0aW9uIF9vbk1lbnVJdGVtQ2xpY2soZSwga2V5LCBwYXlsb2FkKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHRoaXMucHJvcHMub25DaGFuZ2UoZSwga2V5LCBwYXlsb2FkKTtcblxuICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25NZW51SXRlbVRvdWNoVGFwKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogZmFsc2UgfSk7XG4gICAgfVxuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcm9wRG93bkljb247XG5cbi8vIFRoaXMgY29tcG9uZW50IGNhbiBiZSBkZXByZWNhdGVkIG9uY2UgLi9tZW51L21lbnUgaGFzIGJlZW4gZGVwcmVjYXRlZC5cbi8vIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4vLyAgIGNvbnNvbGUud2FybignRHJvcERvd25JY29uIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBJY29uTWVudSBpbnN0ZWFkLicpO1xuLy8gfVxufSx7XCIuL2ZvbnQtaWNvblwiOjM0LFwiLi9tZW51L21lbnVcIjo0NixcIi4vbWl4aW5zL2NsaWNrLWF3YXlhYmxlXCI6NTEsXCIuL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi9zdHlsZXMvdHJhbnNpdGlvbnNcIjo3NyxcInJlYWN0XCI6MzE5fV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgS2V5Q29kZSA9IHJlcXVpcmUoJy4vdXRpbHMva2V5LWNvZGUnKTtcbnZhciBEcm9wRG93bkFycm93ID0gcmVxdWlyZSgnLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9hcnJvdy1kcm9wLWRvd24nKTtcbnZhciBQYXBlciA9IHJlcXVpcmUoJy4vcGFwZXInKTtcbnZhciBNZW51ID0gcmVxdWlyZSgnLi9tZW51L21lbnUnKTtcbnZhciBDbGVhckZpeCA9IHJlcXVpcmUoJy4vY2xlYXJmaXgnKTtcblxudmFyIERyb3BEb3duTWVudSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdEcm9wRG93bk1lbnUnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgLy8gVGhlIG5lc3RlZCBzdHlsZXMgZm9yIGRyb3AtZG93bi1tZW51IGFyZSBtb2RpZmllZCBieSB0b29sYmFyIGFuZCBwb3NzaWJseVxuICAvLyBvdGhlciB1c2VyIGNvbXBvbmVudHMsIHNvIGl0IHdpbGwgZ2l2ZSBmdWxsIGFjY2VzcyB0byBpdHMganMgc3R5bGVzIHJhdGhlclxuICAvLyB0aGFuIGp1c3QgdGhlIHBhcmVudC5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRpc3BsYXlNZW1iZXI6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgdmFsdWVNZW1iZXI6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgYXV0b1dpZHRoOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgbWVudUl0ZW1zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICBtZW51SXRlbVN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIHVuZGVybGluZVN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGljb25TdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsYWJlbFN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlbGVjdGVkSW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXJcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXV0b1dpZHRoOiB0cnVlLFxuICAgICAgdmFsdWVNZW1iZXI6ICdwYXlsb2FkJyxcbiAgICAgIGRpc3BsYXlNZW1iZXI6ICd0ZXh0J1xuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgc2VsZWN0ZWRJbmRleDogdGhpcy5faXNDb250cm9sbGVkKCkgPyBudWxsIDogdGhpcy5wcm9wcy5zZWxlY3RlZEluZGV4IHx8IDBcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hdXRvV2lkdGgpIHRoaXMuX3NldFdpZHRoKCk7XG4gICAgaWYgKHRoaXMucHJvcHMuaGFzT3duUHJvcGVydHkoJ3NlbGVjdGVkSW5kZXgnKSkgdGhpcy5fc2V0U2VsZWN0ZWRJbmRleCh0aGlzLnByb3BzKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLmF1dG9XaWR0aCkgdGhpcy5fc2V0V2lkdGgoKTtcbiAgICBpZiAobmV4dFByb3BzLmhhc093blByb3BlcnR5KCd2YWx1ZScpIHx8IG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWVMaW5rJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSgnc2VsZWN0ZWRJbmRleCcpKSB7XG4gICAgICB0aGlzLl9zZXRTZWxlY3RlZEluZGV4KG5leHRQcm9wcyk7XG4gICAgfVxuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciB6SW5kZXggPSA1OyAvLyBBcyBBcHBCYXJcbiAgICB2YXIgc3BhY2luZyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nO1xuICAgIHZhciBhY2NlbnRDb2xvciA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQuZHJvcERvd25NZW51LmFjY2VudENvbG9yO1xuICAgIHZhciBiYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50Lm1lbnUuYmFja2dyb3VuZENvbG9yO1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKSxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICBoZWlnaHQ6IHNwYWNpbmcuZGVza3RvcFN1YmhlYWRlckhlaWdodCxcbiAgICAgICAgZm9udFNpemU6IHNwYWNpbmcuZGVza3RvcERyb3BEb3duTWVudUZvbnRTaXplLFxuICAgICAgICBvdXRsaW5lOiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICBjb250cm9sOiB7XG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICBwb3NpdGlvbjogJ3N0YXRpYycsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9LFxuICAgICAgY29udHJvbEJnOiB7XG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBvcGFjaXR5OiAwXG4gICAgICB9LFxuICAgICAgaWNvbjoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAoc3BhY2luZy5kZXNrdG9wVG9vbGJhckhlaWdodCAtIDI0KSAvIDIsXG4gICAgICAgIHJpZ2h0OiBzcGFjaW5nLmRlc2t0b3BHdXR0ZXJMZXNzLFxuICAgICAgICBmaWxsOiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmRyb3BEb3duTWVudS5hY2NlbnRDb2xvclxuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKSxcbiAgICAgICAgbGluZUhlaWdodDogc3BhY2luZy5kZXNrdG9wVG9vbGJhckhlaWdodCArICdweCcsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZy5kZXNrdG9wR3V0dGVyLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIGNvbG9yOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZS50ZXh0Q29sb3JcbiAgICAgIH0sXG4gICAgICB1bmRlcmxpbmU6IHtcbiAgICAgICAgYm9yZGVyVG9wOiAnc29saWQgMXB4ICcgKyBhY2NlbnRDb2xvcixcbiAgICAgICAgbWFyZ2luOiAnLTFweCAnICsgc3BhY2luZy5kZXNrdG9wR3V0dGVyICsgJ3B4J1xuICAgICAgfSxcbiAgICAgIG1lbnU6IHtcbiAgICAgICAgekluZGV4OiB6SW5kZXggKyAxXG4gICAgICB9LFxuICAgICAgbWVudUl0ZW06IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nLmljb25TaXplICsgc3BhY2luZy5kZXNrdG9wR3V0dGVyTGVzcyArIHNwYWNpbmcuZGVza3RvcEd1dHRlck1pbmksXG4gICAgICAgIGhlaWdodDogc3BhY2luZy5kZXNrdG9wRHJvcERvd25NZW51SXRlbUhlaWdodCxcbiAgICAgICAgbGluZUhlaWdodDogc3BhY2luZy5kZXNrdG9wRHJvcERvd25NZW51SXRlbUhlaWdodCArICdweCcsXG4gICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gICAgICB9LFxuICAgICAgcm9vdFdoZW5PcGVuOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH0sXG4gICAgICBsYWJlbFdoZW5PcGVuOiB7XG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIHRvcDogc3BhY2luZy5kZXNrdG9wVG9vbGJhckhlaWdodCAvIDJcbiAgICAgIH0sXG4gICAgICBvdmVybGF5OiB7XG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB6SW5kZXg6IHpJbmRleFxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIGdldElucHV0Tm9kZTogZnVuY3Rpb24gZ2V0SW5wdXROb2RlKCkge1xuICAgIHZhciByb290ID0gdGhpcy5yZWZzLnJvb3Q7XG4gICAgdmFyIGl0ZW0gPSB0aGlzLnByb3BzLm1lbnVJdGVtc1t0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXhdO1xuICAgIGlmIChpdGVtKSB7XG4gICAgICByb290LnZhbHVlID0gaXRlbVt0aGlzLnByb3BzLmRpc3BsYXlNZW1iZXJdO1xuICAgIH1cblxuICAgIHJldHVybiByb290O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgdmFyIHNlbGVjdGVkSW5kZXggPSB0aGlzLl9pc0NvbnRyb2xsZWQoKSA/IG51bGwgOiB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXg7XG4gICAgdmFyIGRpc3BsYXlWYWx1ZSA9ICcnO1xuICAgIGlmIChzZWxlY3RlZEluZGV4KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmFzc2VydCghIXRoaXMucHJvcHMubWVudUl0ZW1zW3NlbGVjdGVkSW5kZXhdLCAnU2VsZWN0ZWRJbmRleCBvZiAnICsgc2VsZWN0ZWRJbmRleCArICcgZG9lcyBub3QgZXhpc3QgaW4gbWVudUl0ZW1zLicpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZU1lbWJlciAmJiB0aGlzLl9pc0NvbnRyb2xsZWQoKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnByb3BzLmhhc093blByb3BlcnR5KCd2YWx1ZScpID8gdGhpcy5wcm9wcy52YWx1ZSA6IHRoaXMucHJvcHMudmFsdWVMaW5rLnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucHJvcHMubWVudUl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tZW51SXRlbXNbaV1bdGhpcy5wcm9wcy52YWx1ZU1lbWJlcl0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzZWxlY3RlZEl0ZW0gPSB0aGlzLnByb3BzLm1lbnVJdGVtc1tzZWxlY3RlZEluZGV4XTtcbiAgICBpZiAoc2VsZWN0ZWRJdGVtKSB7XG4gICAgICBkaXNwbGF5VmFsdWUgPSBzZWxlY3RlZEl0ZW1bdGhpcy5wcm9wcy5kaXNwbGF5TWVtYmVyXTtcbiAgICB9XG5cbiAgICB2YXIgbWVudUl0ZW1zID0gdGhpcy5wcm9wcy5tZW51SXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBpdGVtLnRleHQgPSBpdGVtW190aGlzLnByb3BzLmRpc3BsYXlNZW1iZXJdO1xuICAgICAgaXRlbS5wYXlsb2FkID0gaXRlbVtfdGhpcy5wcm9wcy52YWx1ZU1lbWJlcl07XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9KTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7XG4gICAgICAgIHJlZjogJ3Jvb3QnLFxuICAgICAgICBvbktleURvd246IHRoaXMuX29uS2V5RG93bixcbiAgICAgICAgb25Gb2N1czogdGhpcy5wcm9wcy5vbkZvY3VzLFxuICAgICAgICBvbkJsdXI6IHRoaXMucHJvcHMub25CbHVyLFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5zdGF0ZS5vcGVuICYmIHN0eWxlcy5yb290V2hlbk9wZW4sIHRoaXMucHJvcHMuc3R5bGUpIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBDbGVhckZpeCxcbiAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuY29udHJvbCksIG9uVG91Y2hUYXA6IHRoaXMuX29uQ29udHJvbENsaWNrIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmNvbnRyb2xCZyksIHpEZXB0aDogMCB9KSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5sYWJlbCwgdGhpcy5zdGF0ZS5vcGVuICYmIHN0eWxlcy5sYWJlbFdoZW5PcGVuLCB0aGlzLnByb3BzLmxhYmVsU3R5bGUpIH0sXG4gICAgICAgICAgZGlzcGxheVZhbHVlXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcERvd25BcnJvdywgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaWNvbiwgdGhpcy5wcm9wcy5pY29uU3R5bGUpIH0pLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy51bmRlcmxpbmUsIHRoaXMucHJvcHMudW5kZXJsaW5lU3R5bGUpIH0pXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNZW51LCB7XG4gICAgICAgIHJlZjogJ21lbnVJdGVtcycsXG4gICAgICAgIGF1dG9XaWR0aDogdGhpcy5wcm9wcy5hdXRvV2lkdGgsXG4gICAgICAgIHNlbGVjdGVkSW5kZXg6IHNlbGVjdGVkSW5kZXgsXG4gICAgICAgIG1lbnVJdGVtczogbWVudUl0ZW1zLFxuICAgICAgICBzdHlsZTogc3R5bGVzLm1lbnUsXG4gICAgICAgIG1lbnVJdGVtU3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1lbnVJdGVtLCB0aGlzLnByb3BzLm1lbnVJdGVtU3R5bGUpLFxuICAgICAgICBoaWRlYWJsZTogdHJ1ZSxcbiAgICAgICAgdmlzaWJsZTogdGhpcy5zdGF0ZS5vcGVuLFxuICAgICAgICBvblJlcXVlc3RDbG9zZTogdGhpcy5fb25NZW51UmVxdWVzdENsb3NlLFxuICAgICAgICBvbkl0ZW1UYXA6IHRoaXMuX29uTWVudUl0ZW1DbGljayB9KSxcbiAgICAgIHRoaXMuc3RhdGUub3BlbiAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMub3ZlcmxheSwgb25Ub3VjaFRhcDogdGhpcy5faGFuZGxlT3ZlcmxheVRvdWNoVGFwIH0pXG4gICAgKTtcbiAgfSxcblxuICBfc2V0V2lkdGg6IGZ1bmN0aW9uIF9zZXRXaWR0aCgpIHtcbiAgICB2YXIgZWwgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgbWVudUl0ZW1zRG9tID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLm1lbnVJdGVtcyk7XG4gICAgaWYgKCF0aGlzLnByb3BzLnN0eWxlIHx8ICF0aGlzLnByb3BzLnN0eWxlLmhhc093blByb3BlcnR5KCd3aWR0aCcpKSB7XG4gICAgICBlbC5zdHlsZS53aWR0aCA9ICdhdXRvJztcbiAgICAgIGVsLnN0eWxlLndpZHRoID0gbWVudUl0ZW1zRG9tLm9mZnNldFdpZHRoICsgJ3B4JztcbiAgICB9XG4gIH0sXG5cbiAgX3NldFNlbGVjdGVkSW5kZXg6IGZ1bmN0aW9uIF9zZXRTZWxlY3RlZEluZGV4KHByb3BzKSB7XG4gICAgdmFyIHNlbGVjdGVkSW5kZXggPSBwcm9wcy5zZWxlY3RlZEluZGV4O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VsZWN0ZWRJbmRleCA8IDApIHtcbiAgICAgIGNvbnNvbGUud2FybignQ2Fubm90IHNldCBzZWxlY3RlZEluZGV4IHRvIGEgbmVnYXRpdmUgaW5kZXguJywgc2VsZWN0ZWRJbmRleCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkSW5kZXg6IHNlbGVjdGVkSW5kZXggPiAtMSA/IHNlbGVjdGVkSW5kZXggOiAwIH0pO1xuICB9LFxuXG4gIF9vbkNvbnRyb2xDbGljazogZnVuY3Rpb24gX29uQ29udHJvbENsaWNrKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiAhdGhpcy5zdGF0ZS5vcGVuIH0pO1xuICB9LFxuXG4gIF9vbktleURvd246IGZ1bmN0aW9uIF9vbktleURvd24oZSkge1xuICAgIHN3aXRjaCAoZS53aGljaCkge1xuICAgICAgY2FzZSBLZXlDb2RlLlVQOlxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUub3Blbikge1xuICAgICAgICAgIHRoaXMuX3NlbGVjdFByZXZpb3VzSXRlbSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChlLmFsdEtleSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IGZhbHNlIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgS2V5Q29kZS5ET1dOOlxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUub3Blbikge1xuICAgICAgICAgIGlmIChlLmFsdEtleSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IHRydWUgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdE5leHRJdGVtKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBLZXlDb2RlLkVOVEVSOlxuICAgICAgY2FzZSBLZXlDb2RlLlNQQUNFOlxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogdHJ1ZSB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47IC8vaW1wb3J0YW50XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfSxcblxuICBfb25NZW51SXRlbUNsaWNrOiBmdW5jdGlvbiBfb25NZW51SXRlbUNsaWNrKGUsIGtleSwgcGF5bG9hZCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlICYmIHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleCAhPT0ga2V5KSB7XG4gICAgICB2YXIgc2VsZWN0ZWRJdGVtID0gdGhpcy5wcm9wcy5tZW51SXRlbXNba2V5XTtcbiAgICAgIGlmIChzZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgZS50YXJnZXQudmFsdWUgPSBzZWxlY3RlZEl0ZW1bdGhpcy5wcm9wcy52YWx1ZU1lbWJlcl07XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlTGluaykge1xuICAgICAgICB0aGlzLnByb3BzLnZhbHVlTGluay5yZXF1ZXN0Q2hhbmdlKGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UoZSwga2V5LCBwYXlsb2FkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNlbGVjdGVkSW5kZXg6IGtleSxcbiAgICAgIHZhbHVlOiBlLnRhcmdldC52YWx1ZSxcbiAgICAgIG9wZW46IGZhbHNlXG4gICAgfSk7XG4gIH0sXG5cbiAgX29uTWVudVJlcXVlc3RDbG9zZTogZnVuY3Rpb24gX29uTWVudVJlcXVlc3RDbG9zZSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogZmFsc2UgfSk7XG4gIH0sXG5cbiAgX3NlbGVjdFByZXZpb3VzSXRlbTogZnVuY3Rpb24gX3NlbGVjdFByZXZpb3VzSXRlbSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRJbmRleDogTWF0aC5tYXgodGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4IC0gMSwgMCkgfSk7XG4gIH0sXG5cbiAgX3NlbGVjdE5leHRJdGVtOiBmdW5jdGlvbiBfc2VsZWN0TmV4dEl0ZW0oKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkSW5kZXg6IE1hdGgubWluKHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleCArIDEsIHRoaXMucHJvcHMubWVudUl0ZW1zLmxlbmd0aCAtIDEpIH0pO1xuICB9LFxuXG4gIF9oYW5kbGVPdmVybGF5VG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVPdmVybGF5VG91Y2hUYXAoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBvcGVuOiBmYWxzZVxuICAgIH0pO1xuICB9LFxuXG4gIF9pc0NvbnRyb2xsZWQ6IGZ1bmN0aW9uIF9pc0NvbnRyb2xsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHwgdGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWVMaW5rJyk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRHJvcERvd25NZW51O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vY2xlYXJmaXhcIjoxNixcIi4vbWVudS9tZW51XCI6NDYsXCIuL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi9wYXBlclwiOjU4LFwiLi9zdHlsZXMvdHJhbnNpdGlvbnNcIjo3NyxcIi4vc3ZnLWljb25zL25hdmlnYXRpb24vYXJyb3ctZHJvcC1kb3duXCI6ODQsXCIuL3V0aWxzL2tleS1jb2RlXCI6MTMzLFwiX3Byb2Nlc3NcIjoxLFwicmVhY3RcIjozMTl9XSwyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgUHVyZVJlbmRlck1peGluID0gUmVhY3QuYWRkb25zLlB1cmVSZW5kZXJNaXhpbjtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBDb2xvcnMgPSByZXF1aXJlKCcuL3N0eWxlcy9jb2xvcnMnKTtcbnZhciBDaGlsZHJlbiA9IHJlcXVpcmUoJy4vdXRpbHMvY2hpbGRyZW4nKTtcbnZhciBLZXlDb2RlID0gcmVxdWlyZSgnLi91dGlscy9rZXktY29kZScpO1xudmFyIEZvY3VzUmlwcGxlID0gcmVxdWlyZSgnLi9yaXBwbGVzL2ZvY3VzLXJpcHBsZScpO1xudmFyIFRvdWNoUmlwcGxlID0gcmVxdWlyZSgnLi9yaXBwbGVzL3RvdWNoLXJpcHBsZScpO1xuXG52YXIgc3R5bGVJbmplY3RlZCA9IGZhbHNlO1xudmFyIHRhYlByZXNzZWQgPSBmYWxzZTtcblxudmFyIEVuaGFuY2VkQnV0dG9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0VuaGFuY2VkQnV0dG9uJyxcblxuICBtaXhpbnM6IFtQdXJlUmVuZGVyTWl4aW4sIFN0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY2VudGVyUmlwcGxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBjb250YWluZXJFbGVtZW50OiBSZWFjdC5Qcm9wVHlwZXMub25lT2ZUeXBlKFtSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCBSZWFjdC5Qcm9wVHlwZXMuZWxlbWVudF0pLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVLZXlib2FyZEZvY3VzOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlVG91Y2hSaXBwbGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGtleWJvYXJkRm9jdXNlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgbGlua0J1dHRvbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZm9jdXNSaXBwbGVDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0b3VjaFJpcHBsZUNvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGZvY3VzUmlwcGxlT3BhY2l0eTogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICB0b3VjaFJpcHBsZU9wYWNpdHk6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgb25CbHVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkZvY3VzOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbktleWJvYXJkRm9jdXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uS2V5RG93bjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25LZXlVcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Ub3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgdGFiSW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXJcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGFpbmVyRWxlbWVudDogJ2J1dHRvbicsXG4gICAgICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHt9LFxuICAgICAgb25Gb2N1czogZnVuY3Rpb24gb25Gb2N1cygpIHt9LFxuICAgICAgb25LZXlib2FyZEZvY3VzOiBmdW5jdGlvbiBvbktleWJvYXJkRm9jdXMoKSB7fSxcbiAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24gb25LZXlEb3duKCkge30sXG4gICAgICBvbktleVVwOiBmdW5jdGlvbiBvbktleVVwKCkge30sXG4gICAgICBvblRvdWNoVGFwOiBmdW5jdGlvbiBvblRvdWNoVGFwKCkge30sXG4gICAgICB0YWJJbmRleDogMCxcbiAgICAgIHR5cGU6ICdidXR0b24nXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6ICF0aGlzLnByb3BzLmRpc2FibGVkICYmIHRoaXMucHJvcHMua2V5Ym9hcmRGb2N1c2VkICYmICF0aGlzLnByb3BzLmRpc2FibGVLZXlib2FyZEZvY3VzXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmICgobmV4dFByb3BzLmRpc2FibGVkIHx8IG5leHRQcm9wcy5kaXNhYmxlS2V5Ym9hcmRGb2N1cykgJiYgdGhpcy5zdGF0ZS5pc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzS2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSB9KTtcbiAgICAgIGlmIChuZXh0UHJvcHMub25LZXlib2FyZEZvY3VzKSB7XG4gICAgICAgIG5leHRQcm9wcy5vbktleWJvYXJkRm9jdXMobnVsbCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCFzdHlsZUluamVjdGVkKSB7XG4gICAgICAvLyBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggNCsuXG4gICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgc3R5bGUuaW5uZXJIVE1MID0gJ1xcbiAgICAgICAgYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxcbiAgICAgICAgaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xcbiAgICAgICAgICBib3JkZXI6IDA7XFxuICAgICAgICAgIHBhZGRpbmc6IDA7XFxuICAgICAgICB9XFxuICAgICAgJztcblxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICBzdHlsZUluamVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGNlbnRlclJpcHBsZSA9IF9wcm9wcy5jZW50ZXJSaXBwbGU7XG4gICAgdmFyIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuO1xuICAgIHZhciBjb250YWluZXJFbGVtZW50ID0gX3Byb3BzLmNvbnRhaW5lckVsZW1lbnQ7XG4gICAgdmFyIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkO1xuICAgIHZhciBkaXNhYmxlRm9jdXNSaXBwbGUgPSBfcHJvcHMuZGlzYWJsZUZvY3VzUmlwcGxlO1xuICAgIHZhciBkaXNhYmxlS2V5Ym9hcmRGb2N1cyA9IF9wcm9wcy5kaXNhYmxlS2V5Ym9hcmRGb2N1cztcbiAgICB2YXIgZGlzYWJsZVRvdWNoUmlwcGxlID0gX3Byb3BzLmRpc2FibGVUb3VjaFJpcHBsZTtcbiAgICB2YXIgZm9jdXNSaXBwbGVDb2xvciA9IF9wcm9wcy5mb2N1c1JpcHBsZUNvbG9yO1xuICAgIHZhciBmb2N1c1JpcHBsZU9wYWNpdHkgPSBfcHJvcHMuZm9jdXNSaXBwbGVPcGFjaXR5O1xuICAgIHZhciBsaW5rQnV0dG9uID0gX3Byb3BzLmxpbmtCdXR0b247XG4gICAgdmFyIHRvdWNoUmlwcGxlQ29sb3IgPSBfcHJvcHMudG91Y2hSaXBwbGVDb2xvcjtcbiAgICB2YXIgdG91Y2hSaXBwbGVPcGFjaXR5ID0gX3Byb3BzLnRvdWNoUmlwcGxlT3BhY2l0eTtcbiAgICB2YXIgb25CbHVyID0gX3Byb3BzLm9uQmx1cjtcbiAgICB2YXIgb25Gb2N1cyA9IF9wcm9wcy5vbkZvY3VzO1xuICAgIHZhciBvbktleVVwID0gX3Byb3BzLm9uS2V5VXA7XG4gICAgdmFyIG9uS2V5RG93biA9IF9wcm9wcy5vbktleURvd247XG4gICAgdmFyIG9uVG91Y2hUYXAgPSBfcHJvcHMub25Ub3VjaFRhcDtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG4gICAgdmFyIHRhYkluZGV4ID0gX3Byb3BzLnRhYkluZGV4O1xuICAgIHZhciB0eXBlID0gX3Byb3BzLnR5cGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NlbnRlclJpcHBsZScsICdjaGlsZHJlbicsICdjb250YWluZXJFbGVtZW50JywgJ2Rpc2FibGVkJywgJ2Rpc2FibGVGb2N1c1JpcHBsZScsICdkaXNhYmxlS2V5Ym9hcmRGb2N1cycsICdkaXNhYmxlVG91Y2hSaXBwbGUnLCAnZm9jdXNSaXBwbGVDb2xvcicsICdmb2N1c1JpcHBsZU9wYWNpdHknLCAnbGlua0J1dHRvbicsICd0b3VjaFJpcHBsZUNvbG9yJywgJ3RvdWNoUmlwcGxlT3BhY2l0eScsICdvbkJsdXInLCAnb25Gb2N1cycsICdvbktleVVwJywgJ29uS2V5RG93bicsICdvblRvdWNoVGFwJywgJ3N0eWxlJywgJ3RhYkluZGV4JywgJ3R5cGUnXSk7XG5cbiAgICB2YXIgbWVyZ2VkU3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBib3JkZXI6IDEwLFxuICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICAgIGZvbnRGYW1pbHk6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb250ZW50Rm9udEZhbWlseSxcbiAgICAgIHRhcEhpZ2hsaWdodENvbG9yOiBDb2xvcnMudHJhbnNwYXJlbnQsXG4gICAgICBhcHBlYXJhbmNlOiBsaW5rQnV0dG9uID8gbnVsbCA6ICdidXR0b24nLFxuICAgICAgY3Vyc29yOiBkaXNhYmxlZCA/ICdkZWZhdWx0JyA6ICdwb2ludGVyJyxcbiAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICBvdXRsaW5lOiAnbm9uZSdcbiAgICB9LCBzdHlsZSk7XG5cbiAgICBpZiAoZGlzYWJsZWQgJiYgbGlua0J1dHRvbikge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgICAgc3R5bGU6IG1lcmdlZFN0eWxlcyB9KSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGJ1dHRvblByb3BzID0gX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICBzdHlsZTogbWVyZ2VkU3R5bGVzLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgb25CbHVyOiB0aGlzLl9oYW5kbGVCbHVyLFxuICAgICAgb25Gb2N1czogdGhpcy5faGFuZGxlRm9jdXMsXG4gICAgICBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVUb3VjaFRhcCxcbiAgICAgIG9uS2V5VXA6IHRoaXMuX2hhbmRsZUtleVVwLFxuICAgICAgb25LZXlEb3duOiB0aGlzLl9oYW5kbGVLZXlEb3duLFxuICAgICAgdGFiSW5kZXg6IHRhYkluZGV4LFxuICAgICAgdHlwZTogdHlwZVxuICAgIH0pO1xuICAgIHZhciBidXR0b25DaGlsZHJlbiA9IHRoaXMuX2NyZWF0ZUJ1dHRvbkNoaWxkcmVuKCk7XG5cbiAgICByZXR1cm4gUmVhY3QuaXNWYWxpZEVsZW1lbnQoY29udGFpbmVyRWxlbWVudCkgPyBSZWFjdC5jbG9uZUVsZW1lbnQoY29udGFpbmVyRWxlbWVudCwgYnV0dG9uUHJvcHMsIGJ1dHRvbkNoaWxkcmVuKSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQobGlua0J1dHRvbiA/ICdhJyA6IGNvbnRhaW5lckVsZW1lbnQsIGJ1dHRvblByb3BzLCBidXR0b25DaGlsZHJlbik7XG4gIH0sXG5cbiAgaXNLZXlib2FyZEZvY3VzZWQ6IGZ1bmN0aW9uIGlzS2V5Ym9hcmRGb2N1c2VkKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkO1xuICB9LFxuXG4gIHJlbW92ZUtleWJvYXJkRm9jdXM6IGZ1bmN0aW9uIHJlbW92ZUtleWJvYXJkRm9jdXMoZSkge1xuICAgIGlmICh0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaXNLZXlib2FyZEZvY3VzZWQ6IGZhbHNlIH0pO1xuICAgICAgdGhpcy5wcm9wcy5vbktleWJvYXJkRm9jdXMoZSwgZmFsc2UpO1xuICAgIH1cbiAgfSxcblxuICBzZXRLZXlib2FyZEZvY3VzOiBmdW5jdGlvbiBzZXRLZXlib2FyZEZvY3VzKGUpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0tleWJvYXJkRm9jdXNlZDogdHJ1ZSB9KTtcbiAgICAgIHRoaXMucHJvcHMub25LZXlib2FyZEZvY3VzKGUsIHRydWUpO1xuICAgIH1cbiAgfSxcblxuICBfY2FuY2VsRm9jdXNUaW1lb3V0OiBmdW5jdGlvbiBfY2FuY2VsRm9jdXNUaW1lb3V0KCkge1xuICAgIGlmICh0aGlzLl9mb2N1c1RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9mb2N1c1RpbWVvdXQpO1xuICAgICAgdGhpcy5fZm9jdXNUaW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgX2NyZWF0ZUJ1dHRvbkNoaWxkcmVuOiBmdW5jdGlvbiBfY3JlYXRlQnV0dG9uQ2hpbGRyZW4oKSB7XG4gICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzO1xuICAgIHZhciBjZW50ZXJSaXBwbGUgPSBfcHJvcHMyLmNlbnRlclJpcHBsZTtcbiAgICB2YXIgY2hpbGRyZW4gPSBfcHJvcHMyLmNoaWxkcmVuO1xuICAgIHZhciBkaXNhYmxlZCA9IF9wcm9wczIuZGlzYWJsZWQ7XG4gICAgdmFyIGRpc2FibGVGb2N1c1JpcHBsZSA9IF9wcm9wczIuZGlzYWJsZUZvY3VzUmlwcGxlO1xuICAgIHZhciBkaXNhYmxlS2V5Ym9hcmRGb2N1cyA9IF9wcm9wczIuZGlzYWJsZUtleWJvYXJkRm9jdXM7XG4gICAgdmFyIGRpc2FibGVUb3VjaFJpcHBsZSA9IF9wcm9wczIuZGlzYWJsZVRvdWNoUmlwcGxlO1xuICAgIHZhciBmb2N1c1JpcHBsZUNvbG9yID0gX3Byb3BzMi5mb2N1c1JpcHBsZUNvbG9yO1xuICAgIHZhciBmb2N1c1JpcHBsZU9wYWNpdHkgPSBfcHJvcHMyLmZvY3VzUmlwcGxlT3BhY2l0eTtcbiAgICB2YXIgdG91Y2hSaXBwbGVDb2xvciA9IF9wcm9wczIudG91Y2hSaXBwbGVDb2xvcjtcbiAgICB2YXIgdG91Y2hSaXBwbGVPcGFjaXR5ID0gX3Byb3BzMi50b3VjaFJpcHBsZU9wYWNpdHk7XG4gICAgdmFyIGlzS2V5Ym9hcmRGb2N1c2VkID0gdGhpcy5zdGF0ZS5pc0tleWJvYXJkRm9jdXNlZDtcblxuICAgIC8vRm9jdXMgUmlwcGxlXG4gICAgdmFyIGZvY3VzUmlwcGxlID0gaXNLZXlib2FyZEZvY3VzZWQgJiYgIWRpc2FibGVkICYmICFkaXNhYmxlRm9jdXNSaXBwbGUgJiYgIWRpc2FibGVLZXlib2FyZEZvY3VzID8gUmVhY3QuY3JlYXRlRWxlbWVudChGb2N1c1JpcHBsZSwge1xuICAgICAgY29sb3I6IGZvY3VzUmlwcGxlQ29sb3IsXG4gICAgICBvcGFjaXR5OiBmb2N1c1JpcHBsZU9wYWNpdHksXG4gICAgICBzaG93OiBpc0tleWJvYXJkRm9jdXNlZFxuICAgIH0pIDogdW5kZWZpbmVkO1xuXG4gICAgLy9Ub3VjaCBSaXBwbGVcbiAgICB2YXIgdG91Y2hSaXBwbGUgPSAhZGlzYWJsZWQgJiYgIWRpc2FibGVUb3VjaFJpcHBsZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUb3VjaFJpcHBsZSxcbiAgICAgIHtcbiAgICAgICAgY2VudGVyUmlwcGxlOiBjZW50ZXJSaXBwbGUsXG4gICAgICAgIGNvbG9yOiB0b3VjaFJpcHBsZUNvbG9yLFxuICAgICAgICBvcGFjaXR5OiB0b3VjaFJpcHBsZU9wYWNpdHkgfSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKSA6IHVuZGVmaW5lZDtcblxuICAgIHJldHVybiBDaGlsZHJlbi5jcmVhdGUoe1xuICAgICAgZm9jdXNSaXBwbGU6IGZvY3VzUmlwcGxlLFxuICAgICAgdG91Y2hSaXBwbGU6IHRvdWNoUmlwcGxlLFxuICAgICAgY2hpbGRyZW46IHRvdWNoUmlwcGxlID8gdW5kZWZpbmVkIDogY2hpbGRyZW5cbiAgICB9KTtcbiAgfSxcblxuICBfaGFuZGxlS2V5RG93bjogZnVuY3Rpb24gX2hhbmRsZUtleURvd24oZSkge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlS2V5Ym9hcmRGb2N1cykge1xuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gS2V5Q29kZS5UQUIpIHtcbiAgICAgICAgdGFiUHJlc3NlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoZS5rZXlDb2RlID09PSBLZXlDb2RlLkVOVEVSICYmIHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlVG91Y2hUYXAoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucHJvcHMub25LZXlEb3duKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVLZXlVcDogZnVuY3Rpb24gX2hhbmRsZUtleVVwKGUpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgZS5rZXlDb2RlID09PSBLZXlDb2RlLlNQQUNFICYmIHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgIHRoaXMuX2hhbmRsZVRvdWNoVGFwKGUpO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLm9uS2V5VXAoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZUJsdXI6IGZ1bmN0aW9uIF9oYW5kbGVCbHVyKGUpIHtcbiAgICB0aGlzLl9jYW5jZWxGb2N1c1RpbWVvdXQoKTtcbiAgICB0aGlzLnJlbW92ZUtleWJvYXJkRm9jdXMoZSk7XG4gICAgdGhpcy5wcm9wcy5vbkJsdXIoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZUZvY3VzOiBmdW5jdGlvbiBfaGFuZGxlRm9jdXMoZSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgIXRoaXMucHJvcHMuZGlzYWJsZUtleWJvYXJkRm9jdXMpIHtcbiAgICAgIC8vc2V0VGltZW91dCBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgZm9jdXMgZXZlbnQgZmlyZXMgZmlyc3RcbiAgICAgIC8vV2FpdCBzbyB0aGF0IHdlIGNhbiBjYXB0dXJlIGlmIHRoaXMgd2FzIGEga2V5Ym9hcmQgZm9jdXNcbiAgICAgIC8vb3IgdG91Y2ggZm9jdXNcbiAgICAgIHRoaXMuX2ZvY3VzVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGFiUHJlc3NlZCkge1xuICAgICAgICAgIF90aGlzLnNldEtleWJvYXJkRm9jdXMoZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIDE1MCk7XG5cbiAgICAgIHRoaXMucHJvcHMub25Gb2N1cyhlKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hUYXAoZSkge1xuICAgIHRoaXMuX2NhbmNlbEZvY3VzVGltZW91dCgpO1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGFiUHJlc3NlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5yZW1vdmVLZXlib2FyZEZvY3VzKGUpO1xuICAgICAgdGhpcy5wcm9wcy5vblRvdWNoVGFwKGUpO1xuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbmhhbmNlZEJ1dHRvbjtcbn0se1wiLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4vcmlwcGxlcy9mb2N1cy1yaXBwbGVcIjo2NCxcIi4vcmlwcGxlcy90b3VjaC1yaXBwbGVcIjo2NixcIi4vc3R5bGVzL2NvbG9yc1wiOjcxLFwiLi91dGlscy9jaGlsZHJlblwiOjEyNCxcIi4vdXRpbHMva2V5LWNvZGVcIjoxMzMsXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSwzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgS2V5Q29kZSA9IHJlcXVpcmUoJy4vdXRpbHMva2V5LWNvZGUnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgVW5pcXVlSWQgPSByZXF1aXJlKCcuL3V0aWxzL3VuaXF1ZS1pZCcpO1xudmFyIFdpbmRvd0xpc3RlbmFibGUgPSByZXF1aXJlKCcuL21peGlucy93aW5kb3ctbGlzdGVuYWJsZScpO1xudmFyIENsZWFyRml4ID0gcmVxdWlyZSgnLi9jbGVhcmZpeCcpO1xudmFyIEZvY3VzUmlwcGxlID0gcmVxdWlyZSgnLi9yaXBwbGVzL2ZvY3VzLXJpcHBsZScpO1xudmFyIFRvdWNoUmlwcGxlID0gcmVxdWlyZSgnLi9yaXBwbGVzL3RvdWNoLXJpcHBsZScpO1xudmFyIFBhcGVyID0gcmVxdWlyZSgnLi9wYXBlcicpO1xuXG52YXIgRW5oYW5jZWRTd2l0Y2ggPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRW5oYW5jZWRTd2l0Y2gnLFxuXG4gIG1peGluczogW1dpbmRvd0xpc3RlbmFibGUsIFN0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaWQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaW5wdXRUeXBlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc3dpdGNoRWxlbWVudDogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgICBvblBhcmVudFNob3VsZFVwZGF0ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzd2l0Y2hlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICByaXBwbGVTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICByaXBwbGVDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpY29uU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgdGh1bWJTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0cmFja1N0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGxhYmVsU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgbmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICB2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvblN3aXRjaDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVxdWlyZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkZWZhdWx0U3dpdGNoZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGxhYmVsUG9zaXRpb246IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnXSksXG4gICAgZGlzYWJsZUZvY3VzUmlwcGxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlVG91Y2hSaXBwbGU6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgd2luZG93TGlzdGVuZXJzOiB7XG4gICAga2V5ZG93bjogJ19oYW5kbGVXaW5kb3dLZXlkb3duJyxcbiAgICBrZXl1cDogJ19oYW5kbGVXaW5kb3dLZXl1cCdcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50V2lkdGg6IDEwMFxuICAgIH07XG4gIH0sXG5cbiAgZ2V0RXZlbldpZHRoOiBmdW5jdGlvbiBnZXRFdmVuV2lkdGgoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5yb290KSkuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSwgMTApO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgaW5wdXROb2RlID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmNoZWNrYm94KTtcbiAgICBpZiAoIXRoaXMucHJvcHMuc3dpdGNoZWQgfHwgaW5wdXROb2RlLmNoZWNrZWQgIT09IHRoaXMucHJvcHMuc3dpdGNoZWQpIHtcbiAgICAgIHRoaXMucHJvcHMub25QYXJlbnRTaG91bGRVcGRhdGUoaW5wdXROb2RlLmNoZWNrZWQpO1xuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl9oYW5kbGVSZXNpemUpO1xuXG4gICAgdGhpcy5faGFuZGxlUmVzaXplKCk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl9oYW5kbGVSZXNpemUpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIGhhc0NoZWNrZWRMaW5rUHJvcCA9IG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSgnY2hlY2tlZExpbmsnKTtcbiAgICB2YXIgaGFzQ2hlY2tlZFByb3AgPSBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoJ2NoZWNrZWQnKTtcbiAgICB2YXIgaGFzVG9nZ2xlZFByb3AgPSBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoJ3RvZ2dsZWQnKTtcbiAgICB2YXIgaGFzTmV3RGVmYXVsdFByb3AgPSBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHRTd2l0Y2hlZCcpICYmIG5leHRQcm9wcy5kZWZhdWx0U3dpdGNoZWQgIT09IHRoaXMucHJvcHMuZGVmYXVsdFN3aXRjaGVkO1xuICAgIHZhciBuZXdTdGF0ZSA9IHt9O1xuXG4gICAgaWYgKGhhc0NoZWNrZWRQcm9wKSB7XG4gICAgICBuZXdTdGF0ZS5zd2l0Y2hlZCA9IG5leHRQcm9wcy5jaGVja2VkO1xuICAgIH0gZWxzZSBpZiAoaGFzVG9nZ2xlZFByb3ApIHtcbiAgICAgIG5ld1N0YXRlLnN3aXRjaGVkID0gbmV4dFByb3BzLnRvZ2dsZWQ7XG4gICAgfSBlbHNlIGlmIChoYXNDaGVja2VkTGlua1Byb3ApIHtcbiAgICAgIG5ld1N0YXRlLnN3aXRjaGVkID0gbmV4dFByb3BzLmNoZWNrZWRMaW5rLnZhbHVlO1xuICAgIH0gZWxzZSBpZiAoaGFzTmV3RGVmYXVsdFByb3ApIHtcbiAgICAgIG5ld1N0YXRlLnN3aXRjaGVkID0gbmV4dFByb3BzLmRlZmF1bHRTd2l0Y2hlZDtcbiAgICB9XG5cbiAgICBpZiAobmV3U3RhdGUuc3dpdGNoZWQgIT09IHVuZGVmaW5lZCAmJiBuZXdTdGF0ZS5zd2l0Y2hlZCAhPT0gdGhpcy5wcm9wcy5zd2l0Y2hlZCkge1xuICAgICAgdGhpcy5wcm9wcy5vblBhcmVudFNob3VsZFVwZGF0ZShuZXdTdGF0ZS5zd2l0Y2hlZCk7XG4gICAgfVxuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnBhbGV0dGU7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHNwYWNpbmcgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZztcbiAgICB2YXIgc3dpdGNoV2lkdGggPSA2MCAtIHNwYWNpbmcuZGVza3RvcEd1dHRlckxlc3M7XG4gICAgdmFyIGxhYmVsV2lkdGggPSAnY2FsYygxMDAlIC0gNjBweCknO1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBjdXJzb3I6IHRoaXMucHJvcHMuZGlzYWJsZWQgPyAnZGVmYXVsdCcgOiAncG9pbnRlcicsXG4gICAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICAgIGRpc3BsYXk6ICd0YWJsZScsXG4gICAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgICB3aWR0aDogJzEwMCUnXG4gICAgICB9LFxuICAgICAgaW5wdXQ6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGN1cnNvcjogdGhpcy5wcm9wcy5kaXNhYmxlZCA/ICdkZWZhdWx0JyA6ICdwb2ludGVyJyxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ2FsbCcsXG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB6SW5kZXg6IDIsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBtYXJnaW46IDBcbiAgICAgIH0sXG4gICAgICBjb250cm9sczoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICB3aWR0aDogbGFiZWxXaWR0aCxcbiAgICAgICAgbGluZUhlaWdodDogJzI0cHgnLFxuICAgICAgICBjb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRleHRDb2xvclxuICAgICAgfSxcbiAgICAgIHdyYXA6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgd2lkdGg6IHN3aXRjaFdpZHRoLFxuICAgICAgICBtYXJnaW5SaWdodDogdGhpcy5wcm9wcy5sYWJlbFBvc2l0aW9uID09PSAncmlnaHQnID8gc3BhY2luZy5kZXNrdG9wR3V0dGVyTGVzcyA6IDAsXG4gICAgICAgIG1hcmdpbkxlZnQ6IHRoaXMucHJvcHMubGFiZWxQb3NpdGlvbiA9PT0gJ2xlZnQnID8gc3BhY2luZy5kZXNrdG9wR3V0dGVyTGVzcyA6IDBcbiAgICAgIH0sXG4gICAgICByaXBwbGU6IHtcbiAgICAgICAgaGVpZ2h0OiAnMjAwJScsXG4gICAgICAgIHdpZHRoOiAnMjAwJScsXG4gICAgICAgIHRvcDogLTEyLFxuICAgICAgICBsZWZ0OiAtMTJcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgdHlwZSA9IF9wcm9wcy50eXBlO1xuICAgIHZhciBuYW1lID0gX3Byb3BzLm5hbWU7XG4gICAgdmFyIHZhbHVlID0gX3Byb3BzLnZhbHVlO1xuICAgIHZhciBsYWJlbCA9IF9wcm9wcy5sYWJlbDtcbiAgICB2YXIgb25Td2l0Y2ggPSBfcHJvcHMub25Td2l0Y2g7XG4gICAgdmFyIGRlZmF1bHRTd2l0Y2hlZCA9IF9wcm9wcy5kZWZhdWx0U3dpdGNoZWQ7XG4gICAgdmFyIG9uQmx1ciA9IF9wcm9wcy5vbkJsdXI7XG4gICAgdmFyIG9uRm9jdXMgPSBfcHJvcHMub25Gb2N1cztcbiAgICB2YXIgb25Nb3VzZVVwID0gX3Byb3BzLm9uTW91c2VVcDtcbiAgICB2YXIgb25Nb3VzZURvd24gPSBfcHJvcHMub25Nb3VzZURvd247XG4gICAgdmFyIG9uTW91c2VMZWF2ZSA9IF9wcm9wcy5vbk1vdXNlTGVhdmU7XG4gICAgdmFyIG9uVG91Y2hTdGFydCA9IF9wcm9wcy5vblRvdWNoU3RhcnQ7XG4gICAgdmFyIG9uVG91Y2hFbmQgPSBfcHJvcHMub25Ub3VjaEVuZDtcbiAgICB2YXIgZGlzYWJsZVRvdWNoUmlwcGxlID0gX3Byb3BzLmRpc2FibGVUb3VjaFJpcHBsZTtcbiAgICB2YXIgZGlzYWJsZUZvY3VzUmlwcGxlID0gX3Byb3BzLmRpc2FibGVGb2N1c1JpcHBsZTtcbiAgICB2YXIgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsndHlwZScsICduYW1lJywgJ3ZhbHVlJywgJ2xhYmVsJywgJ29uU3dpdGNoJywgJ2RlZmF1bHRTd2l0Y2hlZCcsICdvbkJsdXInLCAnb25Gb2N1cycsICdvbk1vdXNlVXAnLCAnb25Nb3VzZURvd24nLCAnb25Nb3VzZUxlYXZlJywgJ29uVG91Y2hTdGFydCcsICdvblRvdWNoRW5kJywgJ2Rpc2FibGVUb3VjaFJpcHBsZScsICdkaXNhYmxlRm9jdXNSaXBwbGUnLCAnY2xhc3NOYW1lJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgdmFyIHdyYXBTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy53cmFwLCB0aGlzLnByb3BzLmljb25TdHlsZSk7XG4gICAgdmFyIHJpcHBsZVN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucmlwcGxlLCB0aGlzLnByb3BzLnJpcHBsZVN0eWxlKTtcbiAgICB2YXIgcmlwcGxlQ29sb3IgPSB0aGlzLnByb3BzLmhhc093blByb3BlcnR5KCdyaXBwbGVDb2xvcicpID8gdGhpcy5wcm9wcy5yaXBwbGVDb2xvciA6IHRoaXMuZ2V0VGhlbWUoKS5wcmltYXJ5MUNvbG9yO1xuXG4gICAgaWYgKHRoaXMucHJvcHMudGh1bWJTdHlsZSkge1xuICAgICAgd3JhcFN0eWxlcy5tYXJnaW5MZWZ0IC89IDI7XG4gICAgICB3cmFwU3R5bGVzLm1hcmdpblJpZ2h0IC89IDI7XG4gICAgfVxuXG4gICAgdmFyIGlucHV0SWQgPSB0aGlzLnByb3BzLmlkIHx8IFVuaXF1ZUlkLmdlbmVyYXRlKCk7XG5cbiAgICB2YXIgbGFiZWxTdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmxhYmVsLCB0aGlzLnByb3BzLmxhYmVsU3R5bGUpO1xuICAgIHZhciBsYWJlbEVsZW1lbnQgPSB0aGlzLnByb3BzLmxhYmVsID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdsYWJlbCcsXG4gICAgICB7IHN0eWxlOiBsYWJlbFN0eWxlLCBodG1sRm9yOiBpbnB1dElkIH0sXG4gICAgICB0aGlzLnByb3BzLmxhYmVsXG4gICAgKSA6IG51bGw7XG5cbiAgICB2YXIgaW5wdXRQcm9wcyA9IHtcbiAgICAgIHJlZjogJ2NoZWNrYm94JyxcbiAgICAgIHR5cGU6IHRoaXMucHJvcHMuaW5wdXRUeXBlLFxuICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmlucHV0KSxcbiAgICAgIG5hbWU6IHRoaXMucHJvcHMubmFtZSxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnZhbHVlLFxuICAgICAgZGVmYXVsdENoZWNrZWQ6IHRoaXMucHJvcHMuZGVmYXVsdFN3aXRjaGVkLFxuICAgICAgb25CbHVyOiB0aGlzLl9oYW5kbGVCbHVyLFxuICAgICAgb25Gb2N1czogdGhpcy5faGFuZGxlRm9jdXNcbiAgICB9O1xuXG4gICAgdmFyIGhpZGVUb3VjaFJpcHBsZSA9IHRoaXMucHJvcHMuZGlzYWJsZWQgfHwgZGlzYWJsZVRvdWNoUmlwcGxlO1xuXG4gICAgaWYgKCFoaWRlVG91Y2hSaXBwbGUpIHtcbiAgICAgIGlucHV0UHJvcHMub25Nb3VzZVVwID0gdGhpcy5faGFuZGxlTW91c2VVcDtcbiAgICAgIGlucHV0UHJvcHMub25Nb3VzZURvd24gPSB0aGlzLl9oYW5kbGVNb3VzZURvd247XG4gICAgICBpbnB1dFByb3BzLm9uTW91c2VMZWF2ZSA9IHRoaXMuX2hhbmRsZU1vdXNlTGVhdmU7XG4gICAgICBpbnB1dFByb3BzLm9uVG91Y2hTdGFydCA9IHRoaXMuX2hhbmRsZVRvdWNoU3RhcnQ7XG4gICAgICBpbnB1dFByb3BzLm9uVG91Y2hFbmQgPSB0aGlzLl9oYW5kbGVUb3VjaEVuZDtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucHJvcHMuaGFzT3duUHJvcGVydHkoJ2NoZWNrZWRMaW5rJykpIHtcbiAgICAgIGlucHV0UHJvcHMub25DaGFuZ2UgPSB0aGlzLl9oYW5kbGVDaGFuZ2U7XG4gICAgfVxuXG4gICAgdmFyIGlucHV0RWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgX2V4dGVuZHMoe30sIG90aGVyLCBpbnB1dFByb3BzKSk7XG5cbiAgICB2YXIgdG91Y2hSaXBwbGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFRvdWNoUmlwcGxlLCB7XG4gICAgICByZWY6ICd0b3VjaFJpcHBsZScsXG4gICAgICBrZXk6ICd0b3VjaFJpcHBsZScsXG4gICAgICBzdHlsZTogcmlwcGxlU3R5bGUsXG4gICAgICBjb2xvcjogcmlwcGxlQ29sb3IsXG4gICAgICBjZW50ZXJSaXBwbGU6IHRydWUgfSk7XG5cbiAgICB2YXIgZm9jdXNSaXBwbGUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEZvY3VzUmlwcGxlLCB7XG4gICAgICBrZXk6ICdmb2N1c1JpcHBsZScsXG4gICAgICBpbm5lclN0eWxlOiByaXBwbGVTdHlsZSxcbiAgICAgIGNvbG9yOiByaXBwbGVDb2xvcixcbiAgICAgIHNob3c6IHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQgfSk7XG5cbiAgICB2YXIgcmlwcGxlcyA9IFtoaWRlVG91Y2hSaXBwbGUgPyBudWxsIDogdG91Y2hSaXBwbGUsIHRoaXMucHJvcHMuZGlzYWJsZWQgfHwgZGlzYWJsZUZvY3VzUmlwcGxlID8gbnVsbCA6IGZvY3VzUmlwcGxlXTtcblxuICAgIC8vIElmIHRvZ2dsZSBjb21wb25lbnQgKGluZGljYXRlZCBieSB3aGV0aGVyIHRoZSBzdHlsZSBpbmNsdWRlcyB0aHVtYikgbWFudWFsbHkgbGF5IG91dFxuICAgIC8vIGVsZW1lbnRzIGluIG9yZGVyIHRvIG5lc3QgcmlwcGxlIGVsZW1lbnRzXG4gICAgdmFyIHN3aXRjaEVsZW1lbnQgPSAhdGhpcy5wcm9wcy50aHVtYlN0eWxlID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogd3JhcFN0eWxlcyB9LFxuICAgICAgdGhpcy5wcm9wcy5zd2l0Y2hFbGVtZW50LFxuICAgICAgcmlwcGxlc1xuICAgICkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiB3cmFwU3R5bGVzIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiB0aGlzLnByb3BzLnRyYWNrU3R5bGUgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBQYXBlcixcbiAgICAgICAgeyBzdHlsZTogdGhpcy5wcm9wcy50aHVtYlN0eWxlLCB6RGVwdGg6IDEsIGNpcmNsZTogdHJ1ZSB9LFxuICAgICAgICAnICcsXG4gICAgICAgIHJpcHBsZXMsXG4gICAgICAgICcgJ1xuICAgICAgKVxuICAgICk7XG5cbiAgICB2YXIgbGFiZWxQb3NpdGlvbkV4aXN0ID0gdGhpcy5wcm9wcy5sYWJlbFBvc2l0aW9uO1xuXG4gICAgLy8gUG9zaXRpb24gaXMgbGVmdCBpZiBub3QgZGVmaW5lZCBvciBpbnZhbGlkLlxuICAgIHZhciBlbGVtZW50c0luT3JkZXIgPSBsYWJlbFBvc2l0aW9uRXhpc3QgJiYgdGhpcy5wcm9wcy5sYWJlbFBvc2l0aW9uLnRvVXBwZXJDYXNlKCkgPT09ICdSSUdIVCcgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgQ2xlYXJGaXgsXG4gICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5jb250cm9scykgfSxcbiAgICAgIHN3aXRjaEVsZW1lbnQsXG4gICAgICBsYWJlbEVsZW1lbnRcbiAgICApIDogUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIENsZWFyRml4LFxuICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuY29udHJvbHMpIH0sXG4gICAgICBsYWJlbEVsZW1lbnQsXG4gICAgICBzd2l0Y2hFbGVtZW50XG4gICAgKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHJlZjogJ3Jvb3QnLCBjbGFzc05hbWU6IGNsYXNzTmFtZSwgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUpIH0sXG4gICAgICBpbnB1dEVsZW1lbnQsXG4gICAgICBlbGVtZW50c0luT3JkZXJcbiAgICApO1xuICB9LFxuXG4gIGlzU3dpdGNoZWQ6IGZ1bmN0aW9uIGlzU3dpdGNoZWQoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5jaGVja2JveCkuY2hlY2tlZDtcbiAgfSxcblxuICAvLyBubyBjYWxsYmFjayBoZXJlIGJlY2F1c2UgdGhlcmUgaXMgbm8gZXZlbnRcbiAgc2V0U3dpdGNoZWQ6IGZ1bmN0aW9uIHNldFN3aXRjaGVkKG5ld1N3aXRjaGVkVmFsdWUpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuaGFzT3duUHJvcGVydHkoJ2NoZWNrZWQnKSB8fCB0aGlzLnByb3BzLmNoZWNrZWQgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLnByb3BzLm9uUGFyZW50U2hvdWxkVXBkYXRlKG5ld1N3aXRjaGVkVmFsdWUpO1xuICAgICAgUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmNoZWNrYm94KS5jaGVja2VkID0gbmV3U3dpdGNoZWRWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBtZXNzYWdlID0gJ0Nhbm5vdCBjYWxsIHNldCBtZXRob2Qgd2hpbGUgY2hlY2tlZCBpcyBkZWZpbmVkIGFzIGEgcHJvcGVydHkuJztcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICB9LFxuXG4gIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmNoZWNrYm94KS52YWx1ZTtcbiAgfSxcblxuICBpc0tleWJvYXJkRm9jdXNlZDogZnVuY3Rpb24gaXNLZXlib2FyZEZvY3VzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQ7XG4gIH0sXG5cbiAgX2hhbmRsZUNoYW5nZTogZnVuY3Rpb24gX2hhbmRsZUNoYW5nZShlKSB7XG4gICAgdGhpcy5fdGFiUHJlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IGZhbHNlXG4gICAgfSk7XG5cbiAgICB2YXIgaXNJbnB1dENoZWNrZWQgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMuY2hlY2tib3gpLmNoZWNrZWQ7XG5cbiAgICBpZiAoIXRoaXMucHJvcHMuaGFzT3duUHJvcGVydHkoJ2NoZWNrZWQnKSkge1xuICAgICAgdGhpcy5wcm9wcy5vblBhcmVudFNob3VsZFVwZGF0ZShpc0lucHV0Q2hlY2tlZCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLm9uU3dpdGNoKSB7XG4gICAgICB0aGlzLnByb3BzLm9uU3dpdGNoKGUsIGlzSW5wdXRDaGVja2VkKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQ2hlY2tib3ggaW5wdXRzIG9ubHkgdXNlIFNQQUNFIHRvIGNoYW5nZSB0aGVpciBzdGF0ZS4gVXNpbmcgRU5URVIgd2lsbFxuICAvLyB1cGRhdGUgdGhlIHVpIGJ1dCBub3QgdGhlIGlucHV0LlxuICBfaGFuZGxlV2luZG93S2V5ZG93bjogZnVuY3Rpb24gX2hhbmRsZVdpbmRvd0tleWRvd24oZSkge1xuICAgIGlmIChlLmtleUNvZGUgPT09IEtleUNvZGUuVEFCKSB7XG4gICAgICB0aGlzLl90YWJQcmVzc2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gS2V5Q29kZS5TUEFDRSAmJiB0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICB0aGlzLl9oYW5kbGVDaGFuZ2UoZSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVXaW5kb3dLZXl1cDogZnVuY3Rpb24gX2hhbmRsZVdpbmRvd0tleXVwKGUpIHtcbiAgICBpZiAoZS5rZXlDb2RlID09PSBLZXlDb2RlLlNQQUNFICYmIHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgIHRoaXMuX2hhbmRsZUNoYW5nZShlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJlY2F1c2UgYm90aCB0aGUgcmlwcGxlcyBhbmQgdGhlIGNoZWNrYm94IGlucHV0IGNhbm5vdCBzaGFyZSBwb2ludGVyXG4gICAqIGV2ZW50cywgdGhlIGNoZWNrYm94IGlucHV0IHRha2VzIGNvbnRyb2wgb2YgcG9pbnRlciBldmVudHMgYW5kIGNhbGxzXG4gICAqIHJpcHBsZSBhbmltYXRpb25zIG1hbnVhbGx5LlxuICAgKi9cbiAgX2hhbmRsZU1vdXNlRG93bjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgLy9vbmx5IGxpc3RlbiB0byBsZWZ0IGNsaWNrc1xuICAgIGlmIChlLmJ1dHRvbiA9PT0gMCkge1xuICAgICAgdGhpcy5yZWZzLnRvdWNoUmlwcGxlLnN0YXJ0KGUpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlTW91c2VVcDogZnVuY3Rpb24gX2hhbmRsZU1vdXNlVXAoKSB7XG4gICAgdGhpcy5yZWZzLnRvdWNoUmlwcGxlLmVuZCgpO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZUxlYXZlOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VMZWF2ZSgpIHtcbiAgICB0aGlzLnJlZnMudG91Y2hSaXBwbGUuZW5kKCk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoU3RhcnQ6IGZ1bmN0aW9uIF9oYW5kbGVUb3VjaFN0YXJ0KGUpIHtcbiAgICB0aGlzLnJlZnMudG91Y2hSaXBwbGUuc3RhcnQoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoRW5kOiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hFbmQoKSB7XG4gICAgdGhpcy5yZWZzLnRvdWNoUmlwcGxlLmVuZCgpO1xuICB9LFxuXG4gIF9oYW5kbGVCbHVyOiBmdW5jdGlvbiBfaGFuZGxlQmx1cihlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc0tleWJvYXJkRm9jdXNlZDogZmFsc2VcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnByb3BzLm9uQmx1cikge1xuICAgICAgdGhpcy5wcm9wcy5vbkJsdXIoZSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVGb2N1czogZnVuY3Rpb24gX2hhbmRsZUZvY3VzKGUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy9zZXRUaW1lb3V0IGlzIG5lZWRlZCBiZWN1YXNlIHRoZSBmb2N1cyBldmVudCBmaXJlcyBmaXJzdFxuICAgIC8vV2FpdCBzbyB0aGF0IHdlIGNhbiBjYXB0dXJlIGlmIHRoaXMgd2FzIGEga2V5Ym9hcmQgZm9jdXNcbiAgICAvL29yIHRvdWNoIGZvY3VzXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuX3RhYlByZXNzZWQpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIDE1MCk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5vbkZvY3VzKSB7XG4gICAgICB0aGlzLnByb3BzLm9uRm9jdXMoZSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVSZXNpemU6IGZ1bmN0aW9uIF9oYW5kbGVSZXNpemUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHBhcmVudFdpZHRoOiB0aGlzLmdldEV2ZW5XaWR0aCgpIH0pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVuaGFuY2VkU3dpdGNoO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vY2xlYXJmaXhcIjoxNixcIi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL21peGlucy93aW5kb3ctbGlzdGVuYWJsZVwiOjU2LFwiLi9wYXBlclwiOjU4LFwiLi9yaXBwbGVzL2ZvY3VzLXJpcHBsZVwiOjY0LFwiLi9yaXBwbGVzL3RvdWNoLXJpcHBsZVwiOjY2LFwiLi9zdHlsZXMvdHJhbnNpdGlvbnNcIjo3NyxcIi4vdXRpbHMva2V5LWNvZGVcIjoxMzMsXCIuL3V0aWxzL3VuaXF1ZS1pZFwiOjEzOCxcIl9wcm9jZXNzXCI6MSxcInJlYWN0XCI6MzE5fV0sMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQXV0b1ByZWZpeCA9IHJlcXVpcmUoJy4vc3R5bGVzL2F1dG8tcHJlZml4Jyk7XG5cbnZhciBFbmhhbmNlZFRleHRhcmVhID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0VuaGFuY2VkVGV4dGFyZWEnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIG9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkhlaWdodENoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgdGV4dGFyZWFTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb3dzOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvd3M6IDFcbiAgICB9O1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IHRoaXMucHJvcHMucm93cyAqIDI0XG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fc3luY0hlaWdodFdpdGhTaGFkb3coKTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICByZXNpemU6ICdub25lJyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgICAgIHBhZGRpbmc6IDBcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIG9uQ2hhbmdlID0gX3Byb3BzLm9uQ2hhbmdlO1xuICAgIHZhciBvbkhlaWdodENoYW5nZSA9IF9wcm9wcy5vbkhlaWdodENoYW5nZTtcbiAgICB2YXIgcm93cyA9IF9wcm9wcy5yb3dzO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcbiAgICB2YXIgdGV4dGFyZWFTdHlsZSA9IF9wcm9wcy50ZXh0YXJlYVN0eWxlO1xuICAgIHZhciB2YWx1ZUxpbmsgPSBfcHJvcHMudmFsdWVMaW5rO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydvbkNoYW5nZScsICdvbkhlaWdodENoYW5nZScsICdyb3dzJywgJ3N0eWxlJywgJ3RleHRhcmVhU3R5bGUnLCAndmFsdWVMaW5rJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCkucm9vdDtcblxuICAgIHZhciB0ZXh0QXJlYVN0eWxlcyA9IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICByZXNpemU6ICdub25lJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9O1xuXG4gICAgdmFyIGlucHV0U3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMsIHtcbiAgICAgIGhlaWdodDogdGhpcy5zdGF0ZS5oZWlnaHQgKyAncHgnXG4gICAgfSk7XG5cbiAgICBpbnB1dFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoaW5wdXRTdHlsZXMsIHRleHRhcmVhU3R5bGUpO1xuXG4gICAgLy8gT3ZlcmZsb3cgYWxzbyBuZWVkZWQgdG8gaGVyZSB0byByZW1vdmUgdGhlIGV4dHJhIHJvd1xuICAgIC8vIGFkZGVkIHRvIHRleHRhcmVhcyBpbiBGaXJlZm94LlxuICAgIHZhciBzaGFkb3dTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHRleHRBcmVhU3R5bGVzLCB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIG9wYWNpdHk6IDBcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnByb3BzLmhhc093blByb3BlcnR5KCd2YWx1ZUxpbmsnKSkge1xuICAgICAgb3RoZXIudmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlTGluay52YWx1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHN0eWxlLmN1cnNvciA9ICdkZWZhdWx0JztcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogdGhpcy5wcm9wcy5zdHlsZSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnLCB7XG4gICAgICAgIHJlZjogJ3NoYWRvdycsXG4gICAgICAgIHN0eWxlOiBBdXRvUHJlZml4LmFsbChzaGFkb3dTdHlsZXMpLFxuICAgICAgICB0YWJJbmRleDogJy0xJyxcbiAgICAgICAgcm93czogdGhpcy5wcm9wcy5yb3dzLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXG4gICAgICAgIHZhbHVlTGluazogdGhpcy5wcm9wcy52YWx1ZUxpbmsgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScsIF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgICAgICByZWY6ICdpbnB1dCcsXG4gICAgICAgIHJvd3M6IHRoaXMucHJvcHMucm93cyxcbiAgICAgICAgc3R5bGU6IEF1dG9QcmVmaXguYWxsKGlucHV0U3R5bGVzKSxcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuX2hhbmRsZUNoYW5nZSB9KSlcbiAgICApO1xuICB9LFxuXG4gIGdldElucHV0Tm9kZTogZnVuY3Rpb24gZ2V0SW5wdXROb2RlKCkge1xuICAgIHJldHVybiBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMuaW5wdXQpO1xuICB9LFxuXG4gIHNldFZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMuZ2V0SW5wdXROb2RlKCkudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLl9zeW5jSGVpZ2h0V2l0aFNoYWRvdyh2YWx1ZSk7XG4gIH0sXG5cbiAgX3N5bmNIZWlnaHRXaXRoU2hhZG93OiBmdW5jdGlvbiBfc3luY0hlaWdodFdpdGhTaGFkb3cobmV3VmFsdWUsIGUpIHtcbiAgICB2YXIgc2hhZG93ID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLnNoYWRvdyk7XG4gICAgdmFyIGN1cnJlbnRIZWlnaHQgPSB0aGlzLnN0YXRlLmhlaWdodDtcbiAgICB2YXIgbmV3SGVpZ2h0ID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHNoYWRvdy52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIH1cbiAgICBuZXdIZWlnaHQgPSBzaGFkb3cuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgaWYgKGN1cnJlbnRIZWlnaHQgIT09IG5ld0hlaWdodCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGhlaWdodDogbmV3SGVpZ2h0IH0pO1xuICAgICAgaWYgKHRoaXMucHJvcHMub25IZWlnaHRDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkhlaWdodENoYW5nZShlLCBuZXdIZWlnaHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlQ2hhbmdlOiBmdW5jdGlvbiBfaGFuZGxlQ2hhbmdlKGUpIHtcbiAgICB0aGlzLl9zeW5jSGVpZ2h0V2l0aFNoYWRvdyhlLnRhcmdldC52YWx1ZSk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWVMaW5rJykpIHtcbiAgICAgIHRoaXMucHJvcHMudmFsdWVMaW5rLnJlcXVlc3RDaGFuZ2UoZS50YXJnZXQudmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGUpO1xuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMudmFsdWUgIT09IHRoaXMucHJvcHMudmFsdWUpIHtcbiAgICAgIHRoaXMuX3N5bmNIZWlnaHRXaXRoU2hhZG93KG5leHRQcm9wcy52YWx1ZSk7XG4gICAgfVxuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbmhhbmNlZFRleHRhcmVhO1xufSx7XCIuL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi9zdHlsZXMvYXV0by1wcmVmaXhcIjo3MCxcInJlYWN0XCI6MzE5fV0sMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xudmFyIFB1cmVSZW5kZXJNaXhpbiA9IFJlYWN0LmFkZG9ucy5QdXJlUmVuZGVyTWl4aW47XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIENoaWxkcmVuID0gcmVxdWlyZSgnLi91dGlscy9jaGlsZHJlbicpO1xudmFyIENvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKCcuL3V0aWxzL2NvbG9yLW1hbmlwdWxhdG9yJyk7XG52YXIgSW1tdXRhYmlsaXR5SGVscGVyID0gcmVxdWlyZSgnLi91dGlscy9pbW11dGFiaWxpdHktaGVscGVyJyk7XG52YXIgVHlwb2dyYXBoeSA9IHJlcXVpcmUoJy4vc3R5bGVzL3R5cG9ncmFwaHknKTtcbnZhciBFbmhhbmNlZEJ1dHRvbiA9IHJlcXVpcmUoJy4vZW5oYW5jZWQtYnV0dG9uJyk7XG52YXIgRmxhdEJ1dHRvbkxhYmVsID0gcmVxdWlyZSgnLi9idXR0b25zL2ZsYXQtYnV0dG9uLWxhYmVsJyk7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTGFiZWwocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIGlmICghcHJvcHMuY2hpbGRyZW4gJiYgIXByb3BzLmxhYmVsKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignUmVxdWlyZWQgcHJvcCBsYWJlbCBvciBjaGlsZHJlbiB3YXMgbm90ICcgKyAnc3BlY2lmaWVkIGluICcgKyBjb21wb25lbnROYW1lICsgJy4nKTtcbiAgfVxufVxuXG52YXIgRmxhdEJ1dHRvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdGbGF0QnV0dG9uJyxcblxuICBtaXhpbnM6IFtQdXJlUmVuZGVyTWl4aW5dLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZGlzYWJsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGhvdmVyQ29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGFiZWw6IHZhbGlkYXRlTGFiZWwsXG4gICAgbGFiZWxTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvbktleWJvYXJkRm9jdXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VFbnRlcjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZUxlYXZlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblRvdWNoU3RhcnQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIHByaW1hcnk6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHJpcHBsZUNvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHNlY29uZGFyeTogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWxTdHlsZToge30sXG4gICAgICBvbktleWJvYXJkRm9jdXM6IGZ1bmN0aW9uIG9uS2V5Ym9hcmRGb2N1cygpIHt9LFxuICAgICAgb25Nb3VzZUVudGVyOiBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoKSB7fSxcbiAgICAgIG9uTW91c2VMZWF2ZTogZnVuY3Rpb24gb25Nb3VzZUxlYXZlKCkge30sXG4gICAgICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIG9uVG91Y2hTdGFydCgpIHt9XG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXJlZDogZmFsc2UsXG4gICAgICBpc0tleWJvYXJkRm9jdXNlZDogZmFsc2UsXG4gICAgICB0b3VjaDogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldENvbnRleHRQcm9wczogZnVuY3Rpb24gZ2V0Q29udGV4dFByb3BzKCkge1xuICAgIHZhciB0aGVtZSA9IHRoaXMuY29udGV4dC5tdWlUaGVtZTtcbiAgICB2YXIgYnV0dG9uVGhlbWUgPSB0aGVtZS5jb21wb25lbnQuYnV0dG9uO1xuICAgIHZhciBmbGF0QnV0dG9uVGhlbWUgPSB0aGVtZS5jb21wb25lbnQuZmxhdEJ1dHRvbjtcblxuICAgIHJldHVybiB7XG4gICAgICBidXR0b25Db2xvcjogZmxhdEJ1dHRvblRoZW1lLmNvbG9yLFxuICAgICAgYnV0dG9uSGVpZ2h0OiBidXR0b25UaGVtZS5oZWlnaHQsXG4gICAgICBidXR0b25NaW5XaWR0aDogYnV0dG9uVGhlbWUubWluV2lkdGgsXG4gICAgICBkaXNhYmxlZFRleHRDb2xvcjogZmxhdEJ1dHRvblRoZW1lLmRpc2FibGVkVGV4dENvbG9yLFxuICAgICAgcHJpbWFyeVRleHRDb2xvcjogZmxhdEJ1dHRvblRoZW1lLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICBzZWNvbmRhcnlUZXh0Q29sb3I6IGZsYXRCdXR0b25UaGVtZS5zZWNvbmRhcnlUZXh0Q29sb3IsXG4gICAgICB0ZXh0Q29sb3I6IGZsYXRCdXR0b25UaGVtZS50ZXh0Q29sb3JcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQ7XG4gICAgdmFyIGhvdmVyQ29sb3IgPSBfcHJvcHMuaG92ZXJDb2xvcjtcbiAgICB2YXIgbGFiZWwgPSBfcHJvcHMubGFiZWw7XG4gICAgdmFyIGxhYmVsU3R5bGUgPSBfcHJvcHMubGFiZWxTdHlsZTtcbiAgICB2YXIgb25LZXlib2FyZEZvY3VzID0gX3Byb3BzLm9uS2V5Ym9hcmRGb2N1cztcbiAgICB2YXIgb25Nb3VzZUxlYXZlID0gX3Byb3BzLm9uTW91c2VMZWF2ZTtcbiAgICB2YXIgb25Nb3VzZUVudGVyID0gX3Byb3BzLm9uTW91c2VFbnRlcjtcbiAgICB2YXIgb25Ub3VjaFN0YXJ0ID0gX3Byb3BzLm9uVG91Y2hTdGFydDtcbiAgICB2YXIgcHJpbWFyeSA9IF9wcm9wcy5wcmltYXJ5O1xuICAgIHZhciByaXBwbGVDb2xvciA9IF9wcm9wcy5yaXBwbGVDb2xvcjtcbiAgICB2YXIgc2Vjb25kYXJ5ID0gX3Byb3BzLnNlY29uZGFyeTtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NoaWxkcmVuJywgJ2Rpc2FibGVkJywgJ2hvdmVyQ29sb3InLCAnbGFiZWwnLCAnbGFiZWxTdHlsZScsICdvbktleWJvYXJkRm9jdXMnLCAnb25Nb3VzZUxlYXZlJywgJ29uTW91c2VFbnRlcicsICdvblRvdWNoU3RhcnQnLCAncHJpbWFyeScsICdyaXBwbGVDb2xvcicsICdzZWNvbmRhcnknLCAnc3R5bGUnXSk7XG5cbiAgICB2YXIgY29udGV4dFByb3BzID0gdGhpcy5nZXRDb250ZXh0UHJvcHMoKTtcblxuICAgIHZhciBkZWZhdWx0Q29sb3IgPSBkaXNhYmxlZCA/IGNvbnRleHRQcm9wcy5kaXNhYmxlZFRleHRDb2xvciA6IHByaW1hcnkgPyBjb250ZXh0UHJvcHMucHJpbWFyeVRleHRDb2xvciA6IHNlY29uZGFyeSA/IGNvbnRleHRQcm9wcy5zZWNvbmRhcnlUZXh0Q29sb3IgOiBjb250ZXh0UHJvcHMudGV4dENvbG9yO1xuXG4gICAgdmFyIGRlZmF1bHRIb3ZlckNvbG9yID0gQ29sb3JNYW5pcHVsYXRvci5mYWRlKENvbG9yTWFuaXB1bGF0b3IubGlnaHRlbihkZWZhdWx0Q29sb3IsIDAuNCksIDAuMTUpO1xuICAgIHZhciBkZWZhdWx0UmlwcGxlQ29sb3IgPSBDb2xvck1hbmlwdWxhdG9yLmZhZGUoZGVmYXVsdENvbG9yLCAwLjgpO1xuICAgIHZhciBidXR0b25Ib3ZlckNvbG9yID0gaG92ZXJDb2xvciB8fCBkZWZhdWx0SG92ZXJDb2xvcjtcbiAgICB2YXIgYnV0dG9uUmlwcGxlQ29sb3IgPSByaXBwbGVDb2xvciB8fCBkZWZhdWx0UmlwcGxlQ29sb3I7XG4gICAgdmFyIGhvdmVyZWQgPSAodGhpcy5zdGF0ZS5ob3ZlcmVkIHx8IHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpICYmICFkaXNhYmxlZDtcblxuICAgIHZhciBtZXJnZWRSb290U3R5bGVzID0gSW1tdXRhYmlsaXR5SGVscGVyLm1lcmdlKHtcbiAgICAgIGNvbG9yOiBkZWZhdWx0Q29sb3IsXG4gICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICBmb250U2l6ZTogVHlwb2dyYXBoeS5mb250U3R5bGVCdXR0b25Gb250U2l6ZSxcbiAgICAgIGxldHRlclNwYWNpbmc6IDAsXG4gICAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICAgIGZvbnRXZWlnaHQ6IFR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bSxcbiAgICAgIGJvcmRlclJhZGl1czogMixcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBob3ZlcmVkID8gYnV0dG9uSG92ZXJDb2xvciA6IGNvbnRleHRQcm9wcy5idXR0b25Db2xvcixcbiAgICAgIGxpbmVIZWlnaHQ6IGNvbnRleHRQcm9wcy5idXR0b25IZWlnaHQgKyAncHgnLFxuICAgICAgbWluV2lkdGg6IGNvbnRleHRQcm9wcy5idXR0b25NaW5XaWR0aCxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICAvL1RoaXMgaXMgbmVlZCBzbyB0aGF0IHJpcHBsZXMgZG8gbm90IGJsZWVkIHBhc3QgYm9yZGVyIHJhZGl1cy5cbiAgICAgIC8vU2VlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE3Mjk4NzM5XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAwLCAwKSdcbiAgICB9LCBzdHlsZSk7XG5cbiAgICB2YXIgbGFiZWxFbGVtZW50ID0gbGFiZWwgPyBSZWFjdC5jcmVhdGVFbGVtZW50KEZsYXRCdXR0b25MYWJlbCwgeyBsYWJlbDogbGFiZWwsIHN0eWxlOiBsYWJlbFN0eWxlIH0pIDogdW5kZWZpbmVkO1xuICAgIHZhciBlbmhhbmNlZEJ1dHRvbkNoaWxkcmVuID0gQ2hpbGRyZW4uY3JlYXRlKHtcbiAgICAgIGxhYmVsRWxlbWVudDogbGFiZWxFbGVtZW50LFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIEVuaGFuY2VkQnV0dG9uLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgZm9jdXNSaXBwbGVDb2xvcjogYnV0dG9uUmlwcGxlQ29sb3IsXG4gICAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5faGFuZGxlS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLl9oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuX2hhbmRsZU1vdXNlRW50ZXIsXG4gICAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5faGFuZGxlVG91Y2hTdGFydCxcbiAgICAgICAgc3R5bGU6IG1lcmdlZFJvb3RTdHlsZXMsXG4gICAgICAgIHRvdWNoUmlwcGxlQ29sb3I6IGJ1dHRvblJpcHBsZUNvbG9yIH0pLFxuICAgICAgZW5oYW5jZWRCdXR0b25DaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgX2hhbmRsZUtleWJvYXJkRm9jdXM6IGZ1bmN0aW9uIF9oYW5kbGVLZXlib2FyZEZvY3VzKGUsIGlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzS2V5Ym9hcmRGb2N1c2VkOiBpc0tleWJvYXJkRm9jdXNlZCB9KTtcbiAgICB0aGlzLnByb3BzLm9uS2V5Ym9hcmRGb2N1cyhlLCBpc0tleWJvYXJkRm9jdXNlZCk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlRW50ZXI6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZUVudGVyKGUpIHtcbiAgICAvL0NhbmNlbCBob3ZlciBzdHlsZXMgZm9yIHRvdWNoIGRldmljZXNcbiAgICBpZiAoIXRoaXMuc3RhdGUudG91Y2gpIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pO1xuICAgIHRoaXMucHJvcHMub25Nb3VzZUVudGVyKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZUxlYXZlOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VMZWF2ZShlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgIHRoaXMucHJvcHMub25Nb3VzZUxlYXZlKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVUb3VjaFN0YXJ0OiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hTdGFydChlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHRvdWNoOiB0cnVlIH0pO1xuICAgIHRoaXMucHJvcHMub25Ub3VjaFN0YXJ0KGUpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZsYXRCdXR0b247XG59LHtcIi4vYnV0dG9ucy9mbGF0LWJ1dHRvbi1sYWJlbFwiOjYsXCIuL2VuaGFuY2VkLWJ1dHRvblwiOjI5LFwiLi9zdHlsZXMvdHJhbnNpdGlvbnNcIjo3NyxcIi4vc3R5bGVzL3R5cG9ncmFwaHlcIjo3OCxcIi4vdXRpbHMvY2hpbGRyZW5cIjoxMjQsXCIuL3V0aWxzL2NvbG9yLW1hbmlwdWxhdG9yXCI6MTI1LFwiLi91dGlscy9pbW11dGFiaWxpdHktaGVscGVyXCI6MTMxLFwicmVhY3QvYWRkb25zXCI6MTQ3fV0sMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBDb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZSgnLi91dGlscy9jb2xvci1tYW5pcHVsYXRvcicpO1xudmFyIEVuaGFuY2VkQnV0dG9uID0gcmVxdWlyZSgnLi9lbmhhbmNlZC1idXR0b24nKTtcbnZhciBGb250SWNvbiA9IHJlcXVpcmUoJy4vZm9udC1pY29uJyk7XG52YXIgUGFwZXIgPSByZXF1aXJlKCcuL3BhcGVyJyk7XG52YXIgQ2hpbGRyZW4gPSByZXF1aXJlKCcuL3V0aWxzL2NoaWxkcmVuJyk7XG5cbnZhciBnZXRaRGVwdGggPSBmdW5jdGlvbiBnZXRaRGVwdGgoZGlzYWJsZWQpIHtcbiAgdmFyIHpEZXB0aCA9IGRpc2FibGVkID8gMCA6IDI7XG4gIHJldHVybiB7XG4gICAgekRlcHRoOiB6RGVwdGgsXG4gICAgaW5pdGlhbFpEZXB0aDogekRlcHRoXG4gIH07XG59O1xuXG52YXIgRmxvYXRpbmdBY3Rpb25CdXR0b24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnRmxvYXRpbmdBY3Rpb25CdXR0b24nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlZENvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGljb25DbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaWNvblN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG1pbmk6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIG9uTW91c2VEb3duOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlVXA6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VMZWF2ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Ub3VjaEVuZDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Ub3VjaFN0YXJ0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBzZWNvbmRhcnk6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgdmFyIHpEZXB0aCA9IHRoaXMucHJvcHMuZGlzYWJsZWQgPyAwIDogMjtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXJlZDogZmFsc2UsXG4gICAgICBpbml0aWFsWkRlcHRoOiB6RGVwdGgsXG4gICAgICB0b3VjaDogZmFsc2UsXG4gICAgICB6RGVwdGg6IHpEZXB0aFxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZShnZXRaRGVwdGgodGhpcy5wcm9wcy5kaXNhYmxlZCkpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMpIHtcbiAgICBpZiAobmV3UHJvcHMuZGlzYWJsZWQgIT09IHRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZ2V0WkRlcHRoKG5ld1Byb3BzLmRpc2FibGVkKSk7XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHRoaXMucHJvcHMuaWNvbkNsYXNzTmFtZSAmJiB0aGlzLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgIHZhciB3YXJuaW5nID0gJ1lvdSBoYXZlIHNldCBib3RoIGFuIGljb25DbGFzc05hbWUgYW5kIGEgY2hpbGQgaWNvbi4gJyArICdJdCBpcyByZWNvbW1lbmRlZCB5b3UgdXNlIG9ubHkgb25lIG1ldGhvZCB3aGVuIGFkZGluZyAnICsgJ2ljb25zIHRvIEZsb2F0aW5nQWN0aW9uQnV0dG9ucy4nO1xuICAgICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIF9nZXRCYWNrZ3JvdW5kQ29sb3I6IGZ1bmN0aW9uIF9nZXRCYWNrZ3JvdW5kQ29sb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGlzYWJsZWQgPyB0aGlzLnByb3BzLmRpc2FibGVkQ29sb3IgfHwgdGhpcy5nZXRUaGVtZSgpLmRpc2FibGVkQ29sb3IgOiB0aGlzLnByb3BzLmJhY2tncm91bmRDb2xvciA/IHRoaXMucHJvcHMuYmFja2dyb3VuZENvbG9yIDogdGhpcy5wcm9wcy5zZWNvbmRhcnkgPyB0aGlzLmdldFRoZW1lKCkuc2Vjb25kYXJ5Q29sb3IgOiB0aGlzLmdldFRoZW1lKCkuY29sb3I7XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmZsb2F0aW5nQWN0aW9uQnV0dG9uO1xuICB9LFxuXG4gIF9nZXRJY29uQ29sb3I6IGZ1bmN0aW9uIF9nZXRJY29uQ29sb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGlzYWJsZWQgPyB0aGlzLmdldFRoZW1lKCkuZGlzYWJsZWRUZXh0Q29sb3IgOiB0aGlzLnByb3BzLnNlY29uZGFyeSA/IHRoaXMuZ2V0VGhlbWUoKS5zZWNvbmRhcnlJY29uQ29sb3IgOiB0aGlzLmdldFRoZW1lKCkuaWNvbkNvbG9yO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciB0aGVtZVZhcmlhYmxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQuZmxvYXRpbmdBY3Rpb25CdXR0b247XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgICB9LFxuICAgICAgY29udGFpbmVyOiB7XG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKSxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGhlaWdodDogdGhlbWVWYXJpYWJsZXMuYnV0dG9uU2l6ZSxcbiAgICAgICAgd2lkdGg6IHRoZW1lVmFyaWFibGVzLmJ1dHRvblNpemUsXG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLl9nZXRCYWNrZ3JvdW5kQ29sb3IoKSxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgdmVydGljYWxBbGlnbjogJ2JvdHRvbScsXG4gICAgICAgIC8vVGhpcyBpcyBuZWVkIHNvIHRoYXQgcmlwcGxlcyBkbyBub3QgYmxlZWRcbiAgICAgICAgLy9wYXN0IGJvcmRlciByYWRpdXMuXG4gICAgICAgIC8vU2VlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE3Mjk4NzM5L2Nzcy1vdmVyZmxvdy1oaWRkZW4tbm90LXdvcmtpbmctaW4tY2hyb21lLXdoZW4tcGFyZW50LWhhcy1ib3JkZXItcmFkaXVzLWFuZC1jaGlsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJ1xuICAgICAgfSxcbiAgICAgIGNvbnRhaW5lcldoZW5NaW5pOiB7XG4gICAgICAgIGhlaWdodDogdGhlbWVWYXJpYWJsZXMubWluaVNpemUsXG4gICAgICAgIHdpZHRoOiB0aGVtZVZhcmlhYmxlcy5taW5pU2l6ZVxuICAgICAgfSxcbiAgICAgIG92ZXJsYXk6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICB0b3A6IDBcbiAgICAgIH0sXG4gICAgICBvdmVybGF5V2hlbkhvdmVyZWQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvck1hbmlwdWxhdG9yLmZhZGUodGhpcy5fZ2V0SWNvbkNvbG9yKCksIDAuNClcbiAgICAgIH0sXG4gICAgICBpY29uOiB7XG4gICAgICAgIGhlaWdodDogdGhlbWVWYXJpYWJsZXMuYnV0dG9uU2l6ZSxcbiAgICAgICAgbGluZUhlaWdodDogdGhlbWVWYXJpYWJsZXMuYnV0dG9uU2l6ZSArICdweCcsXG4gICAgICAgIGZpbGw6IHRoZW1lVmFyaWFibGVzLmljb25Db2xvcixcbiAgICAgICAgY29sb3I6IHRoaXMuX2dldEljb25Db2xvcigpXG4gICAgICB9LFxuICAgICAgaWNvbldoZW5NaW5pOiB7XG4gICAgICAgIGhlaWdodDogdGhlbWVWYXJpYWJsZXMubWluaVNpemUsXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoZW1lVmFyaWFibGVzLm1pbmlTaXplICsgJ3B4J1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQ7XG4gICAgdmFyIG1pbmkgPSBfcHJvcHMubWluaTtcbiAgICB2YXIgc2Vjb25kYXJ5ID0gX3Byb3BzLnNlY29uZGFyeTtcbiAgICB2YXIgaWNvblN0eWxlID0gX3Byb3BzLmljb25TdHlsZTtcbiAgICB2YXIgaWNvbkNsYXNzTmFtZSA9IF9wcm9wcy5pY29uQ2xhc3NOYW1lO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydkaXNhYmxlZCcsICdtaW5pJywgJ3NlY29uZGFyeScsICdpY29uU3R5bGUnLCAnaWNvbkNsYXNzTmFtZSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIGljb25FbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgIGlmIChpY29uQ2xhc3NOYW1lKSB7XG4gICAgICBpY29uRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9udEljb24sIHtcbiAgICAgICAgY2xhc3NOYW1lOiBpY29uQ2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaWNvbiwgbWluaSAmJiBzdHlsZXMuaWNvbldoZW5NaW5pLCBpY29uU3R5bGUpIH0pO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IENoaWxkcmVuLmV4dGVuZCh0aGlzLnByb3BzLmNoaWxkcmVuLCB7XG4gICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaWNvbiwgbWluaSAmJiBzdHlsZXMuaWNvbldoZW5NaW5pLCBpY29uU3R5bGUpXG4gICAgfSk7XG5cbiAgICB2YXIgYnV0dG9uRXZlbnRIYW5kbGVycyA9IGRpc2FibGVkID8gbnVsbCA6IHtcbiAgICAgIG9uTW91c2VEb3duOiB0aGlzLl9oYW5kbGVNb3VzZURvd24sXG4gICAgICBvbk1vdXNlVXA6IHRoaXMuX2hhbmRsZU1vdXNlVXAsXG4gICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuX2hhbmRsZU1vdXNlTGVhdmUsXG4gICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuX2hhbmRsZU1vdXNlRW50ZXIsXG4gICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuX2hhbmRsZVRvdWNoU3RhcnQsXG4gICAgICBvblRvdWNoRW5kOiB0aGlzLl9oYW5kbGVUb3VjaEVuZCxcbiAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5faGFuZGxlS2V5Ym9hcmRGb2N1c1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFBhcGVyLFxuICAgICAge1xuICAgICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5zdHlsZSksXG4gICAgICAgIHpEZXB0aDogdGhpcy5zdGF0ZS56RGVwdGgsXG4gICAgICAgIGNpcmNsZTogdHJ1ZSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgRW5oYW5jZWRCdXR0b24sXG4gICAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwgYnV0dG9uRXZlbnRIYW5kbGVycywge1xuICAgICAgICAgIHJlZjogJ2NvbnRhaW5lcicsXG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5jb250YWluZXIsIHRoaXMucHJvcHMubWluaSAmJiBzdHlsZXMuY29udGFpbmVyV2hlbk1pbmkpLFxuICAgICAgICAgIGZvY3VzUmlwcGxlQ29sb3I6IHN0eWxlcy5pY29uLmNvbG9yLFxuICAgICAgICAgIHRvdWNoUmlwcGxlQ29sb3I6IHN0eWxlcy5pY29uLmNvbG9yIH0pLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJlZjogJ292ZXJsYXknLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm92ZXJsYXksIHRoaXMuc3RhdGUuaG92ZXJlZCAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBzdHlsZXMub3ZlcmxheVdoZW5Ib3ZlcmVkKSB9LFxuICAgICAgICAgIGljb25FbGVtZW50LFxuICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZURvd246IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZURvd24oZSkge1xuICAgIC8vb25seSBsaXN0ZW4gdG8gbGVmdCBjbGlja3NcbiAgICBpZiAoZS5idXR0b24gPT09IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB6RGVwdGg6IHRoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCArIDEgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VEb3duKSB0aGlzLnByb3BzLm9uTW91c2VEb3duKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZVVwOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VVcChlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHpEZXB0aDogdGhpcy5zdGF0ZS5pbml0aWFsWkRlcHRoIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VVcCkgdGhpcy5wcm9wcy5vbk1vdXNlVXAoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlTGVhdmU6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZUxlYXZlKGUpIHtcbiAgICBpZiAoIXRoaXMucmVmcy5jb250YWluZXIuaXNLZXlib2FyZEZvY3VzZWQoKSkgdGhpcy5zZXRTdGF0ZSh7IHpEZXB0aDogdGhpcy5zdGF0ZS5pbml0aWFsWkRlcHRoLCBob3ZlcmVkOiBmYWxzZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUpIHRoaXMucHJvcHMub25Nb3VzZUxlYXZlKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZUVudGVyOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VFbnRlcihlKSB7XG4gICAgaWYgKCF0aGlzLnJlZnMuY29udGFpbmVyLmlzS2V5Ym9hcmRGb2N1c2VkKCkgJiYgIXRoaXMuc3RhdGUudG91Y2gpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIpIHRoaXMucHJvcHMub25Nb3VzZUVudGVyKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVUb3VjaFN0YXJ0OiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hTdGFydChlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB0b3VjaDogdHJ1ZSxcbiAgICAgIHpEZXB0aDogdGhpcy5zdGF0ZS5pbml0aWFsWkRlcHRoICsgMVxuICAgIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uVG91Y2hTdGFydCkgdGhpcy5wcm9wcy5vblRvdWNoU3RhcnQoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoRW5kOiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hFbmQoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyB6RGVwdGg6IHRoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vblRvdWNoRW5kKSB0aGlzLnByb3BzLm9uVG91Y2hFbmQoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZUtleWJvYXJkRm9jdXM6IGZ1bmN0aW9uIF9oYW5kbGVLZXlib2FyZEZvY3VzKGUsIGtleWJvYXJkRm9jdXNlZCkge1xuICAgIGlmIChrZXlib2FyZEZvY3VzZWQgJiYgIXRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB6RGVwdGg6IHRoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCArIDEgfSk7XG4gICAgICBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMub3ZlcmxheSkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gQ29sb3JNYW5pcHVsYXRvci5mYWRlKHRoaXMuZ2V0U3R5bGVzKCkuaWNvbi5jb2xvciwgMC40KTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnN0YXRlLmhvdmVyZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB6RGVwdGg6IHRoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCB9KTtcbiAgICAgIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5vdmVybGF5KS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBGbG9hdGluZ0FjdGlvbkJ1dHRvbjtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2VuaGFuY2VkLWJ1dHRvblwiOjI5LFwiLi9mb250LWljb25cIjozNCxcIi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL3BhcGVyXCI6NTgsXCIuL3N0eWxlcy90cmFuc2l0aW9uc1wiOjc3LFwiLi91dGlscy9jaGlsZHJlblwiOjEyNCxcIi4vdXRpbHMvY29sb3ItbWFuaXB1bGF0b3JcIjoxMjUsXCJfcHJvY2Vzc1wiOjEsXCJyZWFjdFwiOjMxOX1dLDM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcblxudmFyIEZvbnRJY29uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0ZvbnRJY29uJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGNvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhvdmVyQ29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgb25Nb3VzZUxlYXZlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlRW50ZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhvdmVyZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY29sb3IgPSBfcHJvcHMuY29sb3I7XG4gICAgdmFyIGhvdmVyQ29sb3IgPSBfcHJvcHMuaG92ZXJDb2xvcjtcbiAgICB2YXIgb25Nb3VzZUxlYXZlID0gX3Byb3BzLm9uTW91c2VMZWF2ZTtcbiAgICB2YXIgb25Nb3VzZUVudGVyID0gX3Byb3BzLm9uTW91c2VFbnRlcjtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NvbG9yJywgJ2hvdmVyQ29sb3InLCAnb25Nb3VzZUxlYXZlJywgJ29uTW91c2VFbnRlcicsICdzdHlsZSddKTtcblxuICAgIHZhciBzcGFjaW5nID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmc7XG4gICAgdmFyIG9mZkNvbG9yID0gY29sb3IgPyBjb2xvciA6IHN0eWxlICYmIHN0eWxlLmNvbG9yID8gc3R5bGUuY29sb3IgOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZS50ZXh0Q29sb3I7XG4gICAgdmFyIG9uQ29sb3IgPSBob3ZlckNvbG9yID8gaG92ZXJDb2xvciA6IG9mZkNvbG9yO1xuXG4gICAgdmFyIG1lcmdlZFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoe1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBmb250U2l6ZTogc3BhY2luZy5pY29uU2l6ZSxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpXG4gICAgfSwgc3R5bGUsIHtcbiAgICAgIGNvbG9yOiB0aGlzLnN0YXRlLmhvdmVyZWQgPyBvbkNvbG9yIDogb2ZmQ29sb3JcbiAgICB9KTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuX2hhbmRsZU1vdXNlTGVhdmUsXG4gICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuX2hhbmRsZU1vdXNlRW50ZXIsXG4gICAgICBzdHlsZTogbWVyZ2VkU3R5bGVzIH0pKTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VMZWF2ZTogZnVuY3Rpb24gX2hhbmRsZU1vdXNlTGVhdmUoZSkge1xuICAgIC8vIGhvdmVyIGlzIG5lZWRlZCBvbmx5IHdoZW4gYSBob3ZlckNvbG9yIGlzIGRlZmluZWRcbiAgICBpZiAodGhpcy5wcm9wcy5ob3ZlckNvbG9yICE9PSB1bmRlZmluZWQpIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiBmYWxzZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUpIHtcbiAgICAgIHRoaXMucHJvcHMub25Nb3VzZUxlYXZlKGUpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlTW91c2VFbnRlcjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlRW50ZXIoZSkge1xuICAgIC8vIGhvdmVyIGlzIG5lZWRlZCBvbmx5IHdoZW4gYSBob3ZlckNvbG9yIGlzIGRlZmluZWRcbiAgICBpZiAodGhpcy5wcm9wcy5ob3ZlckNvbG9yICE9PSB1bmRlZmluZWQpIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VFbnRlcikge1xuICAgICAgdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIoZSk7XG4gICAgfVxuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBGb250SWNvbjtcbn0se1wiLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4vc3R5bGVzL3RyYW5zaXRpb25zXCI6NzcsXCJyZWFjdFwiOjMxOX1dLDM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCcuL3V0aWxzL3Byb3AtdHlwZXMnKTtcbnZhciBFbmhhbmNlZEJ1dHRvbiA9IHJlcXVpcmUoJy4vZW5oYW5jZWQtYnV0dG9uJyk7XG52YXIgRm9udEljb24gPSByZXF1aXJlKCcuL2ZvbnQtaWNvbicpO1xudmFyIFRvb2x0aXAgPSByZXF1aXJlKCcuL3Rvb2x0aXAnKTtcbnZhciBDaGlsZHJlbiA9IHJlcXVpcmUoJy4vdXRpbHMvY2hpbGRyZW4nKTtcblxudmFyIEljb25CdXR0b24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnSWNvbkJ1dHRvbicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGlzYWJsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGljb25DbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaWNvblN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG9uQmx1cjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Gb2N1czogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25LZXlib2FyZEZvY3VzOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICB0b29sdGlwOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvb2x0aXBTdHlsZXM6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgdG9vbHRpcFBvc2l0aW9uOiBQcm9wVHlwZXMuY29ybmVyc0FuZENlbnRlcixcbiAgICB0b3VjaDogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9vbHRpcFNob3duOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGljb25TdHlsZToge30sXG4gICAgICB0b29sdGlwUG9zaXRpb246ICdib3R0b20tY2VudGVyJ1xuICAgIH07XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHNwYWNpbmcgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZztcbiAgICB2YXIgcGFsZXR0ZSA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIHBhZGRpbmc6IHNwYWNpbmcuaWNvblNpemUgLyAyLFxuICAgICAgICB3aWR0aDogc3BhY2luZy5pY29uU2l6ZSAqIDIsXG4gICAgICAgIGhlaWdodDogc3BhY2luZy5pY29uU2l6ZSAqIDIsXG4gICAgICAgIGZvbnRTaXplOiAwXG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgICAgfSxcbiAgICAgIGljb246IHtcbiAgICAgICAgY29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgICBmaWxsOiBwYWxldHRlLnRleHRDb2xvclxuICAgICAgfSxcbiAgICAgIG92ZXJsYXk6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGJhY2tncm91bmQ6IHBhbGV0dGUuZGlzYWJsZWRDb2xvclxuICAgICAgfSxcbiAgICAgIGRpc2FibGVkOiB7XG4gICAgICAgIGNvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3IsXG4gICAgICAgIGZpbGw6IHBhbGV0dGUuZGlzYWJsZWRDb2xvclxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZDtcbiAgICB2YXIgaWNvbkNsYXNzTmFtZSA9IF9wcm9wcy5pY29uQ2xhc3NOYW1lO1xuICAgIHZhciB0b29sdGlwID0gX3Byb3BzLnRvb2x0aXA7XG4gICAgdmFyIHRvdWNoID0gX3Byb3BzLnRvdWNoO1xuICAgIHZhciBpY29uU3R5bGUgPSBfcHJvcHMuaWNvblN0eWxlO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydkaXNhYmxlZCcsICdpY29uQ2xhc3NOYW1lJywgJ3Rvb2x0aXAnLCAndG91Y2gnLCAnaWNvblN0eWxlJ10pO1xuXG4gICAgdmFyIGZvbnRpY29uID0gdW5kZWZpbmVkO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgdmFyIHRvb2x0aXBQb3NpdGlvbiA9IHRoaXMucHJvcHMudG9vbHRpcFBvc2l0aW9uLnNwbGl0KCctJyk7XG5cbiAgICB2YXIgdG9vbHRpcEVsZW1lbnQgPSB0b29sdGlwID8gUmVhY3QuY3JlYXRlRWxlbWVudChUb29sdGlwLCB7XG4gICAgICByZWY6ICd0b29sdGlwJyxcbiAgICAgIGxhYmVsOiB0b29sdGlwLFxuICAgICAgc2hvdzogdGhpcy5zdGF0ZS50b29sdGlwU2hvd24sXG4gICAgICB0b3VjaDogdG91Y2gsXG4gICAgICBzdHlsZTogdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMudG9vbHRpcCwgdGhpcy5wcm9wcy50b29sdGlwU3R5bGVzKSxcbiAgICAgIHZlcnRpY2FsUG9zaXRpb246IHRvb2x0aXBQb3NpdGlvblswXSxcbiAgICAgIGhvcml6b250YWxQb3NpdGlvbjogdG9vbHRpcFBvc2l0aW9uWzFdIH0pIDogbnVsbDtcblxuICAgIGlmIChpY29uQ2xhc3NOYW1lKSB7XG4gICAgICB2YXIgaWNvbkhvdmVyQ29sb3IgPSBpY29uU3R5bGUuaWNvbkhvdmVyQ29sb3I7XG5cbiAgICAgIHZhciBpY29uU3R5bGVGb250SWNvbiA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhpY29uU3R5bGUsIFsnaWNvbkhvdmVyQ29sb3InXSk7XG5cbiAgICAgIGZvbnRpY29uID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgRm9udEljb24sXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGljb25DbGFzc05hbWUsXG4gICAgICAgICAgaG92ZXJDb2xvcjogZGlzYWJsZWQgPyBudWxsIDogaWNvbkhvdmVyQ29sb3IsXG4gICAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLmljb24sIGRpc2FibGVkID8gc3R5bGVzLmRpc2FibGVkIDoge30sIGljb25TdHlsZUZvbnRJY29uKSB9LFxuICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlblN0eWxlID0gZGlzYWJsZWQgPyB0aGlzLm1lcmdlU3R5bGVzKGljb25TdHlsZSwgc3R5bGVzLmRpc2FibGVkKSA6IGljb25TdHlsZTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgRW5oYW5jZWRCdXR0b24sXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgcmVmOiAnYnV0dG9uJyxcbiAgICAgICAgY2VudGVyUmlwcGxlOiB0cnVlLFxuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnN0eWxlKSxcbiAgICAgICAgb25CbHVyOiB0aGlzLl9oYW5kbGVCbHVyLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLl9oYW5kbGVGb2N1cyxcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLl9oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuX2hhbmRsZU1vdXNlRW50ZXIsXG4gICAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5faGFuZGxlS2V5Ym9hcmRGb2N1cyB9KSxcbiAgICAgIHRvb2x0aXBFbGVtZW50LFxuICAgICAgZm9udGljb24sXG4gICAgICBDaGlsZHJlbi5leHRlbmQodGhpcy5wcm9wcy5jaGlsZHJlbiwge1xuICAgICAgICBzdHlsZTogY2hpbGRyZW5TdHlsZVxuICAgICAgfSlcbiAgICApO1xuICB9LFxuXG4gIHNldEtleWJvYXJkRm9jdXM6IGZ1bmN0aW9uIHNldEtleWJvYXJkRm9jdXMoKSB7XG4gICAgdGhpcy5yZWZzLmJ1dHRvbi5zZXRLZXlib2FyZEZvY3VzKCk7XG4gIH0sXG5cbiAgX3Nob3dUb29sdGlwOiBmdW5jdGlvbiBfc2hvd1Rvb2x0aXAoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkICYmIHRoaXMucHJvcHMudG9vbHRpcCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRvb2x0aXBTaG93bjogdHJ1ZSB9KTtcbiAgICB9XG4gIH0sXG5cbiAgX2hpZGVUb29sdGlwOiBmdW5jdGlvbiBfaGlkZVRvb2x0aXAoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMudG9vbHRpcCkgdGhpcy5zZXRTdGF0ZSh7IHRvb2x0aXBTaG93bjogZmFsc2UgfSk7XG4gIH0sXG5cbiAgX2hhbmRsZUJsdXI6IGZ1bmN0aW9uIF9oYW5kbGVCbHVyKGUpIHtcbiAgICB0aGlzLl9oaWRlVG9vbHRpcCgpO1xuICAgIGlmICh0aGlzLnByb3BzLm9uQmx1cikgdGhpcy5wcm9wcy5vbkJsdXIoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZUZvY3VzOiBmdW5jdGlvbiBfaGFuZGxlRm9jdXMoZSkge1xuICAgIHRoaXMuX3Nob3dUb29sdGlwKCk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Gb2N1cykgdGhpcy5wcm9wcy5vbkZvY3VzKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZUxlYXZlOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VMZWF2ZShlKSB7XG4gICAgaWYgKCF0aGlzLnJlZnMuYnV0dG9uLmlzS2V5Ym9hcmRGb2N1c2VkKCkpIHRoaXMuX2hpZGVUb29sdGlwKCk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZUxlYXZlKSB0aGlzLnByb3BzLm9uTW91c2VMZWF2ZShlKTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VFbnRlcjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlRW50ZXIoZSkge1xuICAgIHRoaXMuX3Nob3dUb29sdGlwKCk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZUVudGVyKSB0aGlzLnByb3BzLm9uTW91c2VFbnRlcihlKTtcbiAgfSxcblxuICBfaGFuZGxlS2V5Ym9hcmRGb2N1czogZnVuY3Rpb24gX2hhbmRsZUtleWJvYXJkRm9jdXMoZSwga2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgaWYgKGtleWJvYXJkRm9jdXNlZCAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5fc2hvd1Rvb2x0aXAoKTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uRm9jdXMpIHRoaXMucHJvcHMub25Gb2N1cyhlKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnN0YXRlLmhvdmVyZWQpIHtcbiAgICAgIHRoaXMuX2hpZGVUb29sdGlwKCk7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vbkJsdXIpIHRoaXMucHJvcHMub25CbHVyKGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLm9uS2V5Ym9hcmRGb2N1cykgdGhpcy5wcm9wcy5vbktleWJvYXJkRm9jdXMoZSwga2V5Ym9hcmRGb2N1c2VkKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBJY29uQnV0dG9uO1xufSx7XCIuL2VuaGFuY2VkLWJ1dHRvblwiOjI5LFwiLi9mb250LWljb25cIjozNCxcIi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL3N0eWxlcy90cmFuc2l0aW9uc1wiOjc3LFwiLi90b29sdGlwXCI6MTE5LFwiLi91dGlscy9jaGlsZHJlblwiOjEyNCxcIi4vdXRpbHMvcHJvcC10eXBlc1wiOjEzNixcInJlYWN0XCI6MzE5fV0sMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQXBwQmFyOiByZXF1aXJlKCcuL2FwcC1iYXInKSxcbiAgQXBwQ2FudmFzOiByZXF1aXJlKCcuL2FwcC1jYW52YXMnKSxcbiAgQXZhdGFyOiByZXF1aXJlKCcuL2F2YXRhcicpLFxuICBCZWZvcmVBZnRlcldyYXBwZXI6IHJlcXVpcmUoJy4vYmVmb3JlLWFmdGVyLXdyYXBwZXInKSxcbiAgQ2FyZDogcmVxdWlyZSgnLi9jYXJkL2NhcmQnKSxcbiAgQ2FyZEFjdGlvbnM6IHJlcXVpcmUoJy4vY2FyZC9jYXJkLWFjdGlvbnMnKSxcbiAgQ2FyZEV4cGFuZGFibGU6IHJlcXVpcmUoJy4vY2FyZC9jYXJkLWV4cGFuZGFibGUnKSxcbiAgQ2FyZEhlYWRlcjogcmVxdWlyZSgnLi9jYXJkL2NhcmQtaGVhZGVyJyksXG4gIENhcmRNZWRpYTogcmVxdWlyZSgnLi9jYXJkL2NhcmQtbWVkaWEnKSxcbiAgQ2FyZFRleHQ6IHJlcXVpcmUoJy4vY2FyZC9jYXJkLXRleHQnKSxcbiAgQ2FyZFRpdGxlOiByZXF1aXJlKCcuL2NhcmQvY2FyZC10aXRsZScpLFxuICBDaGVja2JveDogcmVxdWlyZSgnLi9jaGVja2JveCcpLFxuICBDaXJjdWxhclByb2dyZXNzOiByZXF1aXJlKCcuL2NpcmN1bGFyLXByb2dyZXNzJyksXG4gIENsZWFyRml4OiByZXF1aXJlKCcuL2NsZWFyZml4JyksXG4gIERhdGVQaWNrZXI6IHJlcXVpcmUoJy4vZGF0ZS1waWNrZXIvZGF0ZS1waWNrZXInKSxcbiAgRGF0ZVBpY2tlckRpYWxvZzogcmVxdWlyZSgnLi9kYXRlLXBpY2tlci9kYXRlLXBpY2tlci1kaWFsb2cnKSxcbiAgRGlhbG9nOiByZXF1aXJlKCcuL2RpYWxvZycpLFxuICBEcm9wRG93bkljb246IHJlcXVpcmUoJy4vZHJvcC1kb3duLWljb24nKSxcbiAgRHJvcERvd25NZW51OiByZXF1aXJlKCcuL2Ryb3AtZG93bi1tZW51JyksXG4gIEVuaGFuY2VkQnV0dG9uOiByZXF1aXJlKCcuL2VuaGFuY2VkLWJ1dHRvbicpLFxuICBGbGF0QnV0dG9uOiByZXF1aXJlKCcuL2ZsYXQtYnV0dG9uJyksXG4gIEZsb2F0aW5nQWN0aW9uQnV0dG9uOiByZXF1aXJlKCcuL2Zsb2F0aW5nLWFjdGlvbi1idXR0b24nKSxcbiAgRm9udEljb246IHJlcXVpcmUoJy4vZm9udC1pY29uJyksXG4gIEljb25CdXR0b246IHJlcXVpcmUoJy4vaWNvbi1idXR0b24nKSxcbiAgSWNvbk1lbnU6IHJlcXVpcmUoJy4vbWVudXMvaWNvbi1tZW51JyksXG4gIExlZnROYXY6IHJlcXVpcmUoJy4vbGVmdC1uYXYnKSxcbiAgTGluZWFyUHJvZ3Jlc3M6IHJlcXVpcmUoJy4vbGluZWFyLXByb2dyZXNzJyksXG4gIExpc3Q6IHJlcXVpcmUoJy4vbGlzdHMvbGlzdCcpLFxuICBMaXN0RGl2aWRlcjogcmVxdWlyZSgnLi9saXN0cy9saXN0LWRpdmlkZXInKSxcbiAgTGlzdEl0ZW06IHJlcXVpcmUoJy4vbGlzdHMvbGlzdC1pdGVtJyksXG4gIE1lbnU6IHJlcXVpcmUoJy4vbWVudS9tZW51JyksXG4gIE1lbnVJdGVtOiByZXF1aXJlKCcuL21lbnUvbWVudS1pdGVtJyksXG4gIE1peGluczogcmVxdWlyZSgnLi9taXhpbnMvJyksXG4gIE92ZXJsYXk6IHJlcXVpcmUoJy4vb3ZlcmxheScpLFxuICBQYXBlcjogcmVxdWlyZSgnLi9wYXBlcicpLFxuICBSYWRpb0J1dHRvbjogcmVxdWlyZSgnLi9yYWRpby1idXR0b24nKSxcbiAgUmFkaW9CdXR0b25Hcm91cDogcmVxdWlyZSgnLi9yYWRpby1idXR0b24tZ3JvdXAnKSxcbiAgUmFpc2VkQnV0dG9uOiByZXF1aXJlKCcuL3JhaXNlZC1idXR0b24nKSxcbiAgUmVmcmVzaEluZGljYXRvcjogcmVxdWlyZSgnLi9yZWZyZXNoLWluZGljYXRvcicpLFxuICBSaXBwbGVzOiByZXF1aXJlKCcuL3JpcHBsZXMvJyksXG4gIFNlbGVjdEZpZWxkOiByZXF1aXJlKCcuL3NlbGVjdC1maWVsZCcpLFxuICBTbGlkZXI6IHJlcXVpcmUoJy4vc2xpZGVyJyksXG4gIFN2Z0ljb246IHJlcXVpcmUoJy4vc3ZnLWljb24nKSxcbiAgSWNvbnM6IHtcbiAgICBOYXZpZ2F0aW9uTWVudTogcmVxdWlyZSgnLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9tZW51JyksXG4gICAgTmF2aWdhdGlvbkNoZXZyb25MZWZ0OiByZXF1aXJlKCcuL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2NoZXZyb24tbGVmdCcpLFxuICAgIE5hdmlnYXRpb25DaGV2cm9uUmlnaHQ6IHJlcXVpcmUoJy4vc3ZnLWljb25zL25hdmlnYXRpb24vY2hldnJvbi1yaWdodCcpXG4gIH0sXG4gIFN0eWxlczogcmVxdWlyZSgnLi9zdHlsZXMvJyksXG4gIFNuYWNrYmFyOiByZXF1aXJlKCcuL3NuYWNrYmFyJyksXG4gIFRhYjogcmVxdWlyZSgnLi90YWJzL3RhYicpLFxuICBUYWJzOiByZXF1aXJlKCcuL3RhYnMvdGFicycpLFxuICBUYWJsZTogcmVxdWlyZSgnLi90YWJsZS90YWJsZScpLFxuICBUYWJsZUZvb3RlcjogcmVxdWlyZSgnLi90YWJsZS90YWJsZS1mb290ZXInKSxcbiAgVGFibGVIZWFkZXI6IHJlcXVpcmUoJy4vdGFibGUvdGFibGUtaGVhZGVyJyksXG4gIFRhYmxlSGVhZGVyQ29sdW1uOiByZXF1aXJlKCcuL3RhYmxlL3RhYmxlLWhlYWRlci1jb2x1bW4nKSxcbiAgVGhlbWU6IHJlcXVpcmUoJy4vdGhlbWUnKSxcbiAgVG9nZ2xlOiByZXF1aXJlKCcuL3RvZ2dsZScpLFxuICBUaW1lUGlja2VyOiByZXF1aXJlKCcuL3RpbWUtcGlja2VyJyksXG4gIFRleHRGaWVsZDogcmVxdWlyZSgnLi90ZXh0LWZpZWxkJyksXG4gIFRvb2xiYXI6IHJlcXVpcmUoJy4vdG9vbGJhci90b29sYmFyJyksXG4gIFRvb2xiYXJHcm91cDogcmVxdWlyZSgnLi90b29sYmFyL3Rvb2xiYXItZ3JvdXAnKSxcbiAgVG9vbGJhclNlcGFyYXRvcjogcmVxdWlyZSgnLi90b29sYmFyL3Rvb2xiYXItc2VwYXJhdG9yJyksXG4gIFRvb2xiYXJUaXRsZTogcmVxdWlyZSgnLi90b29sYmFyL3Rvb2xiYXItdGl0bGUnKSxcbiAgVG9vbHRpcDogcmVxdWlyZSgnLi90b29sdGlwJyksXG4gIFV0aWxzOiByZXF1aXJlKCcuL3V0aWxzLycpXG59O1xufSx7XCIuL2FwcC1iYXJcIjoyLFwiLi9hcHAtY2FudmFzXCI6MyxcIi4vYXZhdGFyXCI6NCxcIi4vYmVmb3JlLWFmdGVyLXdyYXBwZXJcIjo1LFwiLi9jYXJkL2NhcmRcIjoxMyxcIi4vY2FyZC9jYXJkLWFjdGlvbnNcIjo3LFwiLi9jYXJkL2NhcmQtZXhwYW5kYWJsZVwiOjgsXCIuL2NhcmQvY2FyZC1oZWFkZXJcIjo5LFwiLi9jYXJkL2NhcmQtbWVkaWFcIjoxMCxcIi4vY2FyZC9jYXJkLXRleHRcIjoxMSxcIi4vY2FyZC9jYXJkLXRpdGxlXCI6MTIsXCIuL2NoZWNrYm94XCI6MTQsXCIuL2NpcmN1bGFyLXByb2dyZXNzXCI6MTUsXCIuL2NsZWFyZml4XCI6MTYsXCIuL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyXCI6MjMsXCIuL2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLWRpYWxvZ1wiOjIyLFwiLi9kaWFsb2dcIjoyNixcIi4vZHJvcC1kb3duLWljb25cIjoyNyxcIi4vZHJvcC1kb3duLW1lbnVcIjoyOCxcIi4vZW5oYW5jZWQtYnV0dG9uXCI6MjksXCIuL2ZsYXQtYnV0dG9uXCI6MzIsXCIuL2Zsb2F0aW5nLWFjdGlvbi1idXR0b25cIjozMyxcIi4vZm9udC1pY29uXCI6MzQsXCIuL2ljb24tYnV0dG9uXCI6MzUsXCIuL2xlZnQtbmF2XCI6MzgsXCIuL2xpbmVhci1wcm9ncmVzc1wiOjM5LFwiLi9saXN0cy9saXN0XCI6NDMsXCIuL2xpc3RzL2xpc3QtZGl2aWRlclwiOjQwLFwiLi9saXN0cy9saXN0LWl0ZW1cIjo0MSxcIi4vbWVudS9tZW51XCI6NDYsXCIuL21lbnUvbWVudS1pdGVtXCI6NDUsXCIuL21lbnVzL2ljb24tbWVudVwiOjQ4LFwiLi9taXhpbnMvXCI6NTMsXCIuL292ZXJsYXlcIjo1NyxcIi4vcGFwZXJcIjo1OCxcIi4vcmFkaW8tYnV0dG9uXCI6NjAsXCIuL3JhZGlvLWJ1dHRvbi1ncm91cFwiOjU5LFwiLi9yYWlzZWQtYnV0dG9uXCI6NjEsXCIuL3JlZnJlc2gtaW5kaWNhdG9yXCI6NjIsXCIuL3JpcHBsZXMvXCI6NjUsXCIuL3NlbGVjdC1maWVsZFwiOjY3LFwiLi9zbGlkZXJcIjo2OCxcIi4vc25hY2tiYXJcIjo2OSxcIi4vc3R5bGVzL1wiOjcyLFwiLi9zdmctaWNvblwiOjc5LFwiLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9jaGV2cm9uLWxlZnRcIjo4NixcIi4vc3ZnLWljb25zL25hdmlnYXRpb24vY2hldnJvbi1yaWdodFwiOjg3LFwiLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9tZW51XCI6ODgsXCIuL3RhYmxlL3RhYmxlXCI6OTgsXCIuL3RhYmxlL3RhYmxlLWZvb3RlclwiOjkzLFwiLi90YWJsZS90YWJsZS1oZWFkZXJcIjo5NSxcIi4vdGFibGUvdGFibGUtaGVhZGVyLWNvbHVtblwiOjk0LFwiLi90YWJzL3RhYlwiOjk5LFwiLi90YWJzL3RhYnNcIjoxMDEsXCIuL3RleHQtZmllbGRcIjoxMDIsXCIuL3RoZW1lXCI6MTAzLFwiLi90aW1lLXBpY2tlclwiOjExMCxcIi4vdG9nZ2xlXCI6MTE0LFwiLi90b29sYmFyL3Rvb2xiYXJcIjoxMTgsXCIuL3Rvb2xiYXIvdG9vbGJhci1ncm91cFwiOjExNSxcIi4vdG9vbGJhci90b29sYmFyLXNlcGFyYXRvclwiOjExNixcIi4vdG9vbGJhci90b29sYmFyLXRpdGxlXCI6MTE3LFwiLi90b29sdGlwXCI6MTE5LFwiLi91dGlscy9cIjoxMzJ9XSwzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xuXG52YXIgSW5rQmFyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0lua0JhcicsXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBsZWZ0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgd2lkdGg6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuICB9LFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBwYWxldHRlID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnBhbGV0dGU7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBsZWZ0OiB0aGlzLnByb3BzLmxlZnQsXG4gICAgICB3aWR0aDogdGhpcy5wcm9wcy53aWR0aCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUuYWNjZW50MUNvbG9yLFxuICAgICAgaGVpZ2h0OiAyLFxuICAgICAgbWFyZ2luVG9wOiAtMixcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnMXMnLCAnbGVmdCcpXG4gICAgfSwgdGhpcy5wcm9wcy5zdHlsZSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzIH0sXG4gICAgICAnwqAnXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbmtCYXI7XG59LHtcIi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL3N0eWxlcy90cmFuc2l0aW9uc1wiOjc3LFwicmVhY3RcIjozMTl9XSwzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgS2V5Q29kZSA9IHJlcXVpcmUoJy4vdXRpbHMva2V5LWNvZGUnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBBdXRvUHJlZml4ID0gcmVxdWlyZSgnLi9zdHlsZXMvYXV0by1wcmVmaXgnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgV2luZG93TGlzdGVuYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3dpbmRvdy1saXN0ZW5hYmxlJyk7XG52YXIgT3ZlcmxheSA9IHJlcXVpcmUoJy4vb3ZlcmxheScpO1xudmFyIFBhcGVyID0gcmVxdWlyZSgnLi9wYXBlcicpO1xudmFyIE1lbnUgPSByZXF1aXJlKCcuL21lbnUvbWVudScpO1xuXG52YXIgb3Blbk5hdkV2ZW50SGFuZGxlciA9IG51bGw7XG5cbnZhciBMZWZ0TmF2ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0xlZnROYXYnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGUsIFdpbmRvd0xpc3RlbmFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRpc2FibGVTd2lwZVRvT3BlbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZG9ja2VkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBoZWFkZXI6IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LFxuICAgIG1lbnVJdGVtczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uTmF2T3BlbjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25OYXZDbG9zZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb3BlblJpZ2h0OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzZWxlY3RlZEluZGV4OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIG1lbnVJdGVtQ2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1lbnVJdGVtQ2xhc3NOYW1lU3ViaGVhZGVyOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1lbnVJdGVtQ2xhc3NOYW1lTGluazogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIHdpbmRvd0xpc3RlbmVyczoge1xuICAgICdrZXl1cCc6ICdfb25XaW5kb3dLZXlVcCcsXG4gICAgJ3Jlc2l6ZSc6ICdfb25XaW5kb3dSZXNpemUnXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc2FibGVTd2lwZVRvT3BlbjogZmFsc2UsXG4gICAgICBkb2NrZWQ6IHRydWVcbiAgICB9O1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHRoaXMuX21heWJlU3dpcGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3RvdWNoU3RhcnRYID0gbnVsbDtcbiAgICB0aGlzLl90b3VjaFN0YXJ0WSA9IG51bGw7XG4gICAgdGhpcy5fc3dpcGVTdGFydFggPSBudWxsO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZW46IHRoaXMucHJvcHMuZG9ja2VkLFxuICAgICAgc3dpcGluZzogbnVsbFxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX3VwZGF0ZU1lbnVIZWlnaHQoKTtcbiAgICB0aGlzLl9lbmFibGVTd2lwZUhhbmRsaW5nKCk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5fdXBkYXRlTWVudUhlaWdodCgpO1xuICAgIHRoaXMuX2VuYWJsZVN3aXBlSGFuZGxpbmcoKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5fZGlzYWJsZVN3aXBlSGFuZGxpbmcoKTtcbiAgfSxcblxuICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogIXRoaXMuc3RhdGUub3BlbiB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IGZhbHNlIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uTmF2Q2xvc2UpIHRoaXMucHJvcHMub25OYXZDbG9zZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9wZW46IGZ1bmN0aW9uIG9wZW4oKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IHRydWUgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25OYXZPcGVuKSB0aGlzLnByb3BzLm9uTmF2T3BlbigpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGdldFRoZW1lUGFsZXR0ZTogZnVuY3Rpb24gZ2V0VGhlbWVQYWxldHRlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQubGVmdE5hdjtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgeCA9IHRoaXMuX2dldFRyYW5zbGF0ZU11bHRpcGxpZXIoKSAqICh0aGlzLnN0YXRlLm9wZW4gPyAwIDogdGhpcy5fZ2V0TWF4VHJhbnNsYXRlWCgpKTtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgd2lkdGg6IHRoaXMuZ2V0VGhlbWUoKS53aWR0aCxcbiAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgIHpJbmRleDogMTAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoJyArIHggKyAncHgsIDAsIDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogIXRoaXMuc3RhdGUuc3dpcGluZyAmJiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLmNvbG9yLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgIH0sXG4gICAgICBtZW51OiB7XG4gICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMCdcbiAgICAgIH0sXG4gICAgICBtZW51SXRlbToge1xuICAgICAgICBoZWlnaHQ6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nLmRlc2t0b3BMZWZ0TmF2TWVudUl0ZW1IZWlnaHQsXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nLmRlc2t0b3BMZWZ0TmF2TWVudUl0ZW1IZWlnaHQgKyAncHgnXG4gICAgICB9LFxuICAgICAgcm9vdFdoZW5PcGVuUmlnaHQ6IHtcbiAgICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgICByaWdodDogMFxuICAgICAgfVxuICAgIH07XG4gICAgc3R5bGVzLm1lbnVJdGVtTGluayA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1lbnVJdGVtLCB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIGNvbG9yOiB0aGlzLmdldFRoZW1lUGFsZXR0ZSgpLnRleHRDb2xvclxuICAgIH0pO1xuICAgIHN0eWxlcy5tZW51SXRlbVN1YmhlYWRlciA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1lbnVJdGVtLCB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9KTtcblxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHNlbGVjdGVkSW5kZXggPSB0aGlzLnByb3BzLnNlbGVjdGVkSW5kZXg7XG4gICAgdmFyIG92ZXJsYXkgPSB1bmRlZmluZWQ7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICBpZiAoIXRoaXMucHJvcHMuZG9ja2VkKSB7XG4gICAgICBvdmVybGF5ID0gUmVhY3QuY3JlYXRlRWxlbWVudChPdmVybGF5LCB7XG4gICAgICAgIHJlZjogJ292ZXJsYXknLFxuICAgICAgICBzaG93OiB0aGlzLnN0YXRlLm9wZW4gfHwgISF0aGlzLnN0YXRlLnN3aXBpbmcsXG4gICAgICAgIHRyYW5zaXRpb25FbmFibGVkOiAhdGhpcy5zdGF0ZS5zd2lwaW5nLFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9vbk92ZXJsYXlUb3VjaFRhcFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSB9LFxuICAgICAgb3ZlcmxheSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFBhcGVyLFxuICAgICAgICB7XG4gICAgICAgICAgcmVmOiAnY2xpY2tBd2F5YWJsZUVsZW1lbnQnLFxuICAgICAgICAgIHpEZXB0aDogMixcbiAgICAgICAgICByb3VuZGVkOiBmYWxzZSxcbiAgICAgICAgICB0cmFuc2l0aW9uRW5hYmxlZDogIXRoaXMuc3RhdGUuc3dpcGluZyxcbiAgICAgICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5vcGVuUmlnaHQgJiYgc3R5bGVzLnJvb3RXaGVuT3BlblJpZ2h0LCB0aGlzLnByb3BzLnN0eWxlKSB9LFxuICAgICAgICB0aGlzLnByb3BzLmhlYWRlcixcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNZW51LCB7XG4gICAgICAgICAgcmVmOiAnbWVudUl0ZW1zJyxcbiAgICAgICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubWVudSksXG4gICAgICAgICAgekRlcHRoOiAwLFxuICAgICAgICAgIG1lbnVJdGVtczogdGhpcy5wcm9wcy5tZW51SXRlbXMsXG4gICAgICAgICAgbWVudUl0ZW1TdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubWVudUl0ZW0pLFxuICAgICAgICAgIG1lbnVJdGVtU3R5bGVMaW5rOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5tZW51SXRlbUxpbmspLFxuICAgICAgICAgIG1lbnVJdGVtU3R5bGVTdWJoZWFkZXI6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1lbnVJdGVtU3ViaGVhZGVyKSxcbiAgICAgICAgICBtZW51SXRlbUNsYXNzTmFtZTogdGhpcy5wcm9wcy5tZW51SXRlbUNsYXNzTmFtZSxcbiAgICAgICAgICBtZW51SXRlbUNsYXNzTmFtZVN1YmhlYWRlcjogdGhpcy5wcm9wcy5tZW51SXRlbUNsYXNzTmFtZVN1YmhlYWRlcixcbiAgICAgICAgICBtZW51SXRlbUNsYXNzTmFtZUxpbms6IHRoaXMucHJvcHMubWVudUl0ZW1DbGFzc05hbWVMaW5rLFxuICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IHNlbGVjdGVkSW5kZXgsXG4gICAgICAgICAgb25JdGVtVGFwOiB0aGlzLl9vbk1lbnVJdGVtQ2xpY2sgfSlcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIF91cGRhdGVNZW51SGVpZ2h0OiBmdW5jdGlvbiBfdXBkYXRlTWVudUhlaWdodCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5oZWFkZXIpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMuY2xpY2tBd2F5YWJsZUVsZW1lbnQpO1xuICAgICAgdmFyIG1lbnUgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMubWVudUl0ZW1zKTtcbiAgICAgIHZhciBtZW51SGVpZ2h0ID0gY29udGFpbmVyLmNsaWVudEhlaWdodCAtIG1lbnUub2Zmc2V0VG9wO1xuICAgICAgbWVudS5zdHlsZS5oZWlnaHQgPSBtZW51SGVpZ2h0ICsgJ3B4JztcbiAgICB9XG4gIH0sXG5cbiAgX29uTWVudUl0ZW1DbGljazogZnVuY3Rpb24gX29uTWVudUl0ZW1DbGljayhlLCBrZXksIHBheWxvYWQpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSAmJiB0aGlzLnByb3BzLnNlbGVjdGVkSW5kZXggIT09IGtleSkge1xuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShlLCBrZXksIHBheWxvYWQpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucHJvcHMuZG9ja2VkKSB0aGlzLmNsb3NlKCk7XG4gIH0sXG5cbiAgX29uT3ZlcmxheVRvdWNoVGFwOiBmdW5jdGlvbiBfb25PdmVybGF5VG91Y2hUYXAoKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9LFxuXG4gIF9vbldpbmRvd0tleVVwOiBmdW5jdGlvbiBfb25XaW5kb3dLZXlVcChlKSB7XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gS2V5Q29kZS5FU0MgJiYgIXRoaXMucHJvcHMuZG9ja2VkICYmIHRoaXMuc3RhdGUub3Blbikge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfSxcblxuICBfb25XaW5kb3dSZXNpemU6IGZ1bmN0aW9uIF9vbldpbmRvd1Jlc2l6ZSgpIHtcbiAgICB0aGlzLl91cGRhdGVNZW51SGVpZ2h0KCk7XG4gIH0sXG5cbiAgX2dldE1heFRyYW5zbGF0ZVg6IGZ1bmN0aW9uIF9nZXRNYXhUcmFuc2xhdGVYKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRoZW1lKCkud2lkdGggKyAxMDtcbiAgfSxcblxuICBfZ2V0VHJhbnNsYXRlTXVsdGlwbGllcjogZnVuY3Rpb24gX2dldFRyYW5zbGF0ZU11bHRpcGxpZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMub3BlblJpZ2h0ID8gMSA6IC0xO1xuICB9LFxuXG4gIF9lbmFibGVTd2lwZUhhbmRsaW5nOiBmdW5jdGlvbiBfZW5hYmxlU3dpcGVIYW5kbGluZygpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZG9ja2VkKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9vbkJvZHlUb3VjaFN0YXJ0KTtcbiAgICAgIGlmICghb3Blbk5hdkV2ZW50SGFuZGxlcikge1xuICAgICAgICBvcGVuTmF2RXZlbnRIYW5kbGVyID0gdGhpcy5fb25Cb2R5VG91Y2hTdGFydDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZGlzYWJsZVN3aXBlSGFuZGxpbmcoKTtcbiAgICB9XG4gIH0sXG5cbiAgX2Rpc2FibGVTd2lwZUhhbmRsaW5nOiBmdW5jdGlvbiBfZGlzYWJsZVN3aXBlSGFuZGxpbmcoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5fb25Cb2R5VG91Y2hTdGFydCk7XG4gICAgaWYgKG9wZW5OYXZFdmVudEhhbmRsZXIgPT09IHRoaXMuX29uQm9keVRvdWNoU3RhcnQpIHtcbiAgICAgIG9wZW5OYXZFdmVudEhhbmRsZXIgPSBudWxsO1xuICAgIH1cbiAgfSxcblxuICBfb25Cb2R5VG91Y2hTdGFydDogZnVuY3Rpb24gX29uQm9keVRvdWNoU3RhcnQoZSkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5vcGVuICYmIChvcGVuTmF2RXZlbnRIYW5kbGVyICE9PSB0aGlzLl9vbkJvZHlUb3VjaFN0YXJ0IHx8IHRoaXMucHJvcHMuZGlzYWJsZVN3aXBlVG9PcGVuKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0b3VjaFN0YXJ0WCA9IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgICB2YXIgdG91Y2hTdGFydFkgPSBlLnRvdWNoZXNbMF0ucGFnZVk7XG5cbiAgICB0aGlzLl9tYXliZVN3aXBpbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RvdWNoU3RhcnRYID0gdG91Y2hTdGFydFg7XG4gICAgdGhpcy5fdG91Y2hTdGFydFkgPSB0b3VjaFN0YXJ0WTtcblxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5fb25Cb2R5VG91Y2hNb3ZlKTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5fb25Cb2R5VG91Y2hFbmQpO1xuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCB0aGlzLl9vbkJvZHlUb3VjaEVuZCk7XG4gIH0sXG5cbiAgX3NldFBvc2l0aW9uOiBmdW5jdGlvbiBfc2V0UG9zaXRpb24odHJhbnNsYXRlWCkge1xuICAgIHZhciBsZWZ0TmF2ID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmNsaWNrQXdheWFibGVFbGVtZW50KTtcbiAgICBsZWZ0TmF2LnN0eWxlW0F1dG9QcmVmaXguc2luZ2xlKCd0cmFuc2Zvcm0nKV0gPSAndHJhbnNsYXRlM2QoJyArIHRoaXMuX2dldFRyYW5zbGF0ZU11bHRpcGxpZXIoKSAqIHRyYW5zbGF0ZVggKyAncHgsIDAsIDApJztcbiAgICB0aGlzLnJlZnMub3ZlcmxheS5zZXRPcGFjaXR5KDEgLSB0cmFuc2xhdGVYIC8gdGhpcy5fZ2V0TWF4VHJhbnNsYXRlWCgpKTtcbiAgfSxcblxuICBfZ2V0VHJhbnNsYXRlWDogZnVuY3Rpb24gX2dldFRyYW5zbGF0ZVgoY3VycmVudFgpIHtcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodGhpcy5zdGF0ZS5zd2lwaW5nID09PSAnY2xvc2luZycgPyB0aGlzLl9nZXRUcmFuc2xhdGVNdWx0aXBsaWVyKCkgKiAoY3VycmVudFggLSB0aGlzLl9zd2lwZVN0YXJ0WCkgOiB0aGlzLl9nZXRNYXhUcmFuc2xhdGVYKCkgLSB0aGlzLl9nZXRUcmFuc2xhdGVNdWx0aXBsaWVyKCkgKiAodGhpcy5fc3dpcGVTdGFydFggLSBjdXJyZW50WCksIDApLCB0aGlzLl9nZXRNYXhUcmFuc2xhdGVYKCkpO1xuICB9LFxuXG4gIF9vbkJvZHlUb3VjaE1vdmU6IGZ1bmN0aW9uIF9vbkJvZHlUb3VjaE1vdmUoZSkge1xuICAgIHZhciBjdXJyZW50WCA9IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgICB2YXIgY3VycmVudFkgPSBlLnRvdWNoZXNbMF0ucGFnZVk7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5zd2lwaW5nKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLl9zZXRQb3NpdGlvbih0aGlzLl9nZXRUcmFuc2xhdGVYKGN1cnJlbnRYKSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9tYXliZVN3aXBpbmcpIHtcbiAgICAgIHZhciBkWEFicyA9IE1hdGguYWJzKGN1cnJlbnRYIC0gdGhpcy5fdG91Y2hTdGFydFgpO1xuICAgICAgdmFyIGRZQWJzID0gTWF0aC5hYnMoY3VycmVudFkgLSB0aGlzLl90b3VjaFN0YXJ0WSk7XG4gICAgICAvLyBJZiB0aGUgdXNlciBoYXMgbW92ZWQgaGlzIHRodW1iIHRlbiBwaXhlbHMgaW4gZWl0aGVyIGRpcmVjdGlvbixcbiAgICAgIC8vIHdlIGNhbiBzYWZlbHkgbWFrZSBhbiBhc3N1bXB0aW9uIGFib3V0IHdoZXRoZXIgaGUgd2FzIGludGVuZGluZ1xuICAgICAgLy8gdG8gc3dpcGUgb3Igc2Nyb2xsLlxuICAgICAgdmFyIHRocmVzaG9sZCA9IDEwO1xuXG4gICAgICBpZiAoZFhBYnMgPiB0aHJlc2hvbGQgJiYgZFlBYnMgPD0gdGhyZXNob2xkKSB7XG4gICAgICAgIHRoaXMuX3N3aXBlU3RhcnRYID0gY3VycmVudFg7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHN3aXBpbmc6IHRoaXMuc3RhdGUub3BlbiA/ICdjbG9zaW5nJyA6ICdvcGVuaW5nJ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc2V0UG9zaXRpb24odGhpcy5fZ2V0VHJhbnNsYXRlWChjdXJyZW50WCkpO1xuICAgICAgfSBlbHNlIGlmIChkWEFicyA8PSB0aHJlc2hvbGQgJiYgZFlBYnMgPiB0aHJlc2hvbGQpIHtcbiAgICAgICAgdGhpcy5fb25Cb2R5VG91Y2hFbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgX29uQm9keVRvdWNoRW5kOiBmdW5jdGlvbiBfb25Cb2R5VG91Y2hFbmQoZSkge1xuICAgIGlmICh0aGlzLnN0YXRlLnN3aXBpbmcpIHtcbiAgICAgIHZhciBjdXJyZW50WCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICB2YXIgdHJhbnNsYXRlUmF0aW8gPSB0aGlzLl9nZXRUcmFuc2xhdGVYKGN1cnJlbnRYKSAvIHRoaXMuX2dldE1heFRyYW5zbGF0ZVgoKTtcblxuICAgICAgdGhpcy5fbWF5YmVTd2lwaW5nID0gZmFsc2U7XG4gICAgICB2YXIgc3dpcGluZyA9IHRoaXMuc3RhdGUuc3dpcGluZztcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzd2lwaW5nOiBudWxsXG4gICAgICB9KTtcblxuICAgICAgLy8gV2UgaGF2ZSB0byBvcGVuIG9yIGNsb3NlIGFmdGVyIHNldHRpbmcgc3dpcGluZyB0byBudWxsLFxuICAgICAgLy8gYmVjYXVzZSBvbmx5IHRoZW4gQ1NTIHRyYW5zaXRpb24gaXMgZW5hYmxlZC5cbiAgICAgIGlmICh0cmFuc2xhdGVSYXRpbyA+IDAuNSkge1xuICAgICAgICBpZiAoc3dpcGluZyA9PT0gJ29wZW5pbmcnKSB7XG4gICAgICAgICAgdGhpcy5fc2V0UG9zaXRpb24odGhpcy5fZ2V0TWF4VHJhbnNsYXRlWCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzd2lwaW5nID09PSAnb3BlbmluZycpIHtcbiAgICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zZXRQb3NpdGlvbigwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9tYXliZVN3aXBpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX29uQm9keVRvdWNoTW92ZSk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuX29uQm9keVRvdWNoRW5kKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdGhpcy5fb25Cb2R5VG91Y2hFbmQpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExlZnROYXY7XG59LHtcIi4vbWVudS9tZW51XCI6NDYsXCIuL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi9taXhpbnMvd2luZG93LWxpc3RlbmFibGVcIjo1NixcIi4vb3ZlcmxheVwiOjU3LFwiLi9wYXBlclwiOjU4LFwiLi9zdHlsZXMvYXV0by1wcmVmaXhcIjo3MCxcIi4vc3R5bGVzL3RyYW5zaXRpb25zXCI6NzcsXCIuL3V0aWxzL2tleS1jb2RlXCI6MTMzLFwicmVhY3RcIjozMTl9XSwzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBMaW5lYXJQcm9ncmVzcyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdMaW5lYXJQcm9ncmVzcycsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgbW9kZTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZSddKSxcbiAgICB2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBtaW46IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgbWF4OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyXG4gIH0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBfZ2V0UmVsYXRpdmVWYWx1ZTogZnVuY3Rpb24gX2dldFJlbGF0aXZlVmFsdWUoKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICB2YXIgbWluID0gdGhpcy5wcm9wcy5taW47XG4gICAgdmFyIG1heCA9IHRoaXMucHJvcHMubWF4O1xuXG4gICAgdmFyIGNsYW1wZWRWYWx1ZSA9IE1hdGgubWluKE1hdGgubWF4KG1pbiwgdmFsdWUpLCBtYXgpO1xuICAgIHZhciByYW5nZVZhbHVlID0gbWF4IC0gbWluO1xuICAgIHZhciByZWxWYWx1ZSA9IE1hdGgucm91bmQoY2xhbXBlZFZhbHVlIC8gcmFuZ2VWYWx1ZSAqIDEwMDAwKSAvIDEwMDAwO1xuICAgIHJldHVybiByZWxWYWx1ZSAqIDEwMDtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBiYXIxID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmJhcjEpO1xuICAgIHZhciBiYXIyID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmJhcjIpO1xuXG4gICAgdGhpcy5fYmFyVXBkYXRlKDAsIGJhcjEsIFtbLTM1LCAxMDBdLCBbMTAwLCAtOTBdXSk7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLl9iYXJVcGRhdGUoMCwgYmFyMiwgW1stMjAwLCAxMDBdLCBbMTA3LCAtOF1dKTtcbiAgICB9LCA4NTApO1xuICB9LFxuXG4gIF9iYXJVcGRhdGU6IGZ1bmN0aW9uIF9iYXJVcGRhdGUoc3RlcCwgYmFyRWxlbWVudCwgc3RlcFZhbHVlcykge1xuICAgIHN0ZXAgPSBzdGVwIHx8IDA7XG4gICAgc3RlcCAlPSA0O1xuICAgIHNldFRpbWVvdXQodGhpcy5fYmFyVXBkYXRlLmJpbmQodGhpcywgc3RlcCArIDEsIGJhckVsZW1lbnQsIHN0ZXBWYWx1ZXMpLCA0MjApO1xuICAgIGlmICghdGhpcy5pc01vdW50ZWQoKSkgcmV0dXJuO1xuICAgIGlmICh0aGlzLnByb3BzLm1vZGUgIT09ICdpbmRldGVybWluYXRlJykgcmV0dXJuO1xuXG4gICAgaWYgKHN0ZXAgPT09IDApIHtcbiAgICAgIGJhckVsZW1lbnQuc3R5bGUubGVmdCA9IHN0ZXBWYWx1ZXNbMF1bMF0gKyAnJSc7XG4gICAgICBiYXJFbGVtZW50LnN0eWxlLnJpZ2h0ID0gc3RlcFZhbHVlc1swXVsxXSArICclJztcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPT09IDEpIHtcbiAgICAgIGJhckVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzg0MG1zJztcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPT09IDIpIHtcbiAgICAgIGJhckVsZW1lbnQuc3R5bGUubGVmdCA9IHN0ZXBWYWx1ZXNbMV1bMF0gKyAnJSc7XG4gICAgICBiYXJFbGVtZW50LnN0eWxlLnJpZ2h0ID0gc3RlcFZhbHVlc1sxXVsxXSArICclJztcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPT09IDMpIHtcbiAgICAgIGJhckVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBtcyc7XG4gICAgfVxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtb2RlOiAnaW5kZXRlcm1pbmF0ZScsXG4gICAgICB2YWx1ZTogMCxcbiAgICAgIG1pbjogMCxcbiAgICAgIG1heDogMTAwXG4gICAgfTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBoZWlnaHQ6IDQsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnByaW1hcnkzQ29sb3IsXG4gICAgICAgIGJvcmRlclJhZGl1czogMixcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgIH0sXG4gICAgICBiYXI6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH0sXG4gICAgICBiYXJGcmFnbWVudDE6IHt9LFxuICAgICAgYmFyRnJhZ21lbnQyOiB7fVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09PSAnaW5kZXRlcm1pbmF0ZScpIHtcbiAgICAgIHN0eWxlcy5iYXJGcmFnbWVudDEgPSB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuY3JlYXRlKCdhbGwnLCAnODQwbXMnLCBudWxsLCAnY3ViaWMtYmV6aWVyKDAuNjUwLCAwLjgxNSwgMC43MzUsIDAuMzk1KScpXG4gICAgICB9O1xuXG4gICAgICBzdHlsZXMuYmFyRnJhZ21lbnQyID0ge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkucHJpbWFyeTFDb2xvcixcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmNyZWF0ZSgnYWxsJywgJzg0MG1zJywgbnVsbCwgJ2N1YmljLWJlemllcigwLjE2NSwgMC44NDAsIDAuNDQwLCAxLjAwMCknKVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzLmJhci5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmdldFRoZW1lKCkucHJpbWFyeTFDb2xvcjtcbiAgICAgIHN0eWxlcy5iYXIudHJhbnNpdGlvbiA9IFRyYW5zaXRpb25zLmNyZWF0ZSgnd2lkdGgnLCAnLjNzJywgbnVsbCwgJ2xpbmVhcicpO1xuICAgICAgc3R5bGVzLmJhci53aWR0aCA9IHRoaXMuX2dldFJlbGF0aXZlVmFsdWUoKSArICclJztcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnc3R5bGUnXSk7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHN0eWxlKSB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5iYXIpIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgcmVmOiAnYmFyMScsIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5iYXJGcmFnbWVudDEpIH0pLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHJlZjogJ2JhcjInLCBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuYmFyRnJhZ21lbnQyKSB9KVxuICAgICAgKVxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmVhclByb2dyZXNzO1xufSx7XCIuL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi9zdHlsZXMvdHJhbnNpdGlvbnNcIjo3NyxcInJlYWN0XCI6MzE5fV0sNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIExpc3REaXZpZGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0xpc3REaXZpZGVyJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGluc2V0OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBpbnNldCA9IF9wcm9wcy5pbnNldDtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2luc2V0JywgJ3N0eWxlJ10pO1xuXG4gICAgdmFyIG1lcmdlZFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoe1xuICAgICAgbWFyZ2luOiAwLFxuICAgICAgbWFyZ2luVG9wOiAtMSxcbiAgICAgIG1hcmdpbkxlZnQ6IGluc2V0ID8gNzIgOiAwLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlLmJvcmRlckNvbG9yXG4gICAgfSwgc3R5bGUpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2hyJywgX2V4dGVuZHMoe30sIG90aGVyLCB7IHN0eWxlOiBtZXJnZWRTdHlsZXMgfSkpO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0RGl2aWRlcjtcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSw0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgUHVyZVJlbmRlck1peGluID0gUmVhY3QuYWRkb25zLlB1cmVSZW5kZXJNaXhpbjtcbnZhciBDb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZSgnLi4vdXRpbHMvY29sb3ItbWFuaXB1bGF0b3InKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQ29sb3JzID0gcmVxdWlyZSgnLi4vc3R5bGVzL2NvbG9ycycpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgVHlwb2dyYXBoeSA9IHJlcXVpcmUoJy4uL3N0eWxlcy90eXBvZ3JhcGh5Jyk7XG52YXIgRW5oYW5jZWRCdXR0b24gPSByZXF1aXJlKCcuLi9lbmhhbmNlZC1idXR0b24nKTtcbnZhciBJY29uQnV0dG9uID0gcmVxdWlyZSgnLi4vaWNvbi1idXR0b24nKTtcbnZhciBPcGVuSWNvbiA9IHJlcXVpcmUoJy4uL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2Fycm93LWRyb3AtdXAnKTtcbnZhciBDbG9zZUljb24gPSByZXF1aXJlKCcuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9hcnJvdy1kcm9wLWRvd24nKTtcbnZhciBMaXN0TmVzdGVkID0gcmVxdWlyZSgnLi9saXN0LW5lc3RlZCcpO1xuXG52YXIgTGlzdEl0ZW0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTGlzdEl0ZW0nLFxuXG4gIG1peGluczogW1B1cmVSZW5kZXJNaXhpbiwgU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3I6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlS2V5Ym9hcmRGb2N1czogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgaW5uZXJEaXZTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBpbnNldENoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBpbm5lclN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGxlZnRBdmF0YXI6IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LFxuICAgIGxlZnRDaGVja2JveDogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgbGVmdEljb246IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LFxuICAgIG5lc3RlZExldmVsOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIG9uS2V5Ym9hcmRGb2N1czogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZUVudGVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlTGVhdmU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uTmVzdGVkTGlzdFRvZ2dsZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Ub3VjaFN0YXJ0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvcGVuOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICByaWdodEF2YXRhcjogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgcmlnaHRJY29uOiBSZWFjdC5Qcm9wVHlwZXMuZWxlbWVudCxcbiAgICByaWdodEljb25CdXR0b246IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LFxuICAgIHJpZ2h0VG9nZ2xlOiBSZWFjdC5Qcm9wVHlwZXMuZWxlbWVudCxcbiAgICBwcmltYXJ5VGV4dDogUmVhY3QuUHJvcFR5cGVzLm5vZGUsXG4gICAgc2Vjb25kYXJ5VGV4dDogUmVhY3QuUHJvcFR5cGVzLm5vZGUsXG4gICAgc2Vjb25kYXJ5VGV4dExpbmVzOiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWzEsIDJdKVxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3I6IHRydWUsXG4gICAgICBuZXN0ZWRMZXZlbDogMCxcbiAgICAgIG9uS2V5Ym9hcmRGb2N1czogZnVuY3Rpb24gb25LZXlib2FyZEZvY3VzKCkge30sXG4gICAgICBvbk1vdXNlRW50ZXI6IGZ1bmN0aW9uIG9uTW91c2VFbnRlcigpIHt9LFxuICAgICAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoKSB7fSxcbiAgICAgIG9uTmVzdGVkTGlzdFRvZ2dsZTogZnVuY3Rpb24gb25OZXN0ZWRMaXN0VG9nZ2xlKCkge30sXG4gICAgICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIG9uVG91Y2hTdGFydCgpIHt9LFxuICAgICAgb3BlbjogZmFsc2UsXG4gICAgICBzZWNvbmRhcnlUZXh0TGluZXM6IDFcbiAgICB9O1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBob3ZlcmVkOiBmYWxzZSxcbiAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIG9wZW46IHRoaXMucHJvcHMub3BlbixcbiAgICAgIHJpZ2h0SWNvbkJ1dHRvbkhvdmVyZWQ6IGZhbHNlLFxuICAgICAgcmlnaHRJY29uQnV0dG9uS2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIHRvdWNoOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGF1dG9HZW5lcmF0ZU5lc3RlZEluZGljYXRvciA9IF9wcm9wcy5hdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3I7XG4gICAgdmFyIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuO1xuICAgIHZhciBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZDtcbiAgICB2YXIgZGlzYWJsZUtleWJvYXJkRm9jdXMgPSBfcHJvcHMuZGlzYWJsZUtleWJvYXJkRm9jdXM7XG4gICAgdmFyIGlubmVyRGl2U3R5bGUgPSBfcHJvcHMuaW5uZXJEaXZTdHlsZTtcbiAgICB2YXIgaW5zZXRDaGlsZHJlbiA9IF9wcm9wcy5pbnNldENoaWxkcmVuO1xuICAgIHZhciBsZWZ0QXZhdGFyID0gX3Byb3BzLmxlZnRBdmF0YXI7XG4gICAgdmFyIGxlZnRDaGVja2JveCA9IF9wcm9wcy5sZWZ0Q2hlY2tib3g7XG4gICAgdmFyIGxlZnRJY29uID0gX3Byb3BzLmxlZnRJY29uO1xuICAgIHZhciBuZXN0ZWRMZXZlbCA9IF9wcm9wcy5uZXN0ZWRMZXZlbDtcbiAgICB2YXIgb25LZXlib2FyZEZvY3VzID0gX3Byb3BzLm9uS2V5Ym9hcmRGb2N1cztcbiAgICB2YXIgb25Nb3VzZUxlYXZlID0gX3Byb3BzLm9uTW91c2VMZWF2ZTtcbiAgICB2YXIgb25Nb3VzZUVudGVyID0gX3Byb3BzLm9uTW91c2VFbnRlcjtcbiAgICB2YXIgb25Ub3VjaFN0YXJ0ID0gX3Byb3BzLm9uVG91Y2hTdGFydDtcbiAgICB2YXIgcmlnaHRBdmF0YXIgPSBfcHJvcHMucmlnaHRBdmF0YXI7XG4gICAgdmFyIHJpZ2h0SWNvbiA9IF9wcm9wcy5yaWdodEljb247XG4gICAgdmFyIHJpZ2h0SWNvbkJ1dHRvbiA9IF9wcm9wcy5yaWdodEljb25CdXR0b247XG4gICAgdmFyIHJpZ2h0VG9nZ2xlID0gX3Byb3BzLnJpZ2h0VG9nZ2xlO1xuICAgIHZhciBwcmltYXJ5VGV4dCA9IF9wcm9wcy5wcmltYXJ5VGV4dDtcbiAgICB2YXIgc2Vjb25kYXJ5VGV4dCA9IF9wcm9wcy5zZWNvbmRhcnlUZXh0O1xuICAgIHZhciBzZWNvbmRhcnlUZXh0TGluZXMgPSBfcHJvcHMuc2Vjb25kYXJ5VGV4dExpbmVzO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yJywgJ2NoaWxkcmVuJywgJ2Rpc2FibGVkJywgJ2Rpc2FibGVLZXlib2FyZEZvY3VzJywgJ2lubmVyRGl2U3R5bGUnLCAnaW5zZXRDaGlsZHJlbicsICdsZWZ0QXZhdGFyJywgJ2xlZnRDaGVja2JveCcsICdsZWZ0SWNvbicsICduZXN0ZWRMZXZlbCcsICdvbktleWJvYXJkRm9jdXMnLCAnb25Nb3VzZUxlYXZlJywgJ29uTW91c2VFbnRlcicsICdvblRvdWNoU3RhcnQnLCAncmlnaHRBdmF0YXInLCAncmlnaHRJY29uJywgJ3JpZ2h0SWNvbkJ1dHRvbicsICdyaWdodFRvZ2dsZScsICdwcmltYXJ5VGV4dCcsICdzZWNvbmRhcnlUZXh0JywgJ3NlY29uZGFyeVRleHRMaW5lcycsICdzdHlsZSddKTtcblxuICAgIHZhciB0ZXh0Q29sb3IgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZS50ZXh0Q29sb3I7XG4gICAgdmFyIGhvdmVyQ29sb3IgPSBDb2xvck1hbmlwdWxhdG9yLmZhZGUodGV4dENvbG9yLCAwLjEpO1xuICAgIHZhciBzaW5nbGVBdmF0YXIgPSAhc2Vjb25kYXJ5VGV4dCAmJiAobGVmdEF2YXRhciB8fCByaWdodEF2YXRhcik7XG4gICAgdmFyIHNpbmdsZU5vQXZhdGFyID0gIXNlY29uZGFyeVRleHQgJiYgIShsZWZ0QXZhdGFyIHx8IHJpZ2h0QXZhdGFyKTtcbiAgICB2YXIgdHdvTGluZSA9IHNlY29uZGFyeVRleHQgJiYgc2Vjb25kYXJ5VGV4dExpbmVzID09PSAxO1xuICAgIHZhciB0aHJlZUxpbmUgPSBzZWNvbmRhcnlUZXh0ICYmIHNlY29uZGFyeVRleHRMaW5lcyA+IDE7XG4gICAgdmFyIGhhc0NoZWNrYm94ID0gbGVmdENoZWNrYm94IHx8IHJpZ2h0VG9nZ2xlO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhpcy5zdGF0ZS5pc0tleWJvYXJkRm9jdXNlZCB8fCB0aGlzLnN0YXRlLmhvdmVyZWQpICYmICF0aGlzLnN0YXRlLnJpZ2h0SWNvbkJ1dHRvbkhvdmVyZWQgJiYgIXRoaXMuc3RhdGUucmlnaHRJY29uQnV0dG9uS2V5Ym9hcmRGb2N1c2VkID8gaG92ZXJDb2xvciA6IG51bGwsXG4gICAgICAgIGNvbG9yOiB0ZXh0Q29sb3IsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgICAgbGluZUhlaWdodDogJzE2cHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpXG4gICAgICB9LFxuXG4gICAgICAvL1RoaXMgaW5uZXIgZGl2IGlzIG5lZWRlZCBzbyB0aGF0IHJpcHBsZXMgd2lsbCBzcGFuIHRoZSBlbnRpcmUgY29udGFpbmVyXG4gICAgICBpbm5lckRpdjoge1xuICAgICAgICBtYXJnaW5MZWZ0OiBuZXN0ZWRMZXZlbCAqIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQubGlzdEl0ZW0ubmVzdGVkTGV2ZWxEZXB0aCxcbiAgICAgICAgcGFkZGluZ0xlZnQ6IGxlZnRJY29uIHx8IGxlZnRBdmF0YXIgfHwgbGVmdENoZWNrYm94IHx8IGluc2V0Q2hpbGRyZW4gPyA3MiA6IDE2LFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHJpZ2h0SWNvbiB8fCByaWdodEF2YXRhciB8fCByaWdodEljb25CdXR0b24gPyA1NiA6IHJpZ2h0VG9nZ2xlID8gNzIgOiAxNixcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogc2luZ2xlQXZhdGFyID8gMjAgOiAxNixcbiAgICAgICAgcGFkZGluZ1RvcDogc2luZ2xlTm9BdmF0YXIgfHwgdGhyZWVMaW5lID8gMTYgOiAyMCxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG5cbiAgICAgIGljb25zOiB7XG4gICAgICAgIGhlaWdodDogMjQsXG4gICAgICAgIHdpZHRoOiAyNCxcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogdHdvTGluZSA/IDEyIDogc2luZ2xlQXZhdGFyID8gNCA6IDAsXG4gICAgICAgIHBhZGRpbmc6IDEyXG4gICAgICB9LFxuXG4gICAgICBsZWZ0SWNvbjoge1xuICAgICAgICBjb2xvcjogQ29sb3JzLmdyZXk2MDAsXG4gICAgICAgIGZpbGw6IENvbG9ycy5ncmV5NjAwLFxuICAgICAgICBsZWZ0OiA0XG4gICAgICB9LFxuXG4gICAgICByaWdodEljb246IHtcbiAgICAgICAgY29sb3I6IENvbG9ycy5ncmV5NDAwLFxuICAgICAgICBmaWxsOiBDb2xvcnMuZ3JleTQwMCxcbiAgICAgICAgcmlnaHQ6IDRcbiAgICAgIH0sXG5cbiAgICAgIGF2YXRhcnM6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogc2luZ2xlQXZhdGFyID8gOCA6IDE2XG4gICAgICB9LFxuXG4gICAgICBsYWJlbDoge1xuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgfSxcblxuICAgICAgbGVmdEF2YXRhcjoge1xuICAgICAgICBsZWZ0OiAxNlxuICAgICAgfSxcblxuICAgICAgcmlnaHRBdmF0YXI6IHtcbiAgICAgICAgcmlnaHQ6IDE2XG4gICAgICB9LFxuXG4gICAgICBsZWZ0Q2hlY2tib3g6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIHdpZHRoOiAyNCxcbiAgICAgICAgdG9wOiB0d29MaW5lID8gMjQgOiBzaW5nbGVBdmF0YXIgPyAxNiA6IDEyLFxuICAgICAgICBsZWZ0OiAxNlxuICAgICAgfSxcblxuICAgICAgcHJpbWFyeVRleHQ6IHtcbiAgICAgICAgbWFyZ2luOiAwXG4gICAgICB9LFxuXG4gICAgICByaWdodEljb25CdXR0b246IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIHRvcDogdHdvTGluZSA/IDEyIDogc2luZ2xlQXZhdGFyID8gNCA6IDAsXG4gICAgICAgIHJpZ2h0OiA0XG4gICAgICB9LFxuXG4gICAgICByaWdodFRvZ2dsZToge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgd2lkdGg6IDU0LFxuICAgICAgICB0b3A6IHR3b0xpbmUgPyAyNSA6IHNpbmdsZUF2YXRhciA/IDE3IDogMTMsXG4gICAgICAgIHJpZ2h0OiA4XG4gICAgICB9LFxuXG4gICAgICBzZWNvbmRhcnlUZXh0OiB7XG4gICAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgICAgbGluZUhlaWdodDogdGhyZWVMaW5lID8gJzE4cHgnIDogJzE2cHgnLFxuICAgICAgICBoZWlnaHQ6IHRocmVlTGluZSA/IDM2IDogMTYsXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgbWFyZ2luVG9wOiA0LFxuICAgICAgICBjb2xvcjogVHlwb2dyYXBoeS50ZXh0TGlnaHRCbGFjayxcblxuICAgICAgICAvL25lZWRlZCBmb3IgMiBhbmQgMyBsaW5lIGVsbGlwc2lzXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgICB3aGl0ZVNwYWNlOiB0aHJlZUxpbmUgPyBudWxsIDogJ25vd3JhcCcsXG4gICAgICAgIGRpc3BsYXk6IHRocmVlTGluZSA/ICctd2Via2l0LWJveCcgOiBudWxsLFxuICAgICAgICBXZWJraXRMaW5lQ2xhbXA6IHRocmVlTGluZSA/IDIgOiBudWxsLFxuICAgICAgICBXZWJraXRCb3hPcmllbnQ6IHRocmVlTGluZSA/ICd2ZXJ0aWNhbCcgOiBudWxsXG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBjb250ZW50Q2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgbmVzdGVkTGlzdEl0ZW1zID0gW107XG5cbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcblxuICAgICAgaWYgKGNoaWxkID09PSBudWxsKSByZXR1cm47XG5cbiAgICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2hpbGQudHlwZS5kaXNwbGF5TmFtZSA9PT0gJ0xpc3RJdGVtJykge1xuICAgICAgICBuZXN0ZWRMaXN0SXRlbXMucHVzaChjaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZW50Q2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAobGVmdEljb24pIHtcbiAgICAgIHRoaXMuX3B1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgbGVmdEljb24sIHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLmljb25zLCBzdHlsZXMubGVmdEljb24pKTtcbiAgICB9XG5cbiAgICBpZiAocmlnaHRJY29uKSB7XG4gICAgICB0aGlzLl9wdXNoRWxlbWVudChjb250ZW50Q2hpbGRyZW4sIHJpZ2h0SWNvbiwgdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMuaWNvbnMsIHN0eWxlcy5yaWdodEljb24pKTtcbiAgICB9XG5cbiAgICBpZiAobGVmdEF2YXRhcikge1xuICAgICAgdGhpcy5fcHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCBsZWZ0QXZhdGFyLCB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5hdmF0YXJzLCBzdHlsZXMubGVmdEF2YXRhcikpO1xuICAgIH1cblxuICAgIGlmIChyaWdodEF2YXRhcikge1xuICAgICAgdGhpcy5fcHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCByaWdodEF2YXRhciwgdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMuYXZhdGFycywgc3R5bGVzLnJpZ2h0QXZhdGFyKSk7XG4gICAgfVxuXG4gICAgaWYgKGxlZnRDaGVja2JveCkge1xuICAgICAgdGhpcy5fcHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCBsZWZ0Q2hlY2tib3gsIHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLmxlZnRDaGVja2JveCkpO1xuICAgIH1cblxuICAgIC8vUmlnaHRJY29uQnV0dG9uRWxlbWVudFxuICAgIHZhciBoYXNOZXN0TGlzdEl0ZW1zID0gbmVzdGVkTGlzdEl0ZW1zLmxlbmd0aDtcbiAgICB2YXIgaGFzUmlnaHRFbGVtZW50ID0gcmlnaHRBdmF0YXIgfHwgcmlnaHRJY29uIHx8IHJpZ2h0SWNvbkJ1dHRvbiB8fCByaWdodFRvZ2dsZTtcbiAgICB2YXIgbmVlZHNOZXN0ZWRJbmRpY2F0b3IgPSBoYXNOZXN0TGlzdEl0ZW1zICYmIGF1dG9HZW5lcmF0ZU5lc3RlZEluZGljYXRvciAmJiAhaGFzUmlnaHRFbGVtZW50O1xuXG4gICAgaWYgKHJpZ2h0SWNvbkJ1dHRvbiB8fCBuZWVkc05lc3RlZEluZGljYXRvcikge1xuICAgICAgdmFyIHJpZ2h0SWNvbkJ1dHRvbkVsZW1lbnQgPSByaWdodEljb25CdXR0b247XG4gICAgICB2YXIgcmlnaHRJY29uQnV0dG9uSGFuZGxlcnMgPSB7XG4gICAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5faGFuZGxlUmlnaHRJY29uQnV0dG9uS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLl9oYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZUVudGVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlTGVhdmUsXG4gICAgICAgIG9uVG91Y2hUYXA6IHRoaXMuX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwLFxuICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5faGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcCxcbiAgICAgICAgb25Nb3VzZVVwOiB0aGlzLl9oYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZVVwXG4gICAgICB9O1xuXG4gICAgICAvLyBDcmVhdGUgYSBuZXN0ZWQgbGlzdCBpbmRpY2F0b3IgaWNvbiBpZiB3ZSBkb24ndCBoYXZlIGFuIGljb24gb24gdGhlIHJpZ2h0XG4gICAgICBpZiAobmVlZHNOZXN0ZWRJbmRpY2F0b3IpIHtcbiAgICAgICAgcmlnaHRJY29uQnV0dG9uRWxlbWVudCA9IHRoaXMuc3RhdGUub3BlbiA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgSWNvbkJ1dHRvbixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoT3Blbkljb24sIG51bGwpXG4gICAgICAgICkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEljb25CdXR0b24sXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENsb3NlSWNvbiwgbnVsbClcbiAgICAgICAgKTtcbiAgICAgICAgcmlnaHRJY29uQnV0dG9uSGFuZGxlcnMub25Ub3VjaFRhcCA9IHRoaXMuX2hhbmRsZU5lc3RlZExpc3RUb2dnbGU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3B1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgcmlnaHRJY29uQnV0dG9uRWxlbWVudCwgdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMucmlnaHRJY29uQnV0dG9uKSwgcmlnaHRJY29uQnV0dG9uSGFuZGxlcnMpO1xuICAgIH1cblxuICAgIGlmIChyaWdodFRvZ2dsZSkge1xuICAgICAgdGhpcy5fcHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCByaWdodFRvZ2dsZSwgdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMucmlnaHRUb2dnbGUpKTtcbiAgICB9XG5cbiAgICB2YXIgbmVzdGVkTGlzdCA9IGhhc05lc3RMaXN0SXRlbXMgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgTGlzdE5lc3RlZCxcbiAgICAgIHsgbmVzdGVkTGV2ZWw6IG5lc3RlZExldmVsICsgMSwgb3BlbjogdGhpcy5zdGF0ZS5vcGVuIH0sXG4gICAgICBuZXN0ZWRMaXN0SXRlbXNcbiAgICApIDogbnVsbDtcblxuICAgIGlmIChwcmltYXJ5VGV4dCkge1xuICAgICAgdmFyIHNlY29uZGFyeVRleHRFbGVtZW50ID0gdGhpcy5fY3JlYXRlVGV4dEVsZW1lbnQoc3R5bGVzLnByaW1hcnlUZXh0LCBwcmltYXJ5VGV4dCwgJ3ByaW1hcnlUZXh0Jyk7XG4gICAgICBjb250ZW50Q2hpbGRyZW4ucHVzaChzZWNvbmRhcnlUZXh0RWxlbWVudCk7XG4gICAgfVxuXG4gICAgaWYgKHNlY29uZGFyeVRleHQpIHtcbiAgICAgIHZhciBzZWNvbmRhcnlUZXh0RWxlbWVudCA9IHRoaXMuX2NyZWF0ZVRleHRFbGVtZW50KHN0eWxlcy5zZWNvbmRhcnlUZXh0LCBzZWNvbmRhcnlUZXh0LCAnc2Vjb25kYXJ5VGV4dCcpO1xuICAgICAgY29udGVudENoaWxkcmVuLnB1c2goc2Vjb25kYXJ5VGV4dEVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBoYXNDaGVja2JveCA/IHRoaXMuX2NyZWF0ZUxhYmVsRWxlbWVudChzdHlsZXMsIGNvbnRlbnRDaGlsZHJlbikgOiBkaXNhYmxlZCA/IHRoaXMuX2NyZWF0ZURpc2FibGVkRWxlbWVudChzdHlsZXMsIGNvbnRlbnRDaGlsZHJlbikgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBudWxsLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgRW5oYW5jZWRCdXR0b24sXG4gICAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgICBkaXNhYmxlS2V5Ym9hcmRGb2N1czogZGlzYWJsZUtleWJvYXJkRm9jdXMgfHwgdGhpcy5zdGF0ZS5yaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzZWQsXG4gICAgICAgICAgbGlua0J1dHRvbjogdHJ1ZSxcbiAgICAgICAgICBvbktleWJvYXJkRm9jdXM6IHRoaXMuX2hhbmRsZUtleWJvYXJkRm9jdXMsXG4gICAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLl9oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5faGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuX2hhbmRsZVRvdWNoU3RhcnQsXG4gICAgICAgICAgcmVmOiAnZW5oYW5jZWRCdXR0b24nLFxuICAgICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCBzdHlsZSkgfSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaW5uZXJEaXYsIGlubmVyRGl2U3R5bGUpIH0sXG4gICAgICAgICAgY29udGVudENoaWxkcmVuXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBuZXN0ZWRMaXN0XG4gICAgKTtcbiAgfSxcblxuICBhcHBseUZvY3VzU3RhdGU6IGZ1bmN0aW9uIGFwcGx5Rm9jdXNTdGF0ZShmb2N1c1N0YXRlKSB7XG4gICAgdmFyIGJ1dHRvbiA9IHRoaXMucmVmcy5lbmhhbmNlZEJ1dHRvbjtcbiAgICB2YXIgYnV0dG9uRWwgPSBSZWFjdC5maW5kRE9NTm9kZShidXR0b24pO1xuXG4gICAgaWYgKGJ1dHRvbikge1xuICAgICAgc3dpdGNoIChmb2N1c1N0YXRlKSB7XG4gICAgICAgIGNhc2UgJ25vbmUnOlxuICAgICAgICAgIGJ1dHRvbkVsLmJsdXIoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZm9jdXNlZCc6XG4gICAgICAgICAgYnV0dG9uRWwuZm9jdXMoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAna2V5Ym9hcmQtZm9jdXNlZCc6XG4gICAgICAgICAgYnV0dG9uLnNldEtleWJvYXJkRm9jdXMoKTtcbiAgICAgICAgICBidXR0b25FbC5mb2N1cygpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfY3JlYXRlRGlzYWJsZWRFbGVtZW50OiBmdW5jdGlvbiBfY3JlYXRlRGlzYWJsZWRFbGVtZW50KHN0eWxlcywgY29udGVudENoaWxkcmVuKSB7XG4gICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzO1xuICAgIHZhciBpbm5lckRpdlN0eWxlID0gX3Byb3BzMi5pbm5lckRpdlN0eWxlO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wczIuc3R5bGU7XG5cbiAgICB2YXIgbWVyZ2VkRGl2U3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgc3R5bGVzLmlubmVyRGl2LCBpbm5lckRpdlN0eWxlLCBzdHlsZSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogbWVyZ2VkRGl2U3R5bGVzIH0sIGNvbnRlbnRDaGlsZHJlbik7XG4gIH0sXG5cbiAgX2NyZWF0ZUxhYmVsRWxlbWVudDogZnVuY3Rpb24gX2NyZWF0ZUxhYmVsRWxlbWVudChzdHlsZXMsIGNvbnRlbnRDaGlsZHJlbikge1xuICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgaW5uZXJEaXZTdHlsZSA9IF9wcm9wczMuaW5uZXJEaXZTdHlsZTtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMzLnN0eWxlO1xuXG4gICAgdmFyIG1lcmdlZExhYmVsU3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgc3R5bGVzLmlubmVyRGl2LCBpbm5lckRpdlN0eWxlLCBzdHlsZXMubGFiZWwsIHN0eWxlKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdsYWJlbCcsIHsgc3R5bGU6IG1lcmdlZExhYmVsU3R5bGVzIH0sIGNvbnRlbnRDaGlsZHJlbik7XG4gIH0sXG5cbiAgX2NyZWF0ZVRleHRFbGVtZW50OiBmdW5jdGlvbiBfY3JlYXRlVGV4dEVsZW1lbnQoc3R5bGVzLCBkYXRhLCBrZXkpIHtcbiAgICB2YXIgaXNBbkVsZW1lbnQgPSBSZWFjdC5pc1ZhbGlkRWxlbWVudChkYXRhKTtcbiAgICB2YXIgbWVyZ2VkU3R5bGVzID0gaXNBbkVsZW1lbnQgPyB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcywgZGF0YS5wcm9wcy5zdHlsZSkgOiBudWxsO1xuXG4gICAgcmV0dXJuIGlzQW5FbGVtZW50ID8gUmVhY3QuY2xvbmVFbGVtZW50KGRhdGEsIHtcbiAgICAgIGtleToga2V5LFxuICAgICAgc3R5bGU6IG1lcmdlZFN0eWxlc1xuICAgIH0pIDogUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBrZXk6IGtleSwgc3R5bGU6IHN0eWxlcyB9LFxuICAgICAgZGF0YVxuICAgICk7XG4gIH0sXG5cbiAgX2hhbmRsZUtleWJvYXJkRm9jdXM6IGZ1bmN0aW9uIF9oYW5kbGVLZXlib2FyZEZvY3VzKGUsIGlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzS2V5Ym9hcmRGb2N1c2VkOiBpc0tleWJvYXJkRm9jdXNlZCB9KTtcbiAgICB0aGlzLnByb3BzLm9uS2V5Ym9hcmRGb2N1cyhlLCBpc0tleWJvYXJkRm9jdXNlZCk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlRW50ZXI6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZUVudGVyKGUpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUudG91Y2gpIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pO1xuICAgIHRoaXMucHJvcHMub25Nb3VzZUVudGVyKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZUxlYXZlOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VMZWF2ZShlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgIHRoaXMucHJvcHMub25Nb3VzZUxlYXZlKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVOZXN0ZWRMaXN0VG9nZ2xlOiBmdW5jdGlvbiBfaGFuZGxlTmVzdGVkTGlzdFRvZ2dsZShlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogIXRoaXMuc3RhdGUub3BlbiB9KTtcbiAgICB0aGlzLnByb3BzLm9uTmVzdGVkTGlzdFRvZ2dsZSh0aGlzKTtcbiAgfSxcblxuICBfaGFuZGxlUmlnaHRJY29uQnV0dG9uS2V5Ym9hcmRGb2N1czogZnVuY3Rpb24gX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXMoZSwgaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICB2YXIgaWNvbkJ1dHRvbiA9IHRoaXMucHJvcHMucmlnaHRJY29uQnV0dG9uO1xuICAgIHZhciBuZXdTdGF0ZSA9IHt9O1xuXG4gICAgbmV3U3RhdGUucmlnaHRJY29uQnV0dG9uS2V5Ym9hcmRGb2N1c2VkID0gaXNLZXlib2FyZEZvY3VzZWQ7XG4gICAgaWYgKGlzS2V5Ym9hcmRGb2N1c2VkKSBuZXdTdGF0ZS5pc0tleWJvYXJkRm9jdXNlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuXG4gICAgaWYgKGljb25CdXR0b24gJiYgaWNvbkJ1dHRvbi5wcm9wcy5vbktleWJvYXJkRm9jdXMpIGljb25CdXR0b24ucHJvcHMub25LZXlib2FyZEZvY3VzKGUsIGlzS2V5Ym9hcmRGb2N1c2VkKTtcbiAgfSxcblxuICBfaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VEb3duOiBmdW5jdGlvbiBfaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VEb3duKGUpIHtcbiAgICB2YXIgaWNvbkJ1dHRvbiA9IHRoaXMucHJvcHMucmlnaHRJY29uQnV0dG9uO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKGljb25CdXR0b24gJiYgaWNvbkJ1dHRvbi5wcm9wcy5vbk1vdXNlRG93bikgaWNvbkJ1dHRvbi5wcm9wcy5vbk1vdXNlRG93bihlKTtcbiAgfSxcblxuICBfaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VMZWF2ZTogZnVuY3Rpb24gX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlTGVhdmUoZSkge1xuICAgIHZhciBpY29uQnV0dG9uID0gdGhpcy5wcm9wcy5yaWdodEljb25CdXR0b247XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHJpZ2h0SWNvbkJ1dHRvbkhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgIGlmIChpY29uQnV0dG9uICYmIGljb25CdXR0b24ucHJvcHMub25Nb3VzZUxlYXZlKSBpY29uQnV0dG9uLnByb3BzLm9uTW91c2VMZWF2ZShlKTtcbiAgfSxcblxuICBfaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VFbnRlcjogZnVuY3Rpb24gX2hhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlRW50ZXIoZSkge1xuICAgIHZhciBpY29uQnV0dG9uID0gdGhpcy5wcm9wcy5yaWdodEljb25CdXR0b247XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHJpZ2h0SWNvbkJ1dHRvbkhvdmVyZWQ6IHRydWUgfSk7XG4gICAgaWYgKGljb25CdXR0b24gJiYgaWNvbkJ1dHRvbi5wcm9wcy5vbk1vdXNlRW50ZXIpIGljb25CdXR0b24ucHJvcHMub25Nb3VzZUVudGVyKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZVVwOiBmdW5jdGlvbiBfaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcChlKSB7XG4gICAgdmFyIGljb25CdXR0b24gPSB0aGlzLnByb3BzLnJpZ2h0SWNvbkJ1dHRvbjtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGlmIChpY29uQnV0dG9uICYmIGljb25CdXR0b24ucHJvcHMub25Nb3VzZVVwKSBpY29uQnV0dG9uLnByb3BzLm9uTW91c2VVcChlKTtcbiAgfSxcblxuICBfaGFuZGxlUmlnaHRJY29uQnV0dG9uVG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVSaWdodEljb25CdXR0b25Ub3VjaFRhcChlKSB7XG4gICAgdmFyIGljb25CdXR0b24gPSB0aGlzLnByb3BzLnJpZ2h0SWNvbkJ1dHRvbjtcblxuICAgIC8vU3RvcCB0aGUgZXZlbnQgZnJvbSBidWJibGluZyB1cCB0byB0aGUgbGlzdC1pdGVtXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoaWNvbkJ1dHRvbiAmJiBpY29uQnV0dG9uLnByb3BzLm9uVG91Y2hUYXApIGljb25CdXR0b24ucHJvcHMub25Ub3VjaFRhcChlKTtcbiAgfSxcblxuICBfaGFuZGxlVG91Y2hTdGFydDogZnVuY3Rpb24gX2hhbmRsZVRvdWNoU3RhcnQoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyB0b3VjaDogdHJ1ZSB9KTtcbiAgICB0aGlzLnByb3BzLm9uVG91Y2hTdGFydChlKTtcbiAgfSxcblxuICBfcHVzaEVsZW1lbnQ6IGZ1bmN0aW9uIF9wdXNoRWxlbWVudChjaGlsZHJlbiwgZWxlbWVudCwgYmFzZVN0eWxlcywgYWRkaXRpb25hbFByb3BzKSB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHZhciBzdHlsZXMgPSB0aGlzLm1lcmdlU3R5bGVzKGJhc2VTdHlsZXMsIGVsZW1lbnQucHJvcHMuc3R5bGUpO1xuICAgICAgY2hpbGRyZW4ucHVzaChSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwgX2V4dGVuZHMoe1xuICAgICAgICBrZXk6IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgc3R5bGU6IHN0eWxlc1xuICAgICAgfSwgYWRkaXRpb25hbFByb3BzKSkpO1xuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0SXRlbTtcbn0se1wiLi4vZW5oYW5jZWQtYnV0dG9uXCI6MjksXCIuLi9pY29uLWJ1dHRvblwiOjM1LFwiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi9zdHlsZXMvY29sb3JzXCI6NzEsXCIuLi9zdHlsZXMvdHJhbnNpdGlvbnNcIjo3NyxcIi4uL3N0eWxlcy90eXBvZ3JhcGh5XCI6NzgsXCIuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9hcnJvdy1kcm9wLWRvd25cIjo4NCxcIi4uL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2Fycm93LWRyb3AtdXBcIjo4NSxcIi4uL3V0aWxzL2NvbG9yLW1hbmlwdWxhdG9yXCI6MTI1LFwiLi9saXN0LW5lc3RlZFwiOjQyLFwicmVhY3QvYWRkb25zXCI6MTQ3fV0sNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIExpc3QgPSByZXF1aXJlKCcuL2xpc3QnKTtcblxudmFyIExpc3ROZXN0ZWQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTGlzdE5lc3RlZCcsXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgbmVzdGVkTGV2ZWw6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgb3BlbjogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmVzdGVkTGV2ZWw6IDEsXG4gICAgICBvcGVuOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIG5lc3RlZExldmVsID0gdGhpcy5wcm9wcy5uZXN0ZWRMZXZlbDtcbiAgICB2YXIgc3R5bGUgPSB7XG4gICAgICBuZXN0ZWRMaXN0OiB7fVxuICAgIH07XG5cbiAgICBpZiAoIXRoaXMucHJvcHMub3Blbikge1xuICAgICAgc3R5bGUubmVzdGVkTGlzdC5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgTGlzdCxcbiAgICAgIHsgc3R5bGU6IHN0eWxlLm5lc3RlZExpc3QgfSxcbiAgICAgIFJlYWN0LkNoaWxkcmVuLm1hcCh0aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbmVzdGVkTGV2ZWw6IG5lc3RlZExldmVsICsgMSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdE5lc3RlZDtcbn0se1wiLi9saXN0XCI6NDMsXCJyZWFjdFwiOjMxOX1dLDQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBQdXJlUmVuZGVyTWl4aW4gPSBSZWFjdC5hZGRvbnMuUHVyZVJlbmRlck1peGluO1xudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJy4uL3V0aWxzL3Byb3AtdHlwZXMnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHlwb2dyYXBoeSA9IHJlcXVpcmUoJy4uL3N0eWxlcy90eXBvZ3JhcGh5Jyk7XG52YXIgUGFwZXIgPSByZXF1aXJlKCcuLi9wYXBlcicpO1xuXG52YXIgTGlzdCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdMaXN0JyxcblxuICBtaXhpbnM6IFtQdXJlUmVuZGVyTWl4aW4sIFN0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaW5zZXRTdWJoZWFkZXI6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHN1YmhlYWRlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdWJoZWFkZXJTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICB6RGVwdGg6IFByb3BUeXBlcy56RGVwdGhcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgekRlcHRoOiAwXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW47XG4gICAgdmFyIGluc2V0U3ViaGVhZGVyID0gX3Byb3BzLmluc2V0U3ViaGVhZGVyO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcbiAgICB2YXIgc3ViaGVhZGVyID0gX3Byb3BzLnN1YmhlYWRlcjtcbiAgICB2YXIgc3ViaGVhZGVyU3R5bGUgPSBfcHJvcHMuc3ViaGVhZGVyU3R5bGU7XG4gICAgdmFyIHpEZXB0aCA9IF9wcm9wcy56RGVwdGg7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NoaWxkcmVuJywgJ2luc2V0U3ViaGVhZGVyJywgJ3N0eWxlJywgJ3N1YmhlYWRlcicsICdzdWJoZWFkZXJTdHlsZScsICd6RGVwdGgnXSk7XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiA4LFxuICAgICAgICBwYWRkaW5nVG9wOiBzdWJoZWFkZXIgPyAwIDogOFxuICAgICAgfSxcblxuICAgICAgc3ViaGVhZGVyOiB7XG4gICAgICAgIGNvbG9yOiBUeXBvZ3JhcGh5LnRleHRMaWdodEJsYWNrLFxuICAgICAgICBmb250U2l6ZTogMTQsXG4gICAgICAgIGZvbnRXZWlnaHQ6IFR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bSxcbiAgICAgICAgbGluZUhlaWdodDogJzQ4cHgnLFxuICAgICAgICBwYWRkaW5nTGVmdDogaW5zZXRTdWJoZWFkZXIgPyA3MiA6IDE2XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBzdWJoZWFkZXJFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgIGlmIChzdWJoZWFkZXIpIHtcbiAgICAgIHZhciBtZXJnZWRTdWJoZWFkZXJTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5zdWJoZWFkZXIsIHN1YmhlYWRlclN0eWxlKTtcbiAgICAgIHN1YmhlYWRlckVsZW1lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogbWVyZ2VkU3ViaGVhZGVyU3R5bGVzIH0sXG4gICAgICAgIHN1YmhlYWRlclxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFBhcGVyLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5yb290LCBzdHlsZSksXG4gICAgICAgIHpEZXB0aDogekRlcHRoIH0pLFxuICAgICAgc3ViaGVhZGVyRWxlbWVudCxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdDtcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi9wYXBlclwiOjU4LFwiLi4vc3R5bGVzL3R5cG9ncmFwaHlcIjo3OCxcIi4uL3V0aWxzL3Byb3AtdHlwZXNcIjoxMzYsXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSw0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xuXG52YXIgTGlua01lbnVJdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0xpbmtNZW51SXRlbScsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpbmRleDogUmVhY3QuUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIHBheWxvYWQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0ZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdGFyZ2V0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzYWJsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXJlZDogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5tZW51SXRlbTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGUgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5oZWlnaHQgKyAncHgnLFxuICAgICAgICBwYWRkaW5nTGVmdDogdGhpcy5nZXRUaGVtZSgpLnBhZGRpbmcsXG4gICAgICAgIHBhZGRpbmdSaWdodDogdGhpcy5nZXRUaGVtZSgpLnBhZGRpbmdcbiAgICAgIH0sXG4gICAgICByb290V2hlbkhvdmVyZWQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuaG92ZXJDb2xvclxuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuU2VsZWN0ZWQ6IHtcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5zZWxlY3RlZFRleHRDb2xvclxuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuRGlzYWJsZWQ6IHtcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAgIGNvbG9yOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZS5kaXNhYmxlZENvbG9yXG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBzdHlsZTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgb25DbGlja0hhbmRsZXIgPSB0aGlzLnByb3BzLmRpc2FibGVkID8gdGhpcy5fc3RvcExpbmsgOiB1bmRlZmluZWQ7XG4gICAgLy8gUHJldmVudCBjb250ZXh0IG1lbnUgJ09wZW4gSW4gTmV3IFRhYi9XaW5kb3cnXG4gICAgdmFyIGxpbmtBdHRyaWJ1dGUgPSB0aGlzLnByb3BzLmRpc2FibGVkID8gJ2RhdGEtaHJlZicgOiAnaHJlZic7XG4gICAgdmFyIGxpbmsgPSB7fTtcbiAgICBsaW5rW2xpbmtBdHRyaWJ1dGVdID0gdGhpcy5wcm9wcy5wYXlsb2FkO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICB2YXIgbGlua1N0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc2VsZWN0ZWQgJiYgc3R5bGVzLnJvb3RXaGVuU2VsZWN0ZWQsIHRoaXMucHJvcHMuc2VsZWN0ZWQgJiYgc3R5bGVzLnJvb3RXaGVuU2VsZWN0ZWQsIHRoaXMucHJvcHMuYWN0aXZlICYmICF0aGlzLnByb3BzLmRpc2FibGVkICYmIHN0eWxlcy5yb290V2hlbkhvdmVyZWQsIHRoaXMucHJvcHMuc3R5bGUsIHRoaXMucHJvcHMuZGlzYWJsZWQgJiYgc3R5bGVzLnJvb3RXaGVuRGlzYWJsZWQpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnYScsXG4gICAgICBfZXh0ZW5kcyh7XG4gICAgICAgIGtleTogdGhpcy5wcm9wcy5pbmRleCxcbiAgICAgICAgdGFyZ2V0OiB0aGlzLnByb3BzLnRhcmdldCxcbiAgICAgICAgc3R5bGU6IGxpbmtTdHlsZXMgfSwgbGluaywge1xuICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrSGFuZGxlcixcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLl9oYW5kbGVNb3VzZUVudGVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuX2hhbmRsZU1vdXNlTGVhdmUgfSksXG4gICAgICB0aGlzLnByb3BzLnRleHRcbiAgICApO1xuICB9LFxuXG4gIF9zdG9wTGluazogZnVuY3Rpb24gX3N0b3BMaW5rKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VFbnRlcjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlRW50ZXIoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pO1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiB0aGlzLnByb3BzLm9uTW91c2VFbnRlcikgdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlTGVhdmU6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZUxlYXZlKGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkICYmIHRoaXMucHJvcHMub25Nb3VzZUxlYXZlKSB0aGlzLnByb3BzLm9uTW91c2VMZWF2ZShlKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlua01lbnVJdGVtO1xufSx7XCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcInJlYWN0XCI6MzE5fV0sNDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIEZvbnRJY29uID0gcmVxdWlyZSgnLi4vZm9udC1pY29uJyk7XG52YXIgVG9nZ2xlID0gcmVxdWlyZSgnLi4vdG9nZ2xlJyk7XG5cbnZhciBUeXBlcyA9IHtcbiAgTElOSzogJ0xJTksnLFxuICBTVUJIRUFERVI6ICdTVUJIRUFERVInLFxuICBORVNURUQ6ICdORVNURUQnXG59O1xuXG52YXIgTWVudUl0ZW0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTWVudUl0ZW0nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaWNvbkNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpY29uUmlnaHRDbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaWNvblN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGljb25SaWdodFN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGF0dHJpYnV0ZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBudW1iZXI6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGF0YTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0b2dnbGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvblRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblRvZ2dsZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2VsZWN0ZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGFjdGl2ZTogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBzdGF0aWNzOiB7XG4gICAgVHlwZXM6IFR5cGVzXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvZ2dsZTogZmFsc2UsXG4gICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICBhY3RpdmU6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQubWVudUl0ZW07XG4gIH0sXG5cbiAgZ2V0U3BhY2luZzogZnVuY3Rpb24gZ2V0U3BhY2luZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmc7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgbGluZUhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmhlaWdodCArICdweCcsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiB0aGlzLmdldFRoZW1lKCkucGFkZGluZyxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiB0aGlzLmdldFRoZW1lKCkucGFkZGluZyxcbiAgICAgICAgY29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlLnRleHRDb2xvclxuICAgICAgfSxcbiAgICAgIG51bWJlcjoge1xuICAgICAgICBmbG9hdDogJ3JpZ2h0JyxcbiAgICAgICAgd2lkdGg6IDI0LFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgICB9LFxuICAgICAgYXR0cmlidXRlOiB7XG4gICAgICAgIGZsb2F0OiAncmlnaHQnXG4gICAgICB9LFxuICAgICAgaWNvblJpZ2h0OiB7XG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5oZWlnaHQgKyAncHgnLFxuICAgICAgICBmbG9hdDogJ3JpZ2h0J1xuICAgICAgfSxcbiAgICAgIGljb246IHtcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgbGluZUhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmhlaWdodCArICdweCcsXG4gICAgICAgIG1hcmdpblJpZ2h0OiB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyXG4gICAgICB9LFxuICAgICAgZGF0YToge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICBwYWRkaW5nTGVmdDogdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcEd1dHRlciAqIDIsXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5kYXRhSGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmdldFRoZW1lKCkuZGF0YUhlaWdodCArICdweCcsXG4gICAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgICB0b3A6IC0xMixcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGZvbnRXZWlnaHQ6IDMwMCxcbiAgICAgICAgY29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlLnRleHRDb2xvclxuICAgICAgfSxcbiAgICAgIHRvZ2dsZToge1xuICAgICAgICBtYXJnaW5Ub3A6ICh0aGlzLmdldFRoZW1lKCkuaGVpZ2h0IC0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5yYWRpb0J1dHRvbi5zaXplKSAvIDIsXG4gICAgICAgIGZsb2F0OiAncmlnaHQnLFxuICAgICAgICB3aWR0aDogNDJcbiAgICAgIH0sXG4gICAgICByb290V2hlbkhvdmVyZWQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuaG92ZXJDb2xvclxuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuU2VsZWN0ZWQ6IHtcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5zZWxlY3RlZFRleHRDb2xvclxuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuRGlzYWJsZWQ6IHtcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAgIGNvbG9yOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZS5kaXNhYmxlZENvbG9yXG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGljb24gPSB1bmRlZmluZWQ7XG4gICAgdmFyIGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgdmFyIGljb25SaWdodCA9IHVuZGVmaW5lZDtcbiAgICB2YXIgYXR0cmlidXRlID0gdW5kZWZpbmVkO1xuICAgIHZhciBudW1iZXIgPSB1bmRlZmluZWQ7XG4gICAgdmFyIHRvZ2dsZUVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pY29uQ2xhc3NOYW1lKSBpY29uID0gUmVhY3QuY3JlYXRlRWxlbWVudChGb250SWNvbiwgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaWNvbiwgdGhpcy5wcm9wcy5pY29uU3R5bGUsIHRoaXMucHJvcHMuc2VsZWN0ZWQgJiYgc3R5bGVzLnJvb3RXaGVuU2VsZWN0ZWQpLCBjbGFzc05hbWU6IHRoaXMucHJvcHMuaWNvbkNsYXNzTmFtZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5pY29uUmlnaHRDbGFzc05hbWUpIGljb25SaWdodCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9udEljb24sIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmljb25SaWdodCwgdGhpcy5wcm9wcy5pY29uUmlnaHRTdHlsZSksIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5pY29uUmlnaHRDbGFzc05hbWUgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMuZGF0YSkgZGF0YSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnc3BhbicsXG4gICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5kYXRhKSB9LFxuICAgICAgdGhpcy5wcm9wcy5kYXRhXG4gICAgKTtcbiAgICBpZiAodGhpcy5wcm9wcy5udW1iZXIgIT09IHVuZGVmaW5lZCkgbnVtYmVyID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm51bWJlcikgfSxcbiAgICAgIHRoaXMucHJvcHMubnVtYmVyXG4gICAgKTtcbiAgICBpZiAodGhpcy5wcm9wcy5hdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCkgYXR0cmlidXRlID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnN0eWxlKSB9LFxuICAgICAgdGhpcy5wcm9wcy5hdHRyaWJ1dGVcbiAgICApO1xuICAgIGlmICh0aGlzLnByb3BzLmljb24pIGljb24gPSB0aGlzLnByb3BzLmljb247XG5cbiAgICBpZiAodGhpcy5wcm9wcy50b2dnbGUpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgdmFyIHRvZ2dsZSA9IF9wcm9wcy50b2dnbGU7XG4gICAgICB2YXIgb25Ub3VjaFRhcCA9IF9wcm9wcy5vblRvdWNoVGFwO1xuICAgICAgdmFyIG9uVG9nZ2xlID0gX3Byb3BzLm9uVG9nZ2xlO1xuICAgICAgdmFyIG9uTW91c2VFbnRlciA9IF9wcm9wcy5vbk1vdXNlRW50ZXI7XG4gICAgICB2YXIgb25Nb3VzZUxlYXZlID0gX3Byb3BzLm9uTW91c2VMZWF2ZTtcbiAgICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBsYWJlbCA9IF9wcm9wcy5sYWJlbDtcbiAgICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWyd0b2dnbGUnLCAnb25Ub3VjaFRhcCcsICdvblRvZ2dsZScsICdvbk1vdXNlRW50ZXInLCAnb25Nb3VzZUxlYXZlJywgJ2NoaWxkcmVuJywgJ2xhYmVsJywgJ3N0eWxlJ10pO1xuXG4gICAgICB0b2dnbGVFbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChUb2dnbGUsIF9leHRlbmRzKHt9LCBvdGhlciwgeyBvblRvZ2dsZTogdGhpcy5faGFuZGxlVG9nZ2xlLCBzdHlsZTogc3R5bGVzLnRvZ2dsZSB9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHtcbiAgICAgICAga2V5OiB0aGlzLnByb3BzLmluZGV4LFxuICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVUb3VjaFRhcCxcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLl9oYW5kbGVNb3VzZUVudGVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuX2hhbmRsZU1vdXNlTGVhdmUsXG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnNlbGVjdGVkICYmIHN0eWxlcy5yb290V2hlblNlbGVjdGVkLCB0aGlzLnByb3BzLmFjdGl2ZSAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBzdHlsZXMucm9vdFdoZW5Ib3ZlcmVkLCB0aGlzLnByb3BzLnN0eWxlLCB0aGlzLnByb3BzLmRpc2FibGVkICYmIHN0eWxlcy5yb290V2hlbkRpc2FibGVkKSB9LFxuICAgICAgaWNvbixcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW4sXG4gICAgICBkYXRhLFxuICAgICAgYXR0cmlidXRlLFxuICAgICAgbnVtYmVyLFxuICAgICAgdG9nZ2xlRWxlbWVudCxcbiAgICAgIGljb25SaWdodFxuICAgICk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hUYXAoZSkge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiB0aGlzLnByb3BzLm9uVG91Y2hUYXApIHRoaXMucHJvcHMub25Ub3VjaFRhcChlLCB0aGlzLnByb3BzLmluZGV4KTtcbiAgfSxcblxuICBfaGFuZGxlVG9nZ2xlOiBmdW5jdGlvbiBfaGFuZGxlVG9nZ2xlKGUsIHRvZ2dsZWQpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5vblRvZ2dsZSkgdGhpcy5wcm9wcy5vblRvZ2dsZShlLCB0aGlzLnByb3BzLmluZGV4LCB0b2dnbGVkKTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VFbnRlcjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlRW50ZXIoZSkge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiB0aGlzLnByb3BzLm9uTW91c2VFbnRlcikgdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIoZSwgdGhpcy5wcm9wcy5pbmRleCk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlTGVhdmU6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZUxlYXZlKGUpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUpIHRoaXMucHJvcHMub25Nb3VzZUxlYXZlKGUsIHRoaXMucHJvcHMuaW5kZXgpO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZW51SXRlbTtcbn0se1wiLi4vZm9udC1pY29uXCI6MzQsXCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4uL3RvZ2dsZVwiOjExNCxcInJlYWN0XCI6MzE5fV0sNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgQ3NzRXZlbnQgPSByZXF1aXJlKCcuLi91dGlscy9jc3MtZXZlbnQnKTtcbnZhciBLZXlMaW5lID0gcmVxdWlyZSgnLi4vdXRpbHMva2V5LWxpbmUnKTtcbnZhciBLZXlDb2RlID0gcmVxdWlyZSgnLi4vdXRpbHMva2V5LWNvZGUnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBDbGlja0F3YXlhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL2NsaWNrLWF3YXlhYmxlJyk7XG52YXIgUGFwZXIgPSByZXF1aXJlKCcuLi9wYXBlcicpO1xudmFyIE1lbnVJdGVtID0gcmVxdWlyZSgnLi9tZW51LWl0ZW0nKTtcbnZhciBMaW5rTWVudUl0ZW0gPSByZXF1aXJlKCcuL2xpbmstbWVudS1pdGVtJyk7XG52YXIgU3ViaGVhZGVyTWVudUl0ZW0gPSByZXF1aXJlKCcuL3N1YmhlYWRlci1tZW51LWl0ZW0nKTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqXG4qIE5lc3RlZCBNZW51IENvbXBvbmVudFxuKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgTmVzdGVkTWVudUl0ZW0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTmVzdGVkTWVudUl0ZW0nLFxuXG4gIG1peGluczogW0NsaWNrQXdheWFibGUsIFN0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB0ZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1lbnVJdGVtczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgekRlcHRoOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBhY3RpdmU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIG9uSXRlbVRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgbWVudUl0ZW1TdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvcGVuOiBmYWxzZSxcbiAgICAgIGFjdGl2ZUluZGV4OiAwXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRDbGlja0F3YXk6IGZ1bmN0aW9uIGNvbXBvbmVudENsaWNrQXdheSgpIHtcbiAgICB0aGlzLl9jbG9zZU5lc3RlZE1lbnUoKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fcG9zaXRpb25OZXN0ZWRNZW51KCk7XG4gICAgdmFyIGVsID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgZWwuZm9jdXMoKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLl9wb3NpdGlvbk5lc3RlZE1lbnUoKTtcbiAgfSxcblxuICBnZXRTcGFjaW5nOiBmdW5jdGlvbiBnZXRTcGFjaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZztcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICBsaW5lSGVpZ2h0OiB0aGlzLmdldFRoZW1lKCkuaGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgY29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlLnRleHRDb2xvclxuICAgICAgfSxcbiAgICAgIGljb246IHtcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgbGluZUhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmhlaWdodCArICdweCcsXG4gICAgICAgIG1hcmdpblJpZ2h0OiB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyXG4gICAgICB9LFxuICAgICAgdG9nZ2xlOiB7XG4gICAgICAgIG1hcmdpblRvcDogKHRoaXMuZ2V0VGhlbWUoKS5oZWlnaHQgLSB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnJhZGlvQnV0dG9uLnNpemUpIC8gMixcbiAgICAgICAgZmxvYXQ6ICdyaWdodCcsXG4gICAgICAgIHdpZHRoOiA0MlxuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuSG92ZXJlZDoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5ob3ZlckNvbG9yXG4gICAgICB9LFxuICAgICAgcm9vdFdoZW5TZWxlY3RlZDoge1xuICAgICAgICBjb2xvcjogdGhpcy5nZXRUaGVtZSgpLnNlbGVjdGVkVGV4dENvbG9yXG4gICAgICB9LFxuICAgICAgcm9vdFdoZW5EaXNhYmxlZDoge1xuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgY29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlLmRpc2FibGVkQ29sb3JcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQubWVudUl0ZW07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5hY3RpdmUgJiYgIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgc3R5bGVzLnJvb3RXaGVuSG92ZXJlZCwge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LCB0aGlzLnByb3BzLnN0eWxlKTtcblxuICAgIHZhciBpY29uQ3VzdG9tQXJyb3dEcm9wUmlnaHQgPSB7XG4gICAgICBtYXJnaW5SaWdodDogdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcEd1dHRlck1pbmkgKiAtMSxcbiAgICAgIGNvbG9yOiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmRyb3BEb3duTWVudS5hY2NlbnRDb2xvclxuICAgIH07XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgaW5kZXggPSBfcHJvcHMuaW5kZXg7XG4gICAgdmFyIG1lbnVJdGVtU3R5bGUgPSBfcHJvcHMubWVudUl0ZW1TdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnaW5kZXgnLCAnbWVudUl0ZW1TdHlsZSddKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7XG4gICAgICAgIHJlZjogJ3Jvb3QnLFxuICAgICAgICBzdHlsZTogc3R5bGVzLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuX29wZW5OZXN0ZWRNZW51LFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuX2Nsb3NlTmVzdGVkTWVudSxcbiAgICAgICAgb25Nb3VzZU92ZXI6IHRoaXMuX2hhbmRsZU1vdXNlT3ZlcixcbiAgICAgICAgb25Nb3VzZU91dDogdGhpcy5faGFuZGxlTW91c2VPdXQgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIE1lbnVJdGVtLFxuICAgICAgICB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgIHN0eWxlOiBtZW51SXRlbVN0eWxlLFxuICAgICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGljb25SaWdodFN0eWxlOiBpY29uQ3VzdG9tQXJyb3dEcm9wUmlnaHQsXG4gICAgICAgICAgaWNvblJpZ2h0Q2xhc3NOYW1lOiAnbXVpZG9jcy1pY29uLWN1c3RvbS1hcnJvdy1kcm9wLXJpZ2h0JyxcbiAgICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9vblBhcmVudEl0ZW1UYXAgfSxcbiAgICAgICAgdGhpcy5wcm9wcy50ZXh0XG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNZW51LCBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgcmVmOiAnbmVzdGVkTWVudScsXG4gICAgICAgIG1lbnVJdGVtczogdGhpcy5wcm9wcy5tZW51SXRlbXMsXG4gICAgICAgIG1lbnVJdGVtU3R5bGU6IG1lbnVJdGVtU3R5bGUsXG4gICAgICAgIG9uSXRlbVRhcDogdGhpcy5fb25NZW51SXRlbVRhcCxcbiAgICAgICAgaGlkZWFibGU6IHRydWUsXG4gICAgICAgIHZpc2libGU6IHRoaXMuc3RhdGUub3BlbixcbiAgICAgICAgb25SZXF1ZXN0Q2xvc2U6IHRoaXMuX2Nsb3NlTmVzdGVkTWVudSxcbiAgICAgICAgekRlcHRoOiB0aGlzLnByb3BzLnpEZXB0aCArIDEgfSkpXG4gICAgKTtcbiAgfSxcblxuICB0b2dnbGVOZXN0ZWRNZW51OiBmdW5jdGlvbiB0b2dnbGVOZXN0ZWRNZW51KCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCkgdGhpcy5zZXRTdGF0ZSh7IG9wZW46ICF0aGlzLnN0YXRlLm9wZW4gfSk7XG4gIH0sXG5cbiAgaXNPcGVuOiBmdW5jdGlvbiBpc09wZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUub3BlbjtcbiAgfSxcblxuICBfcG9zaXRpb25OZXN0ZWRNZW51OiBmdW5jdGlvbiBfcG9zaXRpb25OZXN0ZWRNZW51KCkge1xuICAgIHZhciBlbCA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBuZXN0ZWRNZW51ID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLm5lc3RlZE1lbnUpO1xuICAgIG5lc3RlZE1lbnUuc3R5bGUubGVmdCA9IGVsLm9mZnNldFdpZHRoICsgJ3B4JztcbiAgfSxcblxuICBfb3Blbk5lc3RlZE1lbnU6IGZ1bmN0aW9uIF9vcGVuTmVzdGVkTWVudSgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQpIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiB0cnVlIH0pO1xuICB9LFxuXG4gIF9jbG9zZU5lc3RlZE1lbnU6IGZ1bmN0aW9uIF9jbG9zZU5lc3RlZE1lbnUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IGZhbHNlIH0pO1xuICAgIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLmZvY3VzKCk7XG4gIH0sXG5cbiAgX29uUGFyZW50SXRlbVRhcDogZnVuY3Rpb24gX29uUGFyZW50SXRlbVRhcCgpIHtcbiAgICB0aGlzLnRvZ2dsZU5lc3RlZE1lbnUoKTtcbiAgfSxcblxuICBfb25NZW51SXRlbVRhcDogZnVuY3Rpb24gX29uTWVudUl0ZW1UYXAoZSwgaW5kZXgsIG1lbnVJdGVtKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25JdGVtVGFwKSB0aGlzLnByb3BzLm9uSXRlbVRhcChlLCBpbmRleCwgbWVudUl0ZW0pO1xuICAgIHRoaXMuX2Nsb3NlTmVzdGVkTWVudSgpO1xuICB9LFxuICBfaGFuZGxlTW91c2VPdmVyOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VPdmVyKGUpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5vbk1vdXNlT3ZlcikgdGhpcy5wcm9wcy5vbk1vdXNlT3ZlcihlLCB0aGlzLnByb3BzLmluZGV4KTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VPdXQ6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZU91dChlKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkICYmIHRoaXMucHJvcHMub25Nb3VzZU91dCkgdGhpcy5wcm9wcy5vbk1vdXNlT3V0KGUsIHRoaXMucHJvcHMuaW5kZXgpO1xuICB9XG5cbn0pO1xuXG4vKioqKioqKioqKioqKioqKlxuKiBNZW51IENvbXBvbmVudFxuKioqKioqKioqKioqKioqKi9cbnZhciBNZW51ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ01lbnUnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgYXV0b1dpZHRoOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvbkl0ZW1UYXA6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uVG9nZ2xlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvblJlcXVlc3RDbG9zZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgbWVudUl0ZW1zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICBzZWxlY3RlZEluZGV4OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIGhpZGVhYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICB2aXNpYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICB6RGVwdGg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgbWVudUl0ZW1TdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZW51SXRlbVN0eWxlU3ViaGVhZGVyOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG1lbnVJdGVtU3R5bGVMaW5rOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG1lbnVJdGVtQ2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1lbnVJdGVtQ2xhc3NOYW1lU3ViaGVhZGVyOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1lbnVJdGVtQ2xhc3NOYW1lTGluazogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuZXN0ZWRNZW51U2hvd246IGZhbHNlLFxuICAgICAgYWN0aXZlSW5kZXg6IDBcbiAgICB9O1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhdXRvV2lkdGg6IHRydWUsXG4gICAgICBoaWRlYWJsZTogZmFsc2UsXG4gICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgekRlcHRoOiAxLFxuICAgICAgb25SZXF1ZXN0Q2xvc2U6IGZ1bmN0aW9uIG9uUmVxdWVzdENsb3NlKCkge31cbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgZWwgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgIC8vU2V0IHRoZSBtZW51IHdpZHRoXG4gICAgdGhpcy5fc2V0S2V5V2lkdGgoZWwpO1xuXG4gICAgLy9TaG93IG9yIEhpZGUgdGhlIG1lbnUgYWNjb3JkaW5nIHRvIHZpc2liaWxpdHlcbiAgICB0aGlzLl9yZW5kZXJWaXNpYmlsaXR5KCk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMudmlzaWJsZSAhPT0gcHJldlByb3BzLnZpc2libGUgfHwgdGhpcy5wcm9wcy5tZW51SXRlbXMubGVuZ3RoICE9PSBwcmV2UHJvcHMubWVudUl0ZW1zLmxlbmd0aCkge1xuICAgICAgdGhpcy5fcmVuZGVyVmlzaWJpbGl0eSgpO1xuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCkge1xuICAgIC8vU2V0IHRoZSBtZW51IHdpZHRoXG4gICAgdGhpcy5fc2V0S2V5V2lkdGgoUmVhY3QuZmluZERPTU5vZGUodGhpcykpO1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5tZW51O1xuICB9LFxuXG4gIGdldFNwYWNpbmc6IGZ1bmN0aW9uIGdldFNwYWNpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLmNvbnRhaW5lckJhY2tncm91bmRDb2xvcixcbiAgICAgICAgcGFkZGluZ1RvcDogdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcEd1dHRlck1pbmksXG4gICAgICAgIHBhZGRpbmdCb3R0b206IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXJNaW5pLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KG51bGwsICdoZWlnaHQnKSxcbiAgICAgICAgb3V0bGluZTogJ25vbmUgIWltcG9ydGFudCdcbiAgICAgIH0sXG4gICAgICBzdWJoZWFkZXI6IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQubWVudVN1YmhlYWRlci5wYWRkaW5nLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQubWVudVN1YmhlYWRlci5wYWRkaW5nXG4gICAgICB9LFxuICAgICAgaGlkZWFibGU6IHtcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICB6SW5kZXg6IDFcbiAgICAgIH0sXG4gICAgICBpdGVtOiB7XG4gICAgICAgIGhlaWdodDogMzRcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFBhcGVyLFxuICAgICAge1xuICAgICAgICByZWY6ICdwYXBlckNvbnRhaW5lcicsXG4gICAgICAgIHRhYkluZGV4OiAnMCcsXG4gICAgICAgIG9uS2V5RG93bjogdGhpcy5fb25LZXlEb3duLFxuICAgICAgICB6RGVwdGg6IHRoaXMucHJvcHMuekRlcHRoLFxuICAgICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5oaWRlYWJsZSAmJiBzdHlsZXMuaGlkZWFibGUsIHRoaXMucHJvcHMuc3R5bGUpIH0sXG4gICAgICB0aGlzLl9nZXRDaGlsZHJlbigpXG4gICAgKTtcbiAgfSxcblxuICBfZ2V0Q2hpbGRyZW46IGZ1bmN0aW9uIF9nZXRDaGlsZHJlbigpIHtcbiAgICB2YXIgbWVudUl0ZW0gPSB1bmRlZmluZWQsXG4gICAgICAgIGl0ZW1Db21wb25lbnQgPSB1bmRlZmluZWQsXG4gICAgICAgIGlzRGlzYWJsZWQgPSB1bmRlZmluZWQ7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcblxuICAgIHRoaXMuX2NoaWxkcmVuID0gW107XG4gICAgLy9UaGlzIGFycmF5IGlzIHVzZWQgdG8ga2VlcCB0cmFjayBvZiBhbGwgbmVzdGVkIG1lbnUgcmVmc1xuICAgIHRoaXMuX25lc3RlZENoaWxkcmVuID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucHJvcHMubWVudUl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBtZW51SXRlbSA9IHRoaXMucHJvcHMubWVudUl0ZW1zW2ldO1xuICAgICAgaXNEaXNhYmxlZCA9IG1lbnVJdGVtLmRpc2FibGVkID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1lbnVJdGVtLmRpc2FibGVkO1xuXG4gICAgICB2YXIgaWNvbiA9IG1lbnVJdGVtLmljb247XG4gICAgICB2YXIgZGF0YSA9IG1lbnVJdGVtLmRhdGE7XG4gICAgICB2YXIgYXR0cmlidXRlID0gbWVudUl0ZW0uYXR0cmlidXRlO1xuICAgICAgdmFyIG51bWJlciA9IG1lbnVJdGVtLm51bWJlcjtcbiAgICAgIHZhciB0b2dnbGUgPSBtZW51SXRlbS50b2dnbGU7XG4gICAgICB2YXIgb25Ub3VjaFRhcCA9IG1lbnVJdGVtLm9uVG91Y2hUYXA7XG5cbiAgICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhtZW51SXRlbSwgWydpY29uJywgJ2RhdGEnLCAnYXR0cmlidXRlJywgJ251bWJlcicsICd0b2dnbGUnLCAnb25Ub3VjaFRhcCddKTtcblxuICAgICAgc3dpdGNoIChtZW51SXRlbS50eXBlKSB7XG5cbiAgICAgICAgY2FzZSBNZW51SXRlbS5UeXBlcy5MSU5LOlxuICAgICAgICAgIGl0ZW1Db21wb25lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmtNZW51SXRlbSwge1xuICAgICAgICAgICAga2V5OiBpLFxuICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICBhY3RpdmU6IHRoaXMuc3RhdGUuYWN0aXZlSW5kZXggPT09IGksXG4gICAgICAgICAgICB0ZXh0OiBtZW51SXRlbS50ZXh0LFxuICAgICAgICAgICAgZGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMubWVudUl0ZW1DbGFzc05hbWVMaW5rLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMucHJvcHMubWVudUl0ZW1TdHlsZUxpbmssXG4gICAgICAgICAgICBwYXlsb2FkOiBtZW51SXRlbS5wYXlsb2FkLFxuICAgICAgICAgICAgdGFyZ2V0OiBtZW51SXRlbS50YXJnZXQgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBNZW51SXRlbS5UeXBlcy5TVUJIRUFERVI6XG4gICAgICAgICAgaXRlbUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3ViaGVhZGVyTWVudUl0ZW0sIHtcbiAgICAgICAgICAgIGtleTogaSxcbiAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiB0aGlzLnByb3BzLm1lbnVJdGVtQ2xhc3NOYW1lU3ViaGVhZGVyLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnN1YmhlYWRlciwgdGhpcy5wcm9wcy5tZW51SXRlbVN0eWxlU3ViaGVhZGVyKSxcbiAgICAgICAgICAgIGZpcnN0Q2hpbGQ6IGkgPT09IDAsXG4gICAgICAgICAgICB0ZXh0OiBtZW51SXRlbS50ZXh0IH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgTWVudUl0ZW0uVHlwZXMuTkVTVEVEOlxuICAgICAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgcmVmID0gX3Byb3BzMi5yZWYsXG4gICAgICAgICAgICAgIGtleSA9IF9wcm9wczIua2V5LFxuICAgICAgICAgICAgICBpbmRleCA9IF9wcm9wczIuaW5kZXgsXG4gICAgICAgICAgICAgIHpEZXB0aCA9IF9wcm9wczIuekRlcHRoLFxuICAgICAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMyLCBbJ3JlZicsICdrZXknLCAnaW5kZXgnLCAnekRlcHRoJ10pO1xuXG4gICAgICAgICAgaXRlbUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmVzdGVkTWVudUl0ZW0sIF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgICAgICAgICAgcmVmOiBpLFxuICAgICAgICAgICAga2V5OiBpLFxuICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICBuZXN0ZWQ6IHRydWUsXG4gICAgICAgICAgICBhY3RpdmU6IHRoaXMuc3RhdGUuYWN0aXZlSW5kZXggPT09IGksXG4gICAgICAgICAgICB0ZXh0OiBtZW51SXRlbS50ZXh0LFxuICAgICAgICAgICAgZGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICAgICAgICBtZW51SXRlbXM6IG1lbnVJdGVtLml0ZW1zLFxuICAgICAgICAgICAgbWVudUl0ZW1TdHlsZTogdGhpcy5wcm9wcy5tZW51SXRlbVN0eWxlLFxuICAgICAgICAgICAgekRlcHRoOiB0aGlzLnByb3BzLnpEZXB0aCxcbiAgICAgICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5fb25JdGVtQWN0aXZhdGVkLFxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLl9vbkl0ZW1EZWFjdGl2YXRlZCxcbiAgICAgICAgICAgIG9uSXRlbVRhcDogdGhpcy5fb25OZXN0ZWRJdGVtVGFwIH0pKTtcbiAgICAgICAgICB0aGlzLl9uZXN0ZWRDaGlsZHJlbi5wdXNoKGkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaXRlbUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBNZW51SXRlbSxcbiAgICAgICAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgICAgICAgICAgICBzZWxlY3RlZDogdGhpcy5wcm9wcy5zZWxlY3RlZEluZGV4ID09PSBpLFxuICAgICAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICBhY3RpdmU6IHRoaXMuc3RhdGUuYWN0aXZlSW5kZXggPT09IGksXG4gICAgICAgICAgICAgIGljb246IG1lbnVJdGVtLmljb24sXG4gICAgICAgICAgICAgIGRhdGE6IG1lbnVJdGVtLmRhdGEsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5tZW51SXRlbUNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgc3R5bGU6IHRoaXMucHJvcHMubWVudUl0ZW1TdHlsZSxcbiAgICAgICAgICAgICAgYXR0cmlidXRlOiBtZW51SXRlbS5hdHRyaWJ1dGUsXG4gICAgICAgICAgICAgIG51bWJlcjogbWVudUl0ZW0ubnVtYmVyLFxuICAgICAgICAgICAgICB0b2dnbGU6IG1lbnVJdGVtLnRvZ2dsZSxcbiAgICAgICAgICAgICAgb25Ub2dnbGU6IHRoaXMucHJvcHMub25Ub2dnbGUsXG4gICAgICAgICAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkLFxuICAgICAgICAgICAgICBvblRvdWNoVGFwOiB0aGlzLl9vbkl0ZW1UYXAsXG4gICAgICAgICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5fb25JdGVtQWN0aXZhdGVkLFxuICAgICAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuX29uSXRlbURlYWN0aXZhdGVkXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG1lbnVJdGVtLnRleHRcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhpcy5fY2hpbGRyZW4ucHVzaChpdGVtQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW47XG4gIH0sXG5cbiAgX3NldEtleVdpZHRoOiBmdW5jdGlvbiBfc2V0S2V5V2lkdGgoZWwpIHtcbiAgICAvL1VwZGF0ZSB0aGUgbWVudSB3aWR0aFxuICAgIHZhciBtZW51V2lkdGggPSAnMTAwJSc7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5hdXRvV2lkdGgpIHtcbiAgICAgIGVsLnN0eWxlLndpZHRoID0gJ2F1dG8nO1xuICAgICAgbWVudVdpZHRoID0gS2V5TGluZS5nZXRJbmNyZW1lbnRhbERpbShlbC5vZmZzZXRXaWR0aCkgKyAncHgnO1xuICAgIH1cblxuICAgIGVsLnN0eWxlLndpZHRoID0gbWVudVdpZHRoO1xuICB9LFxuXG4gIF9yZW5kZXJWaXNpYmlsaXR5OiBmdW5jdGlvbiBfcmVuZGVyVmlzaWJpbGl0eSgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5oaWRlYWJsZSkge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmlzaWJsZSkgdGhpcy5fZXhwYW5kSGlkZWFibGVNZW51KCk7ZWxzZSB0aGlzLl9jb2xsYXBzZUhpZGVhYmxlTWVudSgpO1xuICAgIH1cbiAgfSxcblxuICBfZXhwYW5kSGlkZWFibGVNZW51OiBmdW5jdGlvbiBfZXhwYW5kSGlkZWFibGVNZW51KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgZWwgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgY29udGFpbmVyID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLnBhcGVyQ29udGFpbmVyKTtcbiAgICB2YXIgcGFkZGluZyA9IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXJNaW5pO1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLl9nZXRIaWRkZW5NZW51SGVpZ2h0KGVsLCBwYWRkaW5nKTtcblxuICAgIC8vQWRkIHRyYW5zaXRpb25cbiAgICBpZiAoIWVsLnN0eWxlLnRyYW5zaXRpb24pIHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb24gPSBUcmFuc2l0aW9ucy5lYXNlT3V0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbmV4dEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuXG4gICAgICAvLyBZZWlsZCB0byB0aGUgRE9NLCB0aGVuIGFwcGx5IGhlaWdodCBhbmQgcGFkZGluZy4gVGhpcyBtYWtlcyB0aGUgdHJhbnNpdGlvbiBzbW9vdGhlci5cbiAgICAgIGVsLnN0eWxlLnBhZGRpbmdUb3AgPSBwYWRkaW5nICsgJ3B4JztcbiAgICAgIGVsLnN0eWxlLnBhZGRpbmdCb3R0b20gPSBwYWRkaW5nICsgJ3B4JztcbiAgICAgIGVsLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG4gICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMTtcblxuICAgICAgLy9TZXQgdGhlIG92ZXJmbG93IHRvIHZpc2libGUgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBpcyBkb25lIHNvXG4gICAgICAvL3RoYXQgb3RoZXIgbmVzdGVkIG1lbnVzIGNhbiBiZSBzaG93blxuICAgICAgQ3NzRXZlbnQub25UcmFuc2l0aW9uRW5kKGVsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vTWFrZSBzdXJlIHRoZSBtZW51IGlzIG9wZW4gYmVmb3JlIHNldHRpbmcgdGhlIG92ZXJmbG93LlxuICAgICAgICAvL1RoaXMgaXMgdG8gYWNjb3V0IGZvciBmYXN0IGNsaWNrc1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMudmlzaWJsZSkgY29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ3Zpc2libGUnO1xuICAgICAgICBlbC5zdHlsZS50cmFuc2l0aW9uID0gbnVsbDtcbiAgICAgICAgZWwuZm9jdXMoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIF9nZXRIaWRkZW5NZW51SGVpZ2h0OiBmdW5jdGlvbiBfZ2V0SGlkZGVuTWVudUhlaWdodChlbCwgcGFkZGluZykge1xuICAgIC8vQWRkIHBhZGRpbmcgdG8gdGhlIG9mZnNldCBoZWlnaHQsIGJlY2F1c2UgaXQgaXMgbm90IHlldCBzZXQgaW4gdGhlIHN0eWxlLlxuICAgIHZhciBoZWlnaHQgPSBwYWRkaW5nICogMjtcblxuICAgIC8vSGlkZSB0aGUgZWxlbWVudCBhbmQgYWxsb3cgdGhlIGJyb3dzZXIgdG8gYXV0b21hdGljYWxseSByZXNpemUgaXQuXG4gICAgZWwuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIGVsLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcblxuICAgIC8vRGV0ZXJtaW5lIHRoZSBoZWlnaHQgb2YgdGhlIG1lbnUuXG4gICAgaGVpZ2h0ICs9IGVsLm9mZnNldEhlaWdodDtcblxuICAgIC8vVW5oaWRlIHRoZSBtZW51IHdpdGggdGhlIGhlaWdodCBzZXQgYmFjayB0byB6ZXJvLlxuICAgIGVsLnN0eWxlLmhlaWdodCA9ICcwcHgnO1xuICAgIGVsLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG5cbiAgICByZXR1cm4gaGVpZ2h0O1xuICB9LFxuXG4gIF9jb2xsYXBzZUhpZGVhYmxlTWVudTogZnVuY3Rpb24gX2NvbGxhcHNlSGlkZWFibGVNZW51KCkge1xuICAgIHZhciBlbCA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBjb250YWluZXIgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMucGFwZXJDb250YWluZXIpO1xuICAgIHZhciBvcmlnaW5hbE9wYWNpdHkgPSBlbC5zdHlsZS5vcGFjaXR5O1xuXG4gICAgLy9BZGQgdHJhbnNpdGlvblxuICAgIGlmICghZWwuc3R5bGUudHJhbnNpdGlvbiAmJiBvcmlnaW5hbE9wYWNpdHkgIT09ICcnKSB7XG4gICAgICBlbC5zdHlsZS50cmFuc2l0aW9uID0gVHJhbnNpdGlvbnMuZWFzZU91dCgpO1xuICAgIH1cblxuICAgIHRoaXMuX25leHRBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAvL1NldCB0aGUgb3ZlcmZsb3cgdG8gaGlkZGVuIHNvIHRoYXQgYW5pbWF0aW9uIHdvcmtzIHByb3Blcmx5XG4gICAgICBjb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcblxuICAgICAgLy9DbG9zZSB0aGUgbWVudVxuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICBlbC5zdHlsZS5oZWlnaHQgPSAnMHB4JztcbiAgICAgIGVsLnN0eWxlLnBhZGRpbmdUb3AgPSAnMHB4JztcbiAgICAgIGVsLnN0eWxlLnBhZGRpbmdCb3R0b20gPSAnMHB4JztcblxuICAgICAgdmFyIGVuZCA9IGZ1bmN0aW9uIGVuZCgpIHtcbiAgICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbiA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBpZiAob3JpZ2luYWxPcGFjaXR5ID09PSAnJykgZW5kKCk7ZWxzZSBDc3NFdmVudC5vblRyYW5zaXRpb25FbmQoZWwsIGVuZCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgX25leHRBbmltYXRpb25GcmFtZTogZnVuY3Rpb24gX25leHRBbmltYXRpb25GcmFtZShmdW5jKSB7XG4gICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmMpO1xuICAgIH1cbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jLCAxNik7XG4gIH0sXG5cbiAgX29uTmVzdGVkSXRlbVRhcDogZnVuY3Rpb24gX29uTmVzdGVkSXRlbVRhcChlLCBpbmRleCwgbWVudUl0ZW0pIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkl0ZW1UYXApIHRoaXMucHJvcHMub25JdGVtVGFwKGUsIGluZGV4LCBtZW51SXRlbSk7XG4gIH0sXG5cbiAgX29uSXRlbVRhcDogZnVuY3Rpb24gX29uSXRlbVRhcChlLCBpbmRleCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uSXRlbVRhcCkgdGhpcy5wcm9wcy5vbkl0ZW1UYXAoZSwgaW5kZXgsIHRoaXMucHJvcHMubWVudUl0ZW1zW2luZGV4XSk7XG4gIH0sXG5cbiAgX29uSXRlbVRvZ2dsZTogZnVuY3Rpb24gX29uSXRlbVRvZ2dsZShlLCBpbmRleCwgdG9nZ2xlZCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uSXRlbVRvZ2dsZSkgdGhpcy5wcm9wcy5vbkl0ZW1Ub2dnbGUoZSwgaW5kZXgsIHRoaXMucHJvcHMubWVudUl0ZW1zW2luZGV4XSwgdG9nZ2xlZCk7XG4gIH0sXG4gIF9vbkl0ZW1BY3RpdmF0ZWQ6IGZ1bmN0aW9uIF9vbkl0ZW1BY3RpdmF0ZWQoZSwgaW5kZXgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWN0aXZlSW5kZXg6IGluZGV4IH0pO1xuICB9LFxuICBfb25JdGVtRGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uIF9vbkl0ZW1EZWFjdGl2YXRlZChlLCBpbmRleCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmFjdGl2ZUtleSA9PT0gaW5kZXgpIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmVJbmRleDogMCB9KTtcbiAgfSxcblxuICBfb25LZXlEb3duOiBmdW5jdGlvbiBfb25LZXlEb3duKGUpIHtcbiAgICBpZiAoISh0aGlzLnN0YXRlLm9wZW4gfHwgdGhpcy5wcm9wcy52aXNpYmxlKSkgcmV0dXJuO1xuXG4gICAgdmFyIG5lc3RlZCA9IHRoaXMuX2NoaWxkcmVuW3RoaXMuc3RhdGUuYWN0aXZlSW5kZXhdO1xuICAgIGlmIChuZXN0ZWQgJiYgbmVzdGVkLnByb3BzLm5lc3RlZCAmJiB0aGlzLnJlZnNbdGhpcy5zdGF0ZS5hY3RpdmVJbmRleF0uaXNPcGVuKCkpIHJldHVybjtcblxuICAgIHN3aXRjaCAoZS53aGljaCkge1xuICAgICAgY2FzZSBLZXlDb2RlLlVQOlxuICAgICAgICB0aGlzLl9hY3RpdmF0ZVByZXZpb3VzSXRlbSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgS2V5Q29kZS5ET1dOOlxuICAgICAgICB0aGlzLl9hY3RpdmF0ZU5leHRJdGVtKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBLZXlDb2RlLlJJR0hUOlxuICAgICAgICB0aGlzLl90cnlUb2dnbGVOZXN0ZWQodGhpcy5zdGF0ZS5hY3RpdmVJbmRleCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBLZXlDb2RlLkxFRlQ6XG4gICAgICAgIHRoaXMuX2Nsb3NlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBLZXlDb2RlLkVTQzpcbiAgICAgICAgdGhpcy5fY2xvc2UoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEtleUNvZGUuVEFCOlxuICAgICAgICB0aGlzLl9jbG9zZSgpO1xuICAgICAgICByZXR1cm47IC8vIHNvIHRoZSB0YWIga2V5IGNhbiBwcm9wYWdhdGVcbiAgICAgIGNhc2UgS2V5Q29kZS5FTlRFUjpcbiAgICAgIGNhc2UgS2V5Q29kZS5TUEFDRTpcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgLy8gbmVlZHMgY2FsbGVkIGJlZm9yZSB0aGUgY2xvc2VcbiAgICAgICAgdGhpcy5fdHJpZ2dlclNlbGVjdGlvbihlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47IC8vaW1wb3J0YW50XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9LFxuXG4gIF9hY3RpdmF0ZVByZXZpb3VzSXRlbTogZnVuY3Rpb24gX2FjdGl2YXRlUHJldmlvdXNJdGVtKCkge1xuICAgIHZhciBhY3RpdmUgPSB0aGlzLnN0YXRlLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgYWN0aXZlID0gTWF0aC5tYXgoYWN0aXZlIC0gMSwgMCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZUluZGV4OiBhY3RpdmUgfSk7XG4gIH0sXG5cbiAgX2FjdGl2YXRlTmV4dEl0ZW06IGZ1bmN0aW9uIF9hY3RpdmF0ZU5leHRJdGVtKCkge1xuICAgIHZhciBhY3RpdmUgPSB0aGlzLnN0YXRlLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgYWN0aXZlID0gTWF0aC5taW4oYWN0aXZlICsgMSwgdGhpcy5fY2hpbGRyZW4ubGVuZ3RoIC0gMSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZUluZGV4OiBhY3RpdmUgfSk7XG4gIH0sXG5cbiAgX3RyaWdnZXJTZWxlY3Rpb246IGZ1bmN0aW9uIF90cmlnZ2VyU2VsZWN0aW9uKGUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnN0YXRlLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgdGhpcy5fb25JdGVtVGFwKGUsIGluZGV4KTtcbiAgfSxcblxuICBfY2xvc2U6IGZ1bmN0aW9uIF9jbG9zZSgpIHtcbiAgICB0aGlzLnByb3BzLm9uUmVxdWVzdENsb3NlKCk7XG4gIH0sXG5cbiAgX3RyeVRvZ2dsZU5lc3RlZDogZnVuY3Rpb24gX3RyeVRvZ2dsZU5lc3RlZChpbmRleCkge1xuICAgIHZhciBpdGVtID0gdGhpcy5yZWZzW2luZGV4XTtcbiAgICBpZiAoaXRlbSAmJiBpdGVtLnRvZ2dsZU5lc3RlZE1lbnUpIGl0ZW0udG9nZ2xlTmVzdGVkTWVudSgpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lbnU7XG59LHtcIi4uL21peGlucy9jbGljay1hd2F5YWJsZVwiOjUxLFwiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi9wYXBlclwiOjU4LFwiLi4vc3R5bGVzL3RyYW5zaXRpb25zXCI6NzcsXCIuLi91dGlscy9jc3MtZXZlbnRcIjoxMjYsXCIuLi91dGlscy9rZXktY29kZVwiOjEzMyxcIi4uL3V0aWxzL2tleS1saW5lXCI6MTM0LFwiLi9saW5rLW1lbnUtaXRlbVwiOjQ0LFwiLi9tZW51LWl0ZW1cIjo0NSxcIi4vc3ViaGVhZGVyLW1lbnUtaXRlbVwiOjQ3LFwicmVhY3RcIjozMTl9XSw0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFR5cG9ncmFwaHkgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHlwb2dyYXBoeScpO1xuXG52YXIgU3ViaGVhZGVyTWVudUl0ZW0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnU3ViaGVhZGVyTWVudUl0ZW0nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaW5kZXg6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB0ZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgZmlyc3RDaGlsZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50Lm1lbnVTdWJoZWFkZXI7XG4gIH0sXG5cbiAgZ2V0U3BhY2luZzogZnVuY3Rpb24gZ2V0U3BhY2luZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmc7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIGd1dHRlck1pbmkgPSB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyTWluaTtcbiAgICB2YXIgc3ViaGVhZGVySGVpZ2h0ID0gdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcFN1YmhlYWRlckhlaWdodDtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgZm9udFNpemU6ICcxM3B4JyxcbiAgICAgICAgbGV0dGVyU3BhY2luZzogMCxcbiAgICAgICAgZm9udFdlaWdodDogVHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgIGhlaWdodDogc3ViaGVhZGVySGVpZ2h0ICsgZ3V0dGVyTWluaSxcbiAgICAgICAgbGluZUhlaWdodDogc3ViaGVhZGVySGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS50ZXh0Q29sb3IsXG4gICAgICAgIGJvcmRlclRvcDogJ3NvbGlkIDFweCAnICsgdGhpcy5nZXRUaGVtZSgpLmJvcmRlckNvbG9yLFxuICAgICAgICBwYWRkaW5nVG9wOiBndXR0ZXJNaW5pLFxuICAgICAgICBtYXJnaW5Ub3A6IGd1dHRlck1pbmlcbiAgICAgIH0sXG4gICAgICByb290V2hlbkZpcnN0Q2hpbGQ6IHtcbiAgICAgICAgaGVpZ2h0OiBzdWJoZWFkZXJIZWlnaHQsXG4gICAgICAgIGJvcmRlclRvcDogJ25vbmUnLFxuICAgICAgICBwYWRkaW5nVG9wOiAwLFxuICAgICAgICBtYXJnaW5Ub3A6IDBcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAge1xuICAgICAgICBrZXk6IHRoaXMucHJvcHMuaW5kZXgsXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHRoaXMuZ2V0U3R5bGVzKCkucm9vdCwgdGhpcy5wcm9wcy5maXJzdENoaWxkICYmIHRoaXMuZ2V0U3R5bGVzKCkucm9vdFdoZW5GaXJzdENoaWxkLCB0aGlzLnByb3BzLnN0eWxlKSB9LFxuICAgICAgdGhpcy5wcm9wcy50ZXh0XG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdWJoZWFkZXJNZW51SXRlbTtcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi9zdHlsZXMvdHlwb2dyYXBoeVwiOjc4LFwicmVhY3RcIjozMTl9XSw0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgUmVhY3RUcmFuc2l0aW9uR3JvdXAgPSBSZWFjdC5hZGRvbnMuVHJhbnNpdGlvbkdyb3VwO1xudmFyIENsaWNrQXdheWFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvY2xpY2stYXdheWFibGUnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgRXZlbnRzID0gcmVxdWlyZSgnLi4vdXRpbHMvZXZlbnRzJyk7XG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJvcC10eXBlcycpO1xudmFyIE1lbnUgPSByZXF1aXJlKCcuLi9tZW51cy9tZW51Jyk7XG5cbnZhciBJY29uTWVudSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdJY29uTWVudScsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZSwgQ2xpY2tBd2F5YWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjbG9zZU9uSXRlbVRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBpY29uQnV0dG9uRWxlbWVudDogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgICBvcGVuRGlyZWN0aW9uOiBQcm9wVHlwZXMuY29ybmVycyxcbiAgICBvbkl0ZW1Ub3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25LZXlib2FyZEZvY3VzOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlRG93bjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZUxlYXZlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlRW50ZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VVcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Ub3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgbWVudVN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIHRvdWNoVGFwQ2xvc2VEZWxheTogUmVhY3QuUHJvcFR5cGVzLm51bWJlclxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjbG9zZU9uSXRlbVRvdWNoVGFwOiB0cnVlLFxuICAgICAgb3BlbkRpcmVjdGlvbjogJ2JvdHRvbS1sZWZ0JyxcbiAgICAgIG9uSXRlbVRvdWNoVGFwOiBmdW5jdGlvbiBvbkl0ZW1Ub3VjaFRhcCgpIHt9LFxuICAgICAgb25LZXlib2FyZEZvY3VzOiBmdW5jdGlvbiBvbktleWJvYXJkRm9jdXMoKSB7fSxcbiAgICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbiBvbk1vdXNlRG93bigpIHt9LFxuICAgICAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoKSB7fSxcbiAgICAgIG9uTW91c2VFbnRlcjogZnVuY3Rpb24gb25Nb3VzZUVudGVyKCkge30sXG4gICAgICBvbk1vdXNlVXA6IGZ1bmN0aW9uIG9uTW91c2VVcCgpIHt9LFxuICAgICAgb25Ub3VjaFRhcDogZnVuY3Rpb24gb25Ub3VjaFRhcCgpIHt9LFxuICAgICAgdG91Y2hUYXBDbG9zZURlbGF5OiAyMDBcbiAgICB9O1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpY29uQnV0dG9uUmVmOiB0aGlzLnByb3BzLmljb25CdXR0b25FbGVtZW50LnByb3BzLnJlZiB8fCAnaWNvbkJ1dHRvbicsXG4gICAgICBtZW51SW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIG9wZW46IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuX3RpbWVvdXQpIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcbiAgfSxcblxuICBjb21wb25lbnRDbGlja0F3YXk6IGZ1bmN0aW9uIGNvbXBvbmVudENsaWNrQXdheSgpIHtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBjbG9zZU9uSXRlbVRvdWNoVGFwID0gX3Byb3BzLmNsb3NlT25JdGVtVG91Y2hUYXA7XG4gICAgdmFyIGljb25CdXR0b25FbGVtZW50ID0gX3Byb3BzLmljb25CdXR0b25FbGVtZW50O1xuICAgIHZhciBvcGVuRGlyZWN0aW9uID0gX3Byb3BzLm9wZW5EaXJlY3Rpb247XG4gICAgdmFyIG9uSXRlbVRvdWNoVGFwID0gX3Byb3BzLm9uSXRlbVRvdWNoVGFwO1xuICAgIHZhciBvbktleWJvYXJkRm9jdXMgPSBfcHJvcHMub25LZXlib2FyZEZvY3VzO1xuICAgIHZhciBvbk1vdXNlRG93biA9IF9wcm9wcy5vbk1vdXNlRG93bjtcbiAgICB2YXIgb25Nb3VzZUxlYXZlID0gX3Byb3BzLm9uTW91c2VMZWF2ZTtcbiAgICB2YXIgb25Nb3VzZUVudGVyID0gX3Byb3BzLm9uTW91c2VFbnRlcjtcbiAgICB2YXIgb25Nb3VzZVVwID0gX3Byb3BzLm9uTW91c2VVcDtcbiAgICB2YXIgb25Ub3VjaFRhcCA9IF9wcm9wcy5vblRvdWNoVGFwO1xuICAgIHZhciBtZW51U3R5bGUgPSBfcHJvcHMubWVudVN0eWxlO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2xvc2VPbkl0ZW1Ub3VjaFRhcCcsICdpY29uQnV0dG9uRWxlbWVudCcsICdvcGVuRGlyZWN0aW9uJywgJ29uSXRlbVRvdWNoVGFwJywgJ29uS2V5Ym9hcmRGb2N1cycsICdvbk1vdXNlRG93bicsICdvbk1vdXNlTGVhdmUnLCAnb25Nb3VzZUVudGVyJywgJ29uTW91c2VVcCcsICdvblRvdWNoVGFwJywgJ21lbnVTdHlsZScsICdzdHlsZSddKTtcblxuICAgIHZhciBvcGVuID0gdGhpcy5zdGF0ZS5vcGVuO1xuICAgIHZhciBvcGVuRG93biA9IG9wZW5EaXJlY3Rpb24uc3BsaXQoJy0nKVswXSA9PT0gJ2JvdHRvbSc7XG4gICAgdmFyIG9wZW5MZWZ0ID0gb3BlbkRpcmVjdGlvbi5zcGxpdCgnLScpWzFdID09PSAnbGVmdCc7XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG5cbiAgICAgIG1lbnU6IHtcbiAgICAgICAgdG9wOiBvcGVuRG93biA/IDEyIDogbnVsbCxcbiAgICAgICAgYm90dG9tOiAhb3BlbkRvd24gPyAxMiA6IG51bGwsXG4gICAgICAgIGxlZnQ6ICFvcGVuTGVmdCA/IDEyIDogbnVsbCxcbiAgICAgICAgcmlnaHQ6IG9wZW5MZWZ0ID8gMTIgOiBudWxsXG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBtZXJnZWRSb290U3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgc3R5bGUpO1xuICAgIHZhciBtZXJnZWRNZW51U3R5bGVzID0gdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMubWVudSwgbWVudVN0eWxlKTtcblxuICAgIHZhciBpY29uQnV0dG9uID0gUmVhY3QuY2xvbmVFbGVtZW50KGljb25CdXR0b25FbGVtZW50LCB7XG4gICAgICBvbktleWJvYXJkRm9jdXM6IHRoaXMucHJvcHMub25LZXlib2FyZEZvY3VzLFxuICAgICAgb25Ub3VjaFRhcDogKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIF90aGlzLm9wZW4oRXZlbnRzLmlzS2V5Ym9hcmQoZSkpO1xuICAgICAgICBpZiAoaWNvbkJ1dHRvbkVsZW1lbnQucHJvcHMub25Ub3VjaFRhcCkgaWNvbkJ1dHRvbkVsZW1lbnQucHJvcHMub25Ub3VjaFRhcChlKTtcbiAgICAgIH0pLmJpbmQodGhpcyksXG4gICAgICByZWY6IHRoaXMuc3RhdGUuaWNvbkJ1dHRvblJlZlxuICAgIH0pO1xuXG4gICAgdmFyIG1lbnUgPSBvcGVuID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIE1lbnUsXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgYW5pbWF0ZWQ6IHRydWUsXG4gICAgICAgIGluaXRpYWxseUtleWJvYXJkRm9jdXNlZDogdGhpcy5zdGF0ZS5tZW51SW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkLFxuICAgICAgICBvbkVzY0tleURvd246IHRoaXMuX2hhbmRsZU1lbnVFc2NLZXlEb3duLFxuICAgICAgICBvbkl0ZW1Ub3VjaFRhcDogdGhpcy5faGFuZGxlSXRlbVRvdWNoVGFwLFxuICAgICAgICBvcGVuRGlyZWN0aW9uOiBvcGVuRGlyZWN0aW9uLFxuICAgICAgICBzdHlsZTogbWVyZ2VkTWVudVN0eWxlcyB9KSxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApIDogbnVsbDtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7XG4gICAgICAgIG9uTW91c2VEb3duOiBvbk1vdXNlRG93bixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiBvbk1vdXNlTGVhdmUsXG4gICAgICAgIG9uTW91c2VFbnRlcjogb25Nb3VzZUVudGVyLFxuICAgICAgICBvbk1vdXNlVXA6IG9uTW91c2VVcCxcbiAgICAgICAgb25Ub3VjaFRhcDogb25Ub3VjaFRhcCxcbiAgICAgICAgc3R5bGU6IG1lcmdlZFJvb3RTdHlsZXMgfSxcbiAgICAgIGljb25CdXR0b24sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBSZWFjdFRyYW5zaXRpb25Hcm91cCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbWVudVxuICAgICAgKVxuICAgICk7XG4gIH0sXG5cbiAgaXNPcGVuOiBmdW5jdGlvbiBpc09wZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUub3BlbjtcbiAgfSxcblxuICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoaXNLZXlib2FyZCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUub3Blbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IGZhbHNlIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9TZXQgZm9jdXMgb24gdGhlIGljb24gYnV0dG9uIHdoZW4gdGhlIG1lbnUgY2xvc2VcbiAgICAgICAgaWYgKGlzS2V5Ym9hcmQpIHtcbiAgICAgICAgICB2YXIgaWNvbkJ1dHRvbiA9IF90aGlzMi5yZWZzW190aGlzMi5zdGF0ZS5pY29uQnV0dG9uUmVmXTtcbiAgICAgICAgICBSZWFjdC5maW5kRE9NTm9kZShpY29uQnV0dG9uKS5mb2N1cygpO1xuICAgICAgICAgIGljb25CdXR0b24uc2V0S2V5Ym9hcmRGb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgb3BlbjogZnVuY3Rpb24gb3BlbihtZW51SW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLm9wZW4pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICBtZW51SW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkOiBtZW51SW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZUl0ZW1Ub3VjaFRhcDogZnVuY3Rpb24gX2hhbmRsZUl0ZW1Ub3VjaFRhcChlLCBjaGlsZCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuY2xvc2VPbkl0ZW1Ub3VjaFRhcCkge1xuICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlzS2V5Ym9hcmQgPSBFdmVudHMuaXNLZXlib2FyZChlKTtcblxuICAgICAgICBfdGhpczMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMuY2xvc2UoaXNLZXlib2FyZCk7XG4gICAgICAgIH0sIF90aGlzMy5wcm9wcy50b3VjaFRhcENsb3NlRGVsYXkpO1xuICAgICAgfSkoKTtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uSXRlbVRvdWNoVGFwKGUsIGNoaWxkKTtcbiAgfSxcblxuICBfaGFuZGxlTWVudUVzY0tleURvd246IGZ1bmN0aW9uIF9oYW5kbGVNZW51RXNjS2V5RG93bigpIHtcbiAgICB0aGlzLmNsb3NlKHRydWUpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEljb25NZW51O1xufSx7XCIuLi9tZW51cy9tZW51XCI6NDksXCIuLi9taXhpbnMvY2xpY2stYXdheWFibGVcIjo1MSxcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi4vdXRpbHMvZXZlbnRzXCI6MTI5LFwiLi4vdXRpbHMvcHJvcC10eXBlc1wiOjEzNixcInJlYWN0L2FkZG9uc1wiOjE0N31dLDQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciB1cGRhdGUgPSBSZWFjdC5hZGRvbnMudXBkYXRlO1xudmFyIENvbnRyb2xsYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9jb250cm9sbGFibGUnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQXV0b1ByZWZpeCA9IHJlcXVpcmUoJy4uL3N0eWxlcy9hdXRvLXByZWZpeCcpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgS2V5Q29kZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2tleS1jb2RlJyk7XG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJvcC10eXBlcycpO1xudmFyIExpc3QgPSByZXF1aXJlKCcuLi9saXN0cy9saXN0Jyk7XG52YXIgUGFwZXIgPSByZXF1aXJlKCcuLi9wYXBlcicpO1xuXG52YXIgTWVudSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdNZW51JyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlLCBDb250cm9sbGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgYW5pbWF0ZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGF1dG9XaWR0aDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZGVza3RvcDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgaW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBsaXN0U3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgbWF4SGVpZ2h0OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIG11bHRpcGxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvbkVzY0tleURvd246IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uSXRlbVRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbktleURvd246IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9wZW5EaXJlY3Rpb246IFByb3BUeXBlcy5jb3JuZXJzLFxuICAgIHNlbGVjdGVkTWVudUl0ZW1TdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICB3aWR0aDogUHJvcFR5cGVzLnN0cmluZ09yTnVtYmVyLFxuICAgIHpEZXB0aDogUHJvcFR5cGVzLnpEZXB0aFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhbmltYXRlZDogZmFsc2UsXG4gICAgICBhdXRvV2lkdGg6IHRydWUsXG4gICAgICBtYXhIZWlnaHQ6IG51bGwsXG4gICAgICBvbkVzY0tleURvd246IGZ1bmN0aW9uIG9uRXNjS2V5RG93bigpIHt9LFxuICAgICAgb25JdGVtVG91Y2hUYXA6IGZ1bmN0aW9uIG9uSXRlbVRvdWNoVGFwKCkge30sXG4gICAgICBvbktleURvd246IGZ1bmN0aW9uIG9uS2V5RG93bigpIHt9LFxuICAgICAgb3BlbkRpcmVjdGlvbjogJ2JvdHRvbS1sZWZ0JyxcbiAgICAgIHpEZXB0aDogMVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgdmFyIHNlbGVjdGVkSW5kZXggPSB0aGlzLl9nZXRTZWxlY3RlZEluZGV4KHRoaXMucHJvcHMpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzSW5kZXg6IHNlbGVjdGVkSW5kZXggPj0gMCA/IHNlbGVjdGVkSW5kZXggOiAwLFxuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IHRoaXMucHJvcHMuaW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkLFxuICAgICAga2V5V2lkdGg6IHRoaXMucHJvcHMuZGVza3RvcCA/IDY0IDogNTZcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZEVudGVyOiBmdW5jdGlvbiBjb21wb25lbnREaWRFbnRlcigpIHtcbiAgICB0aGlzLl9hbmltYXRlT3BlbigpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hdXRvV2lkdGgpIHRoaXMuX3NldFdpZHRoKCk7XG4gICAgaWYgKCF0aGlzLnByb3BzLmFuaW1hdGVkKSB0aGlzLl9hbmltYXRlT3BlbigpO1xuICAgIHRoaXMuX3NldFNjb2xsUG9zaXRpb24oKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hdXRvV2lkdGgpIHRoaXMuX3NldFdpZHRoKCk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbExlYXZlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTGVhdmUoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHJvb3RTdHlsZSA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLnN0eWxlO1xuXG4gICAgQXV0b1ByZWZpeC5zZXQocm9vdFN0eWxlLCAndHJhbnNpdGlvbicsIFRyYW5zaXRpb25zLmVhc2VPdXQoJzI1MG1zJywgWydvcGFjaXR5JywgJ3RyYW5zZm9ybSddKSk7XG4gICAgQXV0b1ByZWZpeC5zZXQocm9vdFN0eWxlLCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKDAsLThweCwwKScpO1xuICAgIHJvb3RTdHlsZS5vcGFjaXR5ID0gMDtcblxuICAgIHNldFRpbWVvdXQoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5pc01vdW50ZWQoKSkgY2FsbGJhY2soKTtcbiAgICB9KS5iaW5kKHRoaXMpLCAyNTApO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIHNlbGVjdGVkSW5kZXggPSB0aGlzLl9nZXRTZWxlY3RlZEluZGV4KG5leHRQcm9wcyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGZvY3VzSW5kZXg6IHNlbGVjdGVkSW5kZXggPj0gMCA/IHNlbGVjdGVkSW5kZXggOiAwLFxuICAgICAga2V5V2lkdGg6IG5leHRQcm9wcy5kZXNrdG9wID8gNjQgOiA1NlxuICAgIH0pO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGFuaW1hdGVkID0gX3Byb3BzLmFuaW1hdGVkO1xuICAgIHZhciBhdXRvV2lkdGggPSBfcHJvcHMuYXV0b1dpZHRoO1xuICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgZGVza3RvcCA9IF9wcm9wcy5kZXNrdG9wO1xuICAgIHZhciBpbml0aWFsbHlLZXlib2FyZEZvY3VzZWQgPSBfcHJvcHMuaW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkO1xuICAgIHZhciBsaXN0U3R5bGUgPSBfcHJvcHMubGlzdFN0eWxlO1xuICAgIHZhciBtYXhIZWlnaHQgPSBfcHJvcHMubWF4SGVpZ2h0O1xuICAgIHZhciBtdWx0aXBsZSA9IF9wcm9wcy5tdWx0aXBsZTtcbiAgICB2YXIgb3BlbkRpcmVjdGlvbiA9IF9wcm9wcy5vcGVuRGlyZWN0aW9uO1xuICAgIHZhciBzZWxlY3RlZE1lbnVJdGVtU3R5bGUgPSBfcHJvcHMuc2VsZWN0ZWRNZW51SXRlbVN0eWxlO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcbiAgICB2YXIgdmFsdWUgPSBfcHJvcHMudmFsdWU7XG4gICAgdmFyIHZhbHVlTGluayA9IF9wcm9wcy52YWx1ZUxpbms7XG4gICAgdmFyIHdpZHRoID0gX3Byb3BzLndpZHRoO1xuICAgIHZhciB6RGVwdGggPSBfcHJvcHMuekRlcHRoO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydhbmltYXRlZCcsICdhdXRvV2lkdGgnLCAnY2hpbGRyZW4nLCAnZGVza3RvcCcsICdpbml0aWFsbHlLZXlib2FyZEZvY3VzZWQnLCAnbGlzdFN0eWxlJywgJ21heEhlaWdodCcsICdtdWx0aXBsZScsICdvcGVuRGlyZWN0aW9uJywgJ3NlbGVjdGVkTWVudUl0ZW1TdHlsZScsICdzdHlsZScsICd2YWx1ZScsICd2YWx1ZUxpbmsnLCAnd2lkdGgnLCAnekRlcHRoJ10pO1xuXG4gICAgdmFyIG9wZW5Eb3duID0gb3BlbkRpcmVjdGlvbi5zcGxpdCgnLScpWzBdID09PSAnYm90dG9tJztcbiAgICB2YXIgb3BlbkxlZnQgPSBvcGVuRGlyZWN0aW9uLnNwbGl0KCctJylbMV0gPT09ICdsZWZ0JztcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIC8vTmVzdGVkIGRpdiBiYWNhdXNlIHRoZSBMaXN0IHNjYWxlcyB4IGZhc3RlciB0aGFuXG4gICAgICAgIC8vaXQgc2NhbGVzIHlcbiAgICAgICAgdHJhbnNpdGlvbjogYW5pbWF0ZWQgPyBUcmFuc2l0aW9ucy5lYXNlT3V0KCcyNTBtcycsICd0cmFuc2Zvcm0nKSA6IG51bGwsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB6SW5kZXg6IDEwLFxuICAgICAgICB0b3A6IG9wZW5Eb3duID8gMCA6IG51bGwsXG4gICAgICAgIGJvdHRvbTogIW9wZW5Eb3duID8gMCA6IG51bGwsXG4gICAgICAgIGxlZnQ6ICFvcGVuTGVmdCA/IDAgOiBudWxsLFxuICAgICAgICByaWdodDogb3BlbkxlZnQgPyAwIDogbnVsbCxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiBvcGVuTGVmdCA/ICdyaWdodCcgOiAnbGVmdCdcbiAgICAgIH0sXG5cbiAgICAgIGxpc3Q6IHtcbiAgICAgICAgZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBkZXNrdG9wID8gMTYgOiA4LFxuICAgICAgICBwYWRkaW5nVG9wOiBkZXNrdG9wID8gMTYgOiA4LFxuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgfSxcblxuICAgICAgbWVudUl0ZW1Db250YWluZXI6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogYW5pbWF0ZWQgPyBUcmFuc2l0aW9ucy5lYXNlT3V0KG51bGwsICdvcGFjaXR5JykgOiBudWxsLFxuICAgICAgICBvcGFjaXR5OiAwXG4gICAgICB9LFxuXG4gICAgICBwYXBlcjoge1xuICAgICAgICB0cmFuc2l0aW9uOiBhbmltYXRlZCA/IFRyYW5zaXRpb25zLmVhc2VPdXQoJzUwMG1zJywgWyd0cmFuc2Zvcm0nLCAnb3BhY2l0eSddKSA6IG51bGwsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWSgwKScsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogb3BlbkRvd24gPyAndG9wJyA6ICdib3R0b20nLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodCxcbiAgICAgICAgb3ZlcmZsb3dZOiBtYXhIZWlnaHQgPyAnc2Nyb2xsJyA6IG51bGxcbiAgICAgIH0sXG5cbiAgICAgIHNlbGVjdGVkTWVudUl0ZW06IHtcbiAgICAgICAgY29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wYWxldHRlLmFjY2VudDFDb2xvclxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbWVyZ2VkUm9vdFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHN0eWxlKTtcbiAgICB2YXIgbWVyZ2VkTGlzdFN0eWxlcyA9IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLmxpc3QsIGxpc3RTdHlsZSk7XG5cbiAgICAvL0Nhc2NhZGUgY2hpbGRyZW4gb3BhY2l0eVxuICAgIHZhciBjdW11bGF0aXZlRGVsYXkgPSBvcGVuRG93biA/IDE3NSA6IDMyNTtcbiAgICB2YXIgY2FzY2FkZUNoaWxkcmVuQ291bnQgPSB0aGlzLl9nZXRDYXNjYWRlQ2hpbGRyZW5Db3VudCgpO1xuICAgIHZhciBjdW11bGF0aXZlRGVsYXlJbmNyZW1lbnQgPSBNYXRoLmNlaWwoMTUwIC8gY2FzY2FkZUNoaWxkcmVuQ291bnQpO1xuXG4gICAgdmFyIG1lbnVJdGVtSW5kZXggPSAwO1xuICAgIHZhciBuZXdDaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgKGZ1bmN0aW9uIChjaGlsZCkge1xuXG4gICAgICB2YXIgY2hpbGRJc0FEaXZpZGVyID0gY2hpbGQudHlwZS5kaXNwbGF5TmFtZSA9PT0gJ01lbnVEaXZpZGVyJztcbiAgICAgIHZhciBjaGlsZElzRGlzYWJsZWQgPSBjaGlsZC5wcm9wcy5kaXNhYmxlZDtcbiAgICAgIHZhciBjaGlsZHJlbkNvbnRhaW5lclN0eWxlcyA9IHt9O1xuXG4gICAgICBpZiAoYW5pbWF0ZWQpIHtcbiAgICAgICAgdmFyIGZvY3VzSW5kZXggPSBfdGhpczIuc3RhdGUuZm9jdXNJbmRleDtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EZWxheSA9IDA7XG5cbiAgICAgICAgLy9Pbmx5IGNhc2NhZGUgdGhlIHZpc2libGUgbWVudSBpdGVtc1xuICAgICAgICBpZiAobWVudUl0ZW1JbmRleCA+PSBmb2N1c0luZGV4IC0gMSAmJiBtZW51SXRlbUluZGV4IDw9IGZvY3VzSW5kZXggKyBjYXNjYWRlQ2hpbGRyZW5Db3VudCAtIDEpIHtcbiAgICAgICAgICBjdW11bGF0aXZlRGVsYXkgPSBvcGVuRG93biA/IGN1bXVsYXRpdmVEZWxheSArIGN1bXVsYXRpdmVEZWxheUluY3JlbWVudCA6IGN1bXVsYXRpdmVEZWxheSAtIGN1bXVsYXRpdmVEZWxheUluY3JlbWVudDtcbiAgICAgICAgICB0cmFuc2l0aW9uRGVsYXkgPSBjdW11bGF0aXZlRGVsYXk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZHJlbkNvbnRhaW5lclN0eWxlcyA9IF90aGlzMi5tZXJnZUFuZFByZWZpeChzdHlsZXMubWVudUl0ZW1Db250YWluZXIsIHtcbiAgICAgICAgICB0cmFuc2l0aW9uRGVsYXk6IHRyYW5zaXRpb25EZWxheSArICdtcydcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjbG9uZWRDaGlsZCA9IGNoaWxkSXNBRGl2aWRlciA/IGNoaWxkIDogY2hpbGRJc0Rpc2FibGVkID8gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7IGRlc2t0b3A6IGRlc2t0b3AgfSkgOiBfdGhpczIuX2Nsb25lTWVudUl0ZW0oY2hpbGQsIG1lbnVJdGVtSW5kZXgsIHN0eWxlcyk7XG5cbiAgICAgIGlmICghY2hpbGRJc0FEaXZpZGVyICYmICFjaGlsZElzRGlzYWJsZWQpIG1lbnVJdGVtSW5kZXgrKztcblxuICAgICAgcmV0dXJuIGFuaW1hdGVkID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IGNoaWxkcmVuQ29udGFpbmVyU3R5bGVzIH0sXG4gICAgICAgIGNsb25lZENoaWxkXG4gICAgICApIDogY2xvbmVkQ2hpbGQ7XG4gICAgfSkuYmluZCh0aGlzKSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAge1xuICAgICAgICBvbktleURvd246IHRoaXMuX2hhbmRsZUtleURvd24sXG4gICAgICAgIHN0eWxlOiBtZXJnZWRSb290U3R5bGVzIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBQYXBlcixcbiAgICAgICAge1xuICAgICAgICAgIHJlZjogJ3Njcm9sbENvbnRhaW5lcicsXG4gICAgICAgICAgc3R5bGU6IHN0eWxlcy5wYXBlcixcbiAgICAgICAgICB6RGVwdGg6IHpEZXB0aCB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIExpc3QsXG4gICAgICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgICAgICByZWY6ICdsaXN0JyxcbiAgICAgICAgICAgIHN0eWxlOiBtZXJnZWRMaXN0U3R5bGVzIH0pLFxuICAgICAgICAgIG5ld0NoaWxkcmVuXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIHNldEtleWJvYXJkRm9jdXNlZDogZnVuY3Rpb24gc2V0S2V5Ym9hcmRGb2N1c2VkKGtleWJvYXJkRm9jdXNlZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IGtleWJvYXJkRm9jdXNlZFxuICAgIH0pO1xuICB9LFxuXG4gIF9hbmltYXRlT3BlbjogZnVuY3Rpb24gX2FuaW1hdGVPcGVuKCkge1xuICAgIHZhciByb290U3R5bGUgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKS5zdHlsZTtcbiAgICB2YXIgc2Nyb2xsQ29udGFpbmVyU3R5bGUgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMuc2Nyb2xsQ29udGFpbmVyKS5zdHlsZTtcbiAgICB2YXIgbWVudUNvbnRhaW5lcnMgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMubGlzdCkuY2hpbGROb2RlcztcblxuICAgIEF1dG9QcmVmaXguc2V0KHJvb3RTdHlsZSwgJ3RyYW5zZm9ybScsICdzY2FsZVgoMSknKTtcbiAgICBBdXRvUHJlZml4LnNldChzY3JvbGxDb250YWluZXJTdHlsZSwgJ3RyYW5zZm9ybScsICdzY2FsZVkoMSknKTtcbiAgICBzY3JvbGxDb250YWluZXJTdHlsZS5vcGFjaXR5ID0gMTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVudUNvbnRhaW5lcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgIG1lbnVDb250YWluZXJzW2ldLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgIH1cbiAgfSxcblxuICBfY2xvbmVNZW51SXRlbTogZnVuY3Rpb24gX2Nsb25lTWVudUl0ZW0oY2hpbGQsIGNoaWxkSW5kZXgsIHN0eWxlcykge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzO1xuICAgIHZhciBkZXNrdG9wID0gX3Byb3BzMi5kZXNrdG9wO1xuICAgIHZhciBzZWxlY3RlZE1lbnVJdGVtU3R5bGUgPSBfcHJvcHMyLnNlbGVjdGVkTWVudUl0ZW1TdHlsZTtcblxuICAgIHZhciBzZWxlY3RlZCA9IHRoaXMuX2lzQ2hpbGRTZWxlY3RlZChjaGlsZCwgdGhpcy5wcm9wcyk7XG4gICAgdmFyIHNlbGVjdGVkQ2hpbGRyZW5TdHlsZXMgPSB7fTtcblxuICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgc2VsZWN0ZWRDaGlsZHJlblN0eWxlcyA9IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLnNlbGVjdGVkTWVudUl0ZW0sIHNlbGVjdGVkTWVudUl0ZW1TdHlsZSk7XG4gICAgfVxuXG4gICAgdmFyIG1lcmdlZENoaWxkcmVuU3R5bGVzID0gdGhpcy5tZXJnZVN0eWxlcyhjaGlsZC5wcm9wcy5zdHlsZSB8fCB7fSwgc2VsZWN0ZWRDaGlsZHJlblN0eWxlcyk7XG5cbiAgICB2YXIgaXNGb2N1c2VkID0gY2hpbGRJbmRleCA9PT0gdGhpcy5zdGF0ZS5mb2N1c0luZGV4O1xuICAgIHZhciBmb2N1c1N0YXRlID0gJ25vbmUnO1xuICAgIGlmIChpc0ZvY3VzZWQpIHtcbiAgICAgIGZvY3VzU3RhdGUgPSB0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkID8gJ2tleWJvYXJkLWZvY3VzZWQnIDogJ2ZvY3VzZWQnO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIGRlc2t0b3A6IGRlc2t0b3AsXG4gICAgICBmb2N1c1N0YXRlOiBmb2N1c1N0YXRlLFxuICAgICAgb25Ub3VjaFRhcDogZnVuY3Rpb24gb25Ub3VjaFRhcChlKSB7XG4gICAgICAgIF90aGlzMy5faGFuZGxlTWVudUl0ZW1Ub3VjaFRhcChlLCBjaGlsZCk7XG4gICAgICAgIGlmIChjaGlsZC5wcm9wcy5vblRvdWNoVGFwKSBjaGlsZC5wcm9wcy5vblRvdWNoVGFwKGUpO1xuICAgICAgfSxcbiAgICAgIHJlZjogaXNGb2N1c2VkID8gJ2ZvY3VzZWRNZW51SXRlbScgOiBudWxsLFxuICAgICAgc3R5bGU6IG1lcmdlZENoaWxkcmVuU3R5bGVzXG4gICAgfSk7XG4gIH0sXG5cbiAgX2RlY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleDogZnVuY3Rpb24gX2RlY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleCgpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnN0YXRlLmZvY3VzSW5kZXg7XG5cbiAgICBpbmRleC0tO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gMDtcblxuICAgIHRoaXMuX3NldEZvY3VzSW5kZXgoaW5kZXgsIHRydWUpO1xuICB9LFxuXG4gIF9nZXRDYXNjYWRlQ2hpbGRyZW5Db3VudDogZnVuY3Rpb24gX2dldENhc2NhZGVDaGlsZHJlbkNvdW50KCkge1xuICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY2hpbGRyZW4gPSBfcHJvcHMzLmNoaWxkcmVuO1xuICAgIHZhciBkZXNrdG9wID0gX3Byb3BzMy5kZXNrdG9wO1xuICAgIHZhciBtYXhIZWlnaHQgPSBfcHJvcHMzLm1heEhlaWdodDtcblxuICAgIHZhciBjb3VudCA9IDE7XG4gICAgdmFyIGN1cnJlbnRIZWlnaHQgPSBkZXNrdG9wID8gMTYgOiA4O1xuICAgIHZhciBtZW51SXRlbUhlaWdodCA9IGRlc2t0b3AgPyAzMiA6IDQ4O1xuXG4gICAgLy9NYXhIZWlnaHQgaXNuJ3Qgc2V0IC0gY2FzY2FkZSBhbGwgb2YgdGhlIGNoaWxkcmVuXG4gICAgaWYgKCFtYXhIZWlnaHQpIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbik7XG5cbiAgICAvL0NvdW50IGFsbCB0aGUgY2hpbGRyZW4gdGhhdCB3aWxsIGZpdCBpbnNpZGUgdGhlXG4gICAgLy9tYXggbWVudSBoZWlnaHRcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGlmIChjdXJyZW50SGVpZ2h0IDwgbWF4SGVpZ2h0KSB7XG4gICAgICAgIHZhciBjaGlsZElzQURpdmlkZXIgPSBjaGlsZC50eXBlLmRpc3BsYXlOYW1lID09PSAnTWVudURpdmlkZXInO1xuXG4gICAgICAgIGN1cnJlbnRIZWlnaHQgKz0gY2hpbGRJc0FEaXZpZGVyID8gMTYgOiBtZW51SXRlbUhlaWdodDtcbiAgICAgICAgY291bnQrKztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjb3VudDtcbiAgfSxcblxuICBfZ2V0TWVudUl0ZW1Db3VudDogZnVuY3Rpb24gX2dldE1lbnVJdGVtQ291bnQoKSB7XG4gICAgdmFyIG1lbnVJdGVtQ291bnQgPSAwO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2godGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB2YXIgY2hpbGRJc0FEaXZpZGVyID0gY2hpbGQudHlwZS5kaXNwbGF5TmFtZSA9PT0gJ01lbnVEaXZpZGVyJztcbiAgICAgIHZhciBjaGlsZElzRGlzYWJsZWQgPSBjaGlsZC5wcm9wcy5kaXNhYmxlZDtcbiAgICAgIGlmICghY2hpbGRJc0FEaXZpZGVyICYmICFjaGlsZElzRGlzYWJsZWQpIG1lbnVJdGVtQ291bnQrKztcbiAgICB9KTtcbiAgICByZXR1cm4gbWVudUl0ZW1Db3VudDtcbiAgfSxcblxuICBfZ2V0U2VsZWN0ZWRJbmRleDogZnVuY3Rpb24gX2dldFNlbGVjdGVkSW5kZXgocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIHNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICB2YXIgbWVudUl0ZW1JbmRleCA9IDA7XG5cbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB2YXIgY2hpbGRJc0FEaXZpZGVyID0gY2hpbGQudHlwZS5kaXNwbGF5TmFtZSA9PT0gJ01lbnVEaXZpZGVyJztcblxuICAgICAgaWYgKF90aGlzNC5faXNDaGlsZFNlbGVjdGVkKGNoaWxkLCBwcm9wcykpIHNlbGVjdGVkSW5kZXggPSBtZW51SXRlbUluZGV4O1xuICAgICAgaWYgKCFjaGlsZElzQURpdmlkZXIpIG1lbnVJdGVtSW5kZXgrKztcbiAgICB9KS5iaW5kKHRoaXMpKTtcblxuICAgIHJldHVybiBzZWxlY3RlZEluZGV4O1xuICB9LFxuXG4gIF9oYW5kbGVLZXlEb3duOiBmdW5jdGlvbiBfaGFuZGxlS2V5RG93bihlKSB7XG4gICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgIGNhc2UgS2V5Q29kZS5ET1dOOlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuX2luY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgS2V5Q29kZS5FU0M6XG4gICAgICAgIHRoaXMucHJvcHMub25Fc2NLZXlEb3duKGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgS2V5Q29kZS5UQUI6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICB0aGlzLl9kZWNyZW1lbnRLZXlib2FyZEZvY3VzSW5kZXgoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9pbmNyZW1lbnRLZXlib2FyZEZvY3VzSW5kZXgoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgS2V5Q29kZS5VUDpcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLl9kZWNyZW1lbnRLZXlib2FyZEZvY3VzSW5kZXgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMucHJvcHMub25LZXlEb3duKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVNZW51SXRlbVRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlTWVudUl0ZW1Ub3VjaFRhcChlLCBpdGVtKSB7XG4gICAgdmFyIG11bHRpcGxlID0gdGhpcy5wcm9wcy5tdWx0aXBsZTtcbiAgICB2YXIgdmFsdWVMaW5rID0gdGhpcy5nZXRWYWx1ZUxpbmsodGhpcy5wcm9wcyk7XG4gICAgdmFyIG1lbnVWYWx1ZSA9IHZhbHVlTGluay52YWx1ZTtcbiAgICB2YXIgaXRlbVZhbHVlID0gaXRlbS5wcm9wcy52YWx1ZTtcblxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgdmFyIGluZGV4ID0gbWVudVZhbHVlLmluZGV4T2YoaXRlbVZhbHVlKTtcbiAgICAgIHZhciBuZXdNZW51VmFsdWUgPSBpbmRleCA9PT0gLTEgPyB1cGRhdGUobWVudVZhbHVlLCB7ICRwdXNoOiBbaXRlbVZhbHVlXSB9KSA6IHVwZGF0ZShtZW51VmFsdWUsIHsgJHNwbGljZTogW1tpbmRleCwgMV1dIH0pO1xuXG4gICAgICB2YWx1ZUxpbmsucmVxdWVzdENoYW5nZShlLCBuZXdNZW51VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoIW11bHRpcGxlICYmIGl0ZW1WYWx1ZSAhPT0gbWVudVZhbHVlKSB7XG4gICAgICB2YWx1ZUxpbmsucmVxdWVzdENoYW5nZShlLCBpdGVtVmFsdWUpO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25JdGVtVG91Y2hUYXAoZSwgaXRlbSk7XG4gIH0sXG5cbiAgX2luY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleDogZnVuY3Rpb24gX2luY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleCgpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnN0YXRlLmZvY3VzSW5kZXg7XG4gICAgdmFyIG1heEluZGV4ID0gdGhpcy5fZ2V0TWVudUl0ZW1Db3VudCgpIC0gMTtcblxuICAgIGluZGV4Kys7XG4gICAgaWYgKGluZGV4ID4gbWF4SW5kZXgpIGluZGV4ID0gbWF4SW5kZXg7XG5cbiAgICB0aGlzLl9zZXRGb2N1c0luZGV4KGluZGV4LCB0cnVlKTtcbiAgfSxcblxuICBfaXNDaGlsZFNlbGVjdGVkOiBmdW5jdGlvbiBfaXNDaGlsZFNlbGVjdGVkKGNoaWxkLCBwcm9wcykge1xuICAgIHZhciBtdWx0aXBsZSA9IHByb3BzLm11bHRpcGxlO1xuICAgIHZhciBtZW51VmFsdWUgPSB0aGlzLmdldFZhbHVlTGluayhwcm9wcykudmFsdWU7XG4gICAgdmFyIGNoaWxkVmFsdWUgPSBjaGlsZC5wcm9wcy52YWx1ZTtcblxuICAgIHJldHVybiBtdWx0aXBsZSAmJiBtZW51VmFsdWUubGVuZ3RoICYmIG1lbnVWYWx1ZS5pbmRleE9mKGNoaWxkVmFsdWUpICE9PSAtMSB8fCAhbXVsdGlwbGUgJiYgbWVudVZhbHVlICYmIG1lbnVWYWx1ZSA9PT0gY2hpbGRWYWx1ZTtcbiAgfSxcblxuICBfc2V0Rm9jdXNJbmRleDogZnVuY3Rpb24gX3NldEZvY3VzSW5kZXgobmV3SW5kZXgsIGlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBmb2N1c0luZGV4OiBuZXdJbmRleCxcbiAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkOiBpc0tleWJvYXJkRm9jdXNlZFxuICAgIH0pO1xuICB9LFxuXG4gIF9zZXRTY29sbFBvc2l0aW9uOiBmdW5jdGlvbiBfc2V0U2NvbGxQb3NpdGlvbigpIHtcbiAgICB2YXIgZGVza3RvcCA9IHRoaXMucHJvcHMuZGVza3RvcDtcbiAgICB2YXIgZm9jdXNlZE1lbnVJdGVtID0gdGhpcy5yZWZzLmZvY3VzZWRNZW51SXRlbTtcbiAgICB2YXIgbWVudUl0ZW1IZWlnaHQgPSBkZXNrdG9wID8gMzIgOiA0ODtcblxuICAgIGlmIChmb2N1c2VkTWVudUl0ZW0pIHtcbiAgICAgIHZhciBzZWxlY3RlZE9mZlNldCA9IFJlYWN0LmZpbmRET01Ob2RlKGZvY3VzZWRNZW51SXRlbSkub2Zmc2V0VG9wO1xuXG4gICAgICAvL01ha2UgdGhlIGZvY3VzZWQgaXRlbSBiZSB0aGUgMm5kIGl0ZW0gaW4gdGhlIGxpc3QgdGhlXG4gICAgICAvL3VzZXIgc2Vlc1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IHNlbGVjdGVkT2ZmU2V0IC0gbWVudUl0ZW1IZWlnaHQ7XG4gICAgICBpZiAoc2Nyb2xsVG9wIDwgbWVudUl0ZW1IZWlnaHQpIHNjcm9sbFRvcCA9IDA7XG5cbiAgICAgIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5zY3JvbGxDb250YWluZXIpLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICB9XG4gIH0sXG5cbiAgX3NldFdpZHRoOiBmdW5jdGlvbiBfc2V0V2lkdGgoKSB7XG4gICAgdmFyIGVsID0gUmVhY3QuZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGxpc3RFbCA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5saXN0KTtcbiAgICB2YXIgZWxXaWR0aCA9IGVsLm9mZnNldFdpZHRoO1xuICAgIHZhciBrZXlXaWR0aCA9IHRoaXMuc3RhdGUua2V5V2lkdGg7XG4gICAgdmFyIG1pbldpZHRoID0ga2V5V2lkdGggKiAxLjU7XG4gICAgdmFyIGtleUluY3JlbWVudHMgPSBlbFdpZHRoIC8ga2V5V2lkdGg7XG4gICAgdmFyIG5ld1dpZHRoID0gdW5kZWZpbmVkO1xuXG4gICAga2V5SW5jcmVtZW50cyA9IGtleUluY3JlbWVudHMgPD0gMS41ID8gMS41IDogTWF0aC5jZWlsKGtleUluY3JlbWVudHMpO1xuICAgIG5ld1dpZHRoID0ga2V5SW5jcmVtZW50cyAqIGtleVdpZHRoO1xuXG4gICAgaWYgKG5ld1dpZHRoIDwgbWluV2lkdGgpIG5ld1dpZHRoID0gbWluV2lkdGg7XG5cbiAgICBlbC5zdHlsZS53aWR0aCA9IG5ld1dpZHRoICsgJ3B4JztcbiAgICBsaXN0RWwuc3R5bGUud2lkdGggPSBuZXdXaWR0aCArICdweCc7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWVudTtcbn0se1wiLi4vbGlzdHMvbGlzdFwiOjQzLFwiLi4vbWl4aW5zL2NvbnRyb2xsYWJsZVwiOjUyLFwiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi9wYXBlclwiOjU4LFwiLi4vc3R5bGVzL2F1dG8tcHJlZml4XCI6NzAsXCIuLi9zdHlsZXMvdHJhbnNpdGlvbnNcIjo3NyxcIi4uL3V0aWxzL2tleS1jb2RlXCI6MTMzLFwiLi4vdXRpbHMvcHJvcC10eXBlc1wiOjEzNixcInJlYWN0L2FkZG9uc1wiOjE0N31dLDUwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmdcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xhc3NOYW1lOiAnJ1xuICAgIH07XG4gIH0sXG5cbiAgZ2V0Q2xhc3NlczogZnVuY3Rpb24gZ2V0Q2xhc3Nlcyhpbml0aWFsQ2xhc3NlcywgYWRkaXRpb25hbENsYXNzT2JqKSB7XG4gICAgdmFyIGNsYXNzU3RyaW5nID0gJyc7XG5cbiAgICAvL0luaXRpYWxpemUgdGhlIGNsYXNzU3RyaW5nIHdpdGggdGhlIGNsYXNzTmFtZXMgdGhhdCB3ZXJlIHBhc3NlZCBpblxuICAgIGlmICh0aGlzLnByb3BzLmNsYXNzTmFtZS5sZW5ndGgpIGNsYXNzU3RyaW5nICs9ICcgJyArIHRoaXMucHJvcHMuY2xhc3NOYW1lO1xuXG4gICAgLy9BZGQgaW4gaW5pdGlhbCBjbGFzc2VzXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsQ2xhc3NlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGNsYXNzU3RyaW5nICs9ICcgJyArIGNsYXNzTmFtZXMoaW5pdGlhbENsYXNzZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbGFzc1N0cmluZyArPSAnICcgKyBpbml0aWFsQ2xhc3NlcztcbiAgICB9XG5cbiAgICAvL0FkZCBpbiBhZGRpdGlvbmFsIGNsYXNzZXNcbiAgICBpZiAoYWRkaXRpb25hbENsYXNzT2JqKSBjbGFzc1N0cmluZyArPSAnICcgKyBjbGFzc05hbWVzKGFkZGl0aW9uYWxDbGFzc09iaik7XG5cbiAgICAvL0NvbnZlcnQgdGhlIGNsYXNzIHN0cmluZyBpbnRvIGFuIG9iamVjdCBhbmQgcnVuIGl0IHRocm91Z2ggdGhlIGNsYXNzIHNldFxuICAgIHJldHVybiBjbGFzc05hbWVzKHRoaXMuZ2V0Q2xhc3NTZXQoY2xhc3NTdHJpbmcpKTtcbiAgfSxcblxuICBnZXRDbGFzc1NldDogZnVuY3Rpb24gZ2V0Q2xhc3NTZXQoY2xhc3NTdHJpbmcpIHtcbiAgICB2YXIgY2xhc3NPYmogPSB7fTtcblxuICAgIGlmIChjbGFzc1N0cmluZykge1xuICAgICAgY2xhc3NTdHJpbmcuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgaWYgKGNsYXNzTmFtZSkgY2xhc3NPYmpbY2xhc3NOYW1lXSA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NPYmo7XG4gIH1cblxufTtcbn0se1wiY2xhc3NuYW1lc1wiOjEzOSxcInJlYWN0XCI6MzE5fV0sNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIEV2ZW50cyA9IHJlcXVpcmUoJy4uL3V0aWxzL2V2ZW50cycpO1xudmFyIERvbSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RvbScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvL1doZW4gdGhlIGNvbXBvbmVudCBtb3VudHMsIGxpc3RlbiB0byBjbGljayBldmVudHMgYW5kIGNoZWNrIGlmIHdlIG5lZWQgdG9cbiAgLy9DYWxsIHRoZSBjb21wb25lbnRDbGlja0F3YXkgZnVuY3Rpb24uXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMubWFudWFsbHlCaW5kQ2xpY2tBd2F5KSB0aGlzLl9iaW5kQ2xpY2tBd2F5KCk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX3VuYmluZENsaWNrQXdheSgpO1xuICB9LFxuXG4gIF9jaGVja0NsaWNrQXdheTogZnVuY3Rpb24gX2NoZWNrQ2xpY2tBd2F5KGV2ZW50KSB7XG4gICAgdmFyIGVsID0gUmVhY3QuZmluZERPTU5vZGUodGhpcyk7XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgdGFyZ2V0IGlzIGluc2lkZSB0aGUgY3VycmVudCBjb21wb25lbnRcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBlbCAmJiAhRG9tLmlzRGVzY2VuZGFudChlbCwgZXZlbnQudGFyZ2V0KSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgaWYgKHRoaXMuY29tcG9uZW50Q2xpY2tBd2F5KSB0aGlzLmNvbXBvbmVudENsaWNrQXdheSgpO1xuICAgIH1cbiAgfSxcblxuICBfYmluZENsaWNrQXdheTogZnVuY3Rpb24gX2JpbmRDbGlja0F3YXkoKSB7XG4gICAgLy8gT24gdG91Y2gtZW5hYmxlZCBkZXZpY2VzLCBib3RoIGV2ZW50cyBmaXJlLCBhbmQgdGhlIGhhbmRsZXIgaXMgY2FsbGVkIHR3aWNlLFxuICAgIC8vIGJ1dCBpdCdzIGZpbmUgc2luY2UgYWxsIG9wZXJhdGlvbnMgZm9yIHdoaWNoIHRoZSBtaXhpbiBpcyB1c2VkXG4gICAgLy8gYXJlIGlkZW1wb3RlbnQuXG4gICAgRXZlbnRzLm9uKGRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuX2NoZWNrQ2xpY2tBd2F5KTtcbiAgICBFdmVudHMub24oZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2NoZWNrQ2xpY2tBd2F5KTtcbiAgfSxcblxuICBfdW5iaW5kQ2xpY2tBd2F5OiBmdW5jdGlvbiBfdW5iaW5kQ2xpY2tBd2F5KCkge1xuICAgIEV2ZW50cy5vZmYoZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fY2hlY2tDbGlja0F3YXkpO1xuICAgIEV2ZW50cy5vZmYoZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2NoZWNrQ2xpY2tBd2F5KTtcbiAgfVxuXG59O1xufSx7XCIuLi91dGlscy9kb21cIjoxMjgsXCIuLi91dGlscy9ldmVudHNcIjoxMjksXCJyZWFjdFwiOjMxOX1dLDUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIHByb3BUeXBlczoge1xuICAgIG9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICB2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mVHlwZShbUmVhY3QuUHJvcFR5cGVzLnN0cmluZywgUmVhY3QuUHJvcFR5cGVzLmFycmF5XSksXG4gICAgdmFsdWVMaW5rOiBSZWFjdC5Qcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgdmFsdWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHJlcXVlc3RDaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KVxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoKSB7fVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0VmFsdWVMaW5rOiBmdW5jdGlvbiBnZXRWYWx1ZUxpbmsocHJvcHMpIHtcbiAgICByZXR1cm4gcHJvcHMudmFsdWVMaW5rIHx8IHtcbiAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSxcbiAgICAgIHJlcXVlc3RDaGFuZ2U6IHByb3BzLm9uQ2hhbmdlXG4gICAgfTtcbiAgfVxuXG59O1xufSx7XCJyZWFjdC9hZGRvbnNcIjoxNDd9XSw1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBDbGFzc2FibGU6IHJlcXVpcmUoJy4vY2xhc3NhYmxlJyksXG4gIENsaWNrQXdheWFibGU6IHJlcXVpcmUoJy4vY2xpY2stYXdheWFibGUnKSxcbiAgV2luZG93TGlzdGVuYWJsZTogcmVxdWlyZSgnLi93aW5kb3ctbGlzdGVuYWJsZScpLFxuICBTdHlsZVByb3BhYmxlOiByZXF1aXJlKCcuL3N0eWxlLXByb3BhYmxlJyksXG4gIFN0eWxlUmVzaXphYmxlOiByZXF1aXJlKCcuL3N0eWxlLXJlc2l6YWJsZScpXG59O1xufSx7XCIuL2NsYXNzYWJsZVwiOjUwLFwiLi9jbGljay1hd2F5YWJsZVwiOjUxLFwiLi9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi9zdHlsZS1yZXNpemFibGVcIjo1NSxcIi4vd2luZG93LWxpc3RlbmFibGVcIjo1Nn1dLDU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBJbW11dGFiaWxpdHlIZWxwZXIgPSByZXF1aXJlKCcuLi91dGlscy9pbW11dGFiaWxpdHktaGVscGVyJyk7XG52YXIgU3R5bGVzID0gcmVxdWlyZSgnLi4vdXRpbHMvc3R5bGVzJyk7XG5cbi8vIFRoaXMgbWl4aW4gaXNuJ3QgbmVjZXNzYXJ5IGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjAuMTFcblxuLyoqXG4gKlx0QHBhcmFtczpcbiAqXHRzdHlsZXMgPSBDdXJyZW50IHN0eWxlcy5cbiAqICBwcm9wcyA9IE5ldyBzdHlsZSBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBvdmVycmlkZSB0aGUgY3VycmVudCBzdHlsZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgc3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICAvL01vdmVkIHRoaXMgZnVuY3Rpb24gdG8gSW1tdXRhYmlsaXR5SGVscGVyLm1lcmdlXG4gIG1lcmdlU3R5bGVzOiBmdW5jdGlvbiBtZXJnZVN0eWxlcygpIHtcbiAgICByZXR1cm4gSW1tdXRhYmlsaXR5SGVscGVyLm1lcmdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0sXG5cbiAgLy9Nb3ZlZCB0aGlzIGZ1bmN0aW9uIHRvIC91dGlscy9zdHlsZXMuanNcbiAgbWVyZ2VBbmRQcmVmaXg6IGZ1bmN0aW9uIG1lcmdlQW5kUHJlZml4KCkge1xuICAgIHJldHVybiBTdHlsZXMubWVyZ2VBbmRQcmVmaXguYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxufTtcbn0se1wiLi4vdXRpbHMvaW1tdXRhYmlsaXR5LWhlbHBlclwiOjEzMSxcIi4uL3V0aWxzL3N0eWxlc1wiOjEzNyxcInJlYWN0XCI6MzE5fV0sNTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRzID0gcmVxdWlyZSgnLi4vdXRpbHMvZXZlbnRzJyk7XG5cbnZhciBTaXplcyA9IHtcbiAgU01BTEw6IDEsXG4gIE1FRElVTTogMixcbiAgTEFSR0U6IDNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIHN0YXRpY3M6IHtcbiAgICBTaXplczogU2l6ZXNcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGV2aWNlU2l6ZTogU2l6ZXMuU01BTExcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl91cGRhdGVEZXZpY2VTaXplKCk7XG4gICAgaWYgKCF0aGlzLm1hbnVhbGx5QmluZFJlc2l6ZSkgdGhpcy5fYmluZFJlc2l6ZSgpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLl91bmJpbmRSZXNpemUoKTtcbiAgfSxcblxuICBpc0RldmljZVNpemU6IGZ1bmN0aW9uIGlzRGV2aWNlU2l6ZShkZXNpcmVkU2l6ZSkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmRldmljZVNpemUgPj0gZGVzaXJlZFNpemU7XG4gIH0sXG5cbiAgX3VwZGF0ZURldmljZVNpemU6IGZ1bmN0aW9uIF91cGRhdGVEZXZpY2VTaXplKCkge1xuICAgIHZhciB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGlmICh3aWR0aCA+PSA5OTIpIHRoaXMuc2V0U3RhdGUoeyBkZXZpY2VTaXplOiBTaXplcy5MQVJHRSB9KTtlbHNlIGlmICh3aWR0aCA+PSA3NjgpIHRoaXMuc2V0U3RhdGUoeyBkZXZpY2VTaXplOiBTaXplcy5NRURJVU0gfSk7ZWxzZSB0aGlzLnNldFN0YXRlKHsgZGV2aWNlU2l6ZTogU2l6ZXMuU01BTEwgfSk7IC8vIHdpZHRoID49IDM3NVxuICB9LFxuXG4gIF9iaW5kUmVzaXplOiBmdW5jdGlvbiBfYmluZFJlc2l6ZSgpIHtcbiAgICBFdmVudHMub24od2luZG93LCAncmVzaXplJywgdGhpcy5fdXBkYXRlRGV2aWNlU2l6ZSk7XG4gIH0sXG5cbiAgX3VuYmluZFJlc2l6ZTogZnVuY3Rpb24gX3VuYmluZFJlc2l6ZSgpIHtcbiAgICBFdmVudHMub2ZmKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX3VwZGF0ZURldmljZVNpemUpO1xuICB9XG59O1xufSx7XCIuLi91dGlscy9ldmVudHNcIjoxMjl9XSw1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudHMgPSByZXF1aXJlKCcuLi91dGlscy9ldmVudHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLndpbmRvd0xpc3RlbmVycztcblxuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgIHZhciBjYWxsYmFja05hbWUgPSBsaXN0ZW5lcnNbZXZlbnROYW1lXTtcbiAgICAgIEV2ZW50cy5vbih3aW5kb3csIGV2ZW50TmFtZSwgdGhpc1tjYWxsYmFja05hbWVdKTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLndpbmRvd0xpc3RlbmVycztcblxuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgIHZhciBjYWxsYmFja05hbWUgPSBsaXN0ZW5lcnNbZXZlbnROYW1lXTtcbiAgICAgIEV2ZW50cy5vZmYod2luZG93LCBldmVudE5hbWUsIHRoaXNbY2FsbGJhY2tOYW1lXSk7XG4gICAgfVxuICB9XG5cbn07XG59LHtcIi4uL3V0aWxzL2V2ZW50c1wiOjEyOX1dLDU3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBDb2xvcnMgPSByZXF1aXJlKCcuL3N0eWxlcy9jb2xvcnMnKTtcblxudmFyIE92ZXJsYXkgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnT3ZlcmxheScsXG5cbiAgX29yaWdpbmFsQm9keU92ZXJmbG93OiAnJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBhdXRvTG9ja1Njcm9sbGluZzogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvdzogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgdHJhbnNpdGlvbkVuYWJsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF1dG9Mb2NrU2Nyb2xsaW5nOiB0cnVlLFxuICAgICAgdHJhbnNpdGlvbkVuYWJsZWQ6IHRydWVcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9vcmlnaW5hbEJvZHlPdmVyZmxvdyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uc3R5bGUub3ZlZmxvdztcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hdXRvTG9ja1Njcm9sbGluZykgdGhpcy5wcm9wcy5zaG93ID8gdGhpcy5fcHJldmVudFNjcm9sbGluZygpIDogdGhpcy5fYWxsb3dTY3JvbGxpbmcoKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5fYWxsb3dTY3JvbGxpbmcoKTtcbiAgfSxcblxuICBzZXRPcGFjaXR5OiBmdW5jdGlvbiBzZXRPcGFjaXR5KG9wYWNpdHkpIHtcbiAgICB2YXIgb3ZlcmxheSA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIG92ZXJsYXkuc3R5bGUub3BhY2l0eSA9IG9wYWNpdHk7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICB6SW5kZXg6IDksXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogJy0xMDAlJyxcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMubGlnaHRCbGFjayxcbiAgICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICdyZ2JhKDAsIDAsIDAsIDApJyxcblxuICAgICAgICAvLyBUd28gd2F5cyB0byBwcm9tb3RlIG92ZXJsYXkgdG8gaXRzIG93biByZW5kZXIgbGF5ZXJcbiAgICAgICAgd2lsbENoYW5nZTogJ29wYWNpdHknLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVaKDApJyxcblxuICAgICAgICB0cmFuc2l0aW9uOiB0aGlzLnByb3BzLnRyYW5zaXRpb25FbmFibGVkICYmIFRyYW5zaXRpb25zLmVhc2VPdXQoJzBtcycsICdsZWZ0JywgJzQwMG1zJykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0MDBtcycsICdvcGFjaXR5JylcbiAgICAgIH0sXG4gICAgICByb290V2hlblNob3duOiB7XG4gICAgICAgIGxlZnQ6ICcwJyxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhpcy5wcm9wcy50cmFuc2l0aW9uRW5hYmxlZCAmJiBUcmFuc2l0aW9ucy5lYXNlT3V0KCcwbXMnLCAnbGVmdCcpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDAwbXMnLCAnb3BhY2l0eScpXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBzaG93ID0gX3Byb3BzLnNob3c7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydzaG93JywgJ3N0eWxlJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgodGhpcy5nZXRTdHlsZXMoKS5yb290LCB0aGlzLnByb3BzLnN0eWxlLCB0aGlzLnByb3BzLnNob3cgJiYgdGhpcy5nZXRTdHlsZXMoKS5yb290V2hlblNob3duKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBfZXh0ZW5kcyh7fSwgb3RoZXIsIHsgc3R5bGU6IHN0eWxlcyB9KSk7XG4gIH0sXG5cbiAgcHJldmVudFNjcm9sbGluZzogZnVuY3Rpb24gcHJldmVudFNjcm9sbGluZygpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuYXV0b0xvY2tTY3JvbGxpbmcpIHRoaXMuX3ByZXZlbnRTY3JvbGxpbmcoKTtcbiAgfSxcblxuICBhbGxvd1Njcm9sbGluZzogZnVuY3Rpb24gYWxsb3dTY3JvbGxpbmcoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmF1dG9Mb2NrU2Nyb2xsaW5nKSB0aGlzLl9hbGxvd1Njcm9sbGluZygpO1xuICB9LFxuXG4gIF9wcmV2ZW50U2Nyb2xsaW5nOiBmdW5jdGlvbiBfcHJldmVudFNjcm9sbGluZygpIHtcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICB9LFxuXG4gIF9hbGxvd1Njcm9sbGluZzogZnVuY3Rpb24gX2FsbG93U2Nyb2xsaW5nKCkge1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICBib2R5LnN0eWxlLm92ZXJmbG93ID0gdGhpcy5fb3JpZ2luYWxCb2R5T3ZlcmZsb3cgfHwgJyc7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gT3ZlcmxheTtcbn0se1wiLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4vc3R5bGVzL2NvbG9yc1wiOjcxLFwiLi9zdHlsZXMvdHJhbnNpdGlvbnNcIjo3NyxcInJlYWN0XCI6MzE5fV0sNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xudmFyIFB1cmVSZW5kZXJNaXhpbiA9IFJlYWN0LmFkZG9ucy5QdXJlUmVuZGVyTWl4aW47XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgnLi91dGlscy9wcm9wLXR5cGVzJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xuXG52YXIgUGFwZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUGFwZXInLFxuXG4gIG1peGluczogW1B1cmVSZW5kZXJNaXhpbiwgU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjaXJjbGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHJvdW5kZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIHRyYW5zaXRpb25FbmFibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICB6RGVwdGg6IFByb3BUeXBlcy56RGVwdGhcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2lyY2xlOiBmYWxzZSxcbiAgICAgIHJvdW5kZWQ6IHRydWUsXG4gICAgICB0cmFuc2l0aW9uRW5hYmxlZDogdHJ1ZSxcbiAgICAgIHpEZXB0aDogMVxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuO1xuICAgIHZhciBjaXJjbGUgPSBfcHJvcHMuY2lyY2xlO1xuICAgIHZhciByb3VuZGVkID0gX3Byb3BzLnJvdW5kZWQ7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuICAgIHZhciB0cmFuc2l0aW9uRW5hYmxlZCA9IF9wcm9wcy50cmFuc2l0aW9uRW5hYmxlZDtcbiAgICB2YXIgekRlcHRoID0gX3Byb3BzLnpEZXB0aDtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2hpbGRyZW4nLCAnY2lyY2xlJywgJ3JvdW5kZWQnLCAnc3R5bGUnLCAndHJhbnNpdGlvbkVuYWJsZWQnLCAnekRlcHRoJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5wYXBlci5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uRW5hYmxlZCAmJiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIGZvbnRGYW1pbHk6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb250ZW50Rm9udEZhbWlseSxcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICBib3hTaGFkb3c6IHRoaXMuX2dldFpEZXB0aFNoYWRvd3MoekRlcHRoKSxcbiAgICAgIGJvcmRlclJhZGl1czogY2lyY2xlID8gJzUwJScgOiByb3VuZGVkID8gJzJweCcgOiAnMHB4J1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcywgc3R5bGUpIH0pLFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIF9nZXRaRGVwdGhTaGFkb3dzOiBmdW5jdGlvbiBfZ2V0WkRlcHRoU2hhZG93cyh6RGVwdGgpIHtcbiAgICB2YXIgc2hhZG93cyA9IFtudWxsLCAnMCAxcHggNnB4IHJnYmEoMCwgMCwgMCwgMC4xMiksIDAgMXB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMjQpJywgJzAgM3B4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjE2KSwgMCAzcHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMjMpJywgJzAgMTBweCAzMHB4IHJnYmEoMCwgMCwgMCwgMC4xOSksIDAgNnB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjIzKScsICcwIDE0cHggNDVweCByZ2JhKDAsIDAsIDAsIDAuMjUpLCAwIDEwcHggMThweCByZ2JhKDAsIDAsIDAsIDAuMjIpJywgJzAgMTlweCA2MHB4IHJnYmEoMCwgMCwgMCwgMC4zMCksIDAgMTVweCAyMHB4IHJnYmEoMCwgMCwgMCwgMC4yMiknXTtcblxuICAgIHJldHVybiBzaGFkb3dzW3pEZXB0aF07XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFwZXI7XG59LHtcIi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL3N0eWxlcy90cmFuc2l0aW9uc1wiOjc3LFwiLi91dGlscy9wcm9wLXR5cGVzXCI6MTM2LFwicmVhY3QvYWRkb25zXCI6MTQ3fV0sNTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJhZGlvQnV0dG9uID0gcmVxdWlyZSgnLi9yYWRpby1idXR0b24nKTtcblxudmFyIFJhZGlvQnV0dG9uR3JvdXAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmFkaW9CdXR0b25Hcm91cCcsXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgbmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlU2VsZWN0ZWQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGVmYXVsdFNlbGVjdGVkOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxhYmVsUG9zaXRpb246IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnXSksXG4gICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gIH0sXG5cbiAgX2hhc0NoZWNrQXR0cmlidXRlOiBmdW5jdGlvbiBfaGFzQ2hlY2tBdHRyaWJ1dGUocmFkaW9CdXR0b24pIHtcbiAgICByZXR1cm4gcmFkaW9CdXR0b24ucHJvcHMuaGFzT3duUHJvcGVydHkoJ2NoZWNrZWQnKSAmJiByYWRpb0J1dHRvbi5wcm9wcy5jaGVja2VkO1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBudW1iZXJDaGVja2VkUmFkaW9CdXR0b25zOiAwLFxuICAgICAgc2VsZWN0ZWQ6IHRoaXMucHJvcHMudmFsdWVTZWxlY3RlZCB8fCB0aGlzLnByb3BzLmRlZmF1bHRTZWxlY3RlZCB8fCAnJ1xuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBjbnQgPSAwO1xuXG4gICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCh0aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICBpZiAoX3RoaXMuX2hhc0NoZWNrQXR0cmlidXRlKG9wdGlvbikpIGNudCsrO1xuICAgIH0sIHRoaXMpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IG51bWJlckNoZWNrZWRSYWRpb0J1dHRvbnM6IGNudCB9KTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlU2VsZWN0ZWQnKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkOiBuZXh0UHJvcHMudmFsdWVTZWxlY3RlZCB9KTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IFJlYWN0LkNoaWxkcmVuLm1hcCh0aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICB2YXIgX29wdGlvbiRwcm9wcyA9IG9wdGlvbi5wcm9wcztcbiAgICAgIHZhciBuYW1lID0gX29wdGlvbiRwcm9wcy5uYW1lO1xuICAgICAgdmFyIHZhbHVlID0gX29wdGlvbiRwcm9wcy52YWx1ZTtcbiAgICAgIHZhciBsYWJlbCA9IF9vcHRpb24kcHJvcHMubGFiZWw7XG4gICAgICB2YXIgb25DaGVjayA9IF9vcHRpb24kcHJvcHMub25DaGVjaztcblxuICAgICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9vcHRpb24kcHJvcHMsIFsnbmFtZScsICd2YWx1ZScsICdsYWJlbCcsICdvbkNoZWNrJ10pO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSYWRpb0J1dHRvbiwgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHJlZjogb3B0aW9uLnByb3BzLnZhbHVlLFxuICAgICAgICBuYW1lOiBfdGhpczIucHJvcHMubmFtZSxcbiAgICAgICAga2V5OiBvcHRpb24ucHJvcHMudmFsdWUsXG4gICAgICAgIHZhbHVlOiBvcHRpb24ucHJvcHMudmFsdWUsXG4gICAgICAgIGxhYmVsOiBvcHRpb24ucHJvcHMubGFiZWwsXG4gICAgICAgIGxhYmVsUG9zaXRpb246IF90aGlzMi5wcm9wcy5sYWJlbFBvc2l0aW9uLFxuICAgICAgICBvbkNoZWNrOiBfdGhpczIuX29uQ2hhbmdlLFxuICAgICAgICBjaGVja2VkOiBvcHRpb24ucHJvcHMudmFsdWUgPT09IF90aGlzMi5zdGF0ZS5zZWxlY3RlZCB9KSk7XG4gICAgfSwgdGhpcyk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAge1xuICAgICAgICBzdHlsZTogdGhpcy5wcm9wcy5zdHlsZSxcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSB8fCAnJyB9LFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH0sXG5cbiAgX3VwZGF0ZVJhZGlvQnV0dG9uczogZnVuY3Rpb24gX3VwZGF0ZVJhZGlvQnV0dG9ucyhuZXdTZWxlY3Rpb24pIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5udW1iZXJDaGVja2VkUmFkaW9CdXR0b25zID09PSAwKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWQ6IG5ld1NlbGVjdGlvbiB9KTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBtZXNzYWdlID0gJ0Nhbm5vdCBzZWxlY3QgYSBkaWZmZXJlbnQgcmFkaW8gYnV0dG9uIHdoaWxlIGFub3RoZXIgcmFkaW8gYnV0dG9uICcgKyAnaGFzIHRoZSBcXCdjaGVja2VkXFwnIHByb3BlcnR5IHNldCB0byB0cnVlLic7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgfSxcblxuICBfb25DaGFuZ2U6IGZ1bmN0aW9uIF9vbkNoYW5nZShlLCBuZXdTZWxlY3Rpb24pIHtcbiAgICB0aGlzLl91cGRhdGVSYWRpb0J1dHRvbnMobmV3U2VsZWN0aW9uKTtcblxuICAgIC8vIFN1Y2Nlc3NmdWwgdXBkYXRlXG4gICAgaWYgKHRoaXMuc3RhdGUubnVtYmVyQ2hlY2tlZFJhZGlvQnV0dG9ucyA9PT0gMCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMub25DaGFuZ2UpIHRoaXMucHJvcHMub25DaGFuZ2UoZSwgbmV3U2VsZWN0aW9uKTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0U2VsZWN0ZWRWYWx1ZTogZnVuY3Rpb24gZ2V0U2VsZWN0ZWRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5zZWxlY3RlZDtcbiAgfSxcblxuICBzZXRTZWxlY3RlZFZhbHVlOiBmdW5jdGlvbiBzZXRTZWxlY3RlZFZhbHVlKG5ld1NlbGVjdGlvblZhbHVlKSB7XG4gICAgdGhpcy5fdXBkYXRlUmFkaW9CdXR0b25zKG5ld1NlbGVjdGlvblZhbHVlKTtcbiAgfSxcblxuICBjbGVhclZhbHVlOiBmdW5jdGlvbiBjbGVhclZhbHVlKCkge1xuICAgIHRoaXMuc2V0U2VsZWN0ZWRWYWx1ZSgnJyk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmFkaW9CdXR0b25Hcm91cDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL3JhZGlvLWJ1dHRvblwiOjYwLFwiX3Byb2Nlc3NcIjoxLFwicmVhY3RcIjozMTl9XSw2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgRW5oYW5jZWRTd2l0Y2ggPSByZXF1aXJlKCcuL2VuaGFuY2VkLXN3aXRjaCcpO1xudmFyIFJhZGlvQnV0dG9uT2ZmID0gcmVxdWlyZSgnLi9zdmctaWNvbnMvdG9nZ2xlL3JhZGlvLWJ1dHRvbi11bmNoZWNrZWQnKTtcbnZhciBSYWRpb0J1dHRvbk9uID0gcmVxdWlyZSgnLi9zdmctaWNvbnMvdG9nZ2xlL3JhZGlvLWJ1dHRvbi1jaGVja2VkJyk7XG5cbnZhciBSYWRpb0J1dHRvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSYWRpb0J1dHRvbicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpY29uU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgbGFiZWxTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvbkNoZWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5yYWRpb0J1dHRvbjtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgaWNvbjoge1xuICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5zaXplLFxuICAgICAgICB3aWR0aDogdGhpcy5nZXRUaGVtZSgpLnNpemVcbiAgICAgIH0sXG4gICAgICB0YXJnZXQ6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgICBmaWxsOiB0aGlzLmdldFRoZW1lKCkuYm9yZGVyQ29sb3JcbiAgICAgIH0sXG4gICAgICBmaWxsOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKScsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzUwJSA1MCUnLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIGZpbGw6IHRoaXMuZ2V0VGhlbWUoKS5jaGVja2VkQ29sb3JcbiAgICAgIH0sXG4gICAgICB0YXJnZXRXaGVuQ2hlY2tlZDoge1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSdcbiAgICAgIH0sXG4gICAgICBmaWxsV2hlbkNoZWNrZWQ6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gICAgICB9LFxuICAgICAgdGFyZ2V0V2hlbkRpc2FibGVkOiB7XG4gICAgICAgIGZpbGw6IHRoaXMuZ2V0VGhlbWUoKS5kaXNhYmxlZENvbG9yXG4gICAgICB9LFxuICAgICAgZmlsbFdoZW5EaXNhYmxlZDoge1xuICAgICAgICBmaWxsOiB0aGlzLmdldFRoZW1lKCkuZGlzYWJsZWRDb2xvclxuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIGNvbG9yOiB0aGlzLnByb3BzLmRpc2FibGVkID8gdGhpcy5nZXRUaGVtZSgpLmxhYmVsRGlzYWJsZWRDb2xvciA6IHRoaXMuZ2V0VGhlbWUoKS5sYWJlbENvbG9yXG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIG9uQ2hlY2sgPSBfcHJvcHMub25DaGVjaztcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnb25DaGVjayddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuICAgIHZhciBvblN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnRhcmdldCwgdGhpcy5wcm9wcy5jaGVja2VkICYmIHN0eWxlcy50YXJnZXRXaGVuQ2hlY2tlZCwgdGhpcy5wcm9wcy5pY29uU3R5bGUsIHRoaXMucHJvcHMuZGlzYWJsZWQgJiYgc3R5bGVzLnRhcmdldFdoZW5EaXNhYmxlZCk7XG4gICAgdmFyIG9mZlN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmZpbGwsIHRoaXMucHJvcHMuY2hlY2tlZCAmJiBzdHlsZXMuZmlsbFdoZW5DaGVja2VkLCB0aGlzLnByb3BzLmljb25TdHlsZSwgdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBzdHlsZXMuZmlsbFdoZW5EaXNhYmxlZCk7XG5cbiAgICB2YXIgcmFkaW9CdXR0b25FbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgbnVsbCxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmFkaW9CdXR0b25PZmYsIHsgc3R5bGU6IG9uU3R5bGVzIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSYWRpb0J1dHRvbk9uLCB7IHN0eWxlOiBvZmZTdHlsZXMgfSlcbiAgICApO1xuXG4gICAgdmFyIHJpcHBsZUNvbG9yID0gdGhpcy5wcm9wcy5jaGVja2VkID8gdGhpcy5nZXRUaGVtZSgpLmNoZWNrZWRDb2xvciA6IHRoaXMuZ2V0VGhlbWUoKS5ib3JkZXJDb2xvcjtcblxuICAgIHZhciBpY29uU3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5pY29uLCB0aGlzLnByb3BzLmljb25TdHlsZSk7XG5cbiAgICB2YXIgbGFiZWxTdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmxhYmVsLCB0aGlzLnByb3BzLmxhYmVsU3R5bGUpO1xuXG4gICAgdmFyIGVuaGFuY2VkU3dpdGNoUHJvcHMgPSB7XG4gICAgICByZWY6ICdlbmhhbmNlZFN3aXRjaCcsXG4gICAgICBpbnB1dFR5cGU6ICdyYWRpbycsXG4gICAgICBzd2l0Y2hlZDogdGhpcy5wcm9wcy5jaGVja2VkIHx8IGZhbHNlLFxuICAgICAgc3dpdGNoRWxlbWVudDogcmFkaW9CdXR0b25FbGVtZW50LFxuICAgICAgcmlwcGxlQ29sb3I6IHJpcHBsZUNvbG9yLFxuICAgICAgaWNvblN0eWxlOiBpY29uU3R5bGUsXG4gICAgICBsYWJlbFN0eWxlOiBsYWJlbFN0eWxlLFxuICAgICAgb25Td2l0Y2g6IHRoaXMuX2hhbmRsZUNoZWNrLFxuICAgICAgb25QYXJlbnRTaG91bGRVcGRhdGU6IHRoaXMuX2hhbmRsZVN0YXRlQ2hhbmdlLFxuICAgICAgbGFiZWxQb3NpdGlvbjogdGhpcy5wcm9wcy5sYWJlbFBvc2l0aW9uID8gdGhpcy5wcm9wcy5sYWJlbFBvc2l0aW9uIDogJ3JpZ2h0J1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbmhhbmNlZFN3aXRjaCwgX2V4dGVuZHMoe30sIG90aGVyLCBlbmhhbmNlZFN3aXRjaFByb3BzKSk7XG4gIH0sXG5cbiAgLy8gT25seSBjYWxsZWQgd2hlbiBzZWxlY3RlZCwgbm90IHdoZW4gdW5zZWxlY3RlZC5cbiAgX2hhbmRsZUNoZWNrOiBmdW5jdGlvbiBfaGFuZGxlQ2hlY2soZSkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uQ2hlY2spIHRoaXMucHJvcHMub25DaGVjayhlLCB0aGlzLnByb3BzLnZhbHVlKTtcbiAgfSxcblxuICBfaGFuZGxlU3RhdGVDaGFuZ2U6IGZ1bmN0aW9uIF9oYW5kbGVTdGF0ZUNoYW5nZSgpIHt9LFxuXG4gIGlzQ2hlY2tlZDogZnVuY3Rpb24gaXNDaGVja2VkKCkge1xuICAgIHJldHVybiB0aGlzLnJlZnMuZW5oYW5jZWRTd2l0Y2guaXNTd2l0Y2hlZCgpO1xuICB9LFxuXG4gIC8vIFVzZSBSYWRpb0J1dHRvbkdyb3VwLnNldFNlbGVjdGVkVmFsdWUobmV3U2VsZWN0aW9uVmFsdWUpIHRvIHNldCBhXG4gIC8vIFJhZGlvQnV0dG9uJ3MgY2hlY2tlZCB2YWx1ZS5cbiAgc2V0Q2hlY2tlZDogZnVuY3Rpb24gc2V0Q2hlY2tlZChuZXdDaGVja2VkVmFsdWUpIHtcbiAgICB0aGlzLnJlZnMuZW5oYW5jZWRTd2l0Y2guc2V0U3dpdGNoZWQobmV3Q2hlY2tlZFZhbHVlKTtcbiAgfSxcblxuICBnZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmcy5lbmhhbmNlZFN3aXRjaC5nZXRWYWx1ZSgpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJhZGlvQnV0dG9uO1xufSx7XCIuL2VuaGFuY2VkLXN3aXRjaFwiOjMwLFwiLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4vc3R5bGVzL3RyYW5zaXRpb25zXCI6NzcsXCIuL3N2Zy1pY29ucy90b2dnbGUvcmFkaW8tYnV0dG9uLWNoZWNrZWRcIjo5MSxcIi4vc3ZnLWljb25zL3RvZ2dsZS9yYWRpby1idXR0b24tdW5jaGVja2VkXCI6OTIsXCJyZWFjdFwiOjMxOX1dLDYxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBDb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZSgnLi91dGlscy9jb2xvci1tYW5pcHVsYXRvcicpO1xudmFyIFR5cG9ncmFwaHkgPSByZXF1aXJlKCcuL3N0eWxlcy90eXBvZ3JhcGh5Jyk7XG52YXIgRW5oYW5jZWRCdXR0b24gPSByZXF1aXJlKCcuL2VuaGFuY2VkLWJ1dHRvbicpO1xudmFyIFBhcGVyID0gcmVxdWlyZSgnLi9wYXBlcicpO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZUxhYmVsKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICBpZiAoIXByb3BzLmNoaWxkcmVuICYmICFwcm9wcy5sYWJlbCkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ1JlcXVpcmVkIHByb3AgbGFiZWwgb3IgY2hpbGRyZW4gd2FzIG5vdCAnICsgJ3NwZWNpZmllZCBpbiAnICsgY29tcG9uZW50TmFtZSArICcuJyk7XG4gIH1cbn1cblxudmFyIFJhaXNlZEJ1dHRvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSYWlzZWRCdXR0b24nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBsYWJlbDogdmFsaWRhdGVMYWJlbCxcbiAgICBvbk1vdXNlRG93bjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Nb3VzZVVwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlTGVhdmU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uVG91Y2hFbmQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uVG91Y2hTdGFydDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgcHJpbWFyeTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2Vjb25kYXJ5OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBsYWJlbFN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGJhY2tncm91bmRDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsYWJlbENvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZENvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRpc2FibGVkTGFiZWxDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmdWxsV2lkdGg6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgdmFyIHpEZXB0aCA9IHRoaXMucHJvcHMuZGlzYWJsZWQgPyAwIDogMTtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXJlZDogZmFsc2UsXG4gICAgICB0b3VjaGVkOiBmYWxzZSxcbiAgICAgIGluaXRpYWxaRGVwdGg6IHpEZXB0aCxcbiAgICAgIHpEZXB0aDogekRlcHRoXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHZhciB6RGVwdGggPSBuZXh0UHJvcHMuZGlzYWJsZWQgPyAwIDogMTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHpEZXB0aDogekRlcHRoLFxuICAgICAgaW5pdGlhbFpEZXB0aDogekRlcHRoXG4gICAgfSk7XG4gIH0sXG5cbiAgX2dldEJhY2tncm91bmRDb2xvcjogZnVuY3Rpb24gX2dldEJhY2tncm91bmRDb2xvcigpIHtcbiAgICB2YXIgZGlzYWJsZWRDb2xvciA9IHRoaXMucHJvcHMuZGlzYWJsZWRCYWNrZ3JvdW5kQ29sb3IgPyB0aGlzLnByb3BzLmRpc2FibGVkQmFja2dyb3VuZENvbG9yIDogdGhpcy5nZXRUaGVtZSgpLmRpc2FibGVkQ29sb3I7XG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kaXNhYmxlZCA/IGRpc2FibGVkQ29sb3IgOiB0aGlzLnByb3BzLmJhY2tncm91bmRDb2xvciA/IHRoaXMucHJvcHMuYmFja2dyb3VuZENvbG9yIDogdGhpcy5wcm9wcy5wcmltYXJ5ID8gdGhpcy5nZXRUaGVtZSgpLnByaW1hcnlDb2xvciA6IHRoaXMucHJvcHMuc2Vjb25kYXJ5ID8gdGhpcy5nZXRUaGVtZSgpLnNlY29uZGFyeUNvbG9yIDogdGhpcy5nZXRUaGVtZSgpLmNvbG9yO1xuICB9LFxuXG4gIF9nZXRMYWJlbENvbG9yOiBmdW5jdGlvbiBfZ2V0TGFiZWxDb2xvcigpIHtcbiAgICB2YXIgZGlzYWJsZWRDb2xvciA9IHRoaXMucHJvcHMuZGlzYWJsZWRMYWJlbENvbG9yID8gdGhpcy5wcm9wcy5kaXNhYmxlZExhYmVsQ29sb3IgOiB0aGlzLmdldFRoZW1lKCkuZGlzYWJsZWRUZXh0Q29sb3I7XG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kaXNhYmxlZCA/IGRpc2FibGVkQ29sb3IgOiB0aGlzLnByb3BzLmxhYmVsQ29sb3IgPyB0aGlzLnByb3BzLmxhYmVsQ29sb3IgOiB0aGlzLnByb3BzLnByaW1hcnkgPyB0aGlzLmdldFRoZW1lKCkucHJpbWFyeVRleHRDb2xvciA6IHRoaXMucHJvcHMuc2Vjb25kYXJ5ID8gdGhpcy5nZXRUaGVtZSgpLnNlY29uZGFyeVRleHRDb2xvciA6IHRoaXMuZ2V0VGhlbWUoKS50ZXh0Q29sb3I7XG4gIH0sXG5cbiAgZ2V0VGhlbWVCdXR0b246IGZ1bmN0aW9uIGdldFRoZW1lQnV0dG9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LmJ1dHRvbjtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQucmFpc2VkQnV0dG9uO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBhbW91bnQgPSB0aGlzLnByb3BzLnByaW1hcnkgfHwgdGhpcy5wcm9wcy5zZWNvbmRhcnkgPyAwLjQgOiAwLjA4O1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ25vbmUnLFxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgbWluV2lkdGg6IHRoaXMucHJvcHMuZnVsbFdpZHRoID8gJzEwMCUnIDogdGhpcy5nZXRUaGVtZUJ1dHRvbigpLm1pbldpZHRoLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0VGhlbWVCdXR0b24oKS5oZWlnaHQsXG4gICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmVhc2VPdXQoKVxuICAgICAgfSxcbiAgICAgIGNvbnRhaW5lcjoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAyLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5fZ2V0QmFja2dyb3VuZENvbG9yKCksXG5cbiAgICAgICAgLy9UaGlzIGlzIG5lZWQgc28gdGhhdCByaXBwbGVzIGRvIG5vdCBibGVlZFxuICAgICAgICAvL3Bhc3QgYm9yZGVyIHJhZGl1cy5cbiAgICAgICAgLy9TZWU6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTcyOTg3MzkvY3NzLW92ZXJmbG93LWhpZGRlbi1ub3Qtd29ya2luZy1pbi1jaHJvbWUtd2hlbi1wYXJlbnQtaGFzLWJvcmRlci1yYWRpdXMtYW5kLWNoaWxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgMCwgMCknXG4gICAgICB9LFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgIGxldHRlclNwYWNpbmc6IDAsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgICBmb250V2VpZ2h0OiBUeXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgcGFkZGluZzogJzBweCAnICsgdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmcuZGVza3RvcEd1dHRlckxlc3MgKyAncHgnLFxuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMucHJvcHMuc3R5bGUgJiYgdGhpcy5wcm9wcy5zdHlsZS5oZWlnaHQgPyB0aGlzLnByb3BzLnN0eWxlLmhlaWdodCA6IHRoaXMuZ2V0VGhlbWVCdXR0b24oKS5oZWlnaHQgKyAncHgnLFxuICAgICAgICBjb2xvcjogdGhpcy5fZ2V0TGFiZWxDb2xvcigpXG4gICAgICB9LFxuICAgICAgb3ZlcmxheToge1xuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIHRvcDogMFxuICAgICAgfSxcbiAgICAgIG92ZXJsYXlXaGVuSG92ZXJlZDoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9yTWFuaXB1bGF0b3IuZmFkZSh0aGlzLl9nZXRMYWJlbENvbG9yKCksIGFtb3VudClcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkO1xuICAgIHZhciBsYWJlbCA9IF9wcm9wcy5sYWJlbDtcbiAgICB2YXIgcHJpbWFyeSA9IF9wcm9wcy5wcmltYXJ5O1xuICAgIHZhciBzZWNvbmRhcnkgPSBfcHJvcHMuc2Vjb25kYXJ5O1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydkaXNhYmxlZCcsICdsYWJlbCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIGxhYmVsRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICBpZiAobGFiZWwpIHtcbiAgICAgIGxhYmVsRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubGFiZWwsIHRoaXMucHJvcHMubGFiZWxTdHlsZSkgfSxcbiAgICAgICAgbGFiZWxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJpcHBsZUNvbG9yID0gc3R5bGVzLmxhYmVsLmNvbG9yO1xuICAgIHZhciByaXBwbGVPcGFjaXR5ID0gIShwcmltYXJ5IHx8IHNlY29uZGFyeSkgPyAwLjEgOiAwLjE2O1xuXG4gICAgdmFyIGJ1dHRvbkV2ZW50SGFuZGxlcnMgPSBkaXNhYmxlZCA/IG51bGwgOiB7XG4gICAgICBvbk1vdXNlRG93bjogdGhpcy5faGFuZGxlTW91c2VEb3duLFxuICAgICAgb25Nb3VzZVVwOiB0aGlzLl9oYW5kbGVNb3VzZVVwLFxuICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLl9oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLl9oYW5kbGVNb3VzZUVudGVyLFxuICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0LFxuICAgICAgb25Ub3VjaEVuZDogdGhpcy5faGFuZGxlVG91Y2hFbmQsXG4gICAgICBvbktleWJvYXJkRm9jdXM6IHRoaXMuX2hhbmRsZUtleWJvYXJkRm9jdXNcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBQYXBlcixcbiAgICAgIHtcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUpLFxuICAgICAgICB6RGVwdGg6IHRoaXMuc3RhdGUuekRlcHRoIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBFbmhhbmNlZEJ1dHRvbixcbiAgICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCBidXR0b25FdmVudEhhbmRsZXJzLCB7XG4gICAgICAgICAgcmVmOiAnY29udGFpbmVyJyxcbiAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmNvbnRhaW5lciksXG4gICAgICAgICAgZm9jdXNSaXBwbGVDb2xvcjogcmlwcGxlQ29sb3IsXG4gICAgICAgICAgdG91Y2hSaXBwbGVDb2xvcjogcmlwcGxlQ29sb3IsXG4gICAgICAgICAgZm9jdXNSaXBwbGVPcGFjaXR5OiByaXBwbGVPcGFjaXR5LFxuICAgICAgICAgIHRvdWNoUmlwcGxlT3BhY2l0eTogcmlwcGxlT3BhY2l0eSB9KSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHJlZjogJ292ZXJsYXknLCBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMub3ZlcmxheSwgdGhpcy5zdGF0ZS5ob3ZlcmVkICYmICF0aGlzLnByb3BzLmRpc2FibGVkICYmIHN0eWxlcy5vdmVybGF5V2hlbkhvdmVyZWQpIH0sXG4gICAgICAgICAgbGFiZWxFbGVtZW50LFxuICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlRG93bjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgLy9vbmx5IGxpc3RlbiB0byBsZWZ0IGNsaWNrc1xuICAgIGlmIChlLmJ1dHRvbiA9PT0gMCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHpEZXB0aDogdGhpcy5zdGF0ZS5pbml0aWFsWkRlcHRoICsgMSB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZURvd24pIHRoaXMucHJvcHMub25Nb3VzZURvd24oZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlVXA6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZVVwKGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgekRlcHRoOiB0aGlzLnN0YXRlLmluaXRpYWxaRGVwdGggfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VzZVVwKSB0aGlzLnByb3BzLm9uTW91c2VVcChlKTtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VMZWF2ZTogZnVuY3Rpb24gX2hhbmRsZU1vdXNlTGVhdmUoZSkge1xuICAgIGlmICghdGhpcy5yZWZzLmNvbnRhaW5lci5pc0tleWJvYXJkRm9jdXNlZCgpKSB0aGlzLnNldFN0YXRlKHsgekRlcHRoOiB0aGlzLnN0YXRlLmluaXRpYWxaRGVwdGgsIGhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VMZWF2ZSkgdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlRW50ZXI6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZUVudGVyKGUpIHtcbiAgICBpZiAoIXRoaXMucmVmcy5jb250YWluZXIuaXNLZXlib2FyZEZvY3VzZWQoKSAmJiAhdGhpcy5zdGF0ZS50b3VjaCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VFbnRlcikgdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoU3RhcnQ6IGZ1bmN0aW9uIF9oYW5kbGVUb3VjaFN0YXJ0KGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHRvdWNoOiB0cnVlLFxuICAgICAgekRlcHRoOiB0aGlzLnN0YXRlLmluaXRpYWxaRGVwdGggKyAxXG4gICAgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Ub3VjaFN0YXJ0KSB0aGlzLnByb3BzLm9uVG91Y2hTdGFydChlKTtcbiAgfSxcblxuICBfaGFuZGxlVG91Y2hFbmQ6IGZ1bmN0aW9uIF9oYW5kbGVUb3VjaEVuZChlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHpEZXB0aDogdGhpcy5zdGF0ZS5pbml0aWFsWkRlcHRoIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uVG91Y2hFbmQpIHRoaXMucHJvcHMub25Ub3VjaEVuZChlKTtcbiAgfSxcblxuICBfaGFuZGxlS2V5Ym9hcmRGb2N1czogZnVuY3Rpb24gX2hhbmRsZUtleWJvYXJkRm9jdXMoZSwga2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgaWYgKGtleWJvYXJkRm9jdXNlZCAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHpEZXB0aDogdGhpcy5zdGF0ZS5pbml0aWFsWkRlcHRoICsgMSB9KTtcbiAgICAgIHZhciBhbW91bnQgPSB0aGlzLnByb3BzLnByaW1hcnkgfHwgdGhpcy5wcm9wcy5zZWNvbmRhcnkgPyAwLjQgOiAwLjA4O1xuICAgICAgUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLm92ZXJsYXkpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IENvbG9yTWFuaXB1bGF0b3IuZmFkZSh0aGlzLm1lcmdlQW5kUHJlZml4KHRoaXMuZ2V0U3R5bGVzKCkubGFiZWwsIHRoaXMucHJvcHMubGFiZWxTdHlsZSkuY29sb3IsIGFtb3VudCk7XG4gICAgfSBlbHNlIGlmICghdGhpcy5zdGF0ZS5ob3ZlcmVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgekRlcHRoOiB0aGlzLnN0YXRlLmluaXRpYWxaRGVwdGggfSk7XG4gICAgICBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMub3ZlcmxheSkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3RyYW5zcGFyZW50JztcbiAgICB9XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJhaXNlZEJ1dHRvbjtcbn0se1wiLi9lbmhhbmNlZC1idXR0b25cIjoyOSxcIi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL3BhcGVyXCI6NTgsXCIuL3N0eWxlcy90cmFuc2l0aW9uc1wiOjc3LFwiLi9zdHlsZXMvdHlwb2dyYXBoeVwiOjc4LFwiLi91dGlscy9jb2xvci1tYW5pcHVsYXRvclwiOjEyNSxcInJlYWN0XCI6MzE5fV0sNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsncmV0dXJuJ10pIF9pWydyZXR1cm4nXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlJyk7IH0gfTsgfSkoKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBBdXRvUHJlZml4ID0gcmVxdWlyZSgnLi9zdHlsZXMvYXV0by1wcmVmaXgnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgUGFwZXIgPSByZXF1aXJlKCcuL3BhcGVyJyk7XG5cbnZhciBWSUVXQk9YX1NJWkUgPSAzMjtcbnZhciBSZWZyZXNoSW5kaWNhdG9yID0gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWZyZXNoSW5kaWNhdG9yJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBsZWZ0OiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIHBlcmNlbnRhZ2U6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIHNpemU6IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIHN0YXR1czogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vbmVPZihbJ3JlYWR5JywgJ2xvYWRpbmcnLCAnaGlkZSddKSxcbiAgICBzdHlsZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vYmplY3QsXG4gICAgdG9wOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBlcmNlbnRhZ2U6IDAsXG4gICAgICBzaXplOiA0MCxcbiAgICAgIHN0YXR1czogJ2hpZGUnXG4gICAgfTtcbiAgfSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUoKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLl9zY2FsZVBhdGgoX3JlYWN0MlsnZGVmYXVsdCddLmZpbmRET01Ob2RlKHRoaXMucmVmcy5wYXRoKSwgMCk7XG4gICAgdGhpcy5fcm90YXRlV3JhcHBlcihfcmVhY3QyWydkZWZhdWx0J10uZmluZERPTU5vZGUodGhpcy5yZWZzLndyYXBwZXIpKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcm9vdFN0eWxlID0gdGhpcy5fZ2V0Um9vdFN0eWxlKCk7XG4gICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgUGFwZXIsXG4gICAgICB7XG4gICAgICAgIGNpcmNsZTogdHJ1ZSxcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgocm9vdFN0eWxlLCB0aGlzLnByb3BzLnN0eWxlKSxcbiAgICAgICAgcmVmOiAnaW5kaWNhdG9yQ3QnXG4gICAgICB9LFxuICAgICAgdGhpcy5fcmVuZGVyQ2hpbGRyZW4oKVxuICAgICk7XG4gIH0sXG5cbiAgX3JlbmRlckNoaWxkcmVuOiBmdW5jdGlvbiBfcmVuZGVyQ2hpbGRyZW4oKSB7XG4gICAgdmFyIHBhcGVyU2l6ZSA9IHRoaXMuX2dldFBhcGVyU2l6ZSgpO1xuICAgIHZhciBjaGlsZHJlbkNtcCA9IG51bGw7XG4gICAgaWYgKHRoaXMucHJvcHMuc3RhdHVzICE9PSAncmVhZHknKSB7XG4gICAgICB2YXIgY2lyY2xlU3R5bGUgPSB0aGlzLl9nZXRDaXJjbGVTdHlsZShwYXBlclNpemUpO1xuICAgICAgY2hpbGRyZW5DbXAgPSBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgcmVmOiAnd3JhcHBlcicsIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywgJzIwcycsIG51bGwsICdsaW5lYXInKSxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzdmcnLFxuICAgICAgICAgIHsgc3R5bGU6IHtcbiAgICAgICAgICAgICAgd2lkdGg6IHBhcGVyU2l6ZSxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBwYXBlclNpemVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2aWV3Qm94OiAnMCAwICcgKyBWSUVXQk9YX1NJWkUgKyAnICcgKyBWSUVXQk9YX1NJWkVcbiAgICAgICAgICB9LFxuICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdjaXJjbGUnLCBfZXh0ZW5kcyh7IHJlZjogJ3BhdGgnLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoY2lyY2xlU3R5bGUuc3R5bGUsIHtcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuY3JlYXRlKCdhbGwnLCAnMS41cycsIG51bGwsICdlYXNlLWluLW91dCcpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0sIGNpcmNsZVN0eWxlLmF0dHIpKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2lyY2xlU3R5bGUgPSB0aGlzLl9nZXRDaXJjbGVTdHlsZShwYXBlclNpemUpO1xuICAgICAgdmFyIHBvbHlnb25TdHlsZSA9IHRoaXMuX2dldFBvbHlnb25TdHlsZShwYXBlclNpemUpO1xuICAgICAgY2hpbGRyZW5DbXAgPSBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3N2ZycsXG4gICAgICAgIHsgc3R5bGU6IHtcbiAgICAgICAgICAgIHdpZHRoOiBwYXBlclNpemUsXG4gICAgICAgICAgICBoZWlnaHQ6IHBhcGVyU2l6ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdmlld0JveDogJzAgMCAnICsgVklFV0JPWF9TSVpFICsgJyAnICsgVklFV0JPWF9TSVpFXG4gICAgICAgIH0sXG4gICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdjaXJjbGUnLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoY2lyY2xlU3R5bGUuc3R5bGUpXG4gICAgICAgIH0sIGNpcmNsZVN0eWxlLmF0dHIpKSxcbiAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3BvbHlnb24nLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgocG9seWdvblN0eWxlLnN0eWxlKVxuICAgICAgICB9LCBwb2x5Z29uU3R5bGUuYXR0cikpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZHJlbkNtcDtcbiAgfSxcblxuICBfZ2V0VGhlbWU6IGZ1bmN0aW9uIF9nZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5yZWZyZXNoSW5kaWNhdG9yO1xuICB9LFxuXG4gIF9nZXRQYWRkaW5nU2l6ZTogZnVuY3Rpb24gX2dldFBhZGRpbmdTaXplKCkge1xuICAgIHZhciBwYWRkaW5nID0gdGhpcy5wcm9wcy5zaXplICogMC4xO1xuICAgIHJldHVybiBwYWRkaW5nO1xuICB9LFxuXG4gIF9nZXRQYXBlclNpemU6IGZ1bmN0aW9uIF9nZXRQYXBlclNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuc2l6ZSAtIHRoaXMuX2dldFBhZGRpbmdTaXplKCkgKiAyO1xuICB9LFxuXG4gIF9nZXRDaXJjbGVBdHRyOiBmdW5jdGlvbiBfZ2V0Q2lyY2xlQXR0cigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmFkaXU6IFZJRVdCT1hfU0laRSAvIDIgLSA1LFxuICAgICAgb3JpZ2luWDogVklFV0JPWF9TSVpFIC8gMixcbiAgICAgIG9yaWdpblk6IFZJRVdCT1hfU0laRSAvIDIsXG4gICAgICBzdHJva2VXaWR0aDogM1xuICAgIH07XG4gIH0sXG5cbiAgX2dldEFyY0RlZzogZnVuY3Rpb24gX2dldEFyY0RlZygpIHtcbiAgICB2YXIgcCA9IHRoaXMucHJvcHMucGVyY2VudGFnZSAvIDEwMDtcblxuICAgIHZhciBiZWdpbkRlZyA9IHAgKiAxMjA7XG4gICAgdmFyIGVuZERlZyA9IHAgKiA0MTA7XG4gICAgcmV0dXJuIFtiZWdpbkRlZywgZW5kRGVnXTtcbiAgfSxcblxuICBfZ2V0RmFjdG9yOiBmdW5jdGlvbiBfZ2V0RmFjdG9yKCkge1xuICAgIHZhciBwID0gdGhpcy5wcm9wcy5wZXJjZW50YWdlIC8gMTAwO1xuICAgIHZhciBwMSA9IE1hdGgubWluKDEsIHAgLyAwLjQpO1xuXG4gICAgcmV0dXJuIHAxO1xuICB9LFxuXG4gIF9nZXRSb290U3R5bGU6IGZ1bmN0aW9uIF9nZXRSb290U3R5bGUoKSB7XG4gICAgdmFyIHBhZGRpbmcgPSB0aGlzLl9nZXRQYWRkaW5nU2l6ZSgpO1xuICAgIHJldHVybiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHpJbmRleDogMixcbiAgICAgIHdpZHRoOiB0aGlzLnByb3BzLnNpemUsXG4gICAgICBoZWlnaHQ6IHRoaXMucHJvcHMuc2l6ZSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICB0b3A6IC0xMDAwMCxcbiAgICAgIGxlZnQ6IC0xMDAwMCxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKCcgKyAoMTAwMDAgKyB0aGlzLnByb3BzLmxlZnQpICsgJ3B4LCAnICsgKDEwMDAwICsgdGhpcy5wcm9wcy50b3ApICsgJ3B4LCAwKScsXG4gICAgICBvcGFjaXR5OiB0aGlzLnByb3BzLnN0YXR1cyA9PT0gJ2hpZGUnID8gMCA6IDEsXG4gICAgICB0cmFuc2l0aW9uOiB0aGlzLnByb3BzLnN0YXR1cyA9PT0gJ2hpZGUnID8gVHJhbnNpdGlvbnMuY3JlYXRlKCdhbGwnLCAnLjNzJywgJ2Vhc2Utb3V0JykgOiAnbm9uZSdcbiAgICB9O1xuICB9LFxuXG4gIF9nZXRDaXJjbGVTdHlsZTogZnVuY3Rpb24gX2dldENpcmNsZVN0eWxlKCkge1xuICAgIHZhciBpc0xvYWRpbmcgPSB0aGlzLnByb3BzLnN0YXR1cyA9PT0gJ2xvYWRpbmcnO1xuICAgIHZhciBwMSA9IGlzTG9hZGluZyA/IDEgOiB0aGlzLl9nZXRGYWN0b3IoKTtcbiAgICB2YXIgY2lyY2xlID0gdGhpcy5fZ2V0Q2lyY2xlQXR0cigpO1xuICAgIHZhciBwZXJpbWV0ZXIgPSBNYXRoLlBJICogMiAqIGNpcmNsZS5yYWRpdTtcblxuICAgIHZhciBfZ2V0QXJjRGVnMiA9IHRoaXMuX2dldEFyY0RlZygpO1xuXG4gICAgdmFyIF9nZXRBcmNEZWcyMiA9IF9zbGljZWRUb0FycmF5KF9nZXRBcmNEZWcyLCAyKTtcblxuICAgIHZhciBiZWdpbkRlZyA9IF9nZXRBcmNEZWcyMlswXTtcbiAgICB2YXIgZW5kRGVnID0gX2dldEFyY0RlZzIyWzFdO1xuXG4gICAgdmFyIGFyY0xlbiA9IChlbmREZWcgLSBiZWdpbkRlZykgKiBwZXJpbWV0ZXIgLyAzNjA7XG4gICAgdmFyIGRhc2hPZmZzZXQgPSAtYmVnaW5EZWcgKiBwZXJpbWV0ZXIgLyAzNjA7XG5cbiAgICB2YXIgdGhlbWUgPSB0aGlzLl9nZXRUaGVtZSgpO1xuICAgIHJldHVybiB7XG4gICAgICBzdHlsZToge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6IGFyY0xlbiArICcsICcgKyAocGVyaW1ldGVyIC0gYXJjTGVuKSxcbiAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogZGFzaE9mZnNldCxcbiAgICAgICAgc3Ryb2tlOiBpc0xvYWRpbmcgfHwgdGhpcy5wcm9wcy5wZXJjZW50YWdlID09PSAxMDAgPyB0aGVtZS5sb2FkaW5nU3Ryb2tlQ29sb3IgOiB0aGVtZS5zdHJva2VDb2xvcixcbiAgICAgICAgc3Ryb2tlTGluZWNhcDogJ3JvdW5kJyxcbiAgICAgICAgb3BhY2l0eTogcDEsXG4gICAgICAgIHN0cm9rZVdpZHRoOiBjaXJjbGUuc3Ryb2tlV2lkdGggKiBwMSxcbiAgICAgICAgZmlsbDogJ25vbmUnXG4gICAgICB9LFxuICAgICAgYXR0cjoge1xuICAgICAgICBjeDogY2lyY2xlLm9yaWdpblgsXG4gICAgICAgIGN5OiBjaXJjbGUub3JpZ2luWSxcbiAgICAgICAgcjogY2lyY2xlLnJhZGl1XG4gICAgICB9XG4gICAgfTtcbiAgfSxcblxuICBfZ2V0UG9seWdvblN0eWxlOiBmdW5jdGlvbiBfZ2V0UG9seWdvblN0eWxlKCkge1xuICAgIHZhciBwMSA9IHRoaXMuX2dldEZhY3RvcigpO1xuICAgIHZhciBjaXJjbGUgPSB0aGlzLl9nZXRDaXJjbGVBdHRyKCk7XG5cbiAgICB2YXIgdHJpYW5nbGVDeCA9IGNpcmNsZS5vcmlnaW5YICsgY2lyY2xlLnJhZGl1O1xuICAgIHZhciB0cmlhbmdsZUN5ID0gY2lyY2xlLm9yaWdpblk7XG4gICAgdmFyIGR4ID0gY2lyY2xlLnN0cm9rZVdpZHRoICogNyAvIDQgKiBwMTtcbiAgICB2YXIgdHJpYW5nbGVQYXRoID0gdHJpYW5nbGVDeCAtIGR4ICsgJywnICsgdHJpYW5nbGVDeSArICcgJyArICh0cmlhbmdsZUN4ICsgZHgpICsgJywnICsgdHJpYW5nbGVDeSArICcgJyArIHRyaWFuZ2xlQ3ggKyAnLCcgKyAodHJpYW5nbGVDeSArIGR4KTtcblxuICAgIHZhciBfZ2V0QXJjRGVnMyA9IHRoaXMuX2dldEFyY0RlZygpO1xuXG4gICAgdmFyIF9nZXRBcmNEZWczMiA9IF9zbGljZWRUb0FycmF5KF9nZXRBcmNEZWczLCAyKTtcblxuICAgIHZhciBlbmREZWcgPSBfZ2V0QXJjRGVnMzJbMV07XG5cbiAgICB2YXIgdGhlbWUgPSB0aGlzLl9nZXRUaGVtZSgpO1xuICAgIHJldHVybiB7XG4gICAgICBzdHlsZToge1xuICAgICAgICBmaWxsOiB0aGlzLnByb3BzLnBlcmNlbnRhZ2UgPT09IDEwMCA/IHRoZW1lLmxvYWRpbmdTdHJva2VDb2xvciA6IHRoZW1lLnN0cm9rZUNvbG9yLFxuICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoJyArIGVuZERlZyArICdkZWcpJyxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiBjaXJjbGUub3JpZ2luWCArICdweCAnICsgY2lyY2xlLm9yaWdpblkgKyAncHgnLFxuICAgICAgICBvcGFjaXR5OiBwMVxuICAgICAgfSxcbiAgICAgIGF0dHI6IHtcbiAgICAgICAgcG9pbnRzOiB0cmlhbmdsZVBhdGhcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuXG4gIF9zY2FsZVBhdGg6IGZ1bmN0aW9uIF9zY2FsZVBhdGgocGF0aCwgc3RlcCkge1xuICAgIGlmICh0aGlzLnByb3BzLnN0YXR1cyAhPT0gJ2xvYWRpbmcnIHx8ICF0aGlzLmlzTW91bnRlZCgpKSByZXR1cm47XG5cbiAgICB2YXIgY3VyclN0ZXAgPSAoc3RlcCB8fCAwKSAlIDM7XG5cbiAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIxKTtcbiAgICB0aGlzLl90aW1lcjEgPSBzZXRUaW1lb3V0KHRoaXMuX3NjYWxlUGF0aC5iaW5kKHRoaXMsIHBhdGgsIGN1cnJTdGVwICsgMSksIGN1cnJTdGVwID8gNzUwIDogMjUwKTtcblxuICAgIHZhciBjaXJjbGUgPSB0aGlzLl9nZXRDaXJjbGVBdHRyKCk7XG4gICAgdmFyIHBlcmltZXRlciA9IE1hdGguUEkgKiAyICogY2lyY2xlLnJhZGl1O1xuICAgIHZhciBhcmNMZW4gPSBwZXJpbWV0ZXIgKiAwLjY0O1xuXG4gICAgaWYgKGN1cnJTdGVwID09PSAwKSB7XG4gICAgICBwYXRoLnN0eWxlLnN0cm9rZURhc2hhcnJheSA9ICcxLCAyMDAnO1xuICAgICAgcGF0aC5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gMDtcbiAgICAgIHBhdGguc3R5bGVbdGhpcy5wcmVmaXhlZCgndHJhbnNpdGlvbkR1cmF0aW9uJyldID0gJzBtcyc7XG4gICAgfSBlbHNlIGlmIChjdXJyU3RlcCA9PT0gMSkge1xuICAgICAgcGF0aC5zdHlsZS5zdHJva2VEYXNoYXJyYXkgPSBhcmNMZW4gKyAnLCAyMDAnO1xuICAgICAgcGF0aC5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gLTE1O1xuICAgICAgcGF0aC5zdHlsZVt0aGlzLnByZWZpeGVkKCd0cmFuc2l0aW9uRHVyYXRpb24nKV0gPSAnNzUwbXMnO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoLnN0eWxlLnN0cm9rZURhc2hhcnJheSA9IGFyY0xlbiArICcsMjAwJztcbiAgICAgIHBhdGguc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IC0ocGVyaW1ldGVyIC0gMSk7XG4gICAgICBwYXRoLnN0eWxlW3RoaXMucHJlZml4ZWQoJ3RyYW5zaXRpb25EdXJhdGlvbicpXSA9ICc4NTBtcyc7XG4gICAgfVxuICB9LFxuXG4gIF9yb3RhdGVXcmFwcGVyOiBmdW5jdGlvbiBfcm90YXRlV3JhcHBlcih3cmFwcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0aGlzLnByb3BzLnN0YXR1cyAhPT0gJ2xvYWRpbmcnIHx8ICF0aGlzLmlzTW91bnRlZCgpKSByZXR1cm47XG5cbiAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIyKTtcbiAgICB0aGlzLl90aW1lcjIgPSBzZXRUaW1lb3V0KHRoaXMuX3JvdGF0ZVdyYXBwZXIuYmluZCh0aGlzLCB3cmFwcGVyKSwgMTAwNTApO1xuXG4gICAgQXV0b1ByZWZpeC5zZXQod3JhcHBlci5zdHlsZSwgJ3RyYW5zZm9ybScsIG51bGwpO1xuICAgIEF1dG9QcmVmaXguc2V0KHdyYXBwZXIuc3R5bGUsICd0cmFuc2Zvcm0nLCAncm90YXRlKDBkZWcpJyk7XG4gICAgQXV0b1ByZWZpeC5zZXQod3JhcHBlci5zdHlsZSwgJ3RyYW5zaXRpb25EdXJhdGlvbicsICcwbXMnKTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmlzTW91bnRlZCgpKSB7XG4gICAgICAgIEF1dG9QcmVmaXguc2V0KHdyYXBwZXIuc3R5bGUsICd0cmFuc2Zvcm0nLCAncm90YXRlKDE4MDBkZWcpJyk7XG4gICAgICAgIHdyYXBwZXIuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzEwcyc7XG4gICAgICAgIEF1dG9QcmVmaXguc2V0KHdyYXBwZXIuc3R5bGUsICd0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24nLCAnbGluZWFyJyk7XG4gICAgICB9XG4gICAgfSwgNTApO1xuICB9LFxuXG4gIHByZWZpeGVkOiBmdW5jdGlvbiBwcmVmaXhlZChrZXkpIHtcbiAgICByZXR1cm4gQXV0b1ByZWZpeC5zaW5nbGUoa2V5KTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWZyZXNoSW5kaWNhdG9yO1xufSx7XCIuL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi9wYXBlclwiOjU4LFwiLi9zdHlsZXMvYXV0by1wcmVmaXhcIjo3MCxcIi4vc3R5bGVzL3RyYW5zaXRpb25zXCI6NzcsXCJyZWFjdFwiOjMxOX1dLDYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBQdXJlUmVuZGVyTWl4aW4gPSBSZWFjdC5hZGRvbnMuUHVyZVJlbmRlck1peGluO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBBdXRvUHJlZml4ID0gcmVxdWlyZSgnLi4vc3R5bGVzL2F1dG8tcHJlZml4Jyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBDb2xvcnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvY29sb3JzJyk7XG5cbnZhciBDaXJjbGVSaXBwbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2lyY2xlUmlwcGxlJyxcblxuICBtaXhpbnM6IFtQdXJlUmVuZGVyTWl4aW4sIFN0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGNvbG9yOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9wYWNpdHk6IFJlYWN0LlByb3BUeXBlcy5udW1iZXJcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29sb3I6IENvbG9ycy5kYXJrQmxhY2ssXG4gICAgICBvcGFjaXR5OiAwLjE2XG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsQXBwZWFyOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsQXBwZWFyKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5faW5pdGlhbGl6ZUFuaW1hdGlvbihjYWxsYmFjayk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbEVudGVyOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsRW50ZXIoY2FsbGJhY2spIHtcbiAgICB0aGlzLl9pbml0aWFsaXplQW5pbWF0aW9uKGNhbGxiYWNrKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRBcHBlYXI6IGZ1bmN0aW9uIGNvbXBvbmVudERpZEFwcGVhcigpIHtcbiAgICB0aGlzLl9hbmltYXRlKCk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkRW50ZXI6IGZ1bmN0aW9uIGNvbXBvbmVudERpZEVudGVyKCkge1xuICAgIHRoaXMuX2FuaW1hdGUoKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsTGVhdmU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxMZWF2ZShjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgc3R5bGUgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKS5zdHlsZTtcbiAgICBzdHlsZS5vcGFjaXR5ID0gMDtcbiAgICBzZXRUaW1lb3V0KChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuaXNNb3VudGVkKCkpIGNhbGxiYWNrKCk7XG4gICAgfSkuYmluZCh0aGlzKSwgMjAwMCk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGNvbG9yID0gX3Byb3BzLmNvbG9yO1xuICAgIHZhciBvcGFjaXR5ID0gX3Byb3BzLm9wYWNpdHk7XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjb2xvcicsICdvcGFjaXR5JywgJ3N0eWxlJ10pO1xuXG4gICAgdmFyIG1lcmdlZFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoe1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXG4gICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCcycycsICdvcGFjaXR5JykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCcxcycsICd0cmFuc2Zvcm0nKVxuICAgIH0sIHN0eWxlKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCBfZXh0ZW5kcyh7fSwgb3RoZXIsIHsgc3R5bGU6IG1lcmdlZFN0eWxlcyB9KSk7XG4gIH0sXG5cbiAgX2FuaW1hdGU6IGZ1bmN0aW9uIF9hbmltYXRlKCkge1xuICAgIHZhciBzdHlsZSA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLnN0eWxlO1xuICAgIEF1dG9QcmVmaXguc2V0KHN0eWxlLCAndHJhbnNmb3JtJywgJ3NjYWxlKDEpJyk7XG4gIH0sXG5cbiAgX2luaXRpYWxpemVBbmltYXRpb246IGZ1bmN0aW9uIF9pbml0aWFsaXplQW5pbWF0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHN0eWxlID0gUmVhY3QuZmluZERPTU5vZGUodGhpcykuc3R5bGU7XG4gICAgc3R5bGUub3BhY2l0eSA9IHRoaXMucHJvcHMub3BhY2l0eTtcbiAgICBBdXRvUHJlZml4LnNldChzdHlsZSwgJ3RyYW5zZm9ybScsICdzY2FsZSgwKScpO1xuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENpcmNsZVJpcHBsZTtcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi9zdHlsZXMvYXV0by1wcmVmaXhcIjo3MCxcIi4uL3N0eWxlcy9jb2xvcnNcIjo3MSxcIi4uL3N0eWxlcy90cmFuc2l0aW9uc1wiOjc3LFwicmVhY3QvYWRkb25zXCI6MTQ3fV0sNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBQdXJlUmVuZGVyTWl4aW4gPSBSZWFjdC5hZGRvbnMuUHVyZVJlbmRlck1peGluO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBBdXRvUHJlZml4ID0gcmVxdWlyZSgnLi4vc3R5bGVzL2F1dG8tcHJlZml4Jyk7XG52YXIgQ29sb3JzID0gcmVxdWlyZSgnLi4vc3R5bGVzL2NvbG9ycycpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgU2NhbGVJblRyYW5zaXRpb25Hcm91cCA9IHJlcXVpcmUoJy4uL3RyYW5zaXRpb24tZ3JvdXBzL3NjYWxlLWluJyk7XG5cbnZhciBwdWxzYXRlRHVyYXRpb24gPSA3NTA7XG5cbnZhciBGb2N1c1JpcHBsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdGb2N1c1JpcHBsZScsXG5cbiAgbWl4aW5zOiBbUHVyZVJlbmRlck1peGluLCBTdHlsZVByb3BhYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpbm5lclN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG9wYWNpdHk6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgc2hvdzogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29sb3I6IENvbG9ycy5kYXJrQmxhY2tcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93KSB7XG4gICAgICB0aGlzLl9zZXRSaXBwbGVTaXplKCk7XG4gICAgICB0aGlzLl9wdWxzYXRlKCk7XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgIHRoaXMuX3NldFJpcHBsZVNpemUoKTtcbiAgICAgIHRoaXMuX3B1bHNhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuX3RpbWVvdXQpIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHNob3cgPSBfcHJvcHMuc2hvdztcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgbWVyZ2VkUm9vdFN0eWxlcyA9IHRoaXMubWVyZ2VTdHlsZXMoe1xuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwXG4gICAgfSwgc3R5bGUpO1xuXG4gICAgdmFyIHJpcHBsZSA9IHNob3cgPyB0aGlzLl9nZXRSaXBwbGVFbGVtZW50KHRoaXMucHJvcHMpIDogbnVsbDtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU2NhbGVJblRyYW5zaXRpb25Hcm91cCxcbiAgICAgIHtcbiAgICAgICAgbWF4U2NhbGU6IDAuODUsXG4gICAgICAgIHN0eWxlOiBtZXJnZWRSb290U3R5bGVzIH0sXG4gICAgICByaXBwbGVcbiAgICApO1xuICB9LFxuXG4gIF9nZXRSaXBwbGVFbGVtZW50OiBmdW5jdGlvbiBfZ2V0UmlwcGxlRWxlbWVudChwcm9wcykge1xuICAgIHZhciBjb2xvciA9IHByb3BzLmNvbG9yO1xuICAgIHZhciBpbm5lclN0eWxlID0gcHJvcHMuaW5uZXJTdHlsZTtcbiAgICB2YXIgb3BhY2l0eSA9IHByb3BzLm9wYWNpdHk7XG5cbiAgICB2YXIgaW5uZXJTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIG9wYWNpdHk6IG9wYWNpdHkgPyBvcGFjaXR5IDogMC4xNixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXG4gICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KHB1bHNhdGVEdXJhdGlvbiArICdtcycsICd0cmFuc2Zvcm0nLCBudWxsLCBUcmFuc2l0aW9ucy5lYXNlSW5PdXRGdW5jdGlvbilcbiAgICB9LCBpbm5lclN0eWxlKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHJlZjogJ2lubmVyQ2lyY2xlJywgc3R5bGU6IGlubmVyU3R5bGVzIH0pO1xuICB9LFxuXG4gIF9wdWxzYXRlOiBmdW5jdGlvbiBfcHVsc2F0ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNNb3VudGVkKCkpIHJldHVybjtcblxuICAgIHZhciBpbm5lckNpcmNsZSA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5pbm5lckNpcmNsZSk7XG4gICAgaWYgKCFpbm5lckNpcmNsZSkgcmV0dXJuO1xuXG4gICAgdmFyIHN0YXJ0U2NhbGUgPSAnc2NhbGUoMSknO1xuICAgIHZhciBlbmRTY2FsZSA9ICdzY2FsZSgwLjg1KSc7XG4gICAgdmFyIGN1cnJlbnRTY2FsZSA9IGlubmVyQ2lyY2xlLnN0eWxlW0F1dG9QcmVmaXguc2luZ2xlKCd0cmFuc2Zvcm0nKV07XG4gICAgdmFyIG5leHRTY2FsZSA9IHVuZGVmaW5lZDtcblxuICAgIGN1cnJlbnRTY2FsZSA9IGN1cnJlbnRTY2FsZSB8fCBzdGFydFNjYWxlO1xuICAgIG5leHRTY2FsZSA9IGN1cnJlbnRTY2FsZSA9PT0gc3RhcnRTY2FsZSA/IGVuZFNjYWxlIDogc3RhcnRTY2FsZTtcblxuICAgIGlubmVyQ2lyY2xlLnN0eWxlW0F1dG9QcmVmaXguc2luZ2xlKCd0cmFuc2Zvcm0nKV0gPSBuZXh0U2NhbGU7XG4gICAgdGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5fcHVsc2F0ZSwgcHVsc2F0ZUR1cmF0aW9uKTtcbiAgfSxcblxuICBfc2V0UmlwcGxlU2l6ZTogZnVuY3Rpb24gX3NldFJpcHBsZVNpemUoKSB7XG4gICAgdmFyIGVsID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLmlubmVyQ2lyY2xlKTtcbiAgICB2YXIgaGVpZ2h0ID0gZWwub2Zmc2V0SGVpZ2h0O1xuICAgIHZhciB3aWR0aCA9IGVsLm9mZnNldFdpZHRoO1xuICAgIHZhciBzaXplID0gTWF0aC5tYXgoaGVpZ2h0LCB3aWR0aCk7XG5cbiAgICBlbC5zdHlsZS5oZWlnaHQgPSBzaXplICsgJ3B4JztcbiAgICBlbC5zdHlsZS50b3AgPSBzaXplIC8gMiAqIC0xICsgaGVpZ2h0IC8gMiArICdweCc7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRm9jdXNSaXBwbGU7XG59LHtcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi4vc3R5bGVzL2F1dG8tcHJlZml4XCI6NzAsXCIuLi9zdHlsZXMvY29sb3JzXCI6NzEsXCIuLi9zdHlsZXMvdHJhbnNpdGlvbnNcIjo3NyxcIi4uL3RyYW5zaXRpb24tZ3JvdXBzL3NjYWxlLWluXCI6MTIxLFwicmVhY3QvYWRkb25zXCI6MTQ3fV0sNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ2lyY2xlUmlwcGxlOiByZXF1aXJlKCcuL2NpcmNsZS1yaXBwbGUnKSxcbiAgRm9jdXNSaXBwbGU6IHJlcXVpcmUoJy4vZm9jdXMtcmlwcGxlJyksXG4gIFRvdWNoUmlwcGxlOiByZXF1aXJlKCcuL3RvdWNoLXJpcHBsZScpXG59O1xufSx7XCIuL2NpcmNsZS1yaXBwbGVcIjo2MyxcIi4vZm9jdXMtcmlwcGxlXCI6NjQsXCIuL3RvdWNoLXJpcHBsZVwiOjY2fV0sNjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBQdXJlUmVuZGVyTWl4aW4gPSBSZWFjdC5hZGRvbnMuUHVyZVJlbmRlck1peGluO1xudmFyIFJlYWN0VHJhbnNpdGlvbkdyb3VwID0gUmVhY3QuYWRkb25zLlRyYW5zaXRpb25Hcm91cDtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgRG9tID0gcmVxdWlyZSgnLi4vdXRpbHMvZG9tJyk7XG52YXIgSW1tdXRhYmlsaXR5SGVscGVyID0gcmVxdWlyZSgnLi4vdXRpbHMvaW1tdXRhYmlsaXR5LWhlbHBlcicpO1xudmFyIENpcmNsZVJpcHBsZSA9IHJlcXVpcmUoJy4vY2lyY2xlLXJpcHBsZScpO1xuXG52YXIgVG91Y2hSaXBwbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVG91Y2hSaXBwbGUnLFxuXG4gIG1peGluczogW1B1cmVSZW5kZXJNaXhpbiwgU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY2VudGVyUmlwcGxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBjb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvcGFjaXR5OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vVGhpcyBwcm9wIGFsbG93cyB1cyB0byBvbmx5IHJlbmRlciB0aGUgUmVhY3RUcmFuc2l0aW9uR3JvdXBcbiAgICAgIC8vb24gdGhlIGZpcnN0IGNsaWNrIG9mIHRoZSBjb21wb25lbnQsIG1ha2luZyB0aGUgaW5pdGFsXG4gICAgICAvL3JlbmRlciBmYXN0ZXJcbiAgICAgIGhhc1JpcHBsZXM6IGZhbHNlLFxuICAgICAgbmV4dEtleTogMCxcbiAgICAgIHJpcHBsZXM6IFtdXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW47XG4gICAgdmFyIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHZhciBoYXNSaXBwbGVzID0gX3N0YXRlLmhhc1JpcHBsZXM7XG4gICAgdmFyIHJpcHBsZXMgPSBfc3RhdGUucmlwcGxlcztcblxuICAgIHZhciByaXBwbGVHcm91cCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaGFzUmlwcGxlcykge1xuICAgICAgdmFyIG1lcmdlZFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoe1xuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICB9LCBzdHlsZSk7XG5cbiAgICAgIHJpcHBsZUdyb3VwID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgUmVhY3RUcmFuc2l0aW9uR3JvdXAsXG4gICAgICAgIHsgc3R5bGU6IG1lcmdlZFN0eWxlcyB9LFxuICAgICAgICByaXBwbGVzXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7XG4gICAgICAgIG9uTW91c2VVcDogdGhpcy5faGFuZGxlTW91c2VVcCxcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMuX2hhbmRsZU1vdXNlRG93bixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLl9oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuX2hhbmRsZVRvdWNoU3RhcnQsXG4gICAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuX2hhbmRsZVRvdWNoRW5kIH0sXG4gICAgICByaXBwbGVHcm91cCxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBzdGFydDogZnVuY3Rpb24gc3RhcnQoZSwgaXNSaXBwbGVUb3VjaEdlbmVyYXRlZCkge1xuICAgIHZhciByaXBwbGVzID0gdGhpcy5zdGF0ZS5yaXBwbGVzO1xuXG4gICAgLy9EbyBub3RoaW5nIGlmIHdlJ3JlIHN0YXJ0aW5nIGEgY2xpY2stZXZlbnQtZ2VuZXJhdGVkIHJpcHBsZVxuICAgIC8vd2hpbGUgaGF2aW5nIHRvdWNoLWdlbmVyYXRlZCByaXBwbGVzXG4gICAgaWYgKCFpc1JpcHBsZVRvdWNoR2VuZXJhdGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJpcHBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJpcHBsZXNbaV0ucHJvcHMudG91Y2hHZW5lcmF0ZWQpIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL0FkZCBhIHJpcHBsZSB0byB0aGUgcmlwcGxlcyBhcnJheVxuICAgIHJpcHBsZXMgPSBJbW11dGFiaWxpdHlIZWxwZXIucHVzaChyaXBwbGVzLCBSZWFjdC5jcmVhdGVFbGVtZW50KENpcmNsZVJpcHBsZSwge1xuICAgICAga2V5OiB0aGlzLnN0YXRlLm5leHRLZXksXG4gICAgICBzdHlsZTogIXRoaXMucHJvcHMuY2VudGVyUmlwcGxlID8gdGhpcy5fZ2V0UmlwcGxlU3R5bGUoZSkgOiB7fSxcbiAgICAgIGNvbG9yOiB0aGlzLnByb3BzLmNvbG9yLFxuICAgICAgb3BhY2l0eTogdGhpcy5wcm9wcy5vcGFjaXR5LFxuICAgICAgdG91Y2hHZW5lcmF0ZWQ6IGlzUmlwcGxlVG91Y2hHZW5lcmF0ZWQgfSkpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBoYXNSaXBwbGVzOiB0cnVlLFxuICAgICAgbmV4dEtleTogdGhpcy5zdGF0ZS5uZXh0S2V5ICsgMSxcbiAgICAgIHJpcHBsZXM6IHJpcHBsZXNcbiAgICB9KTtcbiAgfSxcblxuICBlbmQ6IGZ1bmN0aW9uIGVuZCgpIHtcbiAgICB2YXIgY3VycmVudFJpcHBsZXMgPSB0aGlzLnN0YXRlLnJpcHBsZXM7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICByaXBwbGVzOiBJbW11dGFiaWxpdHlIZWxwZXIuc2hpZnQoY3VycmVudFJpcHBsZXMpXG4gICAgfSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlRG93bjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgLy9vbmx5IGxpc3RlbiB0byBsZWZ0IGNsaWNrc1xuICAgIGlmIChlLmJ1dHRvbiA9PT0gMCkgdGhpcy5zdGFydChlLCBmYWxzZSk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlVXA6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZVVwKCkge1xuICAgIHRoaXMuZW5kKCk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlTGVhdmU6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZUxlYXZlKCkge1xuICAgIHRoaXMuZW5kKCk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvdWNoU3RhcnQ6IGZ1bmN0aW9uIF9oYW5kbGVUb3VjaFN0YXJ0KGUpIHtcbiAgICB0aGlzLnN0YXJ0KGUsIHRydWUpO1xuICB9LFxuXG4gIF9oYW5kbGVUb3VjaEVuZDogZnVuY3Rpb24gX2hhbmRsZVRvdWNoRW5kKCkge1xuICAgIHRoaXMuZW5kKCk7XG4gIH0sXG5cbiAgX2dldFJpcHBsZVN0eWxlOiBmdW5jdGlvbiBfZ2V0UmlwcGxlU3R5bGUoZSkge1xuICAgIHZhciBzdHlsZSA9IHt9O1xuICAgIHZhciBlbCA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBlbEhlaWdodCA9IGVsLm9mZnNldEhlaWdodDtcbiAgICB2YXIgZWxXaWR0aCA9IGVsLm9mZnNldFdpZHRoO1xuICAgIHZhciBvZmZzZXQgPSBEb20ub2Zmc2V0KGVsKTtcbiAgICB2YXIgaXNUb3VjaEV2ZW50ID0gZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGg7XG4gICAgdmFyIHBhZ2VYID0gaXNUb3VjaEV2ZW50ID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICB2YXIgcGFnZVkgPSBpc1RvdWNoRXZlbnQgPyBlLnRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgIHZhciBwb2ludGVyWCA9IHBhZ2VYIC0gb2Zmc2V0LmxlZnQ7XG4gICAgdmFyIHBvaW50ZXJZID0gcGFnZVkgLSBvZmZzZXQudG9wO1xuICAgIHZhciB0b3BMZWZ0RGlhZyA9IHRoaXMuX2NhbGNEaWFnKHBvaW50ZXJYLCBwb2ludGVyWSk7XG4gICAgdmFyIHRvcFJpZ2h0RGlhZyA9IHRoaXMuX2NhbGNEaWFnKGVsV2lkdGggLSBwb2ludGVyWCwgcG9pbnRlclkpO1xuICAgIHZhciBib3RSaWdodERpYWcgPSB0aGlzLl9jYWxjRGlhZyhlbFdpZHRoIC0gcG9pbnRlclgsIGVsSGVpZ2h0IC0gcG9pbnRlclkpO1xuICAgIHZhciBib3RMZWZ0RGlhZyA9IHRoaXMuX2NhbGNEaWFnKHBvaW50ZXJYLCBlbEhlaWdodCAtIHBvaW50ZXJZKTtcbiAgICB2YXIgcmlwcGxlUmFkaXVzID0gTWF0aC5tYXgodG9wTGVmdERpYWcsIHRvcFJpZ2h0RGlhZywgYm90UmlnaHREaWFnLCBib3RMZWZ0RGlhZyk7XG4gICAgdmFyIHJpcHBsZVNpemUgPSByaXBwbGVSYWRpdXMgKiAyO1xuICAgIHZhciBsZWZ0ID0gcG9pbnRlclggLSByaXBwbGVSYWRpdXM7XG4gICAgdmFyIHRvcCA9IHBvaW50ZXJZIC0gcmlwcGxlUmFkaXVzO1xuXG4gICAgc3R5bGUuaGVpZ2h0ID0gcmlwcGxlU2l6ZSArICdweCc7XG4gICAgc3R5bGUud2lkdGggPSByaXBwbGVTaXplICsgJ3B4JztcbiAgICBzdHlsZS50b3AgPSB0b3AgKyAncHgnO1xuICAgIHN0eWxlLmxlZnQgPSBsZWZ0ICsgJ3B4JztcblxuICAgIHJldHVybiBzdHlsZTtcbiAgfSxcblxuICBfY2FsY0RpYWc6IGZ1bmN0aW9uIF9jYWxjRGlhZyhhLCBiKSB7XG4gICAgcmV0dXJuIE1hdGguc3FydChhICogYSArIGIgKiBiKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb3VjaFJpcHBsZTtcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi91dGlscy9kb21cIjoxMjgsXCIuLi91dGlscy9pbW11dGFiaWxpdHktaGVscGVyXCI6MTMxLFwiLi9jaXJjbGUtcmlwcGxlXCI6NjMsXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSw2NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUZXh0RmllbGQgPSByZXF1aXJlKCcuL3RleHQtZmllbGQnKTtcbnZhciBEcm9wRG93bk1lbnUgPSByZXF1aXJlKCcuL2Ryb3AtZG93bi1tZW51Jyk7XG5cbnZhciBTZWxlY3RGaWVsZCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdTZWxlY3RGaWVsZCcsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBlcnJvclRleHQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgZmxvYXRpbmdMYWJlbFRleHQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgc2VsZWN0RmllbGRSb290OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHVuZGVybGluZVN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGxhYmVsU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgZXJyb3JTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBoaW50VGV4dDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpZDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtdWx0aUxpbmU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIG9uQmx1cjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uRm9jdXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uS2V5RG93bjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25FbnRlcktleURvd246IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIHR5cGU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgcm93czogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICBpbnB1dFN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGljb25TdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBmbG9hdGluZ0xhYmVsU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgYXV0b1dpZHRoOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBtZW51SXRlbXM6IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICAgIG1lbnVJdGVtU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgc2VsZWN0ZWRJbmRleDogUmVhY3QuUHJvcFR5cGVzLm51bWJlclxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmdWxsV2lkdGg6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBoZWlnaHQ6IDQ2LFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgdG9wOiAxNixcbiAgICAgICAgZm9udFNpemU6IDE2XG4gICAgICB9LFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IDAsXG4gICAgICAgIHRvcDogNCxcbiAgICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgICAgfSxcbiAgICAgIGljb246IHtcbiAgICAgICAgdG9wOiAyMCxcbiAgICAgICAgcmlnaHQ6IDBcbiAgICAgIH0sXG4gICAgICB1bmRlcmxpbmU6IHtcbiAgICAgICAgYm9yZGVyVG9wOiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICBpbnB1dDoge30sXG4gICAgICBlcnJvcjoge31cbiAgICB9O1xuXG4gICAgaWYgKCF0aGlzLnByb3BzLmZsb2F0aW5nTGFiZWxUZXh0KSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5oaW50VGV4dCkge1xuICAgICAgICBzdHlsZXMucm9vdC50b3AgPSAtNTtcbiAgICAgICAgc3R5bGVzLmxhYmVsLnRvcCA9IDE7XG4gICAgICAgIHN0eWxlcy5pY29uLnRvcCA9IDE3O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGVzLnJvb3QudG9wID0gLTg7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlcy5lcnJvci5ib3R0b20gPSAtMTU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG4gICAgdmFyIGxhYmVsU3R5bGUgPSBfcHJvcHMubGFiZWxTdHlsZTtcbiAgICB2YXIgaWNvblN0eWxlID0gX3Byb3BzLmljb25TdHlsZTtcbiAgICB2YXIgdW5kZXJsaW5lU3R5bGUgPSBfcHJvcHMudW5kZXJsaW5lU3R5bGU7XG4gICAgdmFyIGVycm9yU3R5bGUgPSBfcHJvcHMuZXJyb3JTdHlsZTtcbiAgICB2YXIgc2VsZWN0RmllbGRSb290ID0gX3Byb3BzLnNlbGVjdEZpZWxkUm9vdDtcbiAgICB2YXIgbWVudUl0ZW1zID0gX3Byb3BzLm1lbnVJdGVtcztcbiAgICB2YXIgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQ7XG4gICAgdmFyIGZsb2F0aW5nTGFiZWxUZXh0ID0gX3Byb3BzLmZsb2F0aW5nTGFiZWxUZXh0O1xuICAgIHZhciBoaW50VGV4dCA9IF9wcm9wcy5oaW50VGV4dDtcbiAgICB2YXIgZnVsbFdpZHRoID0gX3Byb3BzLmZ1bGxXaWR0aDtcbiAgICB2YXIgZXJyb3JUZXh0ID0gX3Byb3BzLmVycm9yVGV4dDtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnc3R5bGUnLCAnbGFiZWxTdHlsZScsICdpY29uU3R5bGUnLCAndW5kZXJsaW5lU3R5bGUnLCAnZXJyb3JTdHlsZScsICdzZWxlY3RGaWVsZFJvb3QnLCAnbWVudUl0ZW1zJywgJ2Rpc2FibGVkJywgJ2Zsb2F0aW5nTGFiZWxUZXh0JywgJ2hpbnRUZXh0JywgJ2Z1bGxXaWR0aCcsICdlcnJvclRleHQnXSk7XG5cbiAgICB2YXIgdGV4dEZpZWxkUHJvcHMgPSB7XG4gICAgICBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaW5wdXQsIHN0eWxlKSxcbiAgICAgIGZsb2F0aW5nTGFiZWxUZXh0OiBmbG9hdGluZ0xhYmVsVGV4dCxcbiAgICAgIGhpbnRUZXh0OiAhaGludFRleHQgJiYgIWZsb2F0aW5nTGFiZWxUZXh0ID8gJyAnIDogaGludFRleHQsXG4gICAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICAgIGVycm9yVGV4dDogZXJyb3JUZXh0LFxuICAgICAgZXJyb3JTdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuZXJyb3IsIGVycm9yU3R5bGUpXG4gICAgfTtcbiAgICB2YXIgZHJvcERvd25NZW51UHJvcHMgPSB7XG4gICAgICBtZW51SXRlbXM6IG1lbnVJdGVtcyxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCBzZWxlY3RGaWVsZFJvb3QpLFxuICAgICAgbGFiZWxTdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubGFiZWwsIGxhYmVsU3R5bGUpLFxuICAgICAgaWNvblN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5pY29uLCBpY29uU3R5bGUpLFxuICAgICAgdW5kZXJsaW5lU3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnVuZGVybGluZSksXG4gICAgICBhdXRvV2lkdGg6IGZhbHNlXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGV4dEZpZWxkLFxuICAgICAgdGV4dEZpZWxkUHJvcHMsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3BEb3duTWVudSwgX2V4dGVuZHMoe30sIGRyb3BEb3duTWVudVByb3BzLCBvdGhlcikpXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0RmllbGQ7XG59LHtcIi4vZHJvcC1kb3duLW1lbnVcIjoyOCxcIi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL3RleHQtZmllbGRcIjoxMDIsXCJyZWFjdFwiOjMxOX1dLDY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIERyYWdnYWJsZSA9IHJlcXVpcmUoJ3JlYWN0LWRyYWdnYWJsZTInKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgRm9jdXNSaXBwbGUgPSByZXF1aXJlKCcuL3JpcHBsZXMvZm9jdXMtcmlwcGxlJyk7XG5cbi8qKlxuICAqIFZlcmlmaWVzIG1pbi9tYXggcmFuZ2UuXG4gICogQHBhcmFtICAge09iamVjdH0gcHJvcHMgICAgICAgICBQcm9wZXJ0aWVzIG9mIHRoZSBSZWFjdCBjb21wb25lbnQuXG4gICogQHBhcmFtICAge1N0cmluZ30gcHJvcE5hbWUgICAgICBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byB2YWxpZGF0ZS5cbiAgKiBAcGFyYW0gICB7U3RyaW5nfSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCB3aG9zZSBwcm9wZXJ0eSBpcyBiZWluZyB2YWxpZGF0ZWQuXG4gICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBFcnJvciBpZiBtaW4gPj0gbWF4IG90aGVyd2lzZSBudWxsLlxuICAqL1xudmFyIG1pbk1heFByb3BUeXBlID0gZnVuY3Rpb24gbWluTWF4UHJvcFR5cGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIHZhciBlcnJvciA9IFJlYWN0LlByb3BUeXBlcy5udW1iZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKTtcbiAgaWYgKGVycm9yICE9PSBudWxsKSByZXR1cm4gZXJyb3I7XG5cbiAgaWYgKHByb3BzLm1pbiA+PSBwcm9wcy5tYXgpIHtcbiAgICB2YXIgZXJyb3JNc2cgPSBwcm9wTmFtZSA9PT0gJ21pbicgPyAnbWluIHNob3VsZCBiZSBsZXNzIHRoYW4gbWF4JyA6ICdtYXggc2hvdWxkIGJlIGdyZWF0ZXIgdGhhbiBtaW4nO1xuICAgIHJldHVybiBuZXcgRXJyb3IoZXJyb3JNc2cpO1xuICB9XG59O1xuXG4vKipcbiAgKiBWZXJpZmllcyB2YWx1ZSBpcyB3aXRoaW4gdGhlIG1pbi9tYXggcmFuZ2UuXG4gICogQHBhcmFtICAge09iamVjdH0gcHJvcHMgICAgICAgICBQcm9wZXJ0aWVzIG9mIHRoZSBSZWFjdCBjb21wb25lbnQuXG4gICogQHBhcmFtICAge1N0cmluZ30gcHJvcE5hbWUgICAgICBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byB2YWxpZGF0ZS5cbiAgKiBAcGFyYW0gICB7U3RyaW5nfSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCB3aG9zZSBwcm9wZXJ0eSBpcyBiZWluZyB2YWxpZGF0ZWQuXG4gICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBFcnJvciBpZiB0aGUgdmFsdWUgaXMgbm90IHdpdGhpbiB0aGUgcmFuZ2Ugb3RoZXJ3aXNlIG51bGwuXG4gICovXG52YXIgdmFsdWVJblJhbmdlUHJvcFR5cGUgPSBmdW5jdGlvbiB2YWx1ZUluUmFuZ2VQcm9wVHlwZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgdmFyIGVycm9yID0gUmVhY3QuUHJvcFR5cGVzLm51bWJlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpO1xuICBpZiAoZXJyb3IgIT09IG51bGwpIHJldHVybiBlcnJvcjtcblxuICB2YXIgdmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gIGlmICh2YWx1ZSA8IHByb3BzLm1pbiB8fCBwcm9wcy5tYXggPCB2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IocHJvcE5hbWUgKyAnIHNob3VsZCBiZSB3aXRoaW4gdGhlIHJhbmdlIHNwZWNpZmllZCBieSBtaW4gYW5kIG1heCcpO1xuICB9XG59O1xuXG52YXIgU2xpZGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1NsaWRlcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBuYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgZGVmYXVsdFZhbHVlOiB2YWx1ZUluUmFuZ2VQcm9wVHlwZSxcbiAgICBkZXNjcmlwdGlvbjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkaXNhYmxlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZXJyb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgbWF4OiBtaW5NYXhQcm9wVHlwZSxcbiAgICBtaW46IG1pbk1heFByb3BUeXBlLFxuICAgIHJlcXVpcmVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzdGVwOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIG9uQmx1cjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uRHJhZ1N0YXJ0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkRyYWdTdG9wOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkZvY3VzOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICB2YWx1ZTogdmFsdWVJblJhbmdlUHJvcFR5cGVcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVmYXVsdFZhbHVlOiAwLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgbWF4OiAxLFxuICAgICAgbWluOiAwLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBzdGVwOiAwLjAxXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICB2YXIgcGVyY2VudCA9ICh2YWx1ZSAtIHRoaXMucHJvcHMubWluKSAvICh0aGlzLnByb3BzLm1heCAtIHRoaXMucHJvcHMubWluKTtcbiAgICBpZiAoaXNOYU4ocGVyY2VudCkpIHBlcmNlbnQgPSAwO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICBkcmFnZ2luZzogZmFsc2UsXG4gICAgICBmb2N1c2VkOiBmYWxzZSxcbiAgICAgIGhvdmVyZWQ6IGZhbHNlLFxuICAgICAgcGVyY2VudDogcGVyY2VudCxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc2V0VmFsdWUobmV4dFByb3BzLnZhbHVlKTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnNsaWRlcjtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc2l6ZSA9IHRoaXMuZ2V0VGhlbWUoKS5oYW5kbGVTaXplICsgdGhpcy5nZXRUaGVtZSgpLnRyYWNrU2l6ZTtcbiAgICB2YXIgZ3V0dGVyID0gKHRoaXMuZ2V0VGhlbWUoKS5oYW5kbGVTaXplRGlzYWJsZWQgKyB0aGlzLmdldFRoZW1lKCkudHJhY2tTaXplKSAvIDI7XG4gICAgdmFyIGZpbGxHdXR0ZXIgPSB0aGlzLmdldFRoZW1lKCkuaGFuZGxlU2l6ZURpc2FibGVkIC0gdGhpcy5nZXRUaGVtZSgpLnRyYWNrU2l6ZTtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICB0b3VjaENhbGxvdXQ6ICdub25lJyxcbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmdldFRoZW1lKCkuaGFuZGxlU2l6ZUFjdGl2ZSxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG1hcmdpblRvcDogMjQsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogNDhcbiAgICAgIH0sXG4gICAgICB0cmFjazoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAodGhpcy5nZXRUaGVtZSgpLmhhbmRsZVNpemVBY3RpdmUgLSB0aGlzLmdldFRoZW1lKCkudHJhY2tTaXplKSAvIDIsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogdGhpcy5nZXRUaGVtZSgpLnRyYWNrU2l6ZVxuICAgICAgfSxcbiAgICAgIGZpbGxlZEFuZFJlbWFpbmluZzoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dChudWxsLCAnbWFyZ2luJylcbiAgICAgIH0sXG4gICAgICBwZXJjZW50WmVyb1JlbWFpbmluZzoge1xuICAgICAgICBsZWZ0OiAxLFxuICAgICAgICBtYXJnaW5MZWZ0OiBndXR0ZXJcbiAgICAgIH0sXG4gICAgICBoYW5kbGU6IHtcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ2luaGVyaXQnLFxuICAgICAgICB0b3A6ICh0aGlzLmdldFRoZW1lKCkuaGFuZGxlU2l6ZUFjdGl2ZSAtIHRoaXMuZ2V0VGhlbWUoKS50cmFja1NpemUpIC8gMiArICdweCcsXG4gICAgICAgIGxlZnQ6ICcwJScsXG4gICAgICAgIHpJbmRleDogMSxcbiAgICAgICAgbWFyZ2luOiB0aGlzLmdldFRoZW1lKCkudHJhY2tTaXplIC8gMiArICdweCAwIDAgMCcsXG4gICAgICAgIHdpZHRoOiB0aGlzLmdldFRoZW1lKCkuaGFuZGxlU2l6ZSxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmdldFRoZW1lKCkuaGFuZGxlU2l6ZSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuc2VsZWN0aW9uQ29sb3IsXG4gICAgICAgIGJhY2tncm91bmRDbGlwOiAncGFkZGluZy1ib3gnLFxuICAgICAgICBib3JkZXI6ICcwcHggc29saWQgdHJhbnNwYXJlbnQnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgLTUwJSknLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0NTBtcycsICdib3JkZXInKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzQ1MG1zJywgJ3dpZHRoJykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0NTBtcycsICdoZWlnaHQnKSxcbiAgICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJ1xuICAgICAgfSxcbiAgICAgIGhhbmRsZVdoZW5EaXNhYmxlZDoge1xuICAgICAgICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gICAgICAgIGN1cnNvcjogJ25vdC1hbGxvd2VkJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkudHJhY2tDb2xvcixcbiAgICAgICAgd2lkdGg6IHRoaXMuZ2V0VGhlbWUoKS5oYW5kbGVTaXplRGlzYWJsZWQsXG4gICAgICAgIGhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmhhbmRsZVNpemVEaXNhYmxlZCxcbiAgICAgICAgYm9yZGVyOiAnMnB4IHNvbGlkIHdoaXRlJ1xuICAgICAgfSxcbiAgICAgIGhhbmRsZVdoZW5QZXJjZW50WmVybzoge1xuICAgICAgICBib3JkZXI6IHRoaXMuZ2V0VGhlbWUoKS50cmFja1NpemUgKyAncHggc29saWQgJyArIHRoaXMuZ2V0VGhlbWUoKS50cmFja0NvbG9yLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5oYW5kbGVGaWxsQ29sb3IsXG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9LFxuICAgICAgaGFuZGxlV2hlbkFjdGl2ZToge1xuICAgICAgICBib3JkZXJDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRyYWNrQ29sb3JTZWxlY3RlZCxcbiAgICAgICAgd2lkdGg6IHRoaXMuZ2V0VGhlbWUoKS5oYW5kbGVTaXplQWN0aXZlLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5oYW5kbGVTaXplQWN0aXZlLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0NTBtcycsICdiYWNrZ3JvdW5kQ29sb3InKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzQ1MG1zJywgJ3dpZHRoJykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0NTBtcycsICdoZWlnaHQnKVxuICAgICAgfSxcbiAgICAgIHJpcHBsZXM6IHtcbiAgICAgICAgaGVpZ2h0OiAnMzAwJScsXG4gICAgICAgIHdpZHRoOiAnMzAwJScsXG4gICAgICAgIHRvcDogJy0xMnB4JyxcbiAgICAgICAgbGVmdDogJy0xMnB4J1xuICAgICAgfSxcbiAgICAgIGhhbmRsZVdoZW5EaXNhYmxlZEFuZFplcm86IHtcbiAgICAgICAgd2lkdGg6IHNpemUgLyAyICsgJ3B4JyxcbiAgICAgICAgaGVpZ2h0OiBzaXplIC8gMiArICdweCdcbiAgICAgIH0sXG4gICAgICBoYW5kbGVXaGVuUGVyY2VudFplcm9BbmRIb3ZlcmVkOiB7XG4gICAgICAgIGJvcmRlcjogdGhpcy5nZXRUaGVtZSgpLnRyYWNrU2l6ZSArICdweCBzb2xpZCAnICsgdGhpcy5nZXRUaGVtZSgpLmhhbmRsZUNvbG9yWmVybyxcbiAgICAgICAgd2lkdGg6IHNpemUgKyAncHgnLFxuICAgICAgICBoZWlnaHQ6IHNpemUgKyAncHgnXG4gICAgICB9XG4gICAgfTtcbiAgICBzdHlsZXMuZmlsbGVkID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuZmlsbGVkQW5kUmVtYWluaW5nLCB7XG4gICAgICBsZWZ0OiAwLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLnByb3BzLmRpc2FibGVkID8gdGhpcy5nZXRUaGVtZSgpLnRyYWNrQ29sb3IgOiB0aGlzLmdldFRoZW1lKCkuc2VsZWN0aW9uQ29sb3IsXG4gICAgICBtYXJnaW5SaWdodDogZmlsbEd1dHRlcixcbiAgICAgIHdpZHRoOiB0aGlzLnN0YXRlLnBlcmNlbnQgKiAxMDAgKyAodGhpcy5wcm9wcy5kaXNhYmxlZCA/IC0xIDogMCkgKyAnJSdcbiAgICB9KTtcbiAgICBzdHlsZXMucmVtYWluaW5nID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuZmlsbGVkQW5kUmVtYWluaW5nLCB7XG4gICAgICByaWdodDogMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRyYWNrQ29sb3IsXG4gICAgICBtYXJnaW5MZWZ0OiBmaWxsR3V0dGVyLFxuICAgICAgd2lkdGg6ICgxIC0gdGhpcy5zdGF0ZS5wZXJjZW50KSAqIDEwMCArICh0aGlzLnByb3BzLmRpc2FibGVkID8gLTEgOiAwKSArICclJ1xuICAgIH0pO1xuXG4gICAgc3R5bGVzLnBlcmNlbnRaZXJvUmVtYWluaW5nLndpZHRoID0gc3R5bGVzLnJlbWFpbmluZy53aWR0aCAtIHN0eWxlcy5wZXJjZW50WmVyb1JlbWFpbmluZy5sZWZ0O1xuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgb3RoZXJzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHRoaXMucHJvcHMsIFtdKTtcblxuICAgIHZhciBwZXJjZW50ID0gdGhpcy5zdGF0ZS5wZXJjZW50O1xuICAgIGlmIChwZXJjZW50ID4gMSkgcGVyY2VudCA9IDE7ZWxzZSBpZiAocGVyY2VudCA8IDApIHBlcmNlbnQgPSAwO1xuICAgIHZhciBndXR0ZXIgPSAodGhpcy5nZXRUaGVtZSgpLmhhbmRsZVNpemVEaXNhYmxlZCArIHRoaXMuZ2V0VGhlbWUoKS50cmFja1NpemUpIC8gMjtcbiAgICB2YXIgZmlsbEd1dHRlciA9IHRoaXMuZ2V0VGhlbWUoKS5oYW5kbGVTaXplRGlzYWJsZWQgLSB0aGlzLmdldFRoZW1lKCkudHJhY2tTaXplO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgdmFyIHNsaWRlclN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUpO1xuICAgIHZhciB0cmFja1N0eWxlcyA9IHN0eWxlcy50cmFjaztcbiAgICB2YXIgZmlsbGVkU3R5bGVzID0gc3R5bGVzLmZpbGxlZDtcbiAgICB2YXIgcmVtYWluaW5nU3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucmVtYWluaW5nLCBwZXJjZW50ID09PSAwICYmIHN0eWxlcy5wZXJjZW50WmVyb1JlbWFpbmluZyk7XG4gICAgdmFyIGhhbmRsZVN0eWxlcyA9IHBlcmNlbnQgPT09IDAgPyB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5oYW5kbGUsIHN0eWxlcy5oYW5kbGVXaGVuUGVyY2VudFplcm8sIHRoaXMuc3RhdGUuYWN0aXZlICYmIHN0eWxlcy5oYW5kbGVXaGVuQWN0aXZlLCB0aGlzLnN0YXRlLmZvY3VzZWQgJiYgeyBvdXRsaW5lOiAnbm9uZScgfSwgdGhpcy5zdGF0ZS5ob3ZlcmVkICYmIHN0eWxlcy5oYW5kbGVXaGVuUGVyY2VudFplcm9BbmRIb3ZlcmVkLCB0aGlzLnByb3BzLmRpc2FibGVkICYmIHN0eWxlcy5oYW5kbGVXaGVuRGlzYWJsZWRBbmRaZXJvKSA6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmhhbmRsZSwgdGhpcy5zdGF0ZS5hY3RpdmUgJiYgc3R5bGVzLmhhbmRsZVdoZW5BY3RpdmUsIHRoaXMuc3RhdGUuZm9jdXNlZCAmJiB7IG91dGxpbmU6ICdub25lJyB9LCB0aGlzLnByb3BzLmRpc2FibGVkICYmIHN0eWxlcy5oYW5kbGVXaGVuRGlzYWJsZWQpO1xuXG4gICAgdmFyIHJpcHBsZVN0eWxlID0geyBoZWlnaHQ6ICcxMnB4Jywgd2lkdGg6ICcxMnB4JyB9O1xuXG4gICAgaWYgKCh0aGlzLnN0YXRlLmhvdmVyZWQgfHwgdGhpcy5zdGF0ZS5mb2N1c2VkKSAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgcmVtYWluaW5nU3R5bGVzLmJhY2tncm91bmRDb2xvciA9IHRoaXMuZ2V0VGhlbWUoKS50cmFja0NvbG9yU2VsZWN0ZWQ7XG4gICAgfVxuXG4gICAgaWYgKHBlcmNlbnQgPT09IDApIGZpbGxlZFN0eWxlcy5tYXJnaW5SaWdodCA9IGd1dHRlcjtcbiAgICBpZiAodGhpcy5zdGF0ZS5wZXJjZW50ID09PSAwICYmIHRoaXMuc3RhdGUuYWN0aXZlKSByZW1haW5pbmdTdHlsZXMubWFyZ2luTGVmdCA9IGZpbGxHdXR0ZXI7XG5cbiAgICB2YXIgcmlwcGxlU2hvd0NvbmRpdGlvbiA9ICh0aGlzLnN0YXRlLmhvdmVyZWQgfHwgdGhpcy5zdGF0ZS5mb2N1c2VkKSAmJiAhdGhpcy5zdGF0ZS5hY3RpdmUgJiYgdGhpcy5zdGF0ZS5wZXJjZW50ICE9PSAwO1xuICAgIHZhciByaXBwbGVDb2xvciA9IHRoaXMuc3RhdGUucGVyY2VudCA9PT0gMCA/IHRoaXMuZ2V0VGhlbWUoKS5oYW5kbGVDb2xvclplcm8gOiB0aGlzLmdldFRoZW1lKCkucmlwcGxlQ29sb3I7XG4gICAgdmFyIGZvY3VzUmlwcGxlID0gdW5kZWZpbmVkO1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGUpIHtcbiAgICAgIGZvY3VzUmlwcGxlID0gUmVhY3QuY3JlYXRlRWxlbWVudChGb2N1c1JpcHBsZSwge1xuICAgICAgICByZWY6ICdmb2N1c1JpcHBsZScsXG4gICAgICAgIGtleTogJ2ZvY3VzUmlwcGxlJyxcbiAgICAgICAgc3R5bGU6IHJpcHBsZVN0eWxlLFxuICAgICAgICBpbm5lclN0eWxlOiBzdHlsZXMucmlwcGxlcyxcbiAgICAgICAgc2hvdzogcmlwcGxlU2hvd0NvbmRpdGlvbixcbiAgICAgICAgY29sb3I6IHJpcHBsZUNvbG9yIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXJzLCB7IHN0eWxlOiB0aGlzLnByb3BzLnN0eWxlIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnbXVpLWlucHV0LWhpZ2hsaWdodCcgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6ICdtdWktaW5wdXQtYmFyJyB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdtdWktaW5wdXQtZGVzY3JpcHRpb24nIH0sXG4gICAgICAgIHRoaXMucHJvcHMuZGVzY3JpcHRpb25cbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3BhbicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnbXVpLWlucHV0LWVycm9yJyB9LFxuICAgICAgICB0aGlzLnByb3BzLmVycm9yXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHNsaWRlclN0eWxlcyxcbiAgICAgICAgICBvbkZvY3VzOiB0aGlzLl9vbkZvY3VzLFxuICAgICAgICAgIG9uQmx1cjogdGhpcy5fb25CbHVyLFxuICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLl9vbk1vdXNlRG93bixcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuX29uTW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuX29uTW91c2VMZWF2ZSxcbiAgICAgICAgICBvbk1vdXNlVXA6IHRoaXMuX29uTW91c2VVcCB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgcmVmOiAndHJhY2snLCBzdHlsZTogdHJhY2tTdHlsZXMgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBmaWxsZWRTdHlsZXMgfSksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogcmVtYWluaW5nU3R5bGVzIH0pLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBEcmFnZ2FibGUsXG4gICAgICAgICAgICB7IGF4aXM6ICd4JywgYm91bmQ6ICdwb2ludCcsXG4gICAgICAgICAgICAgIGNhbmNlbDogdGhpcy5wcm9wcy5kaXNhYmxlZCA/ICcqJyA6IG51bGwsXG4gICAgICAgICAgICAgIHN0YXJ0OiB7IHg6IHBlcmNlbnQgKiAxMDAgKyAnJScgfSxcbiAgICAgICAgICAgICAgY29uc3RyYWluOiB0aGlzLl9jb25zdHJhaW4oKSxcbiAgICAgICAgICAgICAgb25TdGFydDogdGhpcy5fb25EcmFnU3RhcnQsXG4gICAgICAgICAgICAgIG9uU3RvcDogdGhpcy5fb25EcmFnU3RvcCxcbiAgICAgICAgICAgICAgb25EcmFnOiB0aGlzLl9vbkRyYWdVcGRhdGUsXG4gICAgICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLl9vbk1vdXNlRG93bktub2IgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICB7IHN0eWxlOiBoYW5kbGVTdHlsZXMsIHRhYkluZGV4OiAwIH0sXG4gICAgICAgICAgICAgIGZvY3VzUmlwcGxlXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHJlZjogJ2lucHV0JywgdHlwZTogJ2hpZGRlbicsXG4gICAgICAgIG5hbWU6IHRoaXMucHJvcHMubmFtZSxcbiAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUudmFsdWUsXG4gICAgICAgIHJlcXVpcmVkOiB0aGlzLnByb3BzLnJlcXVpcmVkLFxuICAgICAgICBtaW46IHRoaXMucHJvcHMubWluLFxuICAgICAgICBtYXg6IHRoaXMucHJvcHMubWF4LFxuICAgICAgICBzdGVwOiB0aGlzLnByb3BzLnN0ZXAgfSlcbiAgICApO1xuICB9LFxuXG4gIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS52YWx1ZTtcbiAgfSxcblxuICBzZXRWYWx1ZTogZnVuY3Rpb24gc2V0VmFsdWUoaSkge1xuICAgIC8vIGNhbGN1bGF0ZSBwZXJjZW50YWdlXG4gICAgdmFyIHBlcmNlbnQgPSAoaSAtIHRoaXMucHJvcHMubWluKSAvICh0aGlzLnByb3BzLm1heCAtIHRoaXMucHJvcHMubWluKTtcbiAgICBpZiAoaXNOYU4ocGVyY2VudCkpIHBlcmNlbnQgPSAwO1xuICAgIC8vIHVwZGF0ZSBzdGF0ZVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdmFsdWU6IGksXG4gICAgICBwZXJjZW50OiBwZXJjZW50XG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0UGVyY2VudDogZnVuY3Rpb24gZ2V0UGVyY2VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5wZXJjZW50O1xuICB9LFxuXG4gIHNldFBlcmNlbnQ6IGZ1bmN0aW9uIHNldFBlcmNlbnQocGVyY2VudCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuX2FsaWduVmFsdWUodGhpcy5fcGVyY2VudFRvVmFsdWUocGVyY2VudCkpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogdmFsdWUsIHBlcmNlbnQ6IHBlcmNlbnQgfSk7XG4gIH0sXG5cbiAgY2xlYXJWYWx1ZTogZnVuY3Rpb24gY2xlYXJWYWx1ZSgpIHtcbiAgICB0aGlzLnNldFZhbHVlKHRoaXMucHJvcHMubWluKTtcbiAgfSxcblxuICBfYWxpZ25WYWx1ZTogZnVuY3Rpb24gX2FsaWduVmFsdWUodmFsKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHN0ZXAgPSBfcHJvcHMuc3RlcDtcbiAgICB2YXIgbWluID0gX3Byb3BzLm1pbjtcblxuICAgIHZhciB2YWxNb2RTdGVwID0gKHZhbCAtIG1pbikgJSBzdGVwO1xuICAgIHZhciBhbGlnblZhbHVlID0gdmFsIC0gdmFsTW9kU3RlcDtcblxuICAgIGlmIChNYXRoLmFicyh2YWxNb2RTdGVwKSAqIDIgPj0gc3RlcCkge1xuICAgICAgYWxpZ25WYWx1ZSArPSB2YWxNb2RTdGVwID4gMCA/IHN0ZXAgOiAtc3RlcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VGbG9hdChhbGlnblZhbHVlLnRvRml4ZWQoNSkpO1xuICB9LFxuXG4gIF9jb25zdHJhaW46IGZ1bmN0aW9uIF9jb25zdHJhaW4oKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcztcbiAgICB2YXIgbWluID0gX3Byb3BzMi5taW47XG4gICAgdmFyIG1heCA9IF9wcm9wczIubWF4O1xuICAgIHZhciBzdGVwID0gX3Byb3BzMi5zdGVwO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgIHZhciBwaXhlbE1heCA9IFJlYWN0LmZpbmRET01Ob2RlKF90aGlzLnJlZnMudHJhY2spLmNsaWVudFdpZHRoO1xuICAgICAgdmFyIHBpeGVsU3RlcCA9IHBpeGVsTWF4IC8gKChtYXggLSBtaW4pIC8gc3RlcCk7XG5cbiAgICAgIHZhciBjdXJzb3IgPSBtaW47XG4gICAgICB2YXIgaSA9IHVuZGVmaW5lZDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCAobWF4IC0gbWluKSAvIHN0ZXA7IGkrKykge1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBwb3MubGVmdCAtIGN1cnNvcjtcbiAgICAgICAgdmFyIG5leHREaXN0YW5jZSA9IGN1cnNvciArIHBpeGVsU3RlcCAtIHBvcy5sZWZ0O1xuICAgICAgICBpZiAoTWF0aC5hYnMoZGlzdGFuY2UpID4gTWF0aC5hYnMobmV4dERpc3RhbmNlKSkge1xuICAgICAgICAgIGN1cnNvciArPSBwaXhlbFN0ZXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogY3Vyc29yXG4gICAgICB9O1xuICAgIH07XG4gIH0sXG5cbiAgX29uRm9jdXM6IGZ1bmN0aW9uIF9vbkZvY3VzKGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZm9jdXNlZDogdHJ1ZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkZvY3VzKSB0aGlzLnByb3BzLm9uRm9jdXMoZSk7XG4gIH0sXG5cbiAgX29uQmx1cjogZnVuY3Rpb24gX29uQmx1cihlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGZvY3VzZWQ6IGZhbHNlLCBhY3RpdmU6IGZhbHNlIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uQmx1cikgdGhpcy5wcm9wcy5vbkJsdXIoZSk7XG4gIH0sXG5cbiAgX29uTW91c2VEb3duOiBmdW5jdGlvbiBfb25Nb3VzZURvd24oZSkge1xuICAgIHRoaXMuX3BvcyA9IGUuY2xpZW50WDtcbiAgfSxcblxuICBfb25Nb3VzZUVudGVyOiBmdW5jdGlvbiBfb25Nb3VzZUVudGVyKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pO1xuICB9LFxuXG4gIF9vbk1vdXNlTGVhdmU6IGZ1bmN0aW9uIF9vbk1vdXNlTGVhdmUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pO1xuICB9LFxuXG4gIF9vbk1vdXNlVXA6IGZ1bmN0aW9uIF9vbk1vdXNlVXAoZSkge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCkgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZTogZmFsc2UgfSk7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmRyYWdnaW5nICYmIE1hdGguYWJzKHRoaXMuX3BvcyAtIGUuY2xpZW50WCkgPCA1KSB7XG4gICAgICB2YXIgcG9zID0gZS5jbGllbnRYIC0gUmVhY3QuZmluZERPTU5vZGUodGhpcykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICAgIHRoaXMuX2RyYWdYKGUsIHBvcyk7XG4gICAgfVxuXG4gICAgdGhpcy5fcG9zID0gdW5kZWZpbmVkO1xuICB9LFxuXG4gIF9vbk1vdXNlRG93bktub2I6IGZ1bmN0aW9uIF9vbk1vdXNlRG93bktub2IoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVkKSB0aGlzLnNldFN0YXRlKHsgYWN0aXZlOiB0cnVlIH0pO1xuICB9LFxuXG4gIF9vbkRyYWdTdGFydDogZnVuY3Rpb24gX29uRHJhZ1N0YXJ0KGUsIHVpKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkcmFnZ2luZzogdHJ1ZSxcbiAgICAgIGFjdGl2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLm9uRHJhZ1N0YXJ0KSB0aGlzLnByb3BzLm9uRHJhZ1N0YXJ0KGUsIHVpKTtcbiAgfSxcblxuICBfb25EcmFnU3RvcDogZnVuY3Rpb24gX29uRHJhZ1N0b3AoZSwgdWkpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICAgIGFjdGl2ZTogZmFsc2VcbiAgICB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkRyYWdTdG9wKSB0aGlzLnByb3BzLm9uRHJhZ1N0b3AoZSwgdWkpO1xuICB9LFxuXG4gIF9vbkRyYWdVcGRhdGU6IGZ1bmN0aW9uIF9vbkRyYWdVcGRhdGUoZSwgdWkpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuZHJhZ2dpbmcpIHJldHVybjtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQpIHRoaXMuX2RyYWdYKGUsIHVpLnBvc2l0aW9uLmxlZnQpO1xuICB9LFxuXG4gIF9kcmFnWDogZnVuY3Rpb24gX2RyYWdYKGUsIHBvcykge1xuICAgIHZhciBtYXggPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMudHJhY2spLmNsaWVudFdpZHRoO1xuICAgIGlmIChwb3MgPCAwKSBwb3MgPSAwO2Vsc2UgaWYgKHBvcyA+IG1heCkgcG9zID0gbWF4O1xuICAgIGlmIChwb3MgPT09IHRoaXMucHJvcHMubWluKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdXBkYXRlV2l0aENoYW5nZUV2ZW50KGUsIDApO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVXaXRoQ2hhbmdlRXZlbnQoZSwgcG9zIC8gbWF4KTtcbiAgfSxcblxuICBfdXBkYXRlV2l0aENoYW5nZUV2ZW50OiBmdW5jdGlvbiBfdXBkYXRlV2l0aENoYW5nZUV2ZW50KGUsIHBlcmNlbnQpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5wZXJjZW50ID09PSBwZXJjZW50KSByZXR1cm47XG4gICAgdGhpcy5zZXRQZXJjZW50KHBlcmNlbnQpO1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuX2FsaWduVmFsdWUodGhpcy5fcGVyY2VudFRvVmFsdWUocGVyY2VudCkpO1xuICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlKSB0aGlzLnByb3BzLm9uQ2hhbmdlKGUsIHZhbHVlKTtcbiAgfSxcblxuICBfcGVyY2VudFRvVmFsdWU6IGZ1bmN0aW9uIF9wZXJjZW50VG9WYWx1ZShwZXJjZW50KSB7XG4gICAgcmV0dXJuIHBlcmNlbnQgKiAodGhpcy5wcm9wcy5tYXggLSB0aGlzLnByb3BzLm1pbikgKyB0aGlzLnByb3BzLm1pbjtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTbGlkZXI7XG59LHtcIi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL3JpcHBsZXMvZm9jdXMtcmlwcGxlXCI6NjQsXCIuL3N0eWxlcy90cmFuc2l0aW9uc1wiOjc3LFwicmVhY3RcIjozMTksXCJyZWFjdC1kcmFnZ2FibGUyXCI6MTQwfV0sNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgQ3NzRXZlbnQgPSByZXF1aXJlKCcuL3V0aWxzL2Nzcy1ldmVudCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBDbGlja0F3YXlhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvY2xpY2stYXdheWFibGUnKTtcbnZhciBGbGF0QnV0dG9uID0gcmVxdWlyZSgnLi9mbGF0LWJ1dHRvbicpO1xuXG52YXIgU25hY2tiYXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnU25hY2tiYXInLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGUsIENsaWNrQXdheWFibGVdLFxuXG4gIG1hbnVhbGx5QmluZENsaWNrQXdheTogdHJ1ZSxcblxuICAvLyBJRCBvZiB0aGUgYWN0aXZlIHRpbWVyLlxuICBfYXV0b0hpZGVUaW1lcklkOiB1bmRlZmluZWQsXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBtZXNzYWdlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYWN0aW9uOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGF1dG9IaWRlRHVyYXRpb246IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgb25BY3Rpb25Ub3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb3Blbk9uTW91bnQ6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZW46IHRoaXMucHJvcHMub3Blbk9uTW91bnQgfHwgZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vcGVuT25Nb3VudCkge1xuICAgICAgdGhpcy5fc2V0QXV0b0hpZGVUaW1lcigpO1xuICAgICAgdGhpcy5fYmluZENsaWNrQXdheSgpO1xuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRDbGlja0F3YXk6IGZ1bmN0aW9uIGNvbXBvbmVudENsaWNrQXdheSgpIHtcbiAgICB0aGlzLmRpc21pc3MoKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAocHJldlN0YXRlLm9wZW4gIT09IHRoaXMuc3RhdGUub3Blbikge1xuICAgICAgaWYgKHRoaXMuc3RhdGUub3Blbikge1xuICAgICAgICB0aGlzLl9zZXRBdXRvSGlkZVRpbWVyKCk7XG5cbiAgICAgICAgLy9Pbmx5IEJpbmQgY2xpY2thd2F5IGFmdGVyIHRyYW5zaXRpb24gZmluaXNoZXNcbiAgICAgICAgQ3NzRXZlbnQub25UcmFuc2l0aW9uRW5kKFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuX2JpbmRDbGlja0F3YXkoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl91bmJpbmRDbGlja0F3YXkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX2NsZWFyQXV0b0hpZGVUaW1lcigpO1xuICAgIHRoaXMuX3VuYmluZENsaWNrQXdheSgpO1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC5zbmFja2JhcjtcbiAgfSxcblxuICBnZXRTcGFjaW5nOiBmdW5jdGlvbiBnZXRTcGFjaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZztcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBjb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRleHRDb2xvcixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgICAgIHBhZGRpbmc6ICcwcHggJyArIHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXIgKyAncHgnLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BTdWJoZWFkZXJIZWlnaHQsXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BTdWJoZWFkZXJIZWlnaHQgKyAncHgnLFxuICAgICAgICBtaW5XaWR0aDogMjg4LFxuICAgICAgICBtYXhXaWR0aDogNTY4LFxuXG4gICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICB6SW5kZXg6IDEwLFxuICAgICAgICBib3R0b206IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXIsXG4gICAgICAgIG1hcmdpbkxlZnQ6IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXIsXG5cbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIDIwcHgsIDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnMG1zJywgJ2xlZnQnLCAnNDAwbXMnKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzQwMG1zJywgJ29wYWNpdHknKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzQwMG1zJywgJ3RyYW5zZm9ybScpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDAwbXMnLCAndmlzaWJpbGl0eScpXG4gICAgICB9LFxuICAgICAgYWN0aW9uOiB7XG4gICAgICAgIGNvbG9yOiB0aGlzLmdldFRoZW1lKCkuYWN0aW9uQ29sb3IsXG4gICAgICAgIGZsb2F0OiAncmlnaHQnLFxuICAgICAgICBtYXJnaW5Ub3A6IDYsXG4gICAgICAgIG1hcmdpblJpZ2h0OiAtMTYsXG4gICAgICAgIG1hcmdpbkxlZnQ6IHRoaXMuZ2V0U3BhY2luZygpLmRlc2t0b3BHdXR0ZXIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuT3Blbjoge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB2aXNpYmlsaXR5OiAndmlzaWJsZScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnMG1zJywgJ2xlZnQnLCAnMG1zJykgKyAnLCcgKyBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0MDBtcycsICdvcGFjaXR5JywgJzBtcycpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDAwbXMnLCAndHJhbnNmb3JtJywgJzBtcycpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDAwbXMnLCAndmlzaWJpbGl0eScsICcwbXMnKVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBhY3Rpb24gPSBfcHJvcHMuYWN0aW9uO1xuICAgIHZhciBtZXNzYWdlID0gX3Byb3BzLm1lc3NhZ2U7XG4gICAgdmFyIG9uQWN0aW9uVG91Y2hUYXAgPSBfcHJvcHMub25BY3Rpb25Ub3VjaFRhcDtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXJzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydhY3Rpb24nLCAnbWVzc2FnZScsICdvbkFjdGlvblRvdWNoVGFwJywgJ3N0eWxlJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICB2YXIgcm9vdFN0eWxlcyA9IHRoaXMuc3RhdGUub3BlbiA/IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLnJvb3QsIHN0eWxlcy5yb290V2hlbk9wZW4sIHN0eWxlKSA6IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLnJvb3QsIHN0eWxlKTtcblxuICAgIHZhciBhY3Rpb25CdXR0b24gPSB1bmRlZmluZWQ7XG4gICAgaWYgKGFjdGlvbikge1xuICAgICAgYWN0aW9uQnV0dG9uID0gUmVhY3QuY3JlYXRlRWxlbWVudChGbGF0QnV0dG9uLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZXMuYWN0aW9uLFxuICAgICAgICBsYWJlbDogYWN0aW9uLFxuICAgICAgICBvblRvdWNoVGFwOiBvbkFjdGlvblRvdWNoVGFwIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3NwYW4nLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVycywgeyBzdHlsZTogcm9vdFN0eWxlcyB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbWVzc2FnZVxuICAgICAgKSxcbiAgICAgIGFjdGlvbkJ1dHRvblxuICAgICk7XG4gIH0sXG5cbiAgc2hvdzogZnVuY3Rpb24gc2hvdygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogdHJ1ZSB9KTtcbiAgfSxcblxuICBkaXNtaXNzOiBmdW5jdGlvbiBkaXNtaXNzKCkge1xuICAgIHRoaXMuX2NsZWFyQXV0b0hpZGVUaW1lcigpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiBmYWxzZSB9KTtcbiAgfSxcblxuICBfY2xlYXJBdXRvSGlkZVRpbWVyOiBmdW5jdGlvbiBfY2xlYXJBdXRvSGlkZVRpbWVyKCkge1xuICAgIGlmICh0aGlzLl9hdXRvSGlkZVRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fYXV0b0hpZGVUaW1lcklkID0gY2xlYXJUaW1lb3V0KHRoaXMuX2F1dG9IaWRlVGltZXJJZCk7XG4gICAgfVxuICB9LFxuXG4gIF9zZXRBdXRvSGlkZVRpbWVyOiBmdW5jdGlvbiBfc2V0QXV0b0hpZGVUaW1lcigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGlmICh0aGlzLnByb3BzLmF1dG9IaWRlRHVyYXRpb24gPiAwKSB7XG4gICAgICB0aGlzLl9jbGVhckF1dG9IaWRlVGltZXIoKTtcbiAgICAgIHRoaXMuX2F1dG9IaWRlVGltZXJJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuZGlzbWlzcygpO1xuICAgICAgfSwgdGhpcy5wcm9wcy5hdXRvSGlkZUR1cmF0aW9uKTtcbiAgICB9XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU25hY2tiYXI7XG59LHtcIi4vZmxhdC1idXR0b25cIjozMixcIi4vbWl4aW5zL2NsaWNrLWF3YXlhYmxlXCI6NTEsXCIuL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi9zdHlsZXMvdHJhbnNpdGlvbnNcIjo3NyxcIi4vdXRpbHMvY3NzLWV2ZW50XCI6MTI2LFwicmVhY3RcIjozMTl9XSw3MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBNb2Rlcm5penIgPSBpc0Jyb3dzZXIgPyByZXF1aXJlKCcuLi91dGlscy9tb2Rlcm5penIuY3VzdG9tJykgOiB1bmRlZmluZWQ7XG5cbi8vS2VlcCB0cmFjayBvZiBhbHJlYWR5IHByZWZpeGVkIGtleXMgc28gd2UgY2FuIHNraXAgTW9kZXJuaXpyIHByZWZpeGluZ1xudmFyIHByZWZpeGVkS2V5cyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBhbGw6IGZ1bmN0aW9uIGFsbChzdHlsZXMpIHtcbiAgICB2YXIgcHJlZml4ZWRTdHlsZSA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBzdHlsZXMpIHtcbiAgICAgIHByZWZpeGVkU3R5bGVbdGhpcy5zaW5nbGUoa2V5KV0gPSBzdHlsZXNba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHByZWZpeGVkU3R5bGU7XG4gIH0sXG5cbiAgc2V0OiBmdW5jdGlvbiBzZXQoc3R5bGUsIGtleSwgdmFsdWUpIHtcbiAgICBzdHlsZVt0aGlzLnNpbmdsZShrZXkpXSA9IHZhbHVlO1xuICB9LFxuXG4gIHNpbmdsZTogZnVuY3Rpb24gc2luZ2xlKGtleSkge1xuXG4gICAgLy9JZiBhIGJyb3dzZXIgZG9lc24ndCBleGlzdCwgd2UgY2FuJ3QgcHJlZml4IHdpdGggTW9kZXJuaXpyIHNvXG4gICAgLy9qdXN0IHJldHVybiB0aGUga2V5XG4gICAgaWYgKCFpc0Jyb3dzZXIpIHJldHVybiBrZXk7XG5cbiAgICAvL0NoZWNrIGlmIHdlJ3ZlIHByZWZpeGVkIHRoaXMga2V5IGJlZm9yZSwganVzdCByZXR1cm4gaXRcbiAgICBpZiAocHJlZml4ZWRLZXlzLmhhc093blByb3BlcnR5KGtleSkpIHJldHVybiBwcmVmaXhlZEtleXNba2V5XTtcblxuICAgIC8vS2V5IGhhc24ndCBiZWVuIHByZWZpeGVkIHlldCwgcHJlZml4IHdpdGggTW9kZXJuaXpyXG4gICAgdmFyIHByZWZLZXkgPSBNb2Rlcm5penIucHJlZml4ZWQoa2V5KTtcblxuICAgIC8vIFdpbmRvd3MgNyBGaXJlZm94IGhhcyBhbiBpc3N1ZSB3aXRoIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBNb2Rlcm5penIucHJlZml4ZWRcbiAgICAvLyBhbmQgaXMgY2FwdHVyaW5nICdmYWxzZScgYXMgdGhlIENTUyBwcm9wZXJ0eSBuYW1lIGluc3RlYWQgb2YgdGhlIG5vbi1wcmVmaXhlZCB2ZXJzaW9uLlxuICAgIGlmIChwcmVmS2V5ID09PSBmYWxzZSkgcmV0dXJuIGtleTtcblxuICAgIC8vU2F2ZSB0aGUga2V5IG9mZiBmb3IgdGhlIGZ1dHVyZSBhbmQgcmV0dXJuIHRoZSBwcmVmaXhlZCBrZXlcbiAgICBwcmVmaXhlZEtleXNba2V5XSA9IHByZWZLZXk7XG4gICAgcmV0dXJuIHByZWZLZXk7XG4gIH0sXG5cbiAgc2luZ2xlSHlwaGVuZWQ6IGZ1bmN0aW9uIHNpbmdsZUh5cGhlbmVkKGtleSkge1xuICAgIHZhciBzdHIgPSB0aGlzLnNpbmdsZShrZXkpO1xuXG4gICAgcmV0dXJuICFzdHIgPyBrZXkgOiBzdHIucmVwbGFjZSgvKFtBLVpdKS9nLCBmdW5jdGlvbiAoc3RyLCBtMSkge1xuICAgICAgcmV0dXJuICctJyArIG0xLnRvTG93ZXJDYXNlKCk7XG4gICAgfSkucmVwbGFjZSgvXm1zLS8sICctbXMtJyk7XG4gIH1cblxufTtcbn0se1wiLi4vdXRpbHMvbW9kZXJuaXpyLmN1c3RvbVwiOjEzNX1dLDcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIFRvIGluY2x1ZGUgdGhpcyBmaWxlIGluIHlvdXIgcHJvamVjdDpcbi8vIGxldCBtdWkgPSByZXF1aXJlKCdtdWknKTtcbi8vIGxldCBDb2xvcnMgPSBtdWkuU3R5bGVzLkNvbG9ycztcblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICByZWQ1MDogJyNmZmViZWUnLFxuICByZWQxMDA6ICcjZmZjZGQyJyxcbiAgcmVkMjAwOiAnI2VmOWE5YScsXG4gIHJlZDMwMDogJyNlNTczNzMnLFxuICByZWQ0MDA6ICcjZWY1MzUwJyxcbiAgcmVkNTAwOiAnI2Y0NDMzNicsXG4gIHJlZDYwMDogJyNlNTM5MzUnLFxuICByZWQ3MDA6ICcjZDMyZjJmJyxcbiAgcmVkODAwOiAnI2M2MjgyOCcsXG4gIHJlZDkwMDogJyNiNzFjMWMnLFxuICByZWRBMTAwOiAnI2ZmOGE4MCcsXG4gIHJlZEEyMDA6ICcjZmY1MjUyJyxcbiAgcmVkQTQwMDogJyNmZjE3NDQnLFxuICByZWRBNzAwOiAnI2Q1MDAwMCcsXG5cbiAgcGluazUwOiAnI2ZjZTRlYycsXG4gIHBpbmsxMDA6ICcjZjhiYmQwJyxcbiAgcGluazIwMDogJyNmNDhmYjEnLFxuICBwaW5rMzAwOiAnI2YwNjI5MicsXG4gIHBpbms0MDA6ICcjZWM0MDdhJyxcbiAgcGluazUwMDogJyNlOTFlNjMnLFxuICBwaW5rNjAwOiAnI2Q4MWI2MCcsXG4gIHBpbms3MDA6ICcjYzIxODViJyxcbiAgcGluazgwMDogJyNhZDE0NTcnLFxuICBwaW5rOTAwOiAnIzg4MGU0ZicsXG4gIHBpbmtBMTAwOiAnI2ZmODBhYicsXG4gIHBpbmtBMjAwOiAnI2ZmNDA4MScsXG4gIHBpbmtBNDAwOiAnI2Y1MDA1NycsXG4gIHBpbmtBNzAwOiAnI2M1MTE2MicsXG5cbiAgcHVycGxlNTA6ICcjZjNlNWY1JyxcbiAgcHVycGxlMTAwOiAnI2UxYmVlNycsXG4gIHB1cnBsZTIwMDogJyNjZTkzZDgnLFxuICBwdXJwbGUzMDA6ICcjYmE2OGM4JyxcbiAgcHVycGxlNDAwOiAnI2FiNDdiYycsXG4gIHB1cnBsZTUwMDogJyM5YzI3YjAnLFxuICBwdXJwbGU2MDA6ICcjOGUyNGFhJyxcbiAgcHVycGxlNzAwOiAnIzdiMWZhMicsXG4gIHB1cnBsZTgwMDogJyM2YTFiOWEnLFxuICBwdXJwbGU5MDA6ICcjNGExNDhjJyxcbiAgcHVycGxlQTEwMDogJyNlYTgwZmMnLFxuICBwdXJwbGVBMjAwOiAnI2UwNDBmYicsXG4gIHB1cnBsZUE0MDA6ICcjZDUwMGY5JyxcbiAgcHVycGxlQTcwMDogJyNhYTAwZmYnLFxuXG4gIGRlZXBQdXJwbGU1MDogJyNlZGU3ZjYnLFxuICBkZWVwUHVycGxlMTAwOiAnI2QxYzRlOScsXG4gIGRlZXBQdXJwbGUyMDA6ICcjYjM5ZGRiJyxcbiAgZGVlcFB1cnBsZTMwMDogJyM5NTc1Y2QnLFxuICBkZWVwUHVycGxlNDAwOiAnIzdlNTdjMicsXG4gIGRlZXBQdXJwbGU1MDA6ICcjNjczYWI3JyxcbiAgZGVlcFB1cnBsZTYwMDogJyM1ZTM1YjEnLFxuICBkZWVwUHVycGxlNzAwOiAnIzUxMmRhOCcsXG4gIGRlZXBQdXJwbGU4MDA6ICcjNDUyN2EwJyxcbiAgZGVlcFB1cnBsZTkwMDogJyMzMTFiOTInLFxuICBkZWVwUHVycGxlQTEwMDogJyNiMzg4ZmYnLFxuICBkZWVwUHVycGxlQTIwMDogJyM3YzRkZmYnLFxuICBkZWVwUHVycGxlQTQwMDogJyM2NTFmZmYnLFxuICBkZWVwUHVycGxlQTcwMDogJyM2MjAwZWEnLFxuXG4gIGluZGlnbzUwOiAnI2U4ZWFmNicsXG4gIGluZGlnbzEwMDogJyNjNWNhZTknLFxuICBpbmRpZ28yMDA6ICcjOWZhOGRhJyxcbiAgaW5kaWdvMzAwOiAnIzc5ODZjYicsXG4gIGluZGlnbzQwMDogJyM1YzZiYzAnLFxuICBpbmRpZ281MDA6ICcjM2Y1MWI1JyxcbiAgaW5kaWdvNjAwOiAnIzM5NDlhYicsXG4gIGluZGlnbzcwMDogJyMzMDNmOWYnLFxuICBpbmRpZ284MDA6ICcjMjgzNTkzJyxcbiAgaW5kaWdvOTAwOiAnIzFhMjM3ZScsXG4gIGluZGlnb0ExMDA6ICcjOGM5ZWZmJyxcbiAgaW5kaWdvQTIwMDogJyM1MzZkZmUnLFxuICBpbmRpZ29BNDAwOiAnIzNkNWFmZScsXG4gIGluZGlnb0E3MDA6ICcjMzA0ZmZlJyxcblxuICBibHVlNTA6ICcjZTNmMmZkJyxcbiAgYmx1ZTEwMDogJyNiYmRlZmInLFxuICBibHVlMjAwOiAnIzkwY2FmOScsXG4gIGJsdWUzMDA6ICcjNjRiNWY2JyxcbiAgYmx1ZTQwMDogJyM0MmE1ZjUnLFxuICBibHVlNTAwOiAnIzIxOTZmMycsXG4gIGJsdWU2MDA6ICcjMWU4OGU1JyxcbiAgYmx1ZTcwMDogJyMxOTc2ZDInLFxuICBibHVlODAwOiAnIzE1NjVjMCcsXG4gIGJsdWU5MDA6ICcjMGQ0N2ExJyxcbiAgYmx1ZUExMDA6ICcjODJiMWZmJyxcbiAgYmx1ZUEyMDA6ICcjNDQ4YWZmJyxcbiAgYmx1ZUE0MDA6ICcjMjk3OWZmJyxcbiAgYmx1ZUE3MDA6ICcjMjk2MmZmJyxcblxuICBsaWdodEJsdWU1MDogJyNlMWY1ZmUnLFxuICBsaWdodEJsdWUxMDA6ICcjYjNlNWZjJyxcbiAgbGlnaHRCbHVlMjAwOiAnIzgxZDRmYScsXG4gIGxpZ2h0Qmx1ZTMwMDogJyM0ZmMzZjcnLFxuICBsaWdodEJsdWU0MDA6ICcjMjliNmY2JyxcbiAgbGlnaHRCbHVlNTAwOiAnIzAzYTlmNCcsXG4gIGxpZ2h0Qmx1ZTYwMDogJyMwMzliZTUnLFxuICBsaWdodEJsdWU3MDA6ICcjMDI4OGQxJyxcbiAgbGlnaHRCbHVlODAwOiAnIzAyNzdiZCcsXG4gIGxpZ2h0Qmx1ZTkwMDogJyMwMTU3OWInLFxuICBsaWdodEJsdWVBMTAwOiAnIzgwZDhmZicsXG4gIGxpZ2h0Qmx1ZUEyMDA6ICcjNDBjNGZmJyxcbiAgbGlnaHRCbHVlQTQwMDogJyMwMGIwZmYnLFxuICBsaWdodEJsdWVBNzAwOiAnIzAwOTFlYScsXG5cbiAgY3lhbjUwOiAnI2UwZjdmYScsXG4gIGN5YW4xMDA6ICcjYjJlYmYyJyxcbiAgY3lhbjIwMDogJyM4MGRlZWEnLFxuICBjeWFuMzAwOiAnIzRkZDBlMScsXG4gIGN5YW40MDA6ICcjMjZjNmRhJyxcbiAgY3lhbjUwMDogJyMwMGJjZDQnLFxuICBjeWFuNjAwOiAnIzAwYWNjMScsXG4gIGN5YW43MDA6ICcjMDA5N2E3JyxcbiAgY3lhbjgwMDogJyMwMDgzOGYnLFxuICBjeWFuOTAwOiAnIzAwNjA2NCcsXG4gIGN5YW5BMTAwOiAnIzg0ZmZmZicsXG4gIGN5YW5BMjAwOiAnIzE4ZmZmZicsXG4gIGN5YW5BNDAwOiAnIzAwZTVmZicsXG4gIGN5YW5BNzAwOiAnIzAwYjhkNCcsXG5cbiAgdGVhbDUwOiAnI2UwZjJmMScsXG4gIHRlYWwxMDA6ICcjYjJkZmRiJyxcbiAgdGVhbDIwMDogJyM4MGNiYzQnLFxuICB0ZWFsMzAwOiAnIzRkYjZhYycsXG4gIHRlYWw0MDA6ICcjMjZhNjlhJyxcbiAgdGVhbDUwMDogJyMwMDk2ODgnLFxuICB0ZWFsNjAwOiAnIzAwODk3YicsXG4gIHRlYWw3MDA6ICcjMDA3OTZiJyxcbiAgdGVhbDgwMDogJyMwMDY5NWMnLFxuICB0ZWFsOTAwOiAnIzAwNGQ0MCcsXG4gIHRlYWxBMTAwOiAnI2E3ZmZlYicsXG4gIHRlYWxBMjAwOiAnIzY0ZmZkYScsXG4gIHRlYWxBNDAwOiAnIzFkZTliNicsXG4gIHRlYWxBNzAwOiAnIzAwYmZhNScsXG5cbiAgZ3JlZW41MDogJyNlOGY1ZTknLFxuICBncmVlbjEwMDogJyNjOGU2YzknLFxuICBncmVlbjIwMDogJyNhNWQ2YTcnLFxuICBncmVlbjMwMDogJyM4MWM3ODQnLFxuICBncmVlbjQwMDogJyM2NmJiNmEnLFxuICBncmVlbjUwMDogJyM0Y2FmNTAnLFxuICBncmVlbjYwMDogJyM0M2EwNDcnLFxuICBncmVlbjcwMDogJyMzODhlM2MnLFxuICBncmVlbjgwMDogJyMyZTdkMzInLFxuICBncmVlbjkwMDogJyMxYjVlMjAnLFxuICBncmVlbkExMDA6ICcjYjlmNmNhJyxcbiAgZ3JlZW5BMjAwOiAnIzY5ZjBhZScsXG4gIGdyZWVuQTQwMDogJyMwMGU2NzYnLFxuICBncmVlbkE3MDA6ICcjMDBjODUzJyxcblxuICBsaWdodEdyZWVuNTA6ICcjZjFmOGU5JyxcbiAgbGlnaHRHcmVlbjEwMDogJyNkY2VkYzgnLFxuICBsaWdodEdyZWVuMjAwOiAnI2M1ZTFhNScsXG4gIGxpZ2h0R3JlZW4zMDA6ICcjYWVkNTgxJyxcbiAgbGlnaHRHcmVlbjQwMDogJyM5Y2NjNjUnLFxuICBsaWdodEdyZWVuNTAwOiAnIzhiYzM0YScsXG4gIGxpZ2h0R3JlZW42MDA6ICcjN2NiMzQyJyxcbiAgbGlnaHRHcmVlbjcwMDogJyM2ODlmMzgnLFxuICBsaWdodEdyZWVuODAwOiAnIzU1OGIyZicsXG4gIGxpZ2h0R3JlZW45MDA6ICcjMzM2OTFlJyxcbiAgbGlnaHRHcmVlbkExMDA6ICcjY2NmZjkwJyxcbiAgbGlnaHRHcmVlbkEyMDA6ICcjYjJmZjU5JyxcbiAgbGlnaHRHcmVlbkE0MDA6ICcjNzZmZjAzJyxcbiAgbGlnaHRHcmVlbkE3MDA6ICcjNjRkZDE3JyxcblxuICBsaW1lNTA6ICcjZjlmYmU3JyxcbiAgbGltZTEwMDogJyNmMGY0YzMnLFxuICBsaW1lMjAwOiAnI2U2ZWU5YycsXG4gIGxpbWUzMDA6ICcjZGNlNzc1JyxcbiAgbGltZTQwMDogJyNkNGUxNTcnLFxuICBsaW1lNTAwOiAnI2NkZGMzOScsXG4gIGxpbWU2MDA6ICcjYzBjYTMzJyxcbiAgbGltZTcwMDogJyNhZmI0MmInLFxuICBsaW1lODAwOiAnIzllOWQyNCcsXG4gIGxpbWU5MDA6ICcjODI3NzE3JyxcbiAgbGltZUExMDA6ICcjZjRmZjgxJyxcbiAgbGltZUEyMDA6ICcjZWVmZjQxJyxcbiAgbGltZUE0MDA6ICcjYzZmZjAwJyxcbiAgbGltZUE3MDA6ICcjYWVlYTAwJyxcblxuICB5ZWxsb3c1MDogJyNmZmZkZTcnLFxuICB5ZWxsb3cxMDA6ICcjZmZmOWM0JyxcbiAgeWVsbG93MjAwOiAnI2ZmZjU5ZCcsXG4gIHllbGxvdzMwMDogJyNmZmYxNzYnLFxuICB5ZWxsb3c0MDA6ICcjZmZlZTU4JyxcbiAgeWVsbG93NTAwOiAnI2ZmZWIzYicsXG4gIHllbGxvdzYwMDogJyNmZGQ4MzUnLFxuICB5ZWxsb3c3MDA6ICcjZmJjMDJkJyxcbiAgeWVsbG93ODAwOiAnI2Y5YTgyNScsXG4gIHllbGxvdzkwMDogJyNmNTdmMTcnLFxuICB5ZWxsb3dBMTAwOiAnI2ZmZmY4ZCcsXG4gIHllbGxvd0EyMDA6ICcjZmZmZjAwJyxcbiAgeWVsbG93QTQwMDogJyNmZmVhMDAnLFxuICB5ZWxsb3dBNzAwOiAnI2ZmZDYwMCcsXG5cbiAgYW1iZXI1MDogJyNmZmY4ZTEnLFxuICBhbWJlcjEwMDogJyNmZmVjYjMnLFxuICBhbWJlcjIwMDogJyNmZmUwODInLFxuICBhbWJlcjMwMDogJyNmZmQ1NGYnLFxuICBhbWJlcjQwMDogJyNmZmNhMjgnLFxuICBhbWJlcjUwMDogJyNmZmMxMDcnLFxuICBhbWJlcjYwMDogJyNmZmIzMDAnLFxuICBhbWJlcjcwMDogJyNmZmEwMDAnLFxuICBhbWJlcjgwMDogJyNmZjhmMDAnLFxuICBhbWJlcjkwMDogJyNmZjZmMDAnLFxuICBhbWJlckExMDA6ICcjZmZlNTdmJyxcbiAgYW1iZXJBMjAwOiAnI2ZmZDc0MCcsXG4gIGFtYmVyQTQwMDogJyNmZmM0MDAnLFxuICBhbWJlckE3MDA6ICcjZmZhYjAwJyxcblxuICBvcmFuZ2U1MDogJyNmZmYzZTAnLFxuICBvcmFuZ2UxMDA6ICcjZmZlMGIyJyxcbiAgb3JhbmdlMjAwOiAnI2ZmY2M4MCcsXG4gIG9yYW5nZTMwMDogJyNmZmI3NGQnLFxuICBvcmFuZ2U0MDA6ICcjZmZhNzI2JyxcbiAgb3JhbmdlNTAwOiAnI2ZmOTgwMCcsXG4gIG9yYW5nZTYwMDogJyNmYjhjMDAnLFxuICBvcmFuZ2U3MDA6ICcjZjU3YzAwJyxcbiAgb3JhbmdlODAwOiAnI2VmNmMwMCcsXG4gIG9yYW5nZTkwMDogJyNlNjUxMDAnLFxuICBvcmFuZ2VBMTAwOiAnI2ZmZDE4MCcsXG4gIG9yYW5nZUEyMDA6ICcjZmZhYjQwJyxcbiAgb3JhbmdlQTQwMDogJyNmZjkxMDAnLFxuICBvcmFuZ2VBNzAwOiAnI2ZmNmQwMCcsXG5cbiAgZGVlcE9yYW5nZTUwOiAnI2ZiZTllNycsXG4gIGRlZXBPcmFuZ2UxMDA6ICcjZmZjY2JjJyxcbiAgZGVlcE9yYW5nZTIwMDogJyNmZmFiOTEnLFxuICBkZWVwT3JhbmdlMzAwOiAnI2ZmOGE2NScsXG4gIGRlZXBPcmFuZ2U0MDA6ICcjZmY3MDQzJyxcbiAgZGVlcE9yYW5nZTUwMDogJyNmZjU3MjInLFxuICBkZWVwT3JhbmdlNjAwOiAnI2Y0NTExZScsXG4gIGRlZXBPcmFuZ2U3MDA6ICcjZTY0YTE5JyxcbiAgZGVlcE9yYW5nZTgwMDogJyNkODQzMTUnLFxuICBkZWVwT3JhbmdlOTAwOiAnI2JmMzYwYycsXG4gIGRlZXBPcmFuZ2VBMTAwOiAnI2ZmOWU4MCcsXG4gIGRlZXBPcmFuZ2VBMjAwOiAnI2ZmNmU0MCcsXG4gIGRlZXBPcmFuZ2VBNDAwOiAnI2ZmM2QwMCcsXG4gIGRlZXBPcmFuZ2VBNzAwOiAnI2RkMmMwMCcsXG5cbiAgYnJvd241MDogJyNlZmViZTknLFxuICBicm93bjEwMDogJyNkN2NjYzgnLFxuICBicm93bjIwMDogJyNiY2FhYTQnLFxuICBicm93bjMwMDogJyNhMTg4N2YnLFxuICBicm93bjQwMDogJyM4ZDZlNjMnLFxuICBicm93bjUwMDogJyM3OTU1NDgnLFxuICBicm93bjYwMDogJyM2ZDRjNDEnLFxuICBicm93bjcwMDogJyM1ZDQwMzcnLFxuICBicm93bjgwMDogJyM0ZTM0MmUnLFxuICBicm93bjkwMDogJyMzZTI3MjMnLFxuXG4gIGJsdWVHcmV5NTA6ICcjZWNlZmYxJyxcbiAgYmx1ZUdyZXkxMDA6ICcjY2ZkOGRjJyxcbiAgYmx1ZUdyZXkyMDA6ICcjYjBiZWM1JyxcbiAgYmx1ZUdyZXkzMDA6ICcjOTBhNGFlJyxcbiAgYmx1ZUdyZXk0MDA6ICcjNzg5MDljJyxcbiAgYmx1ZUdyZXk1MDA6ICcjNjA3ZDhiJyxcbiAgYmx1ZUdyZXk2MDA6ICcjNTQ2ZTdhJyxcbiAgYmx1ZUdyZXk3MDA6ICcjNDU1YTY0JyxcbiAgYmx1ZUdyZXk4MDA6ICcjMzc0NzRmJyxcbiAgYmx1ZUdyZXk5MDA6ICcjMjYzMjM4JyxcblxuICBncmV5NTA6ICcjZmFmYWZhJyxcbiAgZ3JleTEwMDogJyNmNWY1ZjUnLFxuICBncmV5MjAwOiAnI2VlZWVlZScsXG4gIGdyZXkzMDA6ICcjZTBlMGUwJyxcbiAgZ3JleTQwMDogJyNiZGJkYmQnLFxuICBncmV5NTAwOiAnIzllOWU5ZScsXG4gIGdyZXk2MDA6ICcjNzU3NTc1JyxcbiAgZ3JleTcwMDogJyM2MTYxNjEnLFxuICBncmV5ODAwOiAnIzQyNDI0MicsXG4gIGdyZXk5MDA6ICcjMjEyMTIxJyxcblxuICBibGFjazogJyMwMDAwMDAnLFxuICB3aGl0ZTogJyNmZmZmZmYnLFxuXG4gIHRyYW5zcGFyZW50OiAncmdiYSgwLCAwLCAwLCAwKScsXG4gIGZ1bGxCbGFjazogJ3JnYmEoMCwgMCwgMCwgMSknLFxuICBkYXJrQmxhY2s6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgbGlnaHRCbGFjazogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICBtaW5CbGFjazogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICBmYWludEJsYWNrOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIGZ1bGxXaGl0ZTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxuICBkYXJrV2hpdGU6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuODcpJyxcbiAgbGlnaHRXaGl0ZTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41NCknXG5cbn07XG59LHt9XSw3MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBdXRvUHJlZml4OiByZXF1aXJlKCcuL2F1dG8tcHJlZml4JyksXG4gIENvbG9yczogcmVxdWlyZSgnLi9jb2xvcnMnKSxcbiAgU3BhY2luZzogcmVxdWlyZSgnLi9zcGFjaW5nJyksXG4gIFRoZW1lTWFuYWdlcjogcmVxdWlyZSgnLi90aGVtZS1tYW5hZ2VyJyksXG4gIFRyYW5zaXRpb25zOiByZXF1aXJlKCcuL3RyYW5zaXRpb25zJyksXG4gIFR5cG9ncmFwaHk6IHJlcXVpcmUoJy4vdHlwb2dyYXBoeScpXG59O1xufSx7XCIuL2F1dG8tcHJlZml4XCI6NzAsXCIuL2NvbG9yc1wiOjcxLFwiLi9zcGFjaW5nXCI6NzMsXCIuL3RoZW1lLW1hbmFnZXJcIjo3NCxcIi4vdHJhbnNpdGlvbnNcIjo3NyxcIi4vdHlwb2dyYXBoeVwiOjc4fV0sNzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpY29uU2l6ZTogMjQsXG5cbiAgZGVza3RvcEd1dHRlcjogMjQsXG4gIGRlc2t0b3BHdXR0ZXJNb3JlOiAzMixcbiAgZGVza3RvcEd1dHRlckxlc3M6IDE2LFxuICBkZXNrdG9wR3V0dGVyTWluaTogOCxcbiAgZGVza3RvcEtleWxpbmVJbmNyZW1lbnQ6IDY0LFxuICBkZXNrdG9wRHJvcERvd25NZW51SXRlbUhlaWdodDogMzIsXG4gIGRlc2t0b3BEcm9wRG93bk1lbnVGb250U2l6ZTogMTUsXG4gIGRlc2t0b3BMZWZ0TmF2TWVudUl0ZW1IZWlnaHQ6IDQ4LFxuICBkZXNrdG9wU3ViaGVhZGVySGVpZ2h0OiA0OCxcbiAgZGVza3RvcFRvb2xiYXJIZWlnaHQ6IDU2XG59O1xufSx7fV0sNzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXh0ZW5kID0gcmVxdWlyZSgnLi4vdXRpbHMvZXh0ZW5kJyk7XG5cbnZhciBUeXBlcyA9IHtcbiAgTElHSFQ6IHJlcXVpcmUoJy4vdGhlbWVzL2xpZ2h0LXRoZW1lJyksXG4gIERBUks6IHJlcXVpcmUoJy4vdGhlbWVzL2RhcmstdGhlbWUnKVxufTtcblxudmFyIFRoZW1lTWFuYWdlciA9IGZ1bmN0aW9uIFRoZW1lTWFuYWdlcigpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlczogVHlwZXMsXG4gICAgdGVtcGxhdGU6IFR5cGVzLkxJR0hULFxuXG4gICAgc3BhY2luZzogVHlwZXMuTElHSFQuc3BhY2luZyxcbiAgICBjb250ZW50Rm9udEZhbWlseTogJ1JvYm90bywgc2Fucy1zZXJpZicsXG5cbiAgICBwYWxldHRlOiBUeXBlcy5MSUdIVC5nZXRQYWxldHRlKCksXG4gICAgY29tcG9uZW50OiBUeXBlcy5MSUdIVC5nZXRDb21wb25lbnRUaGVtZXMoVHlwZXMuTElHSFQuZ2V0UGFsZXR0ZSgpKSxcblxuICAgIGdldEN1cnJlbnRUaGVtZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRoZW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIENvbXBvbmVudCBnZXRzIHVwZGF0ZWQgdG8gcmVmbGVjdCBwYWxldHRlIGNoYW5nZXMuXG4gICAgc2V0VGhlbWU6IGZ1bmN0aW9uIHNldFRoZW1lKG5ld1RoZW1lKSB7XG4gICAgICB0aGlzLnNldFNwYWNpbmcobmV3VGhlbWUuc3BhY2luZyk7XG4gICAgICB0aGlzLnNldFBhbGV0dGUobmV3VGhlbWUuZ2V0UGFsZXR0ZSgpKTtcbiAgICAgIHRoaXMuc2V0Q29tcG9uZW50VGhlbWVzKG5ld1RoZW1lLmdldENvbXBvbmVudFRoZW1lcyhuZXdUaGVtZS5nZXRQYWxldHRlKCkpKTtcbiAgICB9LFxuXG4gICAgc2V0U3BhY2luZzogZnVuY3Rpb24gc2V0U3BhY2luZyhuZXdTcGFjaW5nKSB7XG4gICAgICB0aGlzLnNwYWNpbmcgPSBFeHRlbmQodGhpcy5zcGFjaW5nLCBuZXdTcGFjaW5nKTtcbiAgICAgIHRoaXMuY29tcG9uZW50ID0gRXh0ZW5kKHRoaXMuY29tcG9uZW50LCB0aGlzLnRlbXBsYXRlLmdldENvbXBvbmVudFRoZW1lcyh0aGlzLnBhbGV0dGUsIHRoaXMuc3BhY2luZykpO1xuICAgIH0sXG5cbiAgICBzZXRQYWxldHRlOiBmdW5jdGlvbiBzZXRQYWxldHRlKG5ld1BhbGV0dGUpIHtcbiAgICAgIHRoaXMucGFsZXR0ZSA9IEV4dGVuZCh0aGlzLnBhbGV0dGUsIG5ld1BhbGV0dGUpO1xuICAgICAgdGhpcy5jb21wb25lbnQgPSBFeHRlbmQodGhpcy5jb21wb25lbnQsIHRoaXMudGVtcGxhdGUuZ2V0Q29tcG9uZW50VGhlbWVzKHRoaXMucGFsZXR0ZSkpO1xuICAgIH0sXG5cbiAgICBzZXRDb21wb25lbnRUaGVtZXM6IGZ1bmN0aW9uIHNldENvbXBvbmVudFRoZW1lcyhvdmVycmlkZXMpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50ID0gRXh0ZW5kKHRoaXMuY29tcG9uZW50LCBvdmVycmlkZXMpO1xuICAgIH1cbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGhlbWVNYW5hZ2VyO1xufSx7XCIuLi91dGlscy9leHRlbmRcIjoxMzAsXCIuL3RoZW1lcy9kYXJrLXRoZW1lXCI6NzUsXCIuL3RoZW1lcy9saWdodC10aGVtZVwiOjc2fV0sNzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29sb3JzID0gcmVxdWlyZSgnLi4vY29sb3JzJyk7XG52YXIgQ29sb3JNYW5pcHVsYXRvciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2NvbG9yLW1hbmlwdWxhdG9yJyk7XG5cbnZhciBEYXJrVGhlbWUgPSB7XG4gIGdldFBhbGV0dGU6IGZ1bmN0aW9uIGdldFBhbGV0dGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHRDb2xvcjogQ29sb3JzLmZ1bGxXaGl0ZSxcbiAgICAgIGNhbnZhc0NvbG9yOiAnIzMwMzAzMCcsXG4gICAgICBib3JkZXJDb2xvcjogQ29sb3JNYW5pcHVsYXRvci5mYWRlKENvbG9ycy5mdWxsV2hpdGUsIDAuMyksIC8vQ29sb3JzLmdyZXkzMDBcbiAgICAgIGRpc2FibGVkQ29sb3I6IENvbG9yTWFuaXB1bGF0b3IuZmFkZShDb2xvcnMuZnVsbFdoaXRlLCAwLjMpLFxuICAgICAgcHJpbWFyeTFDb2xvcjogQ29sb3JzLnRlYWwyMDBcbiAgICB9O1xuICB9LFxuICBnZXRDb21wb25lbnRUaGVtZXM6IGZ1bmN0aW9uIGdldENvbXBvbmVudFRoZW1lcyhwYWxldHRlKSB7XG4gICAgdmFyIGNhcmRDb2xvciA9IENvbG9ycy5ncmV5ODAwO1xuICAgIHJldHVybiB7XG4gICAgICBhdmF0YXI6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknXG4gICAgICB9LFxuICAgICAgZmxvYXRpbmdBY3Rpb25CdXR0b246IHtcbiAgICAgICAgZGlzYWJsZWRDb2xvcjogQ29sb3JNYW5pcHVsYXRvci5mYWRlKHBhbGV0dGUudGV4dENvbG9yLCAwLjEyKVxuICAgICAgfSxcbiAgICAgIGxlZnROYXY6IHtcbiAgICAgICAgY29sb3I6IGNhcmRDb2xvclxuICAgICAgfSxcbiAgICAgIG1lbnU6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjYXJkQ29sb3IsXG4gICAgICAgIGNvbnRhaW5lckJhY2tncm91bmRDb2xvcjogY2FyZENvbG9yXG4gICAgICB9LFxuICAgICAgbWVudUl0ZW06IHtcbiAgICAgICAgaG92ZXJDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgLjAzKSdcbiAgICAgIH0sXG4gICAgICBtZW51U3ViaGVhZGVyOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJ1xuICAgICAgfSxcbiAgICAgIHBhcGVyOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY2FyZENvbG9yXG4gICAgICB9LFxuICAgICAgcmFpc2VkQnV0dG9uOiB7XG4gICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JleTUwMFxuICAgICAgfSxcbiAgICAgIHRvZ2dsZToge1xuICAgICAgICB0aHVtYk9uQ29sb3I6IENvbG9ycy5jeWFuMjAwLFxuICAgICAgICB0aHVtYk9mZkNvbG9yOiBDb2xvcnMuZ3JleTQwMCxcbiAgICAgICAgdGh1bWJEaXNhYmxlZENvbG9yOiBDb2xvcnMuZ3JleTgwMCxcbiAgICAgICAgdGh1bWJSZXF1aXJlZENvbG9yOiBDb2xvcnMuY3lhbjIwMCxcbiAgICAgICAgdHJhY2tPbkNvbG9yOiBDb2xvck1hbmlwdWxhdG9yLmZhZGUoQ29sb3JzLmN5YW4yMDAsIDAuNSksXG4gICAgICAgIHRyYWNrT2ZmQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgICAgICB0cmFja0Rpc2FibGVkQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSknXG4gICAgICB9LFxuICAgICAgcmVmcmVzaEluZGljYXRvcjoge1xuICAgICAgICBzdHJva2VDb2xvcjogQ29sb3JzLmdyZXk3MDAsXG4gICAgICAgIGxvYWRpbmdTdHJva2VDb2xvcjogQ29sb3JzLnRlYWwzMDBcbiAgICAgIH0sXG4gICAgICBzbGlkZXI6IHtcbiAgICAgICAgdHJhY2tDb2xvcjogQ29sb3JzLm1pbkJsYWNrLFxuICAgICAgICBoYW5kbGVDb2xvclplcm86IGNhcmRDb2xvcixcbiAgICAgICAgaGFuZGxlRmlsbENvbG9yOiBjYXJkQ29sb3IsXG4gICAgICAgIHNlbGVjdGlvbkNvbG9yOiBDb2xvcnMuY3lhbjIwMFxuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGFya1RoZW1lO1xufSx7XCIuLi8uLi91dGlscy9jb2xvci1tYW5pcHVsYXRvclwiOjEyNSxcIi4uL2NvbG9yc1wiOjcxfV0sNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29sb3JzID0gcmVxdWlyZSgnLi4vY29sb3JzJyk7XG52YXIgU3BhY2luZyA9IHJlcXVpcmUoJy4uL3NwYWNpbmcnKTtcbnZhciBDb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvY29sb3ItbWFuaXB1bGF0b3InKTtcblxuLyoqXG4gKiAgTGlnaHQgVGhlbWUgaXMgdGhlIGRlZmF1bHQgdGhlbWUgdXNlZCBpbiBtYXRlcmlhbC11aS4gSXQgaXMgZ3VhcmFudGVlZCB0b1xuICogIGhhdmUgYWxsIHRoZW1lIHZhcmlhYmxlcyBuZWVkZWQgZm9yIGV2ZXJ5IGNvbXBvbmVudC4gVmFyaWFibGVzIG5vdCBkZWZpbmVkXG4gKiAgaW4gYSBjdXN0b20gdGhlbWUgd2lsbCBkZWZhdWx0IHRvIHRoZXNlIHZhbHVlcy5cbiAqL1xuXG52YXIgTGlnaHRUaGVtZSA9IHtcbiAgc3BhY2luZzogU3BhY2luZyxcbiAgY29udGVudEZvbnRGYW1pbHk6ICdSb2JvdG8sIHNhbnMtc2VyaWYnLFxuICBnZXRQYWxldHRlOiBmdW5jdGlvbiBnZXRQYWxldHRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmltYXJ5MUNvbG9yOiBDb2xvcnMuY3lhbjUwMCxcbiAgICAgIHByaW1hcnkyQ29sb3I6IENvbG9ycy5jeWFuNzAwLFxuICAgICAgcHJpbWFyeTNDb2xvcjogQ29sb3JzLmN5YW4xMDAsXG4gICAgICBhY2NlbnQxQ29sb3I6IENvbG9ycy5waW5rQTIwMCxcbiAgICAgIGFjY2VudDJDb2xvcjogQ29sb3JzLnBpbmtBNDAwLFxuICAgICAgYWNjZW50M0NvbG9yOiBDb2xvcnMucGlua0ExMDAsXG4gICAgICB0ZXh0Q29sb3I6IENvbG9ycy5kYXJrQmxhY2ssXG4gICAgICBjYW52YXNDb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgYm9yZGVyQ29sb3I6IENvbG9ycy5ncmV5MzAwLFxuICAgICAgZGlzYWJsZWRDb2xvcjogQ29sb3JNYW5pcHVsYXRvci5mYWRlKENvbG9ycy5kYXJrQmxhY2ssIDAuMylcbiAgICB9O1xuICB9LFxuICBnZXRDb21wb25lbnRUaGVtZXM6IGZ1bmN0aW9uIGdldENvbXBvbmVudFRoZW1lcyhwYWxldHRlLCBzcGFjaW5nKSB7XG4gICAgc3BhY2luZyA9IHNwYWNpbmcgfHwgU3BhY2luZztcbiAgICB2YXIgb2JqID0ge1xuICAgICAgYXBwQmFyOiB7XG4gICAgICAgIGNvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICAgIHRleHRDb2xvcjogQ29sb3JzLmRhcmtXaGl0ZSxcbiAgICAgICAgaGVpZ2h0OiBzcGFjaW5nLmRlc2t0b3BLZXlsaW5lSW5jcmVtZW50XG4gICAgICB9LFxuICAgICAgYXZhdGFyOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjA4KSdcbiAgICAgIH0sXG4gICAgICBidXR0b246IHtcbiAgICAgICAgaGVpZ2h0OiAzNixcbiAgICAgICAgbWluV2lkdGg6IDg4LFxuICAgICAgICBpY29uQnV0dG9uU2l6ZTogc3BhY2luZy5pY29uU2l6ZSAqIDJcbiAgICAgIH0sXG4gICAgICBjaGVja2JveDoge1xuICAgICAgICBib3hDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICAgIGNoZWNrZWRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICByZXF1aXJlZENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICAgIGRpc2FibGVkQ29sb3I6IHBhbGV0dGUuZGlzYWJsZWRDb2xvcixcbiAgICAgICAgbGFiZWxDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICAgIGxhYmVsRGlzYWJsZWRDb2xvcjogcGFsZXR0ZS5kaXNhYmxlZENvbG9yXG4gICAgICB9LFxuICAgICAgZGF0ZVBpY2tlcjoge1xuICAgICAgICBjb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICB0ZXh0Q29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgY2FsZW5kYXJUZXh0Q29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgICBzZWxlY3RDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MkNvbG9yLFxuICAgICAgICBzZWxlY3RUZXh0Q29sb3I6IENvbG9ycy53aGl0ZVxuICAgICAgfSxcbiAgICAgIGRyb3BEb3duTWVudToge1xuICAgICAgICBhY2NlbnRDb2xvcjogcGFsZXR0ZS5ib3JkZXJDb2xvclxuICAgICAgfSxcbiAgICAgIGZsYXRCdXR0b246IHtcbiAgICAgICAgY29sb3I6IHBhbGV0dGUuY2FudmFzQ29sb3IsXG4gICAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICAgIHByaW1hcnlUZXh0Q29sb3I6IHBhbGV0dGUuYWNjZW50MUNvbG9yLFxuICAgICAgICBzZWNvbmRhcnlUZXh0Q29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvclxuICAgICAgfSxcbiAgICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiB7XG4gICAgICAgIGJ1dHRvblNpemU6IDU2LFxuICAgICAgICBtaW5pU2l6ZTogNDAsXG4gICAgICAgIGNvbG9yOiBwYWxldHRlLmFjY2VudDFDb2xvcixcbiAgICAgICAgaWNvbkNvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgICAgIHNlY29uZGFyeUNvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICAgIHNlY29uZGFyeUljb25Db2xvcjogQ29sb3JzLndoaXRlXG4gICAgICB9LFxuICAgICAgbGVmdE5hdjoge1xuICAgICAgICB3aWR0aDogc3BhY2luZy5kZXNrdG9wS2V5bGluZUluY3JlbWVudCAqIDQsXG4gICAgICAgIGNvbG9yOiBDb2xvcnMud2hpdGVcbiAgICAgIH0sXG4gICAgICBsaXN0SXRlbToge1xuICAgICAgICBuZXN0ZWRMZXZlbERlcHRoOiAxOFxuICAgICAgfSxcbiAgICAgIG1lbnU6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgICAgIGNvbnRhaW5lckJhY2tncm91bmRDb2xvcjogQ29sb3JzLndoaXRlXG4gICAgICB9LFxuICAgICAgbWVudUl0ZW06IHtcbiAgICAgICAgZGF0YUhlaWdodDogMzIsXG4gICAgICAgIGhlaWdodDogNDgsXG4gICAgICAgIGhvdmVyQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIC4wMzUpJyxcbiAgICAgICAgcGFkZGluZzogc3BhY2luZy5kZXNrdG9wR3V0dGVyLFxuICAgICAgICBzZWxlY3RlZFRleHRDb2xvcjogcGFsZXR0ZS5hY2NlbnQxQ29sb3JcbiAgICAgIH0sXG4gICAgICBtZW51U3ViaGVhZGVyOiB7XG4gICAgICAgIHBhZGRpbmc6IHNwYWNpbmcuZGVza3RvcEd1dHRlcixcbiAgICAgICAgYm9yZGVyQ29sb3I6IHBhbGV0dGUuYm9yZGVyQ29sb3IsXG4gICAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yXG4gICAgICB9LFxuICAgICAgcGFwZXI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMud2hpdGVcbiAgICAgIH0sXG4gICAgICByYWRpb0J1dHRvbjoge1xuICAgICAgICBib3JkZXJDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICBjaGVja2VkQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgICAgcmVxdWlyZWRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICBkaXNhYmxlZENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3IsXG4gICAgICAgIHNpemU6IDI0LFxuICAgICAgICBsYWJlbENvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgICAgbGFiZWxEaXNhYmxlZENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3JcbiAgICAgIH0sXG4gICAgICByYWlzZWRCdXR0b246IHtcbiAgICAgICAgY29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgdGV4dENvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgICAgcHJpbWFyeUNvbG9yOiBwYWxldHRlLmFjY2VudDFDb2xvcixcbiAgICAgICAgcHJpbWFyeVRleHRDb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgICBzZWNvbmRhcnlDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgICBzZWNvbmRhcnlUZXh0Q29sb3I6IENvbG9ycy53aGl0ZVxuICAgICAgfSxcbiAgICAgIHJlZnJlc2hJbmRpY2F0b3I6IHtcbiAgICAgICAgc3Ryb2tlQ29sb3I6IENvbG9ycy5ncmV5MzAwLFxuICAgICAgICBsb2FkaW5nU3Ryb2tlQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvclxuICAgICAgfSxcbiAgICAgIHNsaWRlcjoge1xuICAgICAgICB0cmFja1NpemU6IDIsXG4gICAgICAgIHRyYWNrQ29sb3I6IENvbG9ycy5taW5CbGFjayxcbiAgICAgICAgdHJhY2tDb2xvclNlbGVjdGVkOiBDb2xvcnMuZ3JleTUwMCxcbiAgICAgICAgaGFuZGxlU2l6ZTogMTIsXG4gICAgICAgIGhhbmRsZVNpemVEaXNhYmxlZDogOCxcbiAgICAgICAgaGFuZGxlQ29sb3JaZXJvOiBDb2xvcnMuZ3JleTQwMCxcbiAgICAgICAgaGFuZGxlRmlsbENvbG9yOiBDb2xvcnMud2hpdGUsXG4gICAgICAgIHNlbGVjdGlvbkNvbG9yOiBwYWxldHRlLnByaW1hcnkzQ29sb3IsXG4gICAgICAgIHJpcHBsZUNvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3JcbiAgICAgIH0sXG4gICAgICBzbmFja2Jhcjoge1xuICAgICAgICB0ZXh0Q29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzMyMzIzMicsXG4gICAgICAgIGFjdGlvbkNvbG9yOiBwYWxldHRlLmFjY2VudDFDb2xvclxuICAgICAgfSxcbiAgICAgIHRhYmxlOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29sb3JzLndoaXRlXG4gICAgICB9LFxuICAgICAgdGFibGVIZWFkZXI6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHBhbGV0dGUuYm9yZGVyQ29sb3JcbiAgICAgIH0sXG4gICAgICB0YWJsZUhlYWRlckNvbHVtbjoge1xuICAgICAgICB0ZXh0Q29sb3I6IENvbG9ycy5saWdodEJsYWNrLFxuICAgICAgICBoZWlnaHQ6IDU2LFxuICAgICAgICBzcGFjaW5nOiAyOFxuICAgICAgfSxcbiAgICAgIHRhYmxlRm9vdGVyOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiBwYWxldHRlLmJvcmRlckNvbG9yLFxuICAgICAgICB0ZXh0Q29sb3I6IENvbG9ycy5saWdodEJsYWNrXG4gICAgICB9LFxuICAgICAgdGFibGVSb3c6IHtcbiAgICAgICAgaG92ZXJDb2xvcjogQ29sb3JzLmdyZXkyMDAsXG4gICAgICAgIHN0cmlwZUNvbG9yOiBDb2xvck1hbmlwdWxhdG9yLmxpZ2h0ZW4ocGFsZXR0ZS5wcmltYXJ5MUNvbG9yLCAwLjU1KSxcbiAgICAgICAgc2VsZWN0ZWRDb2xvcjogQ29sb3JzLmdyZXkzMDAsXG4gICAgICAgIHRleHRDb2xvcjogQ29sb3JzLmRhcmtCbGFjayxcbiAgICAgICAgYm9yZGVyQ29sb3I6IHBhbGV0dGUuYm9yZGVyQ29sb3JcbiAgICAgIH0sXG4gICAgICB0YWJsZVJvd0NvbHVtbjoge1xuICAgICAgICBoZWlnaHQ6IDQ4LFxuICAgICAgICBzcGFjaW5nOiAyOFxuICAgICAgfSxcbiAgICAgIHRpbWVQaWNrZXI6IHtcbiAgICAgICAgY29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgdGV4dENvbG9yOiBDb2xvcnMuZ3JleTYwMCxcbiAgICAgICAgYWNjZW50Q29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgICAgY2xvY2tDb2xvcjogQ29sb3JzLmJsYWNrLFxuICAgICAgICBzZWxlY3RDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MkNvbG9yLFxuICAgICAgICBzZWxlY3RUZXh0Q29sb3I6IENvbG9ycy53aGl0ZVxuICAgICAgfSxcbiAgICAgIHRvZ2dsZToge1xuICAgICAgICB0aHVtYk9uQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgICAgdGh1bWJPZmZDb2xvcjogQ29sb3JzLmdyZXk1MCxcbiAgICAgICAgdGh1bWJEaXNhYmxlZENvbG9yOiBDb2xvcnMuZ3JleTQwMCxcbiAgICAgICAgdGh1bWJSZXF1aXJlZENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICAgIHRyYWNrT25Db2xvcjogQ29sb3JNYW5pcHVsYXRvci5mYWRlKHBhbGV0dGUucHJpbWFyeTFDb2xvciwgMC41KSxcbiAgICAgICAgdHJhY2tPZmZDb2xvcjogQ29sb3JzLm1pbkJsYWNrLFxuICAgICAgICB0cmFja0Rpc2FibGVkQ29sb3I6IENvbG9ycy5mYWludEJsYWNrLFxuICAgICAgICBsYWJlbENvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgICAgbGFiZWxEaXNhYmxlZENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3JcbiAgICAgIH0sXG4gICAgICB0b29sYmFyOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29sb3JNYW5pcHVsYXRvci5kYXJrZW4oJyNlZWVlZWUnLCAwLjA1KSxcbiAgICAgICAgaGVpZ2h0OiA1NixcbiAgICAgICAgdGl0bGVGb250U2l6ZTogMjAsXG4gICAgICAgIGljb25Db2xvcjogJ3JnYmEoMCwgMCwgMCwgLjQwKScsXG4gICAgICAgIHNlcGFyYXRvckNvbG9yOiAncmdiYSgwLCAwLCAwLCAuMTc1KScsXG4gICAgICAgIG1lbnVIb3ZlckNvbG9yOiAncmdiYSgwLCAwLCAwLCAuMTApJ1xuICAgICAgfSxcbiAgICAgIHRhYnM6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3JcbiAgICAgIH0sXG4gICAgICB0ZXh0RmllbGQ6IHtcbiAgICAgICAgdGV4dENvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgICAgaGludENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3IsXG4gICAgICAgIGZsb2F0aW5nTGFiZWxDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICAgIGRpc2FibGVkVGV4dENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3IsXG4gICAgICAgIGVycm9yQ29sb3I6IENvbG9ycy5yZWQ1MDAsXG4gICAgICAgIGZvY3VzQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBib3JkZXJDb2xvcjogcGFsZXR0ZS5ib3JkZXJDb2xvclxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBQcm9wZXJ0aWVzIGJhc2VkIG9uIHByZXZpb3VzIHByb3BlcnRpZXNcbiAgICBvYmouZmxhdEJ1dHRvbi5kaXNhYmxlZFRleHRDb2xvciA9IENvbG9yTWFuaXB1bGF0b3IuZmFkZShvYmouZmxhdEJ1dHRvbi50ZXh0Q29sb3IsIDAuMyk7XG4gICAgb2JqLmZsb2F0aW5nQWN0aW9uQnV0dG9uLmRpc2FibGVkQ29sb3IgPSBDb2xvck1hbmlwdWxhdG9yLmRhcmtlbihDb2xvcnMud2hpdGUsIDAuMSk7XG4gICAgb2JqLmZsb2F0aW5nQWN0aW9uQnV0dG9uLmRpc2FibGVkVGV4dENvbG9yID0gQ29sb3JNYW5pcHVsYXRvci5mYWRlKHBhbGV0dGUudGV4dENvbG9yLCAwLjMpO1xuICAgIG9iai5yYWlzZWRCdXR0b24uZGlzYWJsZWRDb2xvciA9IENvbG9yTWFuaXB1bGF0b3IuZGFya2VuKG9iai5yYWlzZWRCdXR0b24uY29sb3IsIDAuMSk7XG4gICAgb2JqLnJhaXNlZEJ1dHRvbi5kaXNhYmxlZFRleHRDb2xvciA9IENvbG9yTWFuaXB1bGF0b3IuZmFkZShvYmoucmFpc2VkQnV0dG9uLnRleHRDb2xvciwgMC4zKTtcbiAgICBvYmouc2xpZGVyLmhhbmRsZVNpemVBY3RpdmUgPSBvYmouc2xpZGVyLmhhbmRsZVNpemUgKiAyO1xuICAgIG9iai50b2dnbGUudHJhY2tSZXF1aXJlZENvbG9yID0gQ29sb3JNYW5pcHVsYXRvci5mYWRlKG9iai50b2dnbGUudGh1bWJSZXF1aXJlZENvbG9yLCAwLjUpO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaWdodFRoZW1lO1xufSx7XCIuLi8uLi91dGlscy9jb2xvci1tYW5pcHVsYXRvclwiOjEyNSxcIi4uL2NvbG9yc1wiOjcxLFwiLi4vc3BhY2luZ1wiOjczfV0sNzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXV0b1ByZWZpeCA9IHJlcXVpcmUoJy4vYXV0by1wcmVmaXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgZWFzZU91dEZ1bmN0aW9uOiAnY3ViaWMtYmV6aWVyKDAuMjMsIDEsIDAuMzIsIDEpJyxcbiAgZWFzZUluT3V0RnVuY3Rpb246ICdjdWJpYy1iZXppZXIoMC40NDUsIDAuMDUsIDAuNTUsIDAuOTUpJyxcblxuICBlYXNlT3V0OiBmdW5jdGlvbiBlYXNlT3V0KGR1cmF0aW9uLCBwcm9wZXJ0eSwgZGVsYXksIGVhc2VGdW5jdGlvbikge1xuXG4gICAgZWFzZUZ1bmN0aW9uID0gZWFzZUZ1bmN0aW9uIHx8IHRoaXMuZWFzZU91dEZ1bmN0aW9uO1xuXG4gICAgaWYgKHByb3BlcnR5ICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9wZXJ0eSkgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcblxuICAgICAgdmFyIHRyYW5zaXRpb25zID0gJyc7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BlcnR5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0cmFuc2l0aW9ucykgdHJhbnNpdGlvbnMgKz0gJywnO1xuICAgICAgICB0cmFuc2l0aW9ucyArPSB0aGlzLmNyZWF0ZShkdXJhdGlvbiwgcHJvcGVydHlbaV0sIGRlbGF5LCBlYXNlRnVuY3Rpb24pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRyYW5zaXRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGUoZHVyYXRpb24sIHByb3BlcnR5LCBkZWxheSwgZWFzZUZ1bmN0aW9uKTtcbiAgICB9XG4gIH0sXG5cbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoZHVyYXRpb24sIHByb3BlcnR5LCBkZWxheSwgZWFzZUZ1bmN0aW9uKSB7XG4gICAgZHVyYXRpb24gPSBkdXJhdGlvbiB8fCAnNDUwbXMnO1xuICAgIHByb3BlcnR5ID0gcHJvcGVydHkgfHwgJ2FsbCc7XG4gICAgZGVsYXkgPSBkZWxheSB8fCAnMG1zJztcbiAgICBlYXNlRnVuY3Rpb24gPSBlYXNlRnVuY3Rpb24gfHwgJ2xpbmVhcic7XG5cbiAgICByZXR1cm4gQXV0b1ByZWZpeC5zaW5nbGVIeXBoZW5lZChwcm9wZXJ0eSkgKyAnICcgKyBkdXJhdGlvbiArICcgJyArIGVhc2VGdW5jdGlvbiArICcgJyArIGRlbGF5O1xuICB9XG59O1xufSx7XCIuL2F1dG8tcHJlZml4XCI6NzB9XSw3ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG52YXIgQ29sb3JzID0gcmVxdWlyZSgnLi9jb2xvcnMnKTtcblxudmFyIFR5cG9ncmFwaHkgPSBmdW5jdGlvbiBUeXBvZ3JhcGh5KCkge1xuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHlwb2dyYXBoeSk7XG5cbiAgLy8gdGV4dCBjb2xvcnNcbiAgdGhpcy50ZXh0RnVsbEJsYWNrID0gQ29sb3JzLmZ1bGxCbGFjaztcbiAgdGhpcy50ZXh0RGFya0JsYWNrID0gQ29sb3JzLmRhcmtCbGFjaztcbiAgdGhpcy50ZXh0TGlnaHRCbGFjayA9IENvbG9ycy5saWdodEJsYWNrO1xuICB0aGlzLnRleHRNaW5CbGFjayA9IENvbG9ycy5taW5CbGFjaztcbiAgdGhpcy50ZXh0RnVsbFdoaXRlID0gQ29sb3JzLmZ1bGxXaGl0ZTtcbiAgdGhpcy50ZXh0RGFya1doaXRlID0gQ29sb3JzLmRhcmtXaGl0ZTtcbiAgdGhpcy50ZXh0TGlnaHRXaGl0ZSA9IENvbG9ycy5saWdodFdoaXRlO1xuXG4gIC8vIGZvbnQgd2VpZ2h0XG4gIHRoaXMuZm9udFdlaWdodExpZ2h0ID0gMzAwO1xuICB0aGlzLmZvbnRXZWlnaHROb3JtYWwgPSA0MDA7XG4gIHRoaXMuZm9udFdlaWdodE1lZGl1bSA9IDUwMDtcblxuICB0aGlzLmZvbnRTdHlsZUJ1dHRvbkZvbnRTaXplID0gMTQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBvZ3JhcGh5KCk7XG59LHtcIi4vY29sb3JzXCI6NzF9XSw3OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBTdmdJY29uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1N2Z0ljb24nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY29sb3I6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaG92ZXJDb2xvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbk1vdXNlRW50ZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VMZWF2ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgdmlld0JveDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBob3ZlcmVkOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uTW91c2VFbnRlcjogZnVuY3Rpb24gb25Nb3VzZUVudGVyKCkge30sXG4gICAgICBvbk1vdXNlTGVhdmU6IGZ1bmN0aW9uIG9uTW91c2VMZWF2ZSgpIHt9LFxuICAgICAgdmlld0JveDogJzAgMCAyNCAyNCdcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgY29sb3IgPSBfcHJvcHMuY29sb3I7XG4gICAgdmFyIGhvdmVyQ29sb3IgPSBfcHJvcHMuaG92ZXJDb2xvcjtcbiAgICB2YXIgb25Nb3VzZUVudGVyID0gX3Byb3BzLm9uTW91c2VFbnRlcjtcbiAgICB2YXIgb25Nb3VzZUxlYXZlID0gX3Byb3BzLm9uTW91c2VMZWF2ZTtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG4gICAgdmFyIHZpZXdCb3ggPSBfcHJvcHMudmlld0JveDtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2hpbGRyZW4nLCAnY29sb3InLCAnaG92ZXJDb2xvcicsICdvbk1vdXNlRW50ZXInLCAnb25Nb3VzZUxlYXZlJywgJ3N0eWxlJywgJ3ZpZXdCb3gnXSk7XG5cbiAgICB2YXIgb2ZmQ29sb3IgPSBjb2xvciA/IGNvbG9yIDogc3R5bGUgJiYgc3R5bGUuZmlsbCA/IHN0eWxlLmZpbGwgOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucGFsZXR0ZS50ZXh0Q29sb3I7XG4gICAgdmFyIG9uQ29sb3IgPSBob3ZlckNvbG9yID8gaG92ZXJDb2xvciA6IG9mZkNvbG9yO1xuXG4gICAgdmFyIG1lcmdlZFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoe1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBoZWlnaHQ6IDI0LFxuICAgICAgd2lkdGg6IDI0LFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpXG4gICAgfSwgc3R5bGUsIHtcbiAgICAgIC8vIE1ha2Ugc3VyZSBvdXIgZmlsbCBjb2xvciBvdmVycmlkZXMgZmlsbCBwcm92aWRlZCBpbiBwcm9wcy5zdHlsZVxuICAgICAgZmlsbDogdGhpcy5zdGF0ZS5ob3ZlcmVkID8gb25Db2xvciA6IG9mZkNvbG9yXG4gICAgfSk7XG5cbiAgICB2YXIgZXZlbnRzID0gaG92ZXJDb2xvciA/IHtcbiAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5faGFuZGxlTW91c2VFbnRlcixcbiAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5faGFuZGxlTW91c2VMZWF2ZVxuICAgIH0gOiB7fTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3N2ZycsXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIGV2ZW50cywge1xuICAgICAgICBzdHlsZTogbWVyZ2VkU3R5bGVzLFxuICAgICAgICB2aWV3Qm94OiB2aWV3Qm94IH0pLFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZUxlYXZlOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VMZWF2ZShlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgIHRoaXMucHJvcHMub25Nb3VzZUxlYXZlKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZUVudGVyOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VFbnRlcihlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IHRydWUgfSk7XG4gICAgdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIoZSk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN2Z0ljb247XG59LHtcIi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL3N0eWxlcy90cmFuc2l0aW9uc1wiOjc3LFwicmVhY3RcIjozMTl9XSw4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xudmFyIFB1cmVSZW5kZXJNaXhpbiA9IFJlYWN0LmFkZG9ucy5QdXJlUmVuZGVyTWl4aW47XG52YXIgU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL3N2Zy1pY29uJyk7XG5cbnZhciBIYXJkd2FyZUtleWJvYXJkQXJyb3dEb3duID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0hhcmR3YXJlS2V5Ym9hcmRBcnJvd0Rvd24nLFxuXG4gIG1peGluczogW1B1cmVSZW5kZXJNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdmdJY29uLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNNy40MSA3Ljg0TDEyIDEyLjQybDQuNTktNC41OEwxOCA5LjI1bC02IDYtNi02eicgfSlcbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhcmR3YXJlS2V5Ym9hcmRBcnJvd0Rvd247XG59LHtcIi4uLy4uL3N2Zy1pY29uXCI6NzksXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSw4MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xudmFyIFB1cmVSZW5kZXJNaXhpbiA9IFJlYWN0LmFkZG9ucy5QdXJlUmVuZGVyTWl4aW47XG52YXIgU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL3N2Zy1pY29uJyk7XG5cbnZhciBIYXJkd2FyZUtleWJvYXJkQXJyb3dVcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdIYXJkd2FyZUtleWJvYXJkQXJyb3dVcCcsXG5cbiAgbWl4aW5zOiBbUHVyZVJlbmRlck1peGluXSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFN2Z0ljb24sXG4gICAgICB0aGlzLnByb3BzLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ003LjQxIDE1LjQxTDEyIDEwLjgzbDQuNTkgNC41OEwxOCAxNGwtNi02LTYgNnonIH0pXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXJkd2FyZUtleWJvYXJkQXJyb3dVcDtcbn0se1wiLi4vLi4vc3ZnLWljb25cIjo3OSxcInJlYWN0L2FkZG9uc1wiOjE0N31dLDgyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdmdJY29uID0gcmVxdWlyZSgnLi4vc3ZnLWljb24nKTtcblxudmFyIE5hdmlnYXRpb25DaGV2cm9uTGVmdERvdWJsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdOYXZpZ2F0aW9uQ2hldnJvbkxlZnREb3VibGUnLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3ZnSWNvbixcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTExLjQxIDcuNDEgTDEwIDYgbC02IDYgNiA2IDEuNDEtMS40MSBMNi44MyAxMnonIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00xOC40MSA3LjQxIEwxNyA2IGwtNiA2IDYgNiAxLjQxLTEuNDEgTDEzLjgzIDEyeicgfSlcbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5hdmlnYXRpb25DaGV2cm9uTGVmdERvdWJsZTtcbn0se1wiLi4vc3ZnLWljb25cIjo3OSxcInJlYWN0XCI6MzE5fV0sODM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN2Z0ljb24gPSByZXF1aXJlKCcuLi9zdmctaWNvbicpO1xuXG52YXIgTmF2aWdhdGlvbkNoZXZyb25SaWdodERvdWJsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdOYXZpZ2F0aW9uQ2hldnJvblJpZ2h0RG91YmxlJyxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFN2Z0ljb24sXG4gICAgICB0aGlzLnByb3BzLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ002IDYgTDQuNTkgIDcuNDEgOS4xNyAxMiBsLTQuNTggNC41OSBMNiAxOCBsNiAtNnonIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00xMyA2IEwxMS41OSA3LjQxIDE2LjE3IDEyIGwtNC41OCA0LjU5IEwxMyAxOCBsNiAtNnonIH0pXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBOYXZpZ2F0aW9uQ2hldnJvblJpZ2h0RG91YmxlO1xufSx7XCIuLi9zdmctaWNvblwiOjc5LFwicmVhY3RcIjozMTl9XSw4NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xudmFyIFB1cmVSZW5kZXJNaXhpbiA9IFJlYWN0LmFkZG9ucy5QdXJlUmVuZGVyTWl4aW47XG52YXIgU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL3N2Zy1pY29uJyk7XG5cbnZhciBOYXZpZ2F0aW9uQXJyb3dEcm9wRG93biA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdOYXZpZ2F0aW9uQXJyb3dEcm9wRG93bicsXG5cbiAgbWl4aW5zOiBbUHVyZVJlbmRlck1peGluXSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFN2Z0ljb24sXG4gICAgICB0aGlzLnByb3BzLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ003IDEwbDUgNSA1LTV6JyB9KVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdGlvbkFycm93RHJvcERvd247XG59LHtcIi4uLy4uL3N2Zy1pY29uXCI6NzksXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSw4NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xudmFyIFB1cmVSZW5kZXJNaXhpbiA9IFJlYWN0LmFkZG9ucy5QdXJlUmVuZGVyTWl4aW47XG52YXIgU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL3N2Zy1pY29uJyk7XG5cbnZhciBOYXZpZ2F0aW9uQXJyb3dEcm9wVXAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTmF2aWdhdGlvbkFycm93RHJvcFVwJyxcblxuICBtaXhpbnM6IFtQdXJlUmVuZGVyTWl4aW5dLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3ZnSWNvbixcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTcgMTRsNS01IDUgNXonIH0pXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBOYXZpZ2F0aW9uQXJyb3dEcm9wVXA7XG59LHtcIi4uLy4uL3N2Zy1pY29uXCI6NzksXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSw4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xudmFyIFB1cmVSZW5kZXJNaXhpbiA9IFJlYWN0LmFkZG9ucy5QdXJlUmVuZGVyTWl4aW47XG52YXIgU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL3N2Zy1pY29uJyk7XG5cbnZhciBOYXZpZ2F0aW9uQ2hldnJvbkxlZnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnTmF2aWdhdGlvbkNoZXZyb25MZWZ0JyxcblxuICBtaXhpbnM6IFtQdXJlUmVuZGVyTWl4aW5dLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3ZnSWNvbixcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTE1LjQxIDcuNDFMMTQgNmwtNiA2IDYgNiAxLjQxLTEuNDFMMTAuODMgMTJ6JyB9KVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdGlvbkNoZXZyb25MZWZ0O1xufSx7XCIuLi8uLi9zdmctaWNvblwiOjc5LFwicmVhY3QvYWRkb25zXCI6MTQ3fV0sODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBQdXJlUmVuZGVyTWl4aW4gPSBSZWFjdC5hZGRvbnMuUHVyZVJlbmRlck1peGluO1xudmFyIFN2Z0ljb24gPSByZXF1aXJlKCcuLi8uLi9zdmctaWNvbicpO1xuXG52YXIgTmF2aWdhdGlvbkNoZXZyb25SaWdodCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdOYXZpZ2F0aW9uQ2hldnJvblJpZ2h0JyxcblxuICBtaXhpbnM6IFtQdXJlUmVuZGVyTWl4aW5dLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3ZnSWNvbixcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTEwIDZMOC41OSA3LjQxIDEzLjE3IDEybC00LjU4IDQuNTlMMTAgMThsNi02eicgfSlcbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5hdmlnYXRpb25DaGV2cm9uUmlnaHQ7XG59LHtcIi4uLy4uL3N2Zy1pY29uXCI6NzksXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSw4ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xudmFyIFB1cmVSZW5kZXJNaXhpbiA9IFJlYWN0LmFkZG9ucy5QdXJlUmVuZGVyTWl4aW47XG52YXIgU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL3N2Zy1pY29uJyk7XG5cbnZhciBOYXZpZ2F0aW9uTWVudSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdOYXZpZ2F0aW9uTWVudScsXG5cbiAgbWl4aW5zOiBbUHVyZVJlbmRlck1peGluXSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFN2Z0ljb24sXG4gICAgICB0aGlzLnByb3BzLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00zIDE4aDE4di0ySDN2MnptMC01aDE4di0ySDN2MnptMC03djJoMThWNkgzeicgfSlcbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5hdmlnYXRpb25NZW51O1xufSx7XCIuLi8uLi9zdmctaWNvblwiOjc5LFwicmVhY3QvYWRkb25zXCI6MTQ3fV0sODk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBQdXJlUmVuZGVyTWl4aW4gPSBSZWFjdC5hZGRvbnMuUHVyZVJlbmRlck1peGluO1xudmFyIFN2Z0ljb24gPSByZXF1aXJlKCcuLi8uLi9zdmctaWNvbicpO1xuXG52YXIgVG9nZ2xlQ2hlY2tCb3hPdXRsaW5lQmxhbmsgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVG9nZ2xlQ2hlY2tCb3hPdXRsaW5lQmxhbmsnLFxuXG4gIG1peGluczogW1B1cmVSZW5kZXJNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdmdJY29uLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTkgNXYxNEg1VjVoMTRtMC0ySDVjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnonIH0pXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb2dnbGVDaGVja0JveE91dGxpbmVCbGFuaztcbn0se1wiLi4vLi4vc3ZnLWljb25cIjo3OSxcInJlYWN0L2FkZG9uc1wiOjE0N31dLDkwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgUHVyZVJlbmRlck1peGluID0gUmVhY3QuYWRkb25zLlB1cmVSZW5kZXJNaXhpbjtcbnZhciBTdmdJY29uID0gcmVxdWlyZSgnLi4vLi4vc3ZnLWljb24nKTtcblxudmFyIFRvZ2dsZUNoZWNrQm94ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RvZ2dsZUNoZWNrQm94JyxcblxuICBtaXhpbnM6IFtQdXJlUmVuZGVyTWl4aW5dLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3ZnSWNvbixcbiAgICAgIHRoaXMucHJvcHMsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTE5IDNINWMtMS4xMSAwLTIgLjktMiAydjE0YzAgMS4xLjg5IDIgMiAyaDE0YzEuMTEgMCAyLS45IDItMlY1YzAtMS4xLS44OS0yLTItMnptLTkgMTRsLTUtNSAxLjQxLTEuNDFMMTAgMTQuMTdsNy41OS03LjU5TDE5IDhsLTkgOXonIH0pXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb2dnbGVDaGVja0JveDtcbn0se1wiLi4vLi4vc3ZnLWljb25cIjo3OSxcInJlYWN0L2FkZG9uc1wiOjE0N31dLDkxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgUHVyZVJlbmRlck1peGluID0gUmVhY3QuYWRkb25zLlB1cmVSZW5kZXJNaXhpbjtcbnZhciBTdmdJY29uID0gcmVxdWlyZSgnLi4vLi4vc3ZnLWljb24nKTtcblxudmFyIFRvZ2dsZVJhZGlvQnV0dG9uQ2hlY2tlZCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUb2dnbGVSYWRpb0J1dHRvbkNoZWNrZWQnLFxuXG4gIG1peGluczogW1B1cmVSZW5kZXJNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdmdJY29uLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTIgN2MtMi43NiAwLTUgMi4yNC01IDVzMi4yNCA1IDUgNSA1LTIuMjQgNS01LTIuMjQtNS01LTV6bTAtNUM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMCAxOGMtNC40MiAwLTgtMy41OC04LThzMy41OC04IDgtOCA4IDMuNTggOCA4LTMuNTggOC04IDh6JyB9KVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVG9nZ2xlUmFkaW9CdXR0b25DaGVja2VkO1xufSx7XCIuLi8uLi9zdmctaWNvblwiOjc5LFwicmVhY3QvYWRkb25zXCI6MTQ3fV0sOTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBQdXJlUmVuZGVyTWl4aW4gPSBSZWFjdC5hZGRvbnMuUHVyZVJlbmRlck1peGluO1xudmFyIFN2Z0ljb24gPSByZXF1aXJlKCcuLi8uLi9zdmctaWNvbicpO1xuXG52YXIgVG9nZ2xlUmFkaW9CdXR0b25VbmNoZWNrZWQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVG9nZ2xlUmFkaW9CdXR0b25VbmNoZWNrZWQnLFxuXG4gIG1peGluczogW1B1cmVSZW5kZXJNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdmdJY29uLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTIgMkM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMCAxOGMtNC40MiAwLTgtMy41OC04LThzMy41OC04IDgtOCA4IDMuNTggOCA4LTMuNTggOC04IDh6JyB9KVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVG9nZ2xlUmFkaW9CdXR0b25VbmNoZWNrZWQ7XG59LHtcIi4uLy4uL3N2Zy1pY29uXCI6NzksXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSw5MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG5cbnZhciBUYWJsZUZvb3RlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUYWJsZUZvb3RlcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjb2x1bW5zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQudGFibGVGb290ZXI7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgY2VsbDoge1xuICAgICAgICBib3JkZXJUb3A6ICcxcHggc29saWQgJyArIHRoaXMuZ2V0VGhlbWUoKS5ib3JkZXJDb2xvcixcbiAgICAgICAgdmVydGljYWxBbGlnbjogJ2JvdHRvbScsXG4gICAgICAgIHBhZGRpbmc6IDIwLFxuICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gJ211aS10YWJsZS1mb290ZXInO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAndGZvb3QnLFxuICAgICAgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSB9LFxuICAgICAgdGhpcy5fZ2V0Rm9vdGVyUm93KClcbiAgICApO1xuICB9LFxuXG4gIF9nZXRGb290ZXJSb3c6IGZ1bmN0aW9uIF9nZXRGb290ZXJSb3coKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAndHInLFxuICAgICAgeyBjbGFzc05hbWU6ICdtdWktdGFibGUtZm9vdGVyLXJvdycgfSxcbiAgICAgIHRoaXMuX2dldENvbHVtbkhlYWRlcnModGhpcy5wcm9wcy5jb2x1bW5zLCAnZicpXG4gICAgKTtcbiAgfSxcblxuICBfZ2V0Q29sdW1uSGVhZGVyczogZnVuY3Rpb24gX2dldENvbHVtbkhlYWRlcnMoZm9vdGVyRGF0YSwga2V5UHJlZml4KSB7XG4gICAgdmFyIGZvb3RlcnMgPSBbXTtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBmb290ZXJEYXRhLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIF9mb290ZXJEYXRhJGluZGV4ID0gZm9vdGVyRGF0YVtpbmRleF07XG4gICAgICB2YXIgY29udGVudCA9IF9mb290ZXJEYXRhJGluZGV4LmNvbnRlbnQ7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfZm9vdGVyRGF0YSRpbmRleCwgWydjb250ZW50J10pO1xuXG4gICAgICBpZiAoY29udGVudCA9PT0gdW5kZWZpbmVkKSBjb250ZW50ID0gZm9vdGVyRGF0YVtpbmRleF07XG4gICAgICB2YXIga2V5ID0ga2V5UHJlZml4ICsgaW5kZXg7XG4gICAgICBwcm9wcy5zdHlsZSA9IHByb3BzLnN0eWxlICE9PSB1bmRlZmluZWQgPyB0aGlzLm1lcmdlQW5kUHJlZml4KHByb3BzLnN0eWxlLCBzdHlsZXMuY2VsbCkgOiBzdHlsZXMuY2VsbDtcblxuICAgICAgZm9vdGVycy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICd0ZCcsXG4gICAgICAgIF9leHRlbmRzKHsga2V5OiBrZXksIGNsYXNzTmFtZTogJ211aS10YWJsZS1mb290ZXItY29sdW1uJyB9LCBwcm9wcyksXG4gICAgICAgIGNvbnRlbnRcbiAgICAgICkpO1xuICAgIH1cblxuICAgIHJldHVybiBmb290ZXJzO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRhYmxlRm9vdGVyO1xufSx7XCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcInJlYWN0XCI6MzE5fV0sOTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUb29sdGlwID0gcmVxdWlyZSgnLi4vdG9vbHRpcCcpO1xuXG52YXIgVGFibGVIZWFkZXJDb2x1bW4gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGFibGVIZWFkZXJDb2x1bW4nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgdG9vbHRpcDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2x1bW5OdW1iZXI6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBvbkNsaWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBob3ZlcmVkOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRhYmxlSGVhZGVyQ29sdW1uO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciB0aGVtZSA9IHRoaXMuZ2V0VGhlbWUoKTtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgZm9udFNpemU6IDEyLFxuICAgICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZyxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nLFxuICAgICAgICBoZWlnaHQ6IHRoZW1lLmhlaWdodCxcbiAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICAgIGNvbG9yOiB0aGlzLmdldFRoZW1lKCkudGV4dENvbG9yLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIG1hcmdpblRvcDogdGhlbWUuaGVpZ2h0XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9ICdtdWktdGFibGUtaGVhZGVyLWNvbHVtbic7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgdmFyIGhhbmRsZXJzID0ge1xuICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLl9vbk1vdXNlRW50ZXIsXG4gICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuX29uTW91c2VMZWF2ZSxcbiAgICAgIG9uQ2xpY2s6IHRoaXMuX29uQ2xpY2tcbiAgICB9O1xuICAgIHZhciB0b29sdGlwID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKHRoaXMucHJvcHMudG9vbHRpcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0b29sdGlwID0gUmVhY3QuY3JlYXRlRWxlbWVudChUb29sdGlwLCB7XG4gICAgICAgIGxhYmVsOiB0aGlzLnByb3BzLnRvb2x0aXAsXG4gICAgICAgIHNob3c6IHRoaXMuc3RhdGUuaG92ZXJlZCxcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLnRvb2x0aXApIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3RoJyxcbiAgICAgIF9leHRlbmRzKHtcbiAgICAgICAga2V5OiB0aGlzLnByb3BzLmtleSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnN0eWxlKVxuICAgICAgfSwgaGFuZGxlcnMpLFxuICAgICAgdG9vbHRpcCxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIF9vbk1vdXNlRW50ZXI6IGZ1bmN0aW9uIF9vbk1vdXNlRW50ZXIoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMudG9vbHRpcCAhPT0gdW5kZWZpbmVkKSB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogdHJ1ZSB9KTtcbiAgfSxcblxuICBfb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBfb25Nb3VzZUxlYXZlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnRvb2x0aXAgIT09IHVuZGVmaW5lZCkgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pO1xuICB9LFxuXG4gIF9vbkNsaWNrOiBmdW5jdGlvbiBfb25DbGljayhlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25DbGljaykgdGhpcy5wcm9wcy5vbkNsaWNrKGUsIHRoaXMucHJvcHMuY29sdW1uTnVtYmVyKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYWJsZUhlYWRlckNvbHVtbjtcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi90b29sdGlwXCI6MTE5LFwicmVhY3RcIjozMTl9XSw5NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBDaGVja2JveCA9IHJlcXVpcmUoJy4uL2NoZWNrYm94Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRhYmxlSGVhZGVyQ29sdW1uID0gcmVxdWlyZSgnLi90YWJsZS1oZWFkZXItY29sdW1uJyk7XG5cbnZhciBUYWJsZUhlYWRlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUYWJsZUhlYWRlcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjb2x1bW5zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICBzdXBlckhlYWRlckNvbHVtbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcbiAgICBvblNlbGVjdEFsbDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgZGlzcGxheVNlbGVjdEFsbDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZW5hYmxlU2VsZWN0QWxsOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBmaXhlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGxheVNlbGVjdEFsbDogdHJ1ZSxcbiAgICAgIGVuYWJsZVNlbGVjdEFsbDogdHJ1ZSxcbiAgICAgIGZpeGVkOiB0cnVlXG4gICAgfTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQudGFibGVIZWFkZXI7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiAnMXB4IHNvbGlkICcgKyB0aGlzLmdldFRoZW1lKCkuYm9yZGVyQ29sb3JcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gJ211aS10YWJsZS1oZWFkZXInO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAndGhlYWQnLFxuICAgICAgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSwgc3R5bGU6IHRoaXMuZ2V0U3R5bGVzKCkucm9vdCB9LFxuICAgICAgdGhpcy5fZ2V0U3VwZXJIZWFkZXJSb3coKSxcbiAgICAgIHRoaXMuX2dldEhlYWRlclJvdygpXG4gICAgKTtcbiAgfSxcblxuICBnZXRTdXBlckhlYWRlclJvdzogZnVuY3Rpb24gZ2V0U3VwZXJIZWFkZXJSb3coKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmcy5zdXBlckhlYWRlcjtcbiAgfSxcblxuICBnZXRIZWFkZXJSb3c6IGZ1bmN0aW9uIGdldEhlYWRlclJvdygpIHtcbiAgICByZXR1cm4gdGhpcy5yZWZzLmhlYWRlcjtcbiAgfSxcblxuICBfZ2V0U3VwZXJIZWFkZXJSb3c6IGZ1bmN0aW9uIF9nZXRTdXBlckhlYWRlclJvdygpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zdXBlckhlYWRlckNvbHVtbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICd0cicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnbXVpLXRhYmxlLXN1cGVyLWhlYWRlci1yb3cnLCByZWY6ICdzdXBlckhlYWRlcicgfSxcbiAgICAgICAgdGhpcy5fZ2V0Q29sdW1uSGVhZGVycyh0aGlzLnByb3BzLnN1cGVySGVhZGVyQ29sdW1ucywgJ3NoJylcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIF9nZXRIZWFkZXJSb3c6IGZ1bmN0aW9uIF9nZXRIZWFkZXJSb3coKSB7XG4gICAgdmFyIGNvbHVtbnMgPSB0aGlzLnByb3BzLmNvbHVtbnMuc2xpY2UoKTtcbiAgICBpZiAodGhpcy5wcm9wcy5kaXNwbGF5U2VsZWN0QWxsKSB7XG4gICAgICBjb2x1bW5zLnNwbGljZSgwLCAwLCB0aGlzLl9nZXRTZWxlY3RBbGxDaGVja2JveCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICd0cicsXG4gICAgICB7IGNsYXNzTmFtZTogJ211aS10YWJsZS1oZWFkZXItcm93JywgcmVmOiAnaGVhZGVyJyB9LFxuICAgICAgdGhpcy5fZ2V0SGVhZGVyQ29sdW1ucyhjb2x1bW5zLCAnaCcpXG4gICAgKTtcbiAgfSxcblxuICBfZ2V0SGVhZGVyQ29sdW1uczogZnVuY3Rpb24gX2dldEhlYWRlckNvbHVtbnMoaGVhZGVyRGF0YSwga2V5UHJlZml4KSB7XG4gICAgdmFyIGhlYWRlcnMgPSBbXTtcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBoZWFkZXJEYXRhLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIF9oZWFkZXJEYXRhJGluZGV4ID0gaGVhZGVyRGF0YVtpbmRleF07XG4gICAgICB2YXIgY29udGVudCA9IF9oZWFkZXJEYXRhJGluZGV4LmNvbnRlbnQ7XG4gICAgICB2YXIgdG9vbHRpcCA9IF9oZWFkZXJEYXRhJGluZGV4LnRvb2x0aXA7XG4gICAgICB2YXIgc3R5bGUgPSBfaGVhZGVyRGF0YSRpbmRleC5zdHlsZTtcblxuICAgICAgdmFyIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9oZWFkZXJEYXRhJGluZGV4LCBbJ2NvbnRlbnQnLCAndG9vbHRpcCcsICdzdHlsZSddKTtcblxuICAgICAgdmFyIGtleSA9IGtleVByZWZpeCArIGluZGV4O1xuXG4gICAgICBoZWFkZXJzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgVGFibGVIZWFkZXJDb2x1bW4sXG4gICAgICAgIF9leHRlbmRzKHsga2V5OiBrZXksIHN0eWxlOiBzdHlsZSwgdG9vbHRpcDogdG9vbHRpcCwgY29sdW1uTnVtYmVyOiBpbmRleCB9LCBwcm9wcyksXG4gICAgICAgIGNvbnRlbnRcbiAgICAgICkpO1xuICAgIH1cblxuICAgIHJldHVybiBoZWFkZXJzO1xuICB9LFxuXG4gIF9nZXRTZWxlY3RBbGxDaGVja2JveDogZnVuY3Rpb24gX2dldFNlbGVjdEFsbENoZWNrYm94KCkge1xuICAgIHZhciBjaGVja2JveCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2hlY2tib3gsIHtcbiAgICAgIG5hbWU6ICdzZWxlY3RhbGxjYicsXG4gICAgICB2YWx1ZTogJ3NlbGVjdGVkJyxcbiAgICAgIGRpc2FibGVkOiAhdGhpcy5wcm9wcy5lbmFibGVTZWxlY3RBbGwsXG4gICAgICBvbkNoZWNrOiB0aGlzLl9vblNlbGVjdEFsbCB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiBjaGVja2JveCxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHdpZHRoOiA3MixcbiAgICAgICAgcGFkZGluZ0xlZnQ6IDI0LFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IDI0XG4gICAgICB9XG4gICAgfTtcbiAgfSxcblxuICBfb25TZWxlY3RBbGw6IGZ1bmN0aW9uIF9vblNlbGVjdEFsbCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblNlbGVjdEFsbCkgdGhpcy5wcm9wcy5vblNlbGVjdEFsbCgpO1xuICB9LFxuXG4gIF9vbkNvbHVtbkNsaWNrOiBmdW5jdGlvbiBfb25Db2x1bW5DbGljayhlLCBjb2x1bW5OdW1iZXIpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNvbHVtbkNsaWNrKSB0aGlzLnByb3BzLm9uQ29sdW1uQ2xpY2soZSwgY29sdW1uTnVtYmVyKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYWJsZUhlYWRlcjtcbn0se1wiLi4vY2hlY2tib3hcIjoxNCxcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi90YWJsZS1oZWFkZXItY29sdW1uXCI6OTQsXCJyZWFjdFwiOjMxOX1dLDk2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG5cbnZhciBUYWJsZVJvd0NvbHVtbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUYWJsZVJvd0NvbHVtbicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjb2x1bW5OdW1iZXI6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBvbkNsaWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkhvdmVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkhvdmVyRXhpdDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgaG92ZXJhYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBob3ZlcmFibGU6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXJlZDogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC50YWJsZVJvd0NvbHVtbjtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgdGhlbWUgPSB0aGlzLmdldFRoZW1lKCk7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nLFxuICAgICAgaGVpZ2h0OiB0aGVtZS5oZWlnaHQsXG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgIGZvbnRTaXplOiAxMyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnXG4gICAgfTtcblxuICAgIGlmIChSZWFjdC5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKSA9PT0gMSAmJiAhaXNOYU4odGhpcy5wcm9wcy5jaGlsZHJlbikpIHtcbiAgICAgIHN0eWxlcy50ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9ICdtdWktdGFibGUtcm93LWNvbHVtbic7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG4gICAgdmFyIGhhbmRsZXJzID0ge1xuICAgICAgb25DbGljazogdGhpcy5fb25DbGljayxcbiAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5fb25Nb3VzZUVudGVyLFxuICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLl9vbk1vdXNlTGVhdmVcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAndGQnLFxuICAgICAgX2V4dGVuZHMoe1xuICAgICAgICBrZXk6IHRoaXMucHJvcHMua2V5LFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLCB0aGlzLnByb3BzLnN0eWxlKVxuICAgICAgfSwgaGFuZGxlcnMpLFxuICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgX29uQ2xpY2s6IGZ1bmN0aW9uIF9vbkNsaWNrKGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNsaWNrKSB0aGlzLnByb3BzLm9uQ2xpY2soZSwgdGhpcy5wcm9wcy5jb2x1bW5OdW1iZXIpO1xuICB9LFxuXG4gIF9vbk1vdXNlRW50ZXI6IGZ1bmN0aW9uIF9vbk1vdXNlRW50ZXIoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmhvdmVyYWJsZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IHRydWUgfSk7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vbkhvdmVyKSB0aGlzLnByb3BzLm9uSG92ZXIoZSwgdGhpcy5wcm9wcy5jb2x1bW5OdW1iZXIpO1xuICAgIH1cbiAgfSxcblxuICBfb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBfb25Nb3VzZUxlYXZlKGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5ob3ZlcmFibGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiBmYWxzZSB9KTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uSG92ZXJFeGl0KSB0aGlzLnByb3BzLm9uSG92ZXJFeGl0KGUsIHRoaXMucHJvcHMuY29sdW1uTnVtYmVyKTtcbiAgICB9XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVGFibGVSb3dDb2x1bW47XG59LHtcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwicmVhY3RcIjozMTl9XSw5NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgQ2hlY2tib3ggPSByZXF1aXJlKCcuLi9jaGVja2JveCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUYWJsZVJvd0NvbHVtbiA9IHJlcXVpcmUoJy4vdGFibGUtcm93LWNvbHVtbicpO1xuXG52YXIgVGFibGVSb3cgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGFibGVSb3cnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgcm93TnVtYmVyOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgY29sdW1uczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgb25Sb3dDbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DZWxsQ2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uUm93SG92ZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uUm93SG92ZXJFeGl0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkNlbGxIb3ZlcjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DZWxsSG92ZXJFeGl0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3RlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0YWJsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaXBlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgaG92ZXJhYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNwbGF5Qm9yZGVyOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNwbGF5Um93Q2hlY2tib3g6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgIHNlbGVjdGFibGU6IHRydWUsXG4gICAgICBzdHJpcGVkOiBmYWxzZSxcbiAgICAgIGhvdmVyYWJsZTogZmFsc2UsXG4gICAgICBkaXNwbGF5Qm9yZGVyOiB0cnVlLFxuICAgICAgZGlzcGxheVJvd0NoZWNrYm94OiB0cnVlXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXJlZDogZmFsc2VcbiAgICB9O1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC50YWJsZVJvdztcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgdGhlbWUgPSB0aGlzLmdldFRoZW1lKCk7XG4gICAgdmFyIGNlbGxCZ0NvbG9yID0gJ2luaGVyaXQnO1xuICAgIGlmICh0aGlzLnN0YXRlLmhvdmVyZWQpIHtcbiAgICAgIGNlbGxCZ0NvbG9yID0gdGhlbWUuaG92ZXJDb2xvcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgIGNlbGxCZ0NvbG9yID0gdGhlbWUuc2VsZWN0ZWRDb2xvcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuc3RyaXBlZCkge1xuICAgICAgY2VsbEJnQ29sb3IgPSB0aGVtZS5zdHJpcGVDb2xvcjtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBib3JkZXJCb3R0b206ICcxcHggc29saWQgJyArIHRoaXMuZ2V0VGhlbWUoKS5ib3JkZXJDb2xvclxuICAgICAgfSxcbiAgICAgIGNlbGw6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjZWxsQmdDb2xvcixcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS50ZXh0Q29sb3JcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCF0aGlzLnByb3BzLmRpc3BsYXlCb3JkZXIpIHtcbiAgICAgIHN0eWxlcy5yb290LmJvcmRlckJvdHRvbSA9ICcnO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9ICdtdWktdGFibGUtcm93JztcbiAgICB2YXIgY29sdW1ucyA9IHRoaXMucHJvcHMuY29sdW1ucy5zbGljZSgpO1xuICAgIGlmICh0aGlzLnByb3BzLmRpc3BsYXlSb3dDaGVja2JveCkge1xuICAgICAgY29sdW1ucy5zcGxpY2UoMCwgMCwgdGhpcy5fZ2V0Um93Q2hlY2tib3goKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAndHInLFxuICAgICAgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSwgc3R5bGU6IHRoaXMuZ2V0U3R5bGVzKCkucm9vdCB9LFxuICAgICAgdGhpcy5fZ2V0Q29sdW1ucyhjb2x1bW5zKVxuICAgICk7XG4gIH0sXG5cbiAgX2dldENvbHVtbnM6IGZ1bmN0aW9uIF9nZXRDb2x1bW5zKGNvbHVtbnMpIHtcbiAgICB2YXIgcm93Q29sdW1ucyA9IFtdO1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGNvbHVtbnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIga2V5ID0gdGhpcy5wcm9wcy5yb3dOdW1iZXIgKyAnLScgKyBpbmRleDtcbiAgICAgIHZhciBfY29sdW1ucyRpbmRleCA9IGNvbHVtbnNbaW5kZXhdO1xuICAgICAgdmFyIGNvbnRlbnQgPSBfY29sdW1ucyRpbmRleC5jb250ZW50O1xuICAgICAgdmFyIHN0eWxlID0gX2NvbHVtbnMkaW5kZXguc3R5bGU7XG5cbiAgICAgIGlmIChjb250ZW50ID09PSB1bmRlZmluZWQpIGNvbnRlbnQgPSBjb2x1bW5zW2luZGV4XTtcblxuICAgICAgdmFyIGNvbHVtbkNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFRhYmxlUm93Q29sdW1uLFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgY29sdW1uTnVtYmVyOiBpbmRleCxcbiAgICAgICAgICBzdHlsZTogdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMuY2VsbCwgc3R5bGUpLFxuICAgICAgICAgIGhvdmVyYWJsZTogdGhpcy5wcm9wcy5ob3ZlcmFibGUsXG4gICAgICAgICAgb25DbGljazogdGhpcy5fb25DZWxsQ2xpY2ssXG4gICAgICAgICAgb25Ib3ZlcjogdGhpcy5fb25DZWxsSG92ZXIsXG4gICAgICAgICAgb25Ib3ZlckV4aXQ6IHRoaXMuX29uQ2VsbEhvdmVyRXhpdCB9LFxuICAgICAgICBjb250ZW50XG4gICAgICApO1xuXG4gICAgICByb3dDb2x1bW5zLnB1c2goY29sdW1uQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93Q29sdW1ucztcbiAgfSxcblxuICBfZ2V0Um93Q2hlY2tib3g6IGZ1bmN0aW9uIF9nZXRSb3dDaGVja2JveCgpIHtcbiAgICB2YXIga2V5ID0gdGhpcy5wcm9wcy5yb3dOdW1iZXIgKyAnLWNiJztcbiAgICB2YXIgY2hlY2tib3ggPSBSZWFjdC5jcmVhdGVFbGVtZW50KENoZWNrYm94LCB7XG4gICAgICByZWY6ICdyb3dTZWxlY3RDQicsXG4gICAgICBuYW1lOiBrZXksXG4gICAgICB2YWx1ZTogJ3NlbGVjdGVkJyxcbiAgICAgIGRpc2FibGVkOiAhdGhpcy5wcm9wcy5zZWxlY3RhYmxlLFxuICAgICAgZGVmYXVsdENoZWNrZWQ6IHRoaXMucHJvcHMuc2VsZWN0ZWQgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29udGVudDogY2hlY2tib3gsXG4gICAgICBzdHlsZToge1xuICAgICAgICB3aWR0aDogNzIsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAyNCxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAyNFxuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgX29uUm93Q2xpY2s6IGZ1bmN0aW9uIF9vblJvd0NsaWNrKGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblJvd0NsaWNrKSB0aGlzLnByb3BzLm9uUm93Q2xpY2soZSwgdGhpcy5wcm9wcy5yb3dOdW1iZXIpO1xuICB9LFxuXG4gIF9vblJvd0hvdmVyOiBmdW5jdGlvbiBfb25Sb3dIb3ZlcihlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Sb3dIb3ZlcikgdGhpcy5wcm9wcy5vblJvd0hvdmVyKGUsIHRoaXMucHJvcHMucm93TnVtYmVyKTtcbiAgfSxcblxuICBfb25Sb3dIb3ZlckV4aXQ6IGZ1bmN0aW9uIF9vblJvd0hvdmVyRXhpdChlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Sb3dIb3ZlckV4aXQpIHRoaXMucHJvcHMub25Sb3dIb3ZlckV4aXQoZSwgdGhpcy5wcm9wcy5yb3dOdW1iZXIpO1xuICB9LFxuXG4gIF9vbkNlbGxDbGljazogZnVuY3Rpb24gX29uQ2VsbENsaWNrKGUsIGNvbHVtbkluZGV4KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0YWJsZSAmJiB0aGlzLnByb3BzLm9uQ2VsbENsaWNrKSB0aGlzLnByb3BzLm9uQ2VsbENsaWNrKGUsIHRoaXMucHJvcHMucm93TnVtYmVyLCBjb2x1bW5JbmRleCk7XG4gICAgaWYgKHRoaXMucmVmcy5yb3dTZWxlY3RDQiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnJlZnMucm93U2VsZWN0Q0Iuc2V0Q2hlY2tlZCghdGhpcy5yZWZzLnJvd1NlbGVjdENCLmlzQ2hlY2tlZCgpKTtcbiAgICAgIGUuY3RybEtleSA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX29uUm93Q2xpY2soZSk7XG4gIH0sXG5cbiAgX29uQ2VsbEhvdmVyOiBmdW5jdGlvbiBfb25DZWxsSG92ZXIoZSwgY29sdW1uSW5kZXgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5ob3ZlcmFibGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pO1xuICAgICAgaWYgKHRoaXMucHJvcHMub25DZWxsSG92ZXIpIHRoaXMucHJvcHMub25DZWxsSG92ZXIoZSwgdGhpcy5wcm9wcy5yb3dOdW1iZXIsIGNvbHVtbkluZGV4KTtcbiAgICAgIHRoaXMuX29uUm93SG92ZXIoZSk7XG4gICAgfVxuICB9LFxuXG4gIF9vbkNlbGxIb3ZlckV4aXQ6IGZ1bmN0aW9uIF9vbkNlbGxIb3ZlckV4aXQoZSwgY29sdW1uSW5kZXgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5ob3ZlcmFibGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiBmYWxzZSB9KTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2VsbEhvdmVyRXhpdCkgdGhpcy5wcm9wcy5vbkNlbGxIb3ZlckV4aXQoZSwgdGhpcy5wcm9wcy5yb3dOdW1iZXIsIGNvbHVtbkluZGV4KTtcbiAgICAgIHRoaXMuX29uUm93SG92ZXJFeGl0KGUpO1xuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYWJsZVJvdztcbn0se1wiLi4vY2hlY2tib3hcIjoxNCxcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi90YWJsZS1yb3ctY29sdW1uXCI6OTYsXCJyZWFjdFwiOjMxOX1dLDk4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQ2xpY2tBd2F5YWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9jbGljay1hd2F5YWJsZScpO1xudmFyIFRhYmxlSGVhZGVyID0gcmVxdWlyZSgnLi90YWJsZS1oZWFkZXInKTtcbnZhciBUYWJsZVJvdyA9IHJlcXVpcmUoJy4vdGFibGUtcm93Jyk7XG52YXIgVGFibGVGb290ZXIgPSByZXF1aXJlKCcuL3RhYmxlLWZvb3RlcicpO1xuXG52YXIgVGFibGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGFibGUnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGUsIENsaWNrQXdheWFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgcm93RGF0YTogUmVhY3QuUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgY2FuU2VsZWN0QWxsOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBjb2x1bW5PcmRlcjogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxuICAgIGRlZmF1bHRDb2x1bW5XaWR0aDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZXNlbGVjdE9uQ2xpY2thd2F5OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNwbGF5Um93Q2hlY2tib3g6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGRpc3BsYXlTZWxlY3RBbGw6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgIGZpeGVkRm9vdGVyOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBmaXhlZEhlYWRlcjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZm9vdGVyOiBSZWFjdC5Qcm9wVHlwZXMuZWxlbWVudCxcbiAgICBmb290ZXJDb2x1bW5zOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGhlYWRlcjogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXG4gICAgaGVhZGVyQ29sdW1uczogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBoZWlnaHQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgbXVsdGlTZWxlY3RhYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBvbkNlbGxDbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DZWxsSG92ZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uQ2VsbEhvdmVyRXhpdDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Sb3dIb3ZlcjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Sb3dIb3ZlckV4aXQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uUm93U2VsZWN0aW9uOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBwcmVTY2FuUm93RGF0YTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2VsZWN0YWJsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd1Jvd0hvdmVyOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpcGVkUm93czogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FuU2VsZWN0QWxsOiBmYWxzZSxcbiAgICAgIGRlZmF1bHRDb2x1bW5XaWR0aDogJzUwcHgnLFxuICAgICAgZGVzZWxlY3RPbkNsaWNrYXdheTogdHJ1ZSxcbiAgICAgIGRpc3BsYXlSb3dDaGVja2JveDogdHJ1ZSxcbiAgICAgIGRpc3BsYXlTZWxlY3RBbGw6IHRydWUsXG4gICAgICBmaXhlZEZvb3RlcjogdHJ1ZSxcbiAgICAgIGZpeGVkSGVhZGVyOiB0cnVlLFxuICAgICAgaGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICBtdWx0aVNlbGVjdGFibGU6IGZhbHNlLFxuICAgICAgcHJlU2NhblJvd0RhdGE6IHRydWUsXG4gICAgICBzZWxlY3RhYmxlOiB0cnVlLFxuICAgICAgc2hvd1Jvd0hvdmVyOiBmYWxzZSxcbiAgICAgIHN0cmlwZWRSb3dzOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgLy8gRGV0ZXJtaW5lIHdoYXQgcm93cyBhcmUgJ3ByZS1zZWxlY3RlZCcuXG4gICAgdmFyIHByZVNlbGVjdGVkUm93cyA9IFtdO1xuICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGFibGUgJiYgdGhpcy5wcm9wcy5wcmVTY2FuUm93RGF0YSkge1xuICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgdGhpcy5wcm9wcy5yb3dEYXRhLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgdmFyIHJvdyA9IHRoaXMucHJvcHMucm93RGF0YVtpZHhdO1xuICAgICAgICBpZiAocm93LnNlbGVjdGVkICE9PSB1bmRlZmluZWQgJiYgcm93LnNlbGVjdGVkKSB7XG4gICAgICAgICAgcHJlU2VsZWN0ZWRSb3dzLnB1c2goaWR4KTtcblxuICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5tdWx0aVNlbGVjdGFibGUpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RlZFJvd3M6IHByZVNlbGVjdGVkUm93c1xuICAgIH07XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRhYmxlO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgcGFkZGluZzogJzAgJyArIHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nLmRlc2t0b3BHdXR0ZXIgKyAncHgnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBib3JkZXJDb2xsYXBzZTogJ2NvbGxhcHNlJyxcbiAgICAgICAgYm9yZGVyU3BhY2luZzogMCxcbiAgICAgICAgdGFibGVMYXlvdXQ6ICdmaXhlZCdcbiAgICAgIH0sXG4gICAgICBib2R5VGFibGU6IHtcbiAgICAgICAgaGVpZ2h0OiB0aGlzLnByb3BzLmZpeGVkSGVhZGVyIHx8IHRoaXMucHJvcHMuZml4ZWRGb290ZXIgPyB0aGlzLnByb3BzLmhlaWdodCA6ICdhdXRvJyxcbiAgICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bydcbiAgICAgIH0sXG4gICAgICB0YWJsZVdyYXBwZXI6IHtcbiAgICAgICAgaGVpZ2h0OiB0aGlzLnByb3BzLmZpeGVkSGVhZGVyIHx8IHRoaXMucHJvcHMuZml4ZWRGb290ZXIgPyAnYXV0bycgOiB0aGlzLnByb3BzLmhlaWdodCxcbiAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJ1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIGNvbXBvbmVudENsaWNrQXdheTogZnVuY3Rpb24gY29tcG9uZW50Q2xpY2tBd2F5KCkge1xuICAgIGlmICh0aGlzLnByb3BzLmRlc2VsZWN0T25DbGlja2F3YXkgJiYgdGhpcy5zdGF0ZS5zZWxlY3RlZFJvd3MubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRSb3dzOiBbXSB9KTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9ICdtdWktdGFibGUnO1xuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIHRIZWFkID0gdGhpcy5fZ2V0SGVhZGVyKCk7XG4gICAgdmFyIHRCb2R5ID0gdGhpcy5fZ2V0Qm9keSgpO1xuICAgIHZhciB0Rm9vdCA9IHRoaXMuX2dldEZvb3RlcigpO1xuXG4gICAgdmFyIGhlYWRlclRhYmxlID0gdW5kZWZpbmVkLFxuICAgICAgICBmb290ZXJUYWJsZSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5saW5lSGVhZGVyID0gdW5kZWZpbmVkLFxuICAgICAgICBpbmxpbmVGb290ZXIgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHRIZWFkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmZpeGVkSGVhZGVyKSB7XG4gICAgICAgIGhlYWRlclRhYmxlID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ211aS1oZWFkZXItdGFibGUnIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICd0YWJsZScsXG4gICAgICAgICAgICB7IHJlZjogJ2hlYWRlclRhYmxlJywgY2xhc3NOYW1lOiBjbGFzc05hbWUsIHN0eWxlOiBzdHlsZXMucm9vdCB9LFxuICAgICAgICAgICAgdEhlYWRcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmxpbmVIZWFkZXIgPSB0SGVhZDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRGb290ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmZpeGVkRm9vdGVyKSB7XG4gICAgICAgIGZvb3RlclRhYmxlID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ211aS1mb290ZXItdGFibGUnIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICd0YWJsZScsXG4gICAgICAgICAgICB7IHJlZjogJ2Zvb3RlclRhYmxlJywgY2xhc3NOYW1lOiBjbGFzc05hbWUsIHN0eWxlOiBzdHlsZXMucm9vdCB9LFxuICAgICAgICAgICAgdEZvb3RcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmxpbmVGb290ZXIgPSB0Rm9vdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBjbGFzc05hbWU6ICdtdWktdGFibGUtd3JhcHBlcicsIHN0eWxlOiBzdHlsZXMudGFibGVXcmFwcGVyIH0sXG4gICAgICBoZWFkZXJUYWJsZSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ211aS1ib2R5LXRhYmxlJywgc3R5bGU6IHN0eWxlcy5ib2R5VGFibGUgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAndGFibGUnLFxuICAgICAgICAgIHsgcmVmOiAnYm9keVRhYmxlJywgY2xhc3NOYW1lOiBjbGFzc05hbWUsIHN0eWxlOiBzdHlsZXMucm9vdCB9LFxuICAgICAgICAgIGlubGluZUhlYWRlcixcbiAgICAgICAgICBpbmxpbmVGb290ZXIsXG4gICAgICAgICAgdEJvZHlcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIGZvb3RlclRhYmxlXG4gICAgKTtcbiAgfSxcblxuICBfZ2V0SGVhZGVyOiBmdW5jdGlvbiBfZ2V0SGVhZGVyKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmhlYWRlcikgcmV0dXJuIHRoaXMucHJvcHMuaGVhZGVyO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuaGVhZGVyQ29sdW1ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgb3JkZXJlZEhlYWRlckNvbHVtbnMgPSB0aGlzLl9vcmRlckNvbHVtbkJhc2VkRGF0YSh0aGlzLnByb3BzLmhlYWRlckNvbHVtbnMpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFibGVIZWFkZXIsIHtcbiAgICAgICAgY29sdW1uczogb3JkZXJlZEhlYWRlckNvbHVtbnMsXG4gICAgICAgIGVuYWJsZVNlbGVjdEFsbDogdGhpcy5wcm9wcy5jYW5TZWxlY3RBbGwgJiYgdGhpcy5wcm9wcy5zZWxlY3RhYmxlLFxuICAgICAgICBkaXNwbGF5U2VsZWN0QWxsOiB0aGlzLnByb3BzLmRpc3BsYXlTZWxlY3RBbGwsXG4gICAgICAgIG9uU2VsZWN0QWxsOiB0aGlzLl9vblNlbGVjdEFsbCB9KTtcbiAgICB9XG4gIH0sXG5cbiAgX2dldEZvb3RlcjogZnVuY3Rpb24gX2dldEZvb3RlcigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5mb290ZXIpIHJldHVybiB0aGlzLnByb3BzLmZvb3RlcjtcblxuICAgIGlmICh0aGlzLnByb3BzLmZvb3RlckNvbHVtbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIG9yZGVyZWRGb290ZXJDb2x1bW5zID0gdGhpcy5fb3JkZXJDb2x1bW5CYXNlZERhdGEodGhpcy5wcm9wcy5mb290ZXJDb2x1bW5zKTtcbiAgICAgIGlmICh0aGlzLnByb3BzLmRpc3BsYXlTZWxlY3RBbGwpIHtcbiAgICAgICAgb3JkZXJlZEZvb3RlckNvbHVtbnMuc3BsaWNlKDAsIDAsIHsgY29udGVudDogJycgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlRm9vdGVyLCB7IGNvbHVtbnM6IG9yZGVyZWRGb290ZXJDb2x1bW5zIH0pO1xuICAgIH1cbiAgfSxcblxuICBfZ2V0Qm9keTogZnVuY3Rpb24gX2dldEJvZHkoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBib2R5ID0gdGhpcy5fb3JkZXJDb2x1bW5CYXNlZERhdGEodGhpcy5wcm9wcy5yb3dEYXRhLCBmdW5jdGlvbiAocm93RGF0YSwgcm93TnVtYmVyKSB7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBfdGhpcy5faXNSb3dTZWxlY3RlZChyb3dOdW1iZXIpO1xuICAgICAgdmFyIHN0cmlwZWQgPSBfdGhpcy5wcm9wcy5zdHJpcGVkUm93cyAmJiByb3dOdW1iZXIgJSAyID09PSAwO1xuICAgICAgdmFyIGJvcmRlciA9IHRydWU7XG4gICAgICBpZiAocm93TnVtYmVyID09PSBfdGhpcy5wcm9wcy5yb3dEYXRhLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgYm9yZGVyID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciByb3cgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlUm93LCB7XG4gICAgICAgIGtleTogJ3ItJyArIHJvd051bWJlcixcbiAgICAgICAgcm93TnVtYmVyOiByb3dOdW1iZXIsXG4gICAgICAgIGNvbHVtbnM6IHJvd0RhdGEsXG4gICAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZCxcbiAgICAgICAgc3RyaXBlZDogc3RyaXBlZCxcbiAgICAgICAgZGlzcGxheVJvd0NoZWNrYm94OiBfdGhpcy5wcm9wcy5kaXNwbGF5Um93Q2hlY2tib3gsXG4gICAgICAgIGhvdmVyYWJsZTogX3RoaXMucHJvcHMuc2hvd1Jvd0hvdmVyLFxuICAgICAgICBkaXNwbGF5Qm9yZGVyOiBib3JkZXIsXG4gICAgICAgIHNlbGVjdGFibGU6IF90aGlzLnByb3BzLnNlbGVjdGFibGUsXG4gICAgICAgIG9uUm93Q2xpY2s6IF90aGlzLl9oYW5kbGVSb3dDbGljayxcbiAgICAgICAgb25DZWxsQ2xpY2s6IF90aGlzLl9oYW5kbGVDZWxsQ2xpY2ssXG4gICAgICAgIG9uUm93SG92ZXI6IF90aGlzLl9oYW5kbGVSb3dIb3ZlcixcbiAgICAgICAgb25Sb3dIb3ZlckV4aXQ6IF90aGlzLl9oYW5kbGVSb3dIb3ZlckV4aXQsXG4gICAgICAgIG9uQ2VsbEhvdmVyOiBfdGhpcy5faGFuZGxlQ2VsbEhvdmVyLFxuICAgICAgICBvbkNlbGxIb3ZlckV4aXQ6IF90aGlzLl9oYW5kbGVDZWxsSG92ZXJFeGl0IH0pO1xuXG4gICAgICByZXR1cm4gcm93O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAndGJvZHknLFxuICAgICAgeyBzdHlsZTogeyBoZWlnaHQ6IHRoaXMucHJvcHMuaGVpZ2h0IH0gfSxcbiAgICAgIGJvZHlcbiAgICApO1xuICB9LFxuXG4gIF9vcmRlckNvbHVtbkJhc2VkRGF0YTogZnVuY3Rpb24gX29yZGVyQ29sdW1uQmFzZWREYXRhKGNvbHVtbkJhc2VkRGF0YSwgY2IpIHtcbiAgICAvLyBJZiB3ZSBkbyBub3QgaGF2ZSBhIGNvbHVtbk9yZGVyLCByZXR1cm4uXG4gICAgaWYgKHRoaXMucHJvcHMuY29sdW1uT3JkZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgdmFyIGRhdGEgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoY29sdW1uQmFzZWREYXRhKSAhPT0gJ1tvYmplY3QgQXJyYXldJyA/IFtjb2x1bW5CYXNlZERhdGFdIDogY29sdW1uQmFzZWREYXRhO1xuICAgIHZhciBvcmRlcmVkRGF0YSA9IFtdO1xuXG4gICAgZm9yICh2YXIgcm93SWR4ID0gMDsgcm93SWR4IDwgZGF0YS5sZW5ndGg7IHJvd0lkeCsrKSB7XG4gICAgICB2YXIgcm93RGF0YSA9IGRhdGFbcm93SWR4XTtcbiAgICAgIHZhciBvcmRlcmVkUm93RGF0YSA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBjb2xJZHggPSAwOyBjb2xJZHggPCB0aGlzLnByb3BzLmNvbHVtbk9yZGVyLmxlbmd0aDsgY29sSWR4KyspIHtcbiAgICAgICAgdmFyIGNvbHVtbklkID0gdGhpcy5wcm9wcy5jb2x1bW5PcmRlcltjb2xJZHhdO1xuICAgICAgICB2YXIgY29sdW1uRGF0YSA9IHJvd0RhdGFbY29sdW1uSWRdIHx8IHt9O1xuXG4gICAgICAgIG9yZGVyZWRSb3dEYXRhLnB1c2goY29sdW1uRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcmRlcmVkUm93RGF0YS5sZW5ndGgpIHtcbiAgICAgICAgcm93RGF0YSA9IG9yZGVyZWRSb3dEYXRhO1xuICAgICAgfVxuXG4gICAgICAvLyBGaXhlZCB0YWJsZSBsYXlvdXQgb25seSByZXF1aXJlcyB3aWR0aHMgb24gZmlyc3Qgcm93LlxuICAgICAgaWYgKHJvd0lkeCA9PT0gMSAmJiBkYXRhLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcm93RGF0YSA9IHRoaXMuX3NldENvbHVtbldpZHRocyhyb3dEYXRhKTtcbiAgICAgIH1cblxuICAgICAgb3JkZXJlZERhdGEucHVzaChjYiAhPT0gdW5kZWZpbmVkID8gY2Iocm93RGF0YSwgcm93SWR4KSA6IHJvd0RhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhLmxlbmd0aCA9PT0gMSA/IG9yZGVyZWREYXRhWzBdIDogb3JkZXJlZERhdGE7XG4gIH0sXG5cbiAgX3NldENvbHVtbldpZHRoczogZnVuY3Rpb24gX3NldENvbHVtbldpZHRocyhjb2x1bW5EYXRhKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBjb2x1bW5EYXRhLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgaWYgKGNvbHVtbi5zdHlsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbHVtbi5zdHlsZSA9IHtcbiAgICAgICAgICB3aWR0aDogX3RoaXMyLnByb3BzLmRlZmF1bHRDb2x1bW5XaWR0aCxcbiAgICAgICAgICBtYXhXaWR0aDogX3RoaXMyLnByb3BzLmRlZmF1bHRDb2x1bW5XaWR0aFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNvbHVtbi5zdHlsZS53aWR0aCA9PT0gdW5kZWZpbmVkKSBjb2x1bW4uc3R5bGUud2lkdGggPSBfdGhpczIucHJvcHMuZGVmYXVsdENvbHVtbldpZHRoO1xuICAgICAgICBpZiAoY29sdW1uLnN0eWxlLm1heFdpZHRoID09PSB1bmRlZmluZWQpIGNvbHVtbi5zdHlsZS5tYXhXaWR0aCA9IF90aGlzMi5wcm9wcy5kZWZhdWx0Q29sdW1uV2lkdGg7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29sdW1uRGF0YTtcbiAgfSxcblxuICBfaXNSb3dTZWxlY3RlZDogZnVuY3Rpb24gX2lzUm93U2VsZWN0ZWQocm93TnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuYWxsUm93c1NlbGVjdGVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3RhdGUuc2VsZWN0ZWRSb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VsZWN0aW9uID0gdGhpcy5zdGF0ZS5zZWxlY3RlZFJvd3NbaV07XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0aW9uID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAodGhpcy5faXNWYWx1ZUluUmFuZ2Uocm93TnVtYmVyLCBzZWxlY3Rpb24pKSByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZWxlY3Rpb24gPT09IHJvd051bWJlcikgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIF9pc1ZhbHVlSW5SYW5nZTogZnVuY3Rpb24gX2lzVmFsdWVJblJhbmdlKHZhbHVlLCByYW5nZSkge1xuICAgIGlmIChyYW5nZS5zdGFydCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSByYW5nZS5lbmQgfHwgcmFuZ2UuZW5kIDw9IHZhbHVlICYmIHZhbHVlIDw9IHJhbmdlLnN0YXJ0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgX2hhbmRsZVJvd0NsaWNrOiBmdW5jdGlvbiBfaGFuZGxlUm93Q2xpY2soZSwgcm93TnVtYmVyKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGFibGUpIHtcbiAgICAgIC8vIFByZXZlbnQgdGV4dCBzZWxlY3Rpb24gd2hpbGUgc2VsZWN0aW5nIHJvd3MuXG4gICAgICB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICB0aGlzLl9wcm9jZXNzUm93U2VsZWN0aW9uKGUsIHJvd051bWJlcik7XG4gICAgfVxuICB9LFxuXG4gIF9wcm9jZXNzUm93U2VsZWN0aW9uOiBmdW5jdGlvbiBfcHJvY2Vzc1Jvd1NlbGVjdGlvbihlLCByb3dOdW1iZXIpIHtcbiAgICB2YXIgc2VsZWN0ZWRSb3dzID0gdGhpcy5zdGF0ZS5zZWxlY3RlZFJvd3M7XG5cbiAgICBpZiAoZS5zaGlmdEtleSAmJiB0aGlzLnByb3BzLm11bHRpU2VsZWN0YWJsZSAmJiBzZWxlY3RlZFJvd3MubGVuZ3RoKSB7XG4gICAgICB2YXIgbGFzdFNlbGVjdGlvbiA9IHNlbGVjdGVkUm93c1tzZWxlY3RlZFJvd3MubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGFzdFNlbGVjdGlvbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbGFzdFNlbGVjdGlvbi5lbmQgPSByb3dOdW1iZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZFJvd3MucHVzaCh7IHN0YXJ0OiBsYXN0U2VsZWN0aW9uLCBlbmQ6IHJvd051bWJlciB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKChlLmN0cmxLZXkgJiYgIWUubWV0YUtleSB8fCBlLm1ldGFLZXkgJiYgIWUuY3RybEtleSkgJiYgdGhpcy5wcm9wcy5tdWx0aVNlbGVjdGFibGUpIHtcbiAgICAgIHZhciBpZHggPSBzZWxlY3RlZFJvd3MuaW5kZXhPZihyb3dOdW1iZXIpO1xuICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgc2VsZWN0ZWRSb3dzLnB1c2gocm93TnVtYmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkUm93cy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNlbGVjdGVkUm93cy5sZW5ndGggPT09IDEgJiYgc2VsZWN0ZWRSb3dzWzBdID09PSByb3dOdW1iZXIpIHtcbiAgICAgICAgc2VsZWN0ZWRSb3dzID0gW107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZFJvd3MgPSBbcm93TnVtYmVyXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRSb3dzOiBzZWxlY3RlZFJvd3MgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25Sb3dTZWxlY3Rpb24pIHRoaXMucHJvcHMub25Sb3dTZWxlY3Rpb24oc2VsZWN0ZWRSb3dzKTtcbiAgfSxcblxuICBfaGFuZGxlQ2VsbENsaWNrOiBmdW5jdGlvbiBfaGFuZGxlQ2VsbENsaWNrKGUsIHJvd051bWJlciwgY29sdW1uTnVtYmVyKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNlbGxDbGljaykgdGhpcy5wcm9wcy5vbkNlbGxDbGljayhyb3dOdW1iZXIsIHRoaXMuX2dldENvbHVtbklkKGNvbHVtbk51bWJlcikpO1xuICB9LFxuXG4gIF9oYW5kbGVSb3dIb3ZlcjogZnVuY3Rpb24gX2hhbmRsZVJvd0hvdmVyKGUsIHJvd051bWJlcikge1xuICAgIGlmICh0aGlzLnByb3BzLm9uUm93SG92ZXIpIHRoaXMucHJvcHMub25Sb3dIb3Zlcihyb3dOdW1iZXIpO1xuICB9LFxuXG4gIF9oYW5kbGVSb3dIb3ZlckV4aXQ6IGZ1bmN0aW9uIF9oYW5kbGVSb3dIb3ZlckV4aXQoZSwgcm93TnVtYmVyKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Sb3dIb3ZlckV4aXQpIHRoaXMucHJvcHMub25Sb3dIb3ZlckV4aXQocm93TnVtYmVyKTtcbiAgfSxcblxuICBfaGFuZGxlQ2VsbEhvdmVyOiBmdW5jdGlvbiBfaGFuZGxlQ2VsbEhvdmVyKGUsIHJvd051bWJlciwgY29sdW1uTnVtYmVyKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25DZWxsSG92ZXIpIHRoaXMucHJvcHMub25DZWxsSG92ZXIocm93TnVtYmVyLCB0aGlzLl9nZXRDb2x1bW5JZChjb2x1bW5OdW1iZXIpKTtcbiAgICB0aGlzLl9oYW5kbGVSb3dIb3ZlcihlLCByb3dOdW1iZXIpO1xuICB9LFxuXG4gIF9oYW5kbGVDZWxsSG92ZXJFeGl0OiBmdW5jdGlvbiBfaGFuZGxlQ2VsbEhvdmVyRXhpdChlLCByb3dOdW1iZXIsIGNvbHVtbk51bWJlcikge1xuICAgIGlmICh0aGlzLnByb3BzLm9uQ2VsbEhvdmVyRXhpdCkgdGhpcy5wcm9wcy5vbkNlbGxIb3ZlckV4aXQocm93TnVtYmVyLCB0aGlzLl9nZXRDb2x1bW5JZChjb2x1bW5OdW1iZXIpKTtcbiAgICB0aGlzLl9oYW5kbGVSb3dIb3ZlckV4aXQoZSwgcm93TnVtYmVyKTtcbiAgfSxcblxuICBfb25TZWxlY3RBbGw6IGZ1bmN0aW9uIF9vblNlbGVjdEFsbCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWxsUm93c1NlbGVjdGVkOiAhdGhpcy5zdGF0ZS5hbGxSb3dzU2VsZWN0ZWQgfSk7XG4gIH0sXG5cbiAgX2dldENvbHVtbklkOiBmdW5jdGlvbiBfZ2V0Q29sdW1uSWQoY29sdW1uTnVtYmVyKSB7XG4gICAgdmFyIGNvbHVtbklkID0gY29sdW1uTnVtYmVyO1xuICAgIGlmICh0aGlzLnByb3BzLmRpc3BsYXlSb3dDaGVja2JveCkgY29sdW1uSWQtLTtcbiAgICBjb2x1bW5JZCA9IHRoaXMucHJvcHMuY29sdW1uT3JkZXIubGVuZ3RoID8gdGhpcy5wcm9wcy5jb2x1bW5PcmRlcltjb2x1bW5JZF0gOiBjb2x1bW5JZDtcblxuICAgIHJldHVybiBjb2x1bW5JZDtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYWJsZTtcbn0se1wiLi4vbWl4aW5zL2NsaWNrLWF3YXlhYmxlXCI6NTEsXCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4vdGFibGUtZm9vdGVyXCI6OTMsXCIuL3RhYmxlLWhlYWRlclwiOjk1LFwiLi90YWJsZS1yb3dcIjo5NyxcInJlYWN0XCI6MzE5fV0sOTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBDb2xvcnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvY29sb3JzLmpzJyk7XG5cbnZhciBUYWIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGFiJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGhhbmRsZVRvdWNoVGFwOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3RlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgd2lkdGg6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmdcbiAgfSxcblxuICBoYW5kbGVUb3VjaFRhcDogZnVuY3Rpb24gaGFuZGxlVG91Y2hUYXAoKSB7XG4gICAgdGhpcy5wcm9wcy5oYW5kbGVUb3VjaFRhcCh0aGlzLnByb3BzLnRhYkluZGV4LCB0aGlzKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgIGhlaWdodDogNDgsXG4gICAgICBjb2xvcjogQ29sb3JzLndoaXRlLFxuICAgICAgb3BhY2l0eTogMC42LFxuICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgZm9udFdlaWdodDogJzUwMCcsXG4gICAgICB3aGl0ZVNwYWNlOiAnaW5pdGlhbCcsXG4gICAgICBmb250RmFtaWx5OiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29udGVudEZvbnRGYW1pbHksXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIHdpZHRoOiB0aGlzLnByb3BzLndpZHRoXG4gICAgfSwgdGhpcy5wcm9wcy5zdHlsZSk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RlZCkgc3R5bGVzLm9wYWNpdHkgPSAnMSc7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLCBvblRvdWNoVGFwOiB0aGlzLmhhbmRsZVRvdWNoVGFwLCByb3V0ZU5hbWU6IHRoaXMucHJvcHMucm91dGUgfSxcbiAgICAgIHRoaXMucHJvcHMubGFiZWxcbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRhYjtcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi9zdHlsZXMvY29sb3JzLmpzXCI6NzEsXCJyZWFjdFwiOjMxOX1dLDEwMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBUYWJUZW1wbGF0ZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUYWJUZW1wbGF0ZScsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgICdoZWlnaHQnOiAwLFxuICAgICAgJ292ZXJmbG93JzogJ2hpZGRlbicsXG4gICAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgICAncG9zaXRpb24nOiAncmVsYXRpdmUnLFxuICAgICAgJ3RleHRBbGlnbic6ICdpbml0aWFsJ1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RlZCkge1xuICAgICAgZGVsZXRlIHN0eWxlcy5oZWlnaHQ7XG4gICAgICBkZWxldGUgc3R5bGVzLm92ZXJmbG93O1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMgfSxcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYWJUZW1wbGF0ZTtcbn0se1wicmVhY3RcIjozMTl9XSwxMDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBUYWJUZW1wbGF0ZSA9IHJlcXVpcmUoJy4vdGFiVGVtcGxhdGUnKTtcbnZhciBJbmtCYXIgPSByZXF1aXJlKCcuLi9pbmstYmFyJyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIEV2ZW50cyA9IHJlcXVpcmUoJy4uL3V0aWxzL2V2ZW50cycpO1xuXG52YXIgVGFicyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUYWJzJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGluaXRpYWxTZWxlY3RlZEluZGV4OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIG9uQWN0aXZlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICB0YWJXaWR0aDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICB0YWJJdGVtQ29udGFpbmVyU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgY29udGVudENvbnRhaW5lclN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGlua0JhclN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGNvbnRlbnRDb250YWluZXJDbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmdcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgaWYgKHRoaXMucHJvcHMuaW5pdGlhbFNlbGVjdGVkSW5kZXggJiYgdGhpcy5wcm9wcy5pbml0aWFsU2VsZWN0ZWRJbmRleCA8IHRoaXMuZ2V0VGFiQ291bnQoKSkge1xuICAgICAgc2VsZWN0ZWRJbmRleCA9IHRoaXMucHJvcHMuaW5pdGlhbFNlbGVjdGVkSW5kZXg7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RlZEluZGV4OiBzZWxlY3RlZEluZGV4XG4gICAgfTtcbiAgfSxcblxuICBnZXRFdmVuV2lkdGg6IGZ1bmN0aW9uIGdldEV2ZW5XaWR0aCgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoUmVhY3QuZmluZERPTU5vZGUodGhpcykpLmdldFByb3BlcnR5VmFsdWUoJ3dpZHRoJyksIDEwKTtcbiAgfSxcblxuICBnZXRUYWJDb3VudDogZnVuY3Rpb24gZ2V0VGFiQ291bnQoKSB7XG4gICAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl91cGRhdGVUYWJXaWR0aCgpO1xuICAgIEV2ZW50cy5vbih3aW5kb3csICdyZXNpemUnLCB0aGlzLl91cGRhdGVUYWJXaWR0aCk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIEV2ZW50cy5vZmYod2luZG93LCAncmVzaXplJywgdGhpcy5fdXBkYXRlVGFiV2lkdGgpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMpIHtcbiAgICBpZiAobmV3UHJvcHMuaGFzT3duUHJvcGVydHkoJ3N0eWxlJykpIHRoaXMuX3VwZGF0ZVRhYldpZHRoKCk7XG4gIH0sXG5cbiAgaGFuZGxlVG91Y2hUYXA6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoVGFwKHRhYkluZGV4LCB0YWIpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSAmJiB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXggIT09IHRhYkluZGV4KSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHRhYkluZGV4LCB0YWIpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZEluZGV4OiB0YWJJbmRleCB9KTtcbiAgICAvL2RlZmF1bHQgQ0IgaXMgX29uQWN0aXZlLiBDYW4gYmUgdXBkYXRlZCBpbiB0YWIuanN4XG4gICAgaWYgKHRhYi5wcm9wcy5vbkFjdGl2ZSkgdGFiLnByb3BzLm9uQWN0aXZlKHRhYik7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIHRoZW1lVmFyaWFibGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC50YWJzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRhYkl0ZW1Db250YWluZXI6IHtcbiAgICAgICAgbWFyZ2luOiAnMCcsXG4gICAgICAgIHBhZGRpbmc6ICcwJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnNDhweCcsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWVWYXJpYWJsZXMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgICAgZGlzcGxheTogJ3RhYmxlJ1xuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgdmFyIHRhYkNvbnRlbnQgPSBbXTtcbiAgICB2YXIgd2lkdGggPSB0aGlzLnN0YXRlLmZpeGVkV2lkdGggPyAxMDAgLyB0aGlzLmdldFRhYkNvdW50KCkgKyAnJScgOiB0aGlzLnByb3BzLnRhYldpZHRoICsgJ3B4JztcblxuICAgIHZhciBsZWZ0ID0gJ2NhbGMoJyArIHdpZHRoICsgJyonICsgdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4ICsgJyknO1xuXG4gICAgdmFyIHRhYnMgPSBSZWFjdC5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKHRhYiwgaW5kZXgpIHtcbiAgICAgIGlmICh0YWIudHlwZS5kaXNwbGF5TmFtZSA9PT0gJ1RhYicpIHtcbiAgICAgICAgaWYgKHRhYi5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgICAgIHRhYkNvbnRlbnQucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFRhYlRlbXBsYXRlLCB7XG4gICAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgICAgc2VsZWN0ZWQ6IF90aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXggPT09IGluZGV4XG4gICAgICAgICAgfSwgdGFiLnByb3BzLmNoaWxkcmVuKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFiQ29udGVudC5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUmVhY3QuYWRkb25zLmNsb25lV2l0aFByb3BzKHRhYiwge1xuICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgc2VsZWN0ZWQ6IF90aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXggPT09IGluZGV4LFxuICAgICAgICAgIHRhYkluZGV4OiBpbmRleCxcbiAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgaGFuZGxlVG91Y2hUYXA6IF90aGlzLmhhbmRsZVRvdWNoVGFwXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0YWIudHlwZS5kaXNwbGF5TmFtZSB8fCB0YWIudHlwZTtcbiAgICAgICAgdGhyb3cgJ1RhYnMgb25seSBhY2NlcHRzIFRhYiBDb21wb25lbnRzIGFzIGNoaWxkcmVuLiBGb3VuZCAnICsgdHlwZSArICcgYXMgY2hpbGQgbnVtYmVyICcgKyAoaW5kZXggKyAxKSArICcgb2YgVGFicyc7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeCh0aGlzLnByb3BzLnN0eWxlKSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnRhYkl0ZW1Db250YWluZXIsIHRoaXMucHJvcHMudGFiSXRlbUNvbnRhaW5lclN0eWxlKSB9LFxuICAgICAgICB0YWJzXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbmtCYXIsIHsgbGVmdDogbGVmdCwgd2lkdGg6IHdpZHRoLCBzdHlsZTogdGhpcy5wcm9wcy5pbmtCYXJTdHlsZSB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHRoaXMucHJvcHMuY29udGVudENvbnRhaW5lclN0eWxlKSwgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNvbnRlbnRDb250YWluZXJDbGFzc05hbWUgfSxcbiAgICAgICAgdGFiQ29udGVudFxuICAgICAgKVxuICAgICk7XG4gIH0sXG5cbiAgX3RhYldpZHRoUHJvcElzVmFsaWQ6IGZ1bmN0aW9uIF90YWJXaWR0aFByb3BJc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnRhYldpZHRoICYmIHRoaXMucHJvcHMudGFiV2lkdGggKiB0aGlzLmdldFRhYkNvdW50KCkgPD0gdGhpcy5nZXRFdmVuV2lkdGgoKTtcbiAgfSxcblxuICAvLyBWYWxpZGF0ZXMgdGhhdCB0aGUgdGFiV2lkdGggY2FuIGZpdCBhbGwgdGFicyBvbiB0aGUgdGFiIGJhci4gSWYgbm90LCB0aGVcbiAgLy8gdGFiV2lkdGggaXMgcmVjYWxjdWxhdGVkIGFuZCBmaXhlZC5cbiAgX3VwZGF0ZVRhYldpZHRoOiBmdW5jdGlvbiBfdXBkYXRlVGFiV2lkdGgoKSB7XG4gICAgaWYgKHRoaXMuX3RhYldpZHRoUHJvcElzVmFsaWQoKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZpeGVkV2lkdGg6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZpeGVkV2lkdGg6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYWJzO1xufSx7XCIuLi9pbmstYmFyXCI6MzcsXCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4uL3V0aWxzL2V2ZW50c1wiOjEyOSxcIi4vdGFiVGVtcGxhdGVcIjoxMDAsXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSwxMDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIENvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKCcuL3V0aWxzL2NvbG9yLW1hbmlwdWxhdG9yJyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuL3N0eWxlcy90cmFuc2l0aW9ucycpO1xudmFyIFVuaXF1ZUlkID0gcmVxdWlyZSgnLi91dGlscy91bmlxdWUtaWQnKTtcbnZhciBFbmhhbmNlZFRleHRhcmVhID0gcmVxdWlyZSgnLi9lbmhhbmNlZC10ZXh0YXJlYScpO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgdmFsdWUgaXMgdmFsaWQgdG8gYmUgZGlzcGxheWVkIGluc2lkZSBhbiBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgc3RyaW5nIHByb3ZpZGVkIGlzIHZhbGlkLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIHx8IHZhbHVlID09PSAwO1xufVxuXG52YXIgVGV4dEZpZWxkID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RleHRGaWVsZCcsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBlcnJvclN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIGVycm9yVGV4dDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmbG9hdGluZ0xhYmVsU3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgZmxvYXRpbmdMYWJlbFRleHQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgZnVsbFdpZHRoOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICBoaW50VGV4dDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpZDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpbnB1dFN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG11bHRpTGluZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgb25CbHVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25FbnRlcktleURvd246IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uRm9jdXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uS2V5RG93bjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgcm93czogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICB0eXBlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIHVuZGVybGluZVN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZ1bGxXaWR0aDogZmFsc2UsXG4gICAgICB0eXBlOiAndGV4dCcsXG4gICAgICByb3dzOiAxXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzLmNoaWxkcmVuID8gdGhpcy5wcm9wcy5jaGlsZHJlbi5wcm9wcyA6IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JUZXh0OiB0aGlzLnByb3BzLmVycm9yVGV4dCxcbiAgICAgIGhhc1ZhbHVlOiBpc1ZhbGlkKHByb3BzLnZhbHVlKSB8fCBpc1ZhbGlkKHByb3BzLmRlZmF1bHRWYWx1ZSkgfHwgcHJvcHMudmFsdWVMaW5rICYmIGlzVmFsaWQocHJvcHMudmFsdWVMaW5rLnZhbHVlKVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRleHRGaWVsZDtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fdW5pcXVlSWQgPSBVbmlxdWVJZC5nZW5lcmF0ZSgpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIG5ld1N0YXRlID0ge307XG5cbiAgICBuZXdTdGF0ZS5lcnJvclRleHQgPSBuZXh0UHJvcHMuZXJyb3JUZXh0O1xuICAgIGlmIChuZXh0UHJvcHMuY2hpbGRyZW4gJiYgbmV4dFByb3BzLmNoaWxkcmVuLnByb3BzKSB7XG4gICAgICBuZXh0UHJvcHMgPSBuZXh0UHJvcHMuY2hpbGRyZW4ucHJvcHM7XG4gICAgfVxuXG4gICAgdmFyIGhhc1ZhbHVlTGlua1Byb3AgPSBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlTGluaycpO1xuICAgIHZhciBoYXNWYWx1ZVByb3AgPSBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJyk7XG4gICAgdmFyIGhhc05ld0RlZmF1bHRWYWx1ZSA9IG5leHRQcm9wcy5kZWZhdWx0VmFsdWUgIT09IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlO1xuXG4gICAgaWYgKGhhc1ZhbHVlTGlua1Byb3ApIHtcbiAgICAgIG5ld1N0YXRlLmhhc1ZhbHVlID0gaXNWYWxpZChuZXh0UHJvcHMudmFsdWVMaW5rLnZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGhhc1ZhbHVlUHJvcCkge1xuICAgICAgbmV3U3RhdGUuaGFzVmFsdWUgPSBpc1ZhbGlkKG5leHRQcm9wcy52YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXdEZWZhdWx0VmFsdWUpIHtcbiAgICAgIG5ld1N0YXRlLmhhc1ZhbHVlID0gaXNWYWxpZChuZXh0UHJvcHMuZGVmYXVsdFZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAobmV3U3RhdGUpIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuICB9LFxuXG4gIGdldFN0eWxlczogZnVuY3Rpb24gZ2V0U3R5bGVzKCkge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHRoZW1lID0gdGhpcy5nZXRUaGVtZSgpO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgICBsaW5lSGVpZ2h0OiAnMjRweCcsXG4gICAgICAgIHdpZHRoOiBwcm9wcy5mdWxsV2lkdGggPyAnMTAwJScgOiAyNTYsXG4gICAgICAgIGhlaWdodDogKHByb3BzLnJvd3MgLSAxKSAqIDI0ICsgKHByb3BzLmZsb2F0aW5nTGFiZWxUZXh0ID8gNzIgOiA0OCksXG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgZm9udEZhbWlseTogdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbnRlbnRGb250RmFtaWx5LFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCcyMDBtcycsICdoZWlnaHQnKVxuICAgICAgfSxcbiAgICAgIGVycm9yOiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBib3R0b206IDUsXG4gICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgbGluZUhlaWdodDogJzEycHgnLFxuICAgICAgICBjb2xvcjogdGhlbWUuZXJyb3JDb2xvcixcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpXG4gICAgICB9LFxuICAgICAgaGludDoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgbGluZUhlaWdodDogJzIycHgnLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBjb2xvcjogdGhlbWUuaGludENvbG9yLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIGJvdHRvbTogMTJcbiAgICAgIH0sXG4gICAgICBpbnB1dDoge1xuICAgICAgICB0YXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICBjb2xvcjogcHJvcHMuZGlzYWJsZWQgPyB0aGVtZS5kaXNhYmxlZFRleHRDb2xvciA6IHRoZW1lLnRleHRDb2xvcixcbiAgICAgICAgZm9udDogJ2luaGVyaXQnXG4gICAgICB9LFxuICAgICAgdW5kZXJsaW5lOiB7XG4gICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICBib3JkZXJCb3R0b206ICdzb2xpZCAxcHggJyArIHRoZW1lLmJvcmRlckNvbG9yLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgYm90dG9tOiA4LFxuICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgIE1vekJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgICAgICAgYm94U2l6aW5nOiAnY29udGVudC1ib3gnLFxuICAgICAgICBoZWlnaHQ6IDBcbiAgICAgIH0sXG4gICAgICB1bmRlcmxpbmVBZnRlcjoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgICAgICBib3R0b206IDgsXG4gICAgICAgIGJvcmRlckJvdHRvbTogJ2RvdHRlZCAycHggJyArIHRoZW1lLmRpc2FibGVkVGV4dENvbG9yXG4gICAgICB9XG4gICAgfTtcblxuICAgIHN0eWxlcy5lcnJvciA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmVycm9yLCBwcm9wcy5lcnJvclN0eWxlKTtcbiAgICBzdHlsZXMudW5kZXJsaW5lID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMudW5kZXJsaW5lLCBwcm9wcy51bmRlcmxpbmVTdHlsZSk7XG5cbiAgICBzdHlsZXMuZmxvYXRpbmdMYWJlbCA9IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLmhpbnQsIHtcbiAgICAgIGxpbmVIZWlnaHQ6ICcyMnB4JyxcbiAgICAgIHRvcDogMzgsXG4gICAgICBib3R0b206ICdub25lJyxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUzZCgwLCAwLCAwKScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0IHRvcCdcbiAgICB9KTtcblxuICAgIHN0eWxlcy50ZXh0YXJlYSA9IHRoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLmlucHV0LCB7XG4gICAgICBtYXJnaW5Ub3A6IHByb3BzLmZsb2F0aW5nTGFiZWxUZXh0ID8gMzYgOiAxMixcbiAgICAgIG1hcmdpbkJvdHRvbTogcHJvcHMuZmxvYXRpbmdMYWJlbFRleHQgPyAtMzYgOiAtMTIsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIGZvbnQ6ICdpbmhlcml0J1xuICAgIH0pO1xuXG4gICAgc3R5bGVzLmZvY3VzVW5kZXJsaW5lID0gdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMudW5kZXJsaW5lLCB7XG4gICAgICBib3JkZXJCb3R0b206ICdzb2xpZCAycHgnLFxuICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLmZvY3VzQ29sb3IsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMCknLFxuICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgpXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5pc0ZvY3VzZWQpIHtcbiAgICAgIHN0eWxlcy5mbG9hdGluZ0xhYmVsLmNvbG9yID0gdGhlbWUuZm9jdXNDb2xvcjtcbiAgICAgIHN0eWxlcy5mbG9hdGluZ0xhYmVsLnRyYW5zZm9ybSA9ICdwZXJzcGVjdGl2ZSgxcHgpIHNjYWxlKDAuNzUpIHRyYW5zbGF0ZTNkKDJweCwgLTI4cHgsIDApJztcbiAgICAgIHN0eWxlcy5mb2N1c1VuZGVybGluZS50cmFuc2Zvcm0gPSAnc2NhbGVYKDEpJztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5oYXNWYWx1ZSkge1xuICAgICAgc3R5bGVzLmZsb2F0aW5nTGFiZWwuY29sb3IgPSBDb2xvck1hbmlwdWxhdG9yLmZhZGUocHJvcHMuZGlzYWJsZWQgPyB0aGVtZS5kaXNhYmxlZFRleHRDb2xvciA6IHRoZW1lLmZsb2F0aW5nTGFiZWxDb2xvciwgMC41KTtcbiAgICAgIHN0eWxlcy5mbG9hdGluZ0xhYmVsLnRyYW5zZm9ybSA9ICdwZXJzcGVjdGl2ZSgxcHgpIHNjYWxlKDAuNzUpIHRyYW5zbGF0ZTNkKDJweCwgLTI4cHgsIDApJztcbiAgICAgIHN0eWxlcy5oaW50Lm9wYWNpdHkgPSAwO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5mbG9hdGluZ0xhYmVsVGV4dCkge1xuICAgICAgc3R5bGVzLmhpbnQub3BhY2l0eSA9IDA7XG4gICAgICBzdHlsZXMuaW5wdXQuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuICAgICAgaWYgKHRoaXMuc3RhdGUuaXNGb2N1c2VkICYmICF0aGlzLnN0YXRlLmhhc1ZhbHVlKSBzdHlsZXMuaGludC5vcGFjaXR5ID0gMTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuc3R5bGUgJiYgcHJvcHMuc3R5bGUuaGVpZ2h0KSB7XG4gICAgICBzdHlsZXMuaGludC5saW5lSGVpZ2h0ID0gcHJvcHMuc3R5bGUuaGVpZ2h0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXRlLmVycm9yVGV4dCAmJiB0aGlzLnN0YXRlLmlzRm9jdXNlZCkgc3R5bGVzLmZsb2F0aW5nTGFiZWwuY29sb3IgPSBzdHlsZXMuZXJyb3IuY29sb3I7XG4gICAgaWYgKHByb3BzLmZsb2F0aW5nTGFiZWxUZXh0ICYmICFwcm9wcy5tdWx0aUxpbmUpIHN0eWxlcy5pbnB1dC5wYWRkaW5nVG9wID0gMjY7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5lcnJvclRleHQpIHtcbiAgICAgIHN0eWxlcy5mb2N1c1VuZGVybGluZS5ib3JkZXJDb2xvciA9IHN0eWxlcy5lcnJvci5jb2xvcjtcbiAgICAgIHN0eWxlcy5mb2N1c1VuZGVybGluZS50cmFuc2Zvcm0gPSAnc2NhbGVYKDEpJztcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lO1xuICAgIHZhciBlcnJvclN0eWxlID0gX3Byb3BzLmVycm9yU3R5bGU7XG4gICAgdmFyIGVycm9yVGV4dCA9IF9wcm9wcy5lcnJvclRleHQ7XG4gICAgdmFyIGZsb2F0aW5nTGFiZWxUZXh0ID0gX3Byb3BzLmZsb2F0aW5nTGFiZWxUZXh0O1xuICAgIHZhciBmdWxsV2lkdGggPSBfcHJvcHMuZnVsbFdpZHRoO1xuICAgIHZhciBoaW50VGV4dCA9IF9wcm9wcy5oaW50VGV4dDtcbiAgICB2YXIgaWQgPSBfcHJvcHMuaWQ7XG4gICAgdmFyIG11bHRpTGluZSA9IF9wcm9wcy5tdWx0aUxpbmU7XG4gICAgdmFyIG9uQmx1ciA9IF9wcm9wcy5vbkJsdXI7XG4gICAgdmFyIG9uQ2hhbmdlID0gX3Byb3BzLm9uQ2hhbmdlO1xuICAgIHZhciBvbkZvY3VzID0gX3Byb3BzLm9uRm9jdXM7XG4gICAgdmFyIHR5cGUgPSBfcHJvcHMudHlwZTtcbiAgICB2YXIgcm93cyA9IF9wcm9wcy5yb3dzO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydjbGFzc05hbWUnLCAnZXJyb3JTdHlsZScsICdlcnJvclRleHQnLCAnZmxvYXRpbmdMYWJlbFRleHQnLCAnZnVsbFdpZHRoJywgJ2hpbnRUZXh0JywgJ2lkJywgJ211bHRpTGluZScsICdvbkJsdXInLCAnb25DaGFuZ2UnLCAnb25Gb2N1cycsICd0eXBlJywgJ3Jvd3MnXSk7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcblxuICAgIHZhciBpbnB1dElkID0gaWQgfHwgdGhpcy5fdW5pcXVlSWQ7XG5cbiAgICB2YXIgZXJyb3JUZXh0RWxlbWVudCA9IHRoaXMuc3RhdGUuZXJyb3JUZXh0ID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmVycm9yIH0sXG4gICAgICB0aGlzLnN0YXRlLmVycm9yVGV4dFxuICAgICkgOiBudWxsO1xuXG4gICAgdmFyIGhpbnRUZXh0RWxlbWVudCA9IGhpbnRUZXh0ID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaGludCkgfSxcbiAgICAgIGhpbnRUZXh0XG4gICAgKSA6IG51bGw7XG5cbiAgICB2YXIgZmxvYXRpbmdMYWJlbFRleHRFbGVtZW50ID0gZmxvYXRpbmdMYWJlbFRleHQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2xhYmVsJyxcbiAgICAgIHtcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmZsb2F0aW5nTGFiZWwsIHRoaXMucHJvcHMuZmxvYXRpbmdMYWJlbFN0eWxlKSxcbiAgICAgICAgaHRtbEZvcjogaW5wdXRJZCB9LFxuICAgICAgZmxvYXRpbmdMYWJlbFRleHRcbiAgICApIDogbnVsbDtcblxuICAgIHZhciBpbnB1dFByb3BzID0gdW5kZWZpbmVkO1xuICAgIHZhciBpbnB1dEVsZW1lbnQgPSB1bmRlZmluZWQ7XG5cbiAgICBpbnB1dFByb3BzID0ge1xuICAgICAgaWQ6IGlucHV0SWQsXG4gICAgICByZWY6IHRoaXMuX2dldFJlZigpLFxuICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmlucHV0LCB0aGlzLnByb3BzLmlucHV0U3R5bGUpLFxuICAgICAgb25CbHVyOiB0aGlzLl9oYW5kbGVJbnB1dEJsdXIsXG4gICAgICBvbkZvY3VzOiB0aGlzLl9oYW5kbGVJbnB1dEZvY3VzLFxuICAgICAgZGlzYWJsZWQ6IHRoaXMucHJvcHMuZGlzYWJsZWQsXG4gICAgICBvbktleURvd246IHRoaXMuX2hhbmRsZUlucHV0S2V5RG93blxuICAgIH07XG5cbiAgICBpZiAoIXRoaXMucHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlTGluaycpKSB7XG4gICAgICBpbnB1dFByb3BzLm9uQ2hhbmdlID0gdGhpcy5faGFuZGxlSW5wdXRDaGFuZ2U7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICBpbnB1dEVsZW1lbnQgPSBSZWFjdC5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5jaGlsZHJlbiwgX2V4dGVuZHMoe30sIGlucHV0UHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4ucHJvcHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXRFbGVtZW50ID0gbXVsdGlMaW5lID8gUmVhY3QuY3JlYXRlRWxlbWVudChFbmhhbmNlZFRleHRhcmVhLCBfZXh0ZW5kcyh7fSwgb3RoZXIsIGlucHV0UHJvcHMsIHtcbiAgICAgICAgcm93czogcm93cyxcbiAgICAgICAgb25IZWlnaHRDaGFuZ2U6IHRoaXMuX2hhbmRsZVRleHRBcmVhSGVpZ2h0Q2hhbmdlLFxuICAgICAgICB0ZXh0YXJlYVN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy50ZXh0YXJlYSkgfSkpIDogUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCBfZXh0ZW5kcyh7fSwgb3RoZXIsIGlucHV0UHJvcHMsIHtcbiAgICAgICAgdHlwZTogdHlwZSB9KSk7XG4gICAgfVxuXG4gICAgdmFyIHVuZGVybGluZUVsZW1lbnQgPSB0aGlzLnByb3BzLmRpc2FibGVkID8gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMudW5kZXJsaW5lQWZ0ZXIpIH0pIDogUmVhY3QuY3JlYXRlRWxlbWVudCgnaHInLCB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy51bmRlcmxpbmUpIH0pO1xuICAgIHZhciBmb2N1c1VuZGVybGluZUVsZW1lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KCdocicsIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmZvY3VzVW5kZXJsaW5lKSB9KTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLCBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5zdHlsZSkgfSxcbiAgICAgIGZsb2F0aW5nTGFiZWxUZXh0RWxlbWVudCxcbiAgICAgIGhpbnRUZXh0RWxlbWVudCxcbiAgICAgIGlucHV0RWxlbWVudCxcbiAgICAgIHVuZGVybGluZUVsZW1lbnQsXG4gICAgICBmb2N1c1VuZGVybGluZUVsZW1lbnQsXG4gICAgICBlcnJvclRleHRFbGVtZW50XG4gICAgKTtcbiAgfSxcblxuICBibHVyOiBmdW5jdGlvbiBibHVyKCkge1xuICAgIGlmICh0aGlzLmlzTW91bnRlZCgpKSB0aGlzLl9nZXRJbnB1dE5vZGUoKS5ibHVyKCk7XG4gIH0sXG5cbiAgY2xlYXJWYWx1ZTogZnVuY3Rpb24gY2xlYXJWYWx1ZSgpIHtcbiAgICB0aGlzLnNldFZhbHVlKCcnKTtcbiAgfSxcblxuICBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKCkpIHRoaXMuX2dldElucHV0Tm9kZSgpLmZvY3VzKCk7XG4gIH0sXG5cbiAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmlzTW91bnRlZCgpID8gdGhpcy5fZ2V0SW5wdXROb2RlKCkudmFsdWUgOiB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgc2V0RXJyb3JUZXh0OiBmdW5jdGlvbiBzZXRFcnJvclRleHQobmV3RXJyb3JUZXh0KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgnZXJyb3JUZXh0JykpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Nhbm5vdCBjYWxsIFRleHRGaWVsZC5zZXRFcnJvclRleHQgd2hlbiBlcnJvclRleHQgaXMgZGVmaW5lZCBhcyBhIHByb3BlcnR5LicpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc01vdW50ZWQoKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yVGV4dDogbmV3RXJyb3JUZXh0IH0pO1xuICAgIH1cbiAgfSxcblxuICBzZXRWYWx1ZTogZnVuY3Rpb24gc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0aGlzLl9pc0NvbnRyb2xsZWQoKSkge1xuICAgICAgY29uc29sZS5lcnJvcignQ2Fubm90IGNhbGwgVGV4dEZpZWxkLnNldFZhbHVlIHdoZW4gdmFsdWUgb3IgdmFsdWVMaW5rIGlzIGRlZmluZWQgYXMgYSBwcm9wZXJ0eS4nKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNNb3VudGVkKCkpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLm11bHRpTGluZSkge1xuICAgICAgICB0aGlzLnJlZnNbdGhpcy5fZ2V0UmVmKCldLnNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2dldElucHV0Tm9kZSgpLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBoYXNWYWx1ZTogaXNWYWxpZChuZXdWYWx1ZSkgfSk7XG4gICAgfVxuICB9LFxuXG4gIF9nZXRSZWY6IGZ1bmN0aW9uIF9nZXRSZWYoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMucmVmID8gdGhpcy5wcm9wcy5yZWYgOiAnaW5wdXQnO1xuICB9LFxuXG4gIF9nZXRJbnB1dE5vZGU6IGZ1bmN0aW9uIF9nZXRJbnB1dE5vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgdGhpcy5wcm9wcy5tdWx0aUxpbmUgPyB0aGlzLnJlZnNbdGhpcy5fZ2V0UmVmKCldLmdldElucHV0Tm9kZSgpIDogUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzW3RoaXMuX2dldFJlZigpXSk7XG4gIH0sXG5cbiAgX2hhbmRsZUlucHV0Qmx1cjogZnVuY3Rpb24gX2hhbmRsZUlucHV0Qmx1cihlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzRm9jdXNlZDogZmFsc2UgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMub25CbHVyKSB0aGlzLnByb3BzLm9uQmx1cihlKTtcbiAgfSxcblxuICBfaGFuZGxlSW5wdXRDaGFuZ2U6IGZ1bmN0aW9uIF9oYW5kbGVJbnB1dENoYW5nZShlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhhc1ZhbHVlOiBpc1ZhbGlkKGUudGFyZ2V0LnZhbHVlKSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSkgdGhpcy5wcm9wcy5vbkNoYW5nZShlKTtcbiAgfSxcblxuICBfaGFuZGxlSW5wdXRGb2N1czogZnVuY3Rpb24gX2hhbmRsZUlucHV0Rm9jdXMoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSByZXR1cm47XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzRm9jdXNlZDogdHJ1ZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkZvY3VzKSB0aGlzLnByb3BzLm9uRm9jdXMoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZUlucHV0S2V5RG93bjogZnVuY3Rpb24gX2hhbmRsZUlucHV0S2V5RG93bihlKSB7XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gMTMgJiYgdGhpcy5wcm9wcy5vbkVudGVyS2V5RG93bikgdGhpcy5wcm9wcy5vbkVudGVyS2V5RG93bihlKTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbktleURvd24pIHRoaXMucHJvcHMub25LZXlEb3duKGUpO1xuICB9LFxuXG4gIF9oYW5kbGVUZXh0QXJlYUhlaWdodENoYW5nZTogZnVuY3Rpb24gX2hhbmRsZVRleHRBcmVhSGVpZ2h0Q2hhbmdlKGUsIGhlaWdodCkge1xuICAgIHZhciBuZXdIZWlnaHQgPSBoZWlnaHQgKyAyNDtcbiAgICBpZiAodGhpcy5wcm9wcy5mbG9hdGluZ0xhYmVsVGV4dCkgbmV3SGVpZ2h0ICs9IDI0O1xuICAgIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLnN0eWxlLmhlaWdodCA9IG5ld0hlaWdodCArICdweCc7XG4gIH0sXG5cbiAgX2lzQ29udHJvbGxlZDogZnVuY3Rpb24gX2lzQ29udHJvbGxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSB8fCB0aGlzLnByb3BzLmhhc093blByb3BlcnR5KCd2YWx1ZUxpbmsnKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0RmllbGQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9lbmhhbmNlZC10ZXh0YXJlYVwiOjMxLFwiLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4vc3R5bGVzL3RyYW5zaXRpb25zXCI6NzcsXCIuL3V0aWxzL2NvbG9yLW1hbmlwdWxhdG9yXCI6MTI1LFwiLi91dGlscy91bmlxdWUtaWRcIjoxMzgsXCJfcHJvY2Vzc1wiOjEsXCJyZWFjdFwiOjMxOX1dLDEwMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgVGhlbWVNYW5hZ2VyID0gcmVxdWlyZSgnLi9zdHlsZXMvdGhlbWUtbWFuYWdlcicpO1xuXG52YXIgVGhlbWUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGhlbWUnLFxuXG4gIHByb3BUeXBlczoge1xuICAgIHRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgY2hpbGRDb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIG11aVRoZW1lTWFuYWdlcjogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH0sXG5cbiAgZ2V0Q2hpbGRDb250ZXh0OiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG11aVRoZW1lOiB0aGlzLnRoZW1lTWFuYWdlci5nZXRDdXJyZW50VGhlbWUoKSxcbiAgICAgIG11aVRoZW1lTWFuYWdlcjogdGhpcy50aGVtZU1hbmFnZXJcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMudGhlbWVNYW5hZ2VyID0gbmV3IFRoZW1lTWFuYWdlcigpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMudGhlbWUpIHtcbiAgICAgIHRoaXMudGhlbWVNYW5hZ2VyLnNldFRoZW1lKHRoaXMucHJvcHMudGhlbWUpO1xuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbih7XG4gICAgICBtdWlUaGVtZTogdGhpcy50aGVtZU1hbmFnZXIuZ2V0Q3VycmVudFRoZW1lKCksXG4gICAgICBtdWlUaGVtZU1hbmFnZXI6IHRoaXMudGhlbWVNYW5hZ2VyXG4gICAgfSk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpIHtcbiAgcmV0dXJuIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50Jztcbn1cblxuZnVuY3Rpb24gdGhlbWUoY3VzdG9tVGhlbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gICAgICBkaXNwbGF5TmFtZTogJ1RoZW1lKCcgKyBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpICsgJyknLFxuXG4gICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgVGhlbWUsXG4gICAgICAgICAgeyB0aGVtZTogY3VzdG9tVGhlbWUgfSxcbiAgICAgICAgICAoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCBwcm9wcykpO1xuICAgICAgICAgIH0pLmJpbmQodGhpcylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUaGVtZTtcbm1vZHVsZS5leHBvcnRzLnRoZW1lID0gdGhlbWU7XG59LHtcIi4vc3R5bGVzL3RoZW1lLW1hbmFnZXJcIjo3NCxcInJlYWN0XCI6MzE5fV0sMTA0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBFbmhhbmNlZEJ1dHRvbiA9IHJlcXVpcmUoJy4uL2VuaGFuY2VkLWJ1dHRvbicpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBDbG9ja0J1dHRvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdDbG9ja0J1dHRvbicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBwb3NpdGlvbjogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKVxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb3NpdGlvbjogJ2xlZnQnXG4gICAgfTtcbiAgfSxcblxuICBfaGFuZGxlVG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVUb3VjaFRhcCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNlbGVjdGVkOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5wcm9wcy5vblRvdWNoVGFwKCk7XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRpbWVQaWNrZXI7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NsYXNzTmFtZSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBib3R0b206IDY1LFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnYXV0bycsXG4gICAgICAgIGhlaWdodDogNTAsXG4gICAgICAgIHdpZHRoOiA1MCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMTAwJSdcbiAgICAgIH0sXG5cbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6IDE3LFxuICAgICAgICBsZWZ0OiAxNFxuICAgICAgfSxcblxuICAgICAgc2VsZWN0OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBoZWlnaHQ6IDUwLFxuICAgICAgICB3aWR0aDogNTAsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLmFjY2VudENvbG9yXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICBzdHlsZXMubGFiZWwuY29sb3IgPSB0aGlzLmdldFRoZW1lKCkuc2VsZWN0VGV4dENvbG9yO1xuICAgICAgc3R5bGVzLnNlbGVjdC5vcGFjaXR5ID0gMTtcbiAgICAgIHN0eWxlcy5zZWxlY3QudHJhbnNmb3JtID0gJ3NjYWxlKDEpJztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5wb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgc3R5bGVzLnJvb3QucmlnaHQgPSAnNXB4JztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzLnJvb3QubGVmdCA9ICc1cHgnO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgRW5oYW5jZWRCdXR0b24sXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QpLFxuICAgICAgICBkaXNhYmxlRm9jdXNSaXBwbGU6IHRydWUsXG4gICAgICAgIGRpc2FibGVUb3VjaFJpcHBsZTogdHJ1ZSxcbiAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5faGFuZGxlVG91Y2hUYXAgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuc2VsZWN0KSB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubGFiZWwpIH0sXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgIClcbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDbG9ja0J1dHRvbjtcbn0se1wiLi4vZW5oYW5jZWQtYnV0dG9uXCI6MjksXCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4uL3N0eWxlcy90cmFuc2l0aW9uc1wiOjc3LFwicmVhY3RcIjozMTl9XSwxMDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBDbG9ja051bWJlciA9IHJlcXVpcmUoJy4vY2xvY2stbnVtYmVyJyk7XG52YXIgQ2xvY2tQb2ludGVyID0gcmVxdWlyZSgnLi9jbG9jay1wb2ludGVyJyk7XG5cbmZ1bmN0aW9uIHJhZDJkZWcocmFkKSB7XG4gIHJldHVybiByYWQgKiA1Ny4yOTU3Nzk1MTMwODIzMjtcbn1cblxuZnVuY3Rpb24gZ2V0VG91Y2hFdmVudE9mZnNldFZhbHVlcyhlKSB7XG4gIHZhciBlbCA9IGUudGFyZ2V0O1xuICB2YXIgYm91bmRpbmdSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgdmFyIG9mZnNldCA9IHtcbiAgICBvZmZzZXRYOiBlLmNsaWVudFggLSBib3VuZGluZ1JlY3QubGVmdCxcbiAgICBvZmZzZXRZOiBlLmNsaWVudFkgLSBib3VuZGluZ1JlY3QudG9wXG4gIH07XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxudmFyIENsb2NrSG91cnMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2xvY2tIb3VycycsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaW5pdGlhbEhvdXJzOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIG9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBmb3JtYXQ6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2FtcG0nLCAnMjRociddKVxuICB9LFxuXG4gIGNlbnRlcjogeyB4OiAwLCB5OiAwIH0sXG4gIGJhc2VQb2ludDogeyB4OiAwLCB5OiAwIH0sXG5cbiAgaXNNb3VzZVByZXNzZWQ6IGZ1bmN0aW9uIGlzTW91c2VQcmVzc2VkKGUpIHtcbiAgICBpZiAodHlwZW9mIGUuYnV0dG9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBlLm5hdGl2ZUV2ZW50LndoaWNoO1xuICAgIH1cblxuICAgIHJldHVybiBlLmJ1dHRvbnM7XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRpYWxIb3VyczogbmV3IERhdGUoKS5nZXRIb3VycygpLFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKCkge30sXG4gICAgICBmb3JtYXQ6ICdhbXBtJ1xuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHZhciBjbG9ja0VsZW1lbnQgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMubWFzayk7XG5cbiAgICB0aGlzLmNlbnRlciA9IHtcbiAgICAgIHg6IGNsb2NrRWxlbWVudC5vZmZzZXRXaWR0aCAvIDIsXG4gICAgICB5OiBjbG9ja0VsZW1lbnQub2Zmc2V0SGVpZ2h0IC8gMlxuICAgIH07XG5cbiAgICB0aGlzLmJhc2VQb2ludCA9IHtcbiAgICAgIHg6IHRoaXMuY2VudGVyLngsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgfSxcblxuICBoYW5kbGVVcDogZnVuY3Rpb24gaGFuZGxlVXAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNldENsb2NrKGUubmF0aXZlRXZlbnQsIHRydWUpO1xuICB9LFxuXG4gIGhhbmRsZU1vdmU6IGZ1bmN0aW9uIGhhbmRsZU1vdmUoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy5pc01vdXNlUHJlc3NlZChlKSAhPT0gMSkgcmV0dXJuO1xuICAgIHRoaXMuc2V0Q2xvY2soZS5uYXRpdmVFdmVudCwgZmFsc2UpO1xuICB9LFxuXG4gIGhhbmRsZVRvdWNoTW92ZTogZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5zZXRDbG9jayhlLmNoYW5nZWRUb3VjaGVzWzBdLCBmYWxzZSk7XG4gIH0sXG5cbiAgaGFuZGxlVG91Y2hFbmQ6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5zZXRDbG9jayhlLmNoYW5nZWRUb3VjaGVzWzBdLCB0cnVlKTtcbiAgfSxcblxuICBzZXRDbG9jazogZnVuY3Rpb24gc2V0Q2xvY2soZSwgZmluaXNoKSB7XG4gICAgaWYgKHR5cGVvZiBlLm9mZnNldFggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gZ2V0VG91Y2hFdmVudE9mZnNldFZhbHVlcyhlKTtcblxuICAgICAgZS5vZmZzZXRYID0gb2Zmc2V0Lm9mZnNldFg7XG4gICAgICBlLm9mZnNldFkgPSBvZmZzZXQub2Zmc2V0WTtcbiAgICB9XG5cbiAgICB2YXIgaG91cnMgPSB0aGlzLmdldEhvdXJzKGUub2Zmc2V0WCwgZS5vZmZzZXRZKTtcblxuICAgIHRoaXMucHJvcHMub25DaGFuZ2UoaG91cnMsIGZpbmlzaCk7XG4gIH0sXG5cbiAgZ2V0SG91cnM6IGZ1bmN0aW9uIGdldEhvdXJzKG9mZnNldFgsIG9mZnNldFkpIHtcbiAgICB2YXIgc3RlcCA9IDMwO1xuICAgIHZhciB4ID0gb2Zmc2V0WCAtIHRoaXMuY2VudGVyLng7XG4gICAgdmFyIHkgPSBvZmZzZXRZIC0gdGhpcy5jZW50ZXIueTtcbiAgICB2YXIgY3ggPSB0aGlzLmJhc2VQb2ludC54IC0gdGhpcy5jZW50ZXIueDtcbiAgICB2YXIgY3kgPSB0aGlzLmJhc2VQb2ludC55IC0gdGhpcy5jZW50ZXIueTtcblxuICAgIHZhciBhdGFuID0gTWF0aC5hdGFuMihjeCwgY3kpIC0gTWF0aC5hdGFuMih4LCB5KTtcblxuICAgIHZhciBkZWcgPSByYWQyZGVnKGF0YW4pO1xuICAgIGRlZyA9IE1hdGgucm91bmQoZGVnIC8gc3RlcCkgKiBzdGVwO1xuICAgIGRlZyAlPSAzNjA7XG5cbiAgICB2YXIgdmFsdWUgPSBNYXRoLmZsb29yKGRlZyAvIHN0ZXApIHx8IDA7XG5cbiAgICB2YXIgZGVsdGEgPSBNYXRoLnBvdyh4LCAyKSArIE1hdGgucG93KHksIDIpO1xuICAgIHZhciBkaXN0YW5jZSA9IE1hdGguc3FydChkZWx0YSk7XG5cbiAgICB2YWx1ZSA9IHZhbHVlIHx8IDEyO1xuICAgIGlmICh0aGlzLnByb3BzLmZvcm1hdCA9PT0gJzI0aHInKSB7XG4gICAgICBpZiAoZGlzdGFuY2UgPCA5MCkge1xuICAgICAgICB2YWx1ZSArPSAxMjtcbiAgICAgICAgdmFsdWUgJT0gMjQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICU9IDEyO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcblxuICBfZ2V0U2VsZWN0ZWQ6IGZ1bmN0aW9uIF9nZXRTZWxlY3RlZCgpIHtcbiAgICB2YXIgaG91ciA9IHRoaXMucHJvcHMuaW5pdGlhbEhvdXJzO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuZm9ybWF0ID09PSAnYW1wbScpIHtcbiAgICAgIGhvdXIgJT0gMTI7XG4gICAgICBob3VyID0gaG91ciB8fCAxMjtcbiAgICB9XG5cbiAgICByZXR1cm4gaG91cjtcbiAgfSxcblxuICBfZ2V0SG91ck51bWJlcnM6IGZ1bmN0aW9uIF9nZXRIb3VyTnVtYmVycygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHN0eWxlID0ge1xuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gICAgfTtcbiAgICB2YXIgaG91clNpemUgPSB0aGlzLnByb3BzLmZvcm1hdCA9PT0gJ2FtcG0nID8gMTIgOiAyNDtcblxuICAgIHZhciBob3VycyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGhvdXJTaXplOyBpKyspIHtcbiAgICAgIGhvdXJzLnB1c2goaSAlIDI0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG91cnMubWFwKGZ1bmN0aW9uIChob3VyKSB7XG4gICAgICB2YXIgaXNTZWxlY3RlZCA9IF90aGlzLl9nZXRTZWxlY3RlZCgpID09PSBob3VyO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvY2tOdW1iZXIsIHsga2V5OiBob3VyLCBzdHlsZTogc3R5bGUsIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQsIHR5cGU6ICdob3VyJywgdmFsdWU6IGhvdXIgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzEwMCUnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgICAgfSxcblxuICAgICAgaGl0TWFzazoge1xuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ2F1dG8nXG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBob3VycyA9IHRoaXMuX2dldFNlbGVjdGVkKCk7XG4gICAgdmFyIG51bWJlcnMgPSB0aGlzLl9nZXRIb3VyTnVtYmVycygpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgcmVmOiAnY2xvY2snLCBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCkgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvY2tQb2ludGVyLCB7IGhhc1NlbGVjdGVkOiB0cnVlLCB2YWx1ZTogaG91cnMsIHR5cGU6ICdob3VyJyB9KSxcbiAgICAgIG51bWJlcnMsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHJlZjogJ21hc2snLCBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaGl0TWFzayksIG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZVRvdWNoTW92ZSwgb25Ub3VjaEVuZDogdGhpcy5oYW5kbGVUb3VjaEVuZCwgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZVVwLCBvbk1vdXNlTW92ZTogdGhpcy5oYW5kbGVNb3ZlIH0pXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xvY2tIb3Vycztcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL2Nsb2NrLW51bWJlclwiOjEwNyxcIi4vY2xvY2stcG9pbnRlclwiOjEwOCxcInJlYWN0XCI6MzE5fV0sMTA2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQ2xvY2tOdW1iZXIgPSByZXF1aXJlKCcuL2Nsb2NrLW51bWJlcicpO1xudmFyIENsb2NrUG9pbnRlciA9IHJlcXVpcmUoJy4vY2xvY2stcG9pbnRlcicpO1xuXG5mdW5jdGlvbiByYWQyZGVnKHJhZCkge1xuICByZXR1cm4gcmFkICogNTcuMjk1Nzc5NTEzMDgyMzI7XG59XG5cbmZ1bmN0aW9uIGdldFRvdWNoRXZlbnRPZmZzZXRWYWx1ZXMoZSkge1xuICB2YXIgZWwgPSBlLnRhcmdldDtcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIHZhciBvZmZzZXQgPSB7XG4gICAgb2Zmc2V0WDogZS5jbGllbnRYIC0gYm91bmRpbmdSZWN0LmxlZnQsXG4gICAgb2Zmc2V0WTogZS5jbGllbnRZIC0gYm91bmRpbmdSZWN0LnRvcFxuICB9O1xuXG4gIHJldHVybiBvZmZzZXQ7XG59XG5cbnZhciBDbG9ja01pbnV0ZXMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2xvY2tNaW51dGVzJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIGluaXRpYWxNaW51dGVzOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIG9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICB9LFxuXG4gIGNlbnRlcjogeyB4OiAwLCB5OiAwIH0sXG4gIGJhc2VQb2ludDogeyB4OiAwLCB5OiAwIH0sXG5cbiAgaXNNb3VzZVByZXNzZWQ6IGZ1bmN0aW9uIGlzTW91c2VQcmVzc2VkKGUpIHtcblxuICAgIGlmICh0eXBlb2YgZS5idXR0b25zID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIGUubmF0aXZlRXZlbnQud2hpY2g7XG4gICAgfVxuICAgIHJldHVybiBlLmJ1dHRvbnM7XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRpYWxNaW51dGVzOiBuZXcgRGF0ZSgpLmdldE1pbnV0ZXMoKSxcbiAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSgpIHt9XG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdmFyIGNsb2NrRWxlbWVudCA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5tYXNrKTtcblxuICAgIHRoaXMuY2VudGVyID0ge1xuICAgICAgeDogY2xvY2tFbGVtZW50Lm9mZnNldFdpZHRoIC8gMixcbiAgICAgIHk6IGNsb2NrRWxlbWVudC5vZmZzZXRIZWlnaHQgLyAyXG4gICAgfTtcblxuICAgIHRoaXMuYmFzZVBvaW50ID0ge1xuICAgICAgeDogdGhpcy5jZW50ZXIueCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICB9LFxuXG4gIGhhbmRsZVVwOiBmdW5jdGlvbiBoYW5kbGVVcChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2V0Q2xvY2soZS5uYXRpdmVFdmVudCwgdHJ1ZSk7XG4gIH0sXG5cbiAgaGFuZGxlTW92ZTogZnVuY3Rpb24gaGFuZGxlTW92ZShlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLmlzTW91c2VQcmVzc2VkKGUpICE9PSAxKSByZXR1cm47XG4gICAgdGhpcy5zZXRDbG9jayhlLm5hdGl2ZUV2ZW50LCBmYWxzZSk7XG4gIH0sXG5cbiAgaGFuZGxlVG91Y2g6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5zZXRDbG9jayhlLmNoYW5nZWRUb3VjaGVzWzBdLCBmYWxzZSk7XG4gIH0sXG5cbiAgc2V0Q2xvY2s6IGZ1bmN0aW9uIHNldENsb2NrKGUsIGZpbmlzaCkge1xuICAgIGlmICh0eXBlb2YgZS5vZmZzZXRYID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIG9mZnNldCA9IGdldFRvdWNoRXZlbnRPZmZzZXRWYWx1ZXMoZSk7XG5cbiAgICAgIGUub2Zmc2V0WCA9IG9mZnNldC5vZmZzZXRYO1xuICAgICAgZS5vZmZzZXRZID0gb2Zmc2V0Lm9mZnNldFk7XG4gICAgfVxuXG4gICAgdmFyIG1pbnV0ZXMgPSB0aGlzLmdldE1pbnV0ZXMoZS5vZmZzZXRYLCBlLm9mZnNldFkpO1xuXG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZShtaW51dGVzLCBmaW5pc2gpO1xuICB9LFxuXG4gIGdldE1pbnV0ZXM6IGZ1bmN0aW9uIGdldE1pbnV0ZXMob2Zmc2V0WCwgb2Zmc2V0WSkge1xuICAgIHZhciBzdGVwID0gNjtcbiAgICB2YXIgeCA9IG9mZnNldFggLSB0aGlzLmNlbnRlci54O1xuICAgIHZhciB5ID0gb2Zmc2V0WSAtIHRoaXMuY2VudGVyLnk7XG4gICAgdmFyIGN4ID0gdGhpcy5iYXNlUG9pbnQueCAtIHRoaXMuY2VudGVyLng7XG4gICAgdmFyIGN5ID0gdGhpcy5iYXNlUG9pbnQueSAtIHRoaXMuY2VudGVyLnk7XG5cbiAgICB2YXIgYXRhbiA9IE1hdGguYXRhbjIoY3gsIGN5KSAtIE1hdGguYXRhbjIoeCwgeSk7XG5cbiAgICB2YXIgZGVnID0gcmFkMmRlZyhhdGFuKTtcbiAgICBkZWcgPSBNYXRoLnJvdW5kKGRlZyAvIHN0ZXApICogc3RlcDtcbiAgICBkZWcgJT0gMzYwO1xuXG4gICAgdmFyIHZhbHVlID0gTWF0aC5mbG9vcihkZWcgLyBzdGVwKSB8fCAwO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuXG4gIF9nZXRNaW51dGVOdW1iZXJzOiBmdW5jdGlvbiBfZ2V0TWludXRlTnVtYmVycygpIHtcbiAgICB2YXIgbWludXRlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgbWludXRlcy5wdXNoKGkgKiA1KTtcbiAgICB9XG4gICAgdmFyIHNlbGVjdGVkTWludXRlcyA9IHRoaXMucHJvcHMuaW5pdGlhbE1pbnV0ZXM7XG4gICAgdmFyIGhhc1NlbGVjdGVkID0gZmFsc2U7XG5cbiAgICB2YXIgbnVtYmVycyA9IG1pbnV0ZXMubWFwKGZ1bmN0aW9uIChtaW51dGUpIHtcbiAgICAgIHZhciBpc1NlbGVjdGVkID0gc2VsZWN0ZWRNaW51dGVzID09PSBtaW51dGU7XG4gICAgICBpZiAoaXNTZWxlY3RlZCkgaGFzU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvY2tOdW1iZXIsIHsga2V5OiBtaW51dGUsIGlzU2VsZWN0ZWQ6IGlzU2VsZWN0ZWQsIHR5cGU6ICdtaW51dGUnLCB2YWx1ZTogbWludXRlIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG51bWJlcnM6IG51bWJlcnMsXG4gICAgICBoYXNTZWxlY3RlZDogaGFzU2VsZWN0ZWQsXG4gICAgICBzZWxlY3RlZDogc2VsZWN0ZWRNaW51dGVzXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMTAwJScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgICB9LFxuXG4gICAgICBoaXRNYXNrOiB7XG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnYXV0bydcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG1pbnV0ZXMgPSB0aGlzLl9nZXRNaW51dGVOdW1iZXJzKCk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyByZWY6ICdjbG9jaycsIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290KSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDbG9ja1BvaW50ZXIsIHsgdmFsdWU6IG1pbnV0ZXMuc2VsZWN0ZWQsIHR5cGU6ICdtaW51dGUnIH0pLFxuICAgICAgbWludXRlcy5udW1iZXJzLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyByZWY6ICdtYXNrJywgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmhpdE1hc2spLCBoYXNTZWxlY3RlZDogbWludXRlcy5oYXNTZWxlY3RlZCwgb25Ub3VjaE1vdmU6IHRoaXMuaGFuZGxlVG91Y2gsIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2gsIG9uTW91c2VVcDogdGhpcy5oYW5kbGVVcCwgb25Nb3VzZU1vdmU6IHRoaXMuaGFuZGxlTW92ZSB9KVxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsb2NrTWludXRlcztcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL2Nsb2NrLW51bWJlclwiOjEwNyxcIi4vY2xvY2stcG9pbnRlclwiOjEwOCxcInJlYWN0XCI6MzE5fV0sMTA3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5ID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbJ3JldHVybiddKSBfaVsncmV0dXJuJ10oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZScpOyB9IH07IH0pKCk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xuXG52YXIgQ2xvY2tOdW1iZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2xvY2tOdW1iZXInLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgdmFsdWU6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgdHlwZTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnaG91cicsICdtaW51dGUnXSksXG4gICAgb25TZWxlY3RlZDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgaXNTZWxlY3RlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2xcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IDAsXG4gICAgICB0eXBlOiAnbWludXRlJyxcbiAgICAgIGlzU2VsZWN0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQudGltZVBpY2tlcjtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcG9zID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICB2YXIgaW5uZXIgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLnByb3BzLnR5cGUgPT09ICdob3VyJykge1xuICAgICAgaW5uZXIgPSBwb3MgPCAxIHx8IHBvcyA+IDEyO1xuICAgICAgcG9zICU9IDEyO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3MgPSBwb3MgLyA1O1xuICAgIH1cblxuICAgIHZhciBwb3NpdGlvbnMgPSBbWzAsIDVdLCBbNTQuNSwgMTYuNl0sIFs5NC40LCA1OS41XSwgWzEwOSwgMTE0XSwgWzk0LjQsIDE2OC41XSwgWzU0LjUsIDIwOC40XSwgWzAsIDIyM10sIFstNTQuNSwgMjA4LjRdLCBbLTk0LjQsIDE2OC41XSwgWy0xMDksIDExNF0sIFstOTQuNCwgNTkuNV0sIFstNTQuNSwgMTkuNl1dO1xuXG4gICAgdmFyIGlubmVyUG9zaXRpb25zID0gW1swLCA0MF0sIFszNi45LCA0OS45XSwgWzY0LCA3N10sIFs3NCwgMTE0XSwgWzY0LCAxNTFdLCBbMzcsIDE3OF0sIFswLCAxODhdLCBbLTM3LCAxNzhdLCBbLTY0LCAxNTFdLCBbLTc0LCAxMTRdLCBbLTY0LCA3N10sIFstMzcsIDUwXV07XG5cbiAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgcm9vdDoge1xuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHdpZHRoOiAzMixcbiAgICAgICAgaGVpZ2h0OiAzMixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMTAwJScsXG4gICAgICAgIGxlZnQ6ICdjYWxjKDUwJSAtIDE2cHgpJyxcbiAgICAgICAgdG9wOiAxMCxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgcGFkZGluZ1RvcDogNSxcbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLCAvKiBDaHJvbWUgYWxsIC8gU2FmYXJpIGFsbCAqL1xuICAgICAgICBmb250U2l6ZTogJzEuMWVtJyxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pc1NlbGVjdGVkKSB7XG4gICAgICBzdHlsZXMucm9vdC5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmdldFRoZW1lKCkuYWNjZW50Q29sb3I7XG4gICAgICBzdHlsZXMucm9vdC5jb2xvciA9IHRoaXMuZ2V0VGhlbWUoKS5zZWxlY3RUZXh0Q29sb3I7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zZm9ybVBvcyA9IHBvc2l0aW9uc1twb3NdO1xuXG4gICAgaWYgKGlubmVyKSB7XG4gICAgICBzdHlsZXMucm9vdC53aWR0aCA9ICcyOHB4JztcbiAgICAgIHN0eWxlcy5yb290LmhlaWdodCA9ICcyOHB4JztcbiAgICAgIHN0eWxlcy5yb290LmxlZnQgPSAnY2FsYyg1MCUgLSAxNHB4KSc7XG4gICAgICB0cmFuc2Zvcm1Qb3MgPSBpbm5lclBvc2l0aW9uc1twb3NdO1xuICAgIH1cblxuICAgIHZhciBfdHJhbnNmb3JtUG9zID0gX3NsaWNlZFRvQXJyYXkodHJhbnNmb3JtUG9zLCAyKTtcblxuICAgIHZhciB4ID0gX3RyYW5zZm9ybVBvc1swXTtcbiAgICB2YXIgeSA9IF90cmFuc2Zvcm1Qb3NbMV07XG5cbiAgICBzdHlsZXMucm9vdC50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKCcgKyB4ICsgJ3B4LCAnICsgeSArICdweCknO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnc3BhbicsXG4gICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290KSB9LFxuICAgICAgdGhpcy5wcm9wcy52YWx1ZVxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsb2NrTnVtYmVyO1xufSx7XCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcInJlYWN0XCI6MzE5fV0sMTA4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG5cbnZhciBDbG9ja1BvaW50ZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2xvY2tQb2ludGVyJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIHZhbHVlOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIHR5cGU6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2hvdXInLCAnbWludXRlJ10pXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlubmVyOiB0aGlzLmlzSW5uZXIodGhpcy5wcm9wcy52YWx1ZSlcbiAgICB9O1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIHR5cGU6ICdtaW51dGUnLFxuICAgICAgaGFzU2VsZWN0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaW5uZXI6IHRoaXMuaXNJbm5lcihuZXh0UHJvcHMudmFsdWUpXG4gICAgfSk7XG4gIH0sXG5cbiAgaXNJbm5lcjogZnVuY3Rpb24gaXNJbm5lcih2YWx1ZSkge1xuICAgIGlmICh0aGlzLnByb3BzLnR5cGUgIT09ICdob3VyJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgPCAxIHx8IHZhbHVlID4gMTI7XG4gIH0sXG5cbiAgZ2V0QW5nbGU6IGZ1bmN0aW9uIGdldEFuZ2xlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnR5cGUgPT09ICdob3VyJykge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsY0FuZ2xlKHRoaXMucHJvcHMudmFsdWUsIDEyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jYWxjQW5nbGUodGhpcy5wcm9wcy52YWx1ZSwgNjApO1xuICB9LFxuXG4gIGNhbGNBbmdsZTogZnVuY3Rpb24gY2FsY0FuZ2xlKHZhbHVlLCBiYXNlKSB7XG4gICAgdmFsdWUgJT0gYmFzZTtcbiAgICB2YXIgYW5nbGUgPSAzNjAgLyBiYXNlICogdmFsdWU7XG4gICAgcmV0dXJuIGFuZ2xlO1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC50aW1lUGlja2VyO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIG51bGwpO1xuICAgIH1cblxuICAgIHZhciBhbmdsZSA9IHRoaXMuZ2V0QW5nbGUoKTtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIGhlaWdodDogJzMwJScsXG4gICAgICAgIGJhY2tncm91bmQ6IHRoaXMuZ2V0VGhlbWUoKS5hY2NlbnRDb2xvcixcbiAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgIGxlZnQ6ICdjYWxjKDUwJSAtIDFweCknLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgYm90dG9tOiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnYm90dG9tJyxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGVaKCcgKyBhbmdsZSArICdkZWcpJ1xuICAgICAgfSxcbiAgICAgIG1hcms6IHtcbiAgICAgICAgYmFja2dyb3VuZDogdGhpcy5nZXRUaGVtZSgpLnNlbGVjdFRleHRDb2xvcixcbiAgICAgICAgYm9yZGVyOiAnNHB4IHNvbGlkICcgKyB0aGlzLmdldFRoZW1lKCkuYWNjZW50Q29sb3IsXG4gICAgICAgIHdpZHRoOiA3LFxuICAgICAgICBoZWlnaHQ6IDcsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6IC01LFxuICAgICAgICBsZWZ0OiAtNixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMTAwJSdcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCF0aGlzLnN0YXRlLmlubmVyKSB7XG4gICAgICBzdHlsZXMucm9vdC5oZWlnaHQgPSAnNDAlJztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5oYXNTZWxlY3RlZCkge1xuICAgICAgc3R5bGVzLm1hcmsuZGlzcGxheSA9ICdub25lJztcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMucm9vdCkgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5tYXJrIH0pXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xvY2tQb2ludGVyO1xufSx7XCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcInJlYWN0XCI6MzE5fV0sMTA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgVGltZURpc3BsYXkgPSByZXF1aXJlKCcuL3RpbWUtZGlzcGxheScpO1xudmFyIENsb2NrQnV0dG9uID0gcmVxdWlyZSgnLi9jbG9jay1idXR0b24nKTtcbnZhciBDbG9ja0hvdXJzID0gcmVxdWlyZSgnLi9jbG9jay1ob3VycycpO1xudmFyIENsb2NrTWludXRlcyA9IHJlcXVpcmUoJy4vY2xvY2stbWludXRlcycpO1xuXG52YXIgQ2xvY2sgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQ2xvY2snLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGluaXRpYWxUaW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICAgIG1vZGU6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2hvdXInLCAnbWludXRlJ10pLFxuICAgIGZvcm1hdDogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnYW1wbScsICcyNGhyJ10pLFxuICAgIGlzQWN0aXZlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbml0aWFsVGltZTogbmV3IERhdGUoKVxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNlbGVjdGVkVGltZTogbmV4dFByb3BzLmluaXRpYWxUaW1lXG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdGVkVGltZTogdGhpcy5wcm9wcy5pbml0aWFsVGltZSxcbiAgICAgIG1vZGU6ICdob3VyJ1xuICAgIH07XG4gIH0sXG5cbiAgX3NldE1vZGU6IGZ1bmN0aW9uIF9zZXRNb2RlKG1vZGUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG1vZGU6IG1vZGVcbiAgICAgIH0pO1xuICAgIH0sIDEwMCk7XG4gIH0sXG5cbiAgX3NldEFmZml4OiBmdW5jdGlvbiBfc2V0QWZmaXgoYWZmaXgpIHtcbiAgICBpZiAoYWZmaXggPT09IHRoaXMuX2dldEFmZml4KCkpIHJldHVybjtcblxuICAgIHZhciBob3VycyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRUaW1lLmdldEhvdXJzKCk7XG5cbiAgICBpZiAoYWZmaXggPT09ICdhbScpIHtcbiAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlSG91cnMoaG91cnMgLSAxMik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VIb3Vycyhob3VycyArIDEyKTtcbiAgfSxcblxuICBfZ2V0QWZmaXg6IGZ1bmN0aW9uIF9nZXRBZmZpeCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5mb3JtYXQgIT09ICdhbXBtJykgcmV0dXJuICcnO1xuXG4gICAgdmFyIGhvdXJzID0gdGhpcy5zdGF0ZS5zZWxlY3RlZFRpbWUuZ2V0SG91cnMoKTtcbiAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgcmV0dXJuICdhbSc7XG4gICAgfVxuXG4gICAgcmV0dXJuICdwbSc7XG4gIH0sXG5cbiAgX2dldEJ1dHRvbnM6IGZ1bmN0aW9uIF9nZXRCdXR0b25zKCkge1xuICAgIHZhciBidXR0b25zID0gW107XG4gICAgdmFyIGlzQU0gPSB0aGlzLl9nZXRJc0FNKCk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5mb3JtYXQgPT09ICdhbXBtJykge1xuICAgICAgYnV0dG9ucyA9IFtSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBDbG9ja0J1dHRvbixcbiAgICAgICAgeyBwb3NpdGlvbjogJ2xlZnQnLCBvblRvdWNoVGFwOiB0aGlzLl9zZXRBZmZpeC5iaW5kKHRoaXMsICdhbScpLCBzZWxlY3RlZDogaXNBTSB9LFxuICAgICAgICAnQU0nXG4gICAgICApLCBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBDbG9ja0J1dHRvbixcbiAgICAgICAgeyBwb3NpdGlvbjogJ3JpZ2h0Jywgb25Ub3VjaFRhcDogdGhpcy5fc2V0QWZmaXguYmluZCh0aGlzLCAncG0nKSwgc2VsZWN0ZWQ6ICFpc0FNIH0sXG4gICAgICAgICdQTSdcbiAgICAgICldO1xuICAgIH1cbiAgICByZXR1cm4gYnV0dG9ucztcbiAgfSxcblxuICBfZ2V0SXNBTTogZnVuY3Rpb24gX2dldElzQU0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldEFmZml4KCkgPT09ICdhbSc7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNsb2NrID0gbnVsbDtcbiAgICB2YXIgYnV0dG9ucyA9IHRoaXMuX2dldEJ1dHRvbnMoKTtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7fSxcblxuICAgICAgY29udGFpbmVyOiB7XG4gICAgICAgIGhlaWdodDogMjgwLFxuICAgICAgICBwYWRkaW5nOiAxMFxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5tb2RlID09PSAnaG91cicpIHtcbiAgICAgIGNsb2NrID0gUmVhY3QuY3JlYXRlRWxlbWVudChDbG9ja0hvdXJzLCB7IGtleTogJ2hvdXJzJyxcbiAgICAgICAgZm9ybWF0OiB0aGlzLnByb3BzLmZvcm1hdCxcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlSG91cnMsXG4gICAgICAgIGluaXRpYWxIb3VyczogdGhpcy5zdGF0ZS5zZWxlY3RlZFRpbWUuZ2V0SG91cnMoKSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvY2sgPSBSZWFjdC5jcmVhdGVFbGVtZW50KENsb2NrTWludXRlcywgeyBrZXk6ICdtaW51dGVzJyxcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlTWludXRlcyxcbiAgICAgICAgaW5pdGlhbE1pbnV0ZXM6IHRoaXMuc3RhdGUuc2VsZWN0ZWRUaW1lLmdldE1pbnV0ZXMoKSB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnJvb3QgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGltZURpc3BsYXksIHtcbiAgICAgICAgc2VsZWN0ZWRUaW1lOiB0aGlzLnN0YXRlLnNlbGVjdGVkVGltZSxcbiAgICAgICAgbW9kZTogdGhpcy5zdGF0ZS5tb2RlLFxuICAgICAgICBmb3JtYXQ6IHRoaXMucHJvcHMuZm9ybWF0LFxuICAgICAgICBhZmZpeDogdGhpcy5fZ2V0QWZmaXgoKSxcbiAgICAgICAgb25TZWxlY3RIb3VyOiB0aGlzLl9zZXRNb2RlLmJpbmQodGhpcywgJ2hvdXInKSxcbiAgICAgICAgb25TZWxlY3RNaW46IHRoaXMuX3NldE1vZGUuYmluZCh0aGlzLCAnbWludXRlJykgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmNvbnRhaW5lciB9LFxuICAgICAgICBjbG9ja1xuICAgICAgKSxcbiAgICAgIGJ1dHRvbnNcbiAgICApO1xuICB9LFxuXG4gIGhhbmRsZUNoYW5nZUhvdXJzOiBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VIb3Vycyhob3VycywgZmluaXNoZWQpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciB0aW1lID0gbmV3IERhdGUodGhpcy5zdGF0ZS5zZWxlY3RlZFRpbWUpO1xuICAgIHRpbWUuc2V0SG91cnMoaG91cnMpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2VsZWN0ZWRUaW1lOiB0aW1lXG4gICAgfSk7XG5cbiAgICBpZiAoZmluaXNoZWQpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgIG1vZGU6ICdtaW51dGUnXG4gICAgICAgIH0pO1xuICAgICAgfSwgMTAwKTtcbiAgICB9XG4gIH0sXG5cbiAgaGFuZGxlQ2hhbmdlTWludXRlczogZnVuY3Rpb24gaGFuZGxlQ2hhbmdlTWludXRlcyhtaW51dGVzKSB7XG4gICAgdmFyIHRpbWUgPSBuZXcgRGF0ZSh0aGlzLnN0YXRlLnNlbGVjdGVkVGltZSk7XG4gICAgdGltZS5zZXRNaW51dGVzKG1pbnV0ZXMpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2VsZWN0ZWRUaW1lOiB0aW1lXG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0U2VsZWN0ZWRUaW1lOiBmdW5jdGlvbiBnZXRTZWxlY3RlZFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuc2VsZWN0ZWRUaW1lO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDbG9jaztcbn0se1wiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL2Nsb2NrLWJ1dHRvblwiOjEwNCxcIi4vY2xvY2staG91cnNcIjoxMDUsXCIuL2Nsb2NrLW1pbnV0ZXNcIjoxMDYsXCIuL3RpbWUtZGlzcGxheVwiOjExMSxcInJlYWN0XCI6MzE5fV0sMTEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3RpbWUtcGlja2VyJyk7XG59LHtcIi4vdGltZS1waWNrZXJcIjoxMTN9XSwxMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsncmV0dXJuJ10pIF9pWydyZXR1cm4nXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlJyk7IH0gfTsgfSkoKTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIFRpbWVEaXNwbGF5ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RpbWVEaXNwbGF5JyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlXSxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtdWlUaGVtZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIHNlbGVjdGVkVGltZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGZvcm1hdDogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnYW1wbScsICcyNGhyJ10pLFxuICAgIG1vZGU6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2hvdXInLCAnbWludXRlJ10pLFxuICAgIGFmZml4OiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWycnLCAncG0nLCAnYW0nXSlcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNpdGlvbkRpcmVjdGlvbjogJ3VwJ1xuICAgIH07XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vZGU6ICdob3VyJyxcbiAgICAgIGFmZml4OiAnJ1xuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5leHRQcm9wcy5zZWxlY3RlZFRpbWUgIT09IHRoaXMucHJvcHMuc2VsZWN0ZWRUaW1lKSB7XG4gICAgICBkaXJlY3Rpb24gPSBuZXh0UHJvcHMuc2VsZWN0ZWRUaW1lID4gdGhpcy5wcm9wcy5zZWxlY3RlZFRpbWUgPyAndXAnIDogJ2Rvd24nO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdHJhbnNpdGlvbkRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgc2FuaXRpemVUaW1lOiBmdW5jdGlvbiBzYW5pdGl6ZVRpbWUoKSB7XG4gICAgdmFyIGhvdXIgPSB0aGlzLnByb3BzLnNlbGVjdGVkVGltZS5nZXRIb3VycygpO1xuICAgIHZhciBtaW4gPSB0aGlzLnByb3BzLnNlbGVjdGVkVGltZS5nZXRNaW51dGVzKCkudG9TdHJpbmcoKTtcblxuICAgIGlmICh0aGlzLnByb3BzLmZvcm1hdCA9PT0gJ2FtcG0nKSB7XG4gICAgICBob3VyICU9IDEyO1xuICAgICAgaG91ciA9IGhvdXIgfHwgMTI7XG4gICAgfVxuXG4gICAgaG91ciA9IGhvdXIudG9TdHJpbmcoKTtcbiAgICBpZiAoaG91ci5sZW5ndGggPCAyKSBob3VyID0gJzAnICsgaG91cjtcbiAgICBpZiAobWluLmxlbmd0aCA8IDIpIG1pbiA9ICcwJyArIG1pbjtcblxuICAgIHJldHVybiBbaG91ciwgbWluXTtcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQudGltZVBpY2tlcjtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgc2VsZWN0ZWRUaW1lID0gX3Byb3BzLnNlbGVjdGVkVGltZTtcbiAgICB2YXIgbW9kZSA9IF9wcm9wcy5tb2RlO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydzZWxlY3RlZFRpbWUnLCAnbW9kZSddKTtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICB3aWR0aDogMjgwLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgICAgfSxcblxuICAgICAgdGltZToge1xuICAgICAgICBtYXJnaW46ICc2cHggMCcsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICc1OHB4JyxcbiAgICAgICAgaGVpZ2h0OiA1OCxcbiAgICAgICAgZm9udFNpemU6ICc1OHB4J1xuICAgICAgfSxcblxuICAgICAgYm94OiB7XG4gICAgICAgIHBhZGRpbmc6ICcxNnB4IDAnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5jb2xvcixcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS50ZXh0Q29sb3JcbiAgICAgIH0sXG5cbiAgICAgIGhvdXI6IHt9LFxuXG4gICAgICBtaW51dGU6IHt9XG4gICAgfTtcblxuICAgIHZhciBfc2FuaXRpemVUaW1lID0gdGhpcy5zYW5pdGl6ZVRpbWUoKTtcblxuICAgIHZhciBfc2FuaXRpemVUaW1lMiA9IF9zbGljZWRUb0FycmF5KF9zYW5pdGl6ZVRpbWUsIDIpO1xuXG4gICAgdmFyIGhvdXIgPSBfc2FuaXRpemVUaW1lMlswXTtcbiAgICB2YXIgbWluID0gX3Nhbml0aXplVGltZTJbMV07XG5cbiAgICBzdHlsZXNbbW9kZV0uY29sb3IgPSB0aGlzLmdldFRoZW1lKCkuYWNjZW50Q29sb3I7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290KSB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5ib3gpIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMudGltZSkgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaG91ciksIG9uVG91Y2hUYXA6IHRoaXMucHJvcHMub25TZWxlY3RIb3VyIH0sXG4gICAgICAgICAgICBob3VyXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICc6J1xuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLm1pbnV0ZSksIG9uVG91Y2hUYXA6IHRoaXMucHJvcHMub25TZWxlY3RNaW4gfSxcbiAgICAgICAgICAgIG1pblxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgeyBrZXk6ICdhZmZpeCcgfSxcbiAgICAgICAgICB0aGlzLnByb3BzLmFmZml4LnRvVXBwZXJDYXNlKClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVGltZURpc3BsYXk7XG59LHtcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwicmVhY3RcIjozMTl9XSwxMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFdpbmRvd0xpc3RlbmFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvd2luZG93LWxpc3RlbmFibGUnKTtcbnZhciBLZXlDb2RlID0gcmVxdWlyZSgnLi4vdXRpbHMva2V5LWNvZGUnKTtcbnZhciBDbG9jayA9IHJlcXVpcmUoJy4vY2xvY2snKTtcbnZhciBEaWFsb2cgPSByZXF1aXJlKCcuLi9kaWFsb2cnKTtcbnZhciBGbGF0QnV0dG9uID0gcmVxdWlyZSgnLi4vZmxhdC1idXR0b24nKTtcblxudmFyIFRpbWVQaWNrZXJEaWFsb2cgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGltZVBpY2tlckRpYWxvZycsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZSwgV2luZG93TGlzdGVuYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBpbml0aWFsVGltZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvbkFjY2VwdDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25TaG93OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICBvbkRpc21pc3M6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gIH0sXG5cbiAgd2luZG93TGlzdGVuZXJzOiB7XG4gICAga2V5dXA6ICdfaGFuZGxlV2luZG93S2V5VXAnXG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRpbWVQaWNrZXI7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGluaXRpYWxUaW1lID0gX3Byb3BzLmluaXRpYWxUaW1lO1xuICAgIHZhciBvbkFjY2VwdCA9IF9wcm9wcy5vbkFjY2VwdDtcbiAgICB2YXIgZm9ybWF0ID0gX3Byb3BzLmZvcm1hdDtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnaW5pdGlhbFRpbWUnLCAnb25BY2NlcHQnLCAnZm9ybWF0J10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgICBjb2xvcjogdGhpcy5nZXRUaGVtZSgpLmNsb2NrQ29sb3JcbiAgICAgIH0sXG4gICAgICBkaWFsb2dDb250ZW50OiB7XG4gICAgICAgIHdpZHRoOiAyODBcbiAgICAgIH0sXG4gICAgICBib2R5OiB7XG4gICAgICAgIHBhZGRpbmc6IDBcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGFjdGlvbnMgPSBbUmVhY3QuY3JlYXRlRWxlbWVudChGbGF0QnV0dG9uLCB7XG4gICAgICBrZXk6IDAsXG4gICAgICBsYWJlbDogJ0NhbmNlbCcsXG4gICAgICBzZWNvbmRhcnk6IHRydWUsXG4gICAgICBvblRvdWNoVGFwOiB0aGlzLl9oYW5kbGVDYW5jZWxUb3VjaFRhcCB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChGbGF0QnV0dG9uLCB7XG4gICAgICBrZXk6IDEsXG4gICAgICBsYWJlbDogJ09LJyxcbiAgICAgIHNlY29uZGFyeTogdHJ1ZSxcbiAgICAgIG9uVG91Y2hUYXA6IHRoaXMuX2hhbmRsZU9LVG91Y2hUYXAgfSldO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBEaWFsb2csXG4gICAgICBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICAgICAgcmVmOiAnZGlhbG9nV2luZG93JyxcbiAgICAgICAgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QpLFxuICAgICAgICBib2R5U3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLmJvZHkpLFxuICAgICAgICBhY3Rpb25zOiBhY3Rpb25zLFxuICAgICAgICBjb250ZW50U3R5bGU6IHN0eWxlcy5kaWFsb2dDb250ZW50LFxuICAgICAgICBvbkRpc21pc3M6IHRoaXMuX2hhbmRsZURpYWxvZ0Rpc21pc3MsXG4gICAgICAgIG9uU2hvdzogdGhpcy5faGFuZGxlRGlhbG9nU2hvdyxcbiAgICAgICAgcmVwb3NpdGlvbk9uVXBkYXRlOiBmYWxzZSB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvY2ssIHtcbiAgICAgICAgcmVmOiAnY2xvY2snLFxuICAgICAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICAgICAgaW5pdGlhbFRpbWU6IGluaXRpYWxUaW1lIH0pXG4gICAgKTtcbiAgfSxcblxuICBzaG93OiBmdW5jdGlvbiBzaG93KCkge1xuICAgIHRoaXMucmVmcy5kaWFsb2dXaW5kb3cuc2hvdygpO1xuICB9LFxuXG4gIGRpc21pc3M6IGZ1bmN0aW9uIGRpc21pc3MoKSB7XG4gICAgdGhpcy5yZWZzLmRpYWxvZ1dpbmRvdy5kaXNtaXNzKCk7XG4gIH0sXG5cbiAgX2hhbmRsZUNhbmNlbFRvdWNoVGFwOiBmdW5jdGlvbiBfaGFuZGxlQ2FuY2VsVG91Y2hUYXAoKSB7XG4gICAgdGhpcy5kaXNtaXNzKCk7XG4gIH0sXG5cbiAgX2hhbmRsZU9LVG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVPS1RvdWNoVGFwKCkge1xuICAgIHRoaXMuZGlzbWlzcygpO1xuICAgIGlmICh0aGlzLnByb3BzLm9uQWNjZXB0KSB7XG4gICAgICB0aGlzLnByb3BzLm9uQWNjZXB0KHRoaXMucmVmcy5jbG9jay5nZXRTZWxlY3RlZFRpbWUoKSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVEaWFsb2dTaG93OiBmdW5jdGlvbiBfaGFuZGxlRGlhbG9nU2hvdygpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblNob3cpIHtcbiAgICAgIHRoaXMucHJvcHMub25TaG93KCk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVEaWFsb2dEaXNtaXNzOiBmdW5jdGlvbiBfaGFuZGxlRGlhbG9nRGlzbWlzcygpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkRpc21pc3MpIHtcbiAgICAgIHRoaXMucHJvcHMub25EaXNtaXNzKCk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVXaW5kb3dLZXlVcDogZnVuY3Rpb24gX2hhbmRsZVdpbmRvd0tleVVwKGUpIHtcbiAgICBpZiAodGhpcy5yZWZzLmRpYWxvZ1dpbmRvdy5pc09wZW4oKSkge1xuICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSBLZXlDb2RlLkVOVEVSOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZU9LVG91Y2hUYXAoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVGltZVBpY2tlckRpYWxvZztcbn0se1wiLi4vZGlhbG9nXCI6MjYsXCIuLi9mbGF0LWJ1dHRvblwiOjMyLFwiLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuLi9taXhpbnMvd2luZG93LWxpc3RlbmFibGVcIjo1NixcIi4uL3V0aWxzL2tleS1jb2RlXCI6MTMzLFwiLi9jbG9ja1wiOjEwOSxcInJlYWN0XCI6MzE5fV0sMTEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBXaW5kb3dMaXN0ZW5hYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3dpbmRvdy1saXN0ZW5hYmxlJyk7XG52YXIgVGltZVBpY2tlckRpYWxvZyA9IHJlcXVpcmUoJy4vdGltZS1waWNrZXItZGlhbG9nJyk7XG52YXIgVGV4dEZpZWxkID0gcmVxdWlyZSgnLi4vdGV4dC1maWVsZCcpO1xuXG52YXIgZW1wdHlUaW1lID0gbmV3IERhdGUoKTtcbmVtcHR5VGltZS5zZXRIb3VycygwKTtcbmVtcHR5VGltZS5zZXRNaW51dGVzKDApO1xuXG52YXIgVGltZVBpY2tlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUaW1lUGlja2VyJyxcblxuICBtaXhpbnM6IFtTdHlsZVByb3BhYmxlLCBXaW5kb3dMaXN0ZW5hYmxlXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBkZWZhdWx0VGltZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBmb3JtYXQ6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2FtcG0nLCAnMjRociddKSxcbiAgICBwZWRhbnRpYzogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgb25Gb2N1czogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25Ub3VjaFRhcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgIG9uU2hvdzogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25EaXNtaXNzOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICB9LFxuXG4gIHdpbmRvd0xpc3RlbmVyczoge1xuICAgICdrZXl1cCc6ICdfaGFuZGxlV2luZG93S2V5VXAnXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlZmF1bHRUaW1lOiBlbXB0eVRpbWUsXG4gICAgICBmb3JtYXQ6ICdhbXBtJyxcbiAgICAgIHBlZGFudGljOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpbWU6IHRoaXMucHJvcHMuZGVmYXVsdFRpbWUsXG4gICAgICBkaWFsb2dUaW1lOiBuZXcgRGF0ZSgpXG4gICAgfTtcbiAgfSxcblxuICBmb3JtYXRUaW1lOiBmdW5jdGlvbiBmb3JtYXRUaW1lKGRhdGUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgdmFyIG1pbnMgPSBkYXRlLmdldE1pbnV0ZXMoKS50b1N0cmluZygpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuZm9ybWF0ID09PSAnYW1wbScpIHtcbiAgICAgIHZhciBpc0FNID0gaG91cnMgPCAxMjtcbiAgICAgIGhvdXJzID0gaG91cnMgJSAxMjtcbiAgICAgIHZhciBhZGRpdGlvbmFsID0gaXNBTSA/ICcgYW0nIDogJyBwbSc7XG4gICAgICBob3VycyA9IChob3VycyB8fCAxMikudG9TdHJpbmcoKTtcblxuICAgICAgaWYgKG1pbnMubGVuZ3RoIDwgMikgbWlucyA9ICcwJyArIG1pbnM7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLnBlZGFudGljKSB7XG4gICAgICAgIC8vIFRyZWF0IG1pZGRheS9taWRuaWdodCBzcGVjaWFsbHkgaHR0cDovL3d3dy5uaXN0Lmdvdi9wbWwvZGl2Njg4L3RpbWVzLmNmbVxuICAgICAgICBpZiAoaG91cnMgPT09ICcxMicgJiYgbWlucyA9PT0gJzAwJykge1xuICAgICAgICAgIHJldHVybiBhZGRpdGlvbmFsID09PSAnIHBtJyA/ICcxMiBub29uJyA6ICcxMiBtaWRuaWdodCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhvdXJzICsgKG1pbnMgPT09ICcwMCcgPyAnJyA6ICc6JyArIG1pbnMpICsgYWRkaXRpb25hbDtcbiAgICB9XG5cbiAgICBob3VycyA9IGhvdXJzLnRvU3RyaW5nKCk7XG5cbiAgICBpZiAoaG91cnMubGVuZ3RoIDwgMikgaG91cnMgPSAnMCcgKyBob3VycztcbiAgICBpZiAobWlucy5sZW5ndGggPCAyKSBtaW5zID0gJzAnICsgbWlucztcblxuICAgIHJldHVybiBob3VycyArICc6JyArIG1pbnM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGZvcm1hdCA9IF9wcm9wcy5mb3JtYXQ7XG4gICAgdmFyIG9uRm9jdXMgPSBfcHJvcHMub25Gb2N1cztcbiAgICB2YXIgb25Ub3VjaFRhcCA9IF9wcm9wcy5vblRvdWNoVGFwO1xuICAgIHZhciBvblNob3cgPSBfcHJvcHMub25TaG93O1xuICAgIHZhciBvbkRpc21pc3MgPSBfcHJvcHMub25EaXNtaXNzO1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydmb3JtYXQnLCAnb25Gb2N1cycsICdvblRvdWNoVGFwJywgJ29uU2hvdycsICdvbkRpc21pc3MnXSk7XG5cbiAgICB2YXIgZGVmYXVsdElucHV0VmFsdWUgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5kZWZhdWx0VGltZSkge1xuICAgICAgZGVmYXVsdElucHV0VmFsdWUgPSB0aGlzLmZvcm1hdFRpbWUodGhpcy5wcm9wcy5kZWZhdWx0VGltZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIG51bGwsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRleHRGaWVsZCwgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHJlZjogJ2lucHV0JyxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0SW5wdXRWYWx1ZSxcbiAgICAgICAgb25Gb2N1czogdGhpcy5faGFuZGxlSW5wdXRGb2N1cyxcbiAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5faGFuZGxlSW5wdXRUb3VjaFRhcCB9KSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRpbWVQaWNrZXJEaWFsb2csIHtcbiAgICAgICAgcmVmOiAnZGlhbG9nV2luZG93JyxcbiAgICAgICAgaW5pdGlhbFRpbWU6IHRoaXMuc3RhdGUuZGlhbG9nVGltZSxcbiAgICAgICAgb25BY2NlcHQ6IHRoaXMuX2hhbmRsZURpYWxvZ0FjY2VwdCxcbiAgICAgICAgb25TaG93OiBvblNob3csXG4gICAgICAgIG9uRGlzbWlzczogb25EaXNtaXNzLFxuICAgICAgICBmb3JtYXQ6IGZvcm1hdCB9KVxuICAgICk7XG4gIH0sXG5cbiAgZ2V0VGltZTogZnVuY3Rpb24gZ2V0VGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS50aW1lO1xuICB9LFxuXG4gIHNldFRpbWU6IGZ1bmN0aW9uIHNldFRpbWUodCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdGltZTogdFxuICAgIH0pO1xuICAgIHRoaXMucmVmcy5pbnB1dC5zZXRWYWx1ZSh0aGlzLmZvcm1hdFRpbWUodCkpO1xuICB9LFxuXG4gIF9oYW5kbGVEaWFsb2dBY2NlcHQ6IGZ1bmN0aW9uIF9oYW5kbGVEaWFsb2dBY2NlcHQodCkge1xuICAgIHRoaXMuc2V0VGltZSh0KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZSkgdGhpcy5wcm9wcy5vbkNoYW5nZShudWxsLCB0KTtcbiAgfSxcblxuICBfaGFuZGxlSW5wdXRGb2N1czogZnVuY3Rpb24gX2hhbmRsZUlucHV0Rm9jdXMoZSkge1xuICAgIGUudGFyZ2V0LmJsdXIoKTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkZvY3VzKSB0aGlzLnByb3BzLm9uRm9jdXMoZSk7XG4gIH0sXG5cbiAgX2hhbmRsZUlucHV0VG91Y2hUYXA6IGZ1bmN0aW9uIF9oYW5kbGVJbnB1dFRvdWNoVGFwKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRpYWxvZ1RpbWU6IHRoaXMuZ2V0VGltZSgpXG4gICAgfSk7XG5cbiAgICB0aGlzLnJlZnMuZGlhbG9nV2luZG93LnNob3coKTtcbiAgICBpZiAodGhpcy5wcm9wcy5vblRvdWNoVGFwKSB0aGlzLnByb3BzLm9uVG91Y2hUYXAoZSk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRpbWVQaWNrZXI7XG59LHtcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi4vbWl4aW5zL3dpbmRvdy1saXN0ZW5hYmxlXCI6NTYsXCIuLi90ZXh0LWZpZWxkXCI6MTAyLFwiLi90aW1lLXBpY2tlci1kaWFsb2dcIjoxMTIsXCJyZWFjdFwiOjMxOX1dLDExNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG52YXIgUGFwZXIgPSByZXF1aXJlKCcuL3BhcGVyJyk7XG52YXIgRW5oYW5jZWRTd2l0Y2ggPSByZXF1aXJlKCcuL2VuaGFuY2VkLXN3aXRjaCcpO1xuXG52YXIgVG9nZ2xlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RvZ2dsZScsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBlbGVtZW50U3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gICAgbGFiZWxTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvblRvZ2dsZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgdG9nZ2xlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgZGVmYXVsdFRvZ2dsZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN3aXRjaGVkOiB0aGlzLnByb3BzLnRvZ2dsZWQgfHwgdGhpcy5wcm9wcy5kZWZhdWx0VG9nZ2xlZCB8fCB0aGlzLnByb3BzLnZhbHVlTGluayAmJiB0aGlzLnByb3BzLnZhbHVlTGluay52YWx1ZSB8fCBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRvZ2dsZTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgdG9nZ2xlU2l6ZSA9IDIwO1xuICAgIHZhciB0b2dnbGVUcmFja1dpZHRoID0gMzY7XG4gICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgIGljb246IHtcbiAgICAgICAgd2lkdGg6IDM2LFxuICAgICAgICBwYWRkaW5nOiAnNHB4IDBweCA2cHggMnB4J1xuICAgICAgfSxcbiAgICAgIHRvZ2dsZUVsZW1lbnQ6IHtcbiAgICAgICAgd2lkdGg6IHRvZ2dsZVRyYWNrV2lkdGhcbiAgICAgIH0sXG4gICAgICB0cmFjazoge1xuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogMTQsXG4gICAgICAgIGJvcmRlclJhZGl1czogMzAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRyYWNrT2ZmQ29sb3JcbiAgICAgIH0sXG4gICAgICB0aHVtYjoge1xuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6IDEsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHdpZHRoOiB0b2dnbGVTaXplLFxuICAgICAgICBoZWlnaHQ6IHRvZ2dsZVNpemUsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyNHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkudGh1bWJPZmZDb2xvclxuICAgICAgfSxcbiAgICAgIHRyYWNrV2hlblN3aXRjaGVkOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRyYWNrT25Db2xvclxuICAgICAgfSxcbiAgICAgIHRodW1iV2hlblN3aXRjaGVkOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRUaGVtZSgpLnRodW1iT25Db2xvcixcbiAgICAgICAgbGVmdDogJzEwMCUnXG4gICAgICB9LFxuICAgICAgdHJhY2tXaGVuRGlzYWJsZWQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkudHJhY2tEaXNhYmxlZENvbG9yXG4gICAgICB9LFxuICAgICAgdGh1bWJXaGVuRGlzYWJsZWQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkudGh1bWJEaXNhYmxlZENvbG9yXG4gICAgICB9LFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgY29sb3I6IHRoaXMucHJvcHMuZGlzYWJsZWQgPyB0aGlzLmdldFRoZW1lKCkubGFiZWxEaXNhYmxlZENvbG9yIDogdGhpcy5nZXRUaGVtZSgpLmxhYmVsQ29sb3JcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgb25Ub2dnbGUgPSBfcHJvcHMub25Ub2dnbGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ29uVG9nZ2xlJ10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICB2YXIgdHJhY2tTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy50cmFjaywgdGhpcy5wcm9wcy50cmFja1N0eWxlLCB0aGlzLnN0YXRlLnN3aXRjaGVkICYmIHN0eWxlcy50cmFja1doZW5Td2l0Y2hlZCwgdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBzdHlsZXMudHJhY2tXaGVuRGlzYWJsZWQpO1xuXG4gICAgdmFyIHRodW1iU3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMudGh1bWIsIHRoaXMucHJvcHMudGh1bWJTdHlsZSwgdGhpcy5zdGF0ZS5zd2l0Y2hlZCAmJiBzdHlsZXMudGh1bWJXaGVuU3dpdGNoZWQsIHRoaXMucHJvcHMuZGlzYWJsZWQgJiYgc3R5bGVzLnRodW1iV2hlbkRpc2FibGVkKTtcblxuICAgIGlmICh0aGlzLnN0YXRlLnN3aXRjaGVkKSB7XG4gICAgICB0aHVtYlN0eWxlcy5tYXJnaW5MZWZ0ID0gJy0nICsgdGh1bWJTdHlsZXMud2lkdGg7XG4gICAgfVxuXG4gICAgdmFyIHRvZ2dsZUVsZW1lbnRTdHlsZXMgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy50b2dnbGVFbGVtZW50LCB0aGlzLnByb3BzLmVsZW1lbnRTdHlsZSk7XG5cbiAgICB2YXIgdG9nZ2xlRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHRvZ2dsZUVsZW1lbnRTdHlsZXMgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHRyYWNrU3R5bGVzIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlciwgeyBzdHlsZTogdGh1bWJTdHlsZXMsIGNpcmNsZTogdHJ1ZSwgekRlcHRoOiAxIH0pXG4gICAgKTtcblxuICAgIHZhciBjdXN0b21SaXBwbGVTdHlsZSA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoe1xuICAgICAgdG9wOiAtMTAsXG4gICAgICBsZWZ0OiAtMTBcbiAgICB9LCB0aGlzLnByb3BzLnJpcHBsZVN0eWxlKTtcblxuICAgIHZhciByaXBwbGVDb2xvciA9IHRoaXMuc3RhdGUuc3dpdGNoZWQgPyB0aGlzLmdldFRoZW1lKCkudGh1bWJPbkNvbG9yIDogdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC50ZXh0Q29sb3I7XG5cbiAgICB2YXIgaWNvblN0eWxlID0gdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMuaWNvbiwgdGhpcy5wcm9wcy5pY29uU3R5bGUpO1xuXG4gICAgdmFyIGxhYmVsU3R5bGUgPSB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5sYWJlbCwgdGhpcy5wcm9wcy5sYWJlbFN0eWxlKTtcblxuICAgIHZhciBlbmhhbmNlZFN3aXRjaFByb3BzID0ge1xuICAgICAgcmVmOiAnZW5oYW5jZWRTd2l0Y2gnLFxuICAgICAgaW5wdXRUeXBlOiAnY2hlY2tib3gnLFxuICAgICAgc3dpdGNoRWxlbWVudDogdG9nZ2xlRWxlbWVudCxcbiAgICAgIHJpcHBsZVN0eWxlOiBjdXN0b21SaXBwbGVTdHlsZSxcbiAgICAgIHJpcHBsZUNvbG9yOiByaXBwbGVDb2xvcixcbiAgICAgIGljb25TdHlsZTogaWNvblN0eWxlLFxuICAgICAgdHJhY2tTdHlsZTogdHJhY2tTdHlsZXMsXG4gICAgICB0aHVtYlN0eWxlOiB0aHVtYlN0eWxlcyxcbiAgICAgIGxhYmVsU3R5bGU6IGxhYmVsU3R5bGUsXG4gICAgICBzd2l0Y2hlZDogdGhpcy5zdGF0ZS5zd2l0Y2hlZCxcbiAgICAgIG9uU3dpdGNoOiB0aGlzLl9oYW5kbGVUb2dnbGUsXG4gICAgICBvblBhcmVudFNob3VsZFVwZGF0ZTogdGhpcy5faGFuZGxlU3RhdGVDaGFuZ2UsXG4gICAgICBkZWZhdWx0U3dpdGNoZWQ6IHRoaXMucHJvcHMuZGVmYXVsdFRvZ2dsZWQsXG4gICAgICBsYWJlbFBvc2l0aW9uOiB0aGlzLnByb3BzLmxhYmVsUG9zaXRpb24gPyB0aGlzLnByb3BzLmxhYmVsUG9zaXRpb24gOiAnbGVmdCdcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMucHJvcHMuaGFzT3duUHJvcGVydHkoJ3RvZ2dsZWQnKSkgZW5oYW5jZWRTd2l0Y2hQcm9wcy5jaGVja2VkID0gdGhpcy5wcm9wcy50b2dnbGVkO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW5oYW5jZWRTd2l0Y2gsIF9leHRlbmRzKHt9LCBvdGhlciwgZW5oYW5jZWRTd2l0Y2hQcm9wcykpO1xuICB9LFxuXG4gIGlzVG9nZ2xlZDogZnVuY3Rpb24gaXNUb2dnbGVkKCkge1xuICAgIHJldHVybiB0aGlzLnJlZnMuZW5oYW5jZWRTd2l0Y2guaXNTd2l0Y2hlZCgpO1xuICB9LFxuXG4gIHNldFRvZ2dsZWQ6IGZ1bmN0aW9uIHNldFRvZ2dsZWQobmV3VG9nZ2xlZFZhbHVlKSB7XG4gICAgdGhpcy5yZWZzLmVuaGFuY2VkU3dpdGNoLnNldFN3aXRjaGVkKG5ld1RvZ2dsZWRWYWx1ZSk7XG4gIH0sXG5cbiAgX2hhbmRsZVRvZ2dsZTogZnVuY3Rpb24gX2hhbmRsZVRvZ2dsZShlLCBpc0lucHV0Q2hlY2tlZCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVG9nZ2xlKSB0aGlzLnByb3BzLm9uVG9nZ2xlKGUsIGlzSW5wdXRDaGVja2VkKTtcbiAgfSxcblxuICBfaGFuZGxlU3RhdGVDaGFuZ2U6IGZ1bmN0aW9uIF9oYW5kbGVTdGF0ZUNoYW5nZShuZXdTd2l0Y2hlZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzd2l0Y2hlZDogbmV3U3dpdGNoZWQgfSk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVG9nZ2xlO1xufSx7XCIuL2VuaGFuY2VkLXN3aXRjaFwiOjMwLFwiLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4vcGFwZXJcIjo1OCxcIi4vc3R5bGVzL3RyYW5zaXRpb25zXCI6NzcsXCJyZWFjdFwiOjMxOX1dLDExNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgQ29sb3JzID0gcmVxdWlyZSgnLi4vc3R5bGVzL2NvbG9ycycpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIFRvb2xiYXJHcm91cCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUb29sYmFyR3JvdXAnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGZsb2F0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZsb2F0OiAnbGVmdCdcbiAgICB9O1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC50b29sYmFyO1xuICB9LFxuXG4gIGdldFNwYWNpbmc6IGZ1bmN0aW9uIGdldFNwYWNpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5zcGFjaW5nLmRlc2t0b3BHdXR0ZXI7XG4gIH0sXG5cbiAgZ2V0U3R5bGVzOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgdmFyIG1hcmdpbkhvcml6b250YWwgPSB0aGlzLmdldFNwYWNpbmcoKTtcbiAgICB2YXIgbWFyZ2luVmVydGljYWwgPSAodGhpcy5nZXRUaGVtZSgpLmhlaWdodCAtIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQuYnV0dG9uLmhlaWdodCkgLyAyO1xuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBmbG9hdDogdGhpcy5wcm9wcy5mbG9hdFxuICAgICAgfSxcbiAgICAgIGRyb3BEb3duTWVudToge1xuICAgICAgICByb290OiB7XG4gICAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgICBjb2xvcjogQ29sb3JzLmxpZ2h0QmxhY2ssIC8vIHJlbW92ZXMgaG92ZXIgY29sb3IgY2hhbmdlLCB3ZSB3YW50IHRvIGtlZXAgaXRcbiAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICBtYXJnaW5SaWdodDogdGhpcy5nZXRTcGFjaW5nKClcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJvbEJnOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkubWVudUhvdmVyQ29sb3IsXG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiAwXG4gICAgICAgIH0sXG4gICAgICAgIHVuZGVybGluZToge1xuICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYnV0dG9uOiB7XG4gICAgICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgICAgIG1hcmdpbjogbWFyZ2luVmVydGljYWwgKyAncHggJyArIG1hcmdpbkhvcml6b250YWwgKyAncHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIGljb246IHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5pY29uQ29sb3IsXG4gICAgICAgICAgbGluZUhlaWdodDogdGhpcy5nZXRUaGVtZSgpLmhlaWdodCArICdweCcsXG4gICAgICAgICAgcGFkZGluZ0xlZnQ6IHRoaXMuZ2V0U3BhY2luZygpXG4gICAgICAgIH0sXG4gICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgY29sb3I6IENvbG9ycy5kYXJrQmxhY2tcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNwYW46IHtcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgY29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5pY29uQ29sb3IsXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5oZWlnaHQgKyAncHgnXG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLmdldFN0eWxlcygpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuZmlyc3RDaGlsZCkgc3R5bGVzLm1hcmdpbkxlZnQgPSAtMjQ7XG4gICAgaWYgKHRoaXMucHJvcHMubGFzdENoaWxkKSBzdHlsZXMubWFyZ2luUmlnaHQgPSAtMjQ7XG5cbiAgICB2YXIgbmV3Q2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGN1cnJlbnRDaGlsZCkge1xuICAgICAgaWYgKCFjdXJyZW50Q2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGN1cnJlbnRDaGlsZC50eXBlLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgIGNhc2UgJ0Ryb3BEb3duTWVudSc6XG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjdXJyZW50Q2hpbGQsIHtcbiAgICAgICAgICAgIHN0eWxlOiBfdGhpcy5tZXJnZVN0eWxlcyhzdHlsZXMuZHJvcERvd25NZW51LnJvb3QsIGN1cnJlbnRDaGlsZC5wcm9wcy5zdHlsZSksXG4gICAgICAgICAgICBzdHlsZUNvbnRyb2xCZzogc3R5bGVzLmRyb3BEb3duTWVudS5jb250cm9sQmcsXG4gICAgICAgICAgICBzdHlsZVVuZGVybGluZTogc3R5bGVzLmRyb3BEb3duTWVudS51bmRlcmxpbmVcbiAgICAgICAgICB9KTtcbiAgICAgICAgY2FzZSAnRHJvcERvd25JY29uJzpcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGN1cnJlbnRDaGlsZCwge1xuICAgICAgICAgICAgc3R5bGU6IF90aGlzLm1lcmdlU3R5bGVzKHsgZmxvYXQ6ICdsZWZ0JyB9LCBjdXJyZW50Q2hpbGQucHJvcHMuc3R5bGUpLFxuICAgICAgICAgICAgaWNvblN0eWxlOiBzdHlsZXMuaWNvbi5yb290LFxuICAgICAgICAgICAgb25Nb3VzZUVudGVyOiBfdGhpcy5faGFuZGxlTW91c2VFbnRlckRyb3BEb3duTWVudSxcbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZTogX3RoaXMuX2hhbmRsZU1vdXNlTGVhdmVEcm9wRG93bk1lbnVcbiAgICAgICAgICB9KTtcbiAgICAgICAgY2FzZSAnUmFpc2VkQnV0dG9uJzpjYXNlICdGbGF0QnV0dG9uJzpcbiAgICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGN1cnJlbnRDaGlsZCwge1xuICAgICAgICAgICAgc3R5bGU6IF90aGlzLm1lcmdlU3R5bGVzKHN0eWxlcy5idXR0b24sIGN1cnJlbnRDaGlsZC5wcm9wcy5zdHlsZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgY2FzZSAnRm9udEljb24nOlxuICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY3VycmVudENoaWxkLCB7XG4gICAgICAgICAgICBzdHlsZTogX3RoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLmljb24ucm9vdCwgY3VycmVudENoaWxkLnByb3BzLnN0eWxlKSxcbiAgICAgICAgICAgIG9uTW91c2VFbnRlcjogX3RoaXMuX2hhbmRsZU1vdXNlRW50ZXJGb250SWNvbixcbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZTogX3RoaXMuX2hhbmRsZU1vdXNlTGVhdmVGb250SWNvblxuICAgICAgICAgIH0pO1xuICAgICAgICBjYXNlICdUb29sYmFyU2VwYXJhdG9yJzpjYXNlICdUb29sYmFyVGl0bGUnOlxuICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY3VycmVudENoaWxkLCB7XG4gICAgICAgICAgICBzdHlsZTogX3RoaXMubWVyZ2VTdHlsZXMoc3R5bGVzLnNwYW4sIGN1cnJlbnRDaGlsZC5wcm9wcy5zdHlsZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gY3VycmVudENoaWxkO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSwgc3R5bGU6IHRoaXMubWVyZ2VBbmRQcmVmaXgoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc3R5bGUpIH0sXG4gICAgICBuZXdDaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlRW50ZXJEcm9wRG93bk1lbnU6IGZ1bmN0aW9uIF9oYW5kbGVNb3VzZUVudGVyRHJvcERvd25NZW51KGUpIHtcbiAgICBlLnRhcmdldC5zdHlsZS56SW5kZXggPSB0aGlzLmdldFN0eWxlcygpLmljb24uaG92ZXIuekluZGV4O1xuICAgIGUudGFyZ2V0LnN0eWxlLmNvbG9yID0gdGhpcy5nZXRTdHlsZXMoKS5pY29uLmhvdmVyLmNvbG9yO1xuICB9LFxuXG4gIF9oYW5kbGVNb3VzZUxlYXZlRHJvcERvd25NZW51OiBmdW5jdGlvbiBfaGFuZGxlTW91c2VMZWF2ZURyb3BEb3duTWVudShlKSB7XG4gICAgZS50YXJnZXQuc3R5bGUuekluZGV4ID0gJ2F1dG8nO1xuICAgIGUudGFyZ2V0LnN0eWxlLmNvbG9yID0gdGhpcy5nZXRTdHlsZXMoKS5pY29uLnJvb3QuY29sb3I7XG4gIH0sXG5cbiAgX2hhbmRsZU1vdXNlRW50ZXJGb250SWNvbjogZnVuY3Rpb24gX2hhbmRsZU1vdXNlRW50ZXJGb250SWNvbihlKSB7XG4gICAgZS50YXJnZXQuc3R5bGUuekluZGV4ID0gdGhpcy5nZXRTdHlsZXMoKS5pY29uLmhvdmVyLnpJbmRleDtcbiAgICBlLnRhcmdldC5zdHlsZS5jb2xvciA9IHRoaXMuZ2V0U3R5bGVzKCkuaWNvbi5ob3Zlci5jb2xvcjtcbiAgfSxcblxuICBfaGFuZGxlTW91c2VMZWF2ZUZvbnRJY29uOiBmdW5jdGlvbiBfaGFuZGxlTW91c2VMZWF2ZUZvbnRJY29uKGUpIHtcbiAgICBlLnRhcmdldC5zdHlsZS56SW5kZXggPSAnYXV0byc7XG4gICAgZS50YXJnZXQuc3R5bGUuY29sb3IgPSB0aGlzLmdldFN0eWxlcygpLmljb24ucm9vdC5jb2xvcjtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVG9vbGJhckdyb3VwO1xufSx7XCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4uL3N0eWxlcy9jb2xvcnNcIjo3MSxcInJlYWN0XCI6MzE5fV0sMTE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG5cbnZhciBUb29sYmFyU2VwYXJhdG9yID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1Rvb2xiYXJTZXBhcmF0b3InLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgZ2V0VGhlbWU6IGZ1bmN0aW9uIGdldFRoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29tcG9uZW50LnRvb2xiYXI7XG4gIH0sXG5cbiAgZ2V0U3BhY2luZzogZnVuY3Rpb24gZ2V0U3BhY2luZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnNwYWNpbmc7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoe1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmdldFRoZW1lKCkuc2VwYXJhdG9yQ29sb3IsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIGhlaWdodDogdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcEd1dHRlck1vcmUsXG4gICAgICBtYXJnaW5MZWZ0OiB0aGlzLmdldFNwYWNpbmcoKS5kZXNrdG9wR3V0dGVyLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB0b3A6ICh0aGlzLmdldFRoZW1lKCkuaGVpZ2h0IC0gdGhpcy5nZXRTcGFjaW5nKCkuZGVza3RvcEd1dHRlck1vcmUpIC8gMixcbiAgICAgIHdpZHRoOiAxXG4gICAgfSwgdGhpcy5wcm9wcy5zdHlsZSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSwgc3R5bGU6IHN0eWxlcyB9KTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb29sYmFyU2VwYXJhdG9yO1xufSx7XCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcInJlYWN0XCI6MzE5fV0sMTE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIFRvb2xiYXJUaXRsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdUb29sYmFyVGl0bGUnLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgdGV4dDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIGdldFRoZW1lOiBmdW5jdGlvbiBnZXRUaGVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm11aVRoZW1lLmNvbXBvbmVudC50b29sYmFyO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcbiAgICB2YXIgdGV4dCA9IF9wcm9wcy50ZXh0O1xuXG4gICAgdmFyIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydzdHlsZScsICd0ZXh0J10pO1xuXG4gICAgdmFyIHN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoe1xuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZy5kZXNrdG9wR3V0dGVyTGVzcyxcbiAgICAgIGxpbmVIZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5oZWlnaHQgKyAncHgnLFxuICAgICAgZm9udFNpemU6IHRoaXMuZ2V0VGhlbWUoKS50aXRsZUZvbnRTaXplICsgJ3B4JyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LCBzdHlsZSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdzcGFuJyxcbiAgICAgIF9leHRlbmRzKHsgc3R5bGU6IHN0eWxlcyB9LCBvdGhlciksXG4gICAgICB0ZXh0XG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb29sYmFyVGl0bGU7XG59LHtcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwicmVhY3RcIjozMTl9XSwxMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcblxudmFyIFRvb2xiYXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVG9vbGJhcicsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBnZXRUaGVtZTogZnVuY3Rpb24gZ2V0VGhlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tdWlUaGVtZS5jb21wb25lbnQudG9vbGJhcjtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuZ2V0VGhlbWUoKS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBoZWlnaHQ6IHRoaXMuZ2V0VGhlbWUoKS5oZWlnaHQsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgcGFkZGluZzogdGhpcy5wcm9wcy5ub0d1dHRlciA/IDAgOiAnMHB4ICcgKyB0aGlzLmNvbnRleHQubXVpVGhlbWUuc3BhY2luZy5kZXNrdG9wR3V0dGVyICsgJ3B4J1xuICAgIH0sIHRoaXMucHJvcHMuc3R5bGUpO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWUsIHN0eWxlOiB0aGlzLmdldFN0eWxlcygpIH0sXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb29sYmFyO1xufSx7XCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcInJlYWN0XCI6MzE5fV0sMTE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcbnZhciBDb2xvcnMgPSByZXF1aXJlKCcuL3N0eWxlcy9jb2xvcnMnKTtcblxudmFyIFRvb2x0aXAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVG9vbHRpcCcsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgbXVpVGhlbWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzaG93OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICB0b3VjaDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgdmVydGljYWxQb3NpdGlvbjogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsndG9wJywgJ2JvdHRvbSddKSxcbiAgICBob3Jpem9udGFsUG9zaXRpb246IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnLCAnY2VudGVyJ10pXG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX3NldFJpcHBsZVNpemUoKTtcbiAgICB0aGlzLl9zZXRUb29sdGlwUG9zaXRpb24oKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLl9zZXRSaXBwbGVTaXplKCk7XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9mZnNldFdpZHRoOiBudWxsXG4gICAgfTtcbiAgfSxcblxuICBnZXRTdHlsZXM6IGZ1bmN0aW9uIGdldFN0eWxlcygpIHtcbiAgICB2YXIgdmVydGljYWxQb3NpdGlvbiA9IHRoaXMucHJvcHMudmVydGljYWxQb3NpdGlvbjtcbiAgICB2YXIgaG9yaXpvbnRhbFBvc2l0aW9uID0gdGhpcy5wcm9wcy5ob3Jpem9udGFsUG9zaXRpb247XG4gICAgdmFyIHRvdWNoTWFyZ2luT2Zmc2V0ID0gdGhpcy5wcm9wcy50b3VjaCA/IDEwIDogMDtcbiAgICB2YXIgdG91Y2hPZmZzZXRUb3AgPSB0aGlzLnByb3BzLnRvdWNoID8gLTIwIDogLTEwO1xuICAgIHZhciBvZmZzZXQgPSB2ZXJ0aWNhbFBvc2l0aW9uID09PSAnYm90dG9tJyA/IDE0ICsgdG91Y2hNYXJnaW5PZmZzZXQgOiAtMTQgLSB0b3VjaE1hcmdpbk9mZnNldDtcblxuICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICByb290OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmNvbnRleHQubXVpVGhlbWUuY29udGVudEZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiAnMTBweCcsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyMnB4JyxcbiAgICAgICAgcGFkZGluZzogJzAgOHB4JyxcbiAgICAgICAgY29sb3I6IENvbG9ycy53aGl0ZSxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICB0b3A6IC0xMDAwMCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAyLFxuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIHJpZ2h0OiBob3Jpem9udGFsUG9zaXRpb24gPT09ICdsZWZ0JyA/IDEyIDogbnVsbCxcbiAgICAgICAgbGVmdDogaG9yaXpvbnRhbFBvc2l0aW9uID09PSAnY2VudGVyJyA/ICh0aGlzLnN0YXRlLm9mZnNldFdpZHRoIC0gNDgpIC8gMiAqIC0xIDogbnVsbCxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnMG1zJywgJ3RvcCcsICc0NTBtcycpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDUwbXMnLCAndHJhbnNmb3JtJywgJzBtcycpICsgJywnICsgVHJhbnNpdGlvbnMuZWFzZU91dCgnNDUwbXMnLCAnb3BhY2l0eScsICcwbXMnKVxuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgICAgfSxcbiAgICAgIHJpcHBsZToge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgbGVmdDogaG9yaXpvbnRhbFBvc2l0aW9uID09PSAnY2VudGVyJyA/ICc1MCUnIDogaG9yaXpvbnRhbFBvc2l0aW9uID09PSAnbGVmdCcgPyAnMTAwJScgOiAnMCUnLFxuICAgICAgICB0b3A6IHZlcnRpY2FsUG9zaXRpb24gPT09ICdib3R0b20nID8gMCA6ICcxMDAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCcwbXMnLCAnd2lkdGgnLCAnNDUwbXMnKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzBtcycsICdoZWlnaHQnLCAnNDUwbXMnKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzQ1MG1zJywgJ2JhY2tncm91bmRDb2xvcicsICcwbXMnKVxuICAgICAgfSxcbiAgICAgIHJvb3RXaGVuU2hvd246IHtcbiAgICAgICAgdG9wOiB2ZXJ0aWNhbFBvc2l0aW9uID09PSAndG9wJyA/IHRvdWNoT2Zmc2V0VG9wIDogMzYsXG4gICAgICAgIG9wYWNpdHk6IDAuOSxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMHB4LCAnICsgb2Zmc2V0ICsgJ3B4LCAwcHgpJyxcbiAgICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dCgnMG1zJywgJ3RvcCcsICcwbXMnKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzQ1MG1zJywgJ3RyYW5zZm9ybScsICcwbXMnKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzQ1MG1zJywgJ29wYWNpdHknLCAnMG1zJylcbiAgICAgIH0sXG4gICAgICByb290V2hlblRvdWNoZWQ6IHtcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgbGluZUhlaWdodDogJzMycHgnLFxuICAgICAgICBwYWRkaW5nOiAnMCAxNnB4J1xuICAgICAgfSxcbiAgICAgIHJpcHBsZVdoZW5TaG93bjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5ncmV5NzAwLFxuICAgICAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9ucy5lYXNlT3V0KCc0NTBtcycsICd3aWR0aCcsICcwbXMnKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzQ1MG1zJywgJ2hlaWdodCcsICcwbXMnKSArICcsJyArIFRyYW5zaXRpb25zLmVhc2VPdXQoJzQ1MG1zJywgJ2JhY2tncm91bmRDb2xvcicsICcwbXMnKVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBsYWJlbCA9IF9wcm9wcy5sYWJlbDtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnbGFiZWwnXSk7XG5cbiAgICB2YXIgc3R5bGVzID0gdGhpcy5nZXRTdHlsZXMoKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yb290LCB0aGlzLnByb3BzLnNob3cgJiYgc3R5bGVzLnJvb3RXaGVuU2hvd24sIHRoaXMucHJvcHMudG91Y2ggJiYgc3R5bGVzLnJvb3RXaGVuVG91Y2hlZCwgdGhpcy5wcm9wcy5zdHlsZSkgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIHJlZjogJ3JpcHBsZScsXG4gICAgICAgIHN0eWxlOiB0aGlzLm1lcmdlQW5kUHJlZml4KHN0eWxlcy5yaXBwbGUsIHRoaXMucHJvcHMuc2hvdyAmJiBzdHlsZXMucmlwcGxlV2hlblNob3duKSB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBzdHlsZTogdGhpcy5tZXJnZUFuZFByZWZpeChzdHlsZXMubGFiZWwpIH0sXG4gICAgICAgIHRoaXMucHJvcHMubGFiZWxcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIF9zZXRSaXBwbGVTaXplOiBmdW5jdGlvbiBfc2V0UmlwcGxlU2l6ZSgpIHtcbiAgICB2YXIgcmlwcGxlID0gUmVhY3QuZmluZERPTU5vZGUodGhpcy5yZWZzLnJpcHBsZSk7XG4gICAgdmFyIHRvb2x0aXAgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShSZWFjdC5maW5kRE9NTm9kZSh0aGlzKSk7XG4gICAgdmFyIHRvb2x0aXBXaWR0aCA9IHBhcnNlSW50KHRvb2x0aXAuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSwgMTApIC8gKHRoaXMucHJvcHMuaG9yaXpvbnRhbFBvc2l0aW9uID09PSAnY2VudGVyJyA/IDIgOiAxKTtcbiAgICB2YXIgdG9vbHRpcEhlaWdodCA9IHBhcnNlSW50KHRvb2x0aXAuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JyksIDEwKTtcblxuICAgIHZhciByaXBwbGVEaWFtZXRlciA9IE1hdGguY2VpbChNYXRoLnNxcnQoTWF0aC5wb3codG9vbHRpcEhlaWdodCwgMikgKyBNYXRoLnBvdyh0b29sdGlwV2lkdGgsIDIpKSAqIDIpO1xuICAgIGlmICh0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgIHJpcHBsZS5zdHlsZS5oZWlnaHQgPSByaXBwbGVEaWFtZXRlciArICdweCc7XG4gICAgICByaXBwbGUuc3R5bGUud2lkdGggPSByaXBwbGVEaWFtZXRlciArICdweCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJpcHBsZS5zdHlsZS53aWR0aCA9ICcwcHgnO1xuICAgICAgcmlwcGxlLnN0eWxlLmhlaWdodCA9ICcwcHgnO1xuICAgIH1cbiAgfSxcblxuICBfc2V0VG9vbHRpcFBvc2l0aW9uOiBmdW5jdGlvbiBfc2V0VG9vbHRpcFBvc2l0aW9uKCkge1xuICAgIHZhciB0b29sdGlwID0gUmVhY3QuZmluZERPTU5vZGUodGhpcyk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG9mZnNldFdpZHRoOiB0b29sdGlwLm9mZnNldFdpZHRoIH0pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRvb2x0aXA7XG59LHtcIi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlXCI6NTQsXCIuL3N0eWxlcy9jb2xvcnNcIjo3MSxcIi4vc3R5bGVzL3RyYW5zaXRpb25zXCI6NzcsXCJyZWFjdFwiOjMxOX1dLDEyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgUHVyZVJlbmRlck1peGluID0gUmVhY3QuYWRkb25zLlB1cmVSZW5kZXJNaXhpbjtcbnZhciBTdHlsZVByb3BhYmxlID0gcmVxdWlyZSgnLi4vbWl4aW5zL3N0eWxlLXByb3BhYmxlJyk7XG52YXIgQXV0b1ByZWZpeCA9IHJlcXVpcmUoJy4uL3N0eWxlcy9hdXRvLXByZWZpeCcpO1xudmFyIFRyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBTY2FsZUluQ2hpbGQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnU2NhbGVJbkNoaWxkJyxcblxuICBtaXhpbnM6IFtQdXJlUmVuZGVyTWl4aW4sIFN0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGVudGVyRGVsYXk6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgbWF4U2NhbGU6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgbWluU2NhbGU6IFJlYWN0LlByb3BUeXBlcy5udW1iZXJcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZW50ZXJEZWxheTogMCxcbiAgICAgIG1heFNjYWxlOiAxLFxuICAgICAgbWluU2NhbGU6IDBcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxBcHBlYXI6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxBcHBlYXIoY2FsbGJhY2spIHtcbiAgICB0aGlzLl9pbml0aWFsaXplQW5pbWF0aW9uKGNhbGxiYWNrKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsRW50ZXI6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxFbnRlcihjYWxsYmFjaykge1xuICAgIHRoaXMuX2luaXRpYWxpemVBbmltYXRpb24oY2FsbGJhY2spO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZEFwcGVhcjogZnVuY3Rpb24gY29tcG9uZW50RGlkQXBwZWFyKCkge1xuICAgIHRoaXMuX2FuaW1hdGUoKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRFbnRlcjogZnVuY3Rpb24gY29tcG9uZW50RGlkRW50ZXIoKSB7XG4gICAgdGhpcy5fYW5pbWF0ZSgpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxMZWF2ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbExlYXZlKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdHlsZSA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLnN0eWxlO1xuXG4gICAgc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICBBdXRvUHJlZml4LnNldChzdHlsZSwgJ3RyYW5zZm9ybScsICdzY2FsZSgnICsgdGhpcy5wcm9wcy5taW5TY2FsZSArICcpJyk7XG5cbiAgICBzZXRUaW1lb3V0KChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuaXNNb3VudGVkKCkpIGNhbGxiYWNrKCk7XG4gICAgfSkuYmluZCh0aGlzKSwgNDUwKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW47XG4gICAgdmFyIGVudGVyRGVsYXkgPSBfcHJvcHMuZW50ZXJEZWxheTtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NoaWxkcmVuJywgJ2VudGVyRGVsYXknLCAnc3R5bGUnXSk7XG5cbiAgICB2YXIgbWVyZ2VkUm9vdFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoe1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dChudWxsLCBbJ3RyYW5zZm9ybScsICdvcGFjaXR5J10pXG4gICAgfSwgc3R5bGUpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzdHlsZTogbWVyZ2VkUm9vdFN0eWxlcyB9KSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBfYW5pbWF0ZTogZnVuY3Rpb24gX2FuaW1hdGUoKSB7XG4gICAgdmFyIHN0eWxlID0gUmVhY3QuZmluZERPTU5vZGUodGhpcykuc3R5bGU7XG5cbiAgICBzdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgIEF1dG9QcmVmaXguc2V0KHN0eWxlLCAndHJhbnNmb3JtJywgJ3NjYWxlKCcgKyB0aGlzLnByb3BzLm1heFNjYWxlICsgJyknKTtcbiAgfSxcblxuICBfaW5pdGlhbGl6ZUFuaW1hdGlvbjogZnVuY3Rpb24gX2luaXRpYWxpemVBbmltYXRpb24oY2FsbGJhY2spIHtcbiAgICB2YXIgc3R5bGUgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKS5zdHlsZTtcblxuICAgIHN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgQXV0b1ByZWZpeC5zZXQoc3R5bGUsICd0cmFuc2Zvcm0nLCAnc2NhbGUoMCknKTtcblxuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIHRoaXMucHJvcHMuZW50ZXJEZWxheSk7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2NhbGVJbkNoaWxkO1xufSx7XCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4uL3N0eWxlcy9hdXRvLXByZWZpeFwiOjcwLFwiLi4vc3R5bGVzL3RyYW5zaXRpb25zXCI6NzcsXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSwxMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2FkZG9ucycpO1xudmFyIFB1cmVSZW5kZXJNaXhpbiA9IFJlYWN0LmFkZG9ucy5QdXJlUmVuZGVyTWl4aW47XG52YXIgUmVhY3RUcmFuc2l0aW9uR3JvdXAgPSBSZWFjdC5hZGRvbnMuVHJhbnNpdGlvbkdyb3VwO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBTY2FsZUluQ2hpbGQgPSByZXF1aXJlKCcuL3NjYWxlLWluLWNoaWxkJyk7XG5cbnZhciBTY2FsZUluID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1NjYWxlSW4nLFxuXG4gIG1peGluczogW1B1cmVSZW5kZXJNaXhpbiwgU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgY2hpbGRTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBlbnRlckRlbGF5OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIG1heFNjYWxlOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgIG1pblNjYWxlOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVudGVyRGVsYXk6IDBcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgY2hpbGRTdHlsZSA9IF9wcm9wcy5jaGlsZFN0eWxlO1xuICAgIHZhciBlbnRlckRlbGF5ID0gX3Byb3BzLmVudGVyRGVsYXk7XG4gICAgdmFyIG1heFNjYWxlID0gX3Byb3BzLm1heFNjYWxlO1xuICAgIHZhciBtaW5TY2FsZSA9IF9wcm9wcy5taW5TY2FsZTtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NoaWxkcmVuJywgJ2NoaWxkU3R5bGUnLCAnZW50ZXJEZWxheScsICdtYXhTY2FsZScsICdtaW5TY2FsZScsICdzdHlsZSddKTtcblxuICAgIHZhciBtZXJnZWRSb290U3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgfSwgc3R5bGUpO1xuXG4gICAgdmFyIG5ld0NoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBTY2FsZUluQ2hpbGQsXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6IGNoaWxkLmtleSxcbiAgICAgICAgICBlbnRlckRlbGF5OiBlbnRlckRlbGF5LFxuICAgICAgICAgIG1heFNjYWxlOiBtYXhTY2FsZSxcbiAgICAgICAgICBtaW5TY2FsZTogbWluU2NhbGUsXG4gICAgICAgICAgc3R5bGU6IGNoaWxkU3R5bGUgfSxcbiAgICAgICAgY2hpbGRcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFJlYWN0VHJhbnNpdGlvbkdyb3VwLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHN0eWxlOiBtZXJnZWRSb290U3R5bGVzLFxuICAgICAgICBjb21wb25lbnQ6ICdkaXYnIH0pLFxuICAgICAgbmV3Q2hpbGRyZW5cbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNjYWxlSW47XG59LHtcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi9zY2FsZS1pbi1jaGlsZFwiOjEyMCxcInJlYWN0L2FkZG9uc1wiOjE0N31dLDEyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgU3R5bGVQcm9wYWJsZSA9IHJlcXVpcmUoJy4uL21peGlucy9zdHlsZS1wcm9wYWJsZScpO1xudmFyIEF1dG9QcmVmaXggPSByZXF1aXJlKCcuLi9zdHlsZXMvYXV0by1wcmVmaXgnKTtcbnZhciBUcmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4uL3N0eWxlcy90cmFuc2l0aW9ucycpO1xuXG52YXIgU2xpZGVJbkNoaWxkID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1NsaWRlSW5DaGlsZCcsXG5cbiAgbWl4aW5zOiBbU3R5bGVQcm9wYWJsZV0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZW50ZXJEZWxheTogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICAvL1RoaXMgY2FsbGJhY2sgaXMgbmVlZGVkIGJhY2F1c2UgdGhlIGRpcmVjdGlvbiBjb3VsZCBjaGFuZ2VcbiAgICAvL3doZW4gbGVhdmluZyB0aGUgZG9tXG4gICAgZ2V0TGVhdmVEaXJlY3Rpb246IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZW50ZXJEZWxheTogMFxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbEVudGVyOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsRW50ZXIoY2FsbGJhY2spIHtcbiAgICB2YXIgc3R5bGUgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKS5zdHlsZTtcbiAgICB2YXIgeCA9IHRoaXMucHJvcHMuZGlyZWN0aW9uID09PSAnbGVmdCcgPyAnMTAwJScgOiB0aGlzLnByb3BzLmRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyA/ICctMTAwJScgOiAnMCc7XG4gICAgdmFyIHkgPSB0aGlzLnByb3BzLmRpcmVjdGlvbiA9PT0gJ3VwJyA/ICcxMDAlJyA6IHRoaXMucHJvcHMuZGlyZWN0aW9uID09PSAnZG93bicgPyAnLTEwMCUnIDogJzAnO1xuXG4gICAgc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICBBdXRvUHJlZml4LnNldChzdHlsZSwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgnICsgeCArICcsJyArIHkgKyAnLDApJyk7XG5cbiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCB0aGlzLnByb3BzLmVudGVyRGVsYXkpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZEVudGVyOiBmdW5jdGlvbiBjb21wb25lbnREaWRFbnRlcigpIHtcbiAgICB2YXIgc3R5bGUgPSBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKS5zdHlsZTtcbiAgICBzdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgIEF1dG9QcmVmaXguc2V0KHN0eWxlLCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxMZWF2ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbExlYXZlKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdHlsZSA9IFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLnN0eWxlO1xuICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLnByb3BzLmdldExlYXZlRGlyZWN0aW9uKCk7XG4gICAgdmFyIHggPSBkaXJlY3Rpb24gPT09ICdsZWZ0JyA/ICctMTAwJScgOiBkaXJlY3Rpb24gPT09ICdyaWdodCcgPyAnMTAwJScgOiAnMCc7XG4gICAgdmFyIHkgPSBkaXJlY3Rpb24gPT09ICd1cCcgPyAnLTEwMCUnIDogZGlyZWN0aW9uID09PSAnZG93bicgPyAnMTAwJScgOiAnMCc7XG5cbiAgICBzdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIEF1dG9QcmVmaXguc2V0KHN0eWxlLCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywnICsgeSArICcsMCknKTtcblxuICAgIHNldFRpbWVvdXQoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5pc01vdW50ZWQoKSkgY2FsbGJhY2soKTtcbiAgICB9KS5iaW5kKHRoaXMpLCA0NTApO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgZW50ZXJEZWxheSA9IF9wcm9wcy5lbnRlckRlbGF5O1xuICAgIHZhciBnZXRMZWF2ZURpcmVjdGlvbiA9IF9wcm9wcy5nZXRMZWF2ZURpcmVjdGlvbjtcbiAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cbiAgICB2YXIgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2NoaWxkcmVuJywgJ2VudGVyRGVsYXknLCAnZ2V0TGVhdmVEaXJlY3Rpb24nLCAnc3R5bGUnXSk7XG5cbiAgICB2YXIgbWVyZ2VkUm9vdFN0eWxlcyA9IHRoaXMubWVyZ2VBbmRQcmVmaXgoe1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbnMuZWFzZU91dChudWxsLCBbJ3RyYW5zZm9ybScsICdvcGFjaXR5J10pXG4gICAgfSwgc3R5bGUpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIF9leHRlbmRzKHt9LCBvdGhlciwgeyBzdHlsZTogbWVyZ2VkUm9vdFN0eWxlcyB9KSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTbGlkZUluQ2hpbGQ7XG59LHtcIi4uL21peGlucy9zdHlsZS1wcm9wYWJsZVwiOjU0LFwiLi4vc3R5bGVzL2F1dG8tcHJlZml4XCI6NzAsXCIuLi9zdHlsZXMvdHJhbnNpdGlvbnNcIjo3NyxcInJlYWN0L2FkZG9uc1wiOjE0N31dLDEyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgUmVhY3RUcmFuc2l0aW9uR3JvdXAgPSBSZWFjdC5hZGRvbnMuVHJhbnNpdGlvbkdyb3VwO1xudmFyIFN0eWxlUHJvcGFibGUgPSByZXF1aXJlKCcuLi9taXhpbnMvc3R5bGUtcHJvcGFibGUnKTtcbnZhciBTbGlkZUluQ2hpbGQgPSByZXF1aXJlKCcuL3NsaWRlLWluLWNoaWxkJyk7XG5cbnZhciBTbGlkZUluID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1NsaWRlSW4nLFxuXG4gIG1peGluczogW1N0eWxlUHJvcGFibGVdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGVudGVyRGVsYXk6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRTdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBkaXJlY3Rpb246IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnLCAndXAnLCAnZG93biddKVxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBlbnRlckRlbGF5OiAwLFxuICAgICAgZGlyZWN0aW9uOiAnbGVmdCdcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgZW50ZXJEZWxheSA9IF9wcm9wcy5lbnRlckRlbGF5O1xuICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgY2hpbGRTdHlsZSA9IF9wcm9wcy5jaGlsZFN0eWxlO1xuICAgIHZhciBkaXJlY3Rpb24gPSBfcHJvcHMuZGlyZWN0aW9uO1xuICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuICAgIHZhciBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnZW50ZXJEZWxheScsICdjaGlsZHJlbicsICdjaGlsZFN0eWxlJywgJ2RpcmVjdGlvbicsICdzdHlsZSddKTtcblxuICAgIHZhciBtZXJnZWRSb290U3R5bGVzID0gdGhpcy5tZXJnZUFuZFByZWZpeCh7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgfSwgc3R5bGUpO1xuXG4gICAgdmFyIG5ld0NoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBTbGlkZUluQ2hpbGQsXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6IGNoaWxkLmtleSxcbiAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICAgICAgICBlbnRlckRlbGF5OiBlbnRlckRlbGF5LFxuICAgICAgICAgIGdldExlYXZlRGlyZWN0aW9uOiBfdGhpcy5fZ2V0TGVhdmVEaXJlY3Rpb24sXG4gICAgICAgICAgc3R5bGU6IGNoaWxkU3R5bGUgfSxcbiAgICAgICAgY2hpbGRcbiAgICAgICk7XG4gICAgfSwgdGhpcyk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFJlYWN0VHJhbnNpdGlvbkdyb3VwLFxuICAgICAgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgICAgIHN0eWxlOiBtZXJnZWRSb290U3R5bGVzLFxuICAgICAgICBjb21wb25lbnQ6ICdkaXYnIH0pLFxuICAgICAgbmV3Q2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIF9nZXRMZWF2ZURpcmVjdGlvbjogZnVuY3Rpb24gX2dldExlYXZlRGlyZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmRpcmVjdGlvbjtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTbGlkZUluO1xufSx7XCIuLi9taXhpbnMvc3R5bGUtcHJvcGFibGVcIjo1NCxcIi4vc2xpZGUtaW4tY2hpbGRcIjoxMjIsXCJyZWFjdC9hZGRvbnNcIjoxNDd9XSwxMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciBjcmVhdGVGcmFnbWVudCA9IFJlYWN0LmFkZG9ucy5jcmVhdGVGcmFnbWVudDtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoZnJhZ21lbnRzKSB7XG4gICAgdmFyIG5ld0ZyYWdtZW50cyA9IHt9O1xuICAgIHZhciB2YWxpZENoaWxkcmVuQ291bnQgPSAwO1xuICAgIHZhciBmaXJzdEtleSA9IHVuZGVmaW5lZDtcblxuICAgIC8vT25seSBjcmVhdGUgbm9uLWVtcHR5IGtleSBmcmFnbWVudHNcbiAgICBmb3IgKHZhciBrZXkgaW4gZnJhZ21lbnRzKSB7XG4gICAgICB2YXIgY3VycmVudENoaWxkID0gZnJhZ21lbnRzW2tleV07XG5cbiAgICAgIGlmIChjdXJyZW50Q2hpbGQpIHtcbiAgICAgICAgaWYgKHZhbGlkQ2hpbGRyZW5Db3VudCA9PT0gMCkgZmlyc3RLZXkgPSBrZXk7XG4gICAgICAgIG5ld0ZyYWdtZW50c1trZXldID0gY3VycmVudENoaWxkO1xuICAgICAgICB2YWxpZENoaWxkcmVuQ291bnQrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodmFsaWRDaGlsZHJlbkNvdW50ID09PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGlmICh2YWxpZENoaWxkcmVuQ291bnQgPT09IDEpIHJldHVybiBuZXdGcmFnbWVudHNbZmlyc3RLZXldO1xuICAgIHJldHVybiBjcmVhdGVGcmFnbWVudChuZXdGcmFnbWVudHMpO1xuICB9LFxuXG4gIGV4dGVuZDogZnVuY3Rpb24gZXh0ZW5kKGNoaWxkcmVuLCBleHRlbmRlZFByb3BzLCBleHRlbmRlZENoaWxkcmVuKSB7XG5cbiAgICByZXR1cm4gUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcblxuICAgICAgdmFyIG5ld1Byb3BzID0gdHlwZW9mIGV4dGVuZGVkUHJvcHMgPT09ICdmdW5jdGlvbicgPyBleHRlbmRlZFByb3BzKGNoaWxkKSA6IGV4dGVuZGVkUHJvcHM7XG5cbiAgICAgIHZhciBuZXdDaGlsZHJlbiA9IHR5cGVvZiBleHRlbmRlZENoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gZXh0ZW5kZWRDaGlsZHJlbihjaGlsZCkgOiBleHRlbmRlZENoaWxkcmVuID8gZXh0ZW5kZWRDaGlsZHJlbiA6IGNoaWxkLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBuZXdQcm9wcywgbmV3Q2hpbGRyZW4pO1xuICAgIH0pIDogY2hpbGRyZW47XG4gIH1cblxufTtcbn0se1wicmVhY3QvYWRkb25zXCI6MTQ3fV0sMTI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyoqXG4gICAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yc3BhY2UsIG5vcm1hbGl6ZWQgdG8gMCBmb3JcbiAgICogZGFya2VzdCBibGFjayBhbmQgMSBmb3IgbGlnaHRlc3Qgd2hpdGUuIFJHQiBjb2xvcnMgb25seS4gRG9lcyBub3QgdGFrZVxuICAgKiBpbnRvIGFjY291bnQgYWxwaGEgdmFsdWVzLlxuICAgKlxuICAgKiBUT0RPOlxuICAgKiAtIFRha2UgaW50byBhY2NvdW50IGFscGhhIHZhbHVlcy5cbiAgICogLSBJZGVudGlmeSB3aHkgdGhlcmUgYXJlIG1pbm9yIGRpc2NyZXBhbmNpZXMgZm9yIHNvbWUgdXNlIGNhc2VzXG4gICAqICAgKGkuZS4gI0YwRiAmICNGRkYpLiBOb3RlIHRoYXQgdGhlc2UgY2FzZXMgcmFyZWx5IG9jY3VyLlxuICAgKlxuICAgKiBGb3JtdWxhOiBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG4gICAqL1xuICBfbHVtaW5hbmNlOiBmdW5jdGlvbiBfbHVtaW5hbmNlKGNvbG9yKSB7XG4gICAgY29sb3IgPSB0aGlzLl9kZWNvbXBvc2VDb2xvcihjb2xvcik7XG5cbiAgICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSA+IC0xKSB7XG4gICAgICB2YXIgcmdiID0gY29sb3IudmFsdWVzLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHZhbCAvPSAyNTU7IC8vIG5vcm1hbGl6ZWRcbiAgICAgICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiBNYXRoLnBvdygodmFsICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnQ2FsY3VsYXRpbmcgdGhlIHJlbGF0aXZlIGx1bWluYW5jZSBpcyBub3QgYXZhaWxhYmxlIGZvciAnICsgJ0hTTCBhbmQgSFNMQS4nO1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbXM6XG4gICAqIGFkZGl0aW9uYWxWYWx1ZSA9IEFuIGV4dHJhIHZhbHVlIHRoYXQgaGFzIGJlZW4gY2FsY3VsYXRlZCBidXQgbm90IGluY2x1ZGVkXG4gICAqICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIG9yaWdpbmFsIGNvbG9yIG9iamVjdCwgc3VjaCBhcyBhbiBhbHBoYSB2YWx1ZS5cbiAgICovXG4gIF9jb252ZXJ0Q29sb3JUb1N0cmluZzogZnVuY3Rpb24gX2NvbnZlcnRDb2xvclRvU3RyaW5nKGNvbG9yLCBhZGRpdG9uYWxWYWx1ZSkge1xuICAgIHZhciBzdHIgPSBjb2xvci50eXBlICsgJygnICsgcGFyc2VJbnQoY29sb3IudmFsdWVzWzBdKSArICcsJyArIHBhcnNlSW50KGNvbG9yLnZhbHVlc1sxXSkgKyAnLCcgKyBwYXJzZUludChjb2xvci52YWx1ZXNbMl0pO1xuXG4gICAgaWYgKGFkZGl0b25hbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0ciArPSAnLCcgKyBhZGRpdG9uYWxWYWx1ZSArICcpJztcbiAgICB9IGVsc2UgaWYgKGNvbG9yLnZhbHVlcy5sZW5ndGggPT09IDQpIHtcbiAgICAgIHN0ciArPSAnLCcgKyBjb2xvci52YWx1ZXNbM10gKyAnKSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnKSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfSxcblxuICAvLyBDb252ZXJ0cyBhIGNvbG9yIGZyb20gaGV4IGZvcm1hdCB0byByZ2IgZm9ybWF0LlxuICBfY29udmVydEhleFRvUkdCOiBmdW5jdGlvbiBfY29udmVydEhleFRvUkdCKGNvbG9yKSB7XG4gICAgaWYgKGNvbG9yLmxlbmd0aCA9PT0gNCkge1xuICAgICAgdmFyIGV4dGVuZGVkQ29sb3IgPSAnIyc7XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGNvbG9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGV4dGVuZGVkQ29sb3IgKz0gY29sb3IuY2hhckF0KGkpICsgY29sb3IuY2hhckF0KGkpO1xuICAgICAgfVxuICAgICAgY29sb3IgPSBleHRlbmRlZENvbG9yO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZXMgPSB7XG4gICAgICByOiBwYXJzZUludChjb2xvci5zdWJzdHIoMSwgMiksIDE2KSxcbiAgICAgIGc6IHBhcnNlSW50KGNvbG9yLnN1YnN0cigzLCAyKSwgMTYpLFxuICAgICAgYjogcGFyc2VJbnQoY29sb3Iuc3Vic3RyKDUsIDIpLCAxNilcbiAgICB9O1xuXG4gICAgcmV0dXJuICdyZ2IoJyArIHZhbHVlcy5yICsgJywnICsgdmFsdWVzLmcgKyAnLCcgKyB2YWx1ZXMuYiArICcpJztcbiAgfSxcblxuICAvLyBSZXR1cm5zIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvciBvZiBhbnkgZ2l2ZW4gdHlwZS5cbiAgX2RlY29tcG9zZUNvbG9yOiBmdW5jdGlvbiBfZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kZWNvbXBvc2VDb2xvcih0aGlzLl9jb252ZXJ0SGV4VG9SR0IoY29sb3IpKTtcbiAgICB9XG5cbiAgICB2YXIgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuICAgIHZhciB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG4gICAgdmFyIHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKS5zcGxpdCgnLCcpO1xuXG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgdmFsdWVzOiB2YWx1ZXMgfTtcbiAgfSxcblxuICAvLyBTZXQgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICAvLyBBbnkgZXhpc3RpbmcgYWxwaGEgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAgZmFkZTogZnVuY3Rpb24gZmFkZShjb2xvciwgYW1vdW50KSB7XG4gICAgY29sb3IgPSB0aGlzLl9kZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gICAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSBjb2xvci50eXBlICs9ICdhJztcbiAgICByZXR1cm4gdGhpcy5fY29udmVydENvbG9yVG9TdHJpbmcoY29sb3IsIGFtb3VudCk7XG4gIH0sXG5cbiAgLy8gRGVzYXR1cmF0ZXMgcmdiIGFuZCBzZXRzIG9wYWNpdHkgdG8gMC4xNVxuICBsaWdodGVuOiBmdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBhbW91bnQpIHtcbiAgICBjb2xvciA9IHRoaXMuX2RlY29tcG9zZUNvbG9yKGNvbG9yKTtcblxuICAgIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpID4gLTEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1syXSArPSBhbW91bnQ7XG4gICAgICByZXR1cm4gdGhpcy5fZGVjb21wb3NlQ29sb3IodGhpcy5fY29udmVydENvbG9yVG9TdHJpbmcoY29sb3IpKTtcbiAgICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgPiAtMSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgKyBhbW91bnQ7XG4gICAgICAgIGlmIChjb2xvci52YWx1ZXNbaV0gPiAyNTUpIGNvbG9yLnZhbHVlc1tpXSA9IDI1NTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdhJykgPD0gLTEpIGNvbG9yLnR5cGUgKz0gJ2EnO1xuXG4gICAgcmV0dXJuIHRoaXMuX2NvbnZlcnRDb2xvclRvU3RyaW5nKGNvbG9yLCAnMC4xNScpO1xuICB9LFxuXG4gIGRhcmtlbjogZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBhbW91bnQpIHtcbiAgICBjb2xvciA9IHRoaXMuX2RlY29tcG9zZUNvbG9yKGNvbG9yKTtcblxuICAgIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpID4gLTEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1syXSArPSBhbW91bnQ7XG4gICAgICByZXR1cm4gdGhpcy5fZGVjb21wb3NlQ29sb3IodGhpcy5fY29udmVydENvbG9yVG9TdHJpbmcoY29sb3IpKTtcbiAgICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgPiAtMSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBhbW91bnQ7XG4gICAgICAgIGlmIChjb2xvci52YWx1ZXNbaV0gPCAwKSBjb2xvci52YWx1ZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9jb252ZXJ0Q29sb3JUb1N0cmluZyhjb2xvcik7XG4gIH0sXG5cbiAgLy8gQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICAvL1xuICAvLyBGb3JtdWxhOiBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI2NvbnRyYXN0LXJhdGlvZGVmXG4gIGNvbnRyYXN0UmF0aW86IGZ1bmN0aW9uIGNvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZm9yZWdyb3VuZCkge1xuICAgIHZhciBsdW1BID0gdGhpcy5fbHVtaW5hbmNlKGJhY2tncm91bmQpO1xuICAgIHZhciBsdW1CID0gdGhpcy5fbHVtaW5hbmNlKGZvcmVncm91bmQpO1xuXG4gICAgaWYgKGx1bUEgPj0gbHVtQikge1xuICAgICAgcmV0dXJuICgobHVtQSArIDAuMDUpIC8gKGx1bUIgKyAwLjA1KSkudG9GaXhlZCgyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgobHVtQiArIDAuMDUpIC8gKGx1bUEgKyAwLjA1KSkudG9GaXhlZCgyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaG93IHJlYWRhYmxlIGEgY29sb3IgY29tYmluYXRpb24gaXMgYmFzZWQgb24gaXRzIGxldmVsLlxuICAgKiBMZXZlbHMgYXJlIGRlZmluZWQgZnJvbSBATGVhVmVyb3U6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9MZWFWZXJvdS9jb250cmFzdC1yYXRpby9ibG9iL2doLXBhZ2VzL2NvbnRyYXN0LXJhdGlvLmpzXG4gICAqL1xuICBjb250cmFzdFJhdGlvTGV2ZWw6IGZ1bmN0aW9uIGNvbnRyYXN0UmF0aW9MZXZlbChiYWNrZ3JvdW5kLCBmb3JlZ3JvdW5kKSB7XG4gICAgdmFyIGxldmVscyA9IHtcbiAgICAgICdmYWlsJzoge1xuICAgICAgICByYW5nZTogWzAsIDNdLFxuICAgICAgICBjb2xvcjogJ2hzbCgwLCAxMDAlLCA0MCUpJ1xuICAgICAgfSxcbiAgICAgICdhYS1sYXJnZSc6IHtcbiAgICAgICAgcmFuZ2U6IFszLCA0LjVdLFxuICAgICAgICBjb2xvcjogJ2hzbCg0MCwgMTAwJSwgNDUlKSdcbiAgICAgIH0sXG4gICAgICAnYWEnOiB7XG4gICAgICAgIHJhbmdlOiBbNC41LCA3XSxcbiAgICAgICAgY29sb3I6ICdoc2woODAsIDYwJSwgNDUlKSdcbiAgICAgIH0sXG4gICAgICAnYWFhJzoge1xuICAgICAgICByYW5nZTogWzcsIDIyXSxcbiAgICAgICAgY29sb3I6ICdoc2woOTUsIDYwJSwgNDElKSdcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJhdGlvID0gdGhpcy5jb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGZvcmVncm91bmQpO1xuXG4gICAgZm9yICh2YXIgbGV2ZWwgaW4gbGV2ZWxzKSB7XG4gICAgICB2YXIgcmFuZ2UgPSBsZXZlbHNbbGV2ZWxdLnJhbmdlO1xuICAgICAgaWYgKHJhdGlvID49IHJhbmdlWzBdICYmIHJhdGlvIDw9IHJhbmdlWzFdKSByZXR1cm4gbGV2ZWw7XG4gICAgfVxuICB9XG59O1xufSx7fV0sMTI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50cyA9IHJlcXVpcmUoJy4vZXZlbnRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIF90ZXN0U3VwcG9ydGVkUHJvcHM6IGZ1bmN0aW9uIF90ZXN0U3VwcG9ydGVkUHJvcHMocHJvcHMpIHtcbiAgICB2YXIgaSA9IHVuZGVmaW5lZCxcbiAgICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGZvciAoaSBpbiBwcm9wcykge1xuICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KGkpICYmIGVsLnN0eWxlW2ldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvL1JldHVybnMgdGhlIGNvcnJlY3QgZXZlbnQgbmFtZSB0byB1c2VcbiAgdHJhbnNpdGlvbkVuZEV2ZW50TmFtZTogZnVuY3Rpb24gdHJhbnNpdGlvbkVuZEV2ZW50TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGVzdFN1cHBvcnRlZFByb3BzKHtcbiAgICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgJ09UcmFuc2l0aW9uJzogJ290cmFuc2l0aW9uZW5kJyxcbiAgICAgICdNb3pUcmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgJ1dlYmtpdFRyYW5zaXRpb24nOiAnd2Via2l0VHJhbnNpdGlvbkVuZCdcbiAgICB9KTtcbiAgfSxcblxuICBhbmltYXRpb25FbmRFdmVudE5hbWU6IGZ1bmN0aW9uIGFuaW1hdGlvbkVuZEV2ZW50TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGVzdFN1cHBvcnRlZFByb3BzKHtcbiAgICAgICdhbmltYXRpb24nOiAnYW5pbWF0aW9uZW5kJyxcbiAgICAgICctby1hbmltYXRpb24nOiAnb0FuaW1hdGlvbkVuZCcsXG4gICAgICAnLW1vei1hbmltYXRpb24nOiAnYW5pbWF0aW9uZW5kJyxcbiAgICAgICctd2Via2l0LWFuaW1hdGlvbic6ICd3ZWJraXRBbmltYXRpb25FbmQnXG4gICAgfSk7XG4gIH0sXG5cbiAgb25UcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoZWwsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRyYW5zaXRpb25FbmQgPSB0aGlzLnRyYW5zaXRpb25FbmRFdmVudE5hbWUoKTtcblxuICAgIEV2ZW50cy5vbmNlKGVsLCB0cmFuc2l0aW9uRW5kLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfSxcblxuICBvbkFuaW1hdGlvbkVuZDogZnVuY3Rpb24gb25BbmltYXRpb25FbmQoZWwsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGFuaW1hdGlvbkVuZCA9IHRoaXMuYW5pbWF0aW9uRW5kRXZlbnROYW1lKCk7XG5cbiAgICBFdmVudHMub25jZShlbCwgYW5pbWF0aW9uRW5kLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfVxufTtcbn0se1wiLi9ldmVudHNcIjoxMjl9XSwxMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBhZGREYXlzOiBmdW5jdGlvbiBhZGREYXlzKGQsIGRheXMpIHtcbiAgICB2YXIgbmV3RGF0ZSA9IHRoaXMuY2xvbmUoZCk7XG4gICAgbmV3RGF0ZS5zZXREYXRlKGQuZ2V0RGF0ZSgpICsgZGF5cyk7XG4gICAgcmV0dXJuIG5ld0RhdGU7XG4gIH0sXG5cbiAgYWRkTW9udGhzOiBmdW5jdGlvbiBhZGRNb250aHMoZCwgbW9udGhzKSB7XG4gICAgdmFyIG5ld0RhdGUgPSB0aGlzLmNsb25lKGQpO1xuICAgIG5ld0RhdGUuc2V0TW9udGgoZC5nZXRNb250aCgpICsgbW9udGhzKTtcbiAgICByZXR1cm4gbmV3RGF0ZTtcbiAgfSxcblxuICBhZGRZZWFyczogZnVuY3Rpb24gYWRkWWVhcnMoZCwgeWVhcnMpIHtcbiAgICB2YXIgbmV3RGF0ZSA9IHRoaXMuY2xvbmUoZCk7XG4gICAgbmV3RGF0ZS5zZXRGdWxsWWVhcihkLmdldEZ1bGxZZWFyKCkgKyB5ZWFycyk7XG4gICAgcmV0dXJuIG5ld0RhdGU7XG4gIH0sXG5cbiAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKGQpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoZC5nZXRUaW1lKCkpO1xuICB9LFxuXG4gIGNsb25lQXNEYXRlOiBmdW5jdGlvbiBjbG9uZUFzRGF0ZShkKSB7XG4gICAgdmFyIGNsb25lZERhdGUgPSB0aGlzLmNsb25lKGQpO1xuICAgIGNsb25lZERhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgcmV0dXJuIGNsb25lZERhdGU7XG4gIH0sXG5cbiAgZ2V0RGF5c0luTW9udGg6IGZ1bmN0aW9uIGdldERheXNJbk1vbnRoKGQpIHtcbiAgICB2YXIgcmVzdWx0RGF0ZSA9IHRoaXMuZ2V0Rmlyc3REYXlPZk1vbnRoKGQpO1xuXG4gICAgcmVzdWx0RGF0ZS5zZXRNb250aChyZXN1bHREYXRlLmdldE1vbnRoKCkgKyAxKTtcbiAgICByZXN1bHREYXRlLnNldERhdGUocmVzdWx0RGF0ZS5nZXREYXRlKCkgLSAxKTtcblxuICAgIHJldHVybiByZXN1bHREYXRlLmdldERhdGUoKTtcbiAgfSxcblxuICBnZXRGaXJzdERheU9mTW9udGg6IGZ1bmN0aW9uIGdldEZpcnN0RGF5T2ZNb250aChkKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpLCAxKTtcbiAgfSxcblxuICBnZXRGdWxsTW9udGg6IGZ1bmN0aW9uIGdldEZ1bGxNb250aChkKSB7XG4gICAgdmFyIG1vbnRoID0gZC5nZXRNb250aCgpO1xuICAgIHN3aXRjaCAobW9udGgpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuICdKYW51YXJ5JztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuICdGZWJydWFyeSc7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiAnTWFyY2gnO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gJ0FwcmlsJztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmV0dXJuICdNYXknO1xuICAgICAgY2FzZSA1OlxuICAgICAgICByZXR1cm4gJ0p1bmUnO1xuICAgICAgY2FzZSA2OlxuICAgICAgICByZXR1cm4gJ0p1bHknO1xuICAgICAgY2FzZSA3OlxuICAgICAgICByZXR1cm4gJ0F1Z3VzdCc7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIHJldHVybiAnU2VwdGVtYmVyJztcbiAgICAgIGNhc2UgOTpcbiAgICAgICAgcmV0dXJuICdPY3RvYmVyJztcbiAgICAgIGNhc2UgMTA6XG4gICAgICAgIHJldHVybiAnTm92ZW1iZXInO1xuICAgICAgY2FzZSAxMTpcbiAgICAgICAgcmV0dXJuICdEZWNlbWJlcic7XG4gICAgfVxuICB9LFxuXG4gIGdldFNob3J0TW9udGg6IGZ1bmN0aW9uIGdldFNob3J0TW9udGgoZCkge1xuICAgIHZhciBtb250aCA9IGQuZ2V0TW9udGgoKTtcbiAgICBzd2l0Y2ggKG1vbnRoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiAnSmFuJztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuICdGZWInO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gJ01hcic7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiAnQXByJztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmV0dXJuICdNYXknO1xuICAgICAgY2FzZSA1OlxuICAgICAgICByZXR1cm4gJ0p1bic7XG4gICAgICBjYXNlIDY6XG4gICAgICAgIHJldHVybiAnSnVsJztcbiAgICAgIGNhc2UgNzpcbiAgICAgICAgcmV0dXJuICdBdWcnO1xuICAgICAgY2FzZSA4OlxuICAgICAgICByZXR1cm4gJ1NlcCc7XG4gICAgICBjYXNlIDk6XG4gICAgICAgIHJldHVybiAnT2N0JztcbiAgICAgIGNhc2UgMTA6XG4gICAgICAgIHJldHVybiAnTm92JztcbiAgICAgIGNhc2UgMTE6XG4gICAgICAgIHJldHVybiAnRGVjJztcbiAgICB9XG4gIH0sXG5cbiAgZ2V0RGF5T2ZXZWVrOiBmdW5jdGlvbiBnZXREYXlPZldlZWsoZCkge1xuICAgIHZhciBkb3cgPSBkLmdldERheSgpO1xuICAgIHN3aXRjaCAoZG93KSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiAnU3VuZGF5JztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuICdNb25kYXknO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gJ1R1ZXNkYXknO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gJ1dlZG5lc2RheSc7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiAnVGh1cnNkYXknO1xuICAgICAgY2FzZSA1OlxuICAgICAgICByZXR1cm4gJ0ZyaWRheSc7XG4gICAgICBjYXNlIDY6XG4gICAgICAgIHJldHVybiAnU2F0dXJkYXknO1xuICAgIH1cbiAgfSxcblxuICBnZXRXZWVrQXJyYXk6IGZ1bmN0aW9uIGdldFdlZWtBcnJheShkKSB7XG4gICAgdmFyIGRheUFycmF5ID0gW107XG4gICAgdmFyIGRheXNJbk1vbnRoID0gdGhpcy5nZXREYXlzSW5Nb250aChkKTtcbiAgICB2YXIgZGF5c0luV2VlayA9IHVuZGVmaW5lZDtcbiAgICB2YXIgZW1wdHlEYXlzID0gdW5kZWZpbmVkO1xuICAgIHZhciBmaXJzdERheU9mV2VlayA9IHVuZGVmaW5lZDtcbiAgICB2YXIgd2VlayA9IHVuZGVmaW5lZDtcbiAgICB2YXIgd2Vla0FycmF5ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBkYXlzSW5Nb250aDsgaSsrKSB7XG4gICAgICBkYXlBcnJheS5wdXNoKG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpLCBpKSk7XG4gICAgfVxuXG4gICAgd2hpbGUgKGRheUFycmF5Lmxlbmd0aCkge1xuICAgICAgZmlyc3REYXlPZldlZWsgPSBkYXlBcnJheVswXS5nZXREYXkoKTtcbiAgICAgIGRheXNJbldlZWsgPSA3IC0gZmlyc3REYXlPZldlZWs7XG4gICAgICBlbXB0eURheXMgPSA3IC0gZGF5c0luV2VlaztcbiAgICAgIHdlZWsgPSBkYXlBcnJheS5zcGxpY2UoMCwgZGF5c0luV2Vlayk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW1wdHlEYXlzOyBpKyspIHtcbiAgICAgICAgd2Vlay51bnNoaWZ0KG51bGwpO1xuICAgICAgfVxuXG4gICAgICB3ZWVrQXJyYXkucHVzaCh3ZWVrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd2Vla0FycmF5O1xuICB9LFxuXG4gIGZvcm1hdDogZnVuY3Rpb24gZm9ybWF0KGRhdGUpIHtcbiAgICB2YXIgbSA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XG4gICAgdmFyIGQgPSBkYXRlLmdldERhdGUoKTtcbiAgICB2YXIgeSA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICByZXR1cm4gbSArICcvJyArIGQgKyAnLycgKyB5O1xuICB9LFxuXG4gIGlzRXF1YWxEYXRlOiBmdW5jdGlvbiBpc0VxdWFsRGF0ZShkMSwgZDIpIHtcbiAgICByZXR1cm4gZDEgJiYgZDIgJiYgZDEuZ2V0RnVsbFllYXIoKSA9PT0gZDIuZ2V0RnVsbFllYXIoKSAmJiBkMS5nZXRNb250aCgpID09PSBkMi5nZXRNb250aCgpICYmIGQxLmdldERhdGUoKSA9PT0gZDIuZ2V0RGF0ZSgpO1xuICB9LFxuXG4gIGlzQmVmb3JlRGF0ZTogZnVuY3Rpb24gaXNCZWZvcmVEYXRlKGQxLCBkMikge1xuICAgIHZhciBkYXRlMSA9IHRoaXMuY2xvbmVBc0RhdGUoZDEpO1xuICAgIHZhciBkYXRlMiA9IHRoaXMuY2xvbmVBc0RhdGUoZDIpO1xuXG4gICAgcmV0dXJuIGRhdGUxLmdldFRpbWUoKSA8IGRhdGUyLmdldFRpbWUoKTtcbiAgfSxcblxuICBpc0FmdGVyRGF0ZTogZnVuY3Rpb24gaXNBZnRlckRhdGUoZDEsIGQyKSB7XG4gICAgdmFyIGRhdGUxID0gdGhpcy5jbG9uZUFzRGF0ZShkMSk7XG4gICAgdmFyIGRhdGUyID0gdGhpcy5jbG9uZUFzRGF0ZShkMik7XG5cbiAgICByZXR1cm4gZGF0ZTEuZ2V0VGltZSgpID4gZGF0ZTIuZ2V0VGltZSgpO1xuICB9LFxuXG4gIGlzQmV0d2VlbkRhdGVzOiBmdW5jdGlvbiBpc0JldHdlZW5EYXRlcyhkYXRlVG9DaGVjaywgc3RhcnREYXRlLCBlbmREYXRlKSB7XG4gICAgcmV0dXJuICF0aGlzLmlzQmVmb3JlRGF0ZShkYXRlVG9DaGVjaywgc3RhcnREYXRlKSAmJiAhdGhpcy5pc0FmdGVyRGF0ZShkYXRlVG9DaGVjaywgZW5kRGF0ZSk7XG4gIH0sXG5cbiAgaXNEYXRlT2JqZWN0OiBmdW5jdGlvbiBpc0RhdGVPYmplY3QoZCkge1xuICAgIHJldHVybiBkIGluc3RhbmNlb2YgRGF0ZTtcbiAgfSxcblxuICBtb250aERpZmY6IGZ1bmN0aW9uIG1vbnRoRGlmZihkMSwgZDIpIHtcbiAgICB2YXIgbSA9IHVuZGVmaW5lZDtcbiAgICBtID0gKGQxLmdldEZ1bGxZZWFyKCkgLSBkMi5nZXRGdWxsWWVhcigpKSAqIDEyO1xuICAgIG0gKz0gZDEuZ2V0TW9udGgoKTtcbiAgICBtIC09IGQyLmdldE1vbnRoKCk7XG4gICAgcmV0dXJuIG07XG4gIH0sXG5cbiAgeWVhckRpZmY6IGZ1bmN0aW9uIHllYXJEaWZmKGQxLCBkMikge1xuICAgIHJldHVybiB+IH4odGhpcy5tb250aERpZmYoZDEsIGQyKSAvIDEyKTtcbiAgfVxuXG59O1xufSx7fV0sMTI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgaXNEZXNjZW5kYW50OiBmdW5jdGlvbiBpc0Rlc2NlbmRhbnQocGFyZW50LCBjaGlsZCkge1xuICAgIHZhciBub2RlID0gY2hpbGQucGFyZW50Tm9kZTtcblxuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBpZiAobm9kZSA9PT0gcGFyZW50KSByZXR1cm4gdHJ1ZTtcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIG9mZnNldDogZnVuY3Rpb24gb2Zmc2V0KGVsKSB7XG4gICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiByZWN0LnRvcCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLFxuICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0XG4gICAgfTtcbiAgfSxcblxuICBnZXRTdHlsZUF0dHJpYnV0ZUFzTnVtYmVyOiBmdW5jdGlvbiBnZXRTdHlsZUF0dHJpYnV0ZUFzTnVtYmVyKGVsLCBhdHRyKSB7XG4gICAgdmFyIGF0dHJTdHlsZSA9IGVsLnN0eWxlW2F0dHJdO1xuICAgIHZhciBhdHRyTnVtID0gMDtcbiAgICBpZiAoYXR0clN0eWxlICYmIGF0dHJTdHlsZS5sZW5ndGgpIHtcbiAgICAgIGF0dHJOdW0gPSBwYXJzZUludChhdHRyU3R5bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBhdHRyTnVtO1xuICB9LFxuXG4gIGFkZENsYXNzOiBmdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgaWYgKGVsLmNsYXNzTGlzdCkgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO2Vsc2UgZWwuY2xhc3NOYW1lICs9ICcgJyArIGNsYXNzTmFtZTtcbiAgfSxcblxuICByZW1vdmVDbGFzczogZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtlbHNlIGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxiKScgKyBjbGFzc05hbWUuc3BsaXQoJyAnKS5qb2luKCd8JykgKyAnKFxcXFxifCQpJywgJ2dpJyksICcgJyk7XG4gIH0sXG5cbiAgaGFzQ2xhc3M6IGZ1bmN0aW9uIGhhc0NsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgICBpZiAoZWwuY2xhc3NMaXN0KSByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7ZWxzZSByZXR1cm4gbmV3IFJlZ0V4cCgnKF58ICknICsgY2xhc3NOYW1lICsgJyggfCQpJywgJ2dpJykudGVzdChlbC5jbGFzc05hbWUpO1xuICB9LFxuXG4gIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiB0b2dnbGVDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgaWYgKHRoaXMuaGFzQ2xhc3MoZWwsIGNsYXNzTmFtZSkpIHRoaXMucmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSk7ZWxzZSB0aGlzLmFkZENsYXNzKGVsLCBjbGFzc05hbWUpO1xuICB9LFxuXG4gIGZvcmNlUmVkcmF3OiBmdW5jdGlvbiBmb3JjZVJlZHJhdyhlbCkge1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5zdHlsZS5kaXNwbGF5O1xuXG4gICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgfSxcblxuICB3aXRob3V0VHJhbnNpdGlvbjogZnVuY3Rpb24gd2l0aG91dFRyYW5zaXRpb24oZWwsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9yaWdpbmFsVHJhbnNpdGlvbiA9IGVsLnN0eWxlLnRyYW5zaXRpb247XG5cbiAgICAvL3R1cm4gb2ZmIHRyYW5zaXRpb25cbiAgICBlbC5zdHlsZS50cmFuc2l0aW9uID0gbnVsbDtcblxuICAgIGNhbGxiYWNrKCk7XG5cbiAgICAvL2ZvcmNlIGEgcmVkcmF3XG4gICAgdGhpcy5mb3JjZVJlZHJhdyhlbCk7XG5cbiAgICAvL3B1dCB0aGUgdHJhbnNpdGlvbiBiYWNrXG4gICAgZWwuc3R5bGUudHJhbnNpdGlvbiA9IG9yaWdpbmFsVHJhbnNpdGlvbjtcbiAgfVxuXG59O1xufSx7fV0sMTI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgb25jZTogZnVuY3Rpb24gb25jZShlbCwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgdHlwZUFycmF5ID0gdHlwZS5zcGxpdCgnICcpO1xuICAgIHZhciByZWN1cnNpdmVGdW5jdGlvbiA9IGZ1bmN0aW9uIHJlY3Vyc2l2ZUZ1bmN0aW9uKGUpIHtcbiAgICAgIGUudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZS50eXBlLCByZWN1cnNpdmVGdW5jdGlvbik7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZSk7XG4gICAgfTtcblxuICAgIGZvciAodmFyIGkgPSB0eXBlQXJyYXkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMub24oZWwsIHR5cGVBcnJheVtpXSwgcmVjdXJzaXZlRnVuY3Rpb24pO1xuICAgIH1cbiAgfSxcblxuICBvbjogZnVuY3Rpb24gb24oZWwsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGVsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJRTgrIFN1cHBvcnRcbiAgICAgIGVsLmF0dGFjaEV2ZW50KCdvbicgKyB0eXBlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwoZWwpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIG9mZjogZnVuY3Rpb24gb2ZmKGVsLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIGlmIChlbC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSUU4KyBTdXBwb3J0XG4gICAgICBlbC5kZXRhY2hFdmVudCgnb24nICsgdHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcblxuICBpc0tleWJvYXJkOiBmdW5jdGlvbiBpc0tleWJvYXJkKGUpIHtcbiAgICByZXR1cm4gWydrZXlkb3duJywgJ2tleXByZXNzJywgJ2tleXVwJ10uaW5kZXhPZihlLnR5cGUpICE9PSAtMTtcbiAgfVxufTtcbn0se31dLDEzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsO1xufVxuXG4vKipcbiogIEEgcmVjdXJzaXZlIG1lcmdlIGJldHdlZW4gdHdvIG9iamVjdHMuXG4qXG4qICBAcGFyYW0gYmFzZSAgICAgLSB0aGUgb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgYXJlIHRvIGJlIG92ZXJ3cml0dGVuLiBJdFxuKiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGJlIGVpdGhlciB0aGUgcm9vdCBsZXZlbCBvciBzb21lIG5lc3RlZCBsZXZlbC5cbiogIEBwYXJhbSBvdmVycmlkZSAtIGFuIG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgdG8gYmUgb3ZlcndyaXR0ZW4uIEl0XG4qICAgICAgICAgICAgICAgICAgICBzaG91bGQgaGF2ZSB0aGUgc2FtZSBzdHJ1Y3R1cmUgYXMgdGhlIG9iamVjdCBvYmplY3QuXG4qL1xudmFyIGV4dGVuZCA9IGZ1bmN0aW9uIGV4dGVuZChiYXNlLCBvdmVycmlkZSkge1xuXG4gIHZhciBtZXJnZWRPYmplY3QgPSB7fTtcblxuICAvL0xvb3AgdGhyb3VnaCBlYWNoIGtleSBpbiB0aGUgYmFzZSBvYmplY3RcbiAgT2JqZWN0LmtleXMoYmFzZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cbiAgICB2YXIgYmFzZVByb3AgPSBiYXNlW2tleV07XG4gICAgdmFyIG92ZXJyaWRlUHJvcCA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChpc09iamVjdChvdmVycmlkZSkpIG92ZXJyaWRlUHJvcCA9IG92ZXJyaWRlW2tleV07XG5cbiAgICAvL1JlY3Vyc2l2ZSBjYWxsIGV4dGVuZCBpZiB0aGUgcHJvcCBpcyBhbm90aGVyIG9iamVjdCwgZWxzZSBqdXN0IGNvcHkgaXQgb3ZlclxuICAgIG1lcmdlZE9iamVjdFtrZXldID0gaXNPYmplY3QoYmFzZVByb3ApICYmICFBcnJheS5pc0FycmF5KGJhc2VQcm9wKSA/IGV4dGVuZChiYXNlUHJvcCwgb3ZlcnJpZGVQcm9wKSA6IGJhc2VQcm9wO1xuICB9KTtcblxuICAvL0xvb3AgdGhyb3VnaCBlYWNoIG92ZXJyaWRlIGtleSBhbmQgb3ZlcnJpZGUgdGhlIHByb3BzIGluIHRoZVxuICAvL2Jhc2Ugb2JqZWN0XG4gIGlmIChpc09iamVjdChvdmVycmlkZSkpIHtcblxuICAgIE9iamVjdC5rZXlzKG92ZXJyaWRlKS5mb3JFYWNoKGZ1bmN0aW9uIChvdmVycmlkZUtleSkge1xuXG4gICAgICB2YXIgb3ZlcnJpZGVQcm9wID0gb3ZlcnJpZGVbb3ZlcnJpZGVLZXldO1xuXG4gICAgICAvL09ubHkgY29weSBvdmVyIHByb3BzIHRoYXQgYXJlIG5vdCBvYmplY3RzXG4gICAgICBpZiAoIWlzT2JqZWN0KG92ZXJyaWRlUHJvcCkgfHwgQXJyYXkuaXNBcnJheShvdmVycmlkZVByb3ApKSB7XG4gICAgICAgIG1lcmdlZE9iamVjdFtvdmVycmlkZUtleV0gPSBvdmVycmlkZVByb3A7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbWVyZ2VkT2JqZWN0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHRlbmQ7XG59LHt9XSwxMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9hZGRvbnMnKTtcbnZhciB1cGRhdGUgPSBSZWFjdC5hZGRvbnMudXBkYXRlO1xuXG5mdW5jdGlvbiBtZXJnZVNpbmdsZShvYmpBLCBvYmpCKSB7XG4gIGlmICghb2JqQSkgcmV0dXJuIG9iakI7XG4gIGlmICghb2JqQikgcmV0dXJuIG9iakE7XG4gIHJldHVybiB1cGRhdGUob2JqQSwgeyAkbWVyZ2U6IG9iakIgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIG1lcmdlOiBmdW5jdGlvbiBtZXJnZSgpIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgdmFyIGJhc2UgPSBhcmdzWzBdO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJnc1tpXSkge1xuICAgICAgICBiYXNlID0gbWVyZ2VTaW5nbGUoYmFzZSwgYXJnc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiYXNlO1xuICB9LFxuXG4gIG1lcmdlSXRlbTogZnVuY3Rpb24gbWVyZ2VJdGVtKG9iaiwga2V5LCBuZXdWYWx1ZU9iamVjdCkge1xuICAgIHZhciBjb21tYW5kID0ge307XG4gICAgY29tbWFuZFtrZXldID0geyAkbWVyZ2U6IG5ld1ZhbHVlT2JqZWN0IH07XG4gICAgcmV0dXJuIHVwZGF0ZShvYmosIGNvbW1hbmQpO1xuICB9LFxuXG4gIHB1c2g6IGZ1bmN0aW9uIHB1c2goYXJyYXksIG9iaikge1xuICAgIHZhciBuZXdPYmogPSBBcnJheS5pc0FycmF5KG9iaikgPyBvYmogOiBbb2JqXTtcbiAgICByZXR1cm4gdXBkYXRlKGFycmF5LCB7ICRwdXNoOiBuZXdPYmogfSk7XG4gIH0sXG5cbiAgc2hpZnQ6IGZ1bmN0aW9uIHNoaWZ0KGFycmF5KSB7XG4gICAgcmV0dXJuIHVwZGF0ZShhcnJheSwgeyAkc3BsaWNlOiBbWzAsIDFdXSB9KTtcbiAgfVxuXG59O1xufSx7XCJyZWFjdC9hZGRvbnNcIjoxNDd9XSwxMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ29sb3JNYW5pcHVsYXRvcjogcmVxdWlyZSgnLi9jb2xvci1tYW5pcHVsYXRvcicpLFxuICBDc3NFdmVudDogcmVxdWlyZSgnLi9jc3MtZXZlbnQnKSxcbiAgRG9tOiByZXF1aXJlKCcuL2RvbScpLFxuICBFdmVudHM6IHJlcXVpcmUoJy4vZXZlbnRzJyksXG4gIEV4dGVuZDogcmVxdWlyZSgnLi9leHRlbmQnKSxcbiAgSW1tdXRhYmlsaXR5SGVscGVyOiByZXF1aXJlKCcuL2ltbXV0YWJpbGl0eS1oZWxwZXInKSxcbiAgS2V5Q29kZTogcmVxdWlyZSgnLi9rZXktY29kZScpLFxuICBLZXlMaW5lOiByZXF1aXJlKCcuL2tleS1saW5lJyksXG4gIFVuaXF1ZUlkOiByZXF1aXJlKCcuL3VuaXF1ZS1pZCcpLFxuICBTdHlsZXM6IHJlcXVpcmUoJy4vc3R5bGVzJylcbn07XG59LHtcIi4vY29sb3ItbWFuaXB1bGF0b3JcIjoxMjUsXCIuL2Nzcy1ldmVudFwiOjEyNixcIi4vZG9tXCI6MTI4LFwiLi9ldmVudHNcIjoxMjksXCIuL2V4dGVuZFwiOjEzMCxcIi4vaW1tdXRhYmlsaXR5LWhlbHBlclwiOjEzMSxcIi4va2V5LWNvZGVcIjoxMzMsXCIuL2tleS1saW5lXCI6MTM0LFwiLi9zdHlsZXNcIjoxMzcsXCIuL3VuaXF1ZS1pZFwiOjEzOH1dLDEzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIERPV046IDQwLFxuICBFU0M6IDI3LFxuICBFTlRFUjogMTMsXG4gIExFRlQ6IDM3LFxuICBSSUdIVDogMzksXG4gIFNQQUNFOiAzMixcbiAgVEFCOiA5LFxuICBVUDogMzhcbn07XG59LHt9XSwxMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIERlc2t0b3A6IHtcbiAgICBHVVRURVI6IDI0LFxuICAgIEdVVFRFUl9MRVNTOiAxNixcbiAgICBJTkNSRU1FTlQ6IDY0LFxuICAgIE1FTlVfSVRFTV9IRUlHSFQ6IDMyXG4gIH0sXG5cbiAgZ2V0SW5jcmVtZW50YWxEaW06IGZ1bmN0aW9uIGdldEluY3JlbWVudGFsRGltKGRpbSkge1xuICAgIHJldHVybiBNYXRoLmNlaWwoZGltIC8gdGhpcy5EZXNrdG9wLklOQ1JFTUVOVCkgKiB0aGlzLkRlc2t0b3AuSU5DUkVNRU5UO1xuICB9XG59O1xufSx7fV0sMTM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIE1vZGVybml6ciAyLjguMyAoQ3VzdG9tIEJ1aWxkKSB8IE1JVCAmIEJTRFxuICogQnVpbGQ6IGh0dHA6Ly9tb2Rlcm5penIuY29tL2Rvd25sb2FkLyMtYm9yZGVycmFkaXVzLWJveHNoYWRvdy1vcGFjaXR5LWNzc3RyYW5zZm9ybXMtY3NzdHJhbnNmb3JtczNkLWNzc3RyYW5zaXRpb25zLXByZWZpeGVkLXRlc3RzdHlsZXMtdGVzdHByb3AtdGVzdGFsbHByb3BzLXByZWZpeGVzLWRvbXByZWZpeGVzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cbiAgICB2YXIgdmVyc2lvbiA9ICcyLjguMycsXG4gICAgICAgIE1vZGVybml6ciA9IHt9LFxuICAgICAgICBkb2NFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICBtb2QgPSAnbW9kZXJuaXpyJyxcbiAgICAgICAgbW9kRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobW9kKSxcbiAgICAgICAgbVN0eWxlID0gbW9kRWxlbS5zdHlsZSxcbiAgICAgICAgcHJlZml4ZXMgPSAnIC13ZWJraXQtIC1tb3otIC1vLSAtbXMtICcuc3BsaXQoJyAnKSxcbiAgICAgICAgb21QcmVmaXhlcyA9ICdXZWJraXQgTW96IE8gbXMnLFxuICAgICAgICBjc3NvbVByZWZpeGVzID0gb21QcmVmaXhlcy5zcGxpdCgnICcpLFxuICAgICAgICBkb21QcmVmaXhlcyA9IG9tUHJlZml4ZXMudG9Mb3dlckNhc2UoKS5zcGxpdCgnICcpLFxuICAgICAgICB0ZXN0cyA9IHt9LFxuICAgICAgICBjbGFzc2VzID0gW10sXG4gICAgICAgIHNsaWNlID0gY2xhc3Nlcy5zbGljZSxcbiAgICAgICAgZmVhdHVyZU5hbWUgPSB1bmRlZmluZWQsXG4gICAgICAgIGluamVjdEVsZW1lbnRXaXRoU3R5bGVzID0gZnVuY3Rpb24gaW5qZWN0RWxlbWVudFdpdGhTdHlsZXMocnVsZSwgY2FsbGJhY2ssIG5vZGVzLCB0ZXN0bmFtZXMpIHtcblxuICAgICAgICB2YXIgc3R5bGUgPSB1bmRlZmluZWQsXG4gICAgICAgICAgICByZXQgPSB1bmRlZmluZWQsXG4gICAgICAgICAgICBub2RlID0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgZG9jT3ZlcmZsb3cgPSB1bmRlZmluZWQsXG4gICAgICAgICAgICBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICAgIGJvZHkgPSBkb2N1bWVudC5ib2R5LFxuICAgICAgICAgICAgZmFrZUJvZHkgPSBib2R5IHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTtcblxuICAgICAgICBpZiAocGFyc2VJbnQobm9kZXMsIDEwKSkge1xuICAgICAgICAgICAgd2hpbGUgKG5vZGVzLS0pIHtcbiAgICAgICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgbm9kZS5pZCA9IHRlc3RuYW1lcyA/IHRlc3RuYW1lc1tub2Rlc10gOiBtb2QgKyAobm9kZXMgKyAxKTtcbiAgICAgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZSA9IFsnJiMxNzM7JywgJzxzdHlsZSBpZD1cInMnLCBtb2QsICdcIj4nLCBydWxlLCAnPC9zdHlsZT4nXS5qb2luKCcnKTtcbiAgICAgICAgZGl2LmlkID0gbW9kO1xuICAgICAgICAoYm9keSA/IGRpdiA6IGZha2VCb2R5KS5pbm5lckhUTUwgKz0gc3R5bGU7XG4gICAgICAgIGZha2VCb2R5LmFwcGVuZENoaWxkKGRpdik7XG4gICAgICAgIGlmICghYm9keSkge1xuICAgICAgICAgICAgZmFrZUJvZHkuc3R5bGUuYmFja2dyb3VuZCA9ICcnO1xuICAgICAgICAgICAgZmFrZUJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgICAgICAgIGRvY092ZXJmbG93ID0gZG9jRWxlbWVudC5zdHlsZS5vdmVyZmxvdztcbiAgICAgICAgICAgIGRvY0VsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgICAgICAgIGRvY0VsZW1lbnQuYXBwZW5kQ2hpbGQoZmFrZUJvZHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gY2FsbGJhY2soZGl2LCBydWxlKTtcbiAgICAgICAgaWYgKCFib2R5KSB7XG4gICAgICAgICAgICBmYWtlQm9keS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGZha2VCb2R5KTtcbiAgICAgICAgICAgIGRvY0VsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSBkb2NPdmVyZmxvdztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRpdik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISFyZXQ7XG4gICAgfSxcbiAgICAgICAgX2hhc093blByb3BlcnR5ID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcbiAgICAgICAgaGFzT3duUHJvcCA9IHVuZGVmaW5lZDtcblxuICAgIGZ1bmN0aW9uIGlzKG9iaiwgdHlwZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gdHlwZTtcbiAgICB9XG5cbiAgICBpZiAoIWlzKF9oYXNPd25Qcm9wZXJ0eSwgJ3VuZGVmaW5lZCcpICYmICFpcyhfaGFzT3duUHJvcGVydHkuY2FsbCwgJ3VuZGVmaW5lZCcpKSB7XG4gICAgICAgIGhhc093blByb3AgPSBmdW5jdGlvbiAob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgcmV0dXJuIF9oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc093blByb3AgPSBmdW5jdGlvbiAob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5IGluIG9iamVjdCAmJiBpcyhvYmplY3QuY29uc3RydWN0b3IucHJvdG90eXBlW3Byb3BlcnR5XSwgJ3VuZGVmaW5lZCcpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcblxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgICAgIGJvdW5kID0gZnVuY3Rpb24gYm91bmQoKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307XG4gICAgICAgICAgICAgICAgICAgIEYucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9zZWxmID0gbmV3IEYoKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KF9zZWxmLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9zZWxmO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGF0LCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gYm91bmQ7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0Q3NzKHN0cikge1xuICAgICAgICBtU3R5bGUuY3NzVGV4dCA9IHN0cjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRDc3NBbGwoc3RyMSwgc3RyMikge1xuICAgICAgICByZXR1cm4gc2V0Q3NzKHByZWZpeGVzLmpvaW4oc3RyMSArICc7JykgKyAoc3RyMiB8fCAnJykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnRhaW5zKHN0ciwgc3Vic3RyKSB7XG4gICAgICAgIHJldHVybiAhISB+KCcnICsgc3RyKS5pbmRleE9mKHN1YnN0cik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdFByb3BzKHByb3BzLCBwcmVmaXhlZCkge1xuICAgICAgICBmb3IgKHZhciBpIGluIHByb3BzKSB7XG4gICAgICAgICAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgICAgICAgaWYgKCFjb250YWlucyhwcm9wLCAnLScpICYmIG1TdHlsZVtwcm9wXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZWZpeGVkID09ICdwZngnID8gcHJvcCA6IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RET01Qcm9wcyhwcm9wcywgb2JqLCBlbGVtKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gb2JqW3Byb3BzW2ldXTtcbiAgICAgICAgICAgIGlmIChpdGVtICE9PSB1bmRlZmluZWQpIHtcblxuICAgICAgICAgICAgICAgIGlmIChlbGVtID09PSBmYWxzZSkgcmV0dXJuIHByb3BzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzKGl0ZW0sICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmJpbmQoZWxlbSB8fCBvYmopO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0UHJvcHNBbGwocHJvcCwgcHJlZml4ZWQsIGVsZW0pIHtcblxuICAgICAgICB2YXIgdWNQcm9wID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSksXG4gICAgICAgICAgICBwcm9wcyA9IChwcm9wICsgJyAnICsgY3Nzb21QcmVmaXhlcy5qb2luKHVjUHJvcCArICcgJykgKyB1Y1Byb3ApLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgaWYgKGlzKHByZWZpeGVkLCAnc3RyaW5nJykgfHwgaXMocHJlZml4ZWQsICd1bmRlZmluZWQnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRlc3RQcm9wcyhwcm9wcywgcHJlZml4ZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcHMgPSAocHJvcCArICcgJyArIGRvbVByZWZpeGVzLmpvaW4odWNQcm9wICsgJyAnKSArIHVjUHJvcCkuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIHJldHVybiB0ZXN0RE9NUHJvcHMocHJvcHMsIHByZWZpeGVkLCBlbGVtKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRlc3RzLmJvcmRlcnJhZGl1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRlc3RQcm9wc0FsbCgnYm9yZGVyUmFkaXVzJyk7XG4gICAgfTtcblxuICAgIHRlc3RzLmJveHNoYWRvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRlc3RQcm9wc0FsbCgnYm94U2hhZG93Jyk7XG4gICAgfTtcblxuICAgIHRlc3RzLm9wYWNpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldENzc0FsbCgnb3BhY2l0eTouNTUnKTtcblxuICAgICAgICByZXR1cm4gL14wLjU1JC8udGVzdChtU3R5bGUub3BhY2l0eSk7XG4gICAgfTtcbiAgICB0ZXN0cy5jc3N0cmFuc2Zvcm1zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gISF0ZXN0UHJvcHNBbGwoJ3RyYW5zZm9ybScpO1xuICAgIH07XG5cbiAgICB0ZXN0cy5jc3N0cmFuc2Zvcm1zM2QgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIHJldCA9ICEhdGVzdFByb3BzQWxsKCdwZXJzcGVjdGl2ZScpO1xuXG4gICAgICAgIGlmIChyZXQgJiYgJ3dlYmtpdFBlcnNwZWN0aXZlJyBpbiBkb2NFbGVtZW50LnN0eWxlKSB7XG5cbiAgICAgICAgICAgIGluamVjdEVsZW1lbnRXaXRoU3R5bGVzKCdAbWVkaWEgKHRyYW5zZm9ybS0zZCksKC13ZWJraXQtdHJhbnNmb3JtLTNkKXsjbW9kZXJuaXpye2xlZnQ6OXB4O3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDozcHg7fX0nLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIHJldCA9IG5vZGUub2Zmc2V0TGVmdCA9PT0gOSAmJiBub2RlLm9mZnNldEhlaWdodCA9PT0gMztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcblxuICAgIHRlc3RzLmNzc3RyYW5zaXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGVzdFByb3BzQWxsKCd0cmFuc2l0aW9uJyk7XG4gICAgfTtcblxuICAgIGZvciAodmFyIGZlYXR1cmUgaW4gdGVzdHMpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AodGVzdHMsIGZlYXR1cmUpKSB7XG4gICAgICAgICAgICBmZWF0dXJlTmFtZSA9IGZlYXR1cmUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIE1vZGVybml6cltmZWF0dXJlTmFtZV0gPSB0ZXN0c1tmZWF0dXJlXSgpO1xuXG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goKE1vZGVybml6cltmZWF0dXJlTmFtZV0gPyAnJyA6ICduby0nKSArIGZlYXR1cmVOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIE1vZGVybml6ci5hZGRUZXN0ID0gZnVuY3Rpb24gKGZlYXR1cmUsIHRlc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmZWF0dXJlID09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGZlYXR1cmUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgTW9kZXJuaXpyLmFkZFRlc3Qoa2V5LCBmZWF0dXJlW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgZmVhdHVyZSA9IGZlYXR1cmUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgaWYgKE1vZGVybml6cltmZWF0dXJlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1vZGVybml6cjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGVzdCA9IHR5cGVvZiB0ZXN0ID09ICdmdW5jdGlvbicgPyB0ZXN0KCkgOiB0ZXN0O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVuYWJsZUNsYXNzZXMgIT09ICd1bmRlZmluZWQnICYmIGVuYWJsZUNsYXNzZXMpIHtcbiAgICAgICAgICAgICAgICBkb2NFbGVtZW50LmNsYXNzTmFtZSArPSAnICcgKyAodGVzdCA/ICcnIDogJ25vLScpICsgZmVhdHVyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE1vZGVybml6cltmZWF0dXJlXSA9IHRlc3Q7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gTW9kZXJuaXpyO1xuICAgIH07XG5cbiAgICBzZXRDc3MoJycpO1xuXG4gICAgTW9kZXJuaXpyLl92ZXJzaW9uID0gdmVyc2lvbjtcblxuICAgIE1vZGVybml6ci5fcHJlZml4ZXMgPSBwcmVmaXhlcztcbiAgICBNb2Rlcm5penIuX2RvbVByZWZpeGVzID0gZG9tUHJlZml4ZXM7XG4gICAgTW9kZXJuaXpyLl9jc3NvbVByZWZpeGVzID0gY3Nzb21QcmVmaXhlcztcblxuICAgIE1vZGVybml6ci50ZXN0UHJvcCA9IGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiB0ZXN0UHJvcHMoW3Byb3BdKTtcbiAgICB9O1xuXG4gICAgTW9kZXJuaXpyLnRlc3RBbGxQcm9wcyA9IHRlc3RQcm9wc0FsbDtcblxuICAgIE1vZGVybml6ci50ZXN0U3R5bGVzID0gaW5qZWN0RWxlbWVudFdpdGhTdHlsZXM7XG4gICAgTW9kZXJuaXpyLnByZWZpeGVkID0gZnVuY3Rpb24gKHByb3AsIG9iaiwgZWxlbSkge1xuICAgICAgICBpZiAoIW9iaikge1xuICAgICAgICAgICAgcmV0dXJuIHRlc3RQcm9wc0FsbChwcm9wLCAncGZ4Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGVzdFByb3BzQWxsKHByb3AsIG9iaiwgZWxlbSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIE1vZGVybml6cjtcbn0pKHdpbmRvdywgd2luZG93LmRvY3VtZW50KTtcbn0se31dLDEzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIGNvcm5lcnM6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbJ2JvdHRvbS1sZWZ0JywgJ2JvdHRvbS1yaWdodCcsICd0b3AtbGVmdCcsICd0b3AtcmlnaHQnXSksXG5cbiAgY29ybmVyc0FuZENlbnRlcjogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tLWNlbnRlcicsICdib3R0b20tbGVmdCcsICdib3R0b20tcmlnaHQnLCAndG9wLWNlbnRlcicsICd0b3AtbGVmdCcsICd0b3AtcmlnaHQnXSksXG5cbiAgc3RyaW5nT3JOdW1iZXI6IFJlYWN0LlByb3BUeXBlcy5vbmVPZlR5cGUoW1JlYWN0LlByb3BUeXBlcy5zdHJpbmcsIFJlYWN0LlByb3BUeXBlcy5udW1iZXJdKSxcblxuICB6RGVwdGg6IFJlYWN0LlByb3BUeXBlcy5vbmVPZihbMCwgMSwgMiwgMywgNCwgNV0pXG5cbn07XG59LHtcInJlYWN0XCI6MzE5fV0sMTM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIEF1dG9QcmVmaXggPSByZXF1aXJlKCcuLi9zdHlsZXMvYXV0by1wcmVmaXgnKTtcbnZhciBJbW11dGFiaWxpdHlIZWxwZXIgPSByZXF1aXJlKCcuLi91dGlscy9pbW11dGFiaWxpdHktaGVscGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIG1lcmdlQW5kUHJlZml4OiBmdW5jdGlvbiBtZXJnZUFuZFByZWZpeCgpIHtcbiAgICB2YXIgbWVyZ2VkU3R5bGVzID0gSW1tdXRhYmlsaXR5SGVscGVyLm1lcmdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIEF1dG9QcmVmaXguYWxsKG1lcmdlZFN0eWxlcyk7XG4gIH1cblxufTtcbn0se1wiLi4vc3R5bGVzL2F1dG8tcHJlZml4XCI6NzAsXCIuLi91dGlscy9pbW11dGFiaWxpdHktaGVscGVyXCI6MTMxfV0sMTM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgaW5kZXggPSAwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2VuZXJhdGU6IGZ1bmN0aW9uIGdlbmVyYXRlKCkge1xuICAgIHJldHVybiBcIm11aS1pZC1cIiArIGluZGV4Kys7XG4gIH1cbn07XG59LHt9XSwxMzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyohXG4gIENvcHlyaWdodCAoYykgMjAxNSBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuXG5mdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHR2YXIgY2xhc3NlcyA9ICcnO1xuXHR2YXIgYXJnO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0YXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdGlmICghYXJnKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBhcmcgfHwgJ251bWJlcicgPT09IHR5cGVvZiBhcmcpIHtcblx0XHRcdGNsYXNzZXMgKz0gJyAnICsgYXJnO1xuXHRcdH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcblx0XHRcdGNsYXNzZXMgKz0gJyAnICsgY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdH0gZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBhcmcpIHtcblx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0aWYgKCFhcmcuaGFzT3duUHJvcGVydHkoa2V5KSB8fCAhYXJnW2tleV0pIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjbGFzc2VzICs9ICcgJyArIGtleTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIGNsYXNzZXMuc3Vic3RyKDEpO1xufVxuXG4vLyBzYWZlbHkgZXhwb3J0IGNsYXNzTmFtZXMgZm9yIG5vZGUgLyBicm93c2VyaWZ5XG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xufVxuXG4vLyBzYWZlbHkgZXhwb3J0IGNsYXNzTmFtZXMgZm9yIFJlcXVpcmVKU1xuaWYgKHR5cGVvZiBkZWZpbmUgIT09ICd1bmRlZmluZWQnICYmIGRlZmluZS5hbWQpIHtcblx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHR9KTtcbn1cblxufSx7fV0sMTQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvYWRkb25zJyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBmb3IgYWNjZXNzaW5nIGJyb3dzZXIgZ2xvYmFsc1xudmFyIHJvb3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXM7XG52YXIgYm9keUVsZW1lbnQ7XG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiAnYm9keScgaW4gZG9jdW1lbnQpIHtcbiAgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVCb3VuZFN0YXRlIChzdGF0ZSwgYm91bmQpIHtcbiAgaWYgKCFib3VuZCkgcmV0dXJuIHN0YXRlO1xuICBib3VuZCA9IFN0cmluZyhib3VuZCk7XG4gIHZhciBib3VuZFRvcCA9ICEhfmJvdW5kLmluZGV4T2YoJ3RvcCcpO1xuICB2YXIgYm91bmRSaWdodCA9ICEhfmJvdW5kLmluZGV4T2YoJ3JpZ2h0Jyk7XG4gIHZhciBib3VuZEJvdHRvbSA9ICEhfmJvdW5kLmluZGV4T2YoJ2JvdHRvbScpO1xuICB2YXIgYm91bmRMZWZ0ID0gISF+Ym91bmQuaW5kZXhPZignbGVmdCcpO1xuICB2YXIgYm91bmRBbGwgPSAhIX5ib3VuZC5pbmRleE9mKCdhbGwnKSB8fFxuICAgICEoYm91bmRUb3AgfHwgYm91bmRSaWdodCB8fCBib3VuZEJvdHRvbSB8fCBib3VuZExlZnQpO1xuICB2YXIgYm91bmRCb3ggPSAhfmJvdW5kLmluZGV4T2YoJ3BvaW50Jyk7XG4gIHN0YXRlLmJvdW5kVG9wID0gYm91bmRBbGwgfHwgYm91bmRUb3A7XG4gIHN0YXRlLmJvdW5kUmlnaHQgPSBib3VuZEFsbCB8fCBib3VuZFJpZ2h0O1xuICBzdGF0ZS5ib3VuZEJvdHRvbSA9IGJvdW5kQWxsIHx8IGJvdW5kQm90dG9tO1xuICBzdGF0ZS5ib3VuZExlZnQgPSBib3VuZEFsbCB8fCBib3VuZExlZnQ7XG4gIHN0YXRlLmJvdW5kQm94ID0gYm91bmRCb3g7XG4gIHJldHVybiBzdGF0ZTtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVVJRXZlbnQoZHJhZ2dhYmxlKSB7XG4gIHJldHVybiB7XG4gICAgcG9zaXRpb246IHtcbiAgICAgIHRvcDogZHJhZ2dhYmxlLnN0YXRlLm9mZnNldFRvcCxcbiAgICAgIGxlZnQ6IGRyYWdnYWJsZS5zdGF0ZS5vZmZzZXRMZWZ0XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjYW5EcmFnWShkcmFnZ2FibGUpIHtcbiAgcmV0dXJuIGRyYWdnYWJsZS5wcm9wcy5heGlzID09PSAnYm90aCcgfHxcbiAgICAgIGRyYWdnYWJsZS5wcm9wcy5heGlzID09PSAneSc7XG59XG5cbmZ1bmN0aW9uIGNhbkRyYWdYKGRyYWdnYWJsZSkge1xuICByZXR1cm4gZHJhZ2dhYmxlLnByb3BzLmF4aXMgPT09ICdib3RoJyB8fFxuICAgICAgZHJhZ2dhYmxlLnByb3BzLmF4aXMgPT09ICd4Jztcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jKSB7XG4gIHJldHVybiB0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZnVuYykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbn1cblxuLy8gQGNyZWRpdHMgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcm9nb3pobmlrb2ZmL2E0M2NmZWQyN2M0MWU0ZTY4Y2RjXG5mdW5jdGlvbiBmaW5kSW5BcnJheShhcnJheSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCwgZWxlbWVudCA9IG51bGw7IGkgPCBsZW5ndGgsIGVsZW1lbnQgPSBhcnJheVtpXTsgaSsrKSB7XG4gICAgaWYgKGNhbGxiYWNrLmFwcGx5KGNhbGxiYWNrLCBbZWxlbWVudCwgaSwgYXJyYXldKSkgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hlc1NlbGVjdG9yKGVsLCBzZWxlY3Rvcikge1xuICB2YXIgbWV0aG9kID0gZmluZEluQXJyYXkoW1xuICAgICdtYXRjaGVzJyxcbiAgICAnd2Via2l0TWF0Y2hlc1NlbGVjdG9yJyxcbiAgICAnbW96TWF0Y2hlc1NlbGVjdG9yJyxcbiAgICAnbXNNYXRjaGVzU2VsZWN0b3InLFxuICAgICdvTWF0Y2hlc1NlbGVjdG9yJ1xuICBdLCBmdW5jdGlvbihtZXRob2Qpe1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGVsW21ldGhvZF0pO1xuICB9KTtcblxuICByZXR1cm4gZWxbbWV0aG9kXS5jYWxsKGVsLCBzZWxlY3Rvcik7XG59XG5cbi8vIEBjcmVkaXRzOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ4MTcwMjkvd2hhdHMtdGhlLWJlc3Qtd2F5LXRvLWRldGVjdC1hLXRvdWNoLXNjcmVlbi1kZXZpY2UtdXNpbmctamF2YXNjcmlwdC80ODE5ODg2IzQ4MTk4ODZcbnZhciBpc1RvdWNoRGV2aWNlID0gJ29udG91Y2hzdGFydCcgaW4gcm9vdCAvLyB3b3JrcyBvbiBtb3N0IGJyb3dzZXJzXG4gICAgICAgICAgICAgICAgIHx8ICdvbm1zZ2VzdHVyZWNoYW5nZScgaW4gcm9vdDsgLy8gd29ya3Mgb24gaWUxMCBvbiBtcyBzdXJmYWNlXG5cbi8vIGxvb2sgOjpoYW5kbGVEcmFnU3RhcnRcbi8vZnVuY3Rpb24gaXNNdWx0aVRvdWNoKGUpIHtcbi8vICByZXR1cm4gZS50b3VjaGVzICYmIEFycmF5LmlzQXJyYXkoZS50b3VjaGVzKSAmJiBlLnRvdWNoZXMubGVuZ3RoID4gMVxuLy99XG5cbi8qKlxuICogc2ltcGxlIGFic3RyYWN0aW9uIGZvciBkcmFnZ2luZyBldmVudHMgbmFtZXNcbiAqICovXG52YXIgZHJhZ0V2ZW50Rm9yID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGV2ZW50c0ZvciA9IHtcbiAgICB0b3VjaDoge1xuICAgICAgc3RhcnQ6ICd0b3VjaHN0YXJ0JyxcbiAgICAgIG1vdmU6ICd0b3VjaG1vdmUnLFxuICAgICAgZW5kOiAndG91Y2hlbmQnXG4gICAgfSxcbiAgICBtb3VzZToge1xuICAgICAgc3RhcnQ6ICdtb3VzZWRvd24nLFxuICAgICAgbW92ZTogJ21vdXNlbW92ZScsXG4gICAgICBlbmQ6ICdtb3VzZXVwJ1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGV2ZW50c0Zvcltpc1RvdWNoRGV2aWNlID8gJ3RvdWNoJyA6ICdtb3VzZSddO1xufSkoKTtcblxuLyoqXG4gKiBnZXQge2NsaWVudFgsIGNsaWVudFl9IHBvc2l0aW9ucyBvZiBjb250cm9sXG4gKiAqL1xuZnVuY3Rpb24gZ2V0Q29udHJvbFBvc2l0aW9uKGUpIHtcbiAgdmFyIHBvc2l0aW9uID0gKGUudG91Y2hlcyAmJiBlLnRvdWNoZXNbMF0pIHx8IGU7XG4gIHJldHVybiB7XG4gICAgY2xpZW50WDogcG9zaXRpb24uY2xpZW50WCxcbiAgICBjbGllbnRZOiBwb3NpdGlvbi5jbGllbnRZXG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkRXZlbnQoZWwsIGV2ZW50LCBoYW5kbGVyKSB7XG4gIGlmICghZWwpIHsgcmV0dXJuOyB9XG4gIGlmIChlbC5hdHRhY2hFdmVudCkge1xuICAgIGVsLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgaGFuZGxlcik7XG4gIH0gZWxzZSBpZiAoZWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGVsWydvbicgKyBldmVudF0gPSBoYW5kbGVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50KGVsLCBldmVudCwgaGFuZGxlcikge1xuICBpZiAoIWVsKSB7IHJldHVybjsgfVxuICBpZiAoZWwuZGV0YWNoRXZlbnQpIHtcbiAgICBlbC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGhhbmRsZXIpO1xuICB9IGVsc2UgaWYgKGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBlbFsnb24nICsgZXZlbnRdID0gbnVsbDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdEcmFnZ2FibGUnLFxuICBtaXhpbnM6IFtSZWFjdC5hZGRvbnMuUHVyZVJlbmRlck1peGluXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICAvKipcbiAgICAgKiBgYXhpc2AgZGV0ZXJtaW5lcyB3aGljaCBheGlzIHRoZSBkcmFnZ2FibGUgY2FuIG1vdmUuXG4gICAgICpcbiAgICAgKiAnYm90aCcgYWxsb3dzIG1vdmVtZW50IGhvcml6b250YWxseSBhbmQgdmVydGljYWxseS5cbiAgICAgKiAneCcgbGltaXRzIG1vdmVtZW50IHRvIGhvcml6b250YWwgYXhpcy5cbiAgICAgKiAneScgbGltaXRzIG1vdmVtZW50IHRvIHZlcnRpY2FsIGF4aXMuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0cyB0byAnYm90aCcuXG4gICAgICovXG4gICAgYXhpczogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnYm90aCcsICd4JywgJ3knXSksXG5cbiAgICAvKipcbiAgICAgKiBgaGFuZGxlYCBzcGVjaWZpZXMgYSBzZWxlY3RvciB0byBiZSB1c2VkIGFzIHRoZSBoYW5kbGUgdGhhdCBpbml0aWF0ZXMgZHJhZy5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiAgdmFyIEFwcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICAgKiAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAqICAgICAgICByZXR1cm4gKFxuICAgICAqICAgICAgICAgIDxEcmFnZ2FibGUgaGFuZGxlPVwiLmhhbmRsZVwiPlxuICAgICAqICAgICAgICAgICAgPGRpdj5cbiAgICAgKiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhhbmRsZVwiPkNsaWNrIG1lIHRvIGRyYWc8L2Rpdj5cbiAgICAgKiAgICAgICAgICAgICAgICA8ZGl2PlRoaXMgaXMgc29tZSBvdGhlciBjb250ZW50PC9kaXY+XG4gICAgICogICAgICAgICAgICA8L2Rpdj5cbiAgICAgKiAgICAgICAgICA8L0RyYWdnYWJsZT5cbiAgICAgKiAgICAgICAgKTtcbiAgICAgKiAgICAgIH1cbiAgICAgKiAgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgaGFuZGxlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogYGNhbmNlbGAgc3BlY2lmaWVzIGEgc2VsZWN0b3IgdG8gYmUgdXNlZCB0byBwcmV2ZW50IGRyYWcgaW5pdGlhbGl6YXRpb24uXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogIHZhciBBcHAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgICogICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgKiAgICAgICAgICByZXR1cm4oXG4gICAgICogICAgICAgICAgICAgIDxEcmFnZ2FibGUgY2FuY2VsPVwiLmNhbmNlbFwiPlxuICAgICAqICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYW5jZWxcIj5Zb3UgY2FuJ3QgZHJhZyBmcm9tIGhlcmU8L2Rpdj5cbiAgICAgKiAgICAgICAgICAgIDxkaXY+RHJhZ2dpbmcgaGVyZSB3b3JrcyBmaW5lPC9kaXY+XG4gICAgICogICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgKiAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgICogICAgICAgICAgKTtcbiAgICAgKiAgICAgIH1cbiAgICAgKiAgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY2FuY2VsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogYGJvdW5kYCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gYm91bmQgdGhlIG1vdmVtZW50IHRvIHRoZSBwYXJlbnQgYm94LlxuICAgICAqXG4gICAgICogVGhlIHByb3BlcnR5IHRha2VzIGEgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgc3RyaW5ncy4gVGhlIERyYWdnYWJsZVxuICAgICAqIGlzIGJvdW5kZWQgYnkgdGhlIG5lYXJlc3QgRE9NTm9kZS5vZmZzZXRQYXJlbnQuIFRvIHNldCB0aGUgb2Zmc2V0XG4gICAgICogcGFyZW50LCBnaXZlIGl0IGEgcG9zaXRpb24gdmFsdWUgb3RoZXIgdGhhbiAnc3RhdGljJy5cbiAgICAgKlxuICAgICAqIE9wdGlvbmFsbHkgY2hvb3NlIG9uZSBvciBtb3JlIGJvdW5kcyBmcm9tOlxuICAgICAqICd0b3AnIGJvdW5kcyBtb3ZlbWVudCB0byB0aGUgdG9wIGVkZ2Ugb2YgdGhlIHBhcmVudCBib3guXG4gICAgICogJ3JpZ2h0JyBib3VuZHMgbW92ZW1lbnQgdG8gdGhlIHJpZ2h0IGVkZ2Ugb2YgdGhlIHBhcmVudCBib3guXG4gICAgICogJ2JvdHRvbScgYm91bmRzIG1vdmVtZW50IHRvIHRoZSBib3R0b20gZWRnZSBvZiB0aGUgcGFyZW50IGJveC5cbiAgICAgKiAnbGVmdCcgYm91bmRzIG1vdmVtZW50IHRvIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIHBhcmVudCBib3guXG4gICAgICogJ2FsbCcgYm91bmRzIG1vdmVtZW50IHRvIGFsbCBlZGdlcyAoZGVmYXVsdCBpZiBub3Qgc3BlY2lmaWVkKS5cbiAgICAgKlxuICAgICAqIE9wdGlvbmFsbHkgY2hvb3NlIG9uZSBhbmNob3IgZnJvbTpcbiAgICAgKiAncG9pbnQnIHRvIGNvbnN0cmFpbiBvbmx5IHRoZSB0b3AtbGVmdCBjb3JuZXIuXG4gICAgICogJ2JveCcgdG8gY29uc3RyYWluIHRoZSBlbnRpcmUgYm94IChkZWZhdWx0IGlmIG5vdCBzcGVjaWZpZWQpLlxuICAgICAqXG4gICAgICogWW91IG1heSB1c2UgbW9yZSB0aGFuIG9uZSBib3VuZCwgZS5nLiAndG9wIGxlZnQgcG9pbnQnLiBTZXQgdG8gYVxuICAgICAqIGZhbHN5IHZhbHVlIHRvIGRpc2FibGUuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0cyB0byAnYWxsIGJveCcuXG4gICAgICovXG4gICAgYm91bmQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBgZ3JpZGAgc3BlY2lmaWVzIHRoZSB4IGFuZCB5IHRoYXQgZHJhZ2dpbmcgc2hvdWxkIHNuYXAgdG8uXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogICB2YXIgQXBwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgICAqICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAqICAgICAgICAgICByZXR1cm4gKFxuICAgICAqICAgICAgICAgICAgICA8RHJhZ2dhYmxlIGdyaWQ9e1syNSwgMjVdfT5cbiAgICAgKiAgICAgICAgICAgICAgICAgICA8ZGl2Pkkgc25hcCB0byBhIDI1IHggMjUgZ3JpZDwvZGl2PlxuICAgICAqICAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgICogICAgICAgICAgICk7XG4gICAgICogICAgICB9XG4gICAgICogICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBncmlkOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXlPZihSZWFjdC5Qcm9wVHlwZXMubnVtYmVyKSxcblxuICAgIC8qKlxuICAgICAqIGBjb25zdHJhaW5gIHRha2VzIGEgZnVuY3Rpb24gdG8gY29uc3RyYWluIHRoZSBkcmFnZ2luZy5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiAgIGZ1bmN0aW9uIGNvbnN0cmFpbiAoc25hcCkge1xuICAgICAqICAgICAgICAgZnVuY3Rpb24gY29uc3RyYWluT2Zmc2V0IChvZmZzZXQsIHByZXYpIHtcbiAgICAgKiAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IG9mZnNldCAtIHByZXY7XG4gICAgICogICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZGVsdGEpID49IHNuYXApIHtcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2ICsgKGRlbHRhIDwgMCA/IC1zbmFwIDogc25hcCk7XG4gICAgICogICAgICAgICAgICAgICB9XG4gICAgICogICAgICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgKiAgICAgICAgIH1cbiAgICAgKiAgICAgICAgIHJldHVybiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICogICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgdG9wOiBjb25zdHJhaW5PZmZzZXQocG9zLnRvcCwgcG9zLnByZXZUb3ApLFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgbGVmdDogY29uc3RyYWluT2Zmc2V0KHBvcy5sZWZ0LCBwb3MucHJldkxlZnQpXG4gICAgICogICAgICAgICAgICAgICB9O1xuICAgICAqICAgICAgICAgfTtcbiAgICAgKiAgIH1cbiAgICAgKiAgIHZhciBBcHAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgICogICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICogICAgICAgICAgIHJldHVybiAoXG4gICAgICogICAgICAgICAgICAgICA8RHJhZ2dhYmxlIGNvbnN0cmFpbj17Y29uc3RyYWlufT5cbiAgICAgKiAgICAgICAgICAgICAgICAgICA8ZGl2Pkkgc25hcCB0byBhIDI1IHggMjUgZ3JpZDwvZGl2PlxuICAgICAqICAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgICogICAgICAgICAgICk7XG4gICAgICogICAgICAgfVxuICAgICAqICAgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY29uc3RyYWluOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcblxuICAgIC8qKlxuICAgICAqIGBzdGFydGAgc3BlY2lmaWVzIHRoZSB4IGFuZCB5IHRoYXQgdGhlIGRyYWdnZWQgaXRlbSBzaG91bGQgc3RhcnQgYXRcbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiAgdmFyIEFwcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICAgKiAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAqICAgICAgICAgIHJldHVybiAoXG4gICAgICogICAgICAgICAgICAgIDxEcmFnZ2FibGUgc3RhcnQ9e3t4OiAyNSwgeTogMjV9fT5cbiAgICAgKiAgICAgICAgICAgICAgICAgIDxkaXY+SSBzdGFydCB3aXRoIGxlZnQ6IDI1cHg7IHRvcDogMjVweDs8L2Rpdj5cbiAgICAgKiAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XG4gICAgICogICAgICAgICAgKTtcbiAgICAgKiAgICAgIH1cbiAgICAgKiAgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc3RhcnQ6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAvKipcbiAgICAgKiBgekluZGV4YCBzcGVjaWZpZXMgdGhlIHpJbmRleCB0byB1c2Ugd2hpbGUgZHJhZ2dpbmcuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogIHZhciBBcHAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgICogICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgKiAgICAgICAgICByZXR1cm4gKFxuICAgICAqICAgICAgICAgICAgICA8RHJhZ2dhYmxlIHpJbmRleD17MTAwfT5cbiAgICAgKiAgICAgICAgICAgICAgICAgIDxkaXY+SSBoYXZlIGEgekluZGV4PC9kaXY+XG4gICAgICogICAgICAgICAgICAgIDwvRHJhZ2dhYmxlPlxuICAgICAqICAgICAgICAgICk7XG4gICAgICogICAgICB9XG4gICAgICogIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHpJbmRleDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcblxuICAgIC8qKlxuICAgICAqIGB1c2VDaGlsZGAgZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIHVzZSB0aGUgZmlyc3QgY2hpbGQgYXMgcm9vdC5cbiAgICAgKlxuICAgICAqIElmIGZhbHNlLCBhIGRpdiBpcyBjcmVhdGVkLiBUaGlzIG9wdGlvbiBpcyByZXF1aXJlZCBpZiBhbnkgY2hpbGRyZW5cbiAgICAgKiBoYXZlIGEgcmVmLlxuICAgICAqXG4gICAgICogRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgKi9cbiAgICB1c2VDaGlsZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBkcmFnZ2luZyBzdGFydHMuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgZnVuY3Rpb24gKGV2ZW50LCB1aSkge31cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBldmVudGAgaXMgdGhlIEV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZC5cbiAgICAgKiBgdWlgIGlzIGFuIG9iamVjdDpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogIHtcbiAgICAgKiAgICBwb3NpdGlvbjoge3RvcDogMCwgbGVmdDogMH1cbiAgICAgKiAgfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9uU3RhcnQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoaWxlIGRyYWdnaW5nLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogIGZ1bmN0aW9uIChldmVudCwgdWkpIHt9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgZXZlbnRgIGlzIHRoZSBFdmVudCB0aGF0IHdhcyB0cmlnZ2VyZWQuXG4gICAgICogYHVpYCBpcyBhbiBvYmplY3Q6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICB7XG4gICAgICogICAgcG9zaXRpb246IHt0b3A6IDAsIGxlZnQ6IDB9XG4gICAgICogIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBvbkRyYWc6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gZHJhZ2dpbmcgc3RvcHMuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgZnVuY3Rpb24gKGV2ZW50LCB1aSkge31cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBldmVudGAgaXMgdGhlIEV2ZW50IHRoYXQgd2FzIHRyaWdnZXJlZC5cbiAgICAgKiBgdWlgIGlzIGFuIG9iamVjdDpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogIHtcbiAgICAgKiAgICBwb3NpdGlvbjoge3RvcDogMCwgbGVmdDogMH1cbiAgICAgKiAgfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9uU3RvcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBBIHdvcmthcm91bmQgb3B0aW9uIHdoaWNoIGNhbiBiZSBwYXNzZWQgaWYgb25Nb3VzZURvd24gbmVlZHMgdG8gYmUgYWNjZXNzZWQsIHNpbmNlIGl0J2xsIGFsd2F5cyBiZSBibG9ja2VkIChkdWUgdG8gdGhhdCB0aGVyZSdzIGludGVybmFsIHVzZSBvZiBvbk1vdXNlRG93bilcbiAgICAgKlxuICAgICAqL1xuICAgIG9uTW91c2VEb3duOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBheGlzOiAnYm90aCcsXG4gICAgICBib3VuZDogbnVsbCxcbiAgICAgIGhhbmRsZTogbnVsbCxcbiAgICAgIGNhbmNlbDogbnVsbCxcbiAgICAgIGdyaWQ6IG51bGwsXG4gICAgICBzdGFydDoge30sXG4gICAgICB6SW5kZXg6IE5hTixcbiAgICAgIHVzZUNoaWxkOiB0cnVlLFxuICAgICAgb25TdGFydDogZW1wdHlGdW5jdGlvbixcbiAgICAgIG9uRHJhZzogZW1wdHlGdW5jdGlvbixcbiAgICAgIG9uU3RvcDogZW1wdHlGdW5jdGlvbixcbiAgICAgIG9uTW91c2VEb3duOiBlbXB0eUZ1bmN0aW9uXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICAvLyBXaGV0aGVyIG9yIG5vdCBjdXJyZW50bHkgZHJhZ2dpbmdcbiAgICAgIGRyYWdnaW5nOiBmYWxzZSxcblxuICAgICAgLy8gUG9pbnRlciBvZmZzZXQgb24gc2NyZWVuXG4gICAgICBjbGllbnRYOiAwLCBjbGllbnRZOiAwLFxuXG4gICAgICAvLyBET01Ob2RlIG9mZnNldCByZWxhdGl2ZSB0byBwYXJlbnRcbiAgICAgIG9mZnNldExlZnQ6IHRoaXMucHJvcHMuc3RhcnQueCB8fCAwLCBvZmZzZXRUb3A6IHRoaXMucHJvcHMuc3RhcnQueSB8fCAwXG4gICAgfTtcblxuICAgIHVwZGF0ZUJvdW5kU3RhdGUoc3RhdGUsIHRoaXMucHJvcHMuYm91bmQpO1xuXG4gICAgcmV0dXJuIHN0YXRlO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHtcbiAgICB2YXIgc3RhdGUgPSB1cGRhdGVCb3VuZFN0YXRlKHt9LCBuZXh0UHJvcHMuYm91bmQpO1xuICAgIGlmIChuZXh0UHJvcHMuc3RhcnQpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMuc3RhcnQueCAhPSBudWxsKSB7XG4gICAgICAgIHN0YXRlLm9mZnNldExlZnQgPSBuZXh0UHJvcHMuc3RhcnQueCB8fCAwO1xuICAgICAgfVxuICAgICAgaWYgKG5leHRQcm9wcy5zdGFydC55ICE9IG51bGwpIHtcbiAgICAgICAgc3RhdGUub2Zmc2V0VG9wID0gbmV4dFByb3BzLnN0YXJ0LnkgfHwgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFJlbW92ZSBhbnkgbGVmdG92ZXIgZXZlbnQgaGFuZGxlcnNcbiAgICByZW1vdmVFdmVudChyb290LCBkcmFnRXZlbnRGb3JbJ21vdmUnXSwgdGhpcy5oYW5kbGVEcmFnKTtcbiAgICByZW1vdmVFdmVudChyb290LCBkcmFnRXZlbnRGb3JbJ2VuZCddLCB0aGlzLmhhbmRsZURyYWdFbmQpO1xuICB9LFxuXG4gIGhhbmRsZURyYWdTdGFydDogZnVuY3Rpb24gKGUpIHtcbiAgICAvLyB0b2RvOiB3cml0ZSByaWdodCBpbXBsZW1lbnRhdGlvbiB0byBwcmV2ZW50IG11bHRpdG91Y2ggZHJhZ1xuICAgIC8vIHByZXZlbnQgbXVsdGktdG91Y2ggZXZlbnRzXG4gICAgLy8gaWYgKGlzTXVsdGlUb3VjaChlKSkge1xuICAgIC8vICAgICB0aGlzLmhhbmRsZURyYWdFbmQuYXBwbHkoZSwgYXJndW1lbnRzKTtcbiAgICAvLyAgICAgcmV0dXJuXG4gICAgLy8gfVxuXG4gICAgLy8gTWFrZSBpdCBwb3NzaWJsZSB0byBhdHRhY2ggZXZlbnQgaGFuZGxlcnMgb24gdG9wIG9mIHRoaXMgb25lXG4gICAgdGhpcy5wcm9wcy5vbk1vdXNlRG93bihlKTtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgaGFuZGxlIG9yIGNhbmNlbCBwcm9wIHdhcyBwcm92aWRlZCBhbmQgc2VsZWN0b3IgZG9lc24ndCBtYXRjaFxuICAgIGlmICgodGhpcy5wcm9wcy5oYW5kbGUgJiYgIW1hdGNoZXNTZWxlY3RvcihlLnRhcmdldCwgdGhpcy5wcm9wcy5oYW5kbGUpKSB8fFxuICAgICAgKHRoaXMucHJvcHMuY2FuY2VsICYmIG1hdGNoZXNTZWxlY3RvcihlLnRhcmdldCwgdGhpcy5wcm9wcy5jYW5jZWwpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkcmFnUG9pbnQgPSBnZXRDb250cm9sUG9zaXRpb24oZSk7XG5cbiAgICAvLyBJbml0aWF0ZSBkcmFnZ2luZ1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZHJhZ2dpbmc6IHRydWUsXG4gICAgICBjbGllbnRYOiBkcmFnUG9pbnQuY2xpZW50WCxcbiAgICAgIGNsaWVudFk6IGRyYWdQb2ludC5jbGllbnRZXG4gICAgfSk7XG5cbiAgICAvLyBDYWxsIGV2ZW50IGhhbmRsZXJcbiAgICB0aGlzLnByb3BzLm9uU3RhcnQoZSwgY3JlYXRlVUlFdmVudCh0aGlzKSk7XG5cbiAgICAvLyBBZGQgZXZlbnQgaGFuZGxlcnNcbiAgICBhZGRFdmVudChyb290LCBkcmFnRXZlbnRGb3JbJ21vdmUnXSwgdGhpcy5oYW5kbGVEcmFnKTtcbiAgICBhZGRFdmVudChyb290LCBkcmFnRXZlbnRGb3JbJ2VuZCddLCB0aGlzLmhhbmRsZURyYWdFbmQpO1xuXG4gICAgLy8gQWRkIGRyYWdnaW5nIGNsYXNzIHRvIGJvZHkgZWxlbWVudFxuICAgIGlmIChib2R5RWxlbWVudCkgYm9keUVsZW1lbnQuY2xhc3NOYW1lICs9ICcgcmVhY3QtZHJhZ2dhYmxlLWRyYWdnaW5nJztcbiAgfSxcblxuICBoYW5kbGVEcmFnRW5kOiBmdW5jdGlvbiAoZSkge1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgbm90IGN1cnJlbnRseSBkcmFnZ2luZ1xuICAgIGlmICghdGhpcy5zdGF0ZS5kcmFnZ2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFR1cm4gb2ZmIGRyYWdnaW5nXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkcmFnZ2luZzogZmFsc2VcbiAgICB9KTtcblxuICAgIC8vIENhbGwgZXZlbnQgaGFuZGxlclxuICAgIHRoaXMucHJvcHMub25TdG9wKGUsIGNyZWF0ZVVJRXZlbnQodGhpcykpO1xuXG4gICAgLy8gUmVtb3ZlIGV2ZW50IGhhbmRsZXJzXG4gICAgcmVtb3ZlRXZlbnQocm9vdCwgZHJhZ0V2ZW50Rm9yWydtb3ZlJ10sIHRoaXMuaGFuZGxlRHJhZyk7XG4gICAgcmVtb3ZlRXZlbnQocm9vdCwgZHJhZ0V2ZW50Rm9yWydlbmQnXSwgdGhpcy5oYW5kbGVEcmFnRW5kKTtcblxuICAgIC8vIFJlbW92ZSBkcmFnZ2luZyBjbGFzcyBmcm9tIGJvZHkgZWxlbWVudFxuICAgIGlmIChib2R5RWxlbWVudCkge1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IGJvZHlFbGVtZW50LmNsYXNzTmFtZTtcbiAgICAgIGJvZHlFbGVtZW50LmNsYXNzTmFtZSA9XG4gICAgICAgIGNsYXNzTmFtZS5yZXBsYWNlKC8oPzpefFxccyspcmVhY3QtZHJhZ2dhYmxlLWRyYWdnaW5nXFxiLywgJyAnKTtcbiAgICB9XG4gIH0sXG5cbiAgaGFuZGxlRHJhZzogZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgZHJhZ1BvaW50ID0gZ2V0Q29udHJvbFBvc2l0aW9uKGUpO1xuICAgIHZhciBvZmZzZXRMZWZ0ID0gdGhpcy5fdG9QaXhlbHModGhpcy5zdGF0ZS5vZmZzZXRMZWZ0KTtcbiAgICB2YXIgb2Zmc2V0VG9wID0gdGhpcy5fdG9QaXhlbHModGhpcy5zdGF0ZS5vZmZzZXRUb3ApO1xuXG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgb2Zmc2V0TGVmdDogb2Zmc2V0TGVmdCxcbiAgICAgIG9mZnNldFRvcDogb2Zmc2V0VG9wXG4gICAgfTtcblxuICAgIC8vIEdldCBwYXJlbnQgRE9NIG5vZGVcbiAgICB2YXIgbm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuICAgIHZhciBvZmZzZXRQYXJlbnQgPSBub2RlLm9mZnNldFBhcmVudDtcbiAgICB2YXIgb2Zmc2V0LCBib3VuZGluZ1ZhbHVlO1xuXG4gICAgaWYgKGNhbkRyYWdYKHRoaXMpKSB7XG4gICAgICAvLyBDYWxjdWxhdGUgdXBkYXRlZCBwb3NpdGlvblxuICAgICAgb2Zmc2V0ID0gb2Zmc2V0TGVmdCArIGRyYWdQb2ludC5jbGllbnRYIC0gdGhpcy5zdGF0ZS5jbGllbnRYO1xuXG4gICAgICAvLyBCb3VuZCBtb3ZlbWVudCB0byBwYXJlbnQgYm94XG4gICAgICBpZiAodGhpcy5zdGF0ZS5ib3VuZExlZnQpIHtcbiAgICAgICAgYm91bmRpbmdWYWx1ZSA9IHN0YXRlLm9mZnNldExlZnQgLSBub2RlLm9mZnNldExlZnQ7XG4gICAgICAgIGlmIChvZmZzZXQgPCBib3VuZGluZ1ZhbHVlKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gYm91bmRpbmdWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUuYm91bmRSaWdodCkge1xuICAgICAgICBib3VuZGluZ1ZhbHVlICs9IG9mZnNldFBhcmVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuYm91bmRCb3gpIHtcbiAgICAgICAgICBib3VuZGluZ1ZhbHVlIC09IG5vZGUub2Zmc2V0V2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA+IGJvdW5kaW5nVmFsdWUpIHtcbiAgICAgICAgICBvZmZzZXQgPSBib3VuZGluZ1ZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBVcGRhdGUgbGVmdFxuICAgICAgc3RhdGUub2Zmc2V0TGVmdCA9IG9mZnNldDtcbiAgICB9XG5cbiAgICBpZiAoY2FuRHJhZ1kodGhpcykpIHtcbiAgICAgIC8vIENhbGN1bGF0ZSB1cGRhdGVkIHBvc2l0aW9uXG4gICAgICBvZmZzZXQgPSBvZmZzZXRUb3AgKyBkcmFnUG9pbnQuY2xpZW50WSAtIHRoaXMuc3RhdGUuY2xpZW50WTtcbiAgICAgIC8vIEJvdW5kIG1vdmVtZW50IHRvIHBhcmVudCBib3hcbiAgICAgIGlmICh0aGlzLnN0YXRlLmJvdW5kVG9wKSB7XG4gICAgICAgIGJvdW5kaW5nVmFsdWUgPSBzdGF0ZS5vZmZzZXRUb3AgLSBub2RlLm9mZnNldFRvcDtcbiAgICAgICAgaWYgKG9mZnNldCA8IGJvdW5kaW5nVmFsdWUpIHtcbiAgICAgICAgICBvZmZzZXQgPSBib3VuZGluZ1ZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZS5ib3VuZEJvdHRvbSkge1xuICAgICAgICBib3VuZGluZ1ZhbHVlICs9IG9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmJvdW5kQm94KSB7XG4gICAgICAgICAgYm91bmRpbmdWYWx1ZSAtPSBub2RlLm9mZnNldEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0ID4gYm91bmRpbmdWYWx1ZSkge1xuICAgICAgICAgIG9mZnNldCA9IGJvdW5kaW5nVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFVwZGF0ZSB0b3BcbiAgICAgIHN0YXRlLm9mZnNldFRvcCA9IG9mZnNldDtcbiAgICB9XG5cbiAgICB2YXIgY29uc3RyYWluID0gdGhpcy5wcm9wcy5jb25zdHJhaW47XG4gICAgdmFyIGdyaWQgPSB0aGlzLnByb3BzLmdyaWQ7XG5cbiAgICAvLyBCYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBmb3Igc25hcCB0byBncmlkXG4gICAgaWYgKCFjb25zdHJhaW4gJiYgQXJyYXkuaXNBcnJheShncmlkKSkge1xuICAgICAgdmFyIGNvbnN0cmFpbk9mZnNldCA9IGZ1bmN0aW9uIChvZmZzZXQsIHByZXYsIHNuYXApIHtcbiAgICAgICAgdmFyIGRlbHRhID0gb2Zmc2V0IC0gcHJldjtcbiAgICAgICAgaWYgKE1hdGguYWJzKGRlbHRhKSA+PSBzbmFwKSB7XG4gICAgICAgICAgcmV0dXJuIHByZXYgKyBwYXJzZUludChkZWx0YSAvIHNuYXAsIDEwKSAqIHNuYXA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9O1xuICAgICAgY29uc3RyYWluID0gZnVuY3Rpb24gKHBvcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxlZnQ6IGNvbnN0cmFpbk9mZnNldChwb3MubGVmdCwgcG9zLnByZXZMZWZ0LCBncmlkWzBdKSxcbiAgICAgICAgICB0b3A6IGNvbnN0cmFpbk9mZnNldChwb3MudG9wLCBwb3MucHJldlRvcCwgZ3JpZFsxXSlcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQ29uc3RyYWluIGlmIGZ1bmN0aW9uIGhhcyBiZWVuIHByb3ZpZGVkXG4gICAgdmFyIHBvc2l0aW9ucztcbiAgICBpZiAoY29uc3RyYWluKSB7XG4gICAgICAvLyBDb25zdHJhaW4gcG9zaXRpb25zXG4gICAgICBwb3NpdGlvbnMgPSBjb25zdHJhaW4oe1xuICAgICAgICBwcmV2TGVmdDogdGhpcy5zdGF0ZS5vZmZzZXRMZWZ0LFxuICAgICAgICBwcmV2VG9wOiB0aGlzLnN0YXRlLm9mZnNldFRvcCxcbiAgICAgICAgbGVmdDogc3RhdGUub2Zmc2V0TGVmdCxcbiAgICAgICAgdG9wOiBzdGF0ZS5vZmZzZXRUb3BcbiAgICAgIH0pO1xuICAgICAgaWYgKHBvc2l0aW9ucykge1xuICAgICAgICAvLyBVcGRhdGUgbGVmdFxuICAgICAgICBpZiAoJ2xlZnQnIGluIHBvc2l0aW9ucyAmJiAhaXNOYU4ocG9zaXRpb25zLmxlZnQpKSB7XG4gICAgICAgICAgc3RhdGUub2Zmc2V0TGVmdCA9IHBvc2l0aW9ucy5sZWZ0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFVwZGF0ZSB0b3BcbiAgICAgICAgaWYgKCd0b3AnIGluIHBvc2l0aW9ucyAmJiAhaXNOYU4ocG9zaXRpb25zLnRvcCkpIHtcbiAgICAgICAgICBzdGF0ZS5vZmZzZXRUb3AgPSBwb3NpdGlvbnMudG9wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2F2ZSBuZXcgc3RhdGVcbiAgICBzdGF0ZS5jbGllbnRYID0gdGhpcy5zdGF0ZS5jbGllbnRYICsgKHN0YXRlLm9mZnNldExlZnQgLSBvZmZzZXRMZWZ0KTtcbiAgICBzdGF0ZS5jbGllbnRZID0gdGhpcy5zdGF0ZS5jbGllbnRZICsgKHN0YXRlLm9mZnNldFRvcCAtIG9mZnNldFRvcCk7XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG5cbiAgICAvLyBDYWxsIGV2ZW50IGhhbmRsZXJcbiAgICB0aGlzLnByb3BzLm9uRHJhZyhlLCBjcmVhdGVVSUV2ZW50KHRoaXMpKTtcbiAgfSxcblxuICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBwcmV2ZW50IGZvciBzY3JvbGxcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVEcmFnU3RhcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3R5bGUgPSB7XG4gICAgICB0b3A6IHRoaXMuc3RhdGUub2Zmc2V0VG9wLFxuICAgICAgbGVmdDogdGhpcy5zdGF0ZS5vZmZzZXRMZWZ0XG4gICAgfTtcblxuICAgIC8vIFNldCB6SW5kZXggaWYgY3VycmVudGx5IGRyYWdnaW5nIGFuZCBwcm9wIGhhcyBiZWVuIHByb3ZpZGVkXG4gICAgaWYgKHRoaXMuc3RhdGUuZHJhZ2dpbmcgJiYgIWlzTmFOKHRoaXMucHJvcHMuekluZGV4KSkge1xuICAgICAgc3R5bGUuekluZGV4ID0gdGhpcy5wcm9wcy56SW5kZXg7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0ge1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiAncmVhY3QtZHJhZ2dhYmxlJyxcblxuICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlRHJhZ1N0YXJ0LFxuICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLm9uVG91Y2hTdGFydCxcblxuICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZURyYWdFbmQsXG4gICAgICBvblRvdWNoRW5kOiB0aGlzLmhhbmRsZURyYWdFbmRcbiAgICB9O1xuXG4gICAgLy8gUmV1c2UgdGhlIGNoaWxkIHByb3ZpZGVkXG4gICAgLy8gVGhpcyBtYWtlcyBpdCBmbGV4aWJsZSB0byB1c2Ugd2hhdGV2ZXIgZWxlbWVudCBpcyB3YW50ZWQgKGRpdiwgdWwsIGV0YylcbiAgICBpZiAodGhpcy5wcm9wcy51c2VDaGlsZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmFkZG9ucy5jbG9uZVdpdGhQcm9wcyhSZWFjdC5DaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LkRPTS5kaXYocHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9LFxuXG4gIF90b1BpeGVsczogZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICAvLyBTdXBwb3J0IHBlcmNlbnRhZ2VzXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiB2YWx1ZS5zbGljZSgtMSkgPT0gJyUnKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoKCt2YWx1ZS5yZXBsYWNlKCclJywgJycpIC8gMTAwKSAqXG4gICAgICAgIHRoaXMuZ2V0RE9NTm9kZSgpLm9mZnNldFBhcmVudC5jbGllbnRXaWR0aCwgMTApIHx8IDA7XG4gICAgfVxuXG4gICAgLy8gSW52YWxpZCB2YWx1ZXMgYmVjb21lIHplcm9cbiAgICB2YXIgaSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgaWYgKGlzTmFOKGkpIHx8ICFpc0Zpbml0ZShpKSkgcmV0dXJuIDA7XG5cbiAgICByZXR1cm4gaTtcbiAgfVxuXG59KTtcblxufSx7XCJyZWFjdC9hZGRvbnNcIjoxNDd9XSwxNDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGNvb2tpZSA9IHJlcXVpcmUoJ2Nvb2tpZScpO1xyXG5cclxudmFyIF9yYXdDb29raWVzID0ge307XHJcbnZhciBfY29va2llcyA9IHt9O1xyXG5cclxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBzZXRSYXdDb29raWUoZG9jdW1lbnQuY29va2llKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbG9hZChuYW1lLCBkb05vdFBhcnNlKSB7XHJcbiAgaWYgKGRvTm90UGFyc2UpIHtcclxuICAgIHJldHVybiBfcmF3Q29va2llc1tuYW1lXTtcclxuICB9XHJcblxyXG4gIHJldHVybiBfY29va2llc1tuYW1lXTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2F2ZShuYW1lLCB2YWwsIG9wdCkge1xyXG4gIF9jb29raWVzW25hbWVdID0gdmFsO1xyXG4gIF9yYXdDb29raWVzW25hbWVdID0gdmFsO1xyXG5cclxuICAvLyBhbGxvdyB5b3UgdG8gd29yayB3aXRoIGNvb2tpZXMgYXMgb2JqZWN0cy5cclxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcclxuICAgIF9yYXdDb29raWVzW25hbWVdID0gSlNPTi5zdHJpbmdpZnkodmFsKTtcclxuICB9XHJcblxyXG4gIC8vIENvb2tpZXMgb25seSB3b3JrIGluIHRoZSBicm93c2VyXHJcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5zZXJpYWxpemUobmFtZSwgX3Jhd0Nvb2tpZXNbbmFtZV0sIG9wdCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmUobmFtZSwgcGF0aCkge1xyXG4gIGRlbGV0ZSBfcmF3Q29va2llc1tuYW1lXTtcclxuICBkZWxldGUgX2Nvb2tpZXNbbmFtZV07XHJcblxyXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB2YXIgcmVtb3ZlQ29va2llID0gbmFtZSArICc9OyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDEgR01UOyc7XHJcblxyXG4gICAgaWYgKHBhdGgpIHtcclxuICAgICAgcmVtb3ZlQ29va2llICs9ICcgcGF0aD0nICsgcGF0aDtcclxuICAgIH1cclxuXHJcbiAgICBkb2N1bWVudC5jb29raWUgPSByZW1vdmVDb29raWU7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRSYXdDb29raWUocmF3Q29va2llKSB7XHJcbiAgX3Jhd0Nvb2tpZXMgPSB7fTtcclxuICBfY29va2llcyA9IHt9O1xyXG5cclxuICBpZiAoIXJhd0Nvb2tpZSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmFyIHJhd0Nvb2tpZXMgPSBjb29raWUucGFyc2UocmF3Q29va2llKTtcclxuXHJcbiAgZm9yICh2YXIga2V5IGluIHJhd0Nvb2tpZXMpIHtcclxuICAgIF9yYXdDb29raWVzW2tleV0gPSByYXdDb29raWVzW2tleV07XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgX2Nvb2tpZXNba2V5XSA9IEpTT04ucGFyc2UocmF3Q29va2llc1trZXldKTtcclxuICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAvLyBOb3Qgc2VyaWFsaXplZCBvYmplY3RcclxuICAgICAgX2Nvb2tpZXNba2V5XSA9IHJhd0Nvb2tpZXNba2V5XTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbnZhciByZWFjdENvb2tpZSA9IHtcclxuICBsb2FkOiBsb2FkLFxyXG4gIHNhdmU6IHNhdmUsXHJcbiAgcmVtb3ZlOiByZW1vdmUsXHJcbiAgc2V0UmF3Q29va2llOiBzZXRSYXdDb29raWVcclxufTtcclxuXHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gIHdpbmRvd1sncmVhY3RDb29raWUnXSA9IHJlYWN0Q29va2llO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWN0Q29va2llO1xyXG5cbn0se1wiY29va2llXCI6MTQyfV0sMTQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIVxyXG4gKiBjb29raWVcclxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBSb21hbiBTaHR5bG1hblxyXG4gKiBNSVQgTGljZW5zZWRcclxuICovXHJcblxyXG4vKipcclxuICogTW9kdWxlIGV4cG9ydHMuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcblxyXG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XHJcbmV4cG9ydHMuc2VyaWFsaXplID0gc2VyaWFsaXplO1xyXG5cclxuLyoqXHJcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5cclxudmFyIGRlY29kZSA9IGRlY29kZVVSSUNvbXBvbmVudDtcclxudmFyIGVuY29kZSA9IGVuY29kZVVSSUNvbXBvbmVudDtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZSBhIGNvb2tpZSBoZWFkZXIuXHJcbiAqXHJcbiAqIFBhcnNlIHRoZSBnaXZlbiBjb29raWUgaGVhZGVyIHN0cmluZyBpbnRvIGFuIG9iamVjdFxyXG4gKiBUaGUgb2JqZWN0IGhhcyB0aGUgdmFyaW91cyBjb29raWVzIGFzIGtleXMobmFtZXMpID0+IHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gcGFyc2Uoc3RyLCBvcHRpb25zKSB7XHJcbiAgdmFyIG9iaiA9IHt9XHJcbiAgdmFyIG9wdCA9IG9wdGlvbnMgfHwge307XHJcbiAgdmFyIHBhaXJzID0gc3RyLnNwbGl0KC87ICovKTtcclxuICB2YXIgZGVjID0gb3B0LmRlY29kZSB8fCBkZWNvZGU7XHJcblxyXG4gIHBhaXJzLmZvckVhY2goZnVuY3Rpb24ocGFpcikge1xyXG4gICAgdmFyIGVxX2lkeCA9IHBhaXIuaW5kZXhPZignPScpXHJcblxyXG4gICAgLy8gc2tpcCB0aGluZ3MgdGhhdCBkb24ndCBsb29rIGxpa2Uga2V5PXZhbHVlXHJcbiAgICBpZiAoZXFfaWR4IDwgMCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGtleSA9IHBhaXIuc3Vic3RyKDAsIGVxX2lkeCkudHJpbSgpXHJcbiAgICB2YXIgdmFsID0gcGFpci5zdWJzdHIoKytlcV9pZHgsIHBhaXIubGVuZ3RoKS50cmltKCk7XHJcblxyXG4gICAgLy8gcXVvdGVkIHZhbHVlc1xyXG4gICAgaWYgKCdcIicgPT0gdmFsWzBdKSB7XHJcbiAgICAgIHZhbCA9IHZhbC5zbGljZSgxLCAtMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gb25seSBhc3NpZ24gb25jZVxyXG4gICAgaWYgKHVuZGVmaW5lZCA9PSBvYmpba2V5XSkge1xyXG4gICAgICBvYmpba2V5XSA9IHRyeURlY29kZSh2YWwsIGRlYyk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXJpYWxpemUgZGF0YSBpbnRvIGEgY29va2llIGhlYWRlci5cclxuICpcclxuICogU2VyaWFsaXplIHRoZSBhIG5hbWUgdmFsdWUgcGFpciBpbnRvIGEgY29va2llIHN0cmluZyBzdWl0YWJsZSBmb3JcclxuICogaHR0cCBoZWFkZXJzLiBBbiBvcHRpb25hbCBvcHRpb25zIG9iamVjdCBzcGVjaWZpZWQgY29va2llIHBhcmFtZXRlcnMuXHJcbiAqXHJcbiAqIHNlcmlhbGl6ZSgnZm9vJywgJ2JhcicsIHsgaHR0cE9ubHk6IHRydWUgfSlcclxuICogICA9PiBcImZvbz1iYXI7IGh0dHBPbmx5XCJcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICogQHBhcmFtIHtzdHJpbmd9IHZhbFxyXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICogQHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIHNlcmlhbGl6ZShuYW1lLCB2YWwsIG9wdGlvbnMpIHtcclxuICB2YXIgb3B0ID0gb3B0aW9ucyB8fCB7fTtcclxuICB2YXIgZW5jID0gb3B0LmVuY29kZSB8fCBlbmNvZGU7XHJcbiAgdmFyIHBhaXJzID0gW25hbWUgKyAnPScgKyBlbmModmFsKV07XHJcblxyXG4gIGlmIChudWxsICE9IG9wdC5tYXhBZ2UpIHtcclxuICAgIHZhciBtYXhBZ2UgPSBvcHQubWF4QWdlIC0gMDtcclxuICAgIGlmIChpc05hTihtYXhBZ2UpKSB0aHJvdyBuZXcgRXJyb3IoJ21heEFnZSBzaG91bGQgYmUgYSBOdW1iZXInKTtcclxuICAgIHBhaXJzLnB1c2goJ01heC1BZ2U9JyArIG1heEFnZSk7XHJcbiAgfVxyXG5cclxuICBpZiAob3B0LmRvbWFpbikgcGFpcnMucHVzaCgnRG9tYWluPScgKyBvcHQuZG9tYWluKTtcclxuICBpZiAob3B0LnBhdGgpIHBhaXJzLnB1c2goJ1BhdGg9JyArIG9wdC5wYXRoKTtcclxuICBpZiAob3B0LmV4cGlyZXMpIHBhaXJzLnB1c2goJ0V4cGlyZXM9JyArIG9wdC5leHBpcmVzLnRvVVRDU3RyaW5nKCkpO1xyXG4gIGlmIChvcHQuaHR0cE9ubHkpIHBhaXJzLnB1c2goJ0h0dHBPbmx5Jyk7XHJcbiAgaWYgKG9wdC5zZWN1cmUpIHBhaXJzLnB1c2goJ1NlY3VyZScpO1xyXG5cclxuICByZXR1cm4gcGFpcnMuam9pbignOyAnKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyeSBkZWNvZGluZyBhIHN0cmluZyB1c2luZyBhIGRlY29kaW5nIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGRlY29kZVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIHRyeURlY29kZShzdHIsIGRlY29kZSkge1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gZGVjb2RlKHN0cik7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgcmV0dXJuIHN0cjtcclxuICB9XHJcbn1cclxuXG59LHt9XSwxNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlc3BvbmRlckV2ZW50UGx1Z2luXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9FdmVudENvbnN0YW50cycpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKCdyZWFjdC9saWIvRXZlbnRQbHVnaW5VdGlscycpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCdyZWFjdC9saWIvRXZlbnRQcm9wYWdhdG9ycycpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgncmVhY3QvbGliL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbnZhciBhY2N1bXVsYXRlSW50byA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9hY2N1bXVsYXRlSW50bycpO1xudmFyIGtleU9mID0gcmVxdWlyZSgncmVhY3QvbGliL2tleU9mJyk7XG5cbnZhciBpc1N0YXJ0aXNoID0gRXZlbnRQbHVnaW5VdGlscy5pc1N0YXJ0aXNoO1xudmFyIGlzTW92ZWlzaCA9IEV2ZW50UGx1Z2luVXRpbHMuaXNNb3ZlaXNoO1xudmFyIGlzRW5kaXNoID0gRXZlbnRQbHVnaW5VdGlscy5pc0VuZGlzaDtcbnZhciBleGVjdXRlRGlyZWN0RGlzcGF0Y2ggPSBFdmVudFBsdWdpblV0aWxzLmV4ZWN1dGVEaXJlY3REaXNwYXRjaDtcbnZhciBoYXNEaXNwYXRjaGVzID0gRXZlbnRQbHVnaW5VdGlscy5oYXNEaXNwYXRjaGVzO1xudmFyIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUgPVxuICBFdmVudFBsdWdpblV0aWxzLmV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWU7XG5cbi8qKlxuICogSUQgb2YgZWxlbWVudCB0aGF0IHNob3VsZCByZXNwb25kIHRvIHRvdWNoL21vdmUgdHlwZXMgb2YgaW50ZXJhY3Rpb25zLCBhc1xuICogaW5kaWNhdGVkIGV4cGxpY2l0bHkgYnkgcmVsZXZhbnQgY2FsbGJhY2tzLlxuICovXG52YXIgcmVzcG9uZGVySUQgPSBudWxsO1xudmFyIGlzUHJlc3NpbmcgPSBmYWxzZTtcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPbiBhIGB0b3VjaFN0YXJ0YC9gbW91c2VEb3duYCwgaXMgaXQgZGVzaXJlZCB0aGF0IHRoaXMgZWxlbWVudCBiZWNvbWUgdGhlXG4gICAqIHJlc3BvbmRlcj9cbiAgICovXG4gIHN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyOiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlOiBudWxsfSlcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIE9uIGEgYHNjcm9sbGAsIGlzIGl0IGRlc2lyZWQgdGhhdCB0aGlzIGVsZW1lbnQgYmVjb21lIHRoZSByZXNwb25kZXI/IFRoaXNcbiAgICogaXMgdXN1YWxseSBub3QgbmVlZGVkLCBidXQgc2hvdWxkIGJlIHVzZWQgdG8gcmV0cm9hY3RpdmVseSBpbmZlciB0aGF0IGFcbiAgICogYHRvdWNoU3RhcnRgIGhhZCBvY2N1cmVkIGR1cmluZyBtb21lbnR1bSBzY3JvbGwuIER1cmluZyBhIG1vbWVudHVtIHNjcm9sbCxcbiAgICogYSB0b3VjaCBzdGFydCB3aWxsIGJlIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IGEgc2Nyb2xsIGV2ZW50IGlmIHRoZSB2aWV3IGlzXG4gICAqIGN1cnJlbnRseSBzY3JvbGxpbmcuXG4gICAqL1xuICBzY3JvbGxTaG91bGRTZXRSZXNwb25kZXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uU2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyOiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uU2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZTogbnVsbH0pXG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBPbiBhIGB0b3VjaE1vdmVgL2Btb3VzZU1vdmVgLCBpcyBpdCBkZXNpcmVkIHRoYXQgdGhpcyBlbGVtZW50IGJlY29tZSB0aGVcbiAgICogcmVzcG9uZGVyP1xuICAgKi9cbiAgbW92ZVNob3VsZFNldFJlc3BvbmRlcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyOiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTW92ZVNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IG51bGx9KVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGlyZWN0IHJlc3BvbmRlciBldmVudHMgZGlzcGF0Y2hlZCBkaXJlY3RseSB0byByZXNwb25kZXIuIERvIG5vdCBidWJibGUuXG4gICAqL1xuICByZXNwb25kZXJNb3ZlOiB7cmVnaXN0cmF0aW9uTmFtZToga2V5T2Yoe29uUmVzcG9uZGVyTW92ZTogbnVsbH0pfSxcbiAgcmVzcG9uZGVyUmVsZWFzZToge3JlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvblJlc3BvbmRlclJlbGVhc2U6IG51bGx9KX0sXG4gIHJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDoge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDogbnVsbH0pXG4gIH0sXG4gIHJlc3BvbmRlckdyYW50OiB7cmVnaXN0cmF0aW9uTmFtZToga2V5T2Yoe29uUmVzcG9uZGVyR3JhbnQ6IG51bGx9KX0sXG4gIHJlc3BvbmRlclJlamVjdDoge3JlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvblJlc3BvbmRlclJlamVjdDogbnVsbH0pfSxcbiAgcmVzcG9uZGVyVGVybWluYXRlOiB7cmVnaXN0cmF0aW9uTmFtZToga2V5T2Yoe29uUmVzcG9uZGVyVGVybWluYXRlOiBudWxsfSl9XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIG5lZ290aWF0aW9uIGJldHdlZW4gYW55IGV4aXN0aW5nL2N1cnJlbnQgcmVzcG9uZGVyLCBjaGVja3MgdG8gc2VlIGlmXG4gKiBhbnkgbmV3IGVudGl0eSBpcyBpbnRlcmVzdGVkIGluIGJlY29taW5nIHJlc3BvbmRlciwgcGVyZm9ybXMgdGhhdCBoYW5kc2hha2VcbiAqIGFuZCByZXR1cm5zIGFueSBldmVudHMgdGhhdCBtdXN0IGJlIGVtaXR0ZWQgdG8gbm90aWZ5IHRoZSByZWxldmFudCBwYXJ0aWVzLlxuICpcbiAqIEEgbm90ZSBhYm91dCBldmVudCBvcmRlcmluZyBpbiB0aGUgYEV2ZW50UGx1Z2luSHViYC5cbiAqXG4gKiBTdXBwb3NlIHBsdWdpbnMgYXJlIGluamVjdGVkIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6XG4gKlxuICogYFtSLCBTLCBDXWBcbiAqXG4gKiBUbyBoZWxwIGlsbHVzdHJhdGUgdGhlIGV4YW1wbGUsIGFzc3VtZSBgU2AgaXMgYFNpbXBsZUV2ZW50UGx1Z2luYCAoZm9yXG4gKiBgb25DbGlja2AgZXRjKSBhbmQgYFJgIGlzIGBSZXNwb25kZXJFdmVudFBsdWdpbmAuXG4gKlxuICogXCJEZWZlcnJlZC1EaXNwYXRjaGVkIEV2ZW50c1wiOlxuICpcbiAqIC0gVGhlIGN1cnJlbnQgZXZlbnQgcGx1Z2luIHN5c3RlbSB3aWxsIHRyYXZlcnNlIHRoZSBsaXN0IG9mIGluamVjdGVkIHBsdWdpbnMsXG4gKiAgIGluIG9yZGVyLCBhbmQgZXh0cmFjdCBldmVudHMgYnkgY29sbGVjdGluZyB0aGUgcGx1Z2luJ3MgcmV0dXJuIHZhbHVlIG9mXG4gKiAgIGBleHRyYWN0RXZlbnRzKClgLlxuICogLSBUaGVzZSBldmVudHMgdGhhdCBhcmUgcmV0dXJuZWQgZnJvbSBgZXh0cmFjdEV2ZW50c2AgYXJlIFwiZGVmZXJyZWRcbiAqICAgZGlzcGF0Y2hlZCBldmVudHNcIi5cbiAqIC0gV2hlbiByZXR1cm5lZCBmcm9tIGBleHRyYWN0RXZlbnRzYCwgZGVmZXJyZWQtZGlzcGF0Y2hlZCBldmVudHMgY29udGFpbiBhblxuICogICBcImFjY3VtdWxhdGlvblwiIG9mIGRlZmVycmVkIGRpc3BhdGNoZXMuXG4gKiAtIFRoZXNlIGRlZmVycmVkIGRpc3BhdGNoZXMgYXJlIGFjY3VtdWxhdGVkL2NvbGxlY3RlZCBiZWZvcmUgdGhleSBhcmVcbiAqICAgcmV0dXJuZWQsIGJ1dCBwcm9jZXNzZWQgYXQgYSBsYXRlciB0aW1lIGJ5IHRoZSBgRXZlbnRQbHVnaW5IdWJgIChoZW5jZSB0aGVcbiAqICAgbmFtZSBkZWZlcnJlZCkuXG4gKlxuICogSW4gdGhlIHByb2Nlc3Mgb2YgcmV0dXJuaW5nIHRoZWlyIGRlZmVycmVkLWRpc3BhdGNoZWQgZXZlbnRzLCBldmVudCBwbHVnaW5zXG4gKiB0aGVtc2VsdmVzIGNhbiBkaXNwYXRjaCBldmVudHMgb24tZGVtYW5kIHdpdGhvdXQgcmV0dXJuaW5nIHRoZW0gZnJvbVxuICogYGV4dHJhY3RFdmVudHNgLiBQbHVnaW5zIG1pZ2h0IHdhbnQgdG8gZG8gdGhpcywgc28gdGhhdCB0aGV5IGNhbiB1c2UgZXZlbnRcbiAqIGRpc3BhdGNoaW5nIGFzIGEgdG9vbCB0aGF0IGhlbHBzIHRoZW0gZGVjaWRlIHdoaWNoIGV2ZW50cyBzaG91bGQgYmUgZXh0cmFjdGVkXG4gKiBpbiB0aGUgZmlyc3QgcGxhY2UuXG4gKlxuICogXCJPbi1EZW1hbmQtRGlzcGF0Y2hlZCBFdmVudHNcIjpcbiAqXG4gKiAtIE9uLWRlbWFuZC1kaXNwYXRjaGVkIGV2ZW50cyBhcmUgbm90IHJldHVybmVkIGZyb20gYGV4dHJhY3RFdmVudHNgLlxuICogLSBPbi1kZW1hbmQtZGlzcGF0Y2hlZCBldmVudHMgYXJlIGRpc3BhdGNoZWQgZHVyaW5nIHRoZSBwcm9jZXNzIG9mIHJldHVybmluZ1xuICogICB0aGUgZGVmZXJyZWQtZGlzcGF0Y2hlZCBldmVudHMuXG4gKiAtIFRoZXkgc2hvdWxkIG5vdCBoYXZlIHNpZGUgZWZmZWN0cy5cbiAqIC0gVGhleSBzaG91bGQgYmUgYXZvaWRlZCwgYW5kL29yIGV2ZW50dWFsbHkgYmUgcmVwbGFjZWQgd2l0aCBhbm90aGVyXG4gKiAgIGFic3RyYWN0aW9uIHRoYXQgYWxsb3dzIGV2ZW50IHBsdWdpbnMgdG8gcGVyZm9ybSBtdWx0aXBsZSBcInJvdW5kc1wiIG9mIGV2ZW50XG4gKiAgIGV4dHJhY3Rpb24uXG4gKlxuICogVGhlcmVmb3JlLCB0aGUgc2VxdWVuY2Ugb2YgZXZlbnQgZGlzcGF0Y2hlcyBiZWNvbWVzOlxuICpcbiAqIC0gYFJgcyBvbi1kZW1hbmQgZXZlbnRzIChpZiBhbnkpICAgKGRpc3BhdGNoZWQgYnkgYFJgIG9uLWRlbWFuZClcbiAqIC0gYFNgcyBvbi1kZW1hbmQgZXZlbnRzIChpZiBhbnkpICAgKGRpc3BhdGNoZWQgYnkgYFNgIG9uLWRlbWFuZClcbiAqIC0gYENgcyBvbi1kZW1hbmQgZXZlbnRzIChpZiBhbnkpICAgKGRpc3BhdGNoZWQgYnkgYENgIG9uLWRlbWFuZClcbiAqIC0gYFJgcyBleHRyYWN0ZWQgZXZlbnRzIChpZiBhbnkpICAgKGRpc3BhdGNoZWQgYnkgYEV2ZW50UGx1Z2luSHViYClcbiAqIC0gYFNgcyBleHRyYWN0ZWQgZXZlbnRzIChpZiBhbnkpICAgKGRpc3BhdGNoZWQgYnkgYEV2ZW50UGx1Z2luSHViYClcbiAqIC0gYENgcyBleHRyYWN0ZWQgZXZlbnRzIChpZiBhbnkpICAgKGRpc3BhdGNoZWQgYnkgYEV2ZW50UGx1Z2luSHViYClcbiAqXG4gKiBJbiB0aGUgY2FzZSBvZiBgUmVzcG9uZGVyRXZlbnRQbHVnaW5gOiBJZiB0aGUgYHN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyYFxuICogb24tZGVtYW5kIGRpc3BhdGNoIHJldHVybnMgYHRydWVgIChhbmQgc29tZSBvdGhlciBkZXRhaWxzIGFyZSBzYXRpc2ZpZWQpIHRoZVxuICogYG9uUmVzcG9uZGVyR3JhbnRgIGRlZmVycmVkIGRpc3BhdGNoZWQgZXZlbnQgaXMgcmV0dXJuZWQgZnJvbVxuICogYGV4dHJhY3RFdmVudHNgLiBUaGUgc2VxdWVuY2Ugb2YgZGlzcGF0Y2ggZXhlY3V0aW9ucyBpbiB0aGlzIGNhc2VcbiAqIHdpbGwgYXBwZWFyIGFzIGZvbGxvd3M6XG4gKlxuICogLSBgc3RhcnRTaG91bGRTZXRSZXNwb25kZXJgIChgUmVzcG9uZGVyRXZlbnRQbHVnaW5gIGRpc3BhdGNoZXMgb24tZGVtYW5kKVxuICogLSBgdG91Y2hTdGFydENhcHR1cmVgICAgICAgIChgRXZlbnRQbHVnaW5IdWJgIGRpc3BhdGNoZXMgYXMgdXN1YWwpXG4gKiAtIGB0b3VjaFN0YXJ0YCAgICAgICAgICAgICAgKGBFdmVudFBsdWdpbkh1YmAgZGlzcGF0Y2hlcyBhcyB1c3VhbClcbiAqIC0gYHJlc3BvbmRlckdyYW50L1JlamVjdGAgICAoYEV2ZW50UGx1Z2luSHViYCBkaXNwYXRjaGVzIGFzIHVzdWFsKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGRlZXBlc3QgUmVhY3QgcmVuZGVyZWQgZWxlbWVudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICovXG5mdW5jdGlvbiBzZXRSZXNwb25kZXJBbmRFeHRyYWN0VHJhbnNmZXIoXG4gICAgdG9wTGV2ZWxUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgbmF0aXZlRXZlbnQpIHtcbiAgdmFyIHNob3VsZFNldEV2ZW50VHlwZSA9XG4gICAgaXNTdGFydGlzaCh0b3BMZXZlbFR5cGUpID8gZXZlbnRUeXBlcy5zdGFydFNob3VsZFNldFJlc3BvbmRlciA6XG4gICAgaXNNb3ZlaXNoKHRvcExldmVsVHlwZSkgPyBldmVudFR5cGVzLm1vdmVTaG91bGRTZXRSZXNwb25kZXIgOlxuICAgIGV2ZW50VHlwZXMuc2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyO1xuXG4gIHZhciBidWJibGVTaG91bGRTZXRGcm9tID0gcmVzcG9uZGVySUQgfHwgdG9wTGV2ZWxUYXJnZXRJRDtcbiAgdmFyIHNob3VsZFNldEV2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKFxuICAgIHNob3VsZFNldEV2ZW50VHlwZSxcbiAgICBidWJibGVTaG91bGRTZXRGcm9tLFxuICAgIG5hdGl2ZUV2ZW50XG4gICk7XG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhzaG91bGRTZXRFdmVudCk7XG4gIHZhciB3YW50c1Jlc3BvbmRlcklEID0gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZShzaG91bGRTZXRFdmVudCk7XG4gIGlmICghc2hvdWxkU2V0RXZlbnQuaXNQZXJzaXN0ZW50KCkpIHtcbiAgICBzaG91bGRTZXRFdmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKHNob3VsZFNldEV2ZW50KTtcbiAgfVxuXG4gIGlmICghd2FudHNSZXNwb25kZXJJRCB8fCB3YW50c1Jlc3BvbmRlcklEID09PSByZXNwb25kZXJJRCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBleHRyYWN0ZWQ7XG4gIHZhciBncmFudEV2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKFxuICAgIGV2ZW50VHlwZXMucmVzcG9uZGVyR3JhbnQsXG4gICAgd2FudHNSZXNwb25kZXJJRCxcbiAgICBuYXRpdmVFdmVudFxuICApO1xuXG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMoZ3JhbnRFdmVudCk7XG4gIGlmIChyZXNwb25kZXJJRCkge1xuICAgIHZhciB0ZXJtaW5hdGlvblJlcXVlc3RFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChcbiAgICAgIGV2ZW50VHlwZXMucmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0LFxuICAgICAgcmVzcG9uZGVySUQsXG4gICAgICBuYXRpdmVFdmVudFxuICAgICk7XG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyh0ZXJtaW5hdGlvblJlcXVlc3RFdmVudCk7XG4gICAgdmFyIHNob3VsZFN3aXRjaCA9ICFoYXNEaXNwYXRjaGVzKHRlcm1pbmF0aW9uUmVxdWVzdEV2ZW50KSB8fFxuICAgICAgZXhlY3V0ZURpcmVjdERpc3BhdGNoKHRlcm1pbmF0aW9uUmVxdWVzdEV2ZW50KTtcbiAgICBpZiAoIXRlcm1pbmF0aW9uUmVxdWVzdEV2ZW50LmlzUGVyc2lzdGVudCgpKSB7XG4gICAgICB0ZXJtaW5hdGlvblJlcXVlc3RFdmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKHRlcm1pbmF0aW9uUmVxdWVzdEV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkU3dpdGNoKSB7XG4gICAgICB2YXIgdGVybWluYXRlVHlwZSA9IGV2ZW50VHlwZXMucmVzcG9uZGVyVGVybWluYXRlO1xuICAgICAgdmFyIHRlcm1pbmF0ZUV2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgICB0ZXJtaW5hdGVUeXBlLFxuICAgICAgICByZXNwb25kZXJJRCxcbiAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICk7XG4gICAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKHRlcm1pbmF0ZUV2ZW50KTtcbiAgICAgIGV4dHJhY3RlZCA9IGFjY3VtdWxhdGVJbnRvKGV4dHJhY3RlZCwgW2dyYW50RXZlbnQsIHRlcm1pbmF0ZUV2ZW50XSk7XG4gICAgICByZXNwb25kZXJJRCA9IHdhbnRzUmVzcG9uZGVySUQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByZWplY3RFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChcbiAgICAgICAgZXZlbnRUeXBlcy5yZXNwb25kZXJSZWplY3QsXG4gICAgICAgIHdhbnRzUmVzcG9uZGVySUQsXG4gICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICApO1xuICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyhyZWplY3RFdmVudCk7XG4gICAgICBleHRyYWN0ZWQgPSBhY2N1bXVsYXRlSW50byhleHRyYWN0ZWQsIHJlamVjdEV2ZW50KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZXh0cmFjdGVkID0gYWNjdW11bGF0ZUludG8oZXh0cmFjdGVkLCBncmFudEV2ZW50KTtcbiAgICByZXNwb25kZXJJRCA9IHdhbnRzUmVzcG9uZGVySUQ7XG4gIH1cbiAgcmV0dXJuIGV4dHJhY3RlZDtcbn1cblxuLyoqXG4gKiBBIHRyYW5zZmVyIGlzIGEgbmVnb3RpYXRpb24gYmV0d2VlbiBhIGN1cnJlbnRseSBzZXQgcmVzcG9uZGVyIGFuZCB0aGUgbmV4dFxuICogZWxlbWVudCB0byBjbGFpbSByZXNwb25kZXIgc3RhdHVzLiBBbnkgc3RhcnQgZXZlbnQgY291bGQgdHJpZ2dlciBhIHRyYW5zZmVyXG4gKiBvZiByZXNwb25kZXJJRC4gQW55IG1vdmUgZXZlbnQgY291bGQgdHJpZ2dlciBhIHRyYW5zZmVyLCBzbyBsb25nIGFzIHRoZXJlIGlzXG4gKiBjdXJyZW50bHkgYSByZXNwb25kZXIgc2V0IChpbiBvdGhlciB3b3JkcyBhcyBsb25nIGFzIHRoZSB1c2VyIGlzIHByZXNzaW5nXG4gKiBkb3duKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGEgdHJhbnNmZXIgb2YgcmVzcG9uZGVyIGNvdWxkIHBvc3NpYmx5IG9jY3VyLlxuICovXG5mdW5jdGlvbiBjYW5UcmlnZ2VyVHJhbnNmZXIodG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wU2Nyb2xsIHx8XG4gICAgICAgICBpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkgfHxcbiAgICAgICAgIChpc1ByZXNzaW5nICYmIGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpKTtcbn1cblxuLyoqXG4gKiBFdmVudCBwbHVnaW4gZm9yIGZvcm1hbGl6aW5nIHRoZSBuZWdvdGlhdGlvbiBiZXR3ZWVuIGNsYWltaW5nIGxvY2tzIG9uXG4gKiByZWNlaXZpbmcgdG91Y2hlcy5cbiAqL1xudmFyIFJlc3BvbmRlckV2ZW50UGx1Z2luID0ge1xuXG4gIGdldFJlc3BvbmRlcklEOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcmVzcG9uZGVySUQ7XG4gIH0sXG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIGV4dHJhY3RlZDtcbiAgICAvLyBNdXN0IGhhdmUgbWlzc2VkIGFuIGVuZCBldmVudCAtIHJlc2V0IHRoZSBzdGF0ZSBoZXJlLlxuICAgIGlmIChyZXNwb25kZXJJRCAmJiBpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkpIHtcbiAgICAgIHJlc3BvbmRlcklEID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzU3RhcnRpc2godG9wTGV2ZWxUeXBlKSkge1xuICAgICAgaXNQcmVzc2luZyA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChpc0VuZGlzaCh0b3BMZXZlbFR5cGUpKSB7XG4gICAgICBpc1ByZXNzaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChjYW5UcmlnZ2VyVHJhbnNmZXIodG9wTGV2ZWxUeXBlKSkge1xuICAgICAgdmFyIHRyYW5zZmVyID0gc2V0UmVzcG9uZGVyQW5kRXh0cmFjdFRyYW5zZmVyKFxuICAgICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICApO1xuICAgICAgaWYgKHRyYW5zZmVyKSB7XG4gICAgICAgIGV4dHJhY3RlZCA9IGFjY3VtdWxhdGVJbnRvKGV4dHJhY3RlZCwgdHJhbnNmZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBOb3cgdGhhdCB3ZSBrbm93IHRoZSByZXNwb25kZXIgaXMgc2V0IGNvcnJlY3RseSwgd2UgY2FuIGRpc3BhdGNoXG4gICAgLy8gcmVzcG9uZGVyIHR5cGUgZXZlbnRzIChkaXJlY3RseSB0byB0aGUgcmVzcG9uZGVyKS5cbiAgICB2YXIgdHlwZSA9IGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpID8gZXZlbnRUeXBlcy5yZXNwb25kZXJNb3ZlIDpcbiAgICAgIGlzRW5kaXNoKHRvcExldmVsVHlwZSkgPyBldmVudFR5cGVzLnJlc3BvbmRlclJlbGVhc2UgOlxuICAgICAgaXNTdGFydGlzaCh0b3BMZXZlbFR5cGUpID8gZXZlbnRUeXBlcy5yZXNwb25kZXJTdGFydCA6IG51bGw7XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHZhciBnZXN0dXJlID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgICB0eXBlLFxuICAgICAgICByZXNwb25kZXJJRCB8fCAnJyxcbiAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICk7XG4gICAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKGdlc3R1cmUpO1xuICAgICAgZXh0cmFjdGVkID0gYWNjdW11bGF0ZUludG8oZXh0cmFjdGVkLCBnZXN0dXJlKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IGV2ZW50VHlwZXMucmVzcG9uZGVyUmVsZWFzZSkge1xuICAgICAgcmVzcG9uZGVySUQgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZXh0cmFjdGVkO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uZGVyRXZlbnRQbHVnaW47XG5cbn0se1wicmVhY3QvbGliL0V2ZW50Q29uc3RhbnRzXCI6MTYyLFwicmVhY3QvbGliL0V2ZW50UGx1Z2luVXRpbHNcIjoxNjYsXCJyZWFjdC9saWIvRXZlbnRQcm9wYWdhdG9yc1wiOjE2NyxcInJlYWN0L2xpYi9TeW50aGV0aWNFdmVudFwiOjI1NSxcInJlYWN0L2xpYi9hY2N1bXVsYXRlSW50b1wiOjI2NSxcInJlYWN0L2xpYi9rZXlPZlwiOjMwNH1dLDE0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgVGFwRXZlbnRQbHVnaW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9FdmVudENvbnN0YW50cycpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKCdyZWFjdC9saWIvRXZlbnRQbHVnaW5VdGlscycpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCdyZWFjdC9saWIvRXZlbnRQcm9wYWdhdG9ycycpO1xudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKCdyZWFjdC9saWIvU3ludGhldGljVUlFdmVudCcpO1xudmFyIFRvdWNoRXZlbnRVdGlscyA9IHJlcXVpcmUoJy4vVG91Y2hFdmVudFV0aWxzJyk7XG52YXIgVmlld3BvcnRNZXRyaWNzID0gcmVxdWlyZSgncmVhY3QvbGliL1ZpZXdwb3J0TWV0cmljcycpO1xuXG52YXIga2V5T2YgPSByZXF1aXJlKCdyZWFjdC9saWIva2V5T2YnKTtcbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxudmFyIGlzU3RhcnRpc2ggPSBFdmVudFBsdWdpblV0aWxzLmlzU3RhcnRpc2g7XG52YXIgaXNFbmRpc2ggPSBFdmVudFBsdWdpblV0aWxzLmlzRW5kaXNoO1xuXG52YXIgaXNUb3VjaCA9IGZ1bmN0aW9uKHRvcExldmVsVHlwZSkge1xuICB2YXIgdG91Y2hUeXBlcyA9IFtcbiAgICB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoQ2FuY2VsLFxuICAgIHRvcExldmVsVHlwZXMudG9wVG91Y2hFbmQsXG4gICAgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0LFxuICAgIHRvcExldmVsVHlwZXMudG9wVG91Y2hNb3ZlXG4gIF07XG4gIHJldHVybiB0b3VjaFR5cGVzLmluZGV4T2YodG9wTGV2ZWxUeXBlKSA+PSAwO1xufVxuXG4vKipcbiAqIE51bWJlciBvZiBwaXhlbHMgdGhhdCBhcmUgdG9sZXJhdGVkIGluIGJldHdlZW4gYSBgdG91Y2hTdGFydGAgYW5kIGB0b3VjaEVuZGBcbiAqIGluIG9yZGVyIHRvIHN0aWxsIGJlIGNvbnNpZGVyZWQgYSAndGFwJyBldmVudC5cbiAqL1xudmFyIHRhcE1vdmVUaHJlc2hvbGQgPSAxMDtcbnZhciBpZ25vcmVNb3VzZVRocmVzaG9sZCA9IDc1MDtcbnZhciBzdGFydENvb3JkcyA9IHt4OiBudWxsLCB5OiBudWxsfTtcbnZhciBsYXN0VG91Y2hFdmVudCA9IG51bGw7XG5cbnZhciBBeGlzID0ge1xuICB4OiB7cGFnZTogJ3BhZ2VYJywgY2xpZW50OiAnY2xpZW50WCcsIGVudlNjcm9sbDogJ2N1cnJlbnRQYWdlU2Nyb2xsTGVmdCd9LFxuICB5OiB7cGFnZTogJ3BhZ2VZJywgY2xpZW50OiAnY2xpZW50WScsIGVudlNjcm9sbDogJ2N1cnJlbnRQYWdlU2Nyb2xsVG9wJ31cbn07XG5cbmZ1bmN0aW9uIGdldEF4aXNDb29yZE9mRXZlbnQoYXhpcywgbmF0aXZlRXZlbnQpIHtcbiAgdmFyIHNpbmdsZVRvdWNoID0gVG91Y2hFdmVudFV0aWxzLmV4dHJhY3RTaW5nbGVUb3VjaChuYXRpdmVFdmVudCk7XG4gIGlmIChzaW5nbGVUb3VjaCkge1xuICAgIHJldHVybiBzaW5nbGVUb3VjaFtheGlzLnBhZ2VdO1xuICB9XG4gIHJldHVybiBheGlzLnBhZ2UgaW4gbmF0aXZlRXZlbnQgP1xuICAgIG5hdGl2ZUV2ZW50W2F4aXMucGFnZV0gOlxuICAgIG5hdGl2ZUV2ZW50W2F4aXMuY2xpZW50XSArIFZpZXdwb3J0TWV0cmljc1theGlzLmVudlNjcm9sbF07XG59XG5cbmZ1bmN0aW9uIGdldERpc3RhbmNlKGNvb3JkcywgbmF0aXZlRXZlbnQpIHtcbiAgdmFyIHBhZ2VYID0gZ2V0QXhpc0Nvb3JkT2ZFdmVudChBeGlzLngsIG5hdGl2ZUV2ZW50KTtcbiAgdmFyIHBhZ2VZID0gZ2V0QXhpc0Nvb3JkT2ZFdmVudChBeGlzLnksIG5hdGl2ZUV2ZW50KTtcbiAgcmV0dXJuIE1hdGgucG93KFxuICAgIE1hdGgucG93KHBhZ2VYIC0gY29vcmRzLngsIDIpICsgTWF0aC5wb3cocGFnZVkgLSBjb29yZHMueSwgMiksXG4gICAgMC41XG4gICk7XG59XG5cbnZhciBkZXBlbmRlbmNpZXMgPSBbXG4gIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duLFxuICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlTW92ZSxcbiAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwXG5dO1xuXG5pZiAoRXZlbnRQbHVnaW5VdGlscy51c2VUb3VjaEV2ZW50cykge1xuICBkZXBlbmRlbmNpZXMucHVzaChcbiAgICB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kLFxuICAgIHRvcExldmVsVHlwZXMudG9wVG91Y2hTdGFydCxcbiAgICB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoTW92ZVxuICApO1xufVxuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgdG91Y2hUYXA6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uVG91Y2hUYXA6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ub3VjaFRhcENhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBkZXBlbmRlbmNpZXNcbiAgfVxufTtcblxudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoRGF0ZS5ub3cpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3coKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJRTggc3VwcG9ydDogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85NDMwMzU3L3BsZWFzZS1leHBsYWluLXdoeS1hbmQtaG93LW5ldy1kYXRlLXdvcmtzLWFzLXdvcmthcm91bmQtZm9yLWRhdGUtbm93LWluXG4gICAgcmV0dXJuICtuZXcgRGF0ZTtcbiAgfVxufVxuXG52YXIgVGFwRXZlbnRQbHVnaW4gPSB7XG5cbiAgdGFwTW92ZVRocmVzaG9sZDogdGFwTW92ZVRocmVzaG9sZCxcblxuICBpZ25vcmVNb3VzZVRocmVzaG9sZDogaWdub3JlTW91c2VUaHJlc2hvbGQsXG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG5cbiAgICBpZiAoaXNUb3VjaCh0b3BMZXZlbFR5cGUpKSB7XG4gICAgICBsYXN0VG91Y2hFdmVudCA9IG5vdygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobGFzdFRvdWNoRXZlbnQgJiYgKG5vdygpIC0gbGFzdFRvdWNoRXZlbnQpIDwgaWdub3JlTW91c2VUaHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkgJiYgIWlzRW5kaXNoKHRvcExldmVsVHlwZSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZXZlbnQgPSBudWxsO1xuICAgIHZhciBkaXN0YW5jZSA9IGdldERpc3RhbmNlKHN0YXJ0Q29vcmRzLCBuYXRpdmVFdmVudCk7XG4gICAgaWYgKGlzRW5kaXNoKHRvcExldmVsVHlwZSkgJiYgZGlzdGFuY2UgPCB0YXBNb3ZlVGhyZXNob2xkKSB7XG4gICAgICBldmVudCA9IFN5bnRoZXRpY1VJRXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgICBldmVudFR5cGVzLnRvdWNoVGFwLFxuICAgICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGlzU3RhcnRpc2godG9wTGV2ZWxUeXBlKSkge1xuICAgICAgc3RhcnRDb29yZHMueCA9IGdldEF4aXNDb29yZE9mRXZlbnQoQXhpcy54LCBuYXRpdmVFdmVudCk7XG4gICAgICBzdGFydENvb3Jkcy55ID0gZ2V0QXhpc0Nvb3JkT2ZFdmVudChBeGlzLnksIG5hdGl2ZUV2ZW50KTtcbiAgICB9IGVsc2UgaWYgKGlzRW5kaXNoKHRvcExldmVsVHlwZSkpIHtcbiAgICAgIHN0YXJ0Q29vcmRzLnggPSAwO1xuICAgICAgc3RhcnRDb29yZHMueSA9IDA7XG4gICAgfVxuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGFwRXZlbnRQbHVnaW47XG5cbn0se1wiLi9Ub3VjaEV2ZW50VXRpbHNcIjoxNDUsXCJyZWFjdC9saWIvRXZlbnRDb25zdGFudHNcIjoxNjIsXCJyZWFjdC9saWIvRXZlbnRQbHVnaW5VdGlsc1wiOjE2NixcInJlYWN0L2xpYi9FdmVudFByb3BhZ2F0b3JzXCI6MTY3LFwicmVhY3QvbGliL1N5bnRoZXRpY1VJRXZlbnRcIjoyNjEsXCJyZWFjdC9saWIvVmlld3BvcnRNZXRyaWNzXCI6MjY0LFwicmVhY3QvbGliL2tleU9mXCI6MzA0fV0sMTQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBUb3VjaEV2ZW50VXRpbHNcbiAqL1xuXG52YXIgVG91Y2hFdmVudFV0aWxzID0ge1xuICAvKipcbiAgICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgY29tbW9uIGNhc2Ugb2YgZXh0cmFjdGluZyBvdXQgdGhlIHByaW1hcnkgdG91Y2ggZnJvbSBhXG4gICAqIHRvdWNoIGV2ZW50LlxuICAgKiAtIGB0b3VjaEVuZGAgZXZlbnRzIHVzdWFsbHkgZG8gbm90IGhhdmUgdGhlIGB0b3VjaGVzYCBwcm9wZXJ0eS5cbiAgICogICBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM2NjY5MjkvXG4gICAqICAgbW9iaWxlLXNhcmFpLXRvdWNoZW5kLWV2ZW50LW5vdC1maXJpbmctd2hlbi1sYXN0LXRvdWNoLWlzLXJlbW92ZWRcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gbmF0aXZlRXZlbnQgTmF0aXZlIGV2ZW50IHRoYXQgbWF5IG9yIG1heSBub3QgYmUgYSB0b3VjaC5cbiAgICogQHJldHVybiB7VG91Y2hlc09iamVjdD99IGFuIG9iamVjdCB3aXRoIHBhZ2VYIGFuZCBwYWdlWSBvciBudWxsLlxuICAgKi9cbiAgZXh0cmFjdFNpbmdsZVRvdWNoOiBmdW5jdGlvbihuYXRpdmVFdmVudCkge1xuICAgIHZhciB0b3VjaGVzID0gbmF0aXZlRXZlbnQudG91Y2hlcztcbiAgICB2YXIgY2hhbmdlZFRvdWNoZXMgPSBuYXRpdmVFdmVudC5jaGFuZ2VkVG91Y2hlcztcbiAgICB2YXIgaGFzVG91Y2hlcyA9IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPiAwO1xuICAgIHZhciBoYXNDaGFuZ2VkVG91Y2hlcyA9IGNoYW5nZWRUb3VjaGVzICYmIGNoYW5nZWRUb3VjaGVzLmxlbmd0aCA+IDA7XG5cbiAgICByZXR1cm4gIWhhc1RvdWNoZXMgJiYgaGFzQ2hhbmdlZFRvdWNoZXMgPyBjaGFuZ2VkVG91Y2hlc1swXSA6XG4gICAgICAgICAgIGhhc1RvdWNoZXMgPyB0b3VjaGVzWzBdIDpcbiAgICAgICAgICAgbmF0aXZlRXZlbnQ7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVG91Y2hFdmVudFV0aWxzO1xuXG59LHt9XSwxNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmplY3RUYXBFdmVudFBsdWdpbiAoKSB7XG4gIHZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbiAgUmVhY3QuaW5pdGlhbGl6ZVRvdWNoRXZlbnRzKHRydWUpO1xuXG4gIHJlcXVpcmUoJ3JlYWN0L2xpYi9FdmVudFBsdWdpbkh1YicpLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1xuICAgIFwiUmVzcG9uZGVyRXZlbnRQbHVnaW5cIjogcmVxdWlyZSgnLi9SZXNwb25kZXJFdmVudFBsdWdpbi5qcycpLFxuICAgIFwiVGFwRXZlbnRQbHVnaW5cIjogICAgICAgcmVxdWlyZSgnLi9UYXBFdmVudFBsdWdpbi5qcycpXG4gIH0pO1xufTtcblxufSx7XCIuL1Jlc3BvbmRlckV2ZW50UGx1Z2luLmpzXCI6MTQzLFwiLi9UYXBFdmVudFBsdWdpbi5qc1wiOjE0NCxcInJlYWN0XCI6MzE5LFwicmVhY3QvbGliL0V2ZW50UGx1Z2luSHViXCI6MTY0fV0sMTQ3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvUmVhY3RXaXRoQWRkb25zJyk7XG5cbn0se1wiLi9saWIvUmVhY3RXaXRoQWRkb25zXCI6MjQ3fV0sMTQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBBdXRvRm9jdXNNaXhpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBmb2N1c05vZGUgPSByZXF1aXJlKFwiLi9mb2N1c05vZGVcIik7XG5cbnZhciBBdXRvRm9jdXNNaXhpbiA9IHtcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgZm9jdXNOb2RlKHRoaXMuZ2V0RE9NTm9kZSgpKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0b0ZvY3VzTWl4aW47XG5cbn0se1wiLi9mb2N1c05vZGVcIjoyODF9XSwxNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1IEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQmVmb3JlSW5wdXRFdmVudFBsdWdpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKFwiLi9FdmVudFByb3BhZ2F0b3JzXCIpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG52YXIgRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlID0gcmVxdWlyZShcIi4vRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlXCIpO1xudmFyIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50XCIpO1xudmFyIFN5bnRoZXRpY0lucHV0RXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNJbnB1dEV2ZW50XCIpO1xuXG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcblxudmFyIEVORF9LRVlDT0RFUyA9IFs5LCAxMywgMjcsIDMyXTsgLy8gVGFiLCBSZXR1cm4sIEVzYywgU3BhY2VcbnZhciBTVEFSVF9LRVlDT0RFID0gMjI5O1xuXG52YXIgY2FuVXNlQ29tcG9zaXRpb25FdmVudCA9IChcbiAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmXG4gICdDb21wb3NpdGlvbkV2ZW50JyBpbiB3aW5kb3dcbik7XG5cbnZhciBkb2N1bWVudE1vZGUgPSBudWxsO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkge1xuICBkb2N1bWVudE1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG59XG5cbi8vIFdlYmtpdCBvZmZlcnMgYSB2ZXJ5IHVzZWZ1bCBgdGV4dElucHV0YCBldmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvXG4vLyBkaXJlY3RseSByZXByZXNlbnQgYGJlZm9yZUlucHV0YC4gVGhlIElFIGB0ZXh0aW5wdXRgIGV2ZW50IGlzIG5vdCBhc1xuLy8gdXNlZnVsLCBzbyB3ZSBkb24ndCB1c2UgaXQuXG52YXIgY2FuVXNlVGV4dElucHV0RXZlbnQgPSAoXG4gIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJlxuICAnVGV4dEV2ZW50JyBpbiB3aW5kb3cgJiZcbiAgIWRvY3VtZW50TW9kZSAmJlxuICAhaXNQcmVzdG8oKVxuKTtcblxuLy8gSW4gSUU5Kywgd2UgaGF2ZSBhY2Nlc3MgdG8gY29tcG9zaXRpb24gZXZlbnRzLCBidXQgdGhlIGRhdGEgc3VwcGxpZWRcbi8vIGJ5IHRoZSBuYXRpdmUgY29tcG9zaXRpb25lbmQgZXZlbnQgbWF5IGJlIGluY29ycmVjdC4gSmFwYW5lc2UgaWRlb2dyYXBoaWNcbi8vIHNwYWNlcywgZm9yIGluc3RhbmNlIChcXHUzMDAwKSBhcmUgbm90IHJlY29yZGVkIGNvcnJlY3RseS5cbnZhciB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA9IChcbiAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmXG4gIChcbiAgICAoIWNhblVzZUNvbXBvc2l0aW9uRXZlbnQgfHwgZG9jdW1lbnRNb2RlICYmIGRvY3VtZW50TW9kZSA+IDggJiYgZG9jdW1lbnRNb2RlIDw9IDExKVxuICApXG4pO1xuXG4vKipcbiAqIE9wZXJhIDw9IDEyIGluY2x1ZGVzIFRleHRFdmVudCBpbiB3aW5kb3csIGJ1dCBkb2VzIG5vdCBmaXJlXG4gKiB0ZXh0IGlucHV0IGV2ZW50cy4gUmVseSBvbiBrZXlwcmVzcyBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiBpc1ByZXN0bygpIHtcbiAgdmFyIG9wZXJhID0gd2luZG93Lm9wZXJhO1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBvcGVyYSA9PT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2Ygb3BlcmEudmVyc2lvbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHBhcnNlSW50KG9wZXJhLnZlcnNpb24oKSwgMTApIDw9IDEyXG4gICk7XG59XG5cbnZhciBTUEFDRUJBUl9DT0RFID0gMzI7XG52YXIgU1BBQ0VCQVJfQ0hBUiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoU1BBQ0VCQVJfQ09ERSk7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxuLy8gRXZlbnRzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIHByb3BlcnR5IG5hbWVzLlxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGJlZm9yZUlucHV0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkJlZm9yZUlucHV0OiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQmVmb3JlSW5wdXRDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcFRleHRJbnB1dCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wUGFzdGVcbiAgICBdXG4gIH0sXG4gIGNvbXBvc2l0aW9uRW5kOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uRW5kOiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25FbmRDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25cbiAgICBdXG4gIH0sXG4gIGNvbXBvc2l0aW9uU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25TdGFydDogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblN0YXJ0LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5VXAsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93blxuICAgIF1cbiAgfSxcbiAgY29tcG9zaXRpb25VcGRhdGU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25VcGRhdGU6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uVXBkYXRlLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5VXAsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93blxuICAgIF1cbiAgfVxufTtcblxuLy8gVHJhY2sgd2hldGhlciB3ZSd2ZSBldmVyIGhhbmRsZWQgYSBrZXlwcmVzcyBvbiB0aGUgc3BhY2Uga2V5LlxudmFyIGhhc1NwYWNlS2V5cHJlc3MgPSBmYWxzZTtcblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciBhIG5hdGl2ZSBrZXlwcmVzcyBldmVudCBpcyBhc3N1bWVkIHRvIGJlIGEgY29tbWFuZC5cbiAqIFRoaXMgaXMgcmVxdWlyZWQgYmVjYXVzZSBGaXJlZm94IGZpcmVzIGBrZXlwcmVzc2AgZXZlbnRzIGZvciBrZXkgY29tbWFuZHNcbiAqIChjdXQsIGNvcHksIHNlbGVjdC1hbGwsIGV0Yy4pIGV2ZW4gdGhvdWdoIG5vIGNoYXJhY3RlciBpcyBpbnNlcnRlZC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIChcbiAgICAobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgJiZcbiAgICAvLyBjdHJsS2V5ICYmIGFsdEtleSBpcyBlcXVpdmFsZW50IHRvIEFsdEdyLCBhbmQgaXMgbm90IGEgY29tbWFuZC5cbiAgICAhKG5hdGl2ZUV2ZW50LmN0cmxLZXkgJiYgbmF0aXZlRXZlbnQuYWx0S2V5KVxuICApO1xufVxuXG5cbi8qKlxuICogVHJhbnNsYXRlIG5hdGl2ZSB0b3AgbGV2ZWwgZXZlbnRzIGludG8gZXZlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRDb21wb3NpdGlvbkV2ZW50VHlwZSh0b3BMZXZlbFR5cGUpIHtcbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25TdGFydDpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQ7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kOlxuICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQ7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uVXBkYXRlOlxuICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25VcGRhdGU7XG4gIH1cbn1cblxuLyoqXG4gKiBEb2VzIG91ciBmYWxsYmFjayBiZXN0LWd1ZXNzIG1vZGVsIHRoaW5rIHRoaXMgZXZlbnQgc2lnbmlmaWVzIHRoYXRcbiAqIGNvbXBvc2l0aW9uIGhhcyBiZWd1bj9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIChcbiAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5RG93biAmJlxuICAgIG5hdGl2ZUV2ZW50LmtleUNvZGUgPT09IFNUQVJUX0tFWUNPREVcbiAgKTtcbn1cblxuLyoqXG4gKiBEb2VzIG91ciBmYWxsYmFjayBtb2RlIHRoaW5rIHRoYXQgdGhpcyBldmVudCBpcyB0aGUgZW5kIG9mIGNvbXBvc2l0aW9uP1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5VXA6XG4gICAgICAvLyBDb21tYW5kIGtleXMgaW5zZXJ0IG9yIGNsZWFyIElNRSBpbnB1dC5cbiAgICAgIHJldHVybiAoRU5EX0tFWUNPREVTLmluZGV4T2YobmF0aXZlRXZlbnQua2V5Q29kZSkgIT09IC0xKTtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpcbiAgICAgIC8vIEV4cGVjdCBJTUUga2V5Q29kZSBvbiBlYWNoIGtleWRvd24uIElmIHdlIGdldCBhbnkgb3RoZXJcbiAgICAgIC8vIGNvZGUgd2UgbXVzdCBoYXZlIGV4aXRlZCBlYXJsaWVyLlxuICAgICAgcmV0dXJuIChuYXRpdmVFdmVudC5rZXlDb2RlICE9PSBTVEFSVF9LRVlDT0RFKTtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bjpcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQmx1cjpcbiAgICAgIC8vIEV2ZW50cyBhcmUgbm90IHBvc3NpYmxlIHdpdGhvdXQgY2FuY2VsbGluZyBJTUUuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogR29vZ2xlIElucHV0IFRvb2xzIHByb3ZpZGVzIGNvbXBvc2l0aW9uIGRhdGEgdmlhIGEgQ3VzdG9tRXZlbnQsXG4gKiB3aXRoIHRoZSBgZGF0YWAgcHJvcGVydHkgcG9wdWxhdGVkIGluIHRoZSBgZGV0YWlsYCBvYmplY3QuIElmIHRoaXNcbiAqIGlzIGF2YWlsYWJsZSBvbiB0aGUgZXZlbnQgb2JqZWN0LCB1c2UgaXQuIElmIG5vdCwgdGhpcyBpcyBhIHBsYWluXG4gKiBjb21wb3NpdGlvbiBldmVudCBhbmQgd2UgaGF2ZSBub3RoaW5nIHNwZWNpYWwgdG8gZXh0cmFjdC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4gez9zdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGRldGFpbCA9IG5hdGl2ZUV2ZW50LmRldGFpbDtcbiAgaWYgKHR5cGVvZiBkZXRhaWwgPT09ICdvYmplY3QnICYmICdkYXRhJyBpbiBkZXRhaWwpIHtcbiAgICByZXR1cm4gZGV0YWlsLmRhdGE7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIFRyYWNrIHRoZSBjdXJyZW50IElNRSBjb21wb3NpdGlvbiBmYWxsYmFjayBvYmplY3QsIGlmIGFueS5cbnZhciBjdXJyZW50Q29tcG9zaXRpb24gPSBudWxsO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RDb21wb3NpdGlvbkV2ZW50KFxuICB0b3BMZXZlbFR5cGUsXG4gIHRvcExldmVsVGFyZ2V0LFxuICB0b3BMZXZlbFRhcmdldElELFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIHZhciBldmVudFR5cGU7XG4gIHZhciBmYWxsYmFja0RhdGE7XG5cbiAgaWYgKGNhblVzZUNvbXBvc2l0aW9uRXZlbnQpIHtcbiAgICBldmVudFR5cGUgPSBnZXRDb21wb3NpdGlvbkV2ZW50VHlwZSh0b3BMZXZlbFR5cGUpO1xuICB9IGVsc2UgaWYgKCFjdXJyZW50Q29tcG9zaXRpb24pIHtcbiAgICBpZiAoaXNGYWxsYmFja0NvbXBvc2l0aW9uU3RhcnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZDtcbiAgfVxuXG4gIGlmICghZXZlbnRUeXBlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAodXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEpIHtcbiAgICAvLyBUaGUgY3VycmVudCBjb21wb3NpdGlvbiBpcyBzdG9yZWQgc3RhdGljYWxseSBhbmQgbXVzdCBub3QgYmVcbiAgICAvLyBvdmVyd3JpdHRlbiB3aGlsZSBjb21wb3NpdGlvbiBjb250aW51ZXMuXG4gICAgaWYgKCFjdXJyZW50Q29tcG9zaXRpb24gJiYgZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQpIHtcbiAgICAgIGN1cnJlbnRDb21wb3NpdGlvbiA9IEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5nZXRQb29sZWQodG9wTGV2ZWxUYXJnZXQpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kKSB7XG4gICAgICBpZiAoY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgICAgIGZhbGxiYWNrRGF0YSA9IGN1cnJlbnRDb21wb3NpdGlvbi5nZXREYXRhKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGV2ZW50ID0gU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5nZXRQb29sZWQoXG4gICAgZXZlbnRUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgbmF0aXZlRXZlbnRcbiAgKTtcblxuICBpZiAoZmFsbGJhY2tEYXRhKSB7XG4gICAgLy8gSW5qZWN0IGRhdGEgZ2VuZXJhdGVkIGZyb20gZmFsbGJhY2sgcGF0aCBpbnRvIHRoZSBzeW50aGV0aWMgZXZlbnQuXG4gICAgLy8gVGhpcyBtYXRjaGVzIHRoZSBwcm9wZXJ0eSBvZiBuYXRpdmUgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZS5cbiAgICBldmVudC5kYXRhID0gZmFsbGJhY2tEYXRhO1xuICB9IGVsc2Uge1xuICAgIHZhciBjdXN0b21EYXRhID0gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCk7XG4gICAgaWYgKGN1c3RvbURhdGEgIT09IG51bGwpIHtcbiAgICAgIGV2ZW50LmRhdGEgPSBjdXN0b21EYXRhO1xuICAgIH1cbiAgfVxuXG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gIHJldHVybiBldmVudDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgc3RyaW5nIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBgYmVmb3JlSW5wdXRgIGV2ZW50LlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQ6XG4gICAgICByZXR1cm4gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCk7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgICAgLyoqXG4gICAgICAgKiBJZiBuYXRpdmUgYHRleHRJbnB1dGAgZXZlbnRzIGFyZSBhdmFpbGFibGUsIG91ciBnb2FsIGlzIHRvIG1ha2VcbiAgICAgICAqIHVzZSBvZiB0aGVtLiBIb3dldmVyLCB0aGVyZSBpcyBhIHNwZWNpYWwgY2FzZTogdGhlIHNwYWNlYmFyIGtleS5cbiAgICAgICAqIEluIFdlYmtpdCwgcHJldmVudGluZyBkZWZhdWx0IG9uIGEgc3BhY2ViYXIgYHRleHRJbnB1dGAgZXZlbnRcbiAgICAgICAqIGNhbmNlbHMgY2hhcmFjdGVyIGluc2VydGlvbiwgYnV0IGl0ICphbHNvKiBjYXVzZXMgdGhlIGJyb3dzZXJcbiAgICAgICAqIHRvIGZhbGwgYmFjayB0byBpdHMgZGVmYXVsdCBzcGFjZWJhciBiZWhhdmlvciBvZiBzY3JvbGxpbmcgdGhlXG4gICAgICAgKiBwYWdlLlxuICAgICAgICpcbiAgICAgICAqIFRyYWNraW5nIGF0OlxuICAgICAgICogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM1NTEwM1xuICAgICAgICpcbiAgICAgICAqIFRvIGF2b2lkIHRoaXMgaXNzdWUsIHVzZSB0aGUga2V5cHJlc3MgZXZlbnQgYXMgaWYgbm8gYHRleHRJbnB1dGBcbiAgICAgICAqIGV2ZW50IGlzIGF2YWlsYWJsZS5cbiAgICAgICAqL1xuICAgICAgdmFyIHdoaWNoID0gbmF0aXZlRXZlbnQud2hpY2g7XG4gICAgICBpZiAod2hpY2ggIT09IFNQQUNFQkFSX0NPREUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGhhc1NwYWNlS2V5cHJlc3MgPSB0cnVlO1xuICAgICAgcmV0dXJuIFNQQUNFQkFSX0NIQVI7XG5cbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVGV4dElucHV0OlxuICAgICAgLy8gUmVjb3JkIHRoZSBjaGFyYWN0ZXJzIHRvIGJlIGFkZGVkIHRvIHRoZSBET00uXG4gICAgICB2YXIgY2hhcnMgPSBuYXRpdmVFdmVudC5kYXRhO1xuXG4gICAgICAvLyBJZiBpdCdzIGEgc3BhY2ViYXIgY2hhcmFjdGVyLCBhc3N1bWUgdGhhdCB3ZSBoYXZlIGFscmVhZHkgaGFuZGxlZFxuICAgICAgLy8gaXQgYXQgdGhlIGtleXByZXNzIGxldmVsIGFuZCBiYWlsIGltbWVkaWF0ZWx5LiBBbmRyb2lkIENocm9tZVxuICAgICAgLy8gZG9lc24ndCBnaXZlIHVzIGtleWNvZGVzLCBzbyB3ZSBuZWVkIHRvIGJsYWNrbGlzdCBpdC5cbiAgICAgIGlmIChjaGFycyA9PT0gU1BBQ0VCQVJfQ0hBUiAmJiBoYXNTcGFjZUtleXByZXNzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2hhcnM7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgLy8gRm9yIG90aGVyIG5hdGl2ZSBldmVudCB0eXBlcywgZG8gbm90aGluZy5cbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogRm9yIGJyb3dzZXJzIHRoYXQgZG8gbm90IHByb3ZpZGUgdGhlIGB0ZXh0SW5wdXRgIGV2ZW50LCBleHRyYWN0IHRoZVxuICogYXBwcm9wcmlhdGUgc3RyaW5nIHRvIHVzZSBmb3IgU3ludGhldGljSW5wdXRFdmVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgZmFsbGJhY2sgc3RyaW5nIGZvciB0aGlzIGBiZWZvcmVJbnB1dGAgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIC8vIElmIHdlIGFyZSBjdXJyZW50bHkgY29tcG9zaW5nIChJTUUpIGFuZCB1c2luZyBhIGZhbGxiYWNrIHRvIGRvIHNvLFxuICAvLyB0cnkgdG8gZXh0cmFjdCB0aGUgY29tcG9zZWQgY2hhcmFjdGVycyBmcm9tIHRoZSBmYWxsYmFjayBvYmplY3QuXG4gIGlmIChjdXJyZW50Q29tcG9zaXRpb24pIHtcbiAgICBpZiAoXG4gICAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQgfHxcbiAgICAgIGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KVxuICAgICkge1xuICAgICAgdmFyIGNoYXJzID0gY3VycmVudENvbXBvc2l0aW9uLmdldERhdGEoKTtcbiAgICAgIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5yZWxlYXNlKGN1cnJlbnRDb21wb3NpdGlvbik7XG4gICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBudWxsO1xuICAgICAgcmV0dXJuIGNoYXJzO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlOlxuICAgICAgLy8gSWYgYSBwYXN0ZSBldmVudCBvY2N1cnMgYWZ0ZXIgYSBrZXlwcmVzcywgdGhyb3cgb3V0IHRoZSBpbnB1dFxuICAgICAgLy8gY2hhcnMuIFBhc3RlIGV2ZW50cyBzaG91bGQgbm90IGxlYWQgdG8gQmVmb3JlSW5wdXQgZXZlbnRzLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgICAgLyoqXG4gICAgICAgKiBBcyBvZiB2MjcsIEZpcmVmb3ggbWF5IGZpcmUga2V5cHJlc3MgZXZlbnRzIGV2ZW4gd2hlbiBubyBjaGFyYWN0ZXJcbiAgICAgICAqIHdpbGwgYmUgaW5zZXJ0ZWQuIEEgZmV3IHBvc3NpYmlsaXRpZXM6XG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIGAwYC4gQXJyb3cga2V5cywgRXNjIGtleSwgZXRjLlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyB0aGUgcHJlc3NlZCBrZXkgY29kZSwgYnV0IG5vIGNoYXIgaXMgYXZhaWxhYmxlLlxuICAgICAgICogICBFeDogJ0FsdEdyICsgZGAgaW4gUG9saXNoLiBUaGVyZSBpcyBubyBtb2RpZmllZCBjaGFyYWN0ZXIgZm9yXG4gICAgICAgKiAgIHRoaXMga2V5IGNvbWJpbmF0aW9uIGFuZCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQgaW50byB0aGVcbiAgICAgICAqICAgZG9jdW1lbnQsIGJ1dCBGRiBmaXJlcyB0aGUga2V5cHJlc3MgZm9yIGNoYXIgY29kZSBgMTAwYCBhbnl3YXkuXG4gICAgICAgKiAgIE5vIGBpbnB1dGAgZXZlbnQgd2lsbCBvY2N1ci5cbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgdGhlIHByZXNzZWQga2V5IGNvZGUsIGJ1dCBhIGNvbW1hbmQgY29tYmluYXRpb24gaXNcbiAgICAgICAqICAgYmVpbmcgdXNlZC4gRXg6IGBDbWQrQ2AuIE5vIGNoYXJhY3RlciBpcyBpbnNlcnRlZCwgYW5kIG5vXG4gICAgICAgKiAgIGBpbnB1dGAgZXZlbnQgd2lsbCBvY2N1ci5cbiAgICAgICAqL1xuICAgICAgaWYgKG5hdGl2ZUV2ZW50LndoaWNoICYmICFpc0tleXByZXNzQ29tbWFuZChuYXRpdmVFdmVudCkpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUobmF0aXZlRXZlbnQud2hpY2gpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kOlxuICAgICAgcmV0dXJuIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhID8gbnVsbCA6IG5hdGl2ZUV2ZW50LmRhdGE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogRXh0cmFjdCBhIFN5bnRoZXRpY0lucHV0RXZlbnQgZm9yIGBiZWZvcmVJbnB1dGAsIGJhc2VkIG9uIGVpdGhlciBuYXRpdmVcbiAqIGB0ZXh0SW5wdXRgIG9yIGZhbGxiYWNrIGJlaGF2aW9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBIFN5bnRoZXRpY0lucHV0RXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50KFxuICB0b3BMZXZlbFR5cGUsXG4gIHRvcExldmVsVGFyZ2V0LFxuICB0b3BMZXZlbFRhcmdldElELFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIHZhciBjaGFycztcblxuICBpZiAoY2FuVXNlVGV4dElucHV0RXZlbnQpIHtcbiAgICBjaGFycyA9IGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gIH0gZWxzZSB7XG4gICAgY2hhcnMgPSBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gIH1cblxuICAvLyBJZiBubyBjaGFyYWN0ZXJzIGFyZSBiZWluZyBpbnNlcnRlZCwgbm8gQmVmb3JlSW5wdXQgZXZlbnQgc2hvdWxkXG4gIC8vIGJlIGZpcmVkLlxuICBpZiAoIWNoYXJzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNJbnB1dEV2ZW50LmdldFBvb2xlZChcbiAgICBldmVudFR5cGVzLmJlZm9yZUlucHV0LFxuICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgbmF0aXZlRXZlbnRcbiAgKTtcblxuICBldmVudC5kYXRhID0gY2hhcnM7XG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gIHJldHVybiBldmVudDtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gYG9uQmVmb3JlSW5wdXRgIGV2ZW50IHRvIG1hdGNoXG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDEzMTEwNS8jZXZlbnRzLWlucHV0ZXZlbnRzLlxuICpcbiAqIFRoaXMgZXZlbnQgcGx1Z2luIGlzIGJhc2VkIG9uIHRoZSBuYXRpdmUgYHRleHRJbnB1dGAgZXZlbnRcbiAqIGF2YWlsYWJsZSBpbiBDaHJvbWUsIFNhZmFyaSwgT3BlcmEsIGFuZCBJRS4gVGhpcyBldmVudCBmaXJlcyBhZnRlclxuICogYG9uS2V5UHJlc3NgIGFuZCBgb25Db21wb3NpdGlvbkVuZGAsIGJ1dCBiZWZvcmUgYG9uSW5wdXRgLlxuICpcbiAqIGBiZWZvcmVJbnB1dGAgaXMgc3BlYydkIGJ1dCBub3QgaW1wbGVtZW50ZWQgaW4gYW55IGJyb3dzZXJzLCBhbmRcbiAqIHRoZSBgaW5wdXRgIGV2ZW50IGRvZXMgbm90IHByb3ZpZGUgYW55IHVzZWZ1bCBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGhhc1xuICogYWN0dWFsbHkgYmVlbiBhZGRlZCwgY29udHJhcnkgdG8gdGhlIHNwZWMuIFRodXMsIGB0ZXh0SW5wdXRgIGlzIHRoZSBiZXN0XG4gKiBhdmFpbGFibGUgZXZlbnQgdG8gaWRlbnRpZnkgdGhlIGNoYXJhY3RlcnMgdGhhdCBoYXZlIGFjdHVhbGx5IGJlZW4gaW5zZXJ0ZWRcbiAqIGludG8gdGhlIHRhcmdldCBub2RlLlxuICpcbiAqIFRoaXMgcGx1Z2luIGlzIGFsc28gcmVzcG9uc2libGUgZm9yIGVtaXR0aW5nIGBjb21wb3NpdGlvbmAgZXZlbnRzLCB0aHVzXG4gKiBhbGxvd2luZyB1cyB0byBzaGFyZSBjb21wb3NpdGlvbiBmYWxsYmFjayBjb2RlIGZvciBib3RoIGBiZWZvcmVJbnB1dGAgYW5kXG4gKiBgY29tcG9zaXRpb25gIGV2ZW50IHR5cGVzLlxuICovXG52YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElELFxuICAgIG5hdGl2ZUV2ZW50XG4gICkge1xuICAgIHJldHVybiBbXG4gICAgICBleHRyYWN0Q29tcG9zaXRpb25FdmVudChcbiAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICksXG4gICAgICBleHRyYWN0QmVmb3JlSW5wdXRFdmVudChcbiAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgIClcbiAgICBdO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJlZm9yZUlucHV0RXZlbnRQbHVnaW47XG5cbn0se1wiLi9FdmVudENvbnN0YW50c1wiOjE2MixcIi4vRXZlbnRQcm9wYWdhdG9yc1wiOjE2NyxcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoxNjgsXCIuL0ZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZVwiOjE2OSxcIi4vU3ludGhldGljQ29tcG9zaXRpb25FdmVudFwiOjI1MyxcIi4vU3ludGhldGljSW5wdXRFdmVudFwiOjI1NyxcIi4va2V5T2ZcIjozMDR9XSwxNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDU1NDb3JlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogVGhlIENTU0NvcmUgbW9kdWxlIHNwZWNpZmllcyB0aGUgQVBJIChhbmQgaW1wbGVtZW50cyBtb3N0IG9mIHRoZSBtZXRob2RzKVxuICogdGhhdCBzaG91bGQgYmUgdXNlZCB3aGVuIGRlYWxpbmcgd2l0aCB0aGUgZGlzcGxheSBvZiBlbGVtZW50cyAodmlhIHRoZWlyXG4gKiBDU1MgY2xhc3NlcyBhbmQgdmlzaWJpbGl0eSBvbiBzY3JlZW4uIEl0IGlzIGFuIEFQSSBmb2N1c2VkIG9uIG11dGF0aW5nIHRoZVxuICogZGlzcGxheSBhbmQgbm90IHJlYWRpbmcgaXQgYXMgbm8gbG9naWNhbCBzdGF0ZSBzaG91bGQgYmUgZW5jb2RlZCBpbiB0aGVcbiAqIGRpc3BsYXkgb2YgZWxlbWVudHMuXG4gKi9cblxudmFyIENTU0NvcmUgPSB7XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGNsYXNzIHBhc3NlZCBpbiB0byB0aGUgZWxlbWVudCBpZiBpdCBkb2Vzbid0IGFscmVhZHkgaGF2ZSBpdC5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHRvIHNldCB0aGUgY2xhc3Mgb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzTmFtZVxuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSB0aGUgZWxlbWVudCBwYXNzZWQgaW5cbiAgICovXG4gIGFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSxcbiAgICAgICdDU1NDb3JlLmFkZENsYXNzIHRha2VzIG9ubHkgYSBzaW5nbGUgY2xhc3MgbmFtZS4gXCIlc1wiIGNvbnRhaW5zICcgK1xuICAgICAgJ211bHRpcGxlIGNsYXNzZXMuJywgY2xhc3NOYW1lXG4gICAgKSA6IGludmFyaWFudCghL1xccy8udGVzdChjbGFzc05hbWUpKSk7XG5cbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKCFDU1NDb3JlLmhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZSArICcgJyArIGNsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGNsYXNzIHBhc3NlZCBpbiBmcm9tIHRoZSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB0byBzZXQgdGhlIGNsYXNzIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzc05hbWVcbiAgICogQHJldHVybiB7RE9NRWxlbWVudH0gdGhlIGVsZW1lbnQgcGFzc2VkIGluXG4gICAqL1xuICByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICEvXFxzLy50ZXN0KGNsYXNzTmFtZSksXG4gICAgICAnQ1NTQ29yZS5yZW1vdmVDbGFzcyB0YWtlcyBvbmx5IGEgc2luZ2xlIGNsYXNzIG5hbWUuIFwiJXNcIiBjb250YWlucyAnICtcbiAgICAgICdtdWx0aXBsZSBjbGFzc2VzLicsIGNsYXNzTmFtZVxuICAgICkgOiBpbnZhcmlhbnQoIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSkpO1xuXG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgfSBlbHNlIGlmIChDU1NDb3JlLmhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZVxuICAgICAgICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBjbGFzc05hbWUgKyAnKD86XFxcXHN8JCknLCAnZycpLCAnJDEnKVxuICAgICAgICAgIC5yZXBsYWNlKC9cXHMrL2csICcgJykgLy8gbXVsdGlwbGUgc3BhY2VzIHRvIG9uZVxuICAgICAgICAgIC5yZXBsYWNlKC9eXFxzKnxcXHMqJC9nLCAnJyk7IC8vIHRyaW0gdGhlIGVuZHNcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhlbHBlciB0byBhZGQgb3IgcmVtb3ZlIGEgY2xhc3MgZnJvbSBhbiBlbGVtZW50IGJhc2VkIG9uIGEgY29uZGl0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdG8gc2V0IHRoZSBjbGFzcyBvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3NOYW1lXG4gICAqIEBwYXJhbSB7Kn0gYm9vbCBjb25kaXRpb24gdG8gd2hldGhlciB0byBhZGQgb3IgcmVtb3ZlIHRoZSBjbGFzc1xuICAgKiBAcmV0dXJuIHtET01FbGVtZW50fSB0aGUgZWxlbWVudCBwYXNzZWQgaW5cbiAgICovXG4gIGNvbmRpdGlvbkNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGJvb2wpIHtcbiAgICByZXR1cm4gKGJvb2wgPyBDU1NDb3JlLmFkZENsYXNzIDogQ1NTQ29yZS5yZW1vdmVDbGFzcykoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgfSxcblxuICAvKipcbiAgICogVGVzdHMgd2hldGhlciB0aGUgZWxlbWVudCBoYXMgdGhlIGNsYXNzIHNwZWNpZmllZC5cbiAgICpcbiAgICogQHBhcmFtIHtET01Ob2RlfERPTVdpbmRvd30gZWxlbWVudCB0aGUgZWxlbWVudCB0byBzZXQgdGhlIGNsYXNzIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzc05hbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZWxlbWVudCBoYXMgdGhlIGNsYXNzLCBmYWxzZSBpZiBub3RcbiAgICovXG4gIGhhc0NsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSxcbiAgICAgICdDU1MuaGFzQ2xhc3MgdGFrZXMgb25seSBhIHNpbmdsZSBjbGFzcyBuYW1lLidcbiAgICApIDogaW52YXJpYW50KCEvXFxzLy50ZXN0KGNsYXNzTmFtZSkpKTtcbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgIHJldHVybiAhIWNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gKCcgJyArIGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnKS5pbmRleE9mKCcgJyArIGNsYXNzTmFtZSArICcgJykgPiAtMTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU0NvcmU7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2ludmFyaWFudFwiOjI5NyxcIl9wcm9jZXNzXCI6MX1dLDE1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ1NTUHJvcGVydHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ1NTIHByb3BlcnRpZXMgd2hpY2ggYWNjZXB0IG51bWJlcnMgYnV0IGFyZSBub3QgaW4gdW5pdHMgb2YgXCJweFwiLlxuICovXG52YXIgaXNVbml0bGVzc051bWJlciA9IHtcbiAgYm94RmxleDogdHJ1ZSxcbiAgYm94RmxleEdyb3VwOiB0cnVlLFxuICBjb2x1bW5Db3VudDogdHJ1ZSxcbiAgZmxleDogdHJ1ZSxcbiAgZmxleEdyb3c6IHRydWUsXG4gIGZsZXhQb3NpdGl2ZTogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZmxleE5lZ2F0aXZlOiB0cnVlLFxuICBmb250V2VpZ2h0OiB0cnVlLFxuICBsaW5lQ2xhbXA6IHRydWUsXG4gIGxpbmVIZWlnaHQ6IHRydWUsXG4gIG9wYWNpdHk6IHRydWUsXG4gIG9yZGVyOiB0cnVlLFxuICBvcnBoYW5zOiB0cnVlLFxuICB3aWRvd3M6IHRydWUsXG4gIHpJbmRleDogdHJ1ZSxcbiAgem9vbTogdHJ1ZSxcblxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgc3R5bGUgbmFtZSwgZWc6IHRyYW5zaXRpb25EdXJhdGlvblxuICogQHJldHVybiB7c3RyaW5nfSBzdHlsZSBuYW1lIHByZWZpeGVkIHdpdGggYHByZWZpeGAsIHByb3Blcmx5IGNhbWVsQ2FzZWQsIGVnOlxuICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHByZWZpeEtleShwcmVmaXgsIGtleSkge1xuICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHN0eWxlIG5hbWVzIHRoYXQgbWF5IGNvbWUgcGFzc2VkIGluIHByZWZpeGVkIGJ5IGFkZGluZyBwZXJtdXRhdGlvbnNcbiAqIG9mIHZlbmRvciBwcmVmaXhlcy5cbiAqL1xudmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnbXMnLCAnTW96JywgJ08nXTtcblxuLy8gVXNpbmcgT2JqZWN0LmtleXMgaGVyZSwgb3IgZWxzZSB0aGUgdmFuaWxsYSBmb3ItaW4gbG9vcCBtYWtlcyBJRTggZ28gaW50byBhblxuLy8gaW5maW5pdGUgbG9vcCwgYmVjYXVzZSBpdCBpdGVyYXRlcyBvdmVyIHRoZSBuZXdseSBhZGRlZCBwcm9wcyB0b28uXG5PYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgcHJlZml4ZXMuZm9yRWFjaChmdW5jdGlvbihwcmVmaXgpIHtcbiAgICBpc1VuaXRsZXNzTnVtYmVyW3ByZWZpeEtleShwcmVmaXgsIHByb3ApXSA9IGlzVW5pdGxlc3NOdW1iZXJbcHJvcF07XG4gIH0pO1xufSk7XG5cbi8qKlxuICogTW9zdCBzdHlsZSBwcm9wZXJ0aWVzIGNhbiBiZSB1bnNldCBieSBkb2luZyAuc3R5bGVbcHJvcF0gPSAnJyBidXQgSUU4XG4gKiBkb2Vzbid0IGxpa2UgZG9pbmcgdGhhdCB3aXRoIHNob3J0aGFuZCBwcm9wZXJ0aWVzIHNvIGZvciB0aGUgcHJvcGVydGllcyB0aGF0XG4gKiBJRTggYnJlYWtzIG9uLCB3aGljaCBhcmUgbGlzdGVkIGhlcmUsIHdlIGluc3RlYWQgdW5zZXQgZWFjaCBvZiB0aGVcbiAqIGluZGl2aWR1YWwgcHJvcGVydGllcy4gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzg1LlxuICogVGhlIDQtdmFsdWUgJ2Nsb2NrJyBwcm9wZXJ0aWVzIGxpa2UgbWFyZ2luLCBwYWRkaW5nLCBib3JkZXItd2lkdGggc2VlbSB0b1xuICogYmVoYXZlIHdpdGhvdXQgYW55IHByb2JsZW1zLiBDdXJpb3VzbHksIGxpc3Qtc3R5bGUgd29ya3MgdG9vIHdpdGhvdXQgYW55XG4gKiBzcGVjaWFsIHByb2RkaW5nLlxuICovXG52YXIgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zID0ge1xuICBiYWNrZ3JvdW5kOiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUmVwZWF0OiB0cnVlLFxuICAgIGJhY2tncm91bmRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXI6IHtcbiAgICBib3JkZXJXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJCb3R0b206IHtcbiAgICBib3JkZXJCb3R0b21XaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21TdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21Db2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJMZWZ0OiB7XG4gICAgYm9yZGVyTGVmdFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlckxlZnRTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyUmlnaHQ6IHtcbiAgICBib3JkZXJSaWdodFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyUmlnaHRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJUb3A6IHtcbiAgICBib3JkZXJUb3BXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJUb3BTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJUb3BDb2xvcjogdHJ1ZVxuICB9LFxuICBmb250OiB7XG4gICAgZm9udFN0eWxlOiB0cnVlLFxuICAgIGZvbnRWYXJpYW50OiB0cnVlLFxuICAgIGZvbnRXZWlnaHQ6IHRydWUsXG4gICAgZm9udFNpemU6IHRydWUsXG4gICAgbGluZUhlaWdodDogdHJ1ZSxcbiAgICBmb250RmFtaWx5OiB0cnVlXG4gIH1cbn07XG5cbnZhciBDU1NQcm9wZXJ0eSA9IHtcbiAgaXNVbml0bGVzc051bWJlcjogaXNVbml0bGVzc051bWJlcixcbiAgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zOiBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTUHJvcGVydHk7XG5cbn0se31dLDE1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENTU1Byb3BlcnR5T3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDU1NQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0NTU1Byb3BlcnR5XCIpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBjYW1lbGl6ZVN0eWxlTmFtZSA9IHJlcXVpcmUoXCIuL2NhbWVsaXplU3R5bGVOYW1lXCIpO1xudmFyIGRhbmdlcm91c1N0eWxlVmFsdWUgPSByZXF1aXJlKFwiLi9kYW5nZXJvdXNTdHlsZVZhbHVlXCIpO1xudmFyIGh5cGhlbmF0ZVN0eWxlTmFtZSA9IHJlcXVpcmUoXCIuL2h5cGhlbmF0ZVN0eWxlTmFtZVwiKTtcbnZhciBtZW1vaXplU3RyaW5nT25seSA9IHJlcXVpcmUoXCIuL21lbW9pemVTdHJpbmdPbmx5XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgcHJvY2Vzc1N0eWxlTmFtZSA9IG1lbW9pemVTdHJpbmdPbmx5KGZ1bmN0aW9uKHN0eWxlTmFtZSkge1xuICByZXR1cm4gaHlwaGVuYXRlU3R5bGVOYW1lKHN0eWxlTmFtZSk7XG59KTtcblxudmFyIHN0eWxlRmxvYXRBY2Nlc3NvciA9ICdjc3NGbG9hdCc7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIElFOCBvbmx5IHN1cHBvcnRzIGFjY2Vzc2luZyBjc3NGbG9hdCAoc3RhbmRhcmQpIGFzIHN0eWxlRmxvYXRcbiAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5jc3NGbG9hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3R5bGVGbG9hdEFjY2Vzc29yID0gJ3N0eWxlRmxvYXQnO1xuICB9XG59XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgLy8gJ21zVHJhbnNmb3JtJyBpcyBjb3JyZWN0LCBidXQgdGhlIG90aGVyIHByZWZpeGVzIHNob3VsZCBiZSBjYXBpdGFsaXplZFxuICB2YXIgYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuID0gL14oPzp3ZWJraXR8bW96fG8pW0EtWl0vO1xuXG4gIC8vIHN0eWxlIHZhbHVlcyBzaG91bGRuJ3QgY29udGFpbiBhIHNlbWljb2xvblxuICB2YXIgYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuID0gLztcXHMqJC87XG5cbiAgdmFyIHdhcm5lZFN0eWxlTmFtZXMgPSB7fTtcbiAgdmFyIHdhcm5lZFN0eWxlVmFsdWVzID0ge307XG5cbiAgdmFyIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZU5hbWVzW25hbWVdID0gdHJ1ZTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIGZhbHNlLFxuICAgICAgJ1Vuc3VwcG9ydGVkIHN0eWxlIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JyxcbiAgICAgIG5hbWUsXG4gICAgICBjYW1lbGl6ZVN0eWxlTmFtZShuYW1lKVxuICAgICkgOiBudWxsKTtcbiAgfTtcblxuICB2YXIgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZU5hbWVzW25hbWVdID0gdHJ1ZTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIGZhbHNlLFxuICAgICAgJ1Vuc3VwcG9ydGVkIHZlbmRvci1wcmVmaXhlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPycsXG4gICAgICBuYW1lLFxuICAgICAgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSlcbiAgICApIDogbnVsbCk7XG4gIH07XG5cbiAgdmFyIHdhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHdhcm5lZFN0eWxlVmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSAmJiB3YXJuZWRTdHlsZVZhbHVlc1t2YWx1ZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZVZhbHVlc1t2YWx1ZV0gPSB0cnVlO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgZmFsc2UsXG4gICAgICAnU3R5bGUgcHJvcGVydHkgdmFsdWVzIHNob3VsZG5cXCd0IGNvbnRhaW4gYSBzZW1pY29sb24uICcgK1xuICAgICAgJ1RyeSBcIiVzOiAlc1wiIGluc3RlYWQuJyxcbiAgICAgIG5hbWUsXG4gICAgICB2YWx1ZS5yZXBsYWNlKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiwgJycpXG4gICAgKSA6IG51bGwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqL1xuICB2YXIgd2FyblZhbGlkU3R5bGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChuYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybi50ZXN0KG5hbWUpKSB7XG4gICAgICB3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUobmFtZSk7XG4gICAgfSBlbHNlIGlmIChiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4udGVzdCh2YWx1ZSkpIHtcbiAgICAgIHdhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbihuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBDU1MgcHJvcGVydGllcy5cbiAqL1xudmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogU2VyaWFsaXplcyBhIG1hcHBpbmcgb2Ygc3R5bGUgcHJvcGVydGllcyBmb3IgdXNlIGFzIGlubGluZSBzdHlsZXM6XG4gICAqXG4gICAqICAgPiBjcmVhdGVNYXJrdXBGb3JTdHlsZXMoe3dpZHRoOiAnMjAwcHgnLCBoZWlnaHQ6IDB9KVxuICAgKiAgIFwid2lkdGg6MjAwcHg7aGVpZ2h0OjA7XCJcbiAgICpcbiAgICogVW5kZWZpbmVkIHZhbHVlcyBhcmUgaWdub3JlZCBzbyB0aGF0IGRlY2xhcmF0aXZlIHByb2dyYW1taW5nIGlzIGVhc2llci5cbiAgICogVGhlIHJlc3VsdCBzaG91bGQgYmUgSFRNTC1lc2NhcGVkIGJlZm9yZSBpbnNlcnRpb24gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JTdHlsZXM6IGZ1bmN0aW9uKHN0eWxlcykge1xuICAgIHZhciBzZXJpYWxpemVkID0gJyc7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZVZhbHVlID0gc3R5bGVzW3N0eWxlTmFtZV07XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHdhcm5WYWxpZFN0eWxlKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3R5bGVWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gcHJvY2Vzc1N0eWxlTmFtZShzdHlsZU5hbWUpICsgJzonO1xuICAgICAgICBzZXJpYWxpemVkICs9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlKSArICc7JztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWQgfHwgbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgZm9yIG11bHRpcGxlIHN0eWxlcyBvbiBhIG5vZGUuICBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCBhc1xuICAgKiAnJyAoZW1wdHkgc3RyaW5nKSwgdGhlIGNvcnJlc3BvbmRpbmcgc3R5bGUgcHJvcGVydHkgd2lsbCBiZSB1bnNldC5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdHlsZXNcbiAgICovXG4gIHNldFZhbHVlRm9yU3R5bGVzOiBmdW5jdGlvbihub2RlLCBzdHlsZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHdhcm5WYWxpZFN0eWxlKHN0eWxlTmFtZSwgc3R5bGVzW3N0eWxlTmFtZV0pO1xuICAgICAgfVxuICAgICAgdmFyIHN0eWxlVmFsdWUgPSBkYW5nZXJvdXNTdHlsZVZhbHVlKHN0eWxlTmFtZSwgc3R5bGVzW3N0eWxlTmFtZV0pO1xuICAgICAgaWYgKHN0eWxlTmFtZSA9PT0gJ2Zsb2F0Jykge1xuICAgICAgICBzdHlsZU5hbWUgPSBzdHlsZUZsb2F0QWNjZXNzb3I7XG4gICAgICB9XG4gICAgICBpZiAoc3R5bGVWYWx1ZSkge1xuICAgICAgICBzdHlsZVtzdHlsZU5hbWVdID0gc3R5bGVWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBleHBhbnNpb24gPSBDU1NQcm9wZXJ0eS5zaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNbc3R5bGVOYW1lXTtcbiAgICAgICAgaWYgKGV4cGFuc2lvbikge1xuICAgICAgICAgIC8vIFNob3J0aGFuZCBwcm9wZXJ0eSB0aGF0IElFOCB3b24ndCBsaWtlIHVuc2V0dGluZywgc28gdW5zZXQgZWFjaFxuICAgICAgICAgIC8vIGNvbXBvbmVudCB0byBwbGFjYXRlIGl0XG4gICAgICAgICAgZm9yICh2YXIgaW5kaXZpZHVhbFN0eWxlTmFtZSBpbiBleHBhbnNpb24pIHtcbiAgICAgICAgICAgIHN0eWxlW2luZGl2aWR1YWxTdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQ1NTUHJvcGVydHlcIjoxNTEsXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MTY4LFwiLi9jYW1lbGl6ZVN0eWxlTmFtZVwiOjI2OCxcIi4vZGFuZ2Vyb3VzU3R5bGVWYWx1ZVwiOjI3NSxcIi4vaHlwaGVuYXRlU3R5bGVOYW1lXCI6Mjk1LFwiLi9tZW1vaXplU3RyaW5nT25seVwiOjMwNixcIi4vd2FybmluZ1wiOjMxOCxcIl9wcm9jZXNzXCI6MX1dLDE1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENhbGxiYWNrUXVldWVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCBwc2V1ZG8tZXZlbnQgbW9kdWxlIHRvIGhlbHAga2VlcCB0cmFjayBvZiBjb21wb25lbnRzIHdhaXRpbmcgdG9cbiAqIGJlIG5vdGlmaWVkIHdoZW4gdGhlaXIgRE9NIHJlcHJlc2VudGF0aW9ucyBhcmUgYXZhaWxhYmxlIGZvciB1c2UuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRzIGBQb29sZWRDbGFzc2AsIHNvIHlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byBpbnN0YW50aWF0ZSB0aGlzLlxuICogSW5zdGVhZCwgdXNlIGBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpYC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RNb3VudFJlYWR5XG4gKiBAaW1wbGVtZW50cyBQb29sZWRDbGFzc1xuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIENhbGxiYWNrUXVldWUoKSB7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbn1cblxuYXNzaWduKENhbGxiYWNrUXVldWUucHJvdG90eXBlLCB7XG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGBub3RpZnlBbGxgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIEludm9rZWQgd2hlbiBgbm90aWZ5QWxsYCBpcyBpbnZva2VkLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IGNvbnRleHQgQ29udGV4dCB0byBjYWxsIGBjYWxsYmFja2Agd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlOiBmdW5jdGlvbihjYWxsYmFjaywgY29udGV4dCkge1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCBbXTtcbiAgICB0aGlzLl9jb250ZXh0cyA9IHRoaXMuX2NvbnRleHRzIHx8IFtdO1xuICAgIHRoaXMuX2NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB0aGlzLl9jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VzIGFsbCBlbnF1ZXVlZCBjYWxsYmFja3MgYW5kIGNsZWFycyB0aGUgcXVldWUuIFRoaXMgaXMgaW52b2tlZCBhZnRlclxuICAgKiB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIG9mIGEgY29tcG9uZW50IGhhcyBiZWVuIGNyZWF0ZWQgb3IgdXBkYXRlZC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBub3RpZnlBbGw6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3M7XG4gICAgdmFyIGNvbnRleHRzID0gdGhpcy5fY29udGV4dHM7XG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgY2FsbGJhY2tzLmxlbmd0aCA9PT0gY29udGV4dHMubGVuZ3RoLFxuICAgICAgICAnTWlzbWF0Y2hlZCBsaXN0IG9mIGNvbnRleHRzIGluIGNhbGxiYWNrIHF1ZXVlJ1xuICAgICAgKSA6IGludmFyaWFudChjYWxsYmFja3MubGVuZ3RoID09PSBjb250ZXh0cy5sZW5ndGgpKTtcbiAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gICAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY2FsbGJhY2tzW2ldLmNhbGwoY29udGV4dHNbaV0pO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgICBjb250ZXh0cy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBpbnRlcm5hbCBxdWV1ZS5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxufSk7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDYWxsYmFja1F1ZXVlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYWxsYmFja1F1ZXVlO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9PYmplY3QuYXNzaWduXCI6MTc1LFwiLi9Qb29sZWRDbGFzc1wiOjE3NixcIi4vaW52YXJpYW50XCI6Mjk3LFwiX3Byb2Nlc3NcIjoxfV0sMTU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDaGFuZ2VFdmVudFBsdWdpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpbkh1YlwiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xuXG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIik7XG52YXIgaXNUZXh0SW5wdXRFbGVtZW50ID0gcmVxdWlyZShcIi4vaXNUZXh0SW5wdXRFbGVtZW50XCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGNoYW5nZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25DaGFuZ2U6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25DaGFuZ2VDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDaGFuZ2UsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENsaWNrLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wSW5wdXQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2VcbiAgICBdXG4gIH1cbn07XG5cbi8qKlxuICogRm9yIElFIHNoaW1zXG4gKi9cbnZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IG51bGw7XG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjaGFuZ2VgIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVzZUNoYW5nZUV2ZW50KGVsZW0pIHtcbiAgcmV0dXJuIChcbiAgICBlbGVtLm5vZGVOYW1lID09PSAnU0VMRUNUJyB8fFxuICAgIChlbGVtLm5vZGVOYW1lID09PSAnSU5QVVQnICYmIGVsZW0udHlwZSA9PT0gJ2ZpbGUnKVxuICApO1xufVxuXG52YXIgZG9lc0NoYW5nZUV2ZW50QnViYmxlID0gZmFsc2U7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIFNlZSBgaGFuZGxlQ2hhbmdlYCBjb21tZW50IGJlbG93XG4gIGRvZXNDaGFuZ2VFdmVudEJ1YmJsZSA9IGlzRXZlbnRTdXBwb3J0ZWQoJ2NoYW5nZScpICYmIChcbiAgICAoISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOClcbiAgKTtcbn1cblxuZnVuY3Rpb24gbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudChuYXRpdmVFdmVudCkge1xuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG4gICAgZXZlbnRUeXBlcy5jaGFuZ2UsXG4gICAgYWN0aXZlRWxlbWVudElELFxuICAgIG5hdGl2ZUV2ZW50XG4gICk7XG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG5cbiAgLy8gSWYgY2hhbmdlIGFuZCBwcm9wZXJ0eWNoYW5nZSBidWJibGVkLCB3ZSdkIGp1c3QgYmluZCB0byBpdCBsaWtlIGFsbCB0aGVcbiAgLy8gb3RoZXIgZXZlbnRzIGFuZCBoYXZlIGl0IGdvIHRocm91Z2ggUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLiBTaW5jZSBpdFxuICAvLyBkb2Vzbid0LCB3ZSBtYW51YWxseSBsaXN0ZW4gZm9yIHRoZSBldmVudHMgYW5kIHNvIHdlIGhhdmUgdG8gZW5xdWV1ZSBhbmRcbiAgLy8gcHJvY2VzcyB0aGUgYWJzdHJhY3QgZXZlbnQgbWFudWFsbHkuXG4gIC8vXG4gIC8vIEJhdGNoaW5nIGlzIG5lY2Vzc2FyeSBoZXJlIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IGFsbCBldmVudCBoYW5kbGVycyBydW5cbiAgLy8gYmVmb3JlIHRoZSBuZXh0IHJlcmVuZGVyIChpbmNsdWRpbmcgZXZlbnQgaGFuZGxlcnMgYXR0YWNoZWQgdG8gYW5jZXN0b3JcbiAgLy8gZWxlbWVudHMgaW5zdGVhZCBvZiBkaXJlY3RseSBvbiB0aGUgaW5wdXQpLiBXaXRob3V0IHRoaXMsIGNvbnRyb2xsZWRcbiAgLy8gY29tcG9uZW50cyBkb24ndCB3b3JrIHByb3Blcmx5IGluIGNvbmp1bmN0aW9uIHdpdGggZXZlbnQgYnViYmxpbmcgYmVjYXVzZVxuICAvLyB0aGUgY29tcG9uZW50IGlzIHJlcmVuZGVyZWQgYW5kIHRoZSB2YWx1ZSByZXZlcnRlZCBiZWZvcmUgYWxsIHRoZSBldmVudFxuICAvLyBoYW5kbGVycyBjYW4gcnVuLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MDguXG4gIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhydW5FdmVudEluQmF0Y2gsIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGV2ZW50KSB7XG4gIEV2ZW50UGx1Z2luSHViLmVucXVldWVFdmVudHMoZXZlbnQpO1xuICBFdmVudFBsdWdpbkh1Yi5wcm9jZXNzRXZlbnRRdWV1ZSgpO1xufVxuXG5mdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgodGFyZ2V0LCB0YXJnZXRJRCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SUQgPSB0YXJnZXRJRDtcbiAgYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCgnb25jaGFuZ2UnLCBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KTtcbn1cblxuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbmNoYW5nZScsIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpO1xuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JDaGFuZ2VFdmVudChcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENoYW5nZSkge1xuICAgIHJldHVybiB0b3BMZXZlbFRhcmdldElEO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFOChcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzKSB7XG4gICAgLy8gc3RvcFdhdGNoaW5nKCkgc2hvdWxkIGJlIGEgbm9vcCBoZXJlIGJ1dCB3ZSBjYWxsIGl0IGp1c3QgaW4gY2FzZSB3ZVxuICAgIC8vIG1pc3NlZCBhIGJsdXIgZXZlbnQgc29tZWhvdy5cbiAgICBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpO1xuICAgIHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCh0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCk7XG4gIH0gZWxzZSBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEJsdXIpIHtcbiAgICBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpO1xuICB9XG59XG5cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGlucHV0YCBldmVudFxuICovXG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gZmFsc2U7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIElFOSBjbGFpbXMgdG8gc3VwcG9ydCB0aGUgaW5wdXQgZXZlbnQgYnV0IGZhaWxzIHRvIHRyaWdnZXIgaXQgd2hlblxuICAvLyBkZWxldGluZyB0ZXh0LCBzbyB3ZSBpZ25vcmUgaXRzIGlucHV0IGV2ZW50c1xuICBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPSBpc0V2ZW50U3VwcG9ydGVkKCdpbnB1dCcpICYmIChcbiAgICAoISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOSlcbiAgKTtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFJlcGxhY2VtZW50IGdldHRlci9zZXR0ZXIgZm9yIHRoZSBgdmFsdWVgIHByb3BlcnR5IHRoYXQgZ2V0c1xuICogc2V0IG9uIHRoZSBhY3RpdmUgZWxlbWVudC5cbiAqL1xudmFyIG5ld1ZhbHVlUHJvcCA9ICB7XG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AuZ2V0LmNhbGwodGhpcyk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24odmFsKSB7XG4gICAgLy8gQ2FzdCB0byBhIHN0cmluZyBzbyB3ZSBjYW4gZG8gZXF1YWxpdHkgY2hlY2tzLlxuICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9ICcnICsgdmFsO1xuICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3Auc2V0LmNhbGwodGhpcywgdmFsKTtcbiAgfVxufTtcblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFN0YXJ0cyB0cmFja2luZyBwcm9wZXJ0eWNoYW5nZSBldmVudHMgb24gdGhlIHBhc3NlZC1pbiBlbGVtZW50XG4gKiBhbmQgb3ZlcnJpZGUgdGhlIHZhbHVlIHByb3BlcnR5IHNvIHRoYXQgd2UgY2FuIGRpc3Rpbmd1aXNoIHVzZXIgZXZlbnRzIGZyb21cbiAqIHZhbHVlIGNoYW5nZXMgaW4gSlMuXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSh0YXJnZXQsIHRhcmdldElEKSB7XG4gIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXQ7XG4gIGFjdGl2ZUVsZW1lbnRJRCA9IHRhcmdldElEO1xuICBhY3RpdmVFbGVtZW50VmFsdWUgPSB0YXJnZXQudmFsdWU7XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgIHRhcmdldC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsXG4gICAgJ3ZhbHVlJ1xuICApO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY3RpdmVFbGVtZW50LCAndmFsdWUnLCBuZXdWYWx1ZVByb3ApO1xuICBhY3RpdmVFbGVtZW50LmF0dGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xufVxuXG4vKipcbiAqIChGb3Igb2xkIElFLikgUmVtb3ZlcyB0aGUgZXZlbnQgbGlzdGVuZXJzIGZyb20gdGhlIGN1cnJlbnRseS10cmFja2VkIGVsZW1lbnQsXG4gKiBpZiBhbnkgZXhpc3RzLlxuICovXG5mdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpIHtcbiAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZGVsZXRlIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBwcm9wZXJ0eSBkZWZpbml0aW9uXG4gIGRlbGV0ZSBhY3RpdmVFbGVtZW50LnZhbHVlO1xuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xuXG4gIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50VmFsdWUgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gbnVsbDtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIEhhbmRsZXMgYSBwcm9wZXJ0eWNoYW5nZSBldmVudCwgc2VuZGluZyBhIGBjaGFuZ2VgIGV2ZW50IGlmXG4gKiB0aGUgdmFsdWUgb2YgdGhlIGFjdGl2ZSBlbGVtZW50IGhhcyBjaGFuZ2VkLlxuICovXG5mdW5jdGlvbiBoYW5kbGVQcm9wZXJ0eUNoYW5nZShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICE9PSAndmFsdWUnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciB2YWx1ZSA9IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQudmFsdWU7XG4gIGlmICh2YWx1ZSA9PT0gYWN0aXZlRWxlbWVudFZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IHZhbHVlO1xuXG4gIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpO1xufVxuXG4vKipcbiAqIElmIGEgYGNoYW5nZWAgZXZlbnQgc2hvdWxkIGJlIGZpcmVkLCByZXR1cm5zIHRoZSB0YXJnZXQncyBJRC5cbiAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50KFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wSW5wdXQpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgKGkuZS4sIG5vdCBJRTggb3IgSUU5KSwgdGhlIGlucHV0IGV2ZW50IGlzIGV4YWN0bHlcbiAgICAvLyB3aGF0IHdlIHdhbnQgc28gZmFsbCB0aHJvdWdoIGhlcmUgYW5kIHRyaWdnZXIgYW4gYWJzdHJhY3QgZXZlbnRcbiAgICByZXR1cm4gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgfVxufVxuXG4vLyBGb3IgSUU4IGFuZCBJRTkuXG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUUoXG4gICAgdG9wTGV2ZWxUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0LFxuICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cykge1xuICAgIC8vIEluIElFOCwgd2UgY2FuIGNhcHR1cmUgYWxtb3N0IGFsbCAudmFsdWUgY2hhbmdlcyBieSBhZGRpbmcgYVxuICAgIC8vIHByb3BlcnR5Y2hhbmdlIGhhbmRsZXIgYW5kIGxvb2tpbmcgZm9yIGV2ZW50cyB3aXRoIHByb3BlcnR5TmFtZVxuICAgIC8vIGVxdWFsIHRvICd2YWx1ZSdcbiAgICAvLyBJbiBJRTksIHByb3BlcnR5Y2hhbmdlIGZpcmVzIGZvciBtb3N0IGlucHV0IGV2ZW50cyBidXQgaXMgYnVnZ3kgYW5kXG4gICAgLy8gZG9lc24ndCBmaXJlIHdoZW4gdGV4dCBpcyBkZWxldGVkLCBidXQgY29udmVuaWVudGx5LCBzZWxlY3Rpb25jaGFuZ2VcbiAgICAvLyBhcHBlYXJzIHRvIGZpcmUgaW4gYWxsIG9mIHRoZSByZW1haW5pbmcgY2FzZXMgc28gd2UgY2F0Y2ggdGhvc2UgYW5kXG4gICAgLy8gZm9yd2FyZCB0aGUgZXZlbnQgaWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkXG4gICAgLy8gSW4gZWl0aGVyIGNhc2UsIHdlIGRvbid0IHdhbnQgdG8gY2FsbCB0aGUgZXZlbnQgaGFuZGxlciBpZiB0aGUgdmFsdWVcbiAgICAvLyBpcyBjaGFuZ2VkIGZyb20gSlMgc28gd2UgcmVkZWZpbmUgYSBzZXR0ZXIgZm9yIGAudmFsdWVgIHRoYXQgdXBkYXRlc1xuICAgIC8vIG91ciBhY3RpdmVFbGVtZW50VmFsdWUgdmFyaWFibGUsIGFsbG93aW5nIHVzIHRvIGlnbm9yZSB0aG9zZSBjaGFuZ2VzXG4gICAgLy9cbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKTtcbiAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gIH1cbn1cblxuLy8gRm9yIElFOCBhbmQgSUU5LlxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50SUUoXG4gICAgdG9wTGV2ZWxUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0LFxuICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2UgfHxcbiAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCB8fFxuICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24pIHtcbiAgICAvLyBPbiB0aGUgc2VsZWN0aW9uY2hhbmdlIGV2ZW50LCB0aGUgdGFyZ2V0IGlzIGp1c3QgZG9jdW1lbnQgd2hpY2ggaXNuJ3RcbiAgICAvLyBoZWxwZnVsIGZvciB1cyBzbyBqdXN0IGNoZWNrIGFjdGl2ZUVsZW1lbnQgaW5zdGVhZC5cbiAgICAvL1xuICAgIC8vIDk5JSBvZiB0aGUgdGltZSwga2V5ZG93biBhbmQga2V5dXAgYXJlbid0IG5lY2Vzc2FyeS4gSUU4IGZhaWxzIHRvIGZpcmVcbiAgICAvLyBwcm9wZXJ0eWNoYW5nZSBvbiB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYWZ0ZXIgc2V0dGluZyBgdmFsdWVgIGZyb20gYVxuICAgIC8vIHNjcmlwdCBhbmQgZmlyZXMgb25seSBrZXlkb3duLCBrZXlwcmVzcywga2V5dXAuIENhdGNoaW5nIGtleXVwIHVzdWFsbHlcbiAgICAvLyBnZXRzIGl0IGFuZCBjYXRjaGluZyBrZXlkb3duIGxldHMgdXMgZmlyZSBhbiBldmVudCBmb3IgdGhlIGZpcnN0XG4gICAgLy8ga2V5c3Ryb2tlIGlmIHVzZXIgZG9lcyBhIGtleSByZXBlYXQgKGl0J2xsIGJlIGEgbGl0dGxlIGRlbGF5ZWQ6IHJpZ2h0XG4gICAgLy8gYmVmb3JlIHRoZSBzZWNvbmQga2V5c3Ryb2tlKS4gT3RoZXIgaW5wdXQgbWV0aG9kcyAoZS5nLiwgcGFzdGUpIHNlZW0gdG9cbiAgICAvLyBmaXJlIHNlbGVjdGlvbmNoYW5nZSBub3JtYWxseS5cbiAgICBpZiAoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50LnZhbHVlICE9PSBhY3RpdmVFbGVtZW50VmFsdWUpIHtcbiAgICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IGFjdGl2ZUVsZW1lbnQudmFsdWU7XG4gICAgICByZXR1cm4gYWN0aXZlRWxlbWVudElEO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjbGlja2AgZXZlbnRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXNlQ2xpY2tFdmVudChlbGVtKSB7XG4gIC8vIFVzZSB0aGUgYGNsaWNrYCBldmVudCB0byBkZXRlY3QgY2hhbmdlcyB0byBjaGVja2JveCBhbmQgcmFkaW8gaW5wdXRzLlxuICAvLyBUaGlzIGFwcHJvYWNoIHdvcmtzIGFjcm9zcyBhbGwgYnJvd3NlcnMsIHdoZXJlYXMgYGNoYW5nZWAgZG9lcyBub3QgZmlyZVxuICAvLyB1bnRpbCBgYmx1cmAgaW4gSUU4LlxuICByZXR1cm4gKFxuICAgIGVsZW0ubm9kZU5hbWUgPT09ICdJTlBVVCcgJiZcbiAgICAoZWxlbS50eXBlID09PSAnY2hlY2tib3gnIHx8IGVsZW0udHlwZSA9PT0gJ3JhZGlvJylcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JDbGlja0V2ZW50KFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQ2xpY2spIHtcbiAgICByZXR1cm4gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGNyZWF0ZXMgYW4gYG9uQ2hhbmdlYCBldmVudCB0aGF0IG5vcm1hbGl6ZXMgY2hhbmdlIGV2ZW50c1xuICogYWNyb3NzIGZvcm0gZWxlbWVudHMuIFRoaXMgZXZlbnQgZmlyZXMgYXQgYSB0aW1lIHdoZW4gaXQncyBwb3NzaWJsZSB0b1xuICogY2hhbmdlIHRoZSBlbGVtZW50J3MgdmFsdWUgd2l0aG91dCBzZWVpbmcgYSBmbGlja2VyLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIHNlbGVjdFxuICovXG52YXIgQ2hhbmdlRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG5cbiAgICB2YXIgZ2V0VGFyZ2V0SURGdW5jLCBoYW5kbGVFdmVudEZ1bmM7XG4gICAgaWYgKHNob3VsZFVzZUNoYW5nZUV2ZW50KHRvcExldmVsVGFyZ2V0KSkge1xuICAgICAgaWYgKGRvZXNDaGFuZ2VFdmVudEJ1YmJsZSkge1xuICAgICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvckNoYW5nZUV2ZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9yQ2hhbmdlRXZlbnRJRTg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RleHRJbnB1dEVsZW1lbnQodG9wTGV2ZWxUYXJnZXQpKSB7XG4gICAgICBpZiAoaXNJbnB1dEV2ZW50U3VwcG9ydGVkKSB7XG4gICAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9ySW5wdXRFdmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9ySW5wdXRFdmVudElFO1xuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzaG91bGRVc2VDbGlja0V2ZW50KHRvcExldmVsVGFyZ2V0KSkge1xuICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JDbGlja0V2ZW50O1xuICAgIH1cblxuICAgIGlmIChnZXRUYXJnZXRJREZ1bmMpIHtcbiAgICAgIHZhciB0YXJnZXRJRCA9IGdldFRhcmdldElERnVuYyhcbiAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRFxuICAgICAgKTtcbiAgICAgIGlmICh0YXJnZXRJRCkge1xuICAgICAgICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG4gICAgICAgICAgZXZlbnRUeXBlcy5jaGFuZ2UsXG4gICAgICAgICAgdGFyZ2V0SUQsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKTtcbiAgICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoYW5kbGVFdmVudEZ1bmMpIHtcbiAgICAgIGhhbmRsZUV2ZW50RnVuYyhcbiAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDaGFuZ2VFdmVudFBsdWdpbjtcblxufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6MTYyLFwiLi9FdmVudFBsdWdpbkh1YlwiOjE2NCxcIi4vRXZlbnRQcm9wYWdhdG9yc1wiOjE2NyxcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoxNjgsXCIuL1JlYWN0VXBkYXRlc1wiOjI0NixcIi4vU3ludGhldGljRXZlbnRcIjoyNTUsXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIjoyOTgsXCIuL2lzVGV4dElucHV0RWxlbWVudFwiOjMwMCxcIi4va2V5T2ZcIjozMDR9XSwxNTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENsaWVudFJlYWN0Um9vdEluZGV4XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIG5leHRSZWFjdFJvb3RJbmRleCA9IDA7XG5cbnZhciBDbGllbnRSZWFjdFJvb3RJbmRleCA9IHtcbiAgY3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXh0UmVhY3RSb290SW5kZXgrKztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnRSZWFjdFJvb3RJbmRleDtcblxufSx7fV0sMTU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRE9NQ2hpbGRyZW5PcGVyYXRpb25zXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERhbmdlciA9IHJlcXVpcmUoXCIuL0RhbmdlclwiKTtcbnZhciBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcyA9IHJlcXVpcmUoXCIuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzXCIpO1xuXG52YXIgc2V0VGV4dENvbnRlbnQgPSByZXF1aXJlKFwiLi9zZXRUZXh0Q29udGVudFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogSW5zZXJ0cyBgY2hpbGROb2RlYCBhcyBhIGNoaWxkIG9mIGBwYXJlbnROb2RlYCBhdCB0aGUgYGluZGV4YC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudE5vZGUgUGFyZW50IG5vZGUgaW4gd2hpY2ggdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjaGlsZE5vZGUgQ2hpbGQgbm9kZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpbnNlcnRDaGlsZEF0KHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgaW5kZXgpIHtcbiAgLy8gQnkgZXhwbG9pdGluZyBhcnJheXMgcmV0dXJuaW5nIGB1bmRlZmluZWRgIGZvciBhbiB1bmRlZmluZWQgaW5kZXgsIHdlIGNhblxuICAvLyByZWx5IGV4Y2x1c2l2ZWx5IG9uIGBpbnNlcnRCZWZvcmUobm9kZSwgbnVsbClgIGluc3RlYWQgb2YgYWxzbyB1c2luZ1xuICAvLyBgYXBwZW5kQ2hpbGQobm9kZSlgLiBIb3dldmVyLCB1c2luZyBgdW5kZWZpbmVkYCBpcyBub3QgYWxsb3dlZCBieSBhbGxcbiAgLy8gYnJvd3NlcnMgc28gd2UgbXVzdCByZXBsYWNlIGl0IHdpdGggYG51bGxgLlxuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShcbiAgICBjaGlsZE5vZGUsXG4gICAgcGFyZW50Tm9kZS5jaGlsZE5vZGVzW2luZGV4XSB8fCBudWxsXG4gICk7XG59XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgdXBkYXRpbmcgd2l0aCBET00gY2hpbGRyZW4uXG4gKi9cbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSB7XG5cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IERhbmdlci5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCxcblxuICB1cGRhdGVUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBjb21wb25lbnQncyBjaGlsZHJlbiBieSBwcm9jZXNzaW5nIGEgc2VyaWVzIG9mIHVwZGF0ZXMuIFRoZVxuICAgKiB1cGRhdGUgY29uZmlndXJhdGlvbnMgYXJlIGVhY2ggZXhwZWN0ZWQgdG8gaGF2ZSBhIGBwYXJlbnROb2RlYCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cExpc3QgTGlzdCBvZiBtYXJrdXAgc3RyaW5ncy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm9jZXNzVXBkYXRlczogZnVuY3Rpb24odXBkYXRlcywgbWFya3VwTGlzdCkge1xuICAgIHZhciB1cGRhdGU7XG4gICAgLy8gTWFwcGluZyBmcm9tIHBhcmVudCBJRHMgdG8gaW5pdGlhbCBjaGlsZCBvcmRlcmluZ3MuXG4gICAgdmFyIGluaXRpYWxDaGlsZHJlbiA9IG51bGw7XG4gICAgLy8gTGlzdCBvZiBjaGlsZHJlbiB0aGF0IHdpbGwgYmUgbW92ZWQgb3IgcmVtb3ZlZC5cbiAgICB2YXIgdXBkYXRlZENoaWxkcmVuID0gbnVsbDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXBkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdXBkYXRlID0gdXBkYXRlc1tpXTtcbiAgICAgIGlmICh1cGRhdGUudHlwZSA9PT0gUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORyB8fFxuICAgICAgICAgIHVwZGF0ZS50eXBlID09PSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5SRU1PVkVfTk9ERSkge1xuICAgICAgICB2YXIgdXBkYXRlZEluZGV4ID0gdXBkYXRlLmZyb21JbmRleDtcbiAgICAgICAgdmFyIHVwZGF0ZWRDaGlsZCA9IHVwZGF0ZS5wYXJlbnROb2RlLmNoaWxkTm9kZXNbdXBkYXRlZEluZGV4XTtcbiAgICAgICAgdmFyIHBhcmVudElEID0gdXBkYXRlLnBhcmVudElEO1xuXG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgdXBkYXRlZENoaWxkLFxuICAgICAgICAgICdwcm9jZXNzVXBkYXRlcygpOiBVbmFibGUgdG8gZmluZCBjaGlsZCAlcyBvZiBlbGVtZW50LiBUaGlzICcgK1xuICAgICAgICAgICdwcm9iYWJseSBtZWFucyB0aGUgRE9NIHdhcyB1bmV4cGVjdGVkbHkgbXV0YXRlZCAoZS5nLiwgYnkgdGhlICcgK1xuICAgICAgICAgICdicm93c2VyKSwgdXN1YWxseSBkdWUgdG8gZm9yZ2V0dGluZyBhIDx0Ym9keT4gd2hlbiB1c2luZyB0YWJsZXMsICcgK1xuICAgICAgICAgICduZXN0aW5nIHRhZ3MgbGlrZSA8Zm9ybT4sIDxwPiwgb3IgPGE+LCBvciB1c2luZyBub24tU1ZHIGVsZW1lbnRzICcgK1xuICAgICAgICAgICdpbiBhbiA8c3ZnPiBwYXJlbnQuIFRyeSBpbnNwZWN0aW5nIHRoZSBjaGlsZCBub2RlcyBvZiB0aGUgZWxlbWVudCAnICtcbiAgICAgICAgICAnd2l0aCBSZWFjdCBJRCBgJXNgLicsXG4gICAgICAgICAgdXBkYXRlZEluZGV4LFxuICAgICAgICAgIHBhcmVudElEXG4gICAgICAgICkgOiBpbnZhcmlhbnQodXBkYXRlZENoaWxkKSk7XG5cbiAgICAgICAgaW5pdGlhbENoaWxkcmVuID0gaW5pdGlhbENoaWxkcmVuIHx8IHt9O1xuICAgICAgICBpbml0aWFsQ2hpbGRyZW5bcGFyZW50SURdID0gaW5pdGlhbENoaWxkcmVuW3BhcmVudElEXSB8fCBbXTtcbiAgICAgICAgaW5pdGlhbENoaWxkcmVuW3BhcmVudElEXVt1cGRhdGVkSW5kZXhdID0gdXBkYXRlZENoaWxkO1xuXG4gICAgICAgIHVwZGF0ZWRDaGlsZHJlbiA9IHVwZGF0ZWRDaGlsZHJlbiB8fCBbXTtcbiAgICAgICAgdXBkYXRlZENoaWxkcmVuLnB1c2godXBkYXRlZENoaWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVuZGVyZWRNYXJrdXAgPSBEYW5nZXIuZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAobWFya3VwTGlzdCk7XG5cbiAgICAvLyBSZW1vdmUgdXBkYXRlZCBjaGlsZHJlbiBmaXJzdCBzbyB0aGF0IGB0b0luZGV4YCBpcyBjb25zaXN0ZW50LlxuICAgIGlmICh1cGRhdGVkQ2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdXBkYXRlZENoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHVwZGF0ZWRDaGlsZHJlbltqXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHVwZGF0ZWRDaGlsZHJlbltqXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCB1cGRhdGVzLmxlbmd0aDsgaysrKSB7XG4gICAgICB1cGRhdGUgPSB1cGRhdGVzW2tdO1xuICAgICAgc3dpdGNoICh1cGRhdGUudHlwZSkge1xuICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLklOU0VSVF9NQVJLVVA6XG4gICAgICAgICAgaW5zZXJ0Q2hpbGRBdChcbiAgICAgICAgICAgIHVwZGF0ZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgcmVuZGVyZWRNYXJrdXBbdXBkYXRlLm1hcmt1cEluZGV4XSxcbiAgICAgICAgICAgIHVwZGF0ZS50b0luZGV4XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5NT1ZFX0VYSVNUSU5HOlxuICAgICAgICAgIGluc2VydENoaWxkQXQoXG4gICAgICAgICAgICB1cGRhdGUucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIGluaXRpYWxDaGlsZHJlblt1cGRhdGUucGFyZW50SURdW3VwZGF0ZS5mcm9tSW5kZXhdLFxuICAgICAgICAgICAgdXBkYXRlLnRvSW5kZXhcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlRFWFRfQ09OVEVOVDpcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChcbiAgICAgICAgICAgIHVwZGF0ZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgdXBkYXRlLnRleHRDb250ZW50XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5SRU1PVkVfTk9ERTpcbiAgICAgICAgICAvLyBBbHJlYWR5IHJlbW92ZWQgYnkgdGhlIGZvci1sb29wIGFib3ZlLlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTUNoaWxkcmVuT3BlcmF0aW9ucztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRGFuZ2VyXCI6MTU5LFwiLi9SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc1wiOjIyNSxcIi4vaW52YXJpYW50XCI6Mjk3LFwiLi9zZXRUZXh0Q29udGVudFwiOjMxMixcIl9wcm9jZXNzXCI6MX1dLDE1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERPTVByb3BlcnR5XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbi8qanNsaW50IGJpdHdpc2U6IHRydWUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG5mdW5jdGlvbiBjaGVja01hc2sodmFsdWUsIGJpdG1hc2spIHtcbiAgcmV0dXJuICh2YWx1ZSAmIGJpdG1hc2spID09PSBiaXRtYXNrO1xufVxuXG52YXIgRE9NUHJvcGVydHlJbmplY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbm9ybWFsaXplZCwgY2FtZWxjYXNlZCBwcm9wZXJ0eSBuYW1lcyB0byBhIGNvbmZpZ3VyYXRpb24gdGhhdFxuICAgKiBzcGVjaWZpZXMgaG93IHRoZSBhc3NvY2lhdGVkIERPTSBwcm9wZXJ0eSBzaG91bGQgYmUgYWNjZXNzZWQgb3IgcmVuZGVyZWQuXG4gICAqL1xuICBNVVNUX1VTRV9BVFRSSUJVVEU6IDB4MSxcbiAgTVVTVF9VU0VfUFJPUEVSVFk6IDB4MixcbiAgSEFTX1NJREVfRUZGRUNUUzogMHg0LFxuICBIQVNfQk9PTEVBTl9WQUxVRTogMHg4LFxuICBIQVNfTlVNRVJJQ19WQUxVRTogMHgxMCxcbiAgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUU6IDB4MjAgfCAweDEwLFxuICBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFOiAweDQwLFxuXG4gIC8qKlxuICAgKiBJbmplY3Qgc29tZSBzcGVjaWFsaXplZCBrbm93bGVkZ2UgYWJvdXQgdGhlIERPTS4gVGhpcyB0YWtlcyBhIGNvbmZpZyBvYmplY3RcbiAgICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqIGlzQ3VzdG9tQXR0cmlidXRlOiBmdW5jdGlvbiB0aGF0IGdpdmVuIGFuIGF0dHJpYnV0ZSBuYW1lIHdpbGwgcmV0dXJuIHRydWVcbiAgICogaWYgaXQgY2FuIGJlIGluc2VydGVkIGludG8gdGhlIERPTSB2ZXJiYXRpbS4gVXNlZnVsIGZvciBkYXRhLSogb3IgYXJpYS0qXG4gICAqIGF0dHJpYnV0ZXMgd2hlcmUgaXQncyBpbXBvc3NpYmxlIHRvIGVudW1lcmF0ZSBhbGwgb2YgdGhlIHBvc3NpYmxlXG4gICAqIGF0dHJpYnV0ZSBuYW1lcyxcbiAgICpcbiAgICogUHJvcGVydGllczogb2JqZWN0IG1hcHBpbmcgRE9NIHByb3BlcnR5IG5hbWUgdG8gb25lIG9mIHRoZVxuICAgKiBET01Qcm9wZXJ0eUluamVjdGlvbiBjb25zdGFudHMgb3IgbnVsbC4gSWYgeW91ciBhdHRyaWJ1dGUgaXNuJ3QgaW4gaGVyZSxcbiAgICogaXQgd29uJ3QgZ2V0IHdyaXR0ZW4gdG8gdGhlIERPTS5cbiAgICpcbiAgICogRE9NQXR0cmlidXRlTmFtZXM6IG9iamVjdCBtYXBwaW5nIFJlYWN0IGF0dHJpYnV0ZSBuYW1lIHRvIHRoZSBET01cbiAgICogYXR0cmlidXRlIG5hbWUuIEF0dHJpYnV0ZSBuYW1lcyBub3Qgc3BlY2lmaWVkIHVzZSB0aGUgKipsb3dlcmNhc2UqKlxuICAgKiBub3JtYWxpemVkIG5hbWUuXG4gICAqXG4gICAqIERPTVByb3BlcnR5TmFtZXM6IHNpbWlsYXIgdG8gRE9NQXR0cmlidXRlTmFtZXMgYnV0IGZvciBET00gcHJvcGVydGllcy5cbiAgICogUHJvcGVydHkgbmFtZXMgbm90IHNwZWNpZmllZCB1c2UgdGhlIG5vcm1hbGl6ZWQgbmFtZS5cbiAgICpcbiAgICogRE9NTXV0YXRpb25NZXRob2RzOiBQcm9wZXJ0aWVzIHRoYXQgcmVxdWlyZSBzcGVjaWFsIG11dGF0aW9uIG1ldGhvZHMuIElmXG4gICAqIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLCB0aGUgbXV0YXRpb24gbWV0aG9kIHNob3VsZCB1bnNldCB0aGUgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkb21Qcm9wZXJ0eUNvbmZpZyB0aGUgY29uZmlnIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICovXG4gIGluamVjdERPTVByb3BlcnR5Q29uZmlnOiBmdW5jdGlvbihkb21Qcm9wZXJ0eUNvbmZpZykge1xuICAgIHZhciBQcm9wZXJ0aWVzID0gZG9tUHJvcGVydHlDb25maWcuUHJvcGVydGllcyB8fCB7fTtcbiAgICB2YXIgRE9NQXR0cmlidXRlTmFtZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01BdHRyaWJ1dGVOYW1lcyB8fCB7fTtcbiAgICB2YXIgRE9NUHJvcGVydHlOYW1lcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTVByb3BlcnR5TmFtZXMgfHwge307XG4gICAgdmFyIERPTU11dGF0aW9uTWV0aG9kcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTU11dGF0aW9uTWV0aG9kcyB8fCB7fTtcblxuICAgIGlmIChkb21Qcm9wZXJ0eUNvbmZpZy5pc0N1c3RvbUF0dHJpYnV0ZSkge1xuICAgICAgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLnB1c2goXG4gICAgICAgIGRvbVByb3BlcnR5Q29uZmlnLmlzQ3VzdG9tQXR0cmlidXRlXG4gICAgICApO1xuICAgIH1cblxuICAgIGZvciAodmFyIHByb3BOYW1lIGluIFByb3BlcnRpZXMpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICFET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSksXG4gICAgICAgICdpbmplY3RET01Qcm9wZXJ0eUNvbmZpZyguLi4pOiBZb3VcXCdyZSB0cnlpbmcgdG8gaW5qZWN0IERPTSBwcm9wZXJ0eSAnICtcbiAgICAgICAgJ1xcJyVzXFwnIHdoaWNoIGhhcyBhbHJlYWR5IGJlZW4gaW5qZWN0ZWQuIFlvdSBtYXkgYmUgYWNjaWRlbnRhbGx5ICcgK1xuICAgICAgICAnaW5qZWN0aW5nIHRoZSBzYW1lIERPTSBwcm9wZXJ0eSBjb25maWcgdHdpY2UsIG9yIHlvdSBtYXkgYmUgJyArXG4gICAgICAgICdpbmplY3RpbmcgdHdvIGNvbmZpZ3MgdGhhdCBoYXZlIGNvbmZsaWN0aW5nIHByb3BlcnR5IG5hbWVzLicsXG4gICAgICAgIHByb3BOYW1lXG4gICAgICApIDogaW52YXJpYW50KCFET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpKTtcblxuICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbcHJvcE5hbWVdID0gdHJ1ZTtcblxuICAgICAgdmFyIGxvd2VyQ2FzZWQgPSBwcm9wTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZF0gPSBwcm9wTmFtZTtcblxuICAgICAgaWYgKERPTUF0dHJpYnV0ZU5hbWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IERPTUF0dHJpYnV0ZU5hbWVzW3Byb3BOYW1lXTtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbYXR0cmlidXRlTmFtZV0gPSBwcm9wTmFtZTtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0QXR0cmlidXRlTmFtZVtwcm9wTmFtZV0gPSBhdHRyaWJ1dGVOYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0QXR0cmlidXRlTmFtZVtwcm9wTmFtZV0gPSBsb3dlckNhc2VkO1xuICAgICAgfVxuXG4gICAgICBET01Qcm9wZXJ0eS5nZXRQcm9wZXJ0eU5hbWVbcHJvcE5hbWVdID1cbiAgICAgICAgRE9NUHJvcGVydHlOYW1lcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgP1xuICAgICAgICAgIERPTVByb3BlcnR5TmFtZXNbcHJvcE5hbWVdIDpcbiAgICAgICAgICBwcm9wTmFtZTtcblxuICAgICAgaWYgKERPTU11dGF0aW9uTWV0aG9kcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0TXV0YXRpb25NZXRob2RbcHJvcE5hbWVdID0gRE9NTXV0YXRpb25NZXRob2RzW3Byb3BOYW1lXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIERPTVByb3BlcnR5LmdldE11dGF0aW9uTWV0aG9kW3Byb3BOYW1lXSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wQ29uZmlnID0gUHJvcGVydGllc1twcm9wTmFtZV07XG4gICAgICBET01Qcm9wZXJ0eS5tdXN0VXNlQXR0cmlidXRlW3Byb3BOYW1lXSA9XG4gICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5NVVNUX1VTRV9BVFRSSUJVVEUpO1xuICAgICAgRE9NUHJvcGVydHkubXVzdFVzZVByb3BlcnR5W3Byb3BOYW1lXSA9XG4gICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5NVVNUX1VTRV9QUk9QRVJUWSk7XG4gICAgICBET01Qcm9wZXJ0eS5oYXNTaWRlRWZmZWN0c1twcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX1NJREVfRUZGRUNUUyk7XG4gICAgICBET01Qcm9wZXJ0eS5oYXNCb29sZWFuVmFsdWVbcHJvcE5hbWVdID1cbiAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLkhBU19CT09MRUFOX1ZBTFVFKTtcbiAgICAgIERPTVByb3BlcnR5Lmhhc051bWVyaWNWYWx1ZVtwcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX05VTUVSSUNfVkFMVUUpO1xuICAgICAgRE9NUHJvcGVydHkuaGFzUG9zaXRpdmVOdW1lcmljVmFsdWVbcHJvcE5hbWVdID1cbiAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFKTtcbiAgICAgIERPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbcHJvcE5hbWVdID1cbiAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUpO1xuXG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAhRE9NUHJvcGVydHkubXVzdFVzZUF0dHJpYnV0ZVtwcm9wTmFtZV0gfHxcbiAgICAgICAgICAhRE9NUHJvcGVydHkubXVzdFVzZVByb3BlcnR5W3Byb3BOYW1lXSxcbiAgICAgICAgJ0RPTVByb3BlcnR5OiBDYW5ub3QgcmVxdWlyZSB1c2luZyBib3RoIGF0dHJpYnV0ZSBhbmQgcHJvcGVydHk6ICVzJyxcbiAgICAgICAgcHJvcE5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQoIURPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbcHJvcE5hbWVdIHx8XG4gICAgICAgICFET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdKSk7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdIHx8XG4gICAgICAgICAgIURPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW3Byb3BOYW1lXSxcbiAgICAgICAgJ0RPTVByb3BlcnR5OiBQcm9wZXJ0aWVzIHRoYXQgaGF2ZSBzaWRlIGVmZmVjdHMgbXVzdCB1c2UgcHJvcGVydHk6ICVzJyxcbiAgICAgICAgcHJvcE5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQoRE9NUHJvcGVydHkubXVzdFVzZVByb3BlcnR5W3Byb3BOYW1lXSB8fFxuICAgICAgICAhRE9NUHJvcGVydHkuaGFzU2lkZUVmZmVjdHNbcHJvcE5hbWVdKSk7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAhIURPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gK1xuICAgICAgICAgICEhRE9NUHJvcGVydHkuaGFzTnVtZXJpY1ZhbHVlW3Byb3BOYW1lXSArXG4gICAgICAgICAgISFET01Qcm9wZXJ0eS5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlW3Byb3BOYW1lXSA8PSAxLFxuICAgICAgICAnRE9NUHJvcGVydHk6IFZhbHVlIGNhbiBiZSBvbmUgb2YgYm9vbGVhbiwgb3ZlcmxvYWRlZCBib29sZWFuLCBvciAnICtcbiAgICAgICAgJ251bWVyaWMgdmFsdWUsIGJ1dCBub3QgYSBjb21iaW5hdGlvbjogJXMnLFxuICAgICAgICBwcm9wTmFtZVxuICAgICAgKSA6IGludmFyaWFudCghIURPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gK1xuICAgICAgICAhIURPTVByb3BlcnR5Lmhhc051bWVyaWNWYWx1ZVtwcm9wTmFtZV0gK1xuICAgICAgICAhIURPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbcHJvcE5hbWVdIDw9IDEpKTtcbiAgICB9XG4gIH1cbn07XG52YXIgZGVmYXVsdFZhbHVlQ2FjaGUgPSB7fTtcblxuLyoqXG4gKiBET01Qcm9wZXJ0eSBleHBvcnRzIGxvb2t1cCBvYmplY3RzIHRoYXQgY2FuIGJlIHVzZWQgbGlrZSBmdW5jdGlvbnM6XG4gKlxuICogICA+IERPTVByb3BlcnR5LmlzVmFsaWRbJ2lkJ11cbiAqICAgdHJ1ZVxuICogICA+IERPTVByb3BlcnR5LmlzVmFsaWRbJ2Zvb2JhciddXG4gKiAgIHVuZGVmaW5lZFxuICpcbiAqIEFsdGhvdWdoIHRoaXMgbWF5IGJlIGNvbmZ1c2luZywgaXQgcGVyZm9ybXMgYmV0dGVyIGluIGdlbmVyYWwuXG4gKlxuICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9rZXktZXhpc3RzXG4gKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2tleS1taXNzaW5nXG4gKi9cbnZhciBET01Qcm9wZXJ0eSA9IHtcblxuICBJRF9BVFRSSUJVVEVfTkFNRTogJ2RhdGEtcmVhY3RpZCcsXG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIGEgcHJvcGVydHkgbmFtZSBpcyBhIHN0YW5kYXJkIHByb3BlcnR5LlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaXNTdGFuZGFyZE5hbWU6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbG93ZXJjYXNlIHByb3BlcnR5IG5hbWVzIHRvIHRoZSBwcm9wZXJseSBjYXNlZCB2ZXJzaW9uLCB1c2VkXG4gICAqIHRvIHdhcm4gaW4gdGhlIGNhc2Ugb2YgbWlzc2luZyBwcm9wZXJ0aWVzLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0UG9zc2libGVTdGFuZGFyZE5hbWU6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbm9ybWFsaXplZCBuYW1lcyB0byBhdHRyaWJ1dGUgbmFtZXMgdGhhdCBkaWZmZXIuIEF0dHJpYnV0ZVxuICAgKiBuYW1lcyBhcmUgdXNlZCB3aGVuIHJlbmRlcmluZyBtYXJrdXAgb3Igd2l0aCBgKkF0dHJpYnV0ZSgpYC5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGdldEF0dHJpYnV0ZU5hbWU6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbm9ybWFsaXplZCBuYW1lcyB0byBwcm9wZXJ0aWVzIG9uIERPTSBub2RlIGluc3RhbmNlcy5cbiAgICogKFRoaXMgaW5jbHVkZXMgcHJvcGVydGllcyB0aGF0IG11dGF0ZSBkdWUgdG8gZXh0ZXJuYWwgZmFjdG9ycy4pXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBnZXRQcm9wZXJ0eU5hbWU6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbm9ybWFsaXplZCBuYW1lcyB0byBtdXRhdGlvbiBtZXRob2RzLiBUaGlzIHdpbGwgb25seSBleGlzdCBpZlxuICAgKiBtdXRhdGlvbiBjYW5ub3QgYmUgc2V0IHNpbXBseSBieSB0aGUgcHJvcGVydHkgb3IgYHNldEF0dHJpYnV0ZSgpYC5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGdldE11dGF0aW9uTWV0aG9kOiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBhY2Nlc3NlZCBhbmQgbXV0YXRlZCBhcyBhbiBvYmplY3QgcHJvcGVydHkuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBtdXN0VXNlQXR0cmlidXRlOiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBhY2Nlc3NlZCBhbmQgbXV0YXRlZCB1c2luZyBgKkF0dHJpYnV0ZSgpYC5cbiAgICogKFRoaXMgaW5jbHVkZXMgYW55dGhpbmcgdGhhdCBmYWlscyBgPHByb3BOYW1lPiBpbiA8ZWxlbWVudD5gLilcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIG11c3RVc2VQcm9wZXJ0eToge30sXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHNldHRpbmcgYSB2YWx1ZSBjYXVzZXMgc2lkZSBlZmZlY3RzIHN1Y2ggYXMgdHJpZ2dlcmluZ1xuICAgKiByZXNvdXJjZXMgdG8gYmUgbG9hZGVkIG9yIHRleHQgc2VsZWN0aW9uIGNoYW5nZXMuIFdlIG11c3QgZW5zdXJlIHRoYXRcbiAgICogdGhlIHZhbHVlIGlzIG9ubHkgc2V0IGlmIGl0IGhhcyBjaGFuZ2VkLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaGFzU2lkZUVmZmVjdHM6IHt9LFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGhhc0Jvb2xlYW5WYWx1ZToge30sXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHByb3BlcnR5IG11c3QgYmUgbnVtZXJpYyBvciBwYXJzZSBhcyBhXG4gICAqIG51bWVyaWMgYW5kIHNob3VsZCBiZSByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaGFzTnVtZXJpY1ZhbHVlOiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBwb3NpdGl2ZSBudW1lcmljIG9yIHBhcnNlIGFzIGEgcG9zaXRpdmVcbiAgICogbnVtZXJpYyBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgd2hlbiBzZXQgdG8gYSBmYWxzZXkgdmFsdWUuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZToge30sXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHByb3BlcnR5IGNhbiBiZSB1c2VkIGFzIGEgZmxhZyBhcyB3ZWxsIGFzIHdpdGggYSB2YWx1ZS4gUmVtb3ZlZFxuICAgKiB3aGVuIHN0cmljdGx5IGVxdWFsIHRvIGZhbHNlOyBwcmVzZW50IHdpdGhvdXQgYSB2YWx1ZSB3aGVuIHN0cmljdGx5IGVxdWFsXG4gICAqIHRvIHRydWU7IHByZXNlbnQgd2l0aCBhIHZhbHVlIG90aGVyd2lzZS5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6IHt9LFxuXG4gIC8qKlxuICAgKiBBbGwgb2YgdGhlIGlzQ3VzdG9tQXR0cmlidXRlKCkgZnVuY3Rpb25zIHRoYXQgaGF2ZSBiZWVuIGluamVjdGVkLlxuICAgKi9cbiAgX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zOiBbXSxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgYSBwcm9wZXJ0eSBuYW1lIGlzIGEgY3VzdG9tIGF0dHJpYnV0ZS5cbiAgICogQG1ldGhvZFxuICAgKi9cbiAgaXNDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlzQ3VzdG9tQXR0cmlidXRlRm4gPSBET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnNbaV07XG4gICAgICBpZiAoaXNDdXN0b21BdHRyaWJ1dGVGbihhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkZWZhdWx0IHByb3BlcnR5IHZhbHVlIGZvciBhIERPTSBwcm9wZXJ0eSAoaS5lLiwgbm90IGFuXG4gICAqIGF0dHJpYnV0ZSkuIE1vc3QgZGVmYXVsdCB2YWx1ZXMgYXJlICcnIG9yIGZhbHNlLCBidXQgbm90IGFsbC4gV29yc2UgeWV0LFxuICAgKiBzb21lIChpbiBwYXJ0aWN1bGFyLCBgdHlwZWApIHZhcnkgZGVwZW5kaW5nIG9uIHRoZSB0eXBlIG9mIGVsZW1lbnQuXG4gICAqXG4gICAqIFRPRE86IElzIGl0IGJldHRlciB0byBncmFiIGFsbCB0aGUgcG9zc2libGUgcHJvcGVydGllcyB3aGVuIGNyZWF0aW5nIGFuXG4gICAqIGVsZW1lbnQgdG8gYXZvaWQgaGF2aW5nIHRvIGNyZWF0ZSB0aGUgc2FtZSBlbGVtZW50IHR3aWNlP1xuICAgKi9cbiAgZ2V0RGVmYXVsdFZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5vZGVOYW1lLCBwcm9wKSB7XG4gICAgdmFyIG5vZGVEZWZhdWx0cyA9IGRlZmF1bHRWYWx1ZUNhY2hlW25vZGVOYW1lXTtcbiAgICB2YXIgdGVzdEVsZW1lbnQ7XG4gICAgaWYgKCFub2RlRGVmYXVsdHMpIHtcbiAgICAgIGRlZmF1bHRWYWx1ZUNhY2hlW25vZGVOYW1lXSA9IG5vZGVEZWZhdWx0cyA9IHt9O1xuICAgIH1cbiAgICBpZiAoIShwcm9wIGluIG5vZGVEZWZhdWx0cykpIHtcbiAgICAgIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlTmFtZSk7XG4gICAgICBub2RlRGVmYXVsdHNbcHJvcF0gPSB0ZXN0RWxlbWVudFtwcm9wXTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVEZWZhdWx0c1twcm9wXTtcbiAgfSxcblxuICBpbmplY3Rpb246IERPTVByb3BlcnR5SW5qZWN0aW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVByb3BlcnR5O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9pbnZhcmlhbnRcIjoyOTcsXCJfcHJvY2Vzc1wiOjF9XSwxNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBET01Qcm9wZXJ0eU9wZXJhdGlvbnNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcblxudmFyIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyID0gcmVxdWlyZShcIi4vcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXJcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbmZ1bmN0aW9uIHNob3VsZElnbm9yZVZhbHVlKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsIHx8XG4gICAgKERPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtuYW1lXSAmJiAhdmFsdWUpIHx8XG4gICAgKERPTVByb3BlcnR5Lmhhc051bWVyaWNWYWx1ZVtuYW1lXSAmJiBpc05hTih2YWx1ZSkpIHx8XG4gICAgKERPTVByb3BlcnR5Lmhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlW25hbWVdICYmICh2YWx1ZSA8IDEpKSB8fFxuICAgIChET01Qcm9wZXJ0eS5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlW25hbWVdICYmIHZhbHVlID09PSBmYWxzZSk7XG59XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgdmFyIHJlYWN0UHJvcHMgPSB7XG4gICAgY2hpbGRyZW46IHRydWUsXG4gICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHRydWUsXG4gICAga2V5OiB0cnVlLFxuICAgIHJlZjogdHJ1ZVxuICB9O1xuICB2YXIgd2FybmVkUHJvcGVydGllcyA9IHt9O1xuXG4gIHZhciB3YXJuVW5rbm93blByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmIChyZWFjdFByb3BzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHJlYWN0UHJvcHNbbmFtZV0gfHxcbiAgICAgICAgd2FybmVkUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkUHJvcGVydGllc1tuYW1lXSA9IHRydWU7XG4gICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gZGF0YS0qIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGxvd2VyY2FzZTsgc3VnZ2VzdCB0aGUgbG93ZXJjYXNlIHZlcnNpb25cbiAgICB2YXIgc3RhbmRhcmROYW1lID0gKFxuICAgICAgRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobG93ZXJDYXNlZE5hbWUpID9cbiAgICAgICAgbG93ZXJDYXNlZE5hbWUgOlxuICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpID9cbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZE5hbWVdIDpcbiAgICAgICAgbnVsbFxuICAgICk7XG5cbiAgICAvLyBGb3Igbm93LCBvbmx5IHdhcm4gd2hlbiB3ZSBoYXZlIGEgc3VnZ2VzdGVkIGNvcnJlY3Rpb24uIFRoaXMgcHJldmVudHNcbiAgICAvLyBsb2dnaW5nIHRvbyBtdWNoIHdoZW4gdXNpbmcgdHJhbnNmZXJQcm9wc1RvLlxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgc3RhbmRhcmROYW1lID09IG51bGwsXG4gICAgICAnVW5rbm93biBET00gcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8nLFxuICAgICAgbmFtZSxcbiAgICAgIHN0YW5kYXJkTmFtZVxuICAgICkgOiBudWxsKTtcblxuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBET00gcHJvcGVydGllcy5cbiAqL1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBJRCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFVuZXNjYXBlZCBJRC5cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgc3RyaW5nLlxuICAgKi9cbiAgY3JlYXRlTWFya3VwRm9ySUQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgcmV0dXJuIERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FICsgJz0nICtcbiAgICAgIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKGlkKTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIGEgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHJldHVybiB7P3N0cmluZ30gTWFya3VwIHN0cmluZywgb3IgbnVsbCBpZiB0aGUgcHJvcGVydHkgd2FzIGludmFsaWQuXG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eTogZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbbmFtZV0pIHtcbiAgICAgIGlmIChzaG91bGRJZ25vcmVWYWx1ZShuYW1lLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW25hbWVdO1xuICAgICAgaWYgKERPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtuYW1lXSB8fFxuICAgICAgICAgIChET01Qcm9wZXJ0eS5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlW25hbWVdICYmIHZhbHVlID09PSB0cnVlKSkge1xuICAgICAgICByZXR1cm4gYXR0cmlidXRlTmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhdHRyaWJ1dGVOYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB3YXJuVW5rbm93blByb3BlcnR5KG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgZm9yIGEgcHJvcGVydHkgb24gYSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKi9cbiAgc2V0VmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24obm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbbmFtZV0pIHtcbiAgICAgIHZhciBtdXRhdGlvbk1ldGhvZCA9IERPTVByb3BlcnR5LmdldE11dGF0aW9uTWV0aG9kW25hbWVdO1xuICAgICAgaWYgKG11dGF0aW9uTWV0aG9kKSB7XG4gICAgICAgIG11dGF0aW9uTWV0aG9kKG5vZGUsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkSWdub3JlVmFsdWUobmFtZSwgdmFsdWUpKSB7XG4gICAgICAgIHRoaXMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkubXVzdFVzZUF0dHJpYnV0ZVtuYW1lXSkge1xuICAgICAgICAvLyBgc2V0QXR0cmlidXRlYCB3aXRoIG9iamVjdHMgYmVjb21lcyBvbmx5IGBbb2JqZWN0XWAgaW4gSUU4LzksXG4gICAgICAgIC8vICgnJyArIHZhbHVlKSBtYWtlcyBpdCBvdXRwdXQgdGhlIGNvcnJlY3QgdG9TdHJpbmcoKS12YWx1ZS5cbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoRE9NUHJvcGVydHkuZ2V0QXR0cmlidXRlTmFtZVtuYW1lXSwgJycgKyB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSBET01Qcm9wZXJ0eS5nZXRQcm9wZXJ0eU5hbWVbbmFtZV07XG4gICAgICAgIC8vIE11c3QgZXhwbGljaXRseSBjYXN0IHZhbHVlcyBmb3IgSEFTX1NJREVfRUZGRUNUUy1wcm9wZXJ0aWVzIHRvIHRoZVxuICAgICAgICAvLyBwcm9wZXJ0eSB0eXBlIGJlZm9yZSBjb21wYXJpbmc7IG9ubHkgYHZhbHVlYCBkb2VzIGFuZCBpcyBzdHJpbmcuXG4gICAgICAgIGlmICghRE9NUHJvcGVydHkuaGFzU2lkZUVmZmVjdHNbbmFtZV0gfHxcbiAgICAgICAgICAgICgnJyArIG5vZGVbcHJvcE5hbWVdKSAhPT0gKCcnICsgdmFsdWUpKSB7XG4gICAgICAgICAgLy8gQ29udHJhcnkgdG8gYHNldEF0dHJpYnV0ZWAsIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBwcm9wZXJseVxuICAgICAgICAgIC8vIGB0b1N0cmluZ2BlZCBieSBJRTgvOS5cbiAgICAgICAgICBub2RlW3Byb3BOYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCAnJyArIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgdGhlIHZhbHVlIGZvciBhIHByb3BlcnR5IG9uIGEgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqL1xuICBkZWxldGVWYWx1ZUZvclByb3BlcnR5OiBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gICAgaWYgKERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgIERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lW25hbWVdKSB7XG4gICAgICB2YXIgbXV0YXRpb25NZXRob2QgPSBET01Qcm9wZXJ0eS5nZXRNdXRhdGlvbk1ldGhvZFtuYW1lXTtcbiAgICAgIGlmIChtdXRhdGlvbk1ldGhvZCkge1xuICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB1bmRlZmluZWQpO1xuICAgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5tdXN0VXNlQXR0cmlidXRlW25hbWVdKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKERPTVByb3BlcnR5LmdldEF0dHJpYnV0ZU5hbWVbbmFtZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gRE9NUHJvcGVydHkuZ2V0UHJvcGVydHlOYW1lW25hbWVdO1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gRE9NUHJvcGVydHkuZ2V0RGVmYXVsdFZhbHVlRm9yUHJvcGVydHkoXG4gICAgICAgICAgbm9kZS5ub2RlTmFtZSxcbiAgICAgICAgICBwcm9wTmFtZVxuICAgICAgICApO1xuICAgICAgICBpZiAoIURPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW25hbWVdIHx8XG4gICAgICAgICAgICAoJycgKyBub2RlW3Byb3BOYW1lXSkgIT09IGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfSBlbHNlIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHdhcm5Vbmtub3duUHJvcGVydHkobmFtZSk7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NUHJvcGVydHlPcGVyYXRpb25zO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9ET01Qcm9wZXJ0eVwiOjE1NyxcIi4vcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXJcIjozMTAsXCIuL3dhcm5pbmdcIjozMTgsXCJfcHJvY2Vzc1wiOjF9XSwxNTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEYW5nZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSwgc3ViOiB0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgPSByZXF1aXJlKFwiLi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXBcIik7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG52YXIgZ2V0TWFya3VwV3JhcCA9IHJlcXVpcmUoXCIuL2dldE1hcmt1cFdyYXBcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgT1BFTl9UQUdfTkFNRV9FWFAgPSAvXig8W14gXFwvPl0rKS87XG52YXIgUkVTVUxUX0lOREVYX0FUVFIgPSAnZGF0YS1kYW5nZXItaW5kZXgnO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBgbm9kZU5hbWVgIGZyb20gYSBzdHJpbmcgb2YgbWFya3VwLlxuICpcbiAqIE5PVEU6IEV4dHJhY3RpbmcgdGhlIGBub2RlTmFtZWAgZG9lcyBub3QgcmVxdWlyZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBtYXRjaFxuICogYmVjYXVzZSB3ZSBtYWtlIGFzc3VtcHRpb25zIGFib3V0IFJlYWN0LWdlbmVyYXRlZCBtYXJrdXAgKGkuZS4gdGhlcmUgYXJlIG5vXG4gKiBzcGFjZXMgc3Vycm91bmRpbmcgdGhlIG9wZW5pbmcgdGFnIGFuZCB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgYXR0cmlidXRlKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIFN0cmluZyBvZiBtYXJrdXAuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vZGUgbmFtZSBvZiB0aGUgc3VwcGxpZWQgbWFya3VwLlxuICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9leHRyYWN0LW5vZGVuYW1lXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVOYW1lKG1hcmt1cCkge1xuICByZXR1cm4gbWFya3VwLnN1YnN0cmluZygxLCBtYXJrdXAuaW5kZXhPZignICcpKTtcbn1cblxudmFyIERhbmdlciA9IHtcblxuICAvKipcbiAgICogUmVuZGVycyBtYXJrdXAgaW50byBhbiBhcnJheSBvZiBub2Rlcy4gVGhlIG1hcmt1cCBpcyBleHBlY3RlZCB0byByZW5kZXJcbiAgICogaW50byBhIGxpc3Qgb2Ygcm9vdCBub2Rlcy4gQWxzbywgdGhlIGxlbmd0aCBvZiBgcmVzdWx0TGlzdGAgYW5kXG4gICAqIGBtYXJrdXBMaXN0YCBzaG91bGQgYmUgdGhlIHNhbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gbWFya3VwTGlzdCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzIHRvIHJlbmRlci5cbiAgICogQHJldHVybiB7YXJyYXk8RE9NRWxlbWVudD59IExpc3Qgb2YgcmVuZGVyZWQgbm9kZXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXA6IGZ1bmN0aW9uKG1hcmt1cExpc3QpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NLFxuICAgICAgJ2Rhbmdlcm91c2x5UmVuZGVyTWFya3VwKC4uLik6IENhbm5vdCByZW5kZXIgbWFya3VwIGluIGEgd29ya2VyICcgK1xuICAgICAgJ3RocmVhZC4gTWFrZSBzdXJlIGB3aW5kb3dgIGFuZCBgZG9jdW1lbnRgIGFyZSBhdmFpbGFibGUgZ2xvYmFsbHkgJyArXG4gICAgICAnYmVmb3JlIHJlcXVpcmluZyBSZWFjdCB3aGVuIHVuaXQgdGVzdGluZyBvciB1c2UgJyArXG4gICAgICAnUmVhY3QucmVuZGVyVG9TdHJpbmcgZm9yIHNlcnZlciByZW5kZXJpbmcuJ1xuICAgICkgOiBpbnZhcmlhbnQoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSk7XG4gICAgdmFyIG5vZGVOYW1lO1xuICAgIHZhciBtYXJrdXBCeU5vZGVOYW1lID0ge307XG4gICAgLy8gR3JvdXAgbWFya3VwIGJ5IGBub2RlTmFtZWAgaWYgYSB3cmFwIGlzIG5lY2Vzc2FyeSwgZWxzZSBieSAnKicuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrdXBMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBtYXJrdXBMaXN0W2ldLFxuICAgICAgICAnZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAoLi4uKTogTWlzc2luZyBtYXJrdXAuJ1xuICAgICAgKSA6IGludmFyaWFudChtYXJrdXBMaXN0W2ldKSk7XG4gICAgICBub2RlTmFtZSA9IGdldE5vZGVOYW1lKG1hcmt1cExpc3RbaV0pO1xuICAgICAgbm9kZU5hbWUgPSBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKSA/IG5vZGVOYW1lIDogJyonO1xuICAgICAgbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV0gPSBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXSB8fCBbXTtcbiAgICAgIG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdW2ldID0gbWFya3VwTGlzdFtpXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdExpc3QgPSBbXTtcbiAgICB2YXIgcmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCA9IDA7XG4gICAgZm9yIChub2RlTmFtZSBpbiBtYXJrdXBCeU5vZGVOYW1lKSB7XG4gICAgICBpZiAoIW1hcmt1cEJ5Tm9kZU5hbWUuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIG1hcmt1cExpc3RCeU5vZGVOYW1lID0gbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV07XG5cbiAgICAgIC8vIFRoaXMgZm9yLWluIGxvb3Agc2tpcHMgdGhlIGhvbGVzIG9mIHRoZSBzcGFyc2UgYXJyYXkuIFRoZSBvcmRlciBvZlxuICAgICAgLy8gaXRlcmF0aW9uIHNob3VsZCBmb2xsb3cgdGhlIG9yZGVyIG9mIGFzc2lnbm1lbnQsIHdoaWNoIGhhcHBlbnMgdG8gbWF0Y2hcbiAgICAgIC8vIG51bWVyaWNhbCBpbmRleCBvcmRlciwgYnV0IHdlIGRvbid0IHJlbHkgb24gdGhhdC5cbiAgICAgIHZhciByZXN1bHRJbmRleDtcbiAgICAgIGZvciAocmVzdWx0SW5kZXggaW4gbWFya3VwTGlzdEJ5Tm9kZU5hbWUpIHtcbiAgICAgICAgaWYgKG1hcmt1cExpc3RCeU5vZGVOYW1lLmhhc093blByb3BlcnR5KHJlc3VsdEluZGV4KSkge1xuICAgICAgICAgIHZhciBtYXJrdXAgPSBtYXJrdXBMaXN0QnlOb2RlTmFtZVtyZXN1bHRJbmRleF07XG5cbiAgICAgICAgICAvLyBQdXNoIHRoZSByZXF1ZXN0ZWQgbWFya3VwIHdpdGggYW4gYWRkaXRpb25hbCBSRVNVTFRfSU5ERVhfQVRUUlxuICAgICAgICAgIC8vIGF0dHJpYnV0ZS4gIElmIHRoZSBtYXJrdXAgZG9lcyBub3Qgc3RhcnQgd2l0aCBhIDwgY2hhcmFjdGVyLCBpdFxuICAgICAgICAgIC8vIHdpbGwgYmUgZGlzY2FyZGVkIGJlbG93ICh3aXRoIGFuIGFwcHJvcHJpYXRlIGNvbnNvbGUuZXJyb3IpLlxuICAgICAgICAgIG1hcmt1cExpc3RCeU5vZGVOYW1lW3Jlc3VsdEluZGV4XSA9IG1hcmt1cC5yZXBsYWNlKFxuICAgICAgICAgICAgT1BFTl9UQUdfTkFNRV9FWFAsXG4gICAgICAgICAgICAvLyBUaGlzIGluZGV4IHdpbGwgYmUgcGFyc2VkIGJhY2sgb3V0IGJlbG93LlxuICAgICAgICAgICAgJyQxICcgKyBSRVNVTFRfSU5ERVhfQVRUUiArICc9XCInICsgcmVzdWx0SW5kZXggKyAnXCIgJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVuZGVyIGVhY2ggZ3JvdXAgb2YgbWFya3VwIHdpdGggc2ltaWxhciB3cmFwcGluZyBgbm9kZU5hbWVgLlxuICAgICAgdmFyIHJlbmRlck5vZGVzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwKFxuICAgICAgICBtYXJrdXBMaXN0QnlOb2RlTmFtZS5qb2luKCcnKSxcbiAgICAgICAgZW1wdHlGdW5jdGlvbiAvLyBEbyBub3RoaW5nIHNwZWNpYWwgd2l0aCA8c2NyaXB0PiB0YWdzLlxuICAgICAgKTtcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByZW5kZXJOb2Rlcy5sZW5ndGg7ICsraikge1xuICAgICAgICB2YXIgcmVuZGVyTm9kZSA9IHJlbmRlck5vZGVzW2pdO1xuICAgICAgICBpZiAocmVuZGVyTm9kZS5oYXNBdHRyaWJ1dGUgJiZcbiAgICAgICAgICAgIHJlbmRlck5vZGUuaGFzQXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKSkge1xuXG4gICAgICAgICAgcmVzdWx0SW5kZXggPSArcmVuZGVyTm9kZS5nZXRBdHRyaWJ1dGUoUkVTVUxUX0lOREVYX0FUVFIpO1xuICAgICAgICAgIHJlbmRlck5vZGUucmVtb3ZlQXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKTtcblxuICAgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgICAhcmVzdWx0TGlzdC5oYXNPd25Qcm9wZXJ0eShyZXN1bHRJbmRleCksXG4gICAgICAgICAgICAnRGFuZ2VyOiBBc3NpZ25pbmcgdG8gYW4gYWxyZWFkeS1vY2N1cGllZCByZXN1bHQgaW5kZXguJ1xuICAgICAgICAgICkgOiBpbnZhcmlhbnQoIXJlc3VsdExpc3QuaGFzT3duUHJvcGVydHkocmVzdWx0SW5kZXgpKSk7XG5cbiAgICAgICAgICByZXN1bHRMaXN0W3Jlc3VsdEluZGV4XSA9IHJlbmRlck5vZGU7XG5cbiAgICAgICAgICAvLyBUaGlzIHNob3VsZCBtYXRjaCByZXN1bHRMaXN0Lmxlbmd0aCBhbmQgbWFya3VwTGlzdC5sZW5ndGggd2hlblxuICAgICAgICAgIC8vIHdlJ3JlIGRvbmUuXG4gICAgICAgICAgcmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCArPSAxO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICdEYW5nZXI6IERpc2NhcmRpbmcgdW5leHBlY3RlZCBub2RlOicsXG4gICAgICAgICAgICByZW5kZXJOb2RlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFsdGhvdWdoIHJlc3VsdExpc3Qgd2FzIHBvcHVsYXRlZCBvdXQgb2Ygb3JkZXIsIGl0IHNob3VsZCBub3cgYmUgYSBkZW5zZVxuICAgIC8vIGFycmF5LlxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICByZXN1bHRMaXN0QXNzaWdubWVudENvdW50ID09PSByZXN1bHRMaXN0Lmxlbmd0aCxcbiAgICAgICdEYW5nZXI6IERpZCBub3QgYXNzaWduIHRvIGV2ZXJ5IGluZGV4IG9mIHJlc3VsdExpc3QuJ1xuICAgICkgOiBpbnZhcmlhbnQocmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCA9PT0gcmVzdWx0TGlzdC5sZW5ndGgpKTtcblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICByZXN1bHRMaXN0Lmxlbmd0aCA9PT0gbWFya3VwTGlzdC5sZW5ndGgsXG4gICAgICAnRGFuZ2VyOiBFeHBlY3RlZCBtYXJrdXAgdG8gcmVuZGVyICVzIG5vZGVzLCBidXQgcmVuZGVyZWQgJXMuJyxcbiAgICAgIG1hcmt1cExpc3QubGVuZ3RoLFxuICAgICAgcmVzdWx0TGlzdC5sZW5ndGhcbiAgICApIDogaW52YXJpYW50KHJlc3VsdExpc3QubGVuZ3RoID09PSBtYXJrdXBMaXN0Lmxlbmd0aCkpO1xuXG4gICAgcmV0dXJuIHJlc3VsdExpc3Q7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGEgbm9kZSB3aXRoIGEgc3RyaW5nIG9mIG1hcmt1cCBhdCBpdHMgY3VycmVudCBwb3NpdGlvbiB3aXRoaW4gaXRzXG4gICAqIHBhcmVudC4gVGhlIG1hcmt1cCBtdXN0IHJlbmRlciBpbnRvIGEgc2luZ2xlIHJvb3Qgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBvbGRDaGlsZCBDaGlsZCBub2RlIHRvIHJlcGxhY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRvIHJlbmRlciBpbiBwbGFjZSBvZiB0aGUgY2hpbGQgbm9kZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cDogZnVuY3Rpb24ob2xkQ2hpbGQsIG1hcmt1cCkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00sXG4gICAgICAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogQ2Fubm90IHJlbmRlciBtYXJrdXAgaW4gYSAnICtcbiAgICAgICd3b3JrZXIgdGhyZWFkLiBNYWtlIHN1cmUgYHdpbmRvd2AgYW5kIGBkb2N1bWVudGAgYXJlIGF2YWlsYWJsZSAnICtcbiAgICAgICdnbG9iYWxseSBiZWZvcmUgcmVxdWlyaW5nIFJlYWN0IHdoZW4gdW5pdCB0ZXN0aW5nIG9yIHVzZSAnICtcbiAgICAgICdSZWFjdC5yZW5kZXJUb1N0cmluZyBmb3Igc2VydmVyIHJlbmRlcmluZy4nXG4gICAgKSA6IGludmFyaWFudChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KG1hcmt1cCwgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IE1pc3NpbmcgbWFya3VwLicpIDogaW52YXJpYW50KG1hcmt1cCkpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBvbGRDaGlsZC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdodG1sJyxcbiAgICAgICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVwbGFjZSBtYXJrdXAgb2YgdGhlICcgK1xuICAgICAgJzxodG1sPiBub2RlLiBUaGlzIGlzIGJlY2F1c2UgYnJvd3NlciBxdWlya3MgbWFrZSB0aGlzIHVucmVsaWFibGUgJyArXG4gICAgICAnYW5kL29yIHNsb3cuIElmIHlvdSB3YW50IHRvIHJlbmRlciB0byB0aGUgcm9vdCB5b3UgbXVzdCB1c2UgJyArXG4gICAgICAnc2VydmVyIHJlbmRlcmluZy4gU2VlIFJlYWN0LnJlbmRlclRvU3RyaW5nKCkuJ1xuICAgICkgOiBpbnZhcmlhbnQob2xkQ2hpbGQudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnaHRtbCcpKTtcblxuICAgIHZhciBuZXdDaGlsZCA9IGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXAsIGVtcHR5RnVuY3Rpb24pWzBdO1xuICAgIG9sZENoaWxkLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld0NoaWxkLCBvbGRDaGlsZCk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYW5nZXI7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MTY4LFwiLi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXBcIjoyNzMsXCIuL2VtcHR5RnVuY3Rpb25cIjoyNzYsXCIuL2dldE1hcmt1cFdyYXBcIjoyODksXCIuL2ludmFyaWFudFwiOjI5NyxcIl9wcm9jZXNzXCI6MX1dLDE2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xuXG4vKipcbiAqIE1vZHVsZSB0aGF0IGlzIGluamVjdGFibGUgaW50byBgRXZlbnRQbHVnaW5IdWJgLCB0aGF0IHNwZWNpZmllcyBhXG4gKiBkZXRlcm1pbmlzdGljIG9yZGVyaW5nIG9mIGBFdmVudFBsdWdpbmBzLiBBIGNvbnZlbmllbnQgd2F5IHRvIHJlYXNvbiBhYm91dFxuICogcGx1Z2lucywgd2l0aG91dCBoYXZpbmcgdG8gcGFja2FnZSBldmVyeSBvbmUgb2YgdGhlbS4gVGhpcyBpcyBiZXR0ZXIgdGhhblxuICogaGF2aW5nIHBsdWdpbnMgYmUgb3JkZXJlZCBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgYXJlIGluamVjdGVkIGJlY2F1c2VcbiAqIHRoYXQgb3JkZXJpbmcgd291bGQgYmUgaW5mbHVlbmNlZCBieSB0aGUgcGFja2FnaW5nIG9yZGVyLlxuICogYFJlc3BvbmRlckV2ZW50UGx1Z2luYCBtdXN0IG9jY3VyIGJlZm9yZSBgU2ltcGxlRXZlbnRQbHVnaW5gIHNvIHRoYXRcbiAqIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBldmVudHMgaXMgY29udmVuaWVudCBpbiBgU2ltcGxlRXZlbnRQbHVnaW5gIGhhbmRsZXJzLlxuICovXG52YXIgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIgPSBbXG4gIGtleU9mKHtSZXNwb25kZXJFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7U2ltcGxlRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe1RhcEV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtFbnRlckxlYXZlRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe0NoYW5nZUV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtTZWxlY3RFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7QmVmb3JlSW5wdXRFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7QW5hbHl0aWNzRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe01vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW46IG51bGx9KVxuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlcjtcblxufSx7XCIuL2tleU9mXCI6MzA0fV0sMTYxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFbnRlckxlYXZlRXZlbnRQbHVnaW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljTW91c2VFdmVudFwiKTtcblxudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcbnZhciBnZXRGaXJzdFJlYWN0RE9NID0gUmVhY3RNb3VudC5nZXRGaXJzdFJlYWN0RE9NO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgbW91c2VFbnRlcjoge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvbk1vdXNlRW50ZXI6IG51bGx9KSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlclxuICAgIF1cbiAgfSxcbiAgbW91c2VMZWF2ZToge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6IGtleU9mKHtvbk1vdXNlTGVhdmU6IG51bGx9KSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlclxuICAgIF1cbiAgfVxufTtcblxudmFyIGV4dHJhY3RlZEV2ZW50cyA9IFtudWxsLCBudWxsXTtcblxudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBGb3IgYWxtb3N0IGV2ZXJ5IGludGVyYWN0aW9uIHdlIGNhcmUgYWJvdXQsIHRoZXJlIHdpbGwgYmUgYm90aCBhIHRvcC1sZXZlbFxuICAgKiBgbW91c2VvdmVyYCBhbmQgYG1vdXNlb3V0YCBldmVudCB0aGF0IG9jY3Vycy4gT25seSB1c2UgYG1vdXNlb3V0YCBzbyB0aGF0XG4gICAqIHdlIGRvIG5vdCBleHRyYWN0IGR1cGxpY2F0ZSBldmVudHMuIEhvd2V2ZXIsIG1vdmluZyB0aGUgbW91c2UgaW50byB0aGVcbiAgICogYnJvd3NlciBmcm9tIG91dHNpZGUgd2lsbCBub3QgZmlyZSBhIGBtb3VzZW91dGAgZXZlbnQuIEluIHRoaXMgY2FzZSwgd2UgdXNlXG4gICAqIHRoZSBgbW91c2VvdmVyYCB0b3AtbGV2ZWwgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyICYmXG4gICAgICAgIChuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LmZyb21FbGVtZW50KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0b3BMZXZlbFR5cGUgIT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQgJiZcbiAgICAgICAgdG9wTGV2ZWxUeXBlICE9PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3Zlcikge1xuICAgICAgLy8gTXVzdCBub3QgYmUgYSBtb3VzZSBpbiBvciBtb3VzZSBvdXQgLSBpZ25vcmluZy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB3aW47XG4gICAgaWYgKHRvcExldmVsVGFyZ2V0LndpbmRvdyA9PT0gdG9wTGV2ZWxUYXJnZXQpIHtcbiAgICAgIC8vIGB0b3BMZXZlbFRhcmdldGAgaXMgcHJvYmFibHkgYSB3aW5kb3cgb2JqZWN0LlxuICAgICAgd2luID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICAgIHZhciBkb2MgPSB0b3BMZXZlbFRhcmdldC5vd25lckRvY3VtZW50O1xuICAgICAgaWYgKGRvYykge1xuICAgICAgICB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbiA9IHdpbmRvdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZnJvbSwgdG87XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCkge1xuICAgICAgZnJvbSA9IHRvcExldmVsVGFyZ2V0O1xuICAgICAgdG8gPVxuICAgICAgICBnZXRGaXJzdFJlYWN0RE9NKG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQudG9FbGVtZW50KSB8fFxuICAgICAgICB3aW47XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyb20gPSB3aW47XG4gICAgICB0byA9IHRvcExldmVsVGFyZ2V0O1xuICAgIH1cblxuICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgLy8gTm90aGluZyBwZXJ0YWlucyB0byBvdXIgbWFuYWdlZCBjb21wb25lbnRzLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGZyb21JRCA9IGZyb20gPyBSZWFjdE1vdW50LmdldElEKGZyb20pIDogJyc7XG4gICAgdmFyIHRvSUQgPSB0byA/IFJlYWN0TW91bnQuZ2V0SUQodG8pIDogJyc7XG5cbiAgICB2YXIgbGVhdmUgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmdldFBvb2xlZChcbiAgICAgIGV2ZW50VHlwZXMubW91c2VMZWF2ZSxcbiAgICAgIGZyb21JRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgICBsZWF2ZS50eXBlID0gJ21vdXNlbGVhdmUnO1xuICAgIGxlYXZlLnRhcmdldCA9IGZyb207XG4gICAgbGVhdmUucmVsYXRlZFRhcmdldCA9IHRvO1xuXG4gICAgdmFyIGVudGVyID0gU3ludGhldGljTW91c2VFdmVudC5nZXRQb29sZWQoXG4gICAgICBldmVudFR5cGVzLm1vdXNlRW50ZXIsXG4gICAgICB0b0lELFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuICAgIGVudGVyLnR5cGUgPSAnbW91c2VlbnRlcic7XG4gICAgZW50ZXIudGFyZ2V0ID0gdG87XG4gICAgZW50ZXIucmVsYXRlZFRhcmdldCA9IGZyb207XG5cbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhsZWF2ZSwgZW50ZXIsIGZyb21JRCwgdG9JRCk7XG5cbiAgICBleHRyYWN0ZWRFdmVudHNbMF0gPSBsZWF2ZTtcbiAgICBleHRyYWN0ZWRFdmVudHNbMV0gPSBlbnRlcjtcblxuICAgIHJldHVybiBleHRyYWN0ZWRFdmVudHM7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbnRlckxlYXZlRXZlbnRQbHVnaW47XG5cbn0se1wiLi9FdmVudENvbnN0YW50c1wiOjE2MixcIi4vRXZlbnRQcm9wYWdhdG9yc1wiOjE2NyxcIi4vUmVhY3RNb3VudFwiOjIyMyxcIi4vU3ludGhldGljTW91c2VFdmVudFwiOjI1OSxcIi4va2V5T2ZcIjozMDR9XSwxNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50Q29uc3RhbnRzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZShcIi4va2V5TWlycm9yXCIpO1xuXG52YXIgUHJvcGFnYXRpb25QaGFzZXMgPSBrZXlNaXJyb3Ioe2J1YmJsZWQ6IG51bGwsIGNhcHR1cmVkOiBudWxsfSk7XG5cbi8qKlxuICogVHlwZXMgb2YgcmF3IHNpZ25hbHMgZnJvbSB0aGUgYnJvd3NlciBjYXVnaHQgYXQgdGhlIHRvcCBsZXZlbC5cbiAqL1xudmFyIHRvcExldmVsVHlwZXMgPSBrZXlNaXJyb3Ioe1xuICB0b3BCbHVyOiBudWxsLFxuICB0b3BDaGFuZ2U6IG51bGwsXG4gIHRvcENsaWNrOiBudWxsLFxuICB0b3BDb21wb3NpdGlvbkVuZDogbnVsbCxcbiAgdG9wQ29tcG9zaXRpb25TdGFydDogbnVsbCxcbiAgdG9wQ29tcG9zaXRpb25VcGRhdGU6IG51bGwsXG4gIHRvcENvbnRleHRNZW51OiBudWxsLFxuICB0b3BDb3B5OiBudWxsLFxuICB0b3BDdXQ6IG51bGwsXG4gIHRvcERvdWJsZUNsaWNrOiBudWxsLFxuICB0b3BEcmFnOiBudWxsLFxuICB0b3BEcmFnRW5kOiBudWxsLFxuICB0b3BEcmFnRW50ZXI6IG51bGwsXG4gIHRvcERyYWdFeGl0OiBudWxsLFxuICB0b3BEcmFnTGVhdmU6IG51bGwsXG4gIHRvcERyYWdPdmVyOiBudWxsLFxuICB0b3BEcmFnU3RhcnQ6IG51bGwsXG4gIHRvcERyb3A6IG51bGwsXG4gIHRvcEVycm9yOiBudWxsLFxuICB0b3BGb2N1czogbnVsbCxcbiAgdG9wSW5wdXQ6IG51bGwsXG4gIHRvcEtleURvd246IG51bGwsXG4gIHRvcEtleVByZXNzOiBudWxsLFxuICB0b3BLZXlVcDogbnVsbCxcbiAgdG9wTG9hZDogbnVsbCxcbiAgdG9wTW91c2VEb3duOiBudWxsLFxuICB0b3BNb3VzZU1vdmU6IG51bGwsXG4gIHRvcE1vdXNlT3V0OiBudWxsLFxuICB0b3BNb3VzZU92ZXI6IG51bGwsXG4gIHRvcE1vdXNlVXA6IG51bGwsXG4gIHRvcFBhc3RlOiBudWxsLFxuICB0b3BSZXNldDogbnVsbCxcbiAgdG9wU2Nyb2xsOiBudWxsLFxuICB0b3BTZWxlY3Rpb25DaGFuZ2U6IG51bGwsXG4gIHRvcFN1Ym1pdDogbnVsbCxcbiAgdG9wVGV4dElucHV0OiBudWxsLFxuICB0b3BUb3VjaENhbmNlbDogbnVsbCxcbiAgdG9wVG91Y2hFbmQ6IG51bGwsXG4gIHRvcFRvdWNoTW92ZTogbnVsbCxcbiAgdG9wVG91Y2hTdGFydDogbnVsbCxcbiAgdG9wV2hlZWw6IG51bGxcbn0pO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSB7XG4gIHRvcExldmVsVHlwZXM6IHRvcExldmVsVHlwZXMsXG4gIFByb3BhZ2F0aW9uUGhhc2VzOiBQcm9wYWdhdGlvblBoYXNlc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudENvbnN0YW50cztcblxufSx7XCIuL2tleU1pcnJvclwiOjMwM31dLDE2MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudExpc3RlbmVyXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxuLyoqXG4gKiBVcHN0cmVhbSB2ZXJzaW9uIG9mIGV2ZW50IGxpc3RlbmVyLiBEb2VzIG5vdCB0YWtlIGludG8gYWNjb3VudCBzcGVjaWZpY1xuICogbmF0dXJlIG9mIHBsYXRmb3JtLlxuICovXG52YXIgRXZlbnRMaXN0ZW5lciA9IHtcbiAgLyoqXG4gICAqIExpc3RlbiB0byBET00gZXZlbnRzIGR1cmluZyB0aGUgYnViYmxlIHBoYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXQgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgbGlzdGVuZXIgb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCBhIGByZW1vdmVgIG1ldGhvZC5cbiAgICovXG4gIGxpc3RlbjogZnVuY3Rpb24odGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuICAgICAgdGFyZ2V0LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGFyZ2V0LmRldGFjaEV2ZW50KCdvbicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byBET00gZXZlbnRzIGR1cmluZyB0aGUgY2FwdHVyZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBjYXB0dXJlOiBmdW5jdGlvbih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoIXRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgJ0F0dGVtcHRlZCB0byBsaXN0ZW4gdG8gZXZlbnRzIGR1cmluZyB0aGUgY2FwdHVyZSBwaGFzZSBvbiBhICcgK1xuICAgICAgICAgICdicm93c2VyIHRoYXQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgY2FwdHVyZSBwaGFzZS4gWW91ciBhcHBsaWNhdGlvbiAnICtcbiAgICAgICAgICAnd2lsbCBub3QgcmVjZWl2ZSBzb21lIGV2ZW50cy4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGVtcHR5RnVuY3Rpb25cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgcmVnaXN0ZXJEZWZhdWx0OiBmdW5jdGlvbigpIHt9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50TGlzdGVuZXI7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2VtcHR5RnVuY3Rpb25cIjoyNzYsXCJfcHJvY2Vzc1wiOjF9XSwxNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudFBsdWdpbkh1YlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblJlZ2lzdHJ5XCIpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKFwiLi9hY2N1bXVsYXRlSW50b1wiKTtcbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSByZXF1aXJlKFwiLi9mb3JFYWNoQWNjdW11bGF0ZWRcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIEludGVybmFsIHN0b3JlIGZvciBldmVudCBsaXN0ZW5lcnNcbiAqL1xudmFyIGxpc3RlbmVyQmFuayA9IHt9O1xuXG4vKipcbiAqIEludGVybmFsIHF1ZXVlIG9mIGV2ZW50cyB0aGF0IGhhdmUgYWNjdW11bGF0ZWQgdGhlaXIgZGlzcGF0Y2hlcyBhbmQgYXJlXG4gKiB3YWl0aW5nIHRvIGhhdmUgdGhlaXIgZGlzcGF0Y2hlcyBleGVjdXRlZC5cbiAqL1xudmFyIGV2ZW50UXVldWUgPSBudWxsO1xuXG4vKipcbiAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYW5kIHJlbGVhc2VzIGl0IGJhY2sgaW50byB0aGUgcG9vbCwgdW5sZXNzIHBlcnNpc3RlbnQuXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBldmVudCBTeW50aGV0aWMgZXZlbnQgdG8gYmUgZGlzcGF0Y2hlZC5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UgPSBmdW5jdGlvbihldmVudCkge1xuICBpZiAoZXZlbnQpIHtcbiAgICB2YXIgZXhlY3V0ZURpc3BhdGNoID0gRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2g7XG4gICAgLy8gUGx1Z2lucyBjYW4gcHJvdmlkZSBjdXN0b20gYmVoYXZpb3Igd2hlbiBkaXNwYXRjaGluZyBldmVudHMuXG4gICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkuZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQoZXZlbnQpO1xuICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLmV4ZWN1dGVEaXNwYXRjaCkge1xuICAgICAgZXhlY3V0ZURpc3BhdGNoID0gUGx1Z2luTW9kdWxlLmV4ZWN1dGVEaXNwYXRjaDtcbiAgICB9XG4gICAgRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIGV4ZWN1dGVEaXNwYXRjaCk7XG5cbiAgICBpZiAoIWV2ZW50LmlzUGVyc2lzdGVudCgpKSB7XG4gICAgICBldmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKGV2ZW50KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogLSBgSW5zdGFuY2VIYW5kbGVgOiBbcmVxdWlyZWRdIE1vZHVsZSB0aGF0IHBlcmZvcm1zIGxvZ2ljYWwgdHJhdmVyc2FscyBvZiBET01cbiAqICAgaGllcmFyY2h5IGdpdmVuIGlkcyBvZiB0aGUgbG9naWNhbCBET00gZWxlbWVudHMgaW52b2x2ZWQuXG4gKi9cbnZhciBJbnN0YW5jZUhhbmRsZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSW5zdGFuY2VIYW5kbGUoKSB7XG4gIHZhciB2YWxpZCA9XG4gICAgSW5zdGFuY2VIYW5kbGUgJiZcbiAgICBJbnN0YW5jZUhhbmRsZS50cmF2ZXJzZVR3b1BoYXNlICYmXG4gICAgSW5zdGFuY2VIYW5kbGUudHJhdmVyc2VFbnRlckxlYXZlO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHZhbGlkLFxuICAgICdJbnN0YW5jZUhhbmRsZSBub3QgaW5qZWN0ZWQgYmVmb3JlIHVzZSEnXG4gICkgOiBpbnZhcmlhbnQodmFsaWQpKTtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGEgdW5pZmllZCBpbnRlcmZhY2UgZm9yIGV2ZW50IHBsdWdpbnMgdG8gYmUgaW5zdGFsbGVkIGFuZCBjb25maWd1cmVkLlxuICpcbiAqIEV2ZW50IHBsdWdpbnMgY2FuIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICBgZXh0cmFjdEV2ZW50c2Age2Z1bmN0aW9uKHN0cmluZywgRE9NRXZlbnRUYXJnZXQsIHN0cmluZywgb2JqZWN0KTogKn1cbiAqICAgICBSZXF1aXJlZC4gV2hlbiBhIHRvcC1sZXZlbCBldmVudCBpcyBmaXJlZCwgdGhpcyBtZXRob2QgaXMgZXhwZWN0ZWQgdG9cbiAqICAgICBleHRyYWN0IHN5bnRoZXRpYyBldmVudHMgdGhhdCB3aWxsIGluIHR1cm4gYmUgcXVldWVkIGFuZCBkaXNwYXRjaGVkLlxuICpcbiAqICAgYGV2ZW50VHlwZXNgIHtvYmplY3R9XG4gKiAgICAgT3B0aW9uYWwsIHBsdWdpbnMgdGhhdCBmaXJlIGV2ZW50cyBtdXN0IHB1Ymxpc2ggYSBtYXBwaW5nIG9mIHJlZ2lzdHJhdGlvblxuICogICAgIG5hbWVzIHRoYXQgYXJlIHVzZWQgdG8gcmVnaXN0ZXIgbGlzdGVuZXJzLiBWYWx1ZXMgb2YgdGhpcyBtYXBwaW5nIG11c3RcbiAqICAgICBiZSBvYmplY3RzIHRoYXQgY29udGFpbiBgcmVnaXN0cmF0aW9uTmFtZWAgb3IgYHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzYC5cbiAqXG4gKiAgIGBleGVjdXRlRGlzcGF0Y2hgIHtmdW5jdGlvbihvYmplY3QsIGZ1bmN0aW9uLCBzdHJpbmcpfVxuICogICAgIE9wdGlvbmFsLCBhbGxvd3MgcGx1Z2lucyB0byBvdmVycmlkZSBob3cgYW4gZXZlbnQgZ2V0cyBkaXNwYXRjaGVkLiBCeVxuICogICAgIGRlZmF1bHQsIHRoZSBsaXN0ZW5lciBpcyBzaW1wbHkgaW52b2tlZC5cbiAqXG4gKiBFYWNoIHBsdWdpbiB0aGF0IGlzIGluamVjdGVkIGludG8gYEV2ZW50c1BsdWdpbkh1YmAgaXMgaW1tZWRpYXRlbHkgb3BlcmFibGUuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgRXZlbnRQbHVnaW5IdWIgPSB7XG5cbiAgLyoqXG4gICAqIE1ldGhvZHMgZm9yIGluamVjdGluZyBkZXBlbmRlbmNpZXMuXG4gICAqL1xuICBpbmplY3Rpb246IHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBJbmplY3RlZE1vdW50XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGluamVjdE1vdW50OiBFdmVudFBsdWdpblV0aWxzLmluamVjdGlvbi5pbmplY3RNb3VudCxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBJbmplY3RlZEluc3RhbmNlSGFuZGxlXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGluamVjdEluc3RhbmNlSGFuZGxlOiBmdW5jdGlvbihJbmplY3RlZEluc3RhbmNlSGFuZGxlKSB7XG4gICAgICBJbnN0YW5jZUhhbmRsZSA9IEluamVjdGVkSW5zdGFuY2VIYW5kbGU7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHZhbGlkYXRlSW5zdGFuY2VIYW5kbGUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0SW5zdGFuY2VIYW5kbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICB2YWxpZGF0ZUluc3RhbmNlSGFuZGxlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gSW5zdGFuY2VIYW5kbGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IEluamVjdGVkRXZlbnRQbHVnaW5PcmRlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBpbmplY3RFdmVudFBsdWdpbk9yZGVyOiBFdmVudFBsdWdpblJlZ2lzdHJ5LmluamVjdEV2ZW50UGx1Z2luT3JkZXIsXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAgICAgKi9cbiAgICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IEV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lXG5cbiAgfSxcblxuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLFxuXG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgYGxpc3RlbmVyYCBhdCBgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2lkXWAuIElzIGlkZW1wb3RlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGxpc3RlbmVyIFRoZSBjYWxsYmFjayB0byBzdG9yZS5cbiAgICovXG4gIHB1dExpc3RlbmVyOiBmdW5jdGlvbihpZCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIWxpc3RlbmVyIHx8IHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICdFeHBlY3RlZCAlcyBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLCBpbnN0ZWFkIGdvdCB0eXBlICVzJyxcbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWUsIHR5cGVvZiBsaXN0ZW5lclxuICAgICkgOiBpbnZhcmlhbnQoIWxpc3RlbmVyIHx8IHR5cGVvZiBsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykpO1xuXG4gICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID1cbiAgICAgIGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXSB8fCAobGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdID0ge30pO1xuICAgIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2lkXSA9IGxpc3RlbmVyO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIERPTSBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBOYW1lIG9mIGxpc3RlbmVyIChlLmcuIGBvbkNsaWNrYCkuXG4gICAqIEByZXR1cm4gez9mdW5jdGlvbn0gVGhlIHN0b3JlZCBjYWxsYmFjay5cbiAgICovXG4gIGdldExpc3RlbmVyOiBmdW5jdGlvbihpZCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICByZXR1cm4gYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgJiYgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWVbaWRdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGEgbGlzdGVuZXIgZnJvbSB0aGUgcmVnaXN0cmF0aW9uIGJhbmsuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICovXG4gIGRlbGV0ZUxpc3RlbmVyOiBmdW5jdGlvbihpZCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICBpZiAoYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgIGRlbGV0ZSBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBsaXN0ZW5lcnMgZm9yIHRoZSBET00gZWxlbWVudCB3aXRoIHRoZSBzdXBwbGllZCBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICovXG4gIGRlbGV0ZUFsbExpc3RlbmVyczogZnVuY3Rpb24oaWQpIHtcbiAgICBmb3IgKHZhciByZWdpc3RyYXRpb25OYW1lIGluIGxpc3RlbmVyQmFuaykge1xuICAgICAgZGVsZXRlIGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXVtpZF07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgcmVnaXN0ZXJlZCBwbHVnaW5zIGFuIG9wcG9ydHVuaXR5IHRvIGV4dHJhY3QgZXZlbnRzIGZyb20gdG9wLWxldmVsXG4gICAqIG5hdGl2ZSBicm93c2VyIGV2ZW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudCkge1xuICAgIHZhciBldmVudHM7XG4gICAgdmFyIHBsdWdpbnMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnM7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwbHVnaW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgLy8gTm90IGV2ZXJ5IHBsdWdpbiBpbiB0aGUgb3JkZXJpbmcgbWF5IGJlIGxvYWRlZCBhdCBydW50aW1lLlxuICAgICAgdmFyIHBvc3NpYmxlUGx1Z2luID0gcGx1Z2luc1tpXTtcbiAgICAgIGlmIChwb3NzaWJsZVBsdWdpbikge1xuICAgICAgICB2YXIgZXh0cmFjdGVkRXZlbnRzID0gcG9zc2libGVQbHVnaW4uZXh0cmFjdEV2ZW50cyhcbiAgICAgICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApO1xuICAgICAgICBpZiAoZXh0cmFjdGVkRXZlbnRzKSB7XG4gICAgICAgICAgZXZlbnRzID0gYWNjdW11bGF0ZUludG8oZXZlbnRzLCBleHRyYWN0ZWRFdmVudHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBldmVudHM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgc3ludGhldGljIGV2ZW50IHRoYXQgc2hvdWxkIGJlIGRpc3BhdGNoZWQgd2hlblxuICAgKiBgcHJvY2Vzc0V2ZW50UXVldWVgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZXZlbnRzIEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVFdmVudHM6IGZ1bmN0aW9uKGV2ZW50cykge1xuICAgIGlmIChldmVudHMpIHtcbiAgICAgIGV2ZW50UXVldWUgPSBhY2N1bXVsYXRlSW50byhldmVudFF1ZXVlLCBldmVudHMpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbGwgc3ludGhldGljIGV2ZW50cyBvbiB0aGUgZXZlbnQgcXVldWUuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHJvY2Vzc0V2ZW50UXVldWU6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFNldCBgZXZlbnRRdWV1ZWAgdG8gbnVsbCBiZWZvcmUgcHJvY2Vzc2luZyBpdCBzbyB0aGF0IHdlIGNhbiB0ZWxsIGlmIG1vcmVcbiAgICAvLyBldmVudHMgZ2V0IGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcuXG4gICAgdmFyIHByb2Nlc3NpbmdFdmVudFF1ZXVlID0gZXZlbnRRdWV1ZTtcbiAgICBldmVudFF1ZXVlID0gbnVsbDtcbiAgICBmb3JFYWNoQWNjdW11bGF0ZWQocHJvY2Vzc2luZ0V2ZW50UXVldWUsIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICFldmVudFF1ZXVlLFxuICAgICAgJ3Byb2Nlc3NFdmVudFF1ZXVlKCk6IEFkZGl0aW9uYWwgZXZlbnRzIHdlcmUgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZyAnICtcbiAgICAgICdhbiBldmVudCBxdWV1ZS4gU3VwcG9ydCBmb3IgdGhpcyBoYXMgbm90IHlldCBiZWVuIGltcGxlbWVudGVkLidcbiAgICApIDogaW52YXJpYW50KCFldmVudFF1ZXVlKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZXNlIGFyZSBuZWVkZWQgZm9yIHRlc3RzIG9ubHkuIERvIG5vdCB1c2UhXG4gICAqL1xuICBfX3B1cmdlOiBmdW5jdGlvbigpIHtcbiAgICBsaXN0ZW5lckJhbmsgPSB7fTtcbiAgfSxcblxuICBfX2dldExpc3RlbmVyQmFuazogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQmFuaztcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50UGx1Z2luSHViO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9FdmVudFBsdWdpblJlZ2lzdHJ5XCI6MTY1LFwiLi9FdmVudFBsdWdpblV0aWxzXCI6MTY2LFwiLi9hY2N1bXVsYXRlSW50b1wiOjI2NSxcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCI6MjgyLFwiLi9pbnZhcmlhbnRcIjoyOTcsXCJfcHJvY2Vzc1wiOjF9XSwxNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudFBsdWdpblJlZ2lzdHJ5XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBJbmplY3RhYmxlIG9yZGVyaW5nIG9mIGV2ZW50IHBsdWdpbnMuXG4gKi9cbnZhciBFdmVudFBsdWdpbk9yZGVyID0gbnVsbDtcblxuLyoqXG4gKiBJbmplY3RhYmxlIG1hcHBpbmcgZnJvbSBuYW1lcyB0byBldmVudCBwbHVnaW4gbW9kdWxlcy5cbiAqL1xudmFyIG5hbWVzVG9QbHVnaW5zID0ge307XG5cbi8qKlxuICogUmVjb21wdXRlcyB0aGUgcGx1Z2luIGxpc3QgdXNpbmcgdGhlIGluamVjdGVkIHBsdWdpbnMgYW5kIHBsdWdpbiBvcmRlcmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpIHtcbiAgaWYgKCFFdmVudFBsdWdpbk9yZGVyKSB7XG4gICAgLy8gV2FpdCB1bnRpbCBhbiBgRXZlbnRQbHVnaW5PcmRlcmAgaXMgaW5qZWN0ZWQuXG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gbmFtZXNUb1BsdWdpbnMpIHtcbiAgICB2YXIgUGx1Z2luTW9kdWxlID0gbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgdmFyIHBsdWdpbkluZGV4ID0gRXZlbnRQbHVnaW5PcmRlci5pbmRleE9mKHBsdWdpbk5hbWUpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBwbHVnaW5JbmRleCA+IC0xLFxuICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgZXZlbnQgcGx1Z2lucyB0aGF0IGRvIG5vdCBleGlzdCBpbiAnICtcbiAgICAgICd0aGUgcGx1Z2luIG9yZGVyaW5nLCBgJXNgLicsXG4gICAgICBwbHVnaW5OYW1lXG4gICAgKSA6IGludmFyaWFudChwbHVnaW5JbmRleCA+IC0xKSk7XG4gICAgaWYgKEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgUGx1Z2luTW9kdWxlLmV4dHJhY3RFdmVudHMsXG4gICAgICAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRXZlbnQgcGx1Z2lucyBtdXN0IGltcGxlbWVudCBhbiBgZXh0cmFjdEV2ZW50c2AgJyArXG4gICAgICAnbWV0aG9kLCBidXQgYCVzYCBkb2VzIG5vdC4nLFxuICAgICAgcGx1Z2luTmFtZVxuICAgICkgOiBpbnZhcmlhbnQoUGx1Z2luTW9kdWxlLmV4dHJhY3RFdmVudHMpKTtcbiAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdID0gUGx1Z2luTW9kdWxlO1xuICAgIHZhciBwdWJsaXNoZWRFdmVudHMgPSBQbHVnaW5Nb2R1bGUuZXZlbnRUeXBlcztcbiAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gcHVibGlzaGVkRXZlbnRzKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBwdWJsaXNoRXZlbnRGb3JQbHVnaW4oXG4gICAgICAgICAgcHVibGlzaGVkRXZlbnRzW2V2ZW50TmFtZV0sXG4gICAgICAgICAgUGx1Z2luTW9kdWxlLFxuICAgICAgICAgIGV2ZW50TmFtZVxuICAgICAgICApLFxuICAgICAgICAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRmFpbGVkIHRvIHB1Ymxpc2ggZXZlbnQgYCVzYCBmb3IgcGx1Z2luIGAlc2AuJyxcbiAgICAgICAgZXZlbnROYW1lLFxuICAgICAgICBwbHVnaW5OYW1lXG4gICAgICApIDogaW52YXJpYW50KHB1Ymxpc2hFdmVudEZvclBsdWdpbihcbiAgICAgICAgcHVibGlzaGVkRXZlbnRzW2V2ZW50TmFtZV0sXG4gICAgICAgIFBsdWdpbk1vZHVsZSxcbiAgICAgICAgZXZlbnROYW1lXG4gICAgICApKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGFuIGV2ZW50IHNvIHRoYXQgaXQgY2FuIGJlIGRpc3BhdGNoZWQgYnkgdGhlIHN1cHBsaWVkIHBsdWdpbi5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgRGlzcGF0Y2ggY29uZmlndXJhdGlvbiBmb3IgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtvYmplY3R9IFBsdWdpbk1vZHVsZSBQbHVnaW4gcHVibGlzaGluZyB0aGUgZXZlbnQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCB3YXMgc3VjY2Vzc2Z1bGx5IHB1Ymxpc2hlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hFdmVudEZvclBsdWdpbihkaXNwYXRjaENvbmZpZywgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAhRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSxcbiAgICAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lICcgK1xuICAgICdldmVudCBuYW1lLCBgJXNgLicsXG4gICAgZXZlbnROYW1lXG4gICkgOiBpbnZhcmlhbnQoIUV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpKTtcbiAgRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbZXZlbnROYW1lXSA9IGRpc3BhdGNoQ29uZmlnO1xuXG4gIHZhciBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyA9IGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO1xuICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICBmb3IgKHZhciBwaGFzZU5hbWUgaW4gcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICAgIGlmIChwaGFzZWRSZWdpc3RyYXRpb25OYW1lcy5oYXNPd25Qcm9wZXJ0eShwaGFzZU5hbWUpKSB7XG4gICAgICAgIHZhciBwaGFzZWRSZWdpc3RyYXRpb25OYW1lID0gcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcGhhc2VOYW1lXTtcbiAgICAgICAgcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUoXG4gICAgICAgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZSxcbiAgICAgICAgICBQbHVnaW5Nb2R1bGUsXG4gICAgICAgICAgZXZlbnROYW1lXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShcbiAgICAgIGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUsXG4gICAgICBQbHVnaW5Nb2R1bGUsXG4gICAgICBldmVudE5hbWVcbiAgICApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBQdWJsaXNoZXMgYSByZWdpc3RyYXRpb24gbmFtZSB0aGF0IGlzIHVzZWQgdG8gaWRlbnRpZnkgZGlzcGF0Y2hlZCBldmVudHMgYW5kXG4gKiBjYW4gYmUgdXNlZCB3aXRoIGBFdmVudFBsdWdpbkh1Yi5wdXRMaXN0ZW5lcmAgdG8gcmVnaXN0ZXIgbGlzdGVuZXJzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIFJlZ2lzdHJhdGlvbiBuYW1lIHRvIGFkZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBQbHVnaW5Nb2R1bGUgUGx1Z2luIHB1Ymxpc2hpbmcgdGhlIGV2ZW50LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUocmVnaXN0cmF0aW9uTmFtZSwgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAhRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSxcbiAgICAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lICcgK1xuICAgICdyZWdpc3RyYXRpb24gbmFtZSwgYCVzYC4nLFxuICAgIHJlZ2lzdHJhdGlvbk5hbWVcbiAgKSA6IGludmFyaWFudCghRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSkpO1xuICBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gUGx1Z2luTW9kdWxlO1xuICBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0gPVxuICAgIFBsdWdpbk1vZHVsZS5ldmVudFR5cGVzW2V2ZW50TmFtZV0uZGVwZW5kZW5jaWVzO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBwbHVnaW5zIHNvIHRoYXQgdGhleSBjYW4gZXh0cmFjdCBhbmQgZGlzcGF0Y2ggZXZlbnRzLlxuICpcbiAqIEBzZWUge0V2ZW50UGx1Z2luSHVifVxuICovXG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHtcblxuICAvKipcbiAgICogT3JkZXJlZCBsaXN0IG9mIGluamVjdGVkIHBsdWdpbnMuXG4gICAqL1xuICBwbHVnaW5zOiBbXSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIGV2ZW50IG5hbWUgdG8gZGlzcGF0Y2ggY29uZmlnXG4gICAqL1xuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gcGx1Z2luIG1vZHVsZVxuICAgKi9cbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gZXZlbnQgbmFtZVxuICAgKi9cbiAgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczoge30sXG5cbiAgLyoqXG4gICAqIEluamVjdHMgYW4gb3JkZXJpbmcgb2YgcGx1Z2lucyAoYnkgcGx1Z2luIG5hbWUpLiBUaGlzIGFsbG93cyB0aGUgb3JkZXJpbmdcbiAgICogdG8gYmUgZGVjb3VwbGVkIGZyb20gaW5qZWN0aW9uIG9mIHRoZSBhY3R1YWwgcGx1Z2lucyBzbyB0aGF0IG9yZGVyaW5nIGlzXG4gICAqIGFsd2F5cyBkZXRlcm1pbmlzdGljIHJlZ2FyZGxlc3Mgb2YgcGFja2FnaW5nLCBvbi10aGUtZmx5IGluamVjdGlvbiwgZXRjLlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5fSBJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXJcbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbk9yZGVyfVxuICAgKi9cbiAgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjogZnVuY3Rpb24oSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICFFdmVudFBsdWdpbk9yZGVyLFxuICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgZXZlbnQgcGx1Z2luIG9yZGVyaW5nIG1vcmUgdGhhbiAnICtcbiAgICAgICdvbmNlLiBZb3UgYXJlIGxpa2VseSB0cnlpbmcgdG8gbG9hZCBtb3JlIHRoYW4gb25lIGNvcHkgb2YgUmVhY3QuJ1xuICAgICkgOiBpbnZhcmlhbnQoIUV2ZW50UGx1Z2luT3JkZXIpKTtcbiAgICAvLyBDbG9uZSB0aGUgb3JkZXJpbmcgc28gaXQgY2Fubm90IGJlIGR5bmFtaWNhbGx5IG11dGF0ZWQuXG4gICAgRXZlbnRQbHVnaW5PcmRlciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKEluamVjdGVkRXZlbnRQbHVnaW5PcmRlcik7XG4gICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbiAgfSxcblxuICAvKipcbiAgICogSW5qZWN0cyBwbHVnaW5zIHRvIGJlIHVzZWQgYnkgYEV2ZW50UGx1Z2luSHViYC4gVGhlIHBsdWdpbiBuYW1lcyBtdXN0IGJlXG4gICAqIGluIHRoZSBvcmRlcmluZyBpbmplY3RlZCBieSBgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcmAuXG4gICAqXG4gICAqIFBsdWdpbnMgY2FuIGJlIGluamVjdGVkIGFzIHBhcnQgb2YgcGFnZSBpbml0aWFsaXphdGlvbiBvciBvbi10aGUtZmx5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWV9XG4gICAqL1xuICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IGZ1bmN0aW9uKGluamVjdGVkTmFtZXNUb1BsdWdpbnMpIHtcbiAgICB2YXIgaXNPcmRlcmluZ0RpcnR5ID0gZmFsc2U7XG4gICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICBpZiAoIWluamVjdGVkTmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgUGx1Z2luTW9kdWxlID0gaW5qZWN0ZWROYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICAgIGlmICghbmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkgfHxcbiAgICAgICAgICBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSAhPT0gUGx1Z2luTW9kdWxlKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgIW5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdLFxuICAgICAgICAgICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IHR3byBkaWZmZXJlbnQgZXZlbnQgcGx1Z2lucyAnICtcbiAgICAgICAgICAndXNpbmcgdGhlIHNhbWUgbmFtZSwgYCVzYC4nLFxuICAgICAgICAgIHBsdWdpbk5hbWVcbiAgICAgICAgKSA6IGludmFyaWFudCghbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0pKTtcbiAgICAgICAgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0gPSBQbHVnaW5Nb2R1bGU7XG4gICAgICAgIGlzT3JkZXJpbmdEaXJ0eSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc09yZGVyaW5nRGlydHkpIHtcbiAgICAgIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBMb29rcyB1cCB0aGUgcGx1Z2luIGZvciB0aGUgc3VwcGxpZWQgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBBIHN5bnRoZXRpYyBldmVudC5cbiAgICogQHJldHVybiB7P29iamVjdH0gVGhlIHBsdWdpbiB0aGF0IGNyZWF0ZWQgdGhlIHN1cHBsaWVkIGV2ZW50LlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldFBsdWdpbk1vZHVsZUZvckV2ZW50OiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBkaXNwYXRjaENvbmZpZyA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnO1xuICAgIGlmIChkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICByZXR1cm4gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tcbiAgICAgICAgZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZVxuICAgICAgXSB8fCBudWxsO1xuICAgIH1cbiAgICBmb3IgKHZhciBwaGFzZSBpbiBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgaWYgKCFkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcy5oYXNPd25Qcm9wZXJ0eShwaGFzZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgUGx1Z2luTW9kdWxlID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tcbiAgICAgICAgZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcGhhc2VdXG4gICAgICBdO1xuICAgICAgaWYgKFBsdWdpbk1vZHVsZSkge1xuICAgICAgICByZXR1cm4gUGx1Z2luTW9kdWxlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Jlc2V0RXZlbnRQbHVnaW5zOiBmdW5jdGlvbigpIHtcbiAgICBFdmVudFBsdWdpbk9yZGVyID0gbnVsbDtcbiAgICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICBpZiAobmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnMubGVuZ3RoID0gMDtcblxuICAgIHZhciBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncztcbiAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzKSB7XG4gICAgICBpZiAoZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnc1tldmVudE5hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZWdpc3RyYXRpb25OYW1lTW9kdWxlcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM7XG4gICAgZm9yICh2YXIgcmVnaXN0cmF0aW9uTmFtZSBpbiByZWdpc3RyYXRpb25OYW1lTW9kdWxlcykge1xuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHJlZ2lzdHJhdGlvbk5hbWUpKSB7XG4gICAgICAgIGRlbGV0ZSByZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9pbnZhcmlhbnRcIjoyOTcsXCJfcHJvY2Vzc1wiOjF9XSwxNjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudFBsdWdpblV0aWxzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBJbmplY3RlZCBkZXBlbmRlbmNpZXM6XG4gKi9cblxuLyoqXG4gKiAtIGBNb3VudGA6IFtyZXF1aXJlZF0gTW9kdWxlIHRoYXQgY2FuIGNvbnZlcnQgYmV0d2VlbiBSZWFjdCBkb20gSURzIGFuZFxuICogICBhY3R1YWwgbm9kZSByZWZlcmVuY2VzLlxuICovXG52YXIgaW5qZWN0aW9uID0ge1xuICBNb3VudDogbnVsbCxcbiAgaW5qZWN0TW91bnQ6IGZ1bmN0aW9uKEluamVjdGVkTW91bnQpIHtcbiAgICBpbmplY3Rpb24uTW91bnQgPSBJbmplY3RlZE1vdW50O1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIEluamVjdGVkTW91bnQgJiYgSW5qZWN0ZWRNb3VudC5nZXROb2RlLFxuICAgICAgICAnRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0TW91bnQoLi4uKTogSW5qZWN0ZWQgTW91bnQgbW9kdWxlICcgK1xuICAgICAgICAnaXMgbWlzc2luZyBnZXROb2RlLidcbiAgICAgICkgOiBpbnZhcmlhbnQoSW5qZWN0ZWRNb3VudCAmJiBJbmplY3RlZE1vdW50LmdldE5vZGUpKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxuZnVuY3Rpb24gaXNFbmRpc2godG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VVcCB8fFxuICAgICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kIHx8XG4gICAgICAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hDYW5jZWw7XG59XG5cbmZ1bmN0aW9uIGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU1vdmUgfHxcbiAgICAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaE1vdmU7XG59XG5mdW5jdGlvbiBpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93biB8fFxuICAgICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ7XG59XG5cblxudmFyIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzO1xuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICAgIHZhciBkaXNwYXRjaElEcyA9IGV2ZW50Ll9kaXNwYXRjaElEcztcblxuICAgIHZhciBsaXN0ZW5lcnNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpO1xuICAgIHZhciBpZHNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hJRHMpO1xuICAgIHZhciBJRHNMZW4gPSBpZHNJc0FyciA/IGRpc3BhdGNoSURzLmxlbmd0aCA6IGRpc3BhdGNoSURzID8gMSA6IDA7XG4gICAgdmFyIGxpc3RlbmVyc0xlbiA9IGxpc3RlbmVyc0lzQXJyID9cbiAgICAgIGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aCA6XG4gICAgICBkaXNwYXRjaExpc3RlbmVycyA/IDEgOiAwO1xuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGlkc0lzQXJyID09PSBsaXN0ZW5lcnNJc0FyciAmJiBJRHNMZW4gPT09IGxpc3RlbmVyc0xlbixcbiAgICAgICdFdmVudFBsdWdpblV0aWxzOiBJbnZhbGlkIGBldmVudGAuJ1xuICAgICkgOiBpbnZhcmlhbnQoaWRzSXNBcnIgPT09IGxpc3RlbmVyc0lzQXJyICYmIElEc0xlbiA9PT0gbGlzdGVuZXJzTGVuKSk7XG4gIH07XG59XG5cbi8qKlxuICogSW52b2tlcyBgY2IoZXZlbnQsIGxpc3RlbmVyLCBpZClgLiBBdm9pZHMgdXNpbmcgY2FsbCBpZiBubyBzY29wZSBpc1xuICogcHJvdmlkZWQuIFRoZSBgKGxpc3RlbmVyLGlkKWAgcGFpciBlZmZlY3RpdmVseSBmb3JtcyB0aGUgXCJkaXNwYXRjaFwiIGJ1dCBhcmVcbiAqIGtlcHQgc2VwYXJhdGUgdG8gY29uc2VydmUgbWVtb3J5LlxuICovXG5mdW5jdGlvbiBmb3JFYWNoRXZlbnREaXNwYXRjaChldmVudCwgY2IpIHtcbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICB2YXIgZGlzcGF0Y2hJRHMgPSBldmVudC5fZGlzcGF0Y2hJRHM7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBMaXN0ZW5lcnMgYW5kIElEcyBhcmUgdHdvIHBhcmFsbGVsIGFycmF5cyB0aGF0IGFyZSBhbHdheXMgaW4gc3luYy5cbiAgICAgIGNiKGV2ZW50LCBkaXNwYXRjaExpc3RlbmVyc1tpXSwgZGlzcGF0Y2hJRHNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgIGNiKGV2ZW50LCBkaXNwYXRjaExpc3RlbmVycywgZGlzcGF0Y2hJRHMpO1xuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBQbHVnaW5Nb2R1bGUuZXhlY3V0ZURpc3BhdGNoKCkuXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBTeW50aGV0aWNFdmVudCB0byBoYW5kbGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IEFwcGxpY2F0aW9uLWxldmVsIGNhbGxiYWNrXG4gKiBAcGFyYW0ge3N0cmluZ30gZG9tSUQgRE9NIGlkIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIGxpc3RlbmVyLCBkb21JRCkge1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gaW5qZWN0aW9uLk1vdW50LmdldE5vZGUoZG9tSUQpO1xuICB2YXIgcmV0dXJuVmFsdWUgPSBsaXN0ZW5lcihldmVudCwgZG9tSUQpO1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG4vKipcbiAqIFN0YW5kYXJkL3NpbXBsZSBpdGVyYXRpb24gdGhyb3VnaCBhbiBldmVudCdzIGNvbGxlY3RlZCBkaXNwYXRjaGVzLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIGNiKSB7XG4gIGZvckVhY2hFdmVudERpc3BhdGNoKGV2ZW50LCBjYik7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG59XG5cbi8qKlxuICogU3RhbmRhcmQvc2ltcGxlIGl0ZXJhdGlvbiB0aHJvdWdoIGFuIGV2ZW50J3MgY29sbGVjdGVkIGRpc3BhdGNoZXMsIGJ1dCBzdG9wc1xuICogYXQgdGhlIGZpcnN0IGRpc3BhdGNoIGV4ZWN1dGlvbiByZXR1cm5pbmcgdHJ1ZSwgYW5kIHJldHVybnMgdGhhdCBpZC5cbiAqXG4gKiBAcmV0dXJuIGlkIG9mIHRoZSBmaXJzdCBkaXNwYXRjaCBleGVjdXRpb24gd2hvJ3MgbGlzdGVuZXIgcmV0dXJucyB0cnVlLCBvclxuICogbnVsbCBpZiBubyBsaXN0ZW5lciByZXR1cm5lZCB0cnVlLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChldmVudCkge1xuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaElEcyA9IGV2ZW50Ll9kaXNwYXRjaElEcztcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIExpc3RlbmVycyBhbmQgSURzIGFyZSB0d28gcGFyYWxsZWwgYXJyYXlzIHRoYXQgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICAgICAgaWYgKGRpc3BhdGNoTGlzdGVuZXJzW2ldKGV2ZW50LCBkaXNwYXRjaElEc1tpXSkpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoSURzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgIGlmIChkaXNwYXRjaExpc3RlbmVycyhldmVudCwgZGlzcGF0Y2hJRHMpKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hJRHM7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEBzZWUgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGxcbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZShldmVudCkge1xuICB2YXIgcmV0ID0gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZXZlbnQpO1xuICBldmVudC5fZGlzcGF0Y2hJRHMgPSBudWxsO1xuICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIEV4ZWN1dGlvbiBvZiBhIFwiZGlyZWN0XCIgZGlzcGF0Y2ggLSB0aGVyZSBtdXN0IGJlIGF0IG1vc3Qgb25lIGRpc3BhdGNoXG4gKiBhY2N1bXVsYXRlZCBvbiB0aGUgZXZlbnQgb3IgaXQgaXMgY29uc2lkZXJlZCBhbiBlcnJvci4gSXQgZG9lc24ndCByZWFsbHkgbWFrZVxuICogc2Vuc2UgZm9yIGFuIGV2ZW50IHdpdGggbXVsdGlwbGUgZGlzcGF0Y2hlcyAoYnViYmxlZCkgdG8ga2VlcCB0cmFjayBvZiB0aGVcbiAqIHJldHVybiB2YWx1ZXMgYXQgZWFjaCBkaXNwYXRjaCBleGVjdXRpb24sIGJ1dCBpdCBkb2VzIHRlbmQgdG8gbWFrZSBzZW5zZSB3aGVuXG4gKiBkZWFsaW5nIHdpdGggXCJkaXJlY3RcIiBkaXNwYXRjaGVzLlxuICpcbiAqIEByZXR1cm4gVGhlIHJldHVybiB2YWx1ZSBvZiBleGVjdXRpbmcgdGhlIHNpbmdsZSBkaXNwYXRjaC5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpcmVjdERpc3BhdGNoKGV2ZW50KSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXIgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaElEID0gZXZlbnQuX2Rpc3BhdGNoSURzO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICFBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXIpLFxuICAgICdleGVjdXRlRGlyZWN0RGlzcGF0Y2goLi4uKTogSW52YWxpZCBgZXZlbnRgLidcbiAgKSA6IGludmFyaWFudCghQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVyKSkpO1xuICB2YXIgcmVzID0gZGlzcGF0Y2hMaXN0ZW5lciA/XG4gICAgZGlzcGF0Y2hMaXN0ZW5lcihldmVudCwgZGlzcGF0Y2hJRCkgOlxuICAgIG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnRcbiAqIEByZXR1cm4ge2Jvb2x9IFRydWUgaWZmIG51bWJlciBvZiBkaXNwYXRjaGVzIGFjY3VtdWxhdGVkIGlzIGdyZWF0ZXIgdGhhbiAwLlxuICovXG5mdW5jdGlvbiBoYXNEaXNwYXRjaGVzKGV2ZW50KSB7XG4gIHJldHVybiAhIWV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbn1cblxuLyoqXG4gKiBHZW5lcmFsIHV0aWxpdGllcyB0aGF0IGFyZSB1c2VmdWwgaW4gY3JlYXRpbmcgY3VzdG9tIEV2ZW50IFBsdWdpbnMuXG4gKi9cbnZhciBFdmVudFBsdWdpblV0aWxzID0ge1xuICBpc0VuZGlzaDogaXNFbmRpc2gsXG4gIGlzTW92ZWlzaDogaXNNb3ZlaXNoLFxuICBpc1N0YXJ0aXNoOiBpc1N0YXJ0aXNoLFxuXG4gIGV4ZWN1dGVEaXJlY3REaXNwYXRjaDogZXhlY3V0ZURpcmVjdERpc3BhdGNoLFxuICBleGVjdXRlRGlzcGF0Y2g6IGV4ZWN1dGVEaXNwYXRjaCxcbiAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyOiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIsXG4gIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWU6IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUsXG4gIGhhc0Rpc3BhdGNoZXM6IGhhc0Rpc3BhdGNoZXMsXG4gIGluamVjdGlvbjogaW5qZWN0aW9uLFxuICB1c2VUb3VjaEV2ZW50czogZmFsc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5VdGlscztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjoxNjIsXCIuL2ludmFyaWFudFwiOjI5NyxcIl9wcm9jZXNzXCI6MX1dLDE2NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50UHJvcGFnYXRvcnNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIik7XG5cbnZhciBhY2N1bXVsYXRlSW50byA9IHJlcXVpcmUoXCIuL2FjY3VtdWxhdGVJbnRvXCIpO1xudmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IHJlcXVpcmUoXCIuL2ZvckVhY2hBY2N1bXVsYXRlZFwiKTtcblxudmFyIFByb3BhZ2F0aW9uUGhhc2VzID0gRXZlbnRDb25zdGFudHMuUHJvcGFnYXRpb25QaGFzZXM7XG52YXIgZ2V0TGlzdGVuZXIgPSBFdmVudFBsdWdpbkh1Yi5nZXRMaXN0ZW5lcjtcblxuLyoqXG4gKiBTb21lIGV2ZW50IHR5cGVzIGhhdmUgYSBub3Rpb24gb2YgZGlmZmVyZW50IHJlZ2lzdHJhdGlvbiBuYW1lcyBmb3IgZGlmZmVyZW50XG4gKiBcInBoYXNlc1wiIG9mIHByb3BhZ2F0aW9uLiBUaGlzIGZpbmRzIGxpc3RlbmVycyBieSBhIGdpdmVuIHBoYXNlLlxuICovXG5mdW5jdGlvbiBsaXN0ZW5lckF0UGhhc2UoaWQsIGV2ZW50LCBwcm9wYWdhdGlvblBoYXNlKSB7XG4gIHZhciByZWdpc3RyYXRpb25OYW1lID1cbiAgICBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1twcm9wYWdhdGlvblBoYXNlXTtcbiAgcmV0dXJuIGdldExpc3RlbmVyKGlkLCByZWdpc3RyYXRpb25OYW1lKTtcbn1cblxuLyoqXG4gKiBUYWdzIGEgYFN5bnRoZXRpY0V2ZW50YCB3aXRoIGRpc3BhdGNoZWQgbGlzdGVuZXJzLiBDcmVhdGluZyB0aGlzIGZ1bmN0aW9uXG4gKiBoZXJlLCBhbGxvd3MgdXMgdG8gbm90IGhhdmUgdG8gYmluZCBvciBjcmVhdGUgZnVuY3Rpb25zIGZvciBlYWNoIGV2ZW50LlxuICogTXV0YXRpbmcgdGhlIGV2ZW50J3MgbWVtYmVycyBhbGxvd3MgdXMgdG8gbm90IGhhdmUgdG8gY3JlYXRlIGEgd3JhcHBpbmdcbiAqIFwiZGlzcGF0Y2hcIiBvYmplY3QgdGhhdCBwYWlycyB0aGUgZXZlbnQgd2l0aCB0aGUgbGlzdGVuZXIuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMoZG9tSUQsIHVwd2FyZHMsIGV2ZW50KSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICBpZiAoIWRvbUlEKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIGlkIG11c3Qgbm90IGJlIG51bGwnKTtcbiAgICB9XG4gIH1cbiAgdmFyIHBoYXNlID0gdXB3YXJkcyA/IFByb3BhZ2F0aW9uUGhhc2VzLmJ1YmJsZWQgOiBQcm9wYWdhdGlvblBoYXNlcy5jYXB0dXJlZDtcbiAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJBdFBoYXNlKGRvbUlELCBldmVudCwgcGhhc2UpO1xuICBpZiAobGlzdGVuZXIpIHtcbiAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPVxuICAgICAgYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gICAgZXZlbnQuX2Rpc3BhdGNoSURzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoSURzLCBkb21JRCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRpc3BhdGNoZXMgKG11c3QgYmUgZW50aXJlbHkgY29sbGVjdGVkIGJlZm9yZSBkaXNwYXRjaGluZyAtIHNlZSB1bml0XG4gKiB0ZXN0cykuIExhemlseSBhbGxvY2F0ZSB0aGUgYXJyYXkgdG8gY29uc2VydmUgbWVtb3J5LiAgV2UgbXVzdCBsb29wIHRocm91Z2hcbiAqIGVhY2ggZXZlbnQgYW5kIHBlcmZvcm0gdGhlIHRyYXZlcnNhbCBmb3IgZWFjaCBvbmUuIFdlIGNhbiBub3QgcGVyZm9ybSBhXG4gKiBzaW5nbGUgdHJhdmVyc2FsIGZvciB0aGUgZW50aXJlIGNvbGxlY3Rpb24gb2YgZXZlbnRzIGJlY2F1c2UgZWFjaCBldmVudCBtYXlcbiAqIGhhdmUgYSBkaWZmZXJlbnQgdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgIEV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5nZXRJbnN0YW5jZUhhbmRsZSgpLnRyYXZlcnNlVHdvUGhhc2UoXG4gICAgICBldmVudC5kaXNwYXRjaE1hcmtlcixcbiAgICAgIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMsXG4gICAgICBldmVudFxuICAgICk7XG4gIH1cbn1cblxuXG4vKipcbiAqIEFjY3VtdWxhdGVzIHdpdGhvdXQgcmVnYXJkIHRvIGRpcmVjdGlvbiwgZG9lcyBub3QgbG9vayBmb3IgcGhhc2VkXG4gKiByZWdpc3RyYXRpb24gbmFtZXMuIFNhbWUgYXMgYGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlYCBidXQgd2l0aG91dFxuICogcmVxdWlyaW5nIHRoYXQgdGhlIGBkaXNwYXRjaE1hcmtlcmAgYmUgdGhlIHNhbWUgYXMgdGhlIGRpc3BhdGNoZWQgSUQuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXNwYXRjaGVzKGlkLCBpZ25vcmVkRGlyZWN0aW9uLCBldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZTtcbiAgICB2YXIgbGlzdGVuZXIgPSBnZXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPVxuICAgICAgICBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaElEcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaElEcywgaWQpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY3VtdWxhdGVzIGRpc3BhdGNoZXMgb24gYW4gYFN5bnRoZXRpY0V2ZW50YCwgYnV0IG9ubHkgZm9yIHRoZVxuICogYGRpc3BhdGNoTWFya2VyYC5cbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgYWNjdW11bGF0ZURpc3BhdGNoZXMoZXZlbnQuZGlzcGF0Y2hNYXJrZXIsIG51bGwsIGV2ZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKTtcbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbUlELCB0b0lEKSB7XG4gIEV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5nZXRJbnN0YW5jZUhhbmRsZSgpLnRyYXZlcnNlRW50ZXJMZWF2ZShcbiAgICBmcm9tSUQsXG4gICAgdG9JRCxcbiAgICBhY2N1bXVsYXRlRGlzcGF0Y2hlcyxcbiAgICBsZWF2ZSxcbiAgICBlbnRlclxuICApO1xufVxuXG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSk7XG59XG5cblxuXG4vKipcbiAqIEEgc21hbGwgc2V0IG9mIHByb3BhZ2F0aW9uIHBhdHRlcm5zLCBlYWNoIG9mIHdoaWNoIHdpbGwgYWNjZXB0IGEgc21hbGwgYW1vdW50XG4gKiBvZiBpbmZvcm1hdGlvbiwgYW5kIGdlbmVyYXRlIGEgc2V0IG9mIFwiZGlzcGF0Y2ggcmVhZHkgZXZlbnQgb2JqZWN0c1wiIC0gd2hpY2hcbiAqIGFyZSBzZXRzIG9mIGV2ZW50cyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGFubm90YXRlZCB3aXRoIGEgc2V0IG9mIGRpc3BhdGNoZWRcbiAqIGxpc3RlbmVyIGZ1bmN0aW9ucy9pZHMuIFRoZSBBUEkgaXMgZGVzaWduZWQgdGhpcyB3YXkgdG8gZGlzY291cmFnZSB0aGVzZVxuICogcHJvcGFnYXRpb24gc3RyYXRlZ2llcyBmcm9tIGFjdHVhbGx5IGV4ZWN1dGluZyB0aGUgZGlzcGF0Y2hlcywgc2luY2Ugd2VcbiAqIGFsd2F5cyB3YW50IHRvIGNvbGxlY3QgdGhlIGVudGlyZSBzZXQgb2YgZGlzcGF0Y2hlcyBiZWZvcmUgZXhlY3V0aW5nIGV2ZW50IGFcbiAqIHNpbmdsZSBvbmUuXG4gKlxuICogQGNvbnN0cnVjdG9yIEV2ZW50UHJvcGFnYXRvcnNcbiAqL1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSB7XG4gIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMsXG4gIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyxcbiAgYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOiBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQcm9wYWdhdG9ycztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjoxNjIsXCIuL0V2ZW50UGx1Z2luSHViXCI6MTY0LFwiLi9hY2N1bXVsYXRlSW50b1wiOjI2NSxcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCI6MjgyLFwiX3Byb2Nlc3NcIjoxfV0sMTY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFeGVjdXRpb25FbnZpcm9ubWVudFxuICovXG5cbi8qanNsaW50IGV2aWw6IHRydWUgKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjYW5Vc2VET00gPSAhIShcbiAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudClcbik7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczpcbiAgICBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXG59LHt9XSwxNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBnZXRUZXh0Q29udGVudEFjY2Vzc29yID0gcmVxdWlyZShcIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclwiKTtcblxuLyoqXG4gKiBUaGlzIGhlbHBlciBjbGFzcyBzdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgdGV4dCBjb250ZW50IG9mIGEgdGFyZ2V0IG5vZGUsXG4gKiBhbGxvd2luZyBjb21wYXJpc29uIG9mIGNvbnRlbnQgYmVmb3JlIGFuZCBhZnRlciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIElkZW50aWZ5IHRoZSBub2RlIHdoZXJlIHNlbGVjdGlvbiBjdXJyZW50bHkgYmVnaW5zLCB0aGVuIG9ic2VydmVcbiAqIGJvdGggaXRzIHRleHQgY29udGVudCBhbmQgaXRzIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIERPTS4gU2luY2UgdGhlXG4gKiBicm93c2VyIG1heSBuYXRpdmVseSByZXBsYWNlIHRoZSB0YXJnZXQgbm9kZSBkdXJpbmcgY29tcG9zaXRpb24sIHdlIGNhblxuICogdXNlIGl0cyBwb3NpdGlvbiB0byBmaW5kIGl0cyByZXBsYWNlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSByb290XG4gKi9cbmZ1bmN0aW9uIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZShyb290KSB7XG4gIHRoaXMuX3Jvb3QgPSByb290O1xuICB0aGlzLl9zdGFydFRleHQgPSB0aGlzLmdldFRleHQoKTtcbiAgdGhpcy5fZmFsbGJhY2tUZXh0ID0gbnVsbDtcbn1cblxuYXNzaWduKEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5wcm90b3R5cGUsIHtcbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IHRleHQgb2YgaW5wdXQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldFRleHQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICgndmFsdWUnIGluIHRoaXMuX3Jvb3QpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yb290LnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcm9vdFtnZXRUZXh0Q29udGVudEFjY2Vzc29yKCldO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgdGhlIGRpZmZlcmluZyBzdWJzdHJpbmcgYmV0d2VlbiB0aGUgaW5pdGlhbGx5IHN0b3JlZFxuICAgKiB0ZXh0IGNvbnRlbnQgYW5kIHRoZSBjdXJyZW50IGNvbnRlbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldERhdGE6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9mYWxsYmFja1RleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mYWxsYmFja1RleHQ7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0O1xuICAgIHZhciBzdGFydFZhbHVlID0gdGhpcy5fc3RhcnRUZXh0O1xuICAgIHZhciBzdGFydExlbmd0aCA9IHN0YXJ0VmFsdWUubGVuZ3RoO1xuICAgIHZhciBlbmQ7XG4gICAgdmFyIGVuZFZhbHVlID0gdGhpcy5nZXRUZXh0KCk7XG4gICAgdmFyIGVuZExlbmd0aCA9IGVuZFZhbHVlLmxlbmd0aDtcblxuICAgIGZvciAoc3RhcnQgPSAwOyBzdGFydCA8IHN0YXJ0TGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydF0gIT09IGVuZFZhbHVlW3N0YXJ0XSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbWluRW5kID0gc3RhcnRMZW5ndGggLSBzdGFydDtcbiAgICBmb3IgKGVuZCA9IDE7IGVuZCA8PSBtaW5FbmQ7IGVuZCsrKSB7XG4gICAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydExlbmd0aCAtIGVuZF0gIT09IGVuZFZhbHVlW2VuZExlbmd0aCAtIGVuZF0pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNsaWNlVGFpbCA9IGVuZCA+IDEgPyAxIC0gZW5kIDogdW5kZWZpbmVkO1xuICAgIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IGVuZFZhbHVlLnNsaWNlKHN0YXJ0LCBzbGljZVRhaWwpO1xuICAgIHJldHVybiB0aGlzLl9mYWxsYmFja1RleHQ7XG4gIH1cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGU7XG5cbn0se1wiLi9PYmplY3QuYXNzaWduXCI6MTc1LFwiLi9Qb29sZWRDbGFzc1wiOjE3NixcIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclwiOjI5Mn1dLDE3MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgSFRNTERPTVByb3BlcnR5Q29uZmlnXG4gKi9cblxuLypqc2xpbnQgYml0d2lzZTogdHJ1ZSovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIE1VU1RfVVNFX0FUVFJJQlVURSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5NVVNUX1VTRV9BVFRSSUJVVEU7XG52YXIgTVVTVF9VU0VfUFJPUEVSVFkgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uTVVTVF9VU0VfUFJPUEVSVFk7XG52YXIgSEFTX0JPT0xFQU5fVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUU7XG52YXIgSEFTX1NJREVfRUZGRUNUUyA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfU0lERV9FRkZFQ1RTO1xudmFyIEhBU19OVU1FUklDX1ZBTFVFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19OVU1FUklDX1ZBTFVFO1xudmFyIEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFID1cbiAgRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFO1xudmFyIEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUgPVxuICBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRTtcblxudmFyIGhhc1NWRztcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdmFyIGltcGxlbWVudGF0aW9uID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb247XG4gIGhhc1NWRyA9IChcbiAgICBpbXBsZW1lbnRhdGlvbiAmJlxuICAgIGltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiZcbiAgICBpbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKFxuICAgICAgJ2h0dHA6Ly93d3cudzMub3JnL1RSL1NWRzExL2ZlYXR1cmUjQmFzaWNTdHJ1Y3R1cmUnLFxuICAgICAgJzEuMSdcbiAgICApXG4gICk7XG59XG5cblxudmFyIEhUTUxET01Qcm9wZXJ0eUNvbmZpZyA9IHtcbiAgaXNDdXN0b21BdHRyaWJ1dGU6IFJlZ0V4cC5wcm90b3R5cGUudGVzdC5iaW5kKFxuICAgIC9eKGRhdGF8YXJpYSktW2Etel9dW2EtelxcZF8uXFwtXSokL1xuICApLFxuICBQcm9wZXJ0aWVzOiB7XG4gICAgLyoqXG4gICAgICogU3RhbmRhcmQgUHJvcGVydGllc1xuICAgICAqL1xuICAgIGFjY2VwdDogbnVsbCxcbiAgICBhY2NlcHRDaGFyc2V0OiBudWxsLFxuICAgIGFjY2Vzc0tleTogbnVsbCxcbiAgICBhY3Rpb246IG51bGwsXG4gICAgYWxsb3dGdWxsU2NyZWVuOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBhbGxvd1RyYW5zcGFyZW5jeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGFsdDogbnVsbCxcbiAgICBhc3luYzogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYXV0b0NvbXBsZXRlOiBudWxsLFxuICAgIC8vIGF1dG9Gb2N1cyBpcyBwb2x5ZmlsbGVkL25vcm1hbGl6ZWQgYnkgQXV0b0ZvY3VzTWl4aW5cbiAgICAvLyBhdXRvRm9jdXM6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGF1dG9QbGF5OiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjZWxsUGFkZGluZzogbnVsbCxcbiAgICBjZWxsU3BhY2luZzogbnVsbCxcbiAgICBjaGFyU2V0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgY2hlY2tlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjbGFzc0lEOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgLy8gVG8gc2V0IGNsYXNzTmFtZSBvbiBTVkcgZWxlbWVudHMsIGl0J3MgbmVjZXNzYXJ5IHRvIHVzZSAuc2V0QXR0cmlidXRlO1xuICAgIC8vIHRoaXMgd29ya3Mgb24gSFRNTCBlbGVtZW50cyB0b28gaW4gYWxsIGJyb3dzZXJzIGV4Y2VwdCBJRTguIENvbnZlbmllbnRseSxcbiAgICAvLyBJRTggZG9lc24ndCBzdXBwb3J0IFNWRyBhbmQgc28gd2UgY2FuIHNpbXBseSB1c2UgdGhlIGF0dHJpYnV0ZSBpblxuICAgIC8vIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBTVkcgYW5kIHRoZSBwcm9wZXJ0eSBpbiBicm93c2VycyB0aGF0IGRvbid0LFxuICAgIC8vIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGUgZWxlbWVudCBpcyBIVE1MIG9yIFNWRy5cbiAgICBjbGFzc05hbWU6IGhhc1NWRyA/IE1VU1RfVVNFX0FUVFJJQlVURSA6IE1VU1RfVVNFX1BST1BFUlRZLFxuICAgIGNvbHM6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIGNvbFNwYW46IG51bGwsXG4gICAgY29udGVudDogbnVsbCxcbiAgICBjb250ZW50RWRpdGFibGU6IG51bGwsXG4gICAgY29udGV4dE1lbnU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBjb250cm9sczogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjb29yZHM6IG51bGwsXG4gICAgY3Jvc3NPcmlnaW46IG51bGwsXG4gICAgZGF0YTogbnVsbCwgLy8gRm9yIGA8b2JqZWN0IC8+YCBhY3RzIGFzIGBzcmNgLlxuICAgIGRhdGVUaW1lOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZGVmZXI6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRpcjogbnVsbCxcbiAgICBkaXNhYmxlZDogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZG93bmxvYWQ6IEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUsXG4gICAgZHJhZ2dhYmxlOiBudWxsLFxuICAgIGVuY1R5cGU6IG51bGwsXG4gICAgZm9ybTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvcm1BY3Rpb246IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtRW5jVHlwZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvcm1NZXRob2Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtTm9WYWxpZGF0ZTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZm9ybVRhcmdldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZyYW1lQm9yZGVyOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaGVhZGVyczogbnVsbCxcbiAgICBoZWlnaHQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBoaWRkZW46IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGhpZ2g6IG51bGwsXG4gICAgaHJlZjogbnVsbCxcbiAgICBocmVmTGFuZzogbnVsbCxcbiAgICBodG1sRm9yOiBudWxsLFxuICAgIGh0dHBFcXVpdjogbnVsbCxcbiAgICBpY29uOiBudWxsLFxuICAgIGlkOiBNVVNUX1VTRV9QUk9QRVJUWSxcbiAgICBsYWJlbDogbnVsbCxcbiAgICBsYW5nOiBudWxsLFxuICAgIGxpc3Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBsb29wOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGxvdzogbnVsbCxcbiAgICBtYW5pZmVzdDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmdpbkhlaWdodDogbnVsbCxcbiAgICBtYXJnaW5XaWR0aDogbnVsbCxcbiAgICBtYXg6IG51bGwsXG4gICAgbWF4TGVuZ3RoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWVkaWE6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtZWRpYUdyb3VwOiBudWxsLFxuICAgIG1ldGhvZDogbnVsbCxcbiAgICBtaW46IG51bGwsXG4gICAgbXVsdGlwbGU6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgbXV0ZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgbmFtZTogbnVsbCxcbiAgICBub1ZhbGlkYXRlOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBvcGVuOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBvcHRpbXVtOiBudWxsLFxuICAgIHBhdHRlcm46IG51bGwsXG4gICAgcGxhY2Vob2xkZXI6IG51bGwsXG4gICAgcG9zdGVyOiBudWxsLFxuICAgIHByZWxvYWQ6IG51bGwsXG4gICAgcmFkaW9Hcm91cDogbnVsbCxcbiAgICByZWFkT25seTogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICByZWw6IG51bGwsXG4gICAgcmVxdWlyZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJvbGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByb3dzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICByb3dTcGFuOiBudWxsLFxuICAgIHNhbmRib3g6IG51bGwsXG4gICAgc2NvcGU6IG51bGwsXG4gICAgc2NvcGVkOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzY3JvbGxpbmc6IG51bGwsXG4gICAgc2VhbWxlc3M6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNlbGVjdGVkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNoYXBlOiBudWxsLFxuICAgIHNpemU6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHNpemVzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3BhbjogSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgc3BlbGxDaGVjazogbnVsbCxcbiAgICBzcmM6IG51bGwsXG4gICAgc3JjRG9jOiBNVVNUX1VTRV9QUk9QRVJUWSxcbiAgICBzcmNTZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdGFydDogSEFTX05VTUVSSUNfVkFMVUUsXG4gICAgc3RlcDogbnVsbCxcbiAgICBzdHlsZTogbnVsbCxcbiAgICB0YWJJbmRleDogbnVsbCxcbiAgICB0YXJnZXQ6IG51bGwsXG4gICAgdGl0bGU6IG51bGwsXG4gICAgdHlwZTogbnVsbCxcbiAgICB1c2VNYXA6IG51bGwsXG4gICAgdmFsdWU6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX1NJREVfRUZGRUNUUyxcbiAgICB3aWR0aDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHdtb2RlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cbiAgICAvKipcbiAgICAgKiBOb24tc3RhbmRhcmQgUHJvcGVydGllc1xuICAgICAqL1xuICAgIC8vIGF1dG9DYXBpdGFsaXplIGFuZCBhdXRvQ29ycmVjdCBhcmUgc3VwcG9ydGVkIGluIE1vYmlsZSBTYWZhcmkgZm9yXG4gICAgLy8ga2V5Ym9hcmQgaGludHMuXG4gICAgYXV0b0NhcGl0YWxpemU6IG51bGwsXG4gICAgYXV0b0NvcnJlY3Q6IG51bGwsXG4gICAgLy8gaXRlbVByb3AsIGl0ZW1TY29wZSwgaXRlbVR5cGUgYXJlIGZvclxuICAgIC8vIE1pY3JvZGF0YSBzdXBwb3J0LiBTZWUgaHR0cDovL3NjaGVtYS5vcmcvZG9jcy9ncy5odG1sXG4gICAgaXRlbVByb3A6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBpdGVtU2NvcGU6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGl0ZW1UeXBlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgLy8gaXRlbUlEIGFuZCBpdGVtUmVmIGFyZSBmb3IgTWljcm9kYXRhIHN1cHBvcnQgYXMgd2VsbCBidXRcbiAgICAvLyBvbmx5IHNwZWNpZmllZCBpbiB0aGUgdGhlIFdIQVRXRyBzcGVjIGRvY3VtZW50LiBTZWVcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9taWNyb2RhdGEuaHRtbCNtaWNyb2RhdGEtZG9tLWFwaVxuICAgIGl0ZW1JRDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGl0ZW1SZWY6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICAvLyBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQgZm9yIE9wZW5HcmFwaCBpbiBtZXRhIHRhZ3MuXG4gICAgcHJvcGVydHk6IG51bGwsXG4gICAgLy8gSUUtb25seSBhdHRyaWJ1dGUgdGhhdCBjb250cm9scyBmb2N1cyBiZWhhdmlvclxuICAgIHVuc2VsZWN0YWJsZTogTVVTVF9VU0VfQVRUUklCVVRFXG4gIH0sXG4gIERPTUF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgYWNjZXB0Q2hhcnNldDogJ2FjY2VwdC1jaGFyc2V0JyxcbiAgICBjbGFzc05hbWU6ICdjbGFzcycsXG4gICAgaHRtbEZvcjogJ2ZvcicsXG4gICAgaHR0cEVxdWl2OiAnaHR0cC1lcXVpdidcbiAgfSxcbiAgRE9NUHJvcGVydHlOYW1lczoge1xuICAgIGF1dG9DYXBpdGFsaXplOiAnYXV0b2NhcGl0YWxpemUnLFxuICAgIGF1dG9Db21wbGV0ZTogJ2F1dG9jb21wbGV0ZScsXG4gICAgYXV0b0NvcnJlY3Q6ICdhdXRvY29ycmVjdCcsXG4gICAgYXV0b0ZvY3VzOiAnYXV0b2ZvY3VzJyxcbiAgICBhdXRvUGxheTogJ2F1dG9wbGF5JyxcbiAgICAvLyBgZW5jb2RpbmdgIGlzIGVxdWl2YWxlbnQgdG8gYGVuY3R5cGVgLCBJRTggbGFja3MgYW4gYGVuY3R5cGVgIHNldHRlci5cbiAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9mb3Jtcy5odG1sI2RvbS1mcy1lbmNvZGluZ1xuICAgIGVuY1R5cGU6ICdlbmNvZGluZycsXG4gICAgaHJlZkxhbmc6ICdocmVmbGFuZycsXG4gICAgcmFkaW9Hcm91cDogJ3JhZGlvZ3JvdXAnLFxuICAgIHNwZWxsQ2hlY2s6ICdzcGVsbGNoZWNrJyxcbiAgICBzcmNEb2M6ICdzcmNkb2MnLFxuICAgIHNyY1NldDogJ3NyY3NldCdcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBIVE1MRE9NUHJvcGVydHlDb25maWc7XG5cbn0se1wiLi9ET01Qcm9wZXJ0eVwiOjE1NyxcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoxNjh9XSwxNzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIExpbmtlZFN0YXRlTWl4aW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RMaW5rID0gcmVxdWlyZShcIi4vUmVhY3RMaW5rXCIpO1xudmFyIFJlYWN0U3RhdGVTZXR0ZXJzID0gcmVxdWlyZShcIi4vUmVhY3RTdGF0ZVNldHRlcnNcIik7XG5cbi8qKlxuICogQSBzaW1wbGUgbWl4aW4gYXJvdW5kIFJlYWN0TGluay5mb3JTdGF0ZSgpLlxuICovXG52YXIgTGlua2VkU3RhdGVNaXhpbiA9IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIFJlYWN0TGluayB0aGF0J3MgbGlua2VkIHRvIHBhcnQgb2YgdGhpcyBjb21wb25lbnQncyBzdGF0ZS4gVGhlXG4gICAqIFJlYWN0TGluayB3aWxsIGhhdmUgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhpcy5zdGF0ZVtrZXldIGFuZCB3aWxsIGNhbGxcbiAgICogc2V0U3RhdGUoKSB3aGVuIGEgY2hhbmdlIGlzIHJlcXVlc3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBzdGF0ZSBrZXkgdG8gdXBkYXRlLiBOb3RlOiB5b3UgbWF5IHdhbnQgdG8gdXNlIGtleU9mKClcbiAgICogaWYgeW91J3JlIHVzaW5nIEdvb2dsZSBDbG9zdXJlIENvbXBpbGVyIGFkdmFuY2VkIG1vZGUuXG4gICAqIEByZXR1cm4ge1JlYWN0TGlua30gUmVhY3RMaW5rIGluc3RhbmNlIGxpbmtpbmcgdG8gdGhlIHN0YXRlLlxuICAgKi9cbiAgbGlua1N0YXRlOiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gbmV3IFJlYWN0TGluayhcbiAgICAgIHRoaXMuc3RhdGVba2V5XSxcbiAgICAgIFJlYWN0U3RhdGVTZXR0ZXJzLmNyZWF0ZVN0YXRlS2V5U2V0dGVyKHRoaXMsIGtleSlcbiAgICApO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmtlZFN0YXRlTWl4aW47XG5cbn0se1wiLi9SZWFjdExpbmtcIjoyMjEsXCIuL1JlYWN0U3RhdGVTZXR0ZXJzXCI6MjQwfV0sMTcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTGlua2VkVmFsdWVVdGlsc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVzXCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgaGFzUmVhZE9ubHlWYWx1ZSA9IHtcbiAgJ2J1dHRvbic6IHRydWUsXG4gICdjaGVja2JveCc6IHRydWUsXG4gICdpbWFnZSc6IHRydWUsXG4gICdoaWRkZW4nOiB0cnVlLFxuICAncmFkaW8nOiB0cnVlLFxuICAncmVzZXQnOiB0cnVlLFxuICAnc3VibWl0JzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpbnB1dC5wcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0LnByb3BzLnZhbHVlTGluayA9PSBudWxsLFxuICAgICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIHZhbHVlTGluay4gSWYgeW91IHdhbnQgdG8gdXNlICcgK1xuICAgICdjaGVja2VkTGluaywgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byB1c2UgdmFsdWVMaW5rIGFuZCB2aWNlIHZlcnNhLidcbiAgKSA6IGludmFyaWFudChpbnB1dC5wcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0LnByb3BzLnZhbHVlTGluayA9PSBudWxsKSk7XG59XG5mdW5jdGlvbiBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0KSB7XG4gIF9hc3NlcnRTaW5nbGVMaW5rKGlucHV0KTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpbnB1dC5wcm9wcy52YWx1ZSA9PSBudWxsICYmIGlucHV0LnByb3BzLm9uQ2hhbmdlID09IG51bGwsXG4gICAgJ0Nhbm5vdCBwcm92aWRlIGEgdmFsdWVMaW5rIGFuZCBhIHZhbHVlIG9yIG9uQ2hhbmdlIGV2ZW50LiBJZiB5b3Ugd2FudCAnICtcbiAgICAndG8gdXNlIHZhbHVlIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvIHVzZSB2YWx1ZUxpbmsuJ1xuICApIDogaW52YXJpYW50KGlucHV0LnByb3BzLnZhbHVlID09IG51bGwgJiYgaW5wdXQucHJvcHMub25DaGFuZ2UgPT0gbnVsbCkpO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXQpIHtcbiAgX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXQpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGlucHV0LnByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dC5wcm9wcy5vbkNoYW5nZSA9PSBudWxsLFxuICAgICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIGNoZWNrZWQgcHJvcGVydHkgb3Igb25DaGFuZ2UgZXZlbnQuICcgK1xuICAgICdJZiB5b3Ugd2FudCB0byB1c2UgY2hlY2tlZCBvciBvbkNoYW5nZSwgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byAnICtcbiAgICAndXNlIGNoZWNrZWRMaW5rJ1xuICApIDogaW52YXJpYW50KGlucHV0LnByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dC5wcm9wcy5vbkNoYW5nZSA9PSBudWxsKSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZSBjaGFuZ2UgZXZlbnQgdG8gaGFuZGxlXG4gKi9cbmZ1bmN0aW9uIF9oYW5kbGVMaW5rZWRWYWx1ZUNoYW5nZShlKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHRoaXMucHJvcHMudmFsdWVMaW5rLnJlcXVlc3RDaGFuZ2UoZS50YXJnZXQudmFsdWUpO1xufVxuXG4vKipcbiAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBlIGNoYW5nZSBldmVudCB0byBoYW5kbGVcbiAgKi9cbmZ1bmN0aW9uIF9oYW5kbGVMaW5rZWRDaGVja0NoYW5nZShlKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHRoaXMucHJvcHMuY2hlY2tlZExpbmsucmVxdWVzdENoYW5nZShlLnRhcmdldC5jaGVja2VkKTtcbn1cblxuLyoqXG4gKiBQcm92aWRlIGEgbGlua2VkIGB2YWx1ZWAgYXR0cmlidXRlIGZvciBjb250cm9sbGVkIGZvcm1zLiBZb3Ugc2hvdWxkIG5vdCB1c2VcbiAqIHRoaXMgb3V0c2lkZSBvZiB0aGUgUmVhY3RET00gY29udHJvbGxlZCBmb3JtIGNvbXBvbmVudHMuXG4gKi9cbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0ge1xuICBNaXhpbjoge1xuICAgIHByb3BUeXBlczoge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fFxuICAgICAgICAgICAgaGFzUmVhZE9ubHlWYWx1ZVtwcm9wcy50eXBlXSB8fFxuICAgICAgICAgICAgcHJvcHMub25DaGFuZ2UgfHxcbiAgICAgICAgICAgIHByb3BzLnJlYWRPbmx5IHx8XG4gICAgICAgICAgICBwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1lvdSBwcm92aWRlZCBhIGB2YWx1ZWAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICtcbiAgICAgICAgICAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICtcbiAgICAgICAgICAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdFZhbHVlYC4gT3RoZXJ3aXNlLCAnICtcbiAgICAgICAgICAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJ1xuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIGNoZWNrZWQ6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fFxuICAgICAgICAgICAgcHJvcHMub25DaGFuZ2UgfHxcbiAgICAgICAgICAgIHByb3BzLnJlYWRPbmx5IHx8XG4gICAgICAgICAgICBwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1lvdSBwcm92aWRlZCBhIGBjaGVja2VkYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgK1xuICAgICAgICAgICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgK1xuICAgICAgICAgICd0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBkZWZhdWx0Q2hlY2tlZGAuIE90aGVyd2lzZSwgJyArXG4gICAgICAgICAgJ3NldCBlaXRoZXIgYG9uQ2hhbmdlYCBvciBgcmVhZE9ubHlgLidcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBvbkNoYW5nZTogUmVhY3RQcm9wVHlwZXMuZnVuY1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW5wdXQgRm9ybSBjb21wb25lbnRcbiAgICogQHJldHVybiB7Kn0gY3VycmVudCB2YWx1ZSBvZiB0aGUgaW5wdXQgZWl0aGVyIGZyb20gdmFsdWUgcHJvcCBvciBsaW5rLlxuICAgKi9cbiAgZ2V0VmFsdWU6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgaWYgKGlucHV0LnByb3BzLnZhbHVlTGluaykge1xuICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dCk7XG4gICAgICByZXR1cm4gaW5wdXQucHJvcHMudmFsdWVMaW5rLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQucHJvcHMudmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGlucHV0IEZvcm0gY29tcG9uZW50XG4gICAqIEByZXR1cm4geyp9IGN1cnJlbnQgY2hlY2tlZCBzdGF0dXMgb2YgdGhlIGlucHV0IGVpdGhlciBmcm9tIGNoZWNrZWQgcHJvcFxuICAgKiAgICAgICAgICAgICBvciBsaW5rLlxuICAgKi9cbiAgZ2V0Q2hlY2tlZDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQucHJvcHMuY2hlY2tlZExpbmspIHtcbiAgICAgIF9hc3NlcnRDaGVja2VkTGluayhpbnB1dCk7XG4gICAgICByZXR1cm4gaW5wdXQucHJvcHMuY2hlY2tlZExpbmsudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dC5wcm9wcy5jaGVja2VkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnB1dCBGb3JtIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gY2hhbmdlIGNhbGxiYWNrIGVpdGhlciBmcm9tIG9uQ2hhbmdlIHByb3Agb3IgbGluay5cbiAgICovXG4gIGdldE9uQ2hhbmdlOiBmdW5jdGlvbihpbnB1dCkge1xuICAgIGlmIChpbnB1dC5wcm9wcy52YWx1ZUxpbmspIHtcbiAgICAgIF9hc3NlcnRWYWx1ZUxpbmsoaW5wdXQpO1xuICAgICAgcmV0dXJuIF9oYW5kbGVMaW5rZWRWYWx1ZUNoYW5nZTtcbiAgICB9IGVsc2UgaWYgKGlucHV0LnByb3BzLmNoZWNrZWRMaW5rKSB7XG4gICAgICBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXQpO1xuICAgICAgcmV0dXJuIF9oYW5kbGVMaW5rZWRDaGVja0NoYW5nZTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0LnByb3BzLm9uQ2hhbmdlO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmtlZFZhbHVlVXRpbHM7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0UHJvcFR5cGVzXCI6MjMyLFwiLi9pbnZhcmlhbnRcIjoyOTcsXCJfcHJvY2Vzc1wiOjF9XSwxNzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBMb2NhbEV2ZW50VHJhcE1peGluXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKFwiLi9hY2N1bXVsYXRlSW50b1wiKTtcbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSByZXF1aXJlKFwiLi9mb3JFYWNoQWNjdW11bGF0ZWRcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG5mdW5jdGlvbiByZW1vdmUoZXZlbnQpIHtcbiAgZXZlbnQucmVtb3ZlKCk7XG59XG5cbnZhciBMb2NhbEV2ZW50VHJhcE1peGluID0ge1xuICB0cmFwQnViYmxlZEV2ZW50OmZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudCh0aGlzLmlzTW91bnRlZCgpLCAnTXVzdCBiZSBtb3VudGVkIHRvIHRyYXAgZXZlbnRzJykgOiBpbnZhcmlhbnQodGhpcy5pc01vdW50ZWQoKSkpO1xuICAgIC8vIElmIGEgY29tcG9uZW50IHJlbmRlcnMgdG8gbnVsbCBvciBpZiBhbm90aGVyIGNvbXBvbmVudCBmYXRhbHMgYW5kIGNhdXNlc1xuICAgIC8vIHRoZSBzdGF0ZSBvZiB0aGUgdHJlZSB0byBiZSBjb3JydXB0ZWQsIGBub2RlYCBoZXJlIGNhbiBiZSBudWxsLlxuICAgIHZhciBub2RlID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIG5vZGUsXG4gICAgICAnTG9jYWxFdmVudFRyYXBNaXhpbi50cmFwQnViYmxlZEV2ZW50KC4uLik6IFJlcXVpcmVzIG5vZGUgdG8gYmUgcmVuZGVyZWQuJ1xuICAgICkgOiBpbnZhcmlhbnQobm9kZSkpO1xuICAgIHZhciBsaXN0ZW5lciA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgaGFuZGxlckJhc2VOYW1lLFxuICAgICAgbm9kZVxuICAgICk7XG4gICAgdGhpcy5fbG9jYWxFdmVudExpc3RlbmVycyA9XG4gICAgICBhY2N1bXVsYXRlSW50byh0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gIH0sXG5cbiAgLy8gdHJhcENhcHR1cmVkRXZlbnQgd291bGQgbG9vayBuZWFybHkgaWRlbnRpY2FsLiBXZSBkb24ndCBpbXBsZW1lbnQgdGhhdFxuICAvLyBtZXRob2QgYmVjYXVzZSBpdCBpc24ndCBjdXJyZW50bHkgbmVlZGVkLlxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OmZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzKSB7XG4gICAgICBmb3JFYWNoQWNjdW11bGF0ZWQodGhpcy5fbG9jYWxFdmVudExpc3RlbmVycywgcmVtb3ZlKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTG9jYWxFdmVudFRyYXBNaXhpbjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCI6MTc5LFwiLi9hY2N1bXVsYXRlSW50b1wiOjI2NSxcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCI6MjgyLFwiLi9pbnZhcmlhbnRcIjoyOTcsXCJfcHJvY2Vzc1wiOjF9XSwxNzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbi8qKlxuICogTW9iaWxlIFNhZmFyaSBkb2VzIG5vdCBmaXJlIHByb3Blcmx5IGJ1YmJsZSBjbGljayBldmVudHMgb24gbm9uLWludGVyYWN0aXZlXG4gKiBlbGVtZW50cywgd2hpY2ggbWVhbnMgZGVsZWdhdGVkIGNsaWNrIGxpc3RlbmVycyBkbyBub3QgZmlyZS4gVGhlIHdvcmthcm91bmRcbiAqIGZvciB0aGlzIGJ1ZyBpbnZvbHZlcyBhdHRhY2hpbmcgYW4gZW1wdHkgY2xpY2sgbGlzdGVuZXIgb24gdGhlIHRhcmdldCBub2RlLlxuICpcbiAqIFRoaXMgcGFydGljdWxhciBwbHVnaW4gd29ya3MgYXJvdW5kIHRoZSBidWcgYnkgYXR0YWNoaW5nIGFuIGVtcHR5IGNsaWNrXG4gKiBsaXN0ZW5lciBvbiBgdG91Y2hzdGFydGAgKHdoaWNoIGRvZXMgZmlyZSBvbiBldmVyeSBlbGVtZW50KS5cbiAqL1xudmFyIE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogbnVsbCxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0KSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gbmF0aXZlRXZlbnQudGFyZ2V0O1xuICAgICAgaWYgKHRhcmdldCAmJiAhdGFyZ2V0Lm9uY2xpY2spIHtcbiAgICAgICAgdGFyZ2V0Lm9uY2xpY2sgPSBlbXB0eUZ1bmN0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW47XG5cbn0se1wiLi9FdmVudENvbnN0YW50c1wiOjE2MixcIi4vZW1wdHlGdW5jdGlvblwiOjI3Nn1dLDE3NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgT2JqZWN0LmFzc2lnblxuICovXG5cbi8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1vYmplY3QuYXNzaWduXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlcykge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIHRhcmdldCBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgfVxuXG4gIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIGZvciAodmFyIG5leHRJbmRleCA9IDE7IG5leHRJbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IG5leHRJbmRleCsrKSB7XG4gICAgdmFyIG5leHRTb3VyY2UgPSBhcmd1bWVudHNbbmV4dEluZGV4XTtcbiAgICBpZiAobmV4dFNvdXJjZSA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgZnJvbSA9IE9iamVjdChuZXh0U291cmNlKTtcblxuICAgIC8vIFdlIGRvbid0IGN1cnJlbnRseSBzdXBwb3J0IGFjY2Vzc29ycyBub3IgcHJveGllcy4gVGhlcmVmb3JlIHRoaXNcbiAgICAvLyBjb3B5IGNhbm5vdCB0aHJvdy4gSWYgd2UgZXZlciBzdXBwb3J0ZWQgdGhpcyB0aGVuIHdlIG11c3QgaGFuZGxlXG4gICAgLy8gZXhjZXB0aW9ucyBhbmQgc2lkZS1lZmZlY3RzLiBXZSBkb24ndCBzdXBwb3J0IHN5bWJvbHMgc28gdGhleSB3b24ndFxuICAgIC8vIGJlIHRyYW5zZmVycmVkLlxuXG4gICAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcbiAgICAgICAgdG9ba2V5XSA9IGZyb21ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduO1xuXG59LHt9XSwxNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBQb29sZWRDbGFzc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBTdGF0aWMgcG9vbGVycy4gU2V2ZXJhbCBjdXN0b20gdmVyc2lvbnMgZm9yIGVhY2ggcG90ZW50aWFsIG51bWJlciBvZlxuICogYXJndW1lbnRzLiBBIGNvbXBsZXRlbHkgZ2VuZXJpYyBwb29sZXIgaXMgZWFzeSB0byBpbXBsZW1lbnQsIGJ1dCB3b3VsZFxuICogcmVxdWlyZSBhY2Nlc3NpbmcgdGhlIGBhcmd1bWVudHNgIG9iamVjdC4gSW4gZWFjaCBvZiB0aGVzZSwgYHRoaXNgIHJlZmVycyB0b1xuICogdGhlIENsYXNzIGl0c2VsZiwgbm90IGFuIGluc3RhbmNlLiBJZiBhbnkgb3RoZXJzIGFyZSBuZWVkZWQsIHNpbXBseSBhZGQgdGhlbVxuICogaGVyZSwgb3IgaW4gdGhlaXIgb3duIGZpbGVzLlxuICovXG52YXIgb25lQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihjb3B5RmllbGRzRnJvbSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuICB9XG59O1xuXG52YXIgdHdvQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIpO1xuICB9XG59O1xuXG52YXIgdGhyZWVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMiwgYTMpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMyk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMyk7XG4gIH1cbn07XG5cbnZhciBmaXZlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMywgYTQsIGE1KTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICB9XG59O1xuXG52YXIgc3RhbmRhcmRSZWxlYXNlciA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcyxcbiAgICAnVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS4nXG4gICkgOiBpbnZhcmlhbnQoaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcykpO1xuICBpZiAoaW5zdGFuY2UuZGVzdHJ1Y3Rvcikge1xuICAgIGluc3RhbmNlLmRlc3RydWN0b3IoKTtcbiAgfVxuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCA8IEtsYXNzLnBvb2xTaXplKSB7XG4gICAgS2xhc3MuaW5zdGFuY2VQb29sLnB1c2goaW5zdGFuY2UpO1xuICB9XG59O1xuXG52YXIgREVGQVVMVF9QT09MX1NJWkUgPSAxMDtcbnZhciBERUZBVUxUX1BPT0xFUiA9IG9uZUFyZ3VtZW50UG9vbGVyO1xuXG4vKipcbiAqIEF1Z21lbnRzIGBDb3B5Q29uc3RydWN0b3JgIHRvIGJlIGEgcG9vbGFibGUgY2xhc3MsIGF1Z21lbnRpbmcgb25seSB0aGUgY2xhc3NcbiAqIGl0c2VsZiAoc3RhdGljYWxseSkgbm90IGFkZGluZyBhbnkgcHJvdG90eXBpY2FsIGZpZWxkcy4gQW55IENvcHlDb25zdHJ1Y3RvclxuICogeW91IGdpdmUgdGhpcyBtYXkgaGF2ZSBhIGBwb29sU2l6ZWAgcHJvcGVydHksIGFuZCB3aWxsIGxvb2sgZm9yIGFcbiAqIHByb3RvdHlwaWNhbCBgZGVzdHJ1Y3RvcmAgb24gaW5zdGFuY2VzIChvcHRpb25hbCkuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gQ29weUNvbnN0cnVjdG9yIENvbnN0cnVjdG9yIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVzZXQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwb29sZXIgQ3VzdG9taXphYmxlIHBvb2xlci5cbiAqL1xudmFyIGFkZFBvb2xpbmdUbyA9IGZ1bmN0aW9uKENvcHlDb25zdHJ1Y3RvciwgcG9vbGVyKSB7XG4gIHZhciBOZXdLbGFzcyA9IENvcHlDb25zdHJ1Y3RvcjtcbiAgTmV3S2xhc3MuaW5zdGFuY2VQb29sID0gW107XG4gIE5ld0tsYXNzLmdldFBvb2xlZCA9IHBvb2xlciB8fCBERUZBVUxUX1BPT0xFUjtcbiAgaWYgKCFOZXdLbGFzcy5wb29sU2l6ZSkge1xuICAgIE5ld0tsYXNzLnBvb2xTaXplID0gREVGQVVMVF9QT09MX1NJWkU7XG4gIH1cbiAgTmV3S2xhc3MucmVsZWFzZSA9IHN0YW5kYXJkUmVsZWFzZXI7XG4gIHJldHVybiBOZXdLbGFzcztcbn07XG5cbnZhciBQb29sZWRDbGFzcyA9IHtcbiAgYWRkUG9vbGluZ1RvOiBhZGRQb29saW5nVG8sXG4gIG9uZUFyZ3VtZW50UG9vbGVyOiBvbmVBcmd1bWVudFBvb2xlcixcbiAgdHdvQXJndW1lbnRQb29sZXI6IHR3b0FyZ3VtZW50UG9vbGVyLFxuICB0aHJlZUFyZ3VtZW50UG9vbGVyOiB0aHJlZUFyZ3VtZW50UG9vbGVyLFxuICBmaXZlQXJndW1lbnRQb29sZXI6IGZpdmVBcmd1bWVudFBvb2xlclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb29sZWRDbGFzcztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vaW52YXJpYW50XCI6Mjk3LFwiX3Byb2Nlc3NcIjoxfV0sMTc3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RcbiAqL1xuXG4vKiBnbG9iYWxzIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpO1xudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKFwiLi9SZWFjdENoaWxkcmVuXCIpO1xudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRcIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RDb250ZXh0ID0gcmVxdWlyZShcIi4vUmVhY3RDb250ZXh0XCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiKTtcbnZhciBSZWFjdERPTSA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NXCIpO1xudmFyIFJlYWN0RE9NVGV4dENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NVGV4dENvbXBvbmVudFwiKTtcbnZhciBSZWFjdERlZmF1bHRJbmplY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdERlZmF1bHRJbmplY3Rpb25cIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdFBlcmZcIik7XG52YXIgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlc1wiKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIik7XG52YXIgUmVhY3RTZXJ2ZXJSZW5kZXJpbmcgPSByZXF1aXJlKFwiLi9SZWFjdFNlcnZlclJlbmRlcmluZ1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZmluZERPTU5vZGUgPSByZXF1aXJlKFwiLi9maW5kRE9NTm9kZVwiKTtcbnZhciBvbmx5Q2hpbGQgPSByZXF1aXJlKFwiLi9vbmx5Q2hpbGRcIik7XG5cblJlYWN0RGVmYXVsdEluamVjdGlvbi5pbmplY3QoKTtcblxudmFyIGNyZWF0ZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudDtcbnZhciBjcmVhdGVGYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3Rvcnk7XG52YXIgY2xvbmVFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lRWxlbWVudDtcblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQ7XG4gIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeTtcbiAgY2xvbmVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNsb25lRWxlbWVudDtcbn1cblxudmFyIHJlbmRlciA9IFJlYWN0UGVyZi5tZWFzdXJlKCdSZWFjdCcsICdyZW5kZXInLCBSZWFjdE1vdW50LnJlbmRlcik7XG5cbnZhciBSZWFjdCA9IHtcbiAgQ2hpbGRyZW46IHtcbiAgICBtYXA6IFJlYWN0Q2hpbGRyZW4ubWFwLFxuICAgIGZvckVhY2g6IFJlYWN0Q2hpbGRyZW4uZm9yRWFjaCxcbiAgICBjb3VudDogUmVhY3RDaGlsZHJlbi5jb3VudCxcbiAgICBvbmx5OiBvbmx5Q2hpbGRcbiAgfSxcbiAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudCxcbiAgRE9NOiBSZWFjdERPTSxcbiAgUHJvcFR5cGVzOiBSZWFjdFByb3BUeXBlcyxcbiAgaW5pdGlhbGl6ZVRvdWNoRXZlbnRzOiBmdW5jdGlvbihzaG91bGRVc2VUb3VjaCkge1xuICAgIEV2ZW50UGx1Z2luVXRpbHMudXNlVG91Y2hFdmVudHMgPSBzaG91bGRVc2VUb3VjaDtcbiAgfSxcbiAgY3JlYXRlQ2xhc3M6IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3MsXG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQsXG4gIGNsb25lRWxlbWVudDogY2xvbmVFbGVtZW50LFxuICBjcmVhdGVGYWN0b3J5OiBjcmVhdGVGYWN0b3J5LFxuICBjcmVhdGVNaXhpbjogZnVuY3Rpb24obWl4aW4pIHtcbiAgICAvLyBDdXJyZW50bHkgYSBub29wLiBXaWxsIGJlIHVzZWQgdG8gdmFsaWRhdGUgYW5kIHRyYWNlIG1peGlucy5cbiAgICByZXR1cm4gbWl4aW47XG4gIH0sXG4gIGNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudDogUmVhY3RNb3VudC5jb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnQsXG4gIGNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudEJ5SUQ6IFJlYWN0TW91bnQuY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50QnlJRCxcbiAgZmluZERPTU5vZGU6IGZpbmRET01Ob2RlLFxuICByZW5kZXI6IHJlbmRlcixcbiAgcmVuZGVyVG9TdHJpbmc6IFJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RyaW5nLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogUmVhY3RTZXJ2ZXJSZW5kZXJpbmcucmVuZGVyVG9TdGF0aWNNYXJrdXAsXG4gIHVubW91bnRDb21wb25lbnRBdE5vZGU6IFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZSxcbiAgaXNWYWxpZEVsZW1lbnQ6IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudCxcbiAgd2l0aENvbnRleHQ6IFJlYWN0Q29udGV4dC53aXRoQ29udGV4dCxcblxuICAvLyBIb29rIGZvciBKU1ggc3ByZWFkLCBkb24ndCB1c2UgdGhpcyBmb3IgYW55dGhpbmcgZWxzZS5cbiAgX19zcHJlYWQ6IGFzc2lnblxufTtcblxuLy8gSW5qZWN0IHRoZSBydW50aW1lIGludG8gYSBkZXZ0b29scyBnbG9iYWwgaG9vayByZWdhcmRsZXNzIG9mIGJyb3dzZXIuXG4vLyBBbGxvd3MgZm9yIGRlYnVnZ2luZyB3aGVuIHRoZSBob29rIGlzIGluamVjdGVkIG9uIHRoZSBwYWdlLlxuaWYgKFxuICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICE9PSAndW5kZWZpbmVkJyAmJlxuICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0KHtcbiAgICBDdXJyZW50T3duZXI6IFJlYWN0Q3VycmVudE93bmVyLFxuICAgIEluc3RhbmNlSGFuZGxlczogUmVhY3RJbnN0YW5jZUhhbmRsZXMsXG4gICAgTW91bnQ6IFJlYWN0TW91bnQsXG4gICAgUmVjb25jaWxlcjogUmVhY3RSZWNvbmNpbGVyLFxuICAgIFRleHRDb21wb25lbnQ6IFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICB9KTtcbn1cblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcbiAgaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiB3aW5kb3cudG9wID09PSB3aW5kb3cuc2VsZikge1xuXG4gICAgLy8gSWYgd2UncmUgaW4gQ2hyb21lLCBsb29rIGZvciB0aGUgZGV2dG9vbHMgbWFya2VyIGFuZCBwcm92aWRlIGEgZG93bmxvYWRcbiAgICAvLyBsaW5rIGlmIG5vdCBpbnN0YWxsZWQuXG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgPiAtMSkge1xuICAgICAgaWYgKHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXG4gICAgICAgICAgJ0Rvd25sb2FkIHRoZSBSZWFjdCBEZXZUb29scyBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTogJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZmIubWUvcmVhY3QtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGV4cGVjdGVkRmVhdHVyZXMgPSBbXG4gICAgICAvLyBzaGltc1xuICAgICAgQXJyYXkuaXNBcnJheSxcbiAgICAgIEFycmF5LnByb3RvdHlwZS5ldmVyeSxcbiAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLFxuICAgICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YsXG4gICAgICBBcnJheS5wcm90b3R5cGUubWFwLFxuICAgICAgRGF0ZS5ub3csXG4gICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCxcbiAgICAgIE9iamVjdC5rZXlzLFxuICAgICAgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCxcbiAgICAgIFN0cmluZy5wcm90b3R5cGUudHJpbSxcblxuICAgICAgLy8gc2hhbXNcbiAgICAgIE9iamVjdC5jcmVhdGUsXG4gICAgICBPYmplY3QuZnJlZXplXG4gICAgXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRGZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFleHBlY3RlZEZlYXR1cmVzW2ldKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgJ09uZSBvciBtb3JlIEVTNSBzaGltL3NoYW1zIGV4cGVjdGVkIGJ5IFJlYWN0IGFyZSBub3QgYXZhaWxhYmxlOiAnICtcbiAgICAgICAgICAnaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLXBvbHlmaWxscydcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblJlYWN0LnZlcnNpb24gPSAnMC4xMy4zJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRXZlbnRQbHVnaW5VdGlsc1wiOjE2NixcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoxNjgsXCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL1JlYWN0Q2hpbGRyZW5cIjoxODMsXCIuL1JlYWN0Q2xhc3NcIjoxODQsXCIuL1JlYWN0Q29tcG9uZW50XCI6MTg1LFwiLi9SZWFjdENvbnRleHRcIjoxOTAsXCIuL1JlYWN0Q3VycmVudE93bmVyXCI6MTkxLFwiLi9SZWFjdERPTVwiOjE5MixcIi4vUmVhY3RET01UZXh0Q29tcG9uZW50XCI6MjAzLFwiLi9SZWFjdERlZmF1bHRJbmplY3Rpb25cIjoyMDYsXCIuL1JlYWN0RWxlbWVudFwiOjIwOSxcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCI6MjEwLFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiOjIxOCxcIi4vUmVhY3RNb3VudFwiOjIyMyxcIi4vUmVhY3RQZXJmXCI6MjI4LFwiLi9SZWFjdFByb3BUeXBlc1wiOjIzMixcIi4vUmVhY3RSZWNvbmNpbGVyXCI6MjM1LFwiLi9SZWFjdFNlcnZlclJlbmRlcmluZ1wiOjIzOCxcIi4vZmluZERPTU5vZGVcIjoyNzksXCIuL29ubHlDaGlsZFwiOjMwNyxcIl9wcm9jZXNzXCI6MX1dLDE3ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBmaW5kRE9NTm9kZSA9IHJlcXVpcmUoXCIuL2ZpbmRET01Ob2RlXCIpO1xuXG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBET00gbm9kZSByZW5kZXJlZCBieSB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHJldHVybiB7RE9NRWxlbWVudH0gVGhlIHJvb3Qgbm9kZSBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICogQGZpbmFsXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGdldERPTU5vZGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmaW5kRE9NTm9kZSh0aGlzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbjtcblxufSx7XCIuL2ZpbmRET01Ob2RlXCI6Mjc5fV0sMTc5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luSHViXCIpO1xudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblJlZ2lzdHJ5XCIpO1xudmFyIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEV2ZW50RW1pdHRlck1peGluXCIpO1xudmFyIFZpZXdwb3J0TWV0cmljcyA9IHJlcXVpcmUoXCIuL1ZpZXdwb3J0TWV0cmljc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIik7XG5cbi8qKlxuICogU3VtbWFyeSBvZiBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBldmVudCBoYW5kbGluZzpcbiAqXG4gKiAgLSBUb3AtbGV2ZWwgZGVsZWdhdGlvbiBpcyB1c2VkIHRvIHRyYXAgbW9zdCBuYXRpdmUgYnJvd3NlciBldmVudHMuIFRoaXNcbiAqICAgIG1heSBvbmx5IG9jY3VyIGluIHRoZSBtYWluIHRocmVhZCBhbmQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mXG4gKiAgICBSZWFjdEV2ZW50TGlzdGVuZXIsIHdoaWNoIGlzIGluamVjdGVkIGFuZCBjYW4gdGhlcmVmb3JlIHN1cHBvcnQgcGx1Z2dhYmxlXG4gKiAgICBldmVudCBzb3VyY2VzLiBUaGlzIGlzIHRoZSBvbmx5IHdvcmsgdGhhdCBvY2N1cnMgaW4gdGhlIG1haW4gdGhyZWFkLlxuICpcbiAqICAtIFdlIG5vcm1hbGl6ZSBhbmQgZGUtZHVwbGljYXRlIGV2ZW50cyB0byBhY2NvdW50IGZvciBicm93c2VyIHF1aXJrcy4gVGhpc1xuICogICAgbWF5IGJlIGRvbmUgaW4gdGhlIHdvcmtlciB0aHJlYWQuXG4gKlxuICogIC0gRm9yd2FyZCB0aGVzZSBuYXRpdmUgZXZlbnRzICh3aXRoIHRoZSBhc3NvY2lhdGVkIHRvcC1sZXZlbCB0eXBlIHVzZWQgdG9cbiAqICAgIHRyYXAgaXQpIHRvIGBFdmVudFBsdWdpbkh1YmAsIHdoaWNoIGluIHR1cm4gd2lsbCBhc2sgcGx1Z2lucyBpZiB0aGV5IHdhbnRcbiAqICAgIHRvIGV4dHJhY3QgYW55IHN5bnRoZXRpYyBldmVudHMuXG4gKlxuICogIC0gVGhlIGBFdmVudFBsdWdpbkh1YmAgd2lsbCB0aGVuIHByb2Nlc3MgZWFjaCBldmVudCBieSBhbm5vdGF0aW5nIHRoZW0gd2l0aFxuICogICAgXCJkaXNwYXRjaGVzXCIsIGEgc2VxdWVuY2Ugb2YgbGlzdGVuZXJzIGFuZCBJRHMgdGhhdCBjYXJlIGFib3V0IHRoYXQgZXZlbnQuXG4gKlxuICogIC0gVGhlIGBFdmVudFBsdWdpbkh1YmAgdGhlbiBkaXNwYXRjaGVzIHRoZSBldmVudHMuXG4gKlxuICogT3ZlcnZpZXcgb2YgUmVhY3QgYW5kIHRoZSBldmVudCBzeXN0ZW06XG4gKlxuICogKy0tLS0tLS0tLS0tLSsgICAgLlxuICogfCAgICBET00gICAgIHwgICAgLlxuICogKy0tLS0tLS0tLS0tLSsgICAgLlxuICogICAgICAgfCAgICAgICAgICAgLlxuICogICAgICAgdiAgICAgICAgICAgLlxuICogKy0tLS0tLS0tLS0tLSsgICAgLlxuICogfCBSZWFjdEV2ZW50IHwgICAgLlxuICogfCAgTGlzdGVuZXIgIHwgICAgLlxuICogKy0tLS0tLS0tLS0tLSsgICAgLiAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgKy0tLS0tLS0tK3xTaW1wbGVFdmVudHxcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICB8ICAgICAgICAgfFBsdWdpbiAgICAgfFxuICogKy0tLS0tfC0tLS0tLSsgICAgLiAgICAgICAgICAgICAgIHYgICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiB8ICAgICB8ICAgICAgfCAgICAuICAgICstLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0rXG4gKiB8ICAgICArLS0tLS0tLS0tLS0uLS0tPnxFdmVudFBsdWdpbkh1YnwgICAgICAgICAgICAgICAgICAgIHwgICAgRXZlbnQgICB8XG4gKiB8ICAgICAgICAgICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHwgICAgICstLS0tLS0tLS0tLSsgIHwgUHJvcGFnYXRvcnN8XG4gKiB8IFJlYWN0RXZlbnQgfCAgICAuICAgIHwgICAgICAgICAgICAgIHwgICAgIHxUYXBFdmVudCAgIHwgIHwtLS0tLS0tLS0tLS18XG4gKiB8ICBFbWl0dGVyICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHw8LS0tK3xQbHVnaW4gICAgIHwgIHxvdGhlciBwbHVnaW58XG4gKiB8ICAgICAgICAgICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHwgICAgICstLS0tLS0tLS0tLSsgIHwgIHV0aWxpdGllcyB8XG4gKiB8ICAgICArLS0tLS0tLS0tLS0uLS0tPnwgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0rXG4gKiB8ICAgICB8ICAgICAgfCAgICAuICAgICstLS0tLS0tLS0tLS0tLStcbiAqICstLS0tLXwtLS0tLS0rICAgIC4gICAgICAgICAgICAgICAgXiAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICB8ICAgICAgICB8RW50ZXIvTGVhdmV8XG4gKiAgICAgICArICAgICAgICAgICAuICAgICAgICAgICAgICAgICstLS0tLS0tK3xQbHVnaW4gICAgIHxcbiAqICstLS0tLS0tLS0tLS0tKyAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogfCBhcHBsaWNhdGlvbiB8ICAgLlxuICogfC0tLS0tLS0tLS0tLS18ICAgLlxuICogfCAgICAgICAgICAgICB8ICAgLlxuICogfCAgICAgICAgICAgICB8ICAgLlxuICogKy0tLS0tLS0tLS0tLS0rICAgLlxuICogICAgICAgICAgICAgICAgICAgLlxuICogICAgUmVhY3QgQ29yZSAgICAgLiAgR2VuZXJhbCBQdXJwb3NlIEV2ZW50IFBsdWdpbiBTeXN0ZW1cbiAqL1xuXG52YXIgYWxyZWFkeUxpc3RlbmluZ1RvID0ge307XG52YXIgaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUgPSBmYWxzZTtcbnZhciByZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIgPSAwO1xuXG4vLyBGb3IgZXZlbnRzIGxpa2UgJ3N1Ym1pdCcgd2hpY2ggZG9uJ3QgY29uc2lzdGVudGx5IGJ1YmJsZSAod2hpY2ggd2UgdHJhcCBhdCBhXG4vLyBsb3dlciBub2RlIHRoYW4gYGRvY3VtZW50YCksIGJpbmRpbmcgYXQgYGRvY3VtZW50YCB3b3VsZCBjYXVzZSBkdXBsaWNhdGVcbi8vIGV2ZW50cyBzbyB3ZSBkb24ndCBpbmNsdWRlIHRoZW0gaGVyZVxudmFyIHRvcEV2ZW50TWFwcGluZyA9IHtcbiAgdG9wQmx1cjogJ2JsdXInLFxuICB0b3BDaGFuZ2U6ICdjaGFuZ2UnLFxuICB0b3BDbGljazogJ2NsaWNrJyxcbiAgdG9wQ29tcG9zaXRpb25FbmQ6ICdjb21wb3NpdGlvbmVuZCcsXG4gIHRvcENvbXBvc2l0aW9uU3RhcnQ6ICdjb21wb3NpdGlvbnN0YXJ0JyxcbiAgdG9wQ29tcG9zaXRpb25VcGRhdGU6ICdjb21wb3NpdGlvbnVwZGF0ZScsXG4gIHRvcENvbnRleHRNZW51OiAnY29udGV4dG1lbnUnLFxuICB0b3BDb3B5OiAnY29weScsXG4gIHRvcEN1dDogJ2N1dCcsXG4gIHRvcERvdWJsZUNsaWNrOiAnZGJsY2xpY2snLFxuICB0b3BEcmFnOiAnZHJhZycsXG4gIHRvcERyYWdFbmQ6ICdkcmFnZW5kJyxcbiAgdG9wRHJhZ0VudGVyOiAnZHJhZ2VudGVyJyxcbiAgdG9wRHJhZ0V4aXQ6ICdkcmFnZXhpdCcsXG4gIHRvcERyYWdMZWF2ZTogJ2RyYWdsZWF2ZScsXG4gIHRvcERyYWdPdmVyOiAnZHJhZ292ZXInLFxuICB0b3BEcmFnU3RhcnQ6ICdkcmFnc3RhcnQnLFxuICB0b3BEcm9wOiAnZHJvcCcsXG4gIHRvcEZvY3VzOiAnZm9jdXMnLFxuICB0b3BJbnB1dDogJ2lucHV0JyxcbiAgdG9wS2V5RG93bjogJ2tleWRvd24nLFxuICB0b3BLZXlQcmVzczogJ2tleXByZXNzJyxcbiAgdG9wS2V5VXA6ICdrZXl1cCcsXG4gIHRvcE1vdXNlRG93bjogJ21vdXNlZG93bicsXG4gIHRvcE1vdXNlTW92ZTogJ21vdXNlbW92ZScsXG4gIHRvcE1vdXNlT3V0OiAnbW91c2VvdXQnLFxuICB0b3BNb3VzZU92ZXI6ICdtb3VzZW92ZXInLFxuICB0b3BNb3VzZVVwOiAnbW91c2V1cCcsXG4gIHRvcFBhc3RlOiAncGFzdGUnLFxuICB0b3BTY3JvbGw6ICdzY3JvbGwnLFxuICB0b3BTZWxlY3Rpb25DaGFuZ2U6ICdzZWxlY3Rpb25jaGFuZ2UnLFxuICB0b3BUZXh0SW5wdXQ6ICd0ZXh0SW5wdXQnLFxuICB0b3BUb3VjaENhbmNlbDogJ3RvdWNoY2FuY2VsJyxcbiAgdG9wVG91Y2hFbmQ6ICd0b3VjaGVuZCcsXG4gIHRvcFRvdWNoTW92ZTogJ3RvdWNobW92ZScsXG4gIHRvcFRvdWNoU3RhcnQ6ICd0b3VjaHN0YXJ0JyxcbiAgdG9wV2hlZWw6ICd3aGVlbCdcbn07XG5cbi8qKlxuICogVG8gZW5zdXJlIG5vIGNvbmZsaWN0cyB3aXRoIG90aGVyIHBvdGVudGlhbCBSZWFjdCBpbnN0YW5jZXMgb24gdGhlIHBhZ2VcbiAqL1xudmFyIHRvcExpc3RlbmVyc0lES2V5ID0gJ19yZWFjdExpc3RlbmVyc0lEJyArIFN0cmluZyhNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcblxuZnVuY3Rpb24gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCkge1xuICAvLyBJbiBJRTgsIGBtb3VudEF0YCBpcyBhIGhvc3Qgb2JqZWN0IGFuZCBkb2Vzbid0IGhhdmUgYGhhc093blByb3BlcnR5YFxuICAvLyBkaXJlY3RseS5cbiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW91bnRBdCwgdG9wTGlzdGVuZXJzSURLZXkpKSB7XG4gICAgbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV0gPSByZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIrKztcbiAgICBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dID0ge307XG4gIH1cbiAgcmV0dXJuIGFscmVhZHlMaXN0ZW5pbmdUb1ttb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XV07XG59XG5cbi8qKlxuICogYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgaXMgdXNlZCB0byBhdHRhY2ggdG9wLWxldmVsIGV2ZW50IGxpc3RlbmVycy4gRm9yXG4gKiBleGFtcGxlOlxuICpcbiAqICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnB1dExpc3RlbmVyKCdteUlEJywgJ29uQ2xpY2snLCBteUZ1bmN0aW9uKTtcbiAqXG4gKiBUaGlzIHdvdWxkIGFsbG9jYXRlIGEgXCJyZWdpc3RyYXRpb25cIiBvZiBgKCdvbkNsaWNrJywgbXlGdW5jdGlvbilgIG9uICdteUlEJy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IGFzc2lnbih7fSwgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiwge1xuXG4gIC8qKlxuICAgKiBJbmplY3RhYmxlIGV2ZW50IGJhY2tlbmRcbiAgICovXG4gIFJlYWN0RXZlbnRMaXN0ZW5lcjogbnVsbCxcblxuICBpbmplY3Rpb246IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gUmVhY3RFdmVudExpc3RlbmVyXG4gICAgICovXG4gICAgaW5qZWN0UmVhY3RFdmVudExpc3RlbmVyOiBmdW5jdGlvbihSZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5zZXRIYW5kbGVUb3BMZXZlbChcbiAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmhhbmRsZVRvcExldmVsXG4gICAgICApO1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lciA9IFJlYWN0RXZlbnRMaXN0ZW5lcjtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgd2hldGhlciBvciBub3QgYW55IGNyZWF0ZWQgY2FsbGJhY2tzIHNob3VsZCBiZSBlbmFibGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgVHJ1ZSBpZiBjYWxsYmFja3Mgc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAqL1xuICBzZXRFbmFibGVkOiBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgaWYgKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuc2V0RW5hYmxlZChlbmFibGVkKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgY2FsbGJhY2tzIGFyZSBlbmFibGVkLlxuICAgKi9cbiAgaXNFbmFibGVkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gISEoXG4gICAgICAoUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lciAmJiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLmlzRW5hYmxlZCgpKVxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdlIGxpc3RlbiBmb3IgYnViYmxlZCB0b3VjaCBldmVudHMgb24gdGhlIGRvY3VtZW50IG9iamVjdC5cbiAgICpcbiAgICogRmlyZWZveCB2OC4wMSAoYW5kIHBvc3NpYmx5IG90aGVycykgZXhoaWJpdGVkIHN0cmFuZ2UgYmVoYXZpb3Igd2hlblxuICAgKiBtb3VudGluZyBgb25tb3VzZW1vdmVgIGV2ZW50cyBhdCBzb21lIG5vZGUgdGhhdCB3YXMgbm90IHRoZSBkb2N1bWVudFxuICAgKiBlbGVtZW50LiBUaGUgc3ltcHRvbXMgd2VyZSB0aGF0IGlmIHlvdXIgbW91c2UgaXMgbm90IG1vdmluZyBvdmVyIHNvbWV0aGluZ1xuICAgKiBjb250YWluZWQgd2l0aGluIHRoYXQgbW91bnQgcG9pbnQgKGZvciBleGFtcGxlIG9uIHRoZSBiYWNrZ3JvdW5kKSB0aGVcbiAgICogdG9wLWxldmVsIGxpc3RlbmVycyBmb3IgYG9ubW91c2Vtb3ZlYCB3b24ndCBiZSBjYWxsZWQuIEhvd2V2ZXIsIGlmIHlvdVxuICAgKiByZWdpc3RlciB0aGUgYG1vdXNlbW92ZWAgb24gdGhlIGRvY3VtZW50IG9iamVjdCwgdGhlbiBpdCB3aWxsIG9mIGNvdXJzZVxuICAgKiBjYXRjaCBhbGwgYG1vdXNlbW92ZWBzLiBUaGlzIGFsb25nIHdpdGggaU9TIHF1aXJrcywganVzdGlmaWVzIHJlc3RyaWN0aW5nXG4gICAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgdG8gdGhlIGRvY3VtZW50IG9iamVjdCBvbmx5LCBhdCBsZWFzdCBmb3IgdGhlc2VcbiAgICogbW92ZW1lbnQgdHlwZXMgb2YgZXZlbnRzIGFuZCBwb3NzaWJseSBhbGwgZXZlbnRzLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDEwLzA5L2NsaWNrX2V2ZW50X2RlbC5odG1sXG4gICAqXG4gICAqIEFsc28sIGBrZXl1cGAvYGtleXByZXNzYC9ga2V5ZG93bmAgZG8gbm90IGJ1YmJsZSB0byB0aGUgd2luZG93IG9uIElFLCBidXRcbiAgICogdGhleSBidWJibGUgdG8gZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRlbnREb2N1bWVudEhhbmRsZSBEb2N1bWVudCB3aGljaCBvd25zIHRoZSBjb250YWluZXJcbiAgICovXG4gIGxpc3RlblRvOiBmdW5jdGlvbihyZWdpc3RyYXRpb25OYW1lLCBjb250ZW50RG9jdW1lbnRIYW5kbGUpIHtcbiAgICB2YXIgbW91bnRBdCA9IGNvbnRlbnREb2N1bWVudEhhbmRsZTtcbiAgICB2YXIgaXNMaXN0ZW5pbmcgPSBnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudChtb3VudEF0KTtcbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5cbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV07XG5cbiAgICB2YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgZGVwZW5kZW5jeSA9IGRlcGVuZGVuY2llc1tpXTtcbiAgICAgIGlmICghKFxuICAgICAgICAgICAgKGlzTGlzdGVuaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpICYmIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wV2hlZWwpIHtcbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnd2hlZWwnKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcFdoZWVsLFxuICAgICAgICAgICAgICAnd2hlZWwnLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNFdmVudFN1cHBvcnRlZCgnbW91c2V3aGVlbCcpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wV2hlZWwsXG4gICAgICAgICAgICAgICdtb3VzZXdoZWVsJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmlyZWZveCBuZWVkcyB0byBjYXB0dXJlIGEgZGlmZmVyZW50IG1vdXNlIHNjcm9sbCBldmVudC5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9kb20vZXZlbnRzL3Rlc3RzL3Njcm9sbC5odG1sXG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wV2hlZWwsXG4gICAgICAgICAgICAgICdET01Nb3VzZVNjcm9sbCcsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wU2Nyb2xsKSB7XG5cbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnc2Nyb2xsJywgdHJ1ZSkpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wU2Nyb2xsLFxuICAgICAgICAgICAgICAnc2Nyb2xsJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcFNjcm9sbCxcbiAgICAgICAgICAgICAgJ3Njcm9sbCcsXG4gICAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuV0lORE9XX0hBTkRMRVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyB8fFxuICAgICAgICAgICAgZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BCbHVyKSB7XG5cbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnZm9jdXMnLCB0cnVlKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyxcbiAgICAgICAgICAgICAgJ2ZvY3VzJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcbiAgICAgICAgICAgICAgJ2JsdXInLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNFdmVudFN1cHBvcnRlZCgnZm9jdXNpbicpKSB7XG4gICAgICAgICAgICAvLyBJRSBoYXMgYGZvY3VzaW5gIGFuZCBgZm9jdXNvdXRgIGV2ZW50cyB3aGljaCBidWJibGUuXG4gICAgICAgICAgICAvLyBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDA4LzA0L2RlbGVnYXRpbmdfdGhlLmh0bWxcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyxcbiAgICAgICAgICAgICAgJ2ZvY3VzaW4nLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICAgICAgICAgICdmb2N1c291dCcsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdG8gbWFrZSBzdXJlIGJsdXIgYW5kIGZvY3VzIGV2ZW50IGxpc3RlbmVycyBhcmUgb25seSBhdHRhY2hlZCBvbmNlXG4gICAgICAgICAgaXNMaXN0ZW5pbmdbdG9wTGV2ZWxUeXBlcy50b3BCbHVyXSA9IHRydWU7XG4gICAgICAgICAgaXNMaXN0ZW5pbmdbdG9wTGV2ZWxUeXBlcy50b3BGb2N1c10gPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRvcEV2ZW50TWFwcGluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSkge1xuICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgIGRlcGVuZGVuY3ksXG4gICAgICAgICAgICB0b3BFdmVudE1hcHBpbmdbZGVwZW5kZW5jeV0sXG4gICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgdHJhcEJ1YmJsZWRFdmVudDogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgIHJldHVybiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBoYW5kbGVyQmFzZU5hbWUsXG4gICAgICBoYW5kbGVcbiAgICApO1xuICB9LFxuXG4gIHRyYXBDYXB0dXJlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgcmV0dXJuIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBoYW5kbGVyQmFzZU5hbWUsXG4gICAgICBoYW5kbGVcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBMaXN0ZW5zIHRvIHdpbmRvdyBzY3JvbGwgYW5kIHJlc2l6ZSBldmVudHMuIFdlIGNhY2hlIHNjcm9sbCB2YWx1ZXMgc28gdGhhdFxuICAgKiBhcHBsaWNhdGlvbiBjb2RlIGNhbiBhY2Nlc3MgdGhlbSB3aXRob3V0IHRyaWdnZXJpbmcgcmVmbG93cy5cbiAgICpcbiAgICogTk9URTogU2Nyb2xsIGV2ZW50cyBkbyBub3QgYnViYmxlLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvZG9tL2V2ZW50cy9zY3JvbGwuaHRtbFxuICAgKi9cbiAgZW5zdXJlU2Nyb2xsVmFsdWVNb25pdG9yaW5nOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIWlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlKSB7XG4gICAgICB2YXIgcmVmcmVzaCA9IFZpZXdwb3J0TWV0cmljcy5yZWZyZXNoU2Nyb2xsVmFsdWVzO1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5tb25pdG9yU2Nyb2xsVmFsdWUocmVmcmVzaCk7XG4gICAgICBpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9LFxuXG4gIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczogRXZlbnRQbHVnaW5IdWIuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLFxuXG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiBFdmVudFBsdWdpbkh1Yi5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcyxcblxuICBwdXRMaXN0ZW5lcjogRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXIsXG5cbiAgZ2V0TGlzdGVuZXI6IEV2ZW50UGx1Z2luSHViLmdldExpc3RlbmVyLFxuXG4gIGRlbGV0ZUxpc3RlbmVyOiBFdmVudFBsdWdpbkh1Yi5kZWxldGVMaXN0ZW5lcixcblxuICBkZWxldGVBbGxMaXN0ZW5lcnM6IEV2ZW50UGx1Z2luSHViLmRlbGV0ZUFsbExpc3RlbmVyc1xuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXI7XG5cbn0se1wiLi9FdmVudENvbnN0YW50c1wiOjE2MixcIi4vRXZlbnRQbHVnaW5IdWJcIjoxNjQsXCIuL0V2ZW50UGx1Z2luUmVnaXN0cnlcIjoxNjUsXCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL1JlYWN0RXZlbnRFbWl0dGVyTWl4aW5cIjoyMTMsXCIuL1ZpZXdwb3J0TWV0cmljc1wiOjI2NCxcIi4vaXNFdmVudFN1cHBvcnRlZFwiOjI5OH1dLDE4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKFwiLi9SZWFjdFwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG5cbnZhciBSZWFjdFRyYW5zaXRpb25Hcm91cCA9IFJlYWN0LmNyZWF0ZUZhY3RvcnkoXG4gIHJlcXVpcmUoXCIuL1JlYWN0VHJhbnNpdGlvbkdyb3VwXCIpXG4pO1xudmFyIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQgPSBSZWFjdC5jcmVhdGVGYWN0b3J5KFxuICByZXF1aXJlKFwiLi9SZWFjdENTU1RyYW5zaXRpb25Hcm91cENoaWxkXCIpXG4pO1xuXG52YXIgUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXAnLFxuXG4gIHByb3BUeXBlczoge1xuICAgIHRyYW5zaXRpb25OYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdHJhbnNpdGlvbkFwcGVhcjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgdHJhbnNpdGlvbkVudGVyOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICB0cmFuc2l0aW9uTGVhdmU6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNpdGlvbkFwcGVhcjogZmFsc2UsXG4gICAgICB0cmFuc2l0aW9uRW50ZXI6IHRydWUsXG4gICAgICB0cmFuc2l0aW9uTGVhdmU6IHRydWVcbiAgICB9O1xuICB9LFxuXG4gIF93cmFwQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgLy8gV2UgbmVlZCB0byBwcm92aWRlIHRoaXMgY2hpbGRGYWN0b3J5IHNvIHRoYXRcbiAgICAvLyBSZWFjdENTU1RyYW5zaXRpb25Hcm91cENoaWxkIGNhbiByZWNlaXZlIHVwZGF0ZXMgdG8gbmFtZSwgZW50ZXIsIGFuZFxuICAgIC8vIGxlYXZlIHdoaWxlIGl0IGlzIGxlYXZpbmcuXG4gICAgcmV0dXJuIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQoXG4gICAgICB7XG4gICAgICAgIG5hbWU6IHRoaXMucHJvcHMudHJhbnNpdGlvbk5hbWUsXG4gICAgICAgIGFwcGVhcjogdGhpcy5wcm9wcy50cmFuc2l0aW9uQXBwZWFyLFxuICAgICAgICBlbnRlcjogdGhpcy5wcm9wcy50cmFuc2l0aW9uRW50ZXIsXG4gICAgICAgIGxlYXZlOiB0aGlzLnByb3BzLnRyYW5zaXRpb25MZWF2ZVxuICAgICAgfSxcbiAgICAgIGNoaWxkXG4gICAgKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoXG4gICAgICBSZWFjdFRyYW5zaXRpb25Hcm91cChcbiAgICAgICAgYXNzaWduKHt9LCB0aGlzLnByb3BzLCB7Y2hpbGRGYWN0b3J5OiB0aGlzLl93cmFwQ2hpbGR9KVxuICAgICAgKVxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwO1xuXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOjE3NSxcIi4vUmVhY3RcIjoxNzcsXCIuL1JlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGRcIjoxODEsXCIuL1JlYWN0VHJhbnNpdGlvbkdyb3VwXCI6MjQ0fV0sMTgxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoXCIuL1JlYWN0XCIpO1xuXG52YXIgQ1NTQ29yZSA9IHJlcXVpcmUoXCIuL0NTU0NvcmVcIik7XG52YXIgUmVhY3RUcmFuc2l0aW9uRXZlbnRzID0gcmVxdWlyZShcIi4vUmVhY3RUcmFuc2l0aW9uRXZlbnRzXCIpO1xuXG52YXIgb25seUNoaWxkID0gcmVxdWlyZShcIi4vb25seUNoaWxkXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG4vLyBXZSBkb24ndCByZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSB0aGUgRE9NIHVudGlsIHdlIHJlY2VpdmUgYW4gYW5pbWF0aW9uZW5kIG9yXG4vLyB0cmFuc2l0aW9uZW5kIGV2ZW50LiBJZiB0aGUgdXNlciBzY3Jld3MgdXAgYW5kIGZvcmdldHMgdG8gYWRkIGFuIGFuaW1hdGlvblxuLy8gdGhlaXIgbm9kZSB3aWxsIGJlIHN0dWNrIGluIHRoZSBET00gZm9yZXZlciwgc28gd2UgZGV0ZWN0IGlmIGFuIGFuaW1hdGlvblxuLy8gZG9lcyBub3Qgc3RhcnQgYW5kIGlmIGl0IGRvZXNuJ3QsIHdlIGp1c3QgY2FsbCB0aGUgZW5kIGxpc3RlbmVyIGltbWVkaWF0ZWx5LlxudmFyIFRJQ0sgPSAxNztcbnZhciBOT19FVkVOVF9USU1FT1VUID0gNTAwMDtcblxudmFyIG5vRXZlbnRMaXN0ZW5lciA9IG51bGw7XG5cblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICBub0V2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIGZhbHNlLFxuICAgICAgJ3RyYW5zaXRpb24oKTogdHJpZWQgdG8gcGVyZm9ybSBhbiBhbmltYXRpb24gd2l0aG91dCAnICtcbiAgICAgICdhbiBhbmltYXRpb25lbmQgb3IgdHJhbnNpdGlvbmVuZCBldmVudCBhZnRlciB0aW1lb3V0ICgnICtcbiAgICAgICclc21zKS4gWW91IHNob3VsZCBlaXRoZXIgZGlzYWJsZSB0aGlzICcgK1xuICAgICAgJ3RyYW5zaXRpb24gaW4gSlMgb3IgYWRkIGEgQ1NTIGFuaW1hdGlvbi90cmFuc2l0aW9uLicsXG4gICAgICBOT19FVkVOVF9USU1FT1VUXG4gICAgKSA6IG51bGwpO1xuICB9O1xufVxuXG52YXIgUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdENTU1RyYW5zaXRpb25Hcm91cENoaWxkJyxcblxuICB0cmFuc2l0aW9uOiBmdW5jdGlvbihhbmltYXRpb25UeXBlLCBmaW5pc2hDYWxsYmFjaykge1xuICAgIHZhciBub2RlID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMucHJvcHMubmFtZSArICctJyArIGFuaW1hdGlvblR5cGU7XG4gICAgdmFyIGFjdGl2ZUNsYXNzTmFtZSA9IGNsYXNzTmFtZSArICctYWN0aXZlJztcbiAgICB2YXIgbm9FdmVudFRpbWVvdXQgPSBudWxsO1xuXG4gICAgdmFyIGVuZExpc3RlbmVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IG5vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICBjbGVhclRpbWVvdXQobm9FdmVudFRpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICBDU1NDb3JlLnJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gICAgICBDU1NDb3JlLnJlbW92ZUNsYXNzKG5vZGUsIGFjdGl2ZUNsYXNzTmFtZSk7XG5cbiAgICAgIFJlYWN0VHJhbnNpdGlvbkV2ZW50cy5yZW1vdmVFbmRFdmVudExpc3RlbmVyKG5vZGUsIGVuZExpc3RlbmVyKTtcblxuICAgICAgLy8gVXN1YWxseSB0aGlzIG9wdGlvbmFsIGNhbGxiYWNrIGlzIHVzZWQgZm9yIGluZm9ybWluZyBhbiBvd25lciBvZlxuICAgICAgLy8gYSBsZWF2ZSBhbmltYXRpb24gYW5kIHRlbGxpbmcgaXQgdG8gcmVtb3ZlIHRoZSBjaGlsZC5cbiAgICAgIGlmIChmaW5pc2hDYWxsYmFjaykge1xuICAgICAgICBmaW5pc2hDYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBSZWFjdFRyYW5zaXRpb25FdmVudHMuYWRkRW5kRXZlbnRMaXN0ZW5lcihub2RlLCBlbmRMaXN0ZW5lcik7XG5cbiAgICBDU1NDb3JlLmFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG5cbiAgICAvLyBOZWVkIHRvIGRvIHRoaXMgdG8gYWN0dWFsbHkgdHJpZ2dlciBhIHRyYW5zaXRpb24uXG4gICAgdGhpcy5xdWV1ZUNsYXNzKGFjdGl2ZUNsYXNzTmFtZSk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBub0V2ZW50VGltZW91dCA9IHNldFRpbWVvdXQobm9FdmVudExpc3RlbmVyLCBOT19FVkVOVF9USU1FT1VUKTtcbiAgICB9XG4gIH0sXG5cbiAgcXVldWVDbGFzczogZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgdGhpcy5jbGFzc05hbWVRdWV1ZS5wdXNoKGNsYXNzTmFtZSk7XG5cbiAgICBpZiAoIXRoaXMudGltZW91dCkge1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmZsdXNoQ2xhc3NOYW1lUXVldWUsIFRJQ0spO1xuICAgIH1cbiAgfSxcblxuICBmbHVzaENsYXNzTmFtZVF1ZXVlOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5pc01vdW50ZWQoKSkge1xuICAgICAgdGhpcy5jbGFzc05hbWVRdWV1ZS5mb3JFYWNoKFxuICAgICAgICBDU1NDb3JlLmFkZENsYXNzLmJpbmQoQ1NTQ29yZSwgdGhpcy5nZXRET01Ob2RlKCkpXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmNsYXNzTmFtZVF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2xhc3NOYW1lUXVldWUgPSBbXTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxBcHBlYXI6IGZ1bmN0aW9uKGRvbmUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hcHBlYXIpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbignYXBwZWFyJywgZG9uZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvbmUoKTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbEVudGVyOiBmdW5jdGlvbihkb25lKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZW50ZXIpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbignZW50ZXInLCBkb25lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9uZSgpO1xuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRXaWxsTGVhdmU6IGZ1bmN0aW9uKGRvbmUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5sZWF2ZSkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uKCdsZWF2ZScsIGRvbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQ1NTQ29yZVwiOjE1MCxcIi4vUmVhY3RcIjoxNzcsXCIuL1JlYWN0VHJhbnNpdGlvbkV2ZW50c1wiOjI0MyxcIi4vb25seUNoaWxkXCI6MzA3LFwiLi93YXJuaW5nXCI6MzE4LFwiX3Byb2Nlc3NcIjoxfV0sMTgyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENoaWxkUmVjb25jaWxlclxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIik7XG5cbnZhciBmbGF0dGVuQ2hpbGRyZW4gPSByZXF1aXJlKFwiLi9mbGF0dGVuQ2hpbGRyZW5cIik7XG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIik7XG52YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudFwiKTtcblxuLyoqXG4gKiBSZWFjdENoaWxkUmVjb25jaWxlciBwcm92aWRlcyBoZWxwZXJzIGZvciBpbml0aWFsaXppbmcgb3IgdXBkYXRpbmcgYSBzZXQgb2ZcbiAqIGNoaWxkcmVuLiBJdHMgb3V0cHV0IGlzIHN1aXRhYmxlIGZvciBwYXNzaW5nIGl0IG9udG8gUmVhY3RNdWx0aUNoaWxkIHdoaWNoXG4gKiBkb2VzIGRpZmZlZCByZW9yZGVyaW5nIGFuZCBpbnNlcnRpb24uXG4gKi9cbnZhciBSZWFjdENoaWxkUmVjb25jaWxlciA9IHtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgXCJtb3VudCBpbWFnZVwiIGZvciBlYWNoIG9mIHRoZSBzdXBwbGllZCBjaGlsZHJlbi4gSW4gdGhlIGNhc2VcbiAgICogb2YgYFJlYWN0RE9NQ29tcG9uZW50YCwgYSBtb3VudCBpbWFnZSBpcyBhIHN0cmluZyBvZiBtYXJrdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmVzdGVkQ2hpbGROb2RlcyBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICogQHJldHVybiB7P29iamVjdH0gQSBzZXQgb2YgY2hpbGQgaW5zdGFuY2VzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGluc3RhbnRpYXRlQ2hpbGRyZW46IGZ1bmN0aW9uKG5lc3RlZENoaWxkTm9kZXMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5lc3RlZENoaWxkTm9kZXMpO1xuICAgIGZvciAodmFyIG5hbWUgaW4gY2hpbGRyZW4pIHtcbiAgICAgIGlmIChjaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltuYW1lXTtcbiAgICAgICAgLy8gVGhlIHJlbmRlcmVkIGNoaWxkcmVuIG11c3QgYmUgdHVybmVkIGludG8gaW5zdGFuY2VzIGFzIHRoZXkncmVcbiAgICAgICAgLy8gbW91bnRlZC5cbiAgICAgICAgdmFyIGNoaWxkSW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGNoaWxkLCBudWxsKTtcbiAgICAgICAgY2hpbGRyZW5bbmFtZV0gPSBjaGlsZEluc3RhbmNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIGNoaWxkcmVuIGFuZCByZXR1cm5zIGEgbmV3IHNldCBvZiBjaGlsZHJlbi5cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q2hpbGRyZW4gUHJldmlvdXNseSBpbml0aWFsaXplZCBzZXQgb2YgY2hpbGRyZW4uXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dE5lc3RlZENoaWxkTm9kZXMgTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P29iamVjdH0gQSBuZXcgc2V0IG9mIGNoaWxkIGluc3RhbmNlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24oXG4gICAgcHJldkNoaWxkcmVuLFxuICAgIG5leHROZXN0ZWRDaGlsZE5vZGVzLFxuICAgIHRyYW5zYWN0aW9uLFxuICAgIGNvbnRleHQpIHtcbiAgICAvLyBXZSBjdXJyZW50bHkgZG9uJ3QgaGF2ZSBhIHdheSB0byB0cmFjayBtb3ZlcyBoZXJlIGJ1dCBpZiB3ZSB1c2UgaXRlcmF0b3JzXG4gICAgLy8gaW5zdGVhZCBvZiBmb3IuLmluIHdlIGNhbiB6aXAgdGhlIGl0ZXJhdG9ycyBhbmQgY2hlY2sgaWYgYW4gaXRlbSBoYXNcbiAgICAvLyBtb3ZlZC5cbiAgICAvLyBUT0RPOiBJZiBub3RoaW5nIGhhcyBjaGFuZ2VkLCByZXR1cm4gdGhlIHByZXZDaGlsZHJlbiBvYmplY3Qgc28gdGhhdCB3ZVxuICAgIC8vIGNhbiBxdWlja2x5IGJhaWxvdXQgaWYgbm90aGluZyBoYXMgY2hhbmdlZC5cbiAgICB2YXIgbmV4dENoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZE5vZGVzKTtcbiAgICBpZiAoIW5leHRDaGlsZHJlbiAmJiAhcHJldkNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG5hbWU7XG4gICAgZm9yIChuYW1lIGluIG5leHRDaGlsZHJlbikge1xuICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuICYmIHByZXZDaGlsZHJlbltuYW1lXTtcbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHByZXZDaGlsZCAmJiBwcmV2Q2hpbGQuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdmFyIG5leHRFbGVtZW50ID0gbmV4dENoaWxkcmVuW25hbWVdO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQoXG4gICAgICAgICAgcHJldkNoaWxkLCBuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgICAgbmV4dENoaWxkcmVuW25hbWVdID0gcHJldkNoaWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuICAgICAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHByZXZDaGlsZCwgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGNoaWxkIG11c3QgYmUgaW5zdGFudGlhdGVkIGJlZm9yZSBpdCdzIG1vdW50ZWQuXG4gICAgICAgIHZhciBuZXh0Q2hpbGRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoXG4gICAgICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgICBuZXh0Q2hpbGRyZW5bbmFtZV0gPSBuZXh0Q2hpbGRJbnN0YW5jZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVW5tb3VudCBjaGlsZHJlbiB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudC5cbiAgICBmb3IgKG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgICAgIShuZXh0Q2hpbGRyZW4gJiYgbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSkge1xuICAgICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChwcmV2Q2hpbGRyZW5bbmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV4dENoaWxkcmVuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVbm1vdW50cyBhbGwgcmVuZGVyZWQgY2hpbGRyZW4uIFRoaXMgc2hvdWxkIGJlIHVzZWQgdG8gY2xlYW4gdXAgY2hpbGRyZW5cbiAgICogd2hlbiB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcmVuZGVyZWRDaGlsZHJlbiBQcmV2aW91c2x5IGluaXRpYWxpemVkIHNldCBvZiBjaGlsZHJlbi5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q2hpbGRyZW46IGZ1bmN0aW9uKHJlbmRlcmVkQ2hpbGRyZW4pIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHJlbmRlcmVkQ2hpbGRyZW4pIHtcbiAgICAgIHZhciByZW5kZXJlZENoaWxkID0gcmVuZGVyZWRDaGlsZHJlbltuYW1lXTtcbiAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHJlbmRlcmVkQ2hpbGQpO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2hpbGRSZWNvbmNpbGVyO1xuXG59LHtcIi4vUmVhY3RSZWNvbmNpbGVyXCI6MjM1LFwiLi9mbGF0dGVuQ2hpbGRyZW5cIjoyODAsXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIjoyOTYsXCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XCI6MzE0fV0sMTgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDaGlsZHJlblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgUmVhY3RGcmFnbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RnJhZ21lbnRcIik7XG5cbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZShcIi4vdHJhdmVyc2VBbGxDaGlsZHJlblwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gUG9vbGVkQ2xhc3MudHdvQXJndW1lbnRQb29sZXI7XG52YXIgdGhyZWVBcmd1bWVudFBvb2xlciA9IFBvb2xlZENsYXNzLnRocmVlQXJndW1lbnRQb29sZXI7XG5cbi8qKlxuICogUG9vbGVkQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSBib29ra2VlcGluZyBhc3NvY2lhdGVkIHdpdGggcGVyZm9ybWluZyBhIGNoaWxkXG4gKiB0cmF2ZXJzYWwuIEFsbG93cyBhdm9pZGluZyBiaW5kaW5nIGNhbGxiYWNrcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgRm9yRWFjaEJvb2tLZWVwaW5nXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gZm9yRWFjaEZ1bmN0aW9uIEZ1bmN0aW9uIHRvIHBlcmZvcm0gdHJhdmVyc2FsIHdpdGguXG4gKiBAcGFyYW0gez8qfSBmb3JFYWNoQ29udGV4dCBDb250ZXh0IHRvIHBlcmZvcm0gY29udGV4dCB3aXRoLlxuICovXG5mdW5jdGlvbiBGb3JFYWNoQm9va0tlZXBpbmcoZm9yRWFjaEZ1bmN0aW9uLCBmb3JFYWNoQ29udGV4dCkge1xuICB0aGlzLmZvckVhY2hGdW5jdGlvbiA9IGZvckVhY2hGdW5jdGlvbjtcbiAgdGhpcy5mb3JFYWNoQ29udGV4dCA9IGZvckVhY2hDb250ZXh0O1xufVxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKEZvckVhY2hCb29rS2VlcGluZywgdHdvQXJndW1lbnRQb29sZXIpO1xuXG5mdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGQodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSwgaSkge1xuICB2YXIgZm9yRWFjaEJvb2tLZWVwaW5nID0gdHJhdmVyc2VDb250ZXh0O1xuICBmb3JFYWNoQm9va0tlZXBpbmcuZm9yRWFjaEZ1bmN0aW9uLmNhbGwoXG4gICAgZm9yRWFjaEJvb2tLZWVwaW5nLmZvckVhY2hDb250ZXh0LCBjaGlsZCwgaSk7XG59XG5cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogVGhlIHByb3ZpZGVkIGZvckVhY2hGdW5jKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZvckVhY2hGdW5jLlxuICogQHBhcmFtIHsqfSBmb3JFYWNoQ29udGV4dCBDb250ZXh0IGZvciBmb3JFYWNoQ29udGV4dC5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cblxuICB2YXIgdHJhdmVyc2VDb250ZXh0ID1cbiAgICBGb3JFYWNoQm9va0tlZXBpbmcuZ2V0UG9vbGVkKGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hTaW5nbGVDaGlsZCwgdHJhdmVyc2VDb250ZXh0KTtcbiAgRm9yRWFjaEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBQb29sZWRDbGFzcyByZXByZXNlbnRpbmcgdGhlIGJvb2trZWVwaW5nIGFzc29jaWF0ZWQgd2l0aCBwZXJmb3JtaW5nIGEgY2hpbGRcbiAqIG1hcHBpbmcuIEFsbG93cyBhdm9pZGluZyBiaW5kaW5nIGNhbGxiYWNrcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgTWFwQm9va0tlZXBpbmdcbiAqIEBwYXJhbSB7ISp9IG1hcFJlc3VsdCBPYmplY3QgY29udGFpbmluZyB0aGUgb3JkZXJlZCBtYXAgb2YgcmVzdWx0cy5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBtYXBGdW5jdGlvbiBGdW5jdGlvbiB0byBwZXJmb3JtIG1hcHBpbmcgd2l0aC5cbiAqIEBwYXJhbSB7Pyp9IG1hcENvbnRleHQgQ29udGV4dCB0byBwZXJmb3JtIG1hcHBpbmcgd2l0aC5cbiAqL1xuZnVuY3Rpb24gTWFwQm9va0tlZXBpbmcobWFwUmVzdWx0LCBtYXBGdW5jdGlvbiwgbWFwQ29udGV4dCkge1xuICB0aGlzLm1hcFJlc3VsdCA9IG1hcFJlc3VsdDtcbiAgdGhpcy5tYXBGdW5jdGlvbiA9IG1hcEZ1bmN0aW9uO1xuICB0aGlzLm1hcENvbnRleHQgPSBtYXBDb250ZXh0O1xufVxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKE1hcEJvb2tLZWVwaW5nLCB0aHJlZUFyZ3VtZW50UG9vbGVyKTtcblxuZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lLCBpKSB7XG4gIHZhciBtYXBCb29rS2VlcGluZyA9IHRyYXZlcnNlQ29udGV4dDtcbiAgdmFyIG1hcFJlc3VsdCA9IG1hcEJvb2tLZWVwaW5nLm1hcFJlc3VsdDtcblxuICB2YXIga2V5VW5pcXVlID0gIW1hcFJlc3VsdC5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAga2V5VW5pcXVlLFxuICAgICAgJ1JlYWN0Q2hpbGRyZW4ubWFwKC4uLik6IEVuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgJyArXG4gICAgICAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArXG4gICAgICAndGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgdXNlZC4nLFxuICAgICAgbmFtZVxuICAgICkgOiBudWxsKTtcbiAgfVxuXG4gIGlmIChrZXlVbmlxdWUpIHtcbiAgICB2YXIgbWFwcGVkQ2hpbGQgPVxuICAgICAgbWFwQm9va0tlZXBpbmcubWFwRnVuY3Rpb24uY2FsbChtYXBCb29rS2VlcGluZy5tYXBDb250ZXh0LCBjaGlsZCwgaSk7XG4gICAgbWFwUmVzdWx0W25hbWVdID0gbWFwcGVkQ2hpbGQ7XG4gIH1cbn1cblxuLyoqXG4gKiBNYXBzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBUaGUgcHJvdmlkZWQgbWFwRnVuY3Rpb24oY2hpbGQsIGtleSwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIFRPRE86IFRoaXMgbWF5IGxpa2VseSBicmVhayBhbnkgY2FsbHMgdG8gYFJlYWN0Q2hpbGRyZW4ubWFwYCB0aGF0IHdlcmVcbiAqIHByZXZpb3VzbHkgcmVseWluZyBvbiB0aGUgZmFjdCB0aGF0IHdlIGd1YXJkZWQgYWdhaW5zdCBudWxsIGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBtYXBGdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gbWFwQ29udGV4dCBDb250ZXh0IGZvciBtYXBGdW5jdGlvbi5cbiAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgdmFyIG1hcFJlc3VsdCA9IHt9O1xuICB2YXIgdHJhdmVyc2VDb250ZXh0ID0gTWFwQm9va0tlZXBpbmcuZ2V0UG9vbGVkKG1hcFJlc3VsdCwgZnVuYywgY29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQsIHRyYXZlcnNlQ29udGV4dCk7XG4gIE1hcEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcbiAgcmV0dXJuIFJlYWN0RnJhZ21lbnQuY3JlYXRlKG1hcFJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZER1bW15KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUsIGkpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQ291bnQgdGhlIG51bWJlciBvZiBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzXG4gKiBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuLlxuICovXG5mdW5jdGlvbiBjb3VudENoaWxkcmVuKGNoaWxkcmVuLCBjb250ZXh0KSB7XG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSwgbnVsbCk7XG59XG5cbnZhciBSZWFjdENoaWxkcmVuID0ge1xuICBmb3JFYWNoOiBmb3JFYWNoQ2hpbGRyZW4sXG4gIG1hcDogbWFwQ2hpbGRyZW4sXG4gIGNvdW50OiBjb3VudENoaWxkcmVuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2hpbGRyZW47XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1Bvb2xlZENsYXNzXCI6MTc2LFwiLi9SZWFjdEZyYWdtZW50XCI6MjE1LFwiLi90cmF2ZXJzZUFsbENoaWxkcmVuXCI6MzE2LFwiLi93YXJuaW5nXCI6MzE4LFwiX3Byb2Nlc3NcIjoxfV0sMTg0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDbGFzc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFcnJvclV0aWxzID0gcmVxdWlyZShcIi4vUmVhY3RFcnJvclV0aWxzXCIpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpO1xudmFyIFJlYWN0TGlmZUN5Y2xlID0gcmVxdWlyZShcIi4vUmVhY3RMaWZlQ3ljbGVcIik7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnNcIik7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiKTtcbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVRdWV1ZVwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoXCIuL2tleU1pcnJvclwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgTUlYSU5TX0tFWSA9IGtleU9mKHttaXhpbnM6IG51bGx9KTtcblxuLyoqXG4gKiBQb2xpY2llcyB0aGF0IGRlc2NyaWJlIG1ldGhvZHMgaW4gYFJlYWN0Q2xhc3NJbnRlcmZhY2VgLlxuICovXG52YXIgU3BlY1BvbGljeSA9IGtleU1pcnJvcih7XG4gIC8qKlxuICAgKiBUaGVzZSBtZXRob2RzIG1heSBiZSBkZWZpbmVkIG9ubHkgb25jZSBieSB0aGUgY2xhc3Mgc3BlY2lmaWNhdGlvbiBvciBtaXhpbi5cbiAgICovXG4gIERFRklORV9PTkNFOiBudWxsLFxuICAvKipcbiAgICogVGhlc2UgbWV0aG9kcyBtYXkgYmUgZGVmaW5lZCBieSBib3RoIHRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIGFuZCBtaXhpbnMuXG4gICAqIFN1YnNlcXVlbnQgZGVmaW5pdGlvbnMgd2lsbCBiZSBjaGFpbmVkLiBUaGVzZSBtZXRob2RzIG11c3QgcmV0dXJuIHZvaWQuXG4gICAqL1xuICBERUZJTkVfTUFOWTogbnVsbCxcbiAgLyoqXG4gICAqIFRoZXNlIG1ldGhvZHMgYXJlIG92ZXJyaWRpbmcgdGhlIGJhc2UgY2xhc3MuXG4gICAqL1xuICBPVkVSUklERV9CQVNFOiBudWxsLFxuICAvKipcbiAgICogVGhlc2UgbWV0aG9kcyBhcmUgc2ltaWxhciB0byBERUZJTkVfTUFOWSwgZXhjZXB0IHdlIGFzc3VtZSB0aGV5IHJldHVyblxuICAgKiBvYmplY3RzLiBXZSB0cnkgdG8gbWVyZ2UgdGhlIGtleXMgb2YgdGhlIHJldHVybiB2YWx1ZXMgb2YgYWxsIHRoZSBtaXhlZCBpblxuICAgKiBmdW5jdGlvbnMuIElmIHRoZXJlIGlzIGEga2V5IGNvbmZsaWN0IHdlIHRocm93LlxuICAgKi9cbiAgREVGSU5FX01BTllfTUVSR0VEOiBudWxsXG59KTtcblxuXG52YXIgaW5qZWN0ZWRNaXhpbnMgPSBbXTtcblxuLyoqXG4gKiBDb21wb3NpdGUgY29tcG9uZW50cyBhcmUgaGlnaGVyLWxldmVsIGNvbXBvbmVudHMgdGhhdCBjb21wb3NlIG90aGVyIGNvbXBvc2l0ZVxuICogb3IgbmF0aXZlIGNvbXBvbmVudHMuXG4gKlxuICogVG8gY3JlYXRlIGEgbmV3IHR5cGUgb2YgYFJlYWN0Q2xhc3NgLCBwYXNzIGEgc3BlY2lmaWNhdGlvbiBvZlxuICogeW91ciBuZXcgY2xhc3MgdG8gYFJlYWN0LmNyZWF0ZUNsYXNzYC4gVGhlIG9ubHkgcmVxdWlyZW1lbnQgb2YgeW91ciBjbGFzc1xuICogc3BlY2lmaWNhdGlvbiBpcyB0aGF0IHlvdSBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuXG4gKlxuICogICB2YXIgTXlDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHJldHVybiA8ZGl2PkhlbGxvIFdvcmxkPC9kaXY+O1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogVGhlIGNsYXNzIHNwZWNpZmljYXRpb24gc3VwcG9ydHMgYSBzcGVjaWZpYyBwcm90b2NvbCBvZiBtZXRob2RzIHRoYXQgaGF2ZVxuICogc3BlY2lhbCBtZWFuaW5nIChlLmcuIGByZW5kZXJgKS4gU2VlIGBSZWFjdENsYXNzSW50ZXJmYWNlYCBmb3JcbiAqIG1vcmUgdGhlIGNvbXByZWhlbnNpdmUgcHJvdG9jb2wuIEFueSBvdGhlciBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGluIHRoZVxuICogY2xhc3Mgc3BlY2lmaWNhdGlvbiB3aWxsIGF2YWlsYWJsZSBvbiB0aGUgcHJvdG90eXBlLlxuICpcbiAqIEBpbnRlcmZhY2UgUmVhY3RDbGFzc0ludGVyZmFjZVxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdENsYXNzSW50ZXJmYWNlID0ge1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBNaXhpbiBvYmplY3RzIHRvIGluY2x1ZGUgd2hlbiBkZWZpbmluZyB5b3VyIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge2FycmF5fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIG1peGluczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBhbmQgbWV0aG9kcyB0aGF0IHNob3VsZCBiZSBkZWZpbmVkIG9uXG4gICAqIHRoZSBjb21wb25lbnQncyBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIGl0cyBwcm90b3R5cGUgKHN0YXRpYyBtZXRob2RzKS5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBzdGF0aWNzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBEZWZpbml0aW9uIG9mIHByb3AgdHlwZXMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKlxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIHByb3BUeXBlczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogRGVmaW5pdGlvbiBvZiBjb250ZXh0IHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb250ZXh0VHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyB0aGlzIGNvbXBvbmVudCBzZXRzIGZvciBpdHMgY2hpbGRyZW4uXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY2hpbGRDb250ZXh0VHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLy8gPT09PSBEZWZpbml0aW9uIG1ldGhvZHMgPT09PVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBWYWx1ZXMgaW4gdGhlIG1hcHBpbmcgd2lsbCBiZSBzZXQgb25cbiAgICogYHRoaXMucHJvcHNgIGlmIHRoYXQgcHJvcCBpcyBub3Qgc3BlY2lmaWVkIChpLmUuIHVzaW5nIGFuIGBpbmAgY2hlY2spLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBpbnZva2VkIGJlZm9yZSBgZ2V0SW5pdGlhbFN0YXRlYCBhbmQgdGhlcmVmb3JlIGNhbm5vdCByZWx5XG4gICAqIG9uIGB0aGlzLnN0YXRlYCBvciB1c2UgYHRoaXMuc2V0U3RhdGVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgZ2V0RGVmYXVsdFByb3BzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcblxuICAvKipcbiAgICogSW52b2tlZCBvbmNlIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQuIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBiZSB1c2VkXG4gICAqIGFzIHRoZSBpbml0aWFsIHZhbHVlIG9mIGB0aGlzLnN0YXRlYC5cbiAgICpcbiAgICogICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgcmV0dXJuIHtcbiAgICogICAgICAgaXNPbjogZmFsc2UsXG4gICAqICAgICAgIGZvb0JhejogbmV3IEJhekZvbygpXG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgZ2V0SW5pdGlhbFN0YXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldENoaWxkQ29udGV4dDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cbiAgLyoqXG4gICAqIFVzZXMgcHJvcHMgZnJvbSBgdGhpcy5wcm9wc2AgYW5kIHN0YXRlIGZyb20gYHRoaXMuc3RhdGVgIHRvIHJlbmRlciB0aGVcbiAgICogc3RydWN0dXJlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIE5vIGd1YXJhbnRlZXMgYXJlIG1hZGUgYWJvdXQgd2hlbiBvciBob3cgb2Z0ZW4gdGhpcyBtZXRob2QgaXMgaW52b2tlZCwgc29cbiAgICogaXQgbXVzdCBub3QgaGF2ZSBzaWRlIGVmZmVjdHMuXG4gICAqXG4gICAqICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICogICAgIHZhciBuYW1lID0gdGhpcy5wcm9wcy5uYW1lO1xuICAgKiAgICAgcmV0dXJuIDxkaXY+SGVsbG8sIHtuYW1lfSE8L2Rpdj47XG4gICAqICAgfVxuICAgKlxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH1cbiAgICogQG5vc2lkZWVmZmVjdHNcbiAgICogQHJlcXVpcmVkXG4gICAqL1xuICByZW5kZXI6IFNwZWNQb2xpY3kuREVGSU5FX09OQ0UsXG5cblxuXG4gIC8vID09PT0gRGVsZWdhdGUgbWV0aG9kcyA9PT09XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluaXRpYWxseSBjcmVhdGVkIGFuZCBhYm91dCB0byBiZSBtb3VudGVkLlxuICAgKiBUaGlzIG1heSBoYXZlIHNpZGUgZWZmZWN0cywgYnV0IGFueSBleHRlcm5hbCBzdWJzY3JpcHRpb25zIG9yIGRhdGEgY3JlYXRlZFxuICAgKiBieSB0aGlzIG1ldGhvZCBtdXN0IGJlIGNsZWFuZWQgdXAgaW4gYGNvbXBvbmVudFdpbGxVbm1vdW50YC5cbiAgICpcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsTW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgYW5kIGhhcyBhIERPTSByZXByZXNlbnRhdGlvbi5cbiAgICogSG93ZXZlciwgdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIERPTSBub2RlIGlzIGluIHRoZSBkb2N1bWVudC5cbiAgICpcbiAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gb3BlcmF0ZSBvbiB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBoYXNcbiAgICogYmVlbiBtb3VudGVkIChpbml0aWFsaXplZCBhbmQgcmVuZGVyZWQpIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSByb290Tm9kZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudC5cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCByZWNlaXZlcyBuZXcgcHJvcHMuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHJlYWN0IHRvIGEgcHJvcCB0cmFuc2l0aW9uIGJ5IHVwZGF0aW5nIHRoZVxuICAgKiBzdGF0ZSB1c2luZyBgdGhpcy5zZXRTdGF0ZWAuIEN1cnJlbnQgcHJvcHMgYXJlIGFjY2Vzc2VkIHZpYSBgdGhpcy5wcm9wc2AuXG4gICAqXG4gICAqICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgKiAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAqICAgICAgIGxpa2VzSW5jcmVhc2luZzogbmV4dFByb3BzLmxpa2VDb3VudCA+IHRoaXMucHJvcHMubGlrZUNvdW50XG4gICAqICAgICB9KTtcbiAgICogICB9XG4gICAqXG4gICAqIE5PVEU6IFRoZXJlIGlzIG5vIGVxdWl2YWxlbnQgYGNvbXBvbmVudFdpbGxSZWNlaXZlU3RhdGVgLiBBbiBpbmNvbWluZyBwcm9wXG4gICAqIHRyYW5zaXRpb24gbWF5IGNhdXNlIGEgc3RhdGUgY2hhbmdlLCBidXQgdGhlIG9wcG9zaXRlIGlzIG5vdCB0cnVlLiBJZiB5b3VcbiAgICogbmVlZCBpdCwgeW91IGFyZSBwcm9iYWJseSBsb29raW5nIGZvciBgY29tcG9uZW50V2lsbFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoaWxlIGRlY2lkaW5nIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIHVwZGF0ZWQgYXMgYSByZXN1bHQgb2ZcbiAgICogcmVjZWl2aW5nIG5ldyBwcm9wcywgc3RhdGUgYW5kL29yIGNvbnRleHQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGByZXR1cm4gZmFsc2VgIHdoZW4geW91J3JlIGNlcnRhaW4gdGhhdCB0aGVcbiAgICogdHJhbnNpdGlvbiB0byB0aGUgbmV3IHByb3BzL3N0YXRlL2NvbnRleHQgd2lsbCBub3QgcmVxdWlyZSBhIGNvbXBvbmVudFxuICAgKiB1cGRhdGUuXG4gICAqXG4gICAqICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbihuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgICogICAgIHJldHVybiAhZXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKSB8fFxuICAgKiAgICAgICAhZXF1YWwobmV4dFN0YXRlLCB0aGlzLnN0YXRlKSB8fFxuICAgKiAgICAgICAhZXF1YWwobmV4dENvbnRleHQsIHRoaXMuY29udGV4dCk7XG4gICAqICAgfVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY29tcG9uZW50IHNob3VsZCB1cGRhdGUuXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9PTkNFLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBhYm91dCB0byB1cGRhdGUgZHVlIHRvIGEgdHJhbnNpdGlvbiBmcm9tXG4gICAqIGB0aGlzLnByb3BzYCwgYHRoaXMuc3RhdGVgIGFuZCBgdGhpcy5jb250ZXh0YCB0byBgbmV4dFByb3BzYCwgYG5leHRTdGF0ZWBcbiAgICogYW5kIGBuZXh0Q29udGV4dGAuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHBlcmZvcm0gcHJlcGFyYXRpb24gYmVmb3JlIGFuIHVwZGF0ZSBvY2N1cnMuXG4gICAqXG4gICAqIE5PVEU6IFlvdSAqKmNhbm5vdCoqIHVzZSBgdGhpcy5zZXRTdGF0ZSgpYCBpbiB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsVXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCdzIERPTSByZXByZXNlbnRhdGlvbiBoYXMgYmVlbiB1cGRhdGVkLlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBvcGVyYXRlIG9uIHRoZSBET00gd2hlbiB0aGUgY29tcG9uZW50IGhhc1xuICAgKiBiZWVuIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2UHJvcHNcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2U3RhdGVcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q29udGV4dFxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHJvb3ROb2RlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50LlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgcmVtb3ZlZCBmcm9tIGl0cyBwYXJlbnQgYW5kIGhhdmVcbiAgICogaXRzIERPTSByZXByZXNlbnRhdGlvbiBkZXN0cm95ZWQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGRlYWxsb2NhdGUgYW55IGV4dGVybmFsIHJlc291cmNlcy5cbiAgICpcbiAgICogTk9URTogVGhlcmUgaXMgbm8gYGNvbXBvbmVudERpZFVubW91bnRgIHNpbmNlIHlvdXIgY29tcG9uZW50IHdpbGwgaGF2ZSBiZWVuXG4gICAqIGRlc3Ryb3llZCBieSB0aGF0IHBvaW50LlxuICAgKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG5cblxuICAvLyA9PT09IEFkdmFuY2VkIG1ldGhvZHMgPT09PVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBjb21wb25lbnQncyBjdXJyZW50bHkgbW91bnRlZCBET00gcmVwcmVzZW50YXRpb24uXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgaW1wbGVtZW50cyBSZWFjdCdzIHJlbmRlcmluZyBhbmQgcmVjb25jaWxpYXRpb24gYWxnb3JpdGhtLlxuICAgKiBTb3BoaXN0aWNhdGVkIGNsaWVudHMgbWF5IHdpc2ggdG8gb3ZlcnJpZGUgdGhpcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICogQG92ZXJyaWRhYmxlXG4gICAqL1xuICB1cGRhdGVDb21wb25lbnQ6IFNwZWNQb2xpY3kuT1ZFUlJJREVfQkFTRVxuXG59O1xuXG4vKipcbiAqIE1hcHBpbmcgZnJvbSBjbGFzcyBzcGVjaWZpY2F0aW9uIGtleXMgdG8gc3BlY2lhbCBwcm9jZXNzaW5nIGZ1bmN0aW9ucy5cbiAqXG4gKiBBbHRob3VnaCB0aGVzZSBhcmUgZGVjbGFyZWQgbGlrZSBpbnN0YW5jZSBwcm9wZXJ0aWVzIGluIHRoZSBzcGVjaWZpY2F0aW9uXG4gKiB3aGVuIGRlZmluaW5nIGNsYXNzZXMgdXNpbmcgYFJlYWN0LmNyZWF0ZUNsYXNzYCwgdGhleSBhcmUgYWN0dWFsbHkgc3RhdGljXG4gKiBhbmQgYXJlIGFjY2Vzc2libGUgb24gdGhlIGNvbnN0cnVjdG9yIGluc3RlYWQgb2YgdGhlIHByb3RvdHlwZS4gRGVzcGl0ZVxuICogYmVpbmcgc3RhdGljLCB0aGV5IG11c3QgYmUgZGVmaW5lZCBvdXRzaWRlIG9mIHRoZSBcInN0YXRpY3NcIiBrZXkgdW5kZXJcbiAqIHdoaWNoIGFsbCBvdGhlciBzdGF0aWMgbWV0aG9kcyBhcmUgZGVmaW5lZC5cbiAqL1xudmFyIFJFU0VSVkVEX1NQRUNfS0VZUyA9IHtcbiAgZGlzcGxheU5hbWU6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBkaXNwbGF5TmFtZSkge1xuICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIH0sXG4gIG1peGluczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIG1peGlucykge1xuICAgIGlmIChtaXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBtaXhpbnNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY2hpbGRDb250ZXh0VHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBjaGlsZENvbnRleHRUeXBlcykge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHZhbGlkYXRlVHlwZURlZihcbiAgICAgICAgQ29uc3RydWN0b3IsXG4gICAgICAgIGNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNoaWxkQ29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gICAgQ29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMgPSBhc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgY2hpbGRDb250ZXh0VHlwZXNcbiAgICApO1xuICB9LFxuICBjb250ZXh0VHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB2YWxpZGF0ZVR5cGVEZWYoXG4gICAgICAgIENvbnN0cnVjdG9yLFxuICAgICAgICBjb250ZXh0VHlwZXMsXG4gICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzID0gYXNzaWduKFxuICAgICAge30sXG4gICAgICBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMsXG4gICAgICBjb250ZXh0VHlwZXNcbiAgICApO1xuICB9LFxuICAvKipcbiAgICogU3BlY2lhbCBjYXNlIGdldERlZmF1bHRQcm9wcyB3aGljaCBzaG91bGQgbW92ZSBpbnRvIHN0YXRpY3MgYnV0IHJlcXVpcmVzXG4gICAqIGF1dG9tYXRpYyBtZXJnaW5nLlxuICAgKi9cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oXG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyxcbiAgICAgICAgZ2V0RGVmYXVsdFByb3BzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMgPSBnZXREZWZhdWx0UHJvcHM7XG4gICAgfVxuICB9LFxuICBwcm9wVHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBwcm9wVHlwZXMpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB2YWxpZGF0ZVR5cGVEZWYoXG4gICAgICAgIENvbnN0cnVjdG9yLFxuICAgICAgICBwcm9wVHlwZXMsXG4gICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcFxuICAgICAgKTtcbiAgICB9XG4gICAgQ29uc3RydWN0b3IucHJvcFR5cGVzID0gYXNzaWduKFxuICAgICAge30sXG4gICAgICBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMsXG4gICAgICBwcm9wVHlwZXNcbiAgICApO1xuICB9LFxuICBzdGF0aWNzOiBmdW5jdGlvbihDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICAgIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCB0eXBlRGVmLCBsb2NhdGlvbikge1xuICBmb3IgKHZhciBwcm9wTmFtZSBpbiB0eXBlRGVmKSB7XG4gICAgaWYgKHR5cGVEZWYuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAvLyB1c2UgYSB3YXJuaW5nIGluc3RlYWQgb2YgYW4gaW52YXJpYW50IHNvIGNvbXBvbmVudHNcbiAgICAgIC8vIGRvbid0IHNob3cgdXAgaW4gcHJvZCBidXQgbm90IGluIF9fREVWX19cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICB0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsXG4gICAgICAgICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgK1xuICAgICAgICAnUmVhY3QuUHJvcFR5cGVzLicsXG4gICAgICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJyxcbiAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLFxuICAgICAgICBwcm9wTmFtZVxuICAgICAgKSA6IG51bGwpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKHByb3RvLCBuYW1lKSB7XG4gIHZhciBzcGVjUG9saWN5ID0gUmVhY3RDbGFzc0ludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/XG4gICAgUmVhY3RDbGFzc0ludGVyZmFjZVtuYW1lXSA6XG4gICAgbnVsbDtcblxuICAvLyBEaXNhbGxvdyBvdmVycmlkaW5nIG9mIGJhc2UgY2xhc3MgbWV0aG9kcyB1bmxlc3MgZXhwbGljaXRseSBhbGxvd2VkLlxuICBpZiAoUmVhY3RDbGFzc01peGluLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuT1ZFUlJJREVfQkFTRSxcbiAgICAgICdSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gb3ZlcnJpZGUgJyArXG4gICAgICAnYCVzYCBmcm9tIHlvdXIgY2xhc3Mgc3BlY2lmaWNhdGlvbi4gRW5zdXJlIHRoYXQgeW91ciBtZXRob2QgbmFtZXMgJyArXG4gICAgICAnZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsXG4gICAgICBuYW1lXG4gICAgKSA6IGludmFyaWFudChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5Lk9WRVJSSURFX0JBU0UpKTtcbiAgfVxuXG4gIC8vIERpc2FsbG93IGRlZmluaW5nIG1ldGhvZHMgbW9yZSB0aGFuIG9uY2UgdW5sZXNzIGV4cGxpY2l0bHkgYWxsb3dlZC5cbiAgaWYgKHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkgfHxcbiAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFxuICAgICAgJ1JlYWN0Q2xhc3NJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArXG4gICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlICcgK1xuICAgICAgJ3RvIGEgbWl4aW4uJyxcbiAgICAgIG5hbWVcbiAgICApIDogaW52YXJpYW50KHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkgfHxcbiAgICBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkpO1xuICB9XG59XG5cbi8qKlxuICogTWl4aW4gaGVscGVyIHdoaWNoIGhhbmRsZXMgcG9saWN5IHZhbGlkYXRpb24gYW5kIHJlc2VydmVkXG4gKiBzcGVjaWZpY2F0aW9uIGtleXMgd2hlbiBidWlsZGluZyBSZWFjdCBjbGFzc3Nlcy5cbiAqL1xuZnVuY3Rpb24gbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpIHtcbiAgaWYgKCFzcGVjKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICB0eXBlb2Ygc3BlYyAhPT0gJ2Z1bmN0aW9uJyxcbiAgICAnUmVhY3RDbGFzczogWW91XFwncmUgYXR0ZW1wdGluZyB0byAnICtcbiAgICAndXNlIGEgY29tcG9uZW50IGNsYXNzIGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuJ1xuICApIDogaW52YXJpYW50KHR5cGVvZiBzcGVjICE9PSAnZnVuY3Rpb24nKSk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChzcGVjKSxcbiAgICAnUmVhY3RDbGFzczogWW91XFwncmUgYXR0ZW1wdGluZyB0byAnICtcbiAgICAndXNlIGEgY29tcG9uZW50IGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuJ1xuICApIDogaW52YXJpYW50KCFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3BlYykpKTtcblxuICB2YXIgcHJvdG8gPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgLy8gQnkgaGFuZGxpbmcgbWl4aW5zIGJlZm9yZSBhbnkgb3RoZXIgcHJvcGVydGllcywgd2UgZW5zdXJlIHRoZSBzYW1lXG4gIC8vIGNoYWluaW5nIG9yZGVyIGlzIGFwcGxpZWQgdG8gbWV0aG9kcyB3aXRoIERFRklORV9NQU5ZIHBvbGljeSwgd2hldGhlclxuICAvLyBtaXhpbnMgYXJlIGxpc3RlZCBiZWZvcmUgb3IgYWZ0ZXIgdGhlc2UgbWV0aG9kcyBpbiB0aGUgc3BlYy5cbiAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICBSRVNFUlZFRF9TUEVDX0tFWVMubWl4aW5zKENvbnN0cnVjdG9yLCBzcGVjLm1peGlucyk7XG4gIH1cblxuICBmb3IgKHZhciBuYW1lIGluIHNwZWMpIHtcbiAgICBpZiAoIXNwZWMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSBNSVhJTlNfS0VZKSB7XG4gICAgICAvLyBXZSBoYXZlIGFscmVhZHkgaGFuZGxlZCBtaXhpbnMgaW4gYSBzcGVjaWFsIGNhc2UgYWJvdmVcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBwcm9wZXJ0eSA9IHNwZWNbbmFtZV07XG4gICAgdmFsaWRhdGVNZXRob2RPdmVycmlkZShwcm90bywgbmFtZSk7XG5cbiAgICBpZiAoUkVTRVJWRURfU1BFQ19LRVlTLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBSRVNFUlZFRF9TUEVDX0tFWVNbbmFtZV0oQ29uc3RydWN0b3IsIHByb3BlcnR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2V0dXAgbWV0aG9kcyBvbiBwcm90b3R5cGU6XG4gICAgICAvLyBUaGUgZm9sbG93aW5nIG1lbWJlciBtZXRob2RzIHNob3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBib3VuZDpcbiAgICAgIC8vIDEuIEV4cGVjdGVkIFJlYWN0Q2xhc3MgbWV0aG9kcyAoaW4gdGhlIFwiaW50ZXJmYWNlXCIpLlxuICAgICAgLy8gMi4gT3ZlcnJpZGRlbiBtZXRob2RzICh0aGF0IHdlcmUgbWl4ZWQgaW4pLlxuICAgICAgdmFyIGlzUmVhY3RDbGFzc01ldGhvZCA9XG4gICAgICAgIFJlYWN0Q2xhc3NJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB2YXIgaXNBbHJlYWR5RGVmaW5lZCA9IHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgdmFyIG1hcmtlZERvbnRCaW5kID0gcHJvcGVydHkgJiYgcHJvcGVydHkuX19yZWFjdERvbnRCaW5kO1xuICAgICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbic7XG4gICAgICB2YXIgc2hvdWxkQXV0b0JpbmQgPVxuICAgICAgICBpc0Z1bmN0aW9uICYmXG4gICAgICAgICFpc1JlYWN0Q2xhc3NNZXRob2QgJiZcbiAgICAgICAgIWlzQWxyZWFkeURlZmluZWQgJiZcbiAgICAgICAgIW1hcmtlZERvbnRCaW5kO1xuXG4gICAgICBpZiAoc2hvdWxkQXV0b0JpbmQpIHtcbiAgICAgICAgaWYgKCFwcm90by5fX3JlYWN0QXV0b0JpbmRNYXApIHtcbiAgICAgICAgICBwcm90by5fX3JlYWN0QXV0b0JpbmRNYXAgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBwcm90by5fX3JlYWN0QXV0b0JpbmRNYXBbbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlW25hbWVdO1xuXG4gICAgICAgICAgLy8gVGhlc2UgY2FzZXMgc2hvdWxkIGFscmVhZHkgYmUgY2F1Z2h0IGJ5IHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGVcbiAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgICAgaXNSZWFjdENsYXNzTWV0aG9kICYmIChcbiAgICAgICAgICAgICAgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEIHx8IHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgJ1JlYWN0Q2xhc3M6IFVuZXhwZWN0ZWQgc3BlYyBwb2xpY3kgJXMgZm9yIGtleSAlcyAnICtcbiAgICAgICAgICAgICd3aGVuIG1peGluZyBpbiBjb21wb25lbnQgc3BlY3MuJyxcbiAgICAgICAgICAgIHNwZWNQb2xpY3ksXG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgKSA6IGludmFyaWFudChpc1JlYWN0Q2xhc3NNZXRob2QgJiYgKFxuICAgICAgICAgICAgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEIHx8IHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkpXG4gICAgICAgICAgKSkpO1xuXG4gICAgICAgICAgLy8gRm9yIG1ldGhvZHMgd2hpY2ggYXJlIGRlZmluZWQgbW9yZSB0aGFuIG9uY2UsIGNhbGwgdGhlIGV4aXN0aW5nXG4gICAgICAgICAgLy8gbWV0aG9kcyBiZWZvcmUgY2FsbGluZyB0aGUgbmV3IHByb3BlcnR5LCBtZXJnaW5nIGlmIGFwcHJvcHJpYXRlLlxuICAgICAgICAgIGlmIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSkge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgICAgICAvLyBBZGQgdmVyYm9zZSBkaXNwbGF5TmFtZSB0byB0aGUgZnVuY3Rpb24sIHdoaWNoIGhlbHBzIHdoZW4gbG9va2luZ1xuICAgICAgICAgICAgLy8gYXQgcHJvZmlsaW5nIHRvb2xzLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJyAmJiBzcGVjLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgICAgIHByb3RvW25hbWVdLmRpc3BsYXlOYW1lID0gc3BlYy5kaXNwbGF5TmFtZSArICdfJyArIG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gIGlmICghc3RhdGljcykge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBuYW1lIGluIHN0YXRpY3MpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBzdGF0aWNzW25hbWVdO1xuICAgIGlmICghc3RhdGljcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGlzUmVzZXJ2ZWQgPSBuYW1lIGluIFJFU0VSVkVEX1NQRUNfS0VZUztcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIWlzUmVzZXJ2ZWQsXG4gICAgICAnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIHJlc2VydmVkICcgK1xuICAgICAgJ3Byb3BlcnR5LCBgJXNgLCB0aGF0IHNob3VsZG5cXCd0IGJlIG9uIHRoZSBcInN0YXRpY3NcIiBrZXkuIERlZmluZSBpdCAnICtcbiAgICAgICdhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBpbnN0ZWFkOyBpdCB3aWxsIHN0aWxsIGJlIGFjY2Vzc2libGUgb24gdGhlICcgK1xuICAgICAgJ2NvbnN0cnVjdG9yLicsXG4gICAgICBuYW1lXG4gICAgKSA6IGludmFyaWFudCghaXNSZXNlcnZlZCkpO1xuXG4gICAgdmFyIGlzSW5oZXJpdGVkID0gbmFtZSBpbiBDb25zdHJ1Y3RvcjtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIWlzSW5oZXJpdGVkLFxuICAgICAgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArXG4gICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgJyArXG4gICAgICAnZHVlIHRvIGEgbWl4aW4uJyxcbiAgICAgIG5hbWVcbiAgICApIDogaW52YXJpYW50KCFpc0luaGVyaXRlZCkpO1xuICAgIENvbnN0cnVjdG9yW25hbWVdID0gcHJvcGVydHk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb2JqZWN0cywgYnV0IHRocm93IGlmIGJvdGggY29udGFpbiB0aGUgc2FtZSBrZXkuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9uZSBUaGUgZmlyc3Qgb2JqZWN0LCB3aGljaCBpcyBtdXRhdGVkLlxuICogQHBhcmFtIHtvYmplY3R9IHR3byBUaGUgc2Vjb25kIG9iamVjdFxuICogQHJldHVybiB7b2JqZWN0fSBvbmUgYWZ0ZXIgaXQgaGFzIGJlZW4gbXV0YXRlZCB0byBjb250YWluIGV2ZXJ5dGhpbmcgaW4gdHdvLlxuICovXG5mdW5jdGlvbiBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKG9uZSwgdHdvKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgb25lICYmIHR3byAmJiB0eXBlb2Ygb25lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdHdvID09PSAnb2JqZWN0JyxcbiAgICAnbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cygpOiBDYW5ub3QgbWVyZ2Ugbm9uLW9iamVjdHMuJ1xuICApIDogaW52YXJpYW50KG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcpKTtcblxuICBmb3IgKHZhciBrZXkgaW4gdHdvKSB7XG4gICAgaWYgKHR3by5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBvbmVba2V5XSA9PT0gdW5kZWZpbmVkLFxuICAgICAgICAnbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cygpOiAnICtcbiAgICAgICAgJ1RyaWVkIHRvIG1lcmdlIHR3byBvYmplY3RzIHdpdGggdGhlIHNhbWUga2V5OiBgJXNgLiBUaGlzIGNvbmZsaWN0ICcgK1xuICAgICAgICAnbWF5IGJlIGR1ZSB0byBhIG1peGluOyBpbiBwYXJ0aWN1bGFyLCB0aGlzIG1heSBiZSBjYXVzZWQgYnkgdHdvICcgK1xuICAgICAgICAnZ2V0SW5pdGlhbFN0YXRlKCkgb3IgZ2V0RGVmYXVsdFByb3BzKCkgbWV0aG9kcyByZXR1cm5pbmcgb2JqZWN0cyAnICtcbiAgICAgICAgJ3dpdGggY2xhc2hpbmcga2V5cy4nLFxuICAgICAgICBrZXlcbiAgICAgICkgOiBpbnZhcmlhbnQob25lW2tleV0gPT09IHVuZGVmaW5lZCkpO1xuICAgICAgb25lW2tleV0gPSB0d29ba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9uZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIG1lcmdlcyB0aGVpciByZXR1cm4gdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uZSBGdW5jdGlvbiB0byBpbnZva2UgZmlyc3QuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHR3byBhcmd1bWVudCBmdW5jdGlvbnMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihvbmUsIHR3bykge1xuICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkUmVzdWx0KCkge1xuICAgIHZhciBhID0gb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdmFyIGIgPSB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoYSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9IGVsc2UgaWYgKGIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICAgIHZhciBjID0ge307XG4gICAgbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhjLCBhKTtcbiAgICBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsIGIpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdHdvIGZ1bmN0aW9ucyBhbmQgaWdub3JlcyB0aGVpciByZXR1cm4gdmFsZXMuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25lIEZ1bmN0aW9uIHRvIGludm9rZSBmaXJzdC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHR3byBGdW5jdGlvbiB0byBpbnZva2Ugc2Vjb25kLlxuICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbihvbmUsIHR3bykge1xuICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgIG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG4vKipcbiAqIEJpbmRzIGEgbWV0aG9kIHRvIHRoZSBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudCBDb21wb25lbnQgd2hvc2UgbWV0aG9kIGlzIGdvaW5nIHRvIGJlIGJvdW5kLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kIE1ldGhvZCB0byBiZSBib3VuZC5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgYm91bmQgbWV0aG9kLlxuICovXG5mdW5jdGlvbiBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpIHtcbiAgdmFyIGJvdW5kTWV0aG9kID0gbWV0aG9kLmJpbmQoY29tcG9uZW50KTtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyA9IG51bGw7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG4gICAgdmFyIF9iaW5kID0gYm91bmRNZXRob2QuYmluZDtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBibG9jay1zY29wZWQtdmFyLCBuby11bmRlZiAqL1xuICAgIGJvdW5kTWV0aG9kLmJpbmQgPSBmdW5jdGlvbihuZXdUaGlzICkge2ZvciAodmFyIGFyZ3M9W10sJF9fMD0xLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18wPCRfXzE7JF9fMCsrKSBhcmdzLnB1c2goYXJndW1lbnRzWyRfXzBdKTtcbiAgICAgIC8vIFVzZXIgaXMgdHJ5aW5nIHRvIGJpbmQoKSBhbiBhdXRvYm91bmQgbWV0aG9kOyB3ZSBlZmZlY3RpdmVseSB3aWxsXG4gICAgICAvLyBpZ25vcmUgdGhlIHZhbHVlIG9mIFwidGhpc1wiIHRoYXQgdGhlIHVzZXIgaXMgdHJ5aW5nIHRvIHVzZSwgc29cbiAgICAgIC8vIGxldCdzIHdhcm4uXG4gICAgICBpZiAobmV3VGhpcyAhPT0gY29tcG9uZW50ICYmIG5ld1RoaXMgIT09IG51bGwpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgJ2JpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlICcgK1xuICAgICAgICAgICdjb21wb25lbnQgaW5zdGFuY2UuIFNlZSAlcycsXG4gICAgICAgICAgY29tcG9uZW50TmFtZVxuICAgICAgICApIDogbnVsbCk7XG4gICAgICB9IGVsc2UgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAnYmluZCgpOiBZb3UgYXJlIGJpbmRpbmcgYSBjb21wb25lbnQgbWV0aG9kIHRvIHRoZSBjb21wb25lbnQuICcgK1xuICAgICAgICAgICdSZWFjdCBkb2VzIHRoaXMgZm9yIHlvdSBhdXRvbWF0aWNhbGx5IGluIGEgaGlnaC1wZXJmb3JtYW5jZSAnICtcbiAgICAgICAgICAnd2F5LCBzbyB5b3UgY2FuIHNhZmVseSByZW1vdmUgdGhpcyBjYWxsLiBTZWUgJXMnLFxuICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICByZXR1cm4gYm91bmRNZXRob2Q7XG4gICAgICB9XG4gICAgICB2YXIgcmVib3VuZE1ldGhvZCA9IF9iaW5kLmFwcGx5KGJvdW5kTWV0aG9kLCBhcmd1bWVudHMpO1xuICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyA9IGFyZ3M7XG4gICAgICByZXR1cm4gcmVib3VuZE1ldGhvZDtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICB9O1xuICB9XG4gIHJldHVybiBib3VuZE1ldGhvZDtcbn1cblxuLyoqXG4gKiBCaW5kcyBhbGwgYXV0by1ib3VuZCBtZXRob2RzIGluIGEgY29tcG9uZW50LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgQ29tcG9uZW50IHdob3NlIG1ldGhvZCBpcyBnb2luZyB0byBiZSBib3VuZC5cbiAqL1xuZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kcyhjb21wb25lbnQpIHtcbiAgZm9yICh2YXIgYXV0b0JpbmRLZXkgaW4gY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcCkge1xuICAgIGlmIChjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kTWFwLmhhc093blByb3BlcnR5KGF1dG9CaW5kS2V5KSkge1xuICAgICAgdmFyIG1ldGhvZCA9IGNvbXBvbmVudC5fX3JlYWN0QXV0b0JpbmRNYXBbYXV0b0JpbmRLZXldO1xuICAgICAgY29tcG9uZW50W2F1dG9CaW5kS2V5XSA9IGJpbmRBdXRvQmluZE1ldGhvZChcbiAgICAgICAgY29tcG9uZW50LFxuICAgICAgICBSZWFjdEVycm9yVXRpbHMuZ3VhcmQoXG4gICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgIGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSArICcuJyArIGF1dG9CaW5kS2V5XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciB0eXBlRGVwcmVjYXRpb25EZXNjcmlwdG9yID0ge1xuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSB0aGlzLmRpc3BsYXlOYW1lIHx8IHRoaXMubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIGZhbHNlLFxuICAgICAgJyVzLnR5cGUgaXMgZGVwcmVjYXRlZC4gVXNlICVzIGRpcmVjdGx5IHRvIGFjY2VzcyB0aGUgY2xhc3MuJyxcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgZGlzcGxheU5hbWVcbiAgICApIDogbnVsbCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0eXBlJywge1xuICAgICAgdmFsdWU6IHRoaXNcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxuLyoqXG4gKiBBZGQgbW9yZSB0byB0aGUgUmVhY3RDbGFzcyBiYXNlIGNsYXNzLiBUaGVzZSBhcmUgYWxsIGxlZ2FjeSBmZWF0dXJlcyBhbmRcbiAqIHRoZXJlZm9yZSBub3QgYWxyZWFkeSBwYXJ0IG9mIHRoZSBtb2Rlcm4gUmVhY3RDb21wb25lbnQuXG4gKi9cbnZhciBSZWFjdENsYXNzTWl4aW4gPSB7XG5cbiAgLyoqXG4gICAqIFRPRE86IFRoaXMgd2lsbCBiZSBkZXByZWNhdGVkIGJlY2F1c2Ugc3RhdGUgc2hvdWxkIGFsd2F5cyBrZWVwIGEgY29uc2lzdGVudFxuICAgKiB0eXBlIHNpZ25hdHVyZSBhbmQgdGhlIG9ubHkgdXNlIGNhc2UgZm9yIHRoaXMsIGlzIHRvIGF2b2lkIHRoYXQuXG4gICAqL1xuICByZXBsYWNlU3RhdGU6IGZ1bmN0aW9uKG5ld1N0YXRlLCBjYWxsYmFjaykge1xuICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZVJlcGxhY2VTdGF0ZSh0aGlzLCBuZXdTdGF0ZSk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgbW91bnRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBmaW5hbFxuICAgKi9cbiAgaXNNb3VudGVkOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgIG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlcixcbiAgICAgICAgICAnJXMgaXMgYWNjZXNzaW5nIGlzTW91bnRlZCBpbnNpZGUgaXRzIHJlbmRlcigpIGZ1bmN0aW9uLiAnICtcbiAgICAgICAgICAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICtcbiAgICAgICAgICAnbmV2ZXIgYWNjZXNzIHNvbWV0aGluZyB0aGF0IHJlcXVpcmVzIHN0YWxlIGRhdGEgZnJvbSB0aGUgcHJldmlvdXMgJyArXG4gICAgICAgICAgJ3JlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kICcgK1xuICAgICAgICAgICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLFxuICAgICAgICAgIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnXG4gICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldCh0aGlzKTtcbiAgICByZXR1cm4gKFxuICAgICAgaW50ZXJuYWxJbnN0YW5jZSAmJlxuICAgICAgaW50ZXJuYWxJbnN0YW5jZSAhPT0gUmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZVxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHByb3BzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFByb3BzIFN1YnNldCBvZiB0aGUgbmV4dCBwcm9wcy5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBwdWJsaWNcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIHNldFByb3BzOiBmdW5jdGlvbihwYXJ0aWFsUHJvcHMsIGNhbGxiYWNrKSB7XG4gICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlU2V0UHJvcHModGhpcywgcGFydGlhbFByb3BzKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2UgYWxsIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5ld1Byb3BzIFN1YnNldCBvZiB0aGUgbmV4dCBwcm9wcy5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBwdWJsaWNcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIHJlcGxhY2VQcm9wczogZnVuY3Rpb24obmV3UHJvcHMsIGNhbGxiYWNrKSB7XG4gICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlUmVwbGFjZVByb3BzKHRoaXMsIG5ld1Byb3BzKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBSZWFjdENsYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24oKSB7fTtcbmFzc2lnbihcbiAgUmVhY3RDbGFzc0NvbXBvbmVudC5wcm90b3R5cGUsXG4gIFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSxcbiAgUmVhY3RDbGFzc01peGluXG4pO1xuXG4vKipcbiAqIE1vZHVsZSBmb3IgY3JlYXRpbmcgY29tcG9zaXRlIGNvbXBvbmVudHMuXG4gKlxuICogQGNsYXNzIFJlYWN0Q2xhc3NcbiAqL1xudmFyIFJlYWN0Q2xhc3MgPSB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjb21wb3NpdGUgY29tcG9uZW50IGNsYXNzIGdpdmVuIGEgY2xhc3Mgc3BlY2lmaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHNwZWMgQ2xhc3Mgc3BlY2lmaWNhdGlvbiAod2hpY2ggbXVzdCBkZWZpbmUgYHJlbmRlcmApLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gQ29tcG9uZW50IGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgKiBAcHVibGljXG4gICAqL1xuICBjcmVhdGVDbGFzczogZnVuY3Rpb24oc3BlYykge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAvLyBUaGlzIGNvbnN0cnVjdG9yIGlzIG92ZXJyaWRkZW4gYnkgbW9ja3MuIFRoZSBhcmd1bWVudCBpcyB1c2VkXG4gICAgICAvLyBieSBtb2NrcyB0byBhc3NlcnQgb24gd2hhdCBnZXRzIG1vdW50ZWQuXG5cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgdGhpcyBpbnN0YW5jZW9mIENvbnN0cnVjdG9yLFxuICAgICAgICAgICdTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciAnICtcbiAgICAgICAgICAnSlNYIGluc3RlYWQuIFNlZTogaHR0cHM6Ly9mYi5tZS9yZWFjdC1sZWdhY3lmYWN0b3J5J1xuICAgICAgICApIDogbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdpcmUgdXAgYXV0by1iaW5kaW5nXG4gICAgICBpZiAodGhpcy5fX3JlYWN0QXV0b0JpbmRNYXApIHtcbiAgICAgICAgYmluZEF1dG9CaW5kTWV0aG9kcyh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuXG4gICAgICAvLyBSZWFjdENsYXNzZXMgZG9lc24ndCBoYXZlIGNvbnN0cnVjdG9ycy4gSW5zdGVhZCwgdGhleSB1c2UgdGhlXG4gICAgICAvLyBnZXRJbml0aWFsU3RhdGUgYW5kIGNvbXBvbmVudFdpbGxNb3VudCBtZXRob2RzIGZvciBpbml0aWFsaXphdGlvbi5cblxuICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IHRoaXMuZ2V0SW5pdGlhbFN0YXRlID8gdGhpcy5nZXRJbml0aWFsU3RhdGUoKSA6IG51bGw7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIC8vIFdlIGFsbG93IGF1dG8tbW9ja3MgdG8gcHJvY2VlZCBhcyBpZiB0aGV5J3JlIHJldHVybmluZyBudWxsLlxuICAgICAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIHRoaXMuZ2V0SW5pdGlhbFN0YXRlLl9pc01vY2tGdW5jdGlvbikge1xuICAgICAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYmFkIHByYWN0aWNlLiBDb25zaWRlciB3YXJuaW5nIGhlcmUgYW5kXG4gICAgICAgICAgLy8gZGVwcmVjYXRpbmcgdGhpcyBjb252ZW5pZW5jZS5cbiAgICAgICAgICBpbml0aWFsU3RhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpLFxuICAgICAgICAnJXMuZ2V0SW5pdGlhbFN0YXRlKCk6IG11c3QgcmV0dXJuIGFuIG9iamVjdCBvciBudWxsJyxcbiAgICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50J1xuICAgICAgKSA6IGludmFyaWFudCh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpKSk7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgfTtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBuZXcgUmVhY3RDbGFzc0NvbXBvbmVudCgpO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuXG4gICAgaW5qZWN0ZWRNaXhpbnMuZm9yRWFjaChcbiAgICAgIG1peFNwZWNJbnRvQ29tcG9uZW50LmJpbmQobnVsbCwgQ29uc3RydWN0b3IpXG4gICAgKTtcblxuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzcGVjKTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIGRlZmF1bHRQcm9wcyBwcm9wZXJ0eSBhZnRlciBhbGwgbWl4aW5zIGhhdmUgYmVlbiBtZXJnZWRcbiAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5kZWZhdWx0UHJvcHMgPSBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMoKTtcbiAgICB9XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgdGFnIHRvIGluZGljYXRlIHRoYXQgdGhlIHVzZSBvZiB0aGVzZSBtZXRob2QgbmFtZXMgaXMgb2ssXG4gICAgICAvLyBzaW5jZSBpdCdzIHVzZWQgd2l0aCBjcmVhdGVDbGFzcy4gSWYgaXQncyBub3QsIHRoZW4gaXQncyBsaWtlbHkgYVxuICAgICAgLy8gbWlzdGFrZSBzbyB3ZSdsbCB3YXJuIHlvdSB0byB1c2UgdGhlIHN0YXRpYyBwcm9wZXJ0eSwgcHJvcGVydHlcbiAgICAgIC8vIGluaXRpYWxpemVyIG9yIGNvbnN0cnVjdG9yIHJlc3BlY3RpdmVseS5cbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkID0ge307XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEluaXRpYWxTdGF0ZSkge1xuICAgICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlLmlzUmVhY3RDbGFzc0FwcHJvdmVkID0ge307XG4gICAgICB9XG4gICAgfVxuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5yZW5kZXIsXG4gICAgICAnY3JlYXRlQ2xhc3MoLi4uKTogQ2xhc3Mgc3BlY2lmaWNhdGlvbiBtdXN0IGltcGxlbWVudCBhIGByZW5kZXJgIG1ldGhvZC4nXG4gICAgKSA6IGludmFyaWFudChDb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVuZGVyKSk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRTaG91bGRVcGRhdGUsXG4gICAgICAgICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgK1xuICAgICAgICAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArXG4gICAgICAgICdUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgJyArXG4gICAgICAgICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLFxuICAgICAgICBzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCdcbiAgICAgICkgOiBudWxsKTtcbiAgICB9XG5cbiAgICAvLyBSZWR1Y2UgdGltZSBzcGVudCBkb2luZyBsb29rdXBzIGJ5IHNldHRpbmcgdGhlc2Ugb24gdGhlIHByb3RvdHlwZS5cbiAgICBmb3IgKHZhciBtZXRob2ROYW1lIGluIFJlYWN0Q2xhc3NJbnRlcmZhY2UpIHtcbiAgICAgIGlmICghQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGhvb2tcbiAgICBDb25zdHJ1Y3Rvci50eXBlID0gQ29uc3RydWN0b3I7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCAndHlwZScsIHR5cGVEZXByZWNhdGlvbkRlc2NyaXB0b3IpO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAvLyBJRSB3aWxsIGZhaWwgb24gZGVmaW5lUHJvcGVydHkgKGVzNS1zaGltL3NoYW0gdG9vKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfSxcblxuICBpbmplY3Rpb246IHtcbiAgICBpbmplY3RNaXhpbjogZnVuY3Rpb24obWl4aW4pIHtcbiAgICAgIGluamVjdGVkTWl4aW5zLnB1c2gobWl4aW4pO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2xhc3M7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL1JlYWN0Q29tcG9uZW50XCI6MTg1LFwiLi9SZWFjdEN1cnJlbnRPd25lclwiOjE5MSxcIi4vUmVhY3RFbGVtZW50XCI6MjA5LFwiLi9SZWFjdEVycm9yVXRpbHNcIjoyMTIsXCIuL1JlYWN0SW5zdGFuY2VNYXBcIjoyMTksXCIuL1JlYWN0TGlmZUN5Y2xlXCI6MjIwLFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiOjIzMCxcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uc1wiOjIzMSxcIi4vUmVhY3RVcGRhdGVRdWV1ZVwiOjI0NSxcIi4vaW52YXJpYW50XCI6Mjk3LFwiLi9rZXlNaXJyb3JcIjozMDMsXCIuL2tleU9mXCI6MzA0LFwiLi93YXJuaW5nXCI6MzE4LFwiX3Byb2Nlc3NcIjoxfV0sMTg1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb21wb25lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVRdWV1ZVwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGhlbHBlcnMgZm9yIHRoZSB1cGRhdGluZyBzdGF0ZSBvZiBhIGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gUmVhY3RDb21wb25lbnQocHJvcHMsIGNvbnRleHQpIHtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xufVxuXG4vKipcbiAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgdG8gbXV0YXRlXG4gKiBzdGF0ZS4gWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAgd2lsbCBydW4gc3luY2hyb25vdXNseSxcbiAqIGFzIHRoZXkgbWF5IGV2ZW50dWFsbHkgYmUgYmF0Y2hlZCB0b2dldGhlci4gIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbFxuICogY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNhbGwgdG8gc2V0U3RhdGUgaXMgYWN0dWFsbHlcbiAqIGNvbXBsZXRlZC5cbiAqXG4gKiBXaGVuIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgdG8gc2V0U3RhdGUsIGl0IHdpbGwgYmUgY2FsbGVkIGF0IHNvbWUgcG9pbnQgaW5cbiAqIHRoZSBmdXR1cmUgKG5vdCBzeW5jaHJvbm91c2x5KS4gSXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgdXAgdG8gZGF0ZVxuICogY29tcG9uZW50IGFyZ3VtZW50cyAoc3RhdGUsIHByb3BzLCBjb250ZXh0KS4gVGhlc2UgdmFsdWVzIGNhbiBiZSBkaWZmZXJlbnRcbiAqIGZyb20gdGhpcy4qIGJlY2F1c2UgeW91ciBmdW5jdGlvbiBtYXkgYmUgY2FsbGVkIGFmdGVyIHJlY2VpdmVQcm9wcyBidXQgYmVmb3JlXG4gKiBzaG91bGRDb21wb25lbnRVcGRhdGUsIGFuZCB0aGlzIG5ldyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHdpbGwgbm90IHlldCBiZVxuICogYXNzaWduZWQgdG8gdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSBvciBmdW5jdGlvbiB0b1xuICogICAgICAgIHByb2R1Y2UgbmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuUmVhY3RDb21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24ocGFydGlhbFN0YXRlLCBjYWxsYmFjaykge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHR5cGVvZiBwYXJ0aWFsU3RhdGUgPT09ICdvYmplY3QnIHx8XG4gICAgdHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgIHBhcnRpYWxTdGF0ZSA9PSBudWxsLFxuICAgICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhICcgK1xuICAgICdmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuJ1xuICApIDogaW52YXJpYW50KHR5cGVvZiBwYXJ0aWFsU3RhdGUgPT09ICdvYmplY3QnIHx8XG4gIHR5cGVvZiBwYXJ0aWFsU3RhdGUgPT09ICdmdW5jdGlvbicgfHxcbiAgcGFydGlhbFN0YXRlID09IG51bGwpKTtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgcGFydGlhbFN0YXRlICE9IG51bGwsXG4gICAgICAnc2V0U3RhdGUoLi4uKTogWW91IHBhc3NlZCBhbiB1bmRlZmluZWQgb3IgbnVsbCBzdGF0ZSBvYmplY3Q7ICcgK1xuICAgICAgJ2luc3RlYWQsIHVzZSBmb3JjZVVwZGF0ZSgpLidcbiAgICApIDogbnVsbCk7XG4gIH1cbiAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlU2V0U3RhdGUodGhpcywgcGFydGlhbFN0YXRlKTtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlQ2FsbGJhY2sodGhpcywgY2FsbGJhY2spO1xuICB9XG59O1xuXG4vKipcbiAqIEZvcmNlcyBhbiB1cGRhdGUuIFRoaXMgc2hvdWxkIG9ubHkgYmUgaW52b2tlZCB3aGVuIGl0IGlzIGtub3duIHdpdGhcbiAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICpcbiAqIFlvdSBtYXkgd2FudCB0byBjYWxsIHRoaXMgd2hlbiB5b3Uga25vdyB0aGF0IHNvbWUgZGVlcGVyIGFzcGVjdCBvZiB0aGVcbiAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICpcbiAqIFRoaXMgd2lsbCBub3QgaW52b2tlIGBzaG91bGRDb21wb25lbnRVcGRhdGVgLCBidXQgaXQgd2lsbCBpbnZva2VcbiAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gKlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciB1cGRhdGUgaXMgY29tcGxldGUuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuUmVhY3RDb21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyk7XG4gIGlmIChjYWxsYmFjaykge1xuICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZXByZWNhdGVkIEFQSXMuIFRoZXNlIEFQSXMgdXNlZCB0byBleGlzdCBvbiBjbGFzc2ljIFJlYWN0IGNsYXNzZXMgYnV0IHNpbmNlXG4gKiB3ZSB3b3VsZCBsaWtlIHRvIGRlcHJlY2F0ZSB0aGVtLCB3ZSdyZSBub3QgZ29pbmcgdG8gbW92ZSB0aGVtIG92ZXIgdG8gdGhpc1xuICogbW9kZXJuIGJhc2UgY2xhc3MuIEluc3RlYWQsIHdlIGRlZmluZSBhIGdldHRlciB0aGF0IHdhcm5zIGlmIGl0J3MgYWNjZXNzZWQuXG4gKi9cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgdmFyIGRlcHJlY2F0ZWRBUElzID0ge1xuICAgIGdldERPTU5vZGU6IFtcbiAgICAgICdnZXRET01Ob2RlJyxcbiAgICAgICdVc2UgUmVhY3QuZmluZERPTU5vZGUoY29tcG9uZW50KSBpbnN0ZWFkLidcbiAgICBdLFxuICAgIGlzTW91bnRlZDogW1xuICAgICAgJ2lzTW91bnRlZCcsXG4gICAgICAnSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwIHN1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gJyArXG4gICAgICAnY29tcG9uZW50V2lsbFVubW91bnQgdG8gcHJldmVudCBtZW1vcnkgbGVha3MuJ1xuICAgIF0sXG4gICAgcmVwbGFjZVByb3BzOiBbXG4gICAgICAncmVwbGFjZVByb3BzJyxcbiAgICAgICdJbnN0ZWFkLCBjYWxsIFJlYWN0LnJlbmRlciBhZ2FpbiBhdCB0aGUgdG9wIGxldmVsLidcbiAgICBdLFxuICAgIHJlcGxhY2VTdGF0ZTogW1xuICAgICAgJ3JlcGxhY2VTdGF0ZScsXG4gICAgICAnUmVmYWN0b3IgeW91ciBjb2RlIHRvIHVzZSBzZXRTdGF0ZSBpbnN0ZWFkIChzZWUgJyArXG4gICAgICAnaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS4nXG4gICAgXSxcbiAgICBzZXRQcm9wczogW1xuICAgICAgJ3NldFByb3BzJyxcbiAgICAgICdJbnN0ZWFkLCBjYWxsIFJlYWN0LnJlbmRlciBhZ2FpbiBhdCB0aGUgdG9wIGxldmVsLidcbiAgICBdXG4gIH07XG4gIHZhciBkZWZpbmVEZXByZWNhdGlvbldhcm5pbmcgPSBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmZvKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFjdENvbXBvbmVudC5wcm90b3R5cGUsIG1ldGhvZE5hbWUsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgJyVzKC4uLikgaXMgZGVwcmVjYXRlZCBpbiBwbGFpbiBKYXZhU2NyaXB0IFJlYWN0IGNsYXNzZXMuICVzJyxcbiAgICAgICAgICAgIGluZm9bMF0sXG4gICAgICAgICAgICBpbmZvWzFdXG4gICAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgIC8vIElFIHdpbGwgZmFpbCBvbiBkZWZpbmVQcm9wZXJ0eSAoZXM1LXNoaW0vc2hhbSB0b28pXG4gICAgfVxuICB9O1xuICBmb3IgKHZhciBmbk5hbWUgaW4gZGVwcmVjYXRlZEFQSXMpIHtcbiAgICBpZiAoZGVwcmVjYXRlZEFQSXMuaGFzT3duUHJvcGVydHkoZm5OYW1lKSkge1xuICAgICAgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nKGZuTmFtZSwgZGVwcmVjYXRlZEFQSXNbZm5OYW1lXSk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0VXBkYXRlUXVldWVcIjoyNDUsXCIuL2ludmFyaWFudFwiOjI5NyxcIi4vd2FybmluZ1wiOjMxOCxcIl9wcm9jZXNzXCI6MX1dLDE4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnRcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vUmVhY3RET01JRE9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG5cbi8qKlxuICogQWJzdHJhY3RzIGF3YXkgYWxsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIHJlY29uY2lsZXIgdGhhdCByZXF1aXJlcyBrbm93bGVkZ2Ugb2ZcbiAqIHRoZSBicm93c2VyIGNvbnRleHQuIFRPRE86IFRoZXNlIGNhbGxlcnMgc2hvdWxkIGJlIHJlZmFjdG9yZWQgdG8gYXZvaWQgdGhlXG4gKiBuZWVkIGZvciB0aGlzIGluamVjdGlvbi5cbiAqL1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0ge1xuXG4gIHByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6XG4gICAgUmVhY3RET01JRE9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzLFxuXG4gIHJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6XG4gICAgUmVhY3RET01JRE9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlELFxuXG4gIC8qKlxuICAgKiBJZiBhIHBhcnRpY3VsYXIgZW52aXJvbm1lbnQgcmVxdWlyZXMgdGhhdCBzb21lIHJlc291cmNlcyBiZSBjbGVhbmVkIHVwLFxuICAgKiBzcGVjaWZ5IHRoaXMgaW4gdGhlIGluamVjdGVkIE1peGluLiBJbiB0aGUgRE9NLCB3ZSB3b3VsZCBsaWtlbHkgd2FudCB0b1xuICAgKiBwdXJnZSBhbnkgY2FjaGVkIG5vZGUgSUQgbG9va3Vwcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogZnVuY3Rpb24ocm9vdE5vZGVJRCkge1xuICAgIFJlYWN0TW91bnQucHVyZ2VJRChyb290Tm9kZUlEKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50O1xuXG59LHtcIi4vUmVhY3RET01JRE9wZXJhdGlvbnNcIjoxOTYsXCIuL1JlYWN0TW91bnRcIjoyMjN9XSwxODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudEVudmlyb25tZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgaW5qZWN0ZWQgPSBmYWxzZTtcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSB7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY2xlYW51cCBob29rLiAoc2VydmVyIHZzLlxuICAgKiBicm93c2VyIGV0YykuIEV4YW1wbGU6IEEgYnJvd3NlciBzeXN0ZW0gY2FjaGVzIERPTSBub2RlcyBiYXNlZCBvbiBjb21wb25lbnRcbiAgICogSUQgYW5kIG11c3QgcmVtb3ZlIHRoYXQgY2FjaGUgZW50cnkgd2hlbiB0aGlzIGluc3RhbmNlIGlzIHVubW91bnRlZC5cbiAgICovXG4gIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogbnVsbCxcblxuICAvKipcbiAgICogT3B0aW9uYWxseSBpbmplY3RhYmxlIGhvb2sgZm9yIHN3YXBwaW5nIG91dCBtb3VudCBpbWFnZXMgaW4gdGhlIG1pZGRsZSBvZlxuICAgKiB0aGUgdHJlZS5cbiAgICovXG4gIHJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBob29rIGZvciBwcm9jZXNzaW5nIGEgcXVldWUgb2YgY2hpbGQgdXBkYXRlcy4gV2lsbFxuICAgKiBsYXRlciBtb3ZlIGludG8gTXVsdGlDaGlsZENvbXBvbmVudHMuXG4gICAqL1xuICBwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBudWxsLFxuXG4gIGluamVjdGlvbjoge1xuICAgIGluamVjdEVudmlyb25tZW50OiBmdW5jdGlvbihlbnZpcm9ubWVudCkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgIWluamVjdGVkLFxuICAgICAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IGluamVjdEVudmlyb25tZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuJ1xuICAgICAgKSA6IGludmFyaWFudCghaW5qZWN0ZWQpKTtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50ID1cbiAgICAgICAgZW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50O1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEID1cbiAgICAgICAgZW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyA9XG4gICAgICAgIGVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXM7XG4gICAgICBpbmplY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vaW52YXJpYW50XCI6Mjk3LFwiX3Byb2Nlc3NcIjoxfV0sMTg4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29tcG9uZW50V2l0aFB1cmVSZW5kZXJNaXhpblxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2hhbGxvd0VxdWFsID0gcmVxdWlyZShcIi4vc2hhbGxvd0VxdWFsXCIpO1xuXG4vKipcbiAqIElmIHlvdXIgUmVhY3QgY29tcG9uZW50J3MgcmVuZGVyIGZ1bmN0aW9uIGlzIFwicHVyZVwiLCBlLmcuIGl0IHdpbGwgcmVuZGVyIHRoZVxuICogc2FtZSByZXN1bHQgZ2l2ZW4gdGhlIHNhbWUgcHJvcHMgYW5kIHN0YXRlLCBwcm92aWRlIHRoaXMgTWl4aW4gZm9yIGFcbiAqIGNvbnNpZGVyYWJsZSBwZXJmb3JtYW5jZSBib29zdC5cbiAqXG4gKiBNb3N0IFJlYWN0IGNvbXBvbmVudHMgaGF2ZSBwdXJlIHJlbmRlciBmdW5jdGlvbnMuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgIHZhciBSZWFjdENvbXBvbmVudFdpdGhQdXJlUmVuZGVyTWl4aW4gPVxuICogICAgIHJlcXVpcmUoJ1JlYWN0Q29tcG9uZW50V2l0aFB1cmVSZW5kZXJNaXhpbicpO1xuICogICBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgbWl4aW5zOiBbUmVhY3RDb21wb25lbnRXaXRoUHVyZVJlbmRlck1peGluXSxcbiAqXG4gKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9PmZvbzwvZGl2PjtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIE5vdGU6IFRoaXMgb25seSBjaGVja3Mgc2hhbGxvdyBlcXVhbGl0eSBmb3IgcHJvcHMgYW5kIHN0YXRlLiBJZiB0aGVzZSBjb250YWluXG4gKiBjb21wbGV4IGRhdGEgc3RydWN0dXJlcyB0aGlzIG1peGluIG1heSBoYXZlIGZhbHNlLW5lZ2F0aXZlcyBmb3IgZGVlcGVyXG4gKiBkaWZmZXJlbmNlcy4gT25seSBtaXhpbiB0byBjb21wb25lbnRzIHdoaWNoIGhhdmUgc2ltcGxlIHByb3BzIGFuZCBzdGF0ZSwgb3JcbiAqIHVzZSBgZm9yY2VVcGRhdGUoKWAgd2hlbiB5b3Uga25vdyBkZWVwIGRhdGEgc3RydWN0dXJlcyBoYXZlIGNoYW5nZWQuXG4gKi9cbnZhciBSZWFjdENvbXBvbmVudFdpdGhQdXJlUmVuZGVyTWl4aW4gPSB7XG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gIXNoYWxsb3dFcXVhbCh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8XG4gICAgICAgICAgICFzaGFsbG93RXF1YWwodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudFdpdGhQdXJlUmVuZGVyTWl4aW47XG5cbn0se1wiLi9zaGFsbG93RXF1YWxcIjozMTN9XSwxODk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50XCIpO1xudmFyIFJlYWN0Q29udGV4dCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29udGV4dFwiKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3JcIik7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VNYXBcIik7XG52YXIgUmVhY3RMaWZlQ3ljbGUgPSByZXF1aXJlKFwiLi9SZWFjdExpZmVDeWNsZVwiKTtcbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gcmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uc1wiKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXCIpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlclwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZShcIi4vZW1wdHlPYmplY3RcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShjb21wb25lbnQpIHtcbiAgdmFyIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXIgfHwgbnVsbDtcbiAgaWYgKG93bmVyKSB7XG4gICAgdmFyIG5hbWUgPSBvd25lci5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0gVGhlIExpZmUtQ3ljbGUgb2YgYSBDb21wb3NpdGUgQ29tcG9uZW50IC0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIC0gY29uc3RydWN0b3I6IEluaXRpYWxpemF0aW9uIG9mIHN0YXRlLiBUaGUgaW5zdGFuY2UgaXMgbm93IHJldGFpbmVkLlxuICogICAtIGNvbXBvbmVudFdpbGxNb3VudFxuICogICAtIHJlbmRlclxuICogICAtIFtjaGlsZHJlbidzIGNvbnN0cnVjdG9yc11cbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudFdpbGxNb3VudCBhbmQgcmVuZGVyXVxuICogICAgIC0gW2NoaWxkcmVuJ3MgY29tcG9uZW50RGlkTW91bnRdXG4gKiAgICAgLSBjb21wb25lbnREaWRNb3VudFxuICpcbiAqICAgICAgIFVwZGF0ZSBQaGFzZXM6XG4gKiAgICAgICAtIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG9ubHkgY2FsbGVkIGlmIHBhcmVudCB1cGRhdGVkKVxuICogICAgICAgLSBzaG91bGRDb21wb25lbnRVcGRhdGVcbiAqICAgICAgICAgLSBjb21wb25lbnRXaWxsVXBkYXRlXG4gKiAgICAgICAgICAgLSByZW5kZXJcbiAqICAgICAgICAgICAtIFtjaGlsZHJlbidzIGNvbnN0cnVjdG9ycyBvciByZWNlaXZlIHByb3BzIHBoYXNlc11cbiAqICAgICAgICAgLSBjb21wb25lbnREaWRVcGRhdGVcbiAqXG4gKiAgICAgLSBjb21wb25lbnRXaWxsVW5tb3VudFxuICogICAgIC0gW2NoaWxkcmVuJ3MgY29tcG9uZW50V2lsbFVubW91bnRdXG4gKiAgIC0gW2NoaWxkcmVuIGRlc3Ryb3llZF1cbiAqIC0gKGRlc3Ryb3llZCk6IFRoZSBpbnN0YW5jZSBpcyBub3cgYmxhbmssIHJlbGVhc2VkIGJ5IFJlYWN0IGFuZCByZWFkeSBmb3IgR0MuXG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4vKipcbiAqIEFuIGluY3JlbWVudGluZyBJRCBhc3NpZ25lZCB0byBlYWNoIGNvbXBvbmVudCB3aGVuIGl0IGlzIG1vdW50ZWQuIFRoaXMgaXNcbiAqIHVzZWQgdG8gZW5mb3JjZSB0aGUgb3JkZXIgaW4gd2hpY2ggYFJlYWN0VXBkYXRlc2AgdXBkYXRlcyBkaXJ0eSBjb21wb25lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBuZXh0TW91bnRJRCA9IDE7XG5cbi8qKlxuICogQGxlbmRzIHtSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5wcm90b3R5cGV9XG4gKi9cbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudE1peGluID0ge1xuXG4gIC8qKlxuICAgKiBCYXNlIGNvbnN0cnVjdG9yIGZvciBhbGwgY29tcG9zaXRlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSBudWxsO1xuICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcblxuICAgIC8vIFNlZSBSZWFjdFVwZGF0ZVF1ZXVlXG4gICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gZmFsc2U7XG4gICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG5cbiAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG5cbiAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9tb3VudE9yZGVyID0gMDtcbiAgICB0aGlzLl9pc1RvcExldmVsID0gZmFsc2U7XG5cbiAgICAvLyBTZWUgUmVhY3RVcGRhdGVzIGFuZCBSZWFjdFVwZGF0ZVF1ZXVlLlxuICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgY29tcG9uZW50LCByZW5kZXJzIG1hcmt1cCwgYW5kIHJlZ2lzdGVycyBldmVudCBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBSZW5kZXJlZCBtYXJrdXAgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24ocm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMuX21vdW50T3JkZXIgPSBuZXh0TW91bnRJRCsrO1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSByb290SUQ7XG5cbiAgICB2YXIgcHVibGljUHJvcHMgPSB0aGlzLl9wcm9jZXNzUHJvcHModGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHMpO1xuICAgIHZhciBwdWJsaWNDb250ZXh0ID0gdGhpcy5fcHJvY2Vzc0NvbnRleHQodGhpcy5fY3VycmVudEVsZW1lbnQuX2NvbnRleHQpO1xuXG4gICAgdmFyIENvbXBvbmVudCA9IFJlYWN0TmF0aXZlQ29tcG9uZW50LmdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudChcbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50XG4gICAgKTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHB1YmxpYyBjbGFzc1xuICAgIHZhciBpbnN0ID0gbmV3IENvbXBvbmVudChwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgbGF0ZXIgaW4gX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCwgYnV0IGFkZCBhbiBlYXJseVxuICAgICAgLy8gd2FybmluZyBub3cgdG8gaGVscCBkZWJ1Z2dpbmdcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICBpbnN0LnJlbmRlciAhPSBudWxsLFxuICAgICAgICAnJXMoLi4uKTogTm8gYHJlbmRlcmAgbWV0aG9kIGZvdW5kIG9uIHRoZSByZXR1cm5lZCBjb21wb25lbnQgJyArXG4gICAgICAgICdpbnN0YW5jZTogeW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBkZWZpbmUgYHJlbmRlcmAgaW4geW91ciAnICtcbiAgICAgICAgJ2NvbXBvbmVudCBvciB5b3UgbWF5IGhhdmUgYWNjaWRlbnRhbGx5IHRyaWVkIHRvIHJlbmRlciBhbiBlbGVtZW50ICcgK1xuICAgICAgICAnd2hvc2UgdHlwZSBpcyBhIGZ1bmN0aW9uIHRoYXQgaXNuXFwndCBhIFJlYWN0IGNvbXBvbmVudC4nLFxuICAgICAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCdcbiAgICAgICkgOiBudWxsKTtcbiAgICB9XG5cbiAgICAvLyBUaGVzZSBzaG91bGQgYmUgc2V0IHVwIGluIHRoZSBjb25zdHJ1Y3RvciwgYnV0IGFzIGEgY29udmVuaWVuY2UgZm9yXG4gICAgLy8gc2ltcGxlciBjbGFzcyBhYnN0cmFjdGlvbnMsIHdlIHNldCB0aGVtIHVwIGFmdGVyIHRoZSBmYWN0LlxuICAgIGluc3QucHJvcHMgPSBwdWJsaWNQcm9wcztcbiAgICBpbnN0LmNvbnRleHQgPSBwdWJsaWNDb250ZXh0O1xuICAgIGluc3QucmVmcyA9IGVtcHR5T2JqZWN0O1xuXG4gICAgdGhpcy5faW5zdGFuY2UgPSBpbnN0O1xuXG4gICAgLy8gU3RvcmUgYSByZWZlcmVuY2UgZnJvbSB0aGUgaW5zdGFuY2UgYmFjayB0byB0aGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb25cbiAgICBSZWFjdEluc3RhbmNlTWFwLnNldChpbnN0LCB0aGlzKTtcblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHRoaXMuX3dhcm5JZkNvbnRleHRzRGlmZmVyKHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9jb250ZXh0LCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAvLyBTaW5jZSBwbGFpbiBKUyBjbGFzc2VzIGFyZSBkZWZpbmVkIHdpdGhvdXQgYW55IHNwZWNpYWwgaW5pdGlhbGl6YXRpb25cbiAgICAgIC8vIGxvZ2ljLCB3ZSBjYW4gbm90IGNhdGNoIGNvbW1vbiBlcnJvcnMgZWFybHkuIFRoZXJlZm9yZSwgd2UgaGF2ZSB0b1xuICAgICAgLy8gY2F0Y2ggdGhlbSBoZXJlLCBhdCBpbml0aWFsaXphdGlvbiB0aW1lLCBpbnN0ZWFkLlxuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICFpbnN0LmdldEluaXRpYWxTdGF0ZSB8fFxuICAgICAgICBpbnN0LmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCxcbiAgICAgICAgJ2dldEluaXRpYWxTdGF0ZSB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiAnICtcbiAgICAgICAgJ1RoaXMgaXMgb25seSBzdXBwb3J0ZWQgZm9yIGNsYXNzZXMgY3JlYXRlZCB1c2luZyBSZWFjdC5jcmVhdGVDbGFzcy4gJyArXG4gICAgICAgICdEaWQgeW91IG1lYW4gdG8gZGVmaW5lIGEgc3RhdGUgcHJvcGVydHkgaW5zdGVhZD8nLFxuICAgICAgICB0aGlzLmdldE5hbWUoKSB8fCAnYSBjb21wb25lbnQnXG4gICAgICApIDogbnVsbCk7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgIWluc3QuZ2V0RGVmYXVsdFByb3BzIHx8XG4gICAgICAgIGluc3QuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkLFxuICAgICAgICAnZ2V0RGVmYXVsdFByb3BzIHdhcyBkZWZpbmVkIG9uICVzLCBhIHBsYWluIEphdmFTY3JpcHQgY2xhc3MuICcgK1xuICAgICAgICAnVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2xhc3NlcyBjcmVhdGVkIHVzaW5nIFJlYWN0LmNyZWF0ZUNsYXNzLiAnICtcbiAgICAgICAgJ1VzZSBhIHN0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgZGVmYXVsdFByb3BzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50J1xuICAgICAgKSA6IG51bGwpO1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICFpbnN0LnByb3BUeXBlcyxcbiAgICAgICAgJ3Byb3BUeXBlcyB3YXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcy4gVXNlIGEgc3RhdGljICcgK1xuICAgICAgICAncHJvcGVydHkgdG8gZGVmaW5lIHByb3BUeXBlcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXMuZ2V0TmFtZSgpIHx8ICdhIGNvbXBvbmVudCdcbiAgICAgICkgOiBudWxsKTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAhaW5zdC5jb250ZXh0VHlwZXMsXG4gICAgICAgICdjb250ZXh0VHlwZXMgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhICcgK1xuICAgICAgICAnc3RhdGljIHByb3BlcnR5IHRvIGRlZmluZSBjb250ZXh0VHlwZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzLmdldE5hbWUoKSB8fCAnYSBjb21wb25lbnQnXG4gICAgICApIDogbnVsbCk7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgdHlwZW9mIGluc3QuY29tcG9uZW50U2hvdWxkVXBkYXRlICE9PSAnZnVuY3Rpb24nLFxuICAgICAgICAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICtcbiAgICAgICAgJ2NvbXBvbmVudFNob3VsZFVwZGF0ZSgpLiBEaWQgeW91IG1lYW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk/ICcgK1xuICAgICAgICAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgK1xuICAgICAgICAnZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuJyxcbiAgICAgICAgKHRoaXMuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpXG4gICAgICApIDogbnVsbCk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IGluc3Quc3RhdGU7XG4gICAgaWYgKGluaXRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpbnN0LnN0YXRlID0gaW5pdGlhbFN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGluaXRpYWxTdGF0ZSksXG4gICAgICAnJXMuc3RhdGU6IG11c3QgYmUgc2V0IHRvIGFuIG9iamVjdCBvciBudWxsJyxcbiAgICAgIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdcbiAgICApIDogaW52YXJpYW50KHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGluaXRpYWxTdGF0ZSkpKTtcblxuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gZmFsc2U7XG4gICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG5cbiAgICB2YXIgY2hpbGRDb250ZXh0O1xuICAgIHZhciByZW5kZXJlZEVsZW1lbnQ7XG5cbiAgICB2YXIgcHJldmlvdXNseU1vdW50aW5nID0gUmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZTtcbiAgICBSZWFjdExpZmVDeWNsZS5jdXJyZW50bHlNb3VudGluZ0luc3RhbmNlID0gdGhpcztcbiAgICB0cnkge1xuICAgICAgaWYgKGluc3QuY29tcG9uZW50V2lsbE1vdW50KSB7XG4gICAgICAgIGluc3QuY29tcG9uZW50V2lsbE1vdW50KCk7XG4gICAgICAgIC8vIFdoZW4gbW91bnRpbmcsIGNhbGxzIHRvIGBzZXRTdGF0ZWAgYnkgYGNvbXBvbmVudFdpbGxNb3VudGAgd2lsbCBzZXRcbiAgICAgICAgLy8gYHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlYCB3aXRob3V0IHRyaWdnZXJpbmcgYSByZS1yZW5kZXIuXG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSkge1xuICAgICAgICAgIGluc3Quc3RhdGUgPSB0aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKGluc3QucHJvcHMsIGluc3QuY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hpbGRDb250ZXh0ID0gdGhpcy5fZ2V0VmFsaWRhdGVkQ2hpbGRDb250ZXh0KGNvbnRleHQpO1xuICAgICAgcmVuZGVyZWRFbGVtZW50ID0gdGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KGNoaWxkQ29udGV4dCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIFJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseU1vdW50aW5nSW5zdGFuY2UgPSBwcmV2aW91c2x5TW91bnRpbmc7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSB0aGlzLl9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KFxuICAgICAgcmVuZGVyZWRFbGVtZW50LFxuICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSAvLyBUaGUgd3JhcHBpbmcgdHlwZVxuICAgICk7XG5cbiAgICB2YXIgbWFya3VwID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KFxuICAgICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQsXG4gICAgICByb290SUQsXG4gICAgICB0cmFuc2FjdGlvbixcbiAgICAgIHRoaXMuX21lcmdlQ2hpbGRDb250ZXh0KGNvbnRleHQsIGNoaWxkQ29udGV4dClcbiAgICApO1xuICAgIGlmIChpbnN0LmNvbXBvbmVudERpZE1vdW50KSB7XG4gICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGluc3QuY29tcG9uZW50RGlkTW91bnQsIGluc3QpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXJrdXA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIGFueSByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IGBtb3VudENvbXBvbmVudGAuXG4gICAqXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG5cbiAgICBpZiAoaW5zdC5jb21wb25lbnRXaWxsVW5tb3VudCkge1xuICAgICAgdmFyIHByZXZpb3VzbHlVbm1vdW50aW5nID0gUmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5VW5tb3VudGluZ0luc3RhbmNlO1xuICAgICAgUmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5VW5tb3VudGluZ0luc3RhbmNlID0gdGhpcztcbiAgICAgIHRyeSB7XG4gICAgICAgIGluc3QuY29tcG9uZW50V2lsbFVubW91bnQoKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseVVubW91bnRpbmdJbnN0YW5jZSA9IHByZXZpb3VzbHlVbm1vdW50aW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50KTtcbiAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG5cbiAgICAvLyBSZXNldCBwZW5kaW5nIGZpZWxkc1xuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gZmFsc2U7XG4gICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG4gICAgdGhpcy5fcGVuZGluZ0NhbGxiYWNrcyA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuXG4gICAgLy8gVGhlc2UgZmllbGRzIGRvIG5vdCByZWFsbHkgbmVlZCB0byBiZSByZXNldCBzaW5jZSB0aGlzIG9iamVjdCBpcyBub1xuICAgIC8vIGxvbmdlciBhY2Nlc3NpYmxlLlxuICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSBudWxsO1xuXG4gICAgLy8gRGVsZXRlIHRoZSByZWZlcmVuY2UgZnJvbSB0aGUgaW5zdGFuY2UgdG8gdGhpcyBpbnRlcm5hbCByZXByZXNlbnRhdGlvblxuICAgIC8vIHdoaWNoIGFsbG93IHRoZSBpbnRlcm5hbHMgdG8gYmUgcHJvcGVybHkgY2xlYW5lZCB1cCBldmVuIGlmIHRoZSB1c2VyXG4gICAgLy8gbGVha3MgYSByZWZlcmVuY2UgdG8gdGhlIHB1YmxpYyBpbnN0YW5jZS5cbiAgICBSZWFjdEluc3RhbmNlTWFwLnJlbW92ZShpbnN0KTtcblxuICAgIC8vIFNvbWUgZXhpc3RpbmcgY29tcG9uZW50cyByZWx5IG9uIGluc3QucHJvcHMgZXZlbiBhZnRlciB0aGV5J3ZlIGJlZW5cbiAgICAvLyBkZXN0cm95ZWQgKGluIGV2ZW50IGhhbmRsZXJzKS5cbiAgICAvLyBUT0RPOiBpbnN0LnByb3BzID0gbnVsbDtcbiAgICAvLyBUT0RPOiBpbnN0LnN0YXRlID0gbnVsbDtcbiAgICAvLyBUT0RPOiBpbnN0LmNvbnRleHQgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTY2hlZHVsZSBhIHBhcnRpYWwgdXBkYXRlIHRvIHRoZSBwcm9wcy4gT25seSB1c2VkIGZvciBpbnRlcm5hbCB0ZXN0aW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFByb3BzIFN1YnNldCBvZiB0aGUgbmV4dCBwcm9wcy5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX3NldFByb3BzSW50ZXJuYWw6IGZ1bmN0aW9uKHBhcnRpYWxQcm9wcywgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIGlzIGEgZGVvcHRpbWl6ZWQgcGF0aC4gV2Ugb3B0aW1pemUgZm9yIGFsd2F5cyBoYXZpbmcgYW4gZWxlbWVudC5cbiAgICAvLyBUaGlzIGNyZWF0ZXMgYW4gZXh0cmEgaW50ZXJuYWwgZWxlbWVudC5cbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuX3BlbmRpbmdFbGVtZW50IHx8IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzKFxuICAgICAgZWxlbWVudCxcbiAgICAgIGFzc2lnbih7fSwgZWxlbWVudC5wcm9wcywgcGFydGlhbFByb3BzKVxuICAgICk7XG4gICAgUmVhY3RVcGRhdGVzLmVucXVldWVVcGRhdGUodGhpcywgY2FsbGJhY2spO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaWx0ZXJzIHRoZSBjb250ZXh0IG9iamVjdCB0byBvbmx5IGNvbnRhaW4ga2V5cyBzcGVjaWZpZWQgaW5cbiAgICogYGNvbnRleHRUeXBlc2BcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9tYXNrQ29udGV4dDogZnVuY3Rpb24oY29udGV4dCkge1xuICAgIHZhciBtYXNrZWRDb250ZXh0ID0gbnVsbDtcbiAgICAvLyBUaGlzIHJlYWxseSBzaG91bGQgYmUgZ2V0dGluZyB0aGUgY29tcG9uZW50IGNsYXNzIGZvciB0aGUgZWxlbWVudCxcbiAgICAvLyBidXQgd2Uga25vdyB0aGF0IHdlJ3JlIG5vdCBnb2luZyB0byBuZWVkIGl0IGZvciBidWlsdC1pbnMuXG4gICAgaWYgKHR5cGVvZiB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGVtcHR5T2JqZWN0O1xuICAgIH1cbiAgICB2YXIgY29udGV4dFR5cGVzID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZS5jb250ZXh0VHlwZXM7XG4gICAgaWYgKCFjb250ZXh0VHlwZXMpIHtcbiAgICAgIHJldHVybiBlbXB0eU9iamVjdDtcbiAgICB9XG4gICAgbWFza2VkQ29udGV4dCA9IHt9O1xuICAgIGZvciAodmFyIGNvbnRleHROYW1lIGluIGNvbnRleHRUeXBlcykge1xuICAgICAgbWFza2VkQ29udGV4dFtjb250ZXh0TmFtZV0gPSBjb250ZXh0W2NvbnRleHROYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIG1hc2tlZENvbnRleHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbHRlcnMgdGhlIGNvbnRleHQgb2JqZWN0IHRvIG9ubHkgY29udGFpbiBrZXlzIHNwZWNpZmllZCBpblxuICAgKiBgY29udGV4dFR5cGVzYCwgYW5kIGFzc2VydHMgdGhhdCB0aGV5IGFyZSB2YWxpZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wcm9jZXNzQ29udGV4dDogZnVuY3Rpb24oY29udGV4dCkge1xuICAgIHZhciBtYXNrZWRDb250ZXh0ID0gdGhpcy5fbWFza0NvbnRleHQoY29udGV4dCk7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdmFyIENvbXBvbmVudCA9IFJlYWN0TmF0aXZlQ29tcG9uZW50LmdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudChcbiAgICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnRcbiAgICAgICk7XG4gICAgICBpZiAoQ29tcG9uZW50LmNvbnRleHRUeXBlcykge1xuICAgICAgICB0aGlzLl9jaGVja1Byb3BUeXBlcyhcbiAgICAgICAgICBDb21wb25lbnQuY29udGV4dFR5cGVzLFxuICAgICAgICAgIG1hc2tlZENvbnRleHQsXG4gICAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXNrZWRDb250ZXh0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY3VycmVudENvbnRleHRcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldFZhbGlkYXRlZENoaWxkQ29udGV4dDogZnVuY3Rpb24oY3VycmVudENvbnRleHQpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgIHZhciBjaGlsZENvbnRleHQgPSBpbnN0LmdldENoaWxkQ29udGV4dCAmJiBpbnN0LmdldENoaWxkQ29udGV4dCgpO1xuICAgIGlmIChjaGlsZENvbnRleHQpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIHR5cGVvZiBpbnN0LmNvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzID09PSAnb2JqZWN0JyxcbiAgICAgICAgJyVzLmdldENoaWxkQ29udGV4dCgpOiBjaGlsZENvbnRleHRUeXBlcyBtdXN0IGJlIGRlZmluZWQgaW4gb3JkZXIgdG8gJyArXG4gICAgICAgICd1c2UgZ2V0Q2hpbGRDb250ZXh0KCkuJyxcbiAgICAgICAgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50J1xuICAgICAgKSA6IGludmFyaWFudCh0eXBlb2YgaW5zdC5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyA9PT0gJ29iamVjdCcpKTtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tQcm9wVHlwZXMoXG4gICAgICAgICAgaW5zdC5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyxcbiAgICAgICAgICBjaGlsZENvbnRleHQsXG4gICAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jaGlsZENvbnRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIG5hbWUgaW4gY2hpbGRDb250ZXh0KSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgbmFtZSBpbiBpbnN0LmNvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgICAgICclcy5nZXRDaGlsZENvbnRleHQoKToga2V5IFwiJXNcIiBpcyBub3QgZGVmaW5lZCBpbiBjaGlsZENvbnRleHRUeXBlcy4nLFxuICAgICAgICAgIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcsXG4gICAgICAgICAgbmFtZVxuICAgICAgICApIDogaW52YXJpYW50KG5hbWUgaW4gaW5zdC5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoaWxkQ29udGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgX21lcmdlQ2hpbGRDb250ZXh0OiBmdW5jdGlvbihjdXJyZW50Q29udGV4dCwgY2hpbGRDb250ZXh0KSB7XG4gICAgaWYgKGNoaWxkQ29udGV4dCkge1xuICAgICAgcmV0dXJuIGFzc2lnbih7fSwgY3VycmVudENvbnRleHQsIGNoaWxkQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50Q29udGV4dDtcbiAgfSxcblxuICAvKipcbiAgICogUHJvY2Vzc2VzIHByb3BzIGJ5IHNldHRpbmcgZGVmYXVsdCB2YWx1ZXMgZm9yIHVuc3BlY2lmaWVkIHByb3BzIGFuZFxuICAgKiBhc3NlcnRpbmcgdGhhdCB0aGUgcHJvcHMgYXJlIHZhbGlkLiBEb2VzIG5vdCBtdXRhdGUgaXRzIGFyZ3VtZW50OyByZXR1cm5zXG4gICAqIGEgbmV3IHByb3BzIG9iamVjdCB3aXRoIGRlZmF1bHRzIG1lcmdlZCBpbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5ld1Byb3BzXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wcm9jZXNzUHJvcHM6IGZ1bmN0aW9uKG5ld1Byb3BzKSB7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdmFyIENvbXBvbmVudCA9IFJlYWN0TmF0aXZlQ29tcG9uZW50LmdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudChcbiAgICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnRcbiAgICAgICk7XG4gICAgICBpZiAoQ29tcG9uZW50LnByb3BUeXBlcykge1xuICAgICAgICB0aGlzLl9jaGVja1Byb3BUeXBlcyhcbiAgICAgICAgICBDb21wb25lbnQucHJvcFR5cGVzLFxuICAgICAgICAgIG5ld1Byb3BzLFxuICAgICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3UHJvcHM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFzc2VydCB0aGF0IHRoZSBwcm9wcyBhcmUgdmFsaWRcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BUeXBlcyBNYXAgb2YgcHJvcCBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NoZWNrUHJvcFR5cGVzOiBmdW5jdGlvbihwcm9wVHlwZXMsIHByb3BzLCBsb2NhdGlvbikge1xuICAgIC8vIFRPRE86IFN0b3AgdmFsaWRhdGluZyBwcm9wIHR5cGVzIGhlcmUgYW5kIG9ubHkgdXNlIHRoZSBlbGVtZW50XG4gICAgLy8gdmFsaWRhdGlvbi5cbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IHRoaXMuZ2V0TmFtZSgpO1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgICAgaWYgKHByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgICAgdHlwZW9mIHByb3BUeXBlc1twcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsXG4gICAgICAgICAgICAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgJyArXG4gICAgICAgICAgICAnZnJvbSBSZWFjdC5Qcm9wVHlwZXMuJyxcbiAgICAgICAgICAgIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJyxcbiAgICAgICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSxcbiAgICAgICAgICAgIHByb3BOYW1lXG4gICAgICAgICAgKSA6IGludmFyaWFudCh0eXBlb2YgcHJvcFR5cGVzW3Byb3BOYW1lXSA9PT0gJ2Z1bmN0aW9uJykpO1xuICAgICAgICAgIGVycm9yID0gcHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgLy8gV2UgbWF5IHdhbnQgdG8gZXh0ZW5kIHRoaXMgbG9naWMgZm9yIHNpbWlsYXIgZXJyb3JzIGluXG4gICAgICAgICAgLy8gUmVhY3QucmVuZGVyIGNhbGxzLCBzbyBJJ20gYWJzdHJhY3RpbmcgaXQgYXdheSBpbnRvXG4gICAgICAgICAgLy8gYSBmdW5jdGlvbiB0byBtaW5pbWl6ZSByZWZhY3RvcmluZyBpbiB0aGUgZnV0dXJlXG4gICAgICAgICAgdmFyIGFkZGVuZHVtID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKHRoaXMpO1xuXG4gICAgICAgICAgaWYgKGxvY2F0aW9uID09PSBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApIHtcbiAgICAgICAgICAgIC8vIFByZWZhY2UgZ2l2ZXMgdXMgc29tZXRoaW5nIHRvIGJsYWNrbGlzdCBpbiB3YXJuaW5nIG1vZHVsZVxuICAgICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAnRmFpbGVkIENvbXBvc2l0ZSBwcm9wVHlwZTogJXMlcycsXG4gICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgIGFkZGVuZHVtXG4gICAgICAgICAgICApIDogbnVsbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgJ0ZhaWxlZCBDb250ZXh0IFR5cGVzOiAlcyVzJyxcbiAgICAgICAgICAgICAgZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgYWRkZW5kdW1cbiAgICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24obmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBuZXh0Q29udGV4dCkge1xuICAgIHZhciBwcmV2RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgIHZhciBwcmV2Q29udGV4dCA9IHRoaXMuX2NvbnRleHQ7XG5cbiAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG5cbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudChcbiAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgcHJldkVsZW1lbnQsXG4gICAgICBuZXh0RWxlbWVudCxcbiAgICAgIHByZXZDb250ZXh0LFxuICAgICAgbmV4dENvbnRleHRcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJZiBhbnkgb2YgYF9wZW5kaW5nRWxlbWVudGAsIGBfcGVuZGluZ1N0YXRlUXVldWVgLCBvciBgX3BlbmRpbmdGb3JjZVVwZGF0ZWBcbiAgICogaXMgc2V0LCB1cGRhdGUgdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTogZnVuY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICBpZiAodGhpcy5fcGVuZGluZ0VsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50IHx8IHRoaXMuX2N1cnJlbnRFbGVtZW50LFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgdGhpcy5fY29udGV4dFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgIT09IG51bGwgfHwgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlKSB7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIFJlYWN0RWxlbWVudFZhbGlkYXRvci5jaGVja0FuZFdhcm5Gb3JNdXRhdGVkUHJvcHMoXG4gICAgICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnRcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGRhdGVDb21wb25lbnQoXG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCxcbiAgICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQsXG4gICAgICAgIHRoaXMuX2NvbnRleHQsXG4gICAgICAgIHRoaXMuX2NvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wYXJlIHR3byBjb250ZXh0cywgd2FybmluZyBpZiB0aGV5IGFyZSBkaWZmZXJlbnRcbiAgICogVE9ETzogUmVtb3ZlIHRoaXMgY2hlY2sgd2hlbiBvd25lci1jb250ZXh0IGlzIHJlbW92ZWRcbiAgICovXG4gICBfd2FybklmQ29udGV4dHNEaWZmZXI6IGZ1bmN0aW9uKG93bmVyQmFzZWRDb250ZXh0LCBwYXJlbnRCYXNlZENvbnRleHQpIHtcbiAgICBvd25lckJhc2VkQ29udGV4dCA9IHRoaXMuX21hc2tDb250ZXh0KG93bmVyQmFzZWRDb250ZXh0KTtcbiAgICBwYXJlbnRCYXNlZENvbnRleHQgPSB0aGlzLl9tYXNrQ29udGV4dChwYXJlbnRCYXNlZENvbnRleHQpO1xuICAgIHZhciBwYXJlbnRLZXlzID0gT2JqZWN0LmtleXMocGFyZW50QmFzZWRDb250ZXh0KS5zb3J0KCk7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwYXJlbnRLZXlzW2ldO1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIG93bmVyQmFzZWRDb250ZXh0W2tleV0gPT09IHBhcmVudEJhc2VkQ29udGV4dFtrZXldLFxuICAgICAgICAnb3duZXItYmFzZWQgYW5kIHBhcmVudC1iYXNlZCBjb250ZXh0cyBkaWZmZXIgJyAgK1xuICAgICAgICAnKHZhbHVlczogYCVzYCB2cyBgJXNgKSBmb3Iga2V5ICglcykgd2hpbGUgbW91bnRpbmcgJXMgJyArXG4gICAgICAgICcoc2VlOiBodHRwOi8vZmIubWUvcmVhY3QtY29udGV4dC1ieS1wYXJlbnQpJyxcbiAgICAgICAgb3duZXJCYXNlZENvbnRleHRba2V5XSxcbiAgICAgICAgcGFyZW50QmFzZWRDb250ZXh0W2tleV0sXG4gICAgICAgIGtleSxcbiAgICAgICAgZGlzcGxheU5hbWVcbiAgICAgICkgOiBudWxsKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYW4gdXBkYXRlIHRvIGEgbW91bnRlZCBjb21wb25lbnQuIFRoZSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIGFuZFxuICAgKiBzaG91bGRDb21wb25lbnRVcGRhdGUgbWV0aG9kcyBhcmUgY2FsbGVkLCB0aGVuIChhc3N1bWluZyB0aGUgdXBkYXRlIGlzbid0XG4gICAqIHNraXBwZWQpIHRoZSByZW1haW5pbmcgdXBkYXRlIGxpZmVjeWNsZSBtZXRob2RzIGFyZSBjYWxsZWQgYW5kIHRoZSBET01cbiAgICogcmVwcmVzZW50YXRpb24gaXMgdXBkYXRlZC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhpcyBpbXBsZW1lbnRzIFJlYWN0J3MgcmVuZGVyaW5nIGFuZCByZWNvbmNpbGlhdGlvbiBhbGdvcml0aG0uXG4gICAqIFNvcGhpc3RpY2F0ZWQgY2xpZW50cyBtYXkgd2lzaCB0byBvdmVycmlkZSB0aGlzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBwcmV2UGFyZW50RWxlbWVudFxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dFBhcmVudEVsZW1lbnRcbiAgICogQGludGVybmFsXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKi9cbiAgdXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbihcbiAgICB0cmFuc2FjdGlvbixcbiAgICBwcmV2UGFyZW50RWxlbWVudCxcbiAgICBuZXh0UGFyZW50RWxlbWVudCxcbiAgICBwcmV2VW5tYXNrZWRDb250ZXh0LFxuICAgIG5leHRVbm1hc2tlZENvbnRleHRcbiAgKSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcblxuICAgIHZhciBuZXh0Q29udGV4dCA9IGluc3QuY29udGV4dDtcbiAgICB2YXIgbmV4dFByb3BzID0gaW5zdC5wcm9wcztcblxuICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYSBwcm9wcyB1cGRhdGUgdmVyc3VzIGEgc2ltcGxlIHN0YXRlIHVwZGF0ZVxuICAgIGlmIChwcmV2UGFyZW50RWxlbWVudCAhPT0gbmV4dFBhcmVudEVsZW1lbnQpIHtcbiAgICAgIG5leHRDb250ZXh0ID0gdGhpcy5fcHJvY2Vzc0NvbnRleHQobmV4dFBhcmVudEVsZW1lbnQuX2NvbnRleHQpO1xuICAgICAgbmV4dFByb3BzID0gdGhpcy5fcHJvY2Vzc1Byb3BzKG5leHRQYXJlbnRFbGVtZW50LnByb3BzKTtcblxuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICBpZiAobmV4dFVubWFza2VkQ29udGV4dCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fd2FybklmQ29udGV4dHNEaWZmZXIoXG4gICAgICAgICAgICBuZXh0UGFyZW50RWxlbWVudC5fY29udGV4dCxcbiAgICAgICAgICAgIG5leHRVbm1hc2tlZENvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEFuIHVwZGF0ZSBoZXJlIHdpbGwgc2NoZWR1bGUgYW4gdXBkYXRlIGJ1dCBpbW1lZGlhdGVseSBzZXRcbiAgICAgIC8vIF9wZW5kaW5nU3RhdGVRdWV1ZSB3aGljaCB3aWxsIGVuc3VyZSB0aGF0IGFueSBzdGF0ZSB1cGRhdGVzIGdldHNcbiAgICAgIC8vIGltbWVkaWF0ZWx5IHJlY29uY2lsZWQgaW5zdGVhZCBvZiB3YWl0aW5nIGZvciB0aGUgbmV4dCBiYXRjaC5cblxuICAgICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykge1xuICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLCBuZXh0Q29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5leHRTdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUobmV4dFByb3BzLCBuZXh0Q29udGV4dCk7XG5cbiAgICB2YXIgc2hvdWxkVXBkYXRlID1cbiAgICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSB8fFxuICAgICAgIWluc3Quc2hvdWxkQ29tcG9uZW50VXBkYXRlIHx8XG4gICAgICBpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIHR5cGVvZiBzaG91bGRVcGRhdGUgIT09ICd1bmRlZmluZWQnLFxuICAgICAgICAnJXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk6IFJldHVybmVkIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIGEgJyArXG4gICAgICAgICdib29sZWFuIHZhbHVlLiBNYWtlIHN1cmUgdG8gcmV0dXJuIHRydWUgb3IgZmFsc2UuJyxcbiAgICAgICAgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50J1xuICAgICAgKSA6IG51bGwpO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRVcGRhdGUpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgLy8gV2lsbCBzZXQgYHRoaXMucHJvcHNgLCBgdGhpcy5zdGF0ZWAgYW5kIGB0aGlzLmNvbnRleHRgLlxuICAgICAgdGhpcy5fcGVyZm9ybUNvbXBvbmVudFVwZGF0ZShcbiAgICAgICAgbmV4dFBhcmVudEVsZW1lbnQsXG4gICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgbmV4dFN0YXRlLFxuICAgICAgICBuZXh0Q29udGV4dCxcbiAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgIG5leHRVbm1hc2tlZENvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIGl0J3MgZGV0ZXJtaW5lZCB0aGF0IGEgY29tcG9uZW50IHNob3VsZCBub3QgdXBkYXRlLCB3ZSBzdGlsbCB3YW50XG4gICAgICAvLyB0byBzZXQgcHJvcHMgYW5kIHN0YXRlIGJ1dCB3ZSBzaG9ydGN1dCB0aGUgcmVzdCBvZiB0aGUgdXBkYXRlLlxuICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0UGFyZW50RWxlbWVudDtcbiAgICAgIHRoaXMuX2NvbnRleHQgPSBuZXh0VW5tYXNrZWRDb250ZXh0O1xuICAgICAgaW5zdC5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgIGluc3Quc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgICBpbnN0LmNvbnRleHQgPSBuZXh0Q29udGV4dDtcbiAgICB9XG4gIH0sXG5cbiAgX3Byb2Nlc3NQZW5kaW5nU3RhdGU6IGZ1bmN0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICB2YXIgcXVldWUgPSB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZTtcbiAgICB2YXIgcmVwbGFjZSA9IHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGU7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcblxuICAgIGlmICghcXVldWUpIHtcbiAgICAgIHJldHVybiBpbnN0LnN0YXRlO1xuICAgIH1cblxuICAgIGlmIChyZXBsYWNlICYmIHF1ZXVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHF1ZXVlWzBdO1xuICAgIH1cblxuICAgIHZhciBuZXh0U3RhdGUgPSBhc3NpZ24oe30sIHJlcGxhY2UgPyBxdWV1ZVswXSA6IGluc3Quc3RhdGUpO1xuICAgIGZvciAodmFyIGkgPSByZXBsYWNlID8gMSA6IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhcnRpYWwgPSBxdWV1ZVtpXTtcbiAgICAgIGFzc2lnbihcbiAgICAgICAgbmV4dFN0YXRlLFxuICAgICAgICB0eXBlb2YgcGFydGlhbCA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgcGFydGlhbC5jYWxsKGluc3QsIG5leHRTdGF0ZSwgcHJvcHMsIGNvbnRleHQpIDpcbiAgICAgICAgICBwYXJ0aWFsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0U3RhdGU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1lcmdlcyBuZXcgcHJvcHMgYW5kIHN0YXRlLCBub3RpZmllcyBkZWxlZ2F0ZSBtZXRob2RzIG9mIHVwZGF0ZSBhbmRcbiAgICogcGVyZm9ybXMgdXBkYXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgTmV4dCBlbGVtZW50XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHMgTmV4dCBwdWJsaWMgb2JqZWN0IHRvIHNldCBhcyBwcm9wZXJ0aWVzLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZSBOZXh0IG9iamVjdCB0byBzZXQgYXMgc3RhdGUuXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHQgTmV4dCBwdWJsaWMgb2JqZWN0IHRvIHNldCBhcyBjb250ZXh0LlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7P29iamVjdH0gdW5tYXNrZWRDb250ZXh0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcGVyZm9ybUNvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24oXG4gICAgbmV4dEVsZW1lbnQsXG4gICAgbmV4dFByb3BzLFxuICAgIG5leHRTdGF0ZSxcbiAgICBuZXh0Q29udGV4dCxcbiAgICB0cmFuc2FjdGlvbixcbiAgICB1bm1hc2tlZENvbnRleHRcbiAgKSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcblxuICAgIHZhciBwcmV2UHJvcHMgPSBpbnN0LnByb3BzO1xuICAgIHZhciBwcmV2U3RhdGUgPSBpbnN0LnN0YXRlO1xuICAgIHZhciBwcmV2Q29udGV4dCA9IGluc3QuY29udGV4dDtcblxuICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxVcGRhdGUpIHtcbiAgICAgIGluc3QuY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG4gICAgdGhpcy5fY29udGV4dCA9IHVubWFza2VkQ29udGV4dDtcbiAgICBpbnN0LnByb3BzID0gbmV4dFByb3BzO1xuICAgIGluc3Quc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgaW5zdC5jb250ZXh0ID0gbmV4dENvbnRleHQ7XG5cbiAgICB0aGlzLl91cGRhdGVSZW5kZXJlZENvbXBvbmVudCh0cmFuc2FjdGlvbiwgdW5tYXNrZWRDb250ZXh0KTtcblxuICAgIGlmIChpbnN0LmNvbXBvbmVudERpZFVwZGF0ZSkge1xuICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShcbiAgICAgICAgaW5zdC5jb21wb25lbnREaWRVcGRhdGUuYmluZChpbnN0LCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpLFxuICAgICAgICBpbnN0XG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ2FsbCB0aGUgY29tcG9uZW50J3MgYHJlbmRlcmAgbWV0aG9kIGFuZCB1cGRhdGUgdGhlIERPTSBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF91cGRhdGVSZW5kZXJlZENvbXBvbmVudDogZnVuY3Rpb24odHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgcHJldkNvbXBvbmVudEluc3RhbmNlID0gdGhpcy5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgdmFyIHByZXZSZW5kZXJlZEVsZW1lbnQgPSBwcmV2Q29tcG9uZW50SW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50O1xuICAgIHZhciBjaGlsZENvbnRleHQgPSB0aGlzLl9nZXRWYWxpZGF0ZWRDaGlsZENvbnRleHQoKTtcbiAgICB2YXIgbmV4dFJlbmRlcmVkRWxlbWVudCA9IHRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudChjaGlsZENvbnRleHQpO1xuICAgIGlmIChzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2UmVuZGVyZWRFbGVtZW50LCBuZXh0UmVuZGVyZWRFbGVtZW50KSkge1xuICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQoXG4gICAgICAgIHByZXZDb21wb25lbnRJbnN0YW5jZSxcbiAgICAgICAgbmV4dFJlbmRlcmVkRWxlbWVudCxcbiAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgIHRoaXMuX21lcmdlQ2hpbGRDb250ZXh0KGNvbnRleHQsIGNoaWxkQ29udGV4dClcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZXNlIHR3byBJRHMgYXJlIGFjdHVhbGx5IHRoZSBzYW1lISBCdXQgbm90aGluZyBzaG91bGQgcmVseSBvbiB0aGF0LlxuICAgICAgdmFyIHRoaXNJRCA9IHRoaXMuX3Jvb3ROb2RlSUQ7XG4gICAgICB2YXIgcHJldkNvbXBvbmVudElEID0gcHJldkNvbXBvbmVudEluc3RhbmNlLl9yb290Tm9kZUlEO1xuICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNvbXBvbmVudEluc3RhbmNlKTtcblxuICAgICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSB0aGlzLl9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KFxuICAgICAgICBuZXh0UmVuZGVyZWRFbGVtZW50LFxuICAgICAgICB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlXG4gICAgICApO1xuICAgICAgdmFyIG5leHRNYXJrdXAgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoXG4gICAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LFxuICAgICAgICB0aGlzSUQsXG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICB0aGlzLl9tZXJnZUNoaWxkQ29udGV4dChjb250ZXh0LCBjaGlsZENvbnRleHQpXG4gICAgICApO1xuICAgICAgdGhpcy5fcmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRChwcmV2Q29tcG9uZW50SUQsIG5leHRNYXJrdXApO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX3JlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6IGZ1bmN0aW9uKHByZXZDb21wb25lbnRJRCwgbmV4dE1hcmt1cCkge1xuICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRChcbiAgICAgIHByZXZDb21wb25lbnRJRCxcbiAgICAgIG5leHRNYXJrdXBcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50V2l0aG91dE93bmVyT3JDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgIHZhciByZW5kZXJlZENvbXBvbmVudCA9IGluc3QucmVuZGVyKCk7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgLy8gV2UgYWxsb3cgYXV0by1tb2NrcyB0byBwcm9jZWVkIGFzIGlmIHRoZXkncmUgcmV0dXJuaW5nIG51bGwuXG4gICAgICBpZiAodHlwZW9mIHJlbmRlcmVkQ29tcG9uZW50ID09PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIGluc3QucmVuZGVyLl9pc01vY2tGdW5jdGlvbikge1xuICAgICAgICAvLyBUaGlzIGlzIHByb2JhYmx5IGJhZCBwcmFjdGljZS4gQ29uc2lkZXIgd2FybmluZyBoZXJlIGFuZFxuICAgICAgICAvLyBkZXByZWNhdGluZyB0aGlzIGNvbnZlbmllbmNlLlxuICAgICAgICByZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbmRlcmVkQ29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudDogZnVuY3Rpb24oY2hpbGRDb250ZXh0KSB7XG4gICAgdmFyIHJlbmRlcmVkQ29tcG9uZW50O1xuICAgIHZhciBwcmV2aW91c0NvbnRleHQgPSBSZWFjdENvbnRleHQuY3VycmVudDtcbiAgICBSZWFjdENvbnRleHQuY3VycmVudCA9IHRoaXMuX21lcmdlQ2hpbGRDb250ZXh0KFxuICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQuX2NvbnRleHQsXG4gICAgICBjaGlsZENvbnRleHRcbiAgICApO1xuICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzO1xuICAgIHRyeSB7XG4gICAgICByZW5kZXJlZENvbXBvbmVudCA9XG4gICAgICAgIHRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dCgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBSZWFjdENvbnRleHQuY3VycmVudCA9IHByZXZpb3VzQ29udGV4dDtcbiAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgLy8gVE9ETzogQW4gYGlzVmFsaWROb2RlYCBmdW5jdGlvbiB3b3VsZCBwcm9iYWJseSBiZSBtb3JlIGFwcHJvcHJpYXRlXG4gICAgICByZW5kZXJlZENvbXBvbmVudCA9PT0gbnVsbCB8fCByZW5kZXJlZENvbXBvbmVudCA9PT0gZmFsc2UgfHxcbiAgICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChyZW5kZXJlZENvbXBvbmVudCksXG4gICAgICAnJXMucmVuZGVyKCk6IEEgdmFsaWQgUmVhY3RDb21wb25lbnQgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlICcgK1xuICAgICAgICAncmV0dXJuZWQgdW5kZWZpbmVkLCBhbiBhcnJheSBvciBzb21lIG90aGVyIGludmFsaWQgb2JqZWN0LicsXG4gICAgICB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnXG4gICAgKSA6IGludmFyaWFudCgvLyBUT0RPOiBBbiBgaXNWYWxpZE5vZGVgIGZ1bmN0aW9uIHdvdWxkIHByb2JhYmx5IGJlIG1vcmUgYXBwcm9wcmlhdGVcbiAgICByZW5kZXJlZENvbXBvbmVudCA9PT0gbnVsbCB8fCByZW5kZXJlZENvbXBvbmVudCA9PT0gZmFsc2UgfHxcbiAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocmVuZGVyZWRDb21wb25lbnQpKSk7XG4gICAgcmV0dXJuIHJlbmRlcmVkQ29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBMYXppbHkgYWxsb2NhdGVzIHRoZSByZWZzIG9iamVjdCBhbmQgc3RvcmVzIGBjb21wb25lbnRgIGFzIGByZWZgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIFJlZmVyZW5jZSBuYW1lLlxuICAgKiBAcGFyYW0ge2NvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0byBzdG9yZSBhcyBgcmVmYC5cbiAgICogQGZpbmFsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhdHRhY2hSZWY6IGZ1bmN0aW9uKHJlZiwgY29tcG9uZW50KSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLmdldFB1YmxpY0luc3RhbmNlKCk7XG4gICAgdmFyIHJlZnMgPSBpbnN0LnJlZnMgPT09IGVtcHR5T2JqZWN0ID8gKGluc3QucmVmcyA9IHt9KSA6IGluc3QucmVmcztcbiAgICByZWZzW3JlZl0gPSBjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgfSxcblxuICAvKipcbiAgICogRGV0YWNoZXMgYSByZWZlcmVuY2UgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiBOYW1lIHRvIGRlcmVmZXJlbmNlLlxuICAgKiBAZmluYWxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRldGFjaFJlZjogZnVuY3Rpb24ocmVmKSB7XG4gICAgdmFyIHJlZnMgPSB0aGlzLmdldFB1YmxpY0luc3RhbmNlKCkucmVmcztcbiAgICBkZWxldGUgcmVmc1tyZWZdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgYSB0ZXh0IGRlc2NyaXB0aW9uIG9mIHRoZSBjb21wb25lbnQgdGhhdCBjYW4gYmUgdXNlZCB0byBpZGVudGlmeSBpdFxuICAgKiBpbiBlcnJvciBtZXNzYWdlcy5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgbmFtZSBvciBudWxsLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldE5hbWU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0eXBlID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSB0aGlzLl9pbnN0YW5jZSAmJiB0aGlzLl9pbnN0YW5jZS5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gKFxuICAgICAgdHlwZS5kaXNwbGF5TmFtZSB8fCAoY29uc3RydWN0b3IgJiYgY29uc3RydWN0b3IuZGlzcGxheU5hbWUpIHx8XG4gICAgICB0eXBlLm5hbWUgfHwgKGNvbnN0cnVjdG9yICYmIGNvbnN0cnVjdG9yLm5hbWUpIHx8XG4gICAgICBudWxsXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHRoZSBwdWJsaWNseSBhY2Nlc3NpYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgY29tcG9uZW50IC0gaS5lLiB3aGF0XG4gICAqIGlzIGV4cG9zZWQgYnkgcmVmcyBhbmQgcmV0dXJuZWQgYnkgUmVhY3QucmVuZGVyLiBDYW4gYmUgbnVsbCBmb3Igc3RhdGVsZXNzXG4gICAqIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSB0aGUgcHVibGljIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRQdWJsaWNJbnN0YW5jZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xuICB9LFxuXG4gIC8vIFN0dWJcbiAgX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ6IG51bGxcblxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKFxuICBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudE1peGluLFxuICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLFxuICB7XG4gICAgbW91bnRDb21wb25lbnQ6ICdtb3VudENvbXBvbmVudCcsXG4gICAgdXBkYXRlQ29tcG9uZW50OiAndXBkYXRlQ29tcG9uZW50JyxcbiAgICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50OiAnX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCdcbiAgfVxuKTtcblxudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0ge1xuXG4gIE1peGluOiBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudE1peGluXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnRcIjoxODcsXCIuL1JlYWN0Q29udGV4dFwiOjE5MCxcIi4vUmVhY3RDdXJyZW50T3duZXJcIjoxOTEsXCIuL1JlYWN0RWxlbWVudFwiOjIwOSxcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCI6MjEwLFwiLi9SZWFjdEluc3RhbmNlTWFwXCI6MjE5LFwiLi9SZWFjdExpZmVDeWNsZVwiOjIyMCxcIi4vUmVhY3ROYXRpdmVDb21wb25lbnRcIjoyMjYsXCIuL1JlYWN0UGVyZlwiOjIyOCxcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcIjoyMzAsXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnNcIjoyMzEsXCIuL1JlYWN0UmVjb25jaWxlclwiOjIzNSxcIi4vUmVhY3RVcGRhdGVzXCI6MjQ2LFwiLi9lbXB0eU9iamVjdFwiOjI3NyxcIi4vaW52YXJpYW50XCI6Mjk3LFwiLi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudFwiOjMxNCxcIi4vd2FybmluZ1wiOjMxOCxcIl9wcm9jZXNzXCI6MX1dLDE5MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29udGV4dFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKFwiLi9lbXB0eU9iamVjdFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIGRpZFdhcm4gPSBmYWxzZTtcblxuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBjb250ZXh0LlxuICpcbiAqIFRoZSBjb250ZXh0IGlzIGF1dG9tYXRpY2FsbHkgcGFzc2VkIGRvd24gdGhlIGNvbXBvbmVudCBvd25lcnNoaXAgaGllcmFyY2h5XG4gKiBhbmQgaXMgYWNjZXNzaWJsZSB2aWEgYHRoaXMuY29udGV4dGAgb24gUmVhY3RDb21wb3NpdGVDb21wb25lbnRzLlxuICovXG52YXIgUmVhY3RDb250ZXh0ID0ge1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHR5cGUge29iamVjdH1cbiAgICovXG4gIGN1cnJlbnQ6IGVtcHR5T2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUZW1wb3JhcmlseSBleHRlbmRzIHRoZSBjdXJyZW50IGNvbnRleHQgd2hpbGUgZXhlY3V0aW5nIHNjb3BlZENhbGxiYWNrLlxuICAgKlxuICAgKiBBIHR5cGljYWwgdXNlIGNhc2UgbWlnaHQgbG9vayBsaWtlXG4gICAqXG4gICAqICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgKiAgICB2YXIgY2hpbGRyZW4gPSBSZWFjdENvbnRleHQud2l0aENvbnRleHQoe2ZvbzogJ2Zvbyd9LCAoKSA9PiAoXG4gICAqXG4gICAqICAgICkpO1xuICAgKiAgICByZXR1cm4gPGRpdj57Y2hpbGRyZW59PC9kaXY+O1xuICAgKiAgfVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV3Q29udGV4dCBOZXcgY29udGV4dCB0byBtZXJnZSBpbnRvIHRoZSBleGlzdGluZyBjb250ZXh0XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHNjb3BlZENhbGxiYWNrIENhbGxiYWNrIHRvIHJ1biB3aXRoIHRoZSBuZXcgY29udGV4dFxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudHxhcnJheTxSZWFjdENvbXBvbmVudD59XG4gICAqL1xuICB3aXRoQ29udGV4dDogZnVuY3Rpb24obmV3Q29udGV4dCwgc2NvcGVkQ2FsbGJhY2spIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgZGlkV2FybixcbiAgICAgICAgJ3dpdGhDb250ZXh0IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiAnICtcbiAgICAgICAgJ1VzZSBhIHdyYXBwZXIgY29tcG9uZW50IHdpdGggZ2V0Q2hpbGRDb250ZXh0IGluc3RlYWQuJ1xuICAgICAgKSA6IG51bGwpO1xuXG4gICAgICBkaWRXYXJuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0O1xuICAgIHZhciBwcmV2aW91c0NvbnRleHQgPSBSZWFjdENvbnRleHQuY3VycmVudDtcbiAgICBSZWFjdENvbnRleHQuY3VycmVudCA9IGFzc2lnbih7fSwgcHJldmlvdXNDb250ZXh0LCBuZXdDb250ZXh0KTtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gc2NvcGVkQ2FsbGJhY2soKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSBwcmV2aW91c0NvbnRleHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbnRleHQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL2VtcHR5T2JqZWN0XCI6Mjc3LFwiLi93YXJuaW5nXCI6MzE4LFwiX3Byb2Nlc3NcIjoxfV0sMTkxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEN1cnJlbnRPd25lclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBvd25lci5cbiAqXG4gKiBUaGUgY3VycmVudCBvd25lciBpcyB0aGUgY29tcG9uZW50IHdobyBzaG91bGQgb3duIGFueSBjb21wb25lbnRzIHRoYXQgYXJlXG4gKiBjdXJyZW50bHkgYmVpbmcgY29uc3RydWN0ZWQuXG4gKlxuICogVGhlIGRlcHRoIGluZGljYXRlIGhvdyBtYW55IGNvbXBvc2l0ZSBjb21wb25lbnRzIGFyZSBhYm92ZSB0aGlzIHJlbmRlciBsZXZlbC5cbiAqL1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0ge1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHR5cGUge1JlYWN0Q29tcG9uZW50fVxuICAgKi9cbiAgY3VycmVudDogbnVsbFxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q3VycmVudE93bmVyO1xuXG59LHt9XSwxOTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpO1xuXG52YXIgbWFwT2JqZWN0ID0gcmVxdWlyZShcIi4vbWFwT2JqZWN0XCIpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGZhY3RvcnkgdGhhdCBjcmVhdGVzIEhUTUwgdGFnIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGFnIG5hbWUgKGUuZy4gYGRpdmApLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRE9NRmFjdG9yeSh0YWcpIHtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHJldHVybiBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeSh0YWcpO1xuICB9XG4gIHJldHVybiBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSh0YWcpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXBwaW5nIGZyb20gc3VwcG9ydGVkIEhUTUwgdGFncyB0byBgUmVhY3RET01Db21wb25lbnRgIGNsYXNzZXMuXG4gKiBUaGlzIGlzIGFsc28gYWNjZXNzaWJsZSB2aWEgYFJlYWN0LkRPTWAuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgUmVhY3RET00gPSBtYXBPYmplY3Qoe1xuICBhOiAnYScsXG4gIGFiYnI6ICdhYmJyJyxcbiAgYWRkcmVzczogJ2FkZHJlc3MnLFxuICBhcmVhOiAnYXJlYScsXG4gIGFydGljbGU6ICdhcnRpY2xlJyxcbiAgYXNpZGU6ICdhc2lkZScsXG4gIGF1ZGlvOiAnYXVkaW8nLFxuICBiOiAnYicsXG4gIGJhc2U6ICdiYXNlJyxcbiAgYmRpOiAnYmRpJyxcbiAgYmRvOiAnYmRvJyxcbiAgYmlnOiAnYmlnJyxcbiAgYmxvY2txdW90ZTogJ2Jsb2NrcXVvdGUnLFxuICBib2R5OiAnYm9keScsXG4gIGJyOiAnYnInLFxuICBidXR0b246ICdidXR0b24nLFxuICBjYW52YXM6ICdjYW52YXMnLFxuICBjYXB0aW9uOiAnY2FwdGlvbicsXG4gIGNpdGU6ICdjaXRlJyxcbiAgY29kZTogJ2NvZGUnLFxuICBjb2w6ICdjb2wnLFxuICBjb2xncm91cDogJ2NvbGdyb3VwJyxcbiAgZGF0YTogJ2RhdGEnLFxuICBkYXRhbGlzdDogJ2RhdGFsaXN0JyxcbiAgZGQ6ICdkZCcsXG4gIGRlbDogJ2RlbCcsXG4gIGRldGFpbHM6ICdkZXRhaWxzJyxcbiAgZGZuOiAnZGZuJyxcbiAgZGlhbG9nOiAnZGlhbG9nJyxcbiAgZGl2OiAnZGl2JyxcbiAgZGw6ICdkbCcsXG4gIGR0OiAnZHQnLFxuICBlbTogJ2VtJyxcbiAgZW1iZWQ6ICdlbWJlZCcsXG4gIGZpZWxkc2V0OiAnZmllbGRzZXQnLFxuICBmaWdjYXB0aW9uOiAnZmlnY2FwdGlvbicsXG4gIGZpZ3VyZTogJ2ZpZ3VyZScsXG4gIGZvb3RlcjogJ2Zvb3RlcicsXG4gIGZvcm06ICdmb3JtJyxcbiAgaDE6ICdoMScsXG4gIGgyOiAnaDInLFxuICBoMzogJ2gzJyxcbiAgaDQ6ICdoNCcsXG4gIGg1OiAnaDUnLFxuICBoNjogJ2g2JyxcbiAgaGVhZDogJ2hlYWQnLFxuICBoZWFkZXI6ICdoZWFkZXInLFxuICBocjogJ2hyJyxcbiAgaHRtbDogJ2h0bWwnLFxuICBpOiAnaScsXG4gIGlmcmFtZTogJ2lmcmFtZScsXG4gIGltZzogJ2ltZycsXG4gIGlucHV0OiAnaW5wdXQnLFxuICBpbnM6ICdpbnMnLFxuICBrYmQ6ICdrYmQnLFxuICBrZXlnZW46ICdrZXlnZW4nLFxuICBsYWJlbDogJ2xhYmVsJyxcbiAgbGVnZW5kOiAnbGVnZW5kJyxcbiAgbGk6ICdsaScsXG4gIGxpbms6ICdsaW5rJyxcbiAgbWFpbjogJ21haW4nLFxuICBtYXA6ICdtYXAnLFxuICBtYXJrOiAnbWFyaycsXG4gIG1lbnU6ICdtZW51JyxcbiAgbWVudWl0ZW06ICdtZW51aXRlbScsXG4gIG1ldGE6ICdtZXRhJyxcbiAgbWV0ZXI6ICdtZXRlcicsXG4gIG5hdjogJ25hdicsXG4gIG5vc2NyaXB0OiAnbm9zY3JpcHQnLFxuICBvYmplY3Q6ICdvYmplY3QnLFxuICBvbDogJ29sJyxcbiAgb3B0Z3JvdXA6ICdvcHRncm91cCcsXG4gIG9wdGlvbjogJ29wdGlvbicsXG4gIG91dHB1dDogJ291dHB1dCcsXG4gIHA6ICdwJyxcbiAgcGFyYW06ICdwYXJhbScsXG4gIHBpY3R1cmU6ICdwaWN0dXJlJyxcbiAgcHJlOiAncHJlJyxcbiAgcHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gIHE6ICdxJyxcbiAgcnA6ICdycCcsXG4gIHJ0OiAncnQnLFxuICBydWJ5OiAncnVieScsXG4gIHM6ICdzJyxcbiAgc2FtcDogJ3NhbXAnLFxuICBzY3JpcHQ6ICdzY3JpcHQnLFxuICBzZWN0aW9uOiAnc2VjdGlvbicsXG4gIHNlbGVjdDogJ3NlbGVjdCcsXG4gIHNtYWxsOiAnc21hbGwnLFxuICBzb3VyY2U6ICdzb3VyY2UnLFxuICBzcGFuOiAnc3BhbicsXG4gIHN0cm9uZzogJ3N0cm9uZycsXG4gIHN0eWxlOiAnc3R5bGUnLFxuICBzdWI6ICdzdWInLFxuICBzdW1tYXJ5OiAnc3VtbWFyeScsXG4gIHN1cDogJ3N1cCcsXG4gIHRhYmxlOiAndGFibGUnLFxuICB0Ym9keTogJ3Rib2R5JyxcbiAgdGQ6ICd0ZCcsXG4gIHRleHRhcmVhOiAndGV4dGFyZWEnLFxuICB0Zm9vdDogJ3Rmb290JyxcbiAgdGg6ICd0aCcsXG4gIHRoZWFkOiAndGhlYWQnLFxuICB0aW1lOiAndGltZScsXG4gIHRpdGxlOiAndGl0bGUnLFxuICB0cjogJ3RyJyxcbiAgdHJhY2s6ICd0cmFjaycsXG4gIHU6ICd1JyxcbiAgdWw6ICd1bCcsXG4gICd2YXInOiAndmFyJyxcbiAgdmlkZW86ICd2aWRlbycsXG4gIHdicjogJ3dicicsXG5cbiAgLy8gU1ZHXG4gIGNpcmNsZTogJ2NpcmNsZScsXG4gIGNsaXBQYXRoOiAnY2xpcFBhdGgnLFxuICBkZWZzOiAnZGVmcycsXG4gIGVsbGlwc2U6ICdlbGxpcHNlJyxcbiAgZzogJ2cnLFxuICBsaW5lOiAnbGluZScsXG4gIGxpbmVhckdyYWRpZW50OiAnbGluZWFyR3JhZGllbnQnLFxuICBtYXNrOiAnbWFzaycsXG4gIHBhdGg6ICdwYXRoJyxcbiAgcGF0dGVybjogJ3BhdHRlcm4nLFxuICBwb2x5Z29uOiAncG9seWdvbicsXG4gIHBvbHlsaW5lOiAncG9seWxpbmUnLFxuICByYWRpYWxHcmFkaWVudDogJ3JhZGlhbEdyYWRpZW50JyxcbiAgcmVjdDogJ3JlY3QnLFxuICBzdG9wOiAnc3RvcCcsXG4gIHN2ZzogJ3N2ZycsXG4gIHRleHQ6ICd0ZXh0JyxcbiAgdHNwYW46ICd0c3BhbidcblxufSwgY3JlYXRlRE9NRmFjdG9yeSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0RWxlbWVudFwiOjIwOSxcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCI6MjEwLFwiLi9tYXBPYmplY3RcIjozMDUsXCJfcHJvY2Vzc1wiOjF9XSwxOTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NQnV0dG9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXV0b0ZvY3VzTWl4aW4gPSByZXF1aXJlKFwiLi9BdXRvRm9jdXNNaXhpblwiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoXCIuL2tleU1pcnJvclwiKTtcblxudmFyIGJ1dHRvbiA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KCdidXR0b24nKTtcblxudmFyIG1vdXNlTGlzdGVuZXJOYW1lcyA9IGtleU1pcnJvcih7XG4gIG9uQ2xpY2s6IHRydWUsXG4gIG9uRG91YmxlQ2xpY2s6IHRydWUsXG4gIG9uTW91c2VEb3duOiB0cnVlLFxuICBvbk1vdXNlTW92ZTogdHJ1ZSxcbiAgb25Nb3VzZVVwOiB0cnVlLFxuICBvbkNsaWNrQ2FwdHVyZTogdHJ1ZSxcbiAgb25Eb3VibGVDbGlja0NhcHR1cmU6IHRydWUsXG4gIG9uTW91c2VEb3duQ2FwdHVyZTogdHJ1ZSxcbiAgb25Nb3VzZU1vdmVDYXB0dXJlOiB0cnVlLFxuICBvbk1vdXNlVXBDYXB0dXJlOiB0cnVlXG59KTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPGJ1dHRvbj4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IGRvZXMgbm90IHJlY2VpdmUgbW91c2UgZXZlbnRzXG4gKiB3aGVuIGBkaXNhYmxlZGAgaXMgc2V0LlxuICovXG52YXIgUmVhY3RET01CdXR0b24gPSBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdERPTUJ1dHRvbicsXG4gIHRhZ05hbWU6ICdCVVRUT04nLFxuXG4gIG1peGluczogW0F1dG9Gb2N1c01peGluLCBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJvcHMgPSB7fTtcblxuICAgIC8vIENvcHkgdGhlIHByb3BzOyBleGNlcHQgdGhlIG1vdXNlIGxpc3RlbmVycyBpZiB3ZSdyZSBkaXNhYmxlZFxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXG4gICAgICAgICAgKCF0aGlzLnByb3BzLmRpc2FibGVkIHx8ICFtb3VzZUxpc3RlbmVyTmFtZXNba2V5XSkpIHtcbiAgICAgICAgcHJvcHNba2V5XSA9IHRoaXMucHJvcHNba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYnV0dG9uKHByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUJ1dHRvbjtcblxufSx7XCIuL0F1dG9Gb2N1c01peGluXCI6MTQ4LFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiOjE3OCxcIi4vUmVhY3RDbGFzc1wiOjE4NCxcIi4vUmVhY3RFbGVtZW50XCI6MjA5LFwiLi9rZXlNaXJyb3JcIjozMDN9XSwxOTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUNvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4vKiBnbG9iYWwgaGFzT3duUHJvcGVydHk6dHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID1cbiAgcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnRcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RNdWx0aUNoaWxkID0gcmVxdWlyZShcIi4vUmVhY3RNdWx0aUNoaWxkXCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZShcIi4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZShcIi4vaXNFdmVudFN1cHBvcnRlZFwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgZGVsZXRlTGlzdGVuZXIgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuZGVsZXRlTGlzdGVuZXI7XG52YXIgbGlzdGVuVG8gPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIubGlzdGVuVG87XG52YXIgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM7XG5cbi8vIEZvciBxdWlja2x5IG1hdGNoaW5nIGNoaWxkcmVuIHR5cGUsIHRvIHRlc3QgaWYgY2FuIGJlIHRyZWF0ZWQgYXMgY29udGVudC5cbnZhciBDT05URU5UX1RZUEVTID0geydzdHJpbmcnOiB0cnVlLCAnbnVtYmVyJzogdHJ1ZX07XG5cbnZhciBTVFlMRSA9IGtleU9mKHtzdHlsZTogbnVsbH0pO1xuXG52YXIgRUxFTUVOVF9OT0RFX1RZUEUgPSAxO1xuXG4vKipcbiAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBvcGVyYXRpb25zIGZvciBtdXRhdGluZyB0aGUgRE9NXG4gKi9cbnZhciBCYWNrZW5kSURPcGVyYXRpb25zID0gbnVsbDtcblxuLyoqXG4gKiBAcGFyYW0gez9vYmplY3R9IHByb3BzXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFZhbGlkUHJvcHMocHJvcHMpIHtcbiAgaWYgKCFwcm9wcykge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBOb3RlIHRoZSB1c2Ugb2YgYD09YCB3aGljaCBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkLlxuICBpZiAocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT0gbnVsbCkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBwcm9wcy5jaGlsZHJlbiA9PSBudWxsLFxuICAgICAgJ0NhbiBvbmx5IHNldCBvbmUgb2YgYGNoaWxkcmVuYCBvciBgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLidcbiAgICApIDogaW52YXJpYW50KHByb3BzLmNoaWxkcmVuID09IG51bGwpKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgdHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09PSAnb2JqZWN0JyAmJlxuICAgICAgJ19faHRtbCcgaW4gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsXG4gICAgICAnYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIGluIHRoZSBmb3JtIGB7X19odG1sOiAuLi59YC4gJyArXG4gICAgICAnUGxlYXNlIHZpc2l0IGh0dHBzOi8vZmIubWUvcmVhY3QtaW52YXJpYW50LWRhbmdlcm91c2x5LXNldC1pbm5lci1odG1sICcgK1xuICAgICAgJ2ZvciBtb3JlIGluZm9ybWF0aW9uLidcbiAgICApIDogaW52YXJpYW50KHR5cGVvZiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PT0gJ29iamVjdCcgJiZcbiAgICAnX19odG1sJyBpbiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCkpO1xuICB9XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIHByb3BzLmlubmVySFRNTCA9PSBudWxsLFxuICAgICAgJ0RpcmVjdGx5IHNldHRpbmcgcHJvcGVydHkgYGlubmVySFRNTGAgaXMgbm90IHBlcm1pdHRlZC4gJyArXG4gICAgICAnRm9yIG1vcmUgaW5mb3JtYXRpb24sIGxvb2t1cCBkb2N1bWVudGF0aW9uIG9uIGBkYW5nZXJvdXNseVNldElubmVySFRNTGAuJ1xuICAgICkgOiBudWxsKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICFwcm9wcy5jb250ZW50RWRpdGFibGUgfHwgcHJvcHMuY2hpbGRyZW4gPT0gbnVsbCxcbiAgICAgICdBIGNvbXBvbmVudCBpcyBgY29udGVudEVkaXRhYmxlYCBhbmQgY29udGFpbnMgYGNoaWxkcmVuYCBtYW5hZ2VkIGJ5ICcgK1xuICAgICAgJ1JlYWN0LiBJdCBpcyBub3cgeW91ciByZXNwb25zaWJpbGl0eSB0byBndWFyYW50ZWUgdGhhdCBub25lIG9mICcgK1xuICAgICAgJ3Rob3NlIG5vZGVzIGFyZSB1bmV4cGVjdGVkbHkgbW9kaWZpZWQgb3IgZHVwbGljYXRlZC4gVGhpcyBpcyAnICtcbiAgICAgICdwcm9iYWJseSBub3QgaW50ZW50aW9uYWwuJ1xuICAgICkgOiBudWxsKTtcbiAgfVxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHByb3BzLnN0eWxlID09IG51bGwgfHwgdHlwZW9mIHByb3BzLnN0eWxlID09PSAnb2JqZWN0JyxcbiAgICAnVGhlIGBzdHlsZWAgcHJvcCBleHBlY3RzIGEgbWFwcGluZyBmcm9tIHN0eWxlIHByb3BlcnRpZXMgdG8gdmFsdWVzLCAnICtcbiAgICAnbm90IGEgc3RyaW5nLiBGb3IgZXhhbXBsZSwgc3R5bGU9e3ttYXJnaW5SaWdodDogc3BhY2luZyArIFxcJ2VtXFwnfX0gd2hlbiAnICtcbiAgICAndXNpbmcgSlNYLidcbiAgKSA6IGludmFyaWFudChwcm9wcy5zdHlsZSA9PSBudWxsIHx8IHR5cGVvZiBwcm9wcy5zdHlsZSA9PT0gJ29iamVjdCcpKTtcbn1cblxuZnVuY3Rpb24gcHV0TGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyLCB0cmFuc2FjdGlvbikge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgLy8gSUU4IGhhcyBubyBBUEkgZm9yIGV2ZW50IGNhcHR1cmluZyBhbmQgdGhlIGBvblNjcm9sbGAgZXZlbnQgZG9lc24ndFxuICAgIC8vIGJ1YmJsZS5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWUgIT09ICdvblNjcm9sbCcgfHwgaXNFdmVudFN1cHBvcnRlZCgnc2Nyb2xsJywgdHJ1ZSksXG4gICAgICAnVGhpcyBicm93c2VyIGRvZXNuXFwndCBzdXBwb3J0IHRoZSBgb25TY3JvbGxgIGV2ZW50J1xuICAgICkgOiBudWxsKTtcbiAgfVxuICB2YXIgY29udGFpbmVyID0gUmVhY3RNb3VudC5maW5kUmVhY3RDb250YWluZXJGb3JJRChpZCk7XG4gIGlmIChjb250YWluZXIpIHtcbiAgICB2YXIgZG9jID0gY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSA/XG4gICAgICBjb250YWluZXIub3duZXJEb2N1bWVudCA6XG4gICAgICBjb250YWluZXI7XG4gICAgbGlzdGVuVG8ocmVnaXN0cmF0aW9uTmFtZSwgZG9jKTtcbiAgfVxuICB0cmFuc2FjdGlvbi5nZXRQdXRMaXN0ZW5lclF1ZXVlKCkuZW5xdWV1ZVB1dExpc3RlbmVyKFxuICAgIGlkLFxuICAgIHJlZ2lzdHJhdGlvbk5hbWUsXG4gICAgbGlzdGVuZXJcbiAgKTtcbn1cblxuLy8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBzaG91bGQgb21pdCB0aGVpciBjbG9zZSB0YWcuIFdlIGtlZXAgYSB3aGl0ZWxpc3QgZm9yXG4vLyB0aG9zZSBzcGVjaWFsIGNhc2VkIHRhZ3MuXG5cbnZhciBvbWl0dGVkQ2xvc2VUYWdzID0ge1xuICAnYXJlYSc6IHRydWUsXG4gICdiYXNlJzogdHJ1ZSxcbiAgJ2JyJzogdHJ1ZSxcbiAgJ2NvbCc6IHRydWUsXG4gICdlbWJlZCc6IHRydWUsXG4gICdocic6IHRydWUsXG4gICdpbWcnOiB0cnVlLFxuICAnaW5wdXQnOiB0cnVlLFxuICAna2V5Z2VuJzogdHJ1ZSxcbiAgJ2xpbmsnOiB0cnVlLFxuICAnbWV0YSc6IHRydWUsXG4gICdwYXJhbSc6IHRydWUsXG4gICdzb3VyY2UnOiB0cnVlLFxuICAndHJhY2snOiB0cnVlLFxuICAnd2JyJzogdHJ1ZVxuICAvLyBOT1RFOiBtZW51aXRlbSdzIGNsb3NlIHRhZyBzaG91bGQgYmUgb21pdHRlZCwgYnV0IHRoYXQgY2F1c2VzIHByb2JsZW1zLlxufTtcblxuLy8gV2UgYWNjZXB0IGFueSB0YWcgdG8gYmUgcmVuZGVyZWQgYnV0IHNpbmNlIHRoaXMgZ2V0cyBpbmplY3RlZCBpbnRvIGFiaXRyYXJ5XG4vLyBIVE1MLCB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IGl0J3MgYSBzYWZlIHRhZy5cbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy14bWwvI05ULU5hbWVcblxudmFyIFZBTElEX1RBR19SRUdFWCA9IC9eW2EtekEtWl1bYS16QS1aOl9cXC5cXC1cXGRdKiQvOyAvLyBTaW1wbGlmaWVkIHN1YnNldFxudmFyIHZhbGlkYXRlZFRhZ0NhY2hlID0ge307XG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gdmFsaWRhdGVEYW5nZXJvdXNUYWcodGFnKSB7XG4gIGlmICghaGFzT3duUHJvcGVydHkuY2FsbCh2YWxpZGF0ZWRUYWdDYWNoZSwgdGFnKSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoVkFMSURfVEFHX1JFR0VYLnRlc3QodGFnKSwgJ0ludmFsaWQgdGFnOiAlcycsIHRhZykgOiBpbnZhcmlhbnQoVkFMSURfVEFHX1JFR0VYLnRlc3QodGFnKSkpO1xuICAgIHZhbGlkYXRlZFRhZ0NhY2hlW3RhZ10gPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBSZWFjdCBjbGFzcyB0aGF0IGlzIGlkZW1wb3RlbnQgYW5kIGNhcGFibGUgb2YgY29udGFpbmluZyBvdGhlclxuICogUmVhY3QgY29tcG9uZW50cy4gSXQgYWNjZXB0cyBldmVudCBsaXN0ZW5lcnMgYW5kIERPTSBwcm9wZXJ0aWVzIHRoYXQgYXJlXG4gKiB2YWxpZCBhY2NvcmRpbmcgdG8gYERPTVByb3BlcnR5YC5cbiAqXG4gKiAgLSBFdmVudCBsaXN0ZW5lcnM6IGBvbkNsaWNrYCwgYG9uTW91c2VEb3duYCwgZXRjLlxuICogIC0gRE9NIHByb3BlcnRpZXM6IGBjbGFzc05hbWVgLCBgbmFtZWAsIGB0aXRsZWAsIGV0Yy5cbiAqXG4gKiBUaGUgYHN0eWxlYCBwcm9wZXJ0eSBmdW5jdGlvbnMgZGlmZmVyZW50bHkgZnJvbSB0aGUgRE9NIEFQSS4gSXQgYWNjZXB0cyBhblxuICogb2JqZWN0IG1hcHBpbmcgb2Ygc3R5bGUgcHJvcGVydGllcyB0byB2YWx1ZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yIFJlYWN0RE9NQ29tcG9uZW50XG4gKiBAZXh0ZW5kcyBSZWFjdE11bHRpQ2hpbGRcbiAqL1xuZnVuY3Rpb24gUmVhY3RET01Db21wb25lbnQodGFnKSB7XG4gIHZhbGlkYXRlRGFuZ2Vyb3VzVGFnKHRhZyk7XG4gIHRoaXMuX3RhZyA9IHRhZztcbiAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IG51bGw7XG4gIHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gbnVsbDtcbiAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG59XG5cblJlYWN0RE9NQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ1JlYWN0RE9NQ29tcG9uZW50JztcblxuUmVhY3RET01Db21wb25lbnQuTWl4aW4gPSB7XG5cbiAgY29uc3RydWN0OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgcm9vdCB0YWcgbWFya3VwIHRoZW4gcmVjdXJzZXMuIFRoaXMgbWV0aG9kIGhhcyBzaWRlIGVmZmVjdHMgYW5kXG4gICAqIGlzIG5vdCBpZGVtcG90ZW50LlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBUaGUgcm9vdCBET00gSUQgZm9yIHRoaXMgbm9kZS5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNvbXB1dGVkIG1hcmt1cC5cbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihyb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IHJvb3RJRDtcbiAgICBhc3NlcnRWYWxpZFByb3BzKHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzKTtcbiAgICB2YXIgY2xvc2VUYWcgPSBvbWl0dGVkQ2xvc2VUYWdzW3RoaXMuX3RhZ10gPyAnJyA6ICc8LycgKyB0aGlzLl90YWcgKyAnPic7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX2NyZWF0ZU9wZW5UYWdNYXJrdXBBbmRQdXRMaXN0ZW5lcnModHJhbnNhY3Rpb24pICtcbiAgICAgIHRoaXMuX2NyZWF0ZUNvbnRlbnRNYXJrdXAodHJhbnNhY3Rpb24sIGNvbnRleHQpICtcbiAgICAgIGNsb3NlVGFnXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBvcGVuIHRhZyBhbmQgYWxsIGF0dHJpYnV0ZXMuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGhhcyBzaWRlIGVmZmVjdHMgYmVjYXVzZSBldmVudHMgZ2V0IHJlZ2lzdGVyZWQuXG4gICAqXG4gICAqIEl0ZXJhdGluZyBvdmVyIG9iamVjdCBwcm9wZXJ0aWVzIGlzIGZhc3RlciB0aGFuIGl0ZXJhdGluZyBvdmVyIGFycmF5cy5cbiAgICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9vYmotdnMtYXJyLWl0ZXJhdGlvblxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgb2Ygb3BlbmluZyB0YWcuXG4gICAqL1xuICBfY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVyczogZnVuY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgcmV0ID0gJzwnICsgdGhpcy5fdGFnO1xuXG4gICAgZm9yICh2YXIgcHJvcEtleSBpbiBwcm9wcykge1xuICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wS2V5XTtcbiAgICAgIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBwdXRMaXN0ZW5lcih0aGlzLl9yb290Tm9kZUlELCBwcm9wS2V5LCBwcm9wVmFsdWUsIHRyYW5zYWN0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAgICAgIGlmIChwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgIHByb3BWYWx1ZSA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gYXNzaWduKHt9LCBwcm9wcy5zdHlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb3BWYWx1ZSA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JTdHlsZXMocHJvcFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFya3VwID1cbiAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yUHJvcGVydHkocHJvcEtleSwgcHJvcFZhbHVlKTtcbiAgICAgICAgaWYgKG1hcmt1cCkge1xuICAgICAgICAgIHJldCArPSAnICcgKyBtYXJrdXA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGb3Igc3RhdGljIHBhZ2VzLCBubyBuZWVkIHRvIHB1dCBSZWFjdCBJRCBhbmQgY2hlY2tzdW0uIFNhdmVzIGxvdHMgb2ZcbiAgICAvLyBieXRlcy5cbiAgICBpZiAodHJhbnNhY3Rpb24ucmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgICAgIHJldHVybiByZXQgKyAnPic7XG4gICAgfVxuXG4gICAgdmFyIG1hcmt1cEZvcklEID0gRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgIHJldHVybiByZXQgKyAnICcgKyBtYXJrdXBGb3JJRCArICc+JztcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBjb250ZW50IGJldHdlZW4gdGhlIHRhZ3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IENvbnRlbnQgbWFya3VwLlxuICAgKi9cbiAgX2NyZWF0ZUNvbnRlbnRNYXJrdXA6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHByZWZpeCA9ICcnO1xuICAgIGlmICh0aGlzLl90YWcgPT09ICdsaXN0aW5nJyB8fFxuICAgICAgICB0aGlzLl90YWcgPT09ICdwcmUnIHx8XG4gICAgICAgIHRoaXMuX3RhZyA9PT0gJ3RleHRhcmVhJykge1xuICAgICAgLy8gQWRkIGFuIGluaXRpYWwgbmV3bGluZSBiZWNhdXNlIGJyb3dzZXJzIGlnbm9yZSB0aGUgZmlyc3QgbmV3bGluZSBpblxuICAgICAgLy8gYSA8bGlzdGluZz4sIDxwcmU+LCBvciA8dGV4dGFyZWE+IGFzIGFuIFwiYXV0aG9yaW5nIGNvbnZlbmllbmNlXCIgLS0gc2VlXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5ib2R5LlxuICAgICAgcHJlZml4ID0gJ1xcbic7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICAvLyBJbnRlbnRpb25hbCB1c2Ugb2YgIT0gdG8gYXZvaWQgY2F0Y2hpbmcgemVyby9mYWxzZS5cbiAgICB2YXIgaW5uZXJIVE1MID0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw7XG4gICAgaWYgKGlubmVySFRNTCAhPSBudWxsKSB7XG4gICAgICBpZiAoaW5uZXJIVE1MLl9faHRtbCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyBpbm5lckhUTUwuX19odG1sO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29udGVudFRvVXNlID1cbiAgICAgICAgQ09OVEVOVF9UWVBFU1t0eXBlb2YgcHJvcHMuY2hpbGRyZW5dID8gcHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgICAgdmFyIGNoaWxkcmVuVG9Vc2UgPSBjb250ZW50VG9Vc2UgIT0gbnVsbCA/IG51bGwgOiBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIGlmIChjb250ZW50VG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKGNvbnRlbnRUb1VzZSk7XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkcmVuVG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbW91bnRJbWFnZXMgPSB0aGlzLm1vdW50Q2hpbGRyZW4oXG4gICAgICAgICAgY2hpbGRyZW5Ub1VzZSxcbiAgICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyBtb3VudEltYWdlcy5qb2luKCcnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByZWZpeDtcbiAgfSxcblxuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbihuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgcHJldkVsZW1lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudDtcbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQsIGNvbnRleHQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgbmF0aXZlIERPTSBjb21wb25lbnQgYWZ0ZXIgaXQgaGFzIGFscmVhZHkgYmVlbiBhbGxvY2F0ZWQgYW5kXG4gICAqIGF0dGFjaGVkIHRvIHRoZSBET00uIFJlY29uY2lsZXMgdGhlIHJvb3QgRE9NIG5vZGUsIHRoZW4gcmVjdXJzZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IHByZXZFbGVtZW50XG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudFxuICAgKiBAaW50ZXJuYWxcbiAgICogQG92ZXJyaWRhYmxlXG4gICAqL1xuICB1cGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQsIGNvbnRleHQpIHtcbiAgICBhc3NlcnRWYWxpZFByb3BzKHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzKTtcbiAgICB0aGlzLl91cGRhdGVET01Qcm9wZXJ0aWVzKHByZXZFbGVtZW50LnByb3BzLCB0cmFuc2FjdGlvbik7XG4gICAgdGhpcy5fdXBkYXRlRE9NQ2hpbGRyZW4ocHJldkVsZW1lbnQucHJvcHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVjb25jaWxlcyB0aGUgcHJvcGVydGllcyBieSBkZXRlY3RpbmcgZGlmZmVyZW5jZXMgaW4gcHJvcGVydHkgdmFsdWVzIGFuZFxuICAgKiB1cGRhdGluZyB0aGUgRE9NIGFzIG5lY2Vzc2FyeS4gVGhpcyBmdW5jdGlvbiBpcyBwcm9iYWJseSB0aGUgc2luZ2xlIG1vc3RcbiAgICogY3JpdGljYWwgcGF0aCBmb3IgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuICAgKlxuICAgKiBUT0RPOiBCZW5jaG1hcmsgd2hldGhlciBjaGVja2luZyBmb3IgY2hhbmdlZCB2YWx1ZXMgaW4gbWVtb3J5IGFjdHVhbGx5XG4gICAqICAgICAgIGltcHJvdmVzIHBlcmZvcm1hbmNlIChlc3BlY2lhbGx5IHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50cykuXG4gICAqIFRPRE86IEJlbmNobWFyayB0aGUgZWZmZWN0cyBvZiBwdXR0aW5nIHRoaXMgYXQgdGhlIHRvcCBzaW5jZSA5OSUgb2YgcHJvcHNcbiAgICogICAgICAgZG8gbm90IGNoYW5nZSBmb3IgYSBnaXZlbiByZWNvbmNpbGlhdGlvbi5cbiAgICogVE9ETzogQmVuY2htYXJrIGFyZWFzIHRoYXQgY2FuIGJlIGltcHJvdmVkIHdpdGggY2FjaGluZy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtvYmplY3R9IGxhc3RQcm9wc1xuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqL1xuICBfdXBkYXRlRE9NUHJvcGVydGllczogZnVuY3Rpb24obGFzdFByb3BzLCB0cmFuc2FjdGlvbikge1xuICAgIHZhciBuZXh0UHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgcHJvcEtleTtcbiAgICB2YXIgc3R5bGVOYW1lO1xuICAgIHZhciBzdHlsZVVwZGF0ZXM7XG4gICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgaWYgKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fFxuICAgICAgICAgIWxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAgICB2YXIgbGFzdFN0eWxlID0gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHk7XG4gICAgICAgIGZvciAoc3R5bGVOYW1lIGluIGxhc3RTdHlsZSkge1xuICAgICAgICAgIGlmIChsYXN0U3R5bGUuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gc3R5bGVVcGRhdGVzIHx8IHt9O1xuICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBkZWxldGVMaXN0ZW5lcih0aGlzLl9yb290Tm9kZUlELCBwcm9wS2V5KTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbcHJvcEtleV0gfHxcbiAgICAgICAgICBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICBCYWNrZW5kSURPcGVyYXRpb25zLmRlbGV0ZVByb3BlcnR5QnlJRChcbiAgICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICAgIHByb3BLZXlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChwcm9wS2V5IGluIG5leHRQcm9wcykge1xuICAgICAgdmFyIG5leHRQcm9wID0gbmV4dFByb3BzW3Byb3BLZXldO1xuICAgICAgdmFyIGxhc3RQcm9wID0gcHJvcEtleSA9PT0gU1RZTEUgP1xuICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA6XG4gICAgICAgIGxhc3RQcm9wc1twcm9wS2V5XTtcbiAgICAgIGlmICghbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8IG5leHRQcm9wID09PSBsYXN0UHJvcCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAgICBpZiAobmV4dFByb3ApIHtcbiAgICAgICAgICBuZXh0UHJvcCA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gYXNzaWduKHt9LCBuZXh0UHJvcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0UHJvcCkge1xuICAgICAgICAgIC8vIFVuc2V0IHN0eWxlcyBvbiBgbGFzdFByb3BgIGJ1dCBub3Qgb24gYG5leHRQcm9wYC5cbiAgICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBsYXN0UHJvcCkge1xuICAgICAgICAgICAgaWYgKGxhc3RQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiZcbiAgICAgICAgICAgICAgICAoIW5leHRQcm9wIHx8ICFuZXh0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSkge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFVwZGF0ZSBzdHlsZXMgdGhhdCBjaGFuZ2VkIHNpbmNlIGBsYXN0UHJvcGAuXG4gICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbmV4dFByb3ApIHtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpICYmXG4gICAgICAgICAgICAgICAgbGFzdFByb3Bbc3R5bGVOYW1lXSAhPT0gbmV4dFByb3Bbc3R5bGVOYW1lXSkge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gbmV4dFByb3Bbc3R5bGVOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUmVsaWVzIG9uIGB1cGRhdGVTdHlsZXNCeUlEYCBub3QgbXV0YXRpbmcgYHN0eWxlVXBkYXRlc2AuXG4gICAgICAgICAgc3R5bGVVcGRhdGVzID0gbmV4dFByb3A7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgcHV0TGlzdGVuZXIodGhpcy5fcm9vdE5vZGVJRCwgcHJvcEtleSwgbmV4dFByb3AsIHRyYW5zYWN0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbcHJvcEtleV0gfHxcbiAgICAgICAgICBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICBCYWNrZW5kSURPcGVyYXRpb25zLnVwZGF0ZVByb3BlcnR5QnlJRChcbiAgICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICAgIHByb3BLZXksXG4gICAgICAgICAgbmV4dFByb3BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0eWxlVXBkYXRlcykge1xuICAgICAgQmFja2VuZElET3BlcmF0aW9ucy51cGRhdGVTdHlsZXNCeUlEKFxuICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICBzdHlsZVVwZGF0ZXNcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZWNvbmNpbGVzIHRoZSBjaGlsZHJlbiB3aXRoIHRoZSB2YXJpb3VzIHByb3BlcnRpZXMgdGhhdCBhZmZlY3QgdGhlXG4gICAqIGNoaWxkcmVuIGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsYXN0UHJvcHNcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgX3VwZGF0ZURPTUNoaWxkcmVuOiBmdW5jdGlvbihsYXN0UHJvcHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIG5leHRQcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuXG4gICAgdmFyIGxhc3RDb250ZW50ID1cbiAgICAgIENPTlRFTlRfVFlQRVNbdHlwZW9mIGxhc3RQcm9wcy5jaGlsZHJlbl0gPyBsYXN0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgIHZhciBuZXh0Q29udGVudCA9XG4gICAgICBDT05URU5UX1RZUEVTW3R5cGVvZiBuZXh0UHJvcHMuY2hpbGRyZW5dID8gbmV4dFByb3BzLmNoaWxkcmVuIDogbnVsbDtcblxuICAgIHZhciBsYXN0SHRtbCA9XG4gICAgICBsYXN0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiZcbiAgICAgIGxhc3RQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG4gICAgdmFyIG5leHRIdG1sID1cbiAgICAgIG5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJlxuICAgICAgbmV4dFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbDtcblxuICAgIC8vIE5vdGUgdGhlIHVzZSBvZiBgIT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG4gICAgdmFyIGxhc3RDaGlsZHJlbiA9IGxhc3RDb250ZW50ICE9IG51bGwgPyBudWxsIDogbGFzdFByb3BzLmNoaWxkcmVuO1xuICAgIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0Q29udGVudCAhPSBudWxsID8gbnVsbCA6IG5leHRQcm9wcy5jaGlsZHJlbjtcblxuICAgIC8vIElmIHdlJ3JlIHN3aXRjaGluZyBmcm9tIGNoaWxkcmVuIHRvIGNvbnRlbnQvaHRtbCBvciB2aWNlIHZlcnNhLCByZW1vdmVcbiAgICAvLyB0aGUgb2xkIGNvbnRlbnRcbiAgICB2YXIgbGFzdEhhc0NvbnRlbnRPckh0bWwgPSBsYXN0Q29udGVudCAhPSBudWxsIHx8IGxhc3RIdG1sICE9IG51bGw7XG4gICAgdmFyIG5leHRIYXNDb250ZW50T3JIdG1sID0gbmV4dENvbnRlbnQgIT0gbnVsbCB8fCBuZXh0SHRtbCAhPSBudWxsO1xuICAgIGlmIChsYXN0Q2hpbGRyZW4gIT0gbnVsbCAmJiBuZXh0Q2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbihudWxsLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfSBlbHNlIGlmIChsYXN0SGFzQ29udGVudE9ySHRtbCAmJiAhbmV4dEhhc0NvbnRlbnRPckh0bWwpIHtcbiAgICAgIHRoaXMudXBkYXRlVGV4dENvbnRlbnQoJycpO1xuICAgIH1cblxuICAgIGlmIChuZXh0Q29udGVudCAhPSBudWxsKSB7XG4gICAgICBpZiAobGFzdENvbnRlbnQgIT09IG5leHRDb250ZW50KSB7XG4gICAgICAgIHRoaXMudXBkYXRlVGV4dENvbnRlbnQoJycgKyBuZXh0Q29udGVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0SHRtbCAhPSBudWxsKSB7XG4gICAgICBpZiAobGFzdEh0bWwgIT09IG5leHRIdG1sKSB7XG4gICAgICAgIEJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlSW5uZXJIVE1MQnlJRChcbiAgICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICAgIG5leHRIdG1sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0Q2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbihuZXh0Q2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFsbCBldmVudCByZWdpc3RyYXRpb25zIGZvciB0aGlzIGluc3RhbmNlLiBEb2VzIG5vdCByZW1vdmUgZnJvbVxuICAgKiB0aGUgRE9NLiBUaGF0IG11c3QgYmUgZG9uZSBieSB0aGUgcGFyZW50LlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudW5tb3VudENoaWxkcmVuKCk7XG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmRlbGV0ZUFsbExpc3RlbmVycyh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gIH1cblxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKFJlYWN0RE9NQ29tcG9uZW50LCAnUmVhY3RET01Db21wb25lbnQnLCB7XG4gIG1vdW50Q29tcG9uZW50OiAnbW91bnRDb21wb25lbnQnLFxuICB1cGRhdGVDb21wb25lbnQ6ICd1cGRhdGVDb21wb25lbnQnXG59KTtcblxuYXNzaWduKFxuICBSZWFjdERPTUNvbXBvbmVudC5wcm90b3R5cGUsXG4gIFJlYWN0RE9NQ29tcG9uZW50Lk1peGluLFxuICBSZWFjdE11bHRpQ2hpbGQuTWl4aW5cbik7XG5cblJlYWN0RE9NQ29tcG9uZW50LmluamVjdGlvbiA9IHtcbiAgaW5qZWN0SURPcGVyYXRpb25zOiBmdW5jdGlvbihJRE9wZXJhdGlvbnMpIHtcbiAgICBSZWFjdERPTUNvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zID0gQmFja2VuZElET3BlcmF0aW9ucyA9IElET3BlcmF0aW9ucztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUNvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQ1NTUHJvcGVydHlPcGVyYXRpb25zXCI6MTUyLFwiLi9ET01Qcm9wZXJ0eVwiOjE1NyxcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCI6MTU4LFwiLi9PYmplY3QuYXNzaWduXCI6MTc1LFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIjoxNzksXCIuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50XCI6MTg2LFwiLi9SZWFjdE1vdW50XCI6MjIzLFwiLi9SZWFjdE11bHRpQ2hpbGRcIjoyMjQsXCIuL1JlYWN0UGVyZlwiOjIyOCxcIi4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyXCI6Mjc4LFwiLi9pbnZhcmlhbnRcIjoyOTcsXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIjoyOTgsXCIuL2tleU9mXCI6MzA0LFwiLi93YXJuaW5nXCI6MzE4LFwiX3Byb2Nlc3NcIjoxfV0sMTk1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUZvcm1cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIExvY2FsRXZlbnRUcmFwTWl4aW4gPSByZXF1aXJlKFwiLi9Mb2NhbEV2ZW50VHJhcE1peGluXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgZm9ybSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KCdmb3JtJyk7XG5cbi8qKlxuICogU2luY2Ugb25TdWJtaXQgZG9lc24ndCBidWJibGUgT1IgY2FwdHVyZSBvbiB0aGUgdG9wIGxldmVsIGluIElFOCwgd2UgbmVlZFxuICogdG8gY2FwdHVyZSBpdCBvbiB0aGUgPGZvcm0+IGVsZW1lbnQgaXRzZWxmLiBUaGVyZSBhcmUgbG90cyBvZiBoYWNrcyB3ZSBjb3VsZFxuICogZG8gdG8gYWNjb21wbGlzaCB0aGlzLCBidXQgdGhlIG1vc3QgcmVsaWFibGUgaXMgdG8gbWFrZSA8Zm9ybT4gYVxuICogY29tcG9zaXRlIGNvbXBvbmVudCBhbmQgdXNlIGBjb21wb25lbnREaWRNb3VudGAgdG8gYXR0YWNoIHRoZSBldmVudCBoYW5kbGVycy5cbiAqL1xudmFyIFJlYWN0RE9NRm9ybSA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NRm9ybScsXG4gIHRhZ05hbWU6ICdGT1JNJyxcblxuICBtaXhpbnM6IFtSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiwgTG9jYWxFdmVudFRyYXBNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAvLyBUT0RPOiBJbnN0ZWFkIG9mIHVzaW5nIGBSZWFjdERPTWAgZGlyZWN0bHksIHdlIHNob3VsZCB1c2UgSlNYLiBIb3dldmVyLFxuICAgIC8vIGBqc2hpbnRgIGZhaWxzIHRvIHBhcnNlIEpTWCBzbyBpbiBvcmRlciBmb3IgbGludGluZyB0byB3b3JrIGluIHRoZSBvcGVuXG4gICAgLy8gc291cmNlIHJlcG8sIHdlIG5lZWQgdG8ganVzdCB1c2UgYFJlYWN0RE9NLmZvcm1gLlxuICAgIHJldHVybiBmb3JtKHRoaXMucHJvcHMpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BSZXNldCwgJ3Jlc2V0Jyk7XG4gICAgdGhpcy50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wU3VibWl0LCAnc3VibWl0Jyk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NRm9ybTtcblxufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6MTYyLFwiLi9Mb2NhbEV2ZW50VHJhcE1peGluXCI6MTczLFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiOjE3OCxcIi4vUmVhY3RDbGFzc1wiOjE4NCxcIi4vUmVhY3RFbGVtZW50XCI6MjA5fV0sMTk2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01JRE9wZXJhdGlvbnNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgRE9NQ2hpbGRyZW5PcGVyYXRpb25zID0gcmVxdWlyZShcIi4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zXCIpO1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdFBlcmZcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgc2V0SW5uZXJIVE1MID0gcmVxdWlyZShcIi4vc2V0SW5uZXJIVE1MXCIpO1xuXG4vKipcbiAqIEVycm9ycyBmb3IgcHJvcGVydGllcyB0aGF0IHNob3VsZCBub3QgYmUgdXBkYXRlZCB3aXRoIGB1cGRhdGVQcm9wZXJ0eUJ5SWQoKWAuXG4gKlxuICogQHR5cGUge29iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBJTlZBTElEX1BST1BFUlRZX0VSUk9SUyA9IHtcbiAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6XG4gICAgJ2BkYW5nZXJvdXNseVNldElubmVySFRNTGAgbXVzdCBiZSBzZXQgdXNpbmcgYHVwZGF0ZUlubmVySFRNTEJ5SUQoKWAuJyxcbiAgc3R5bGU6ICdgc3R5bGVgIG11c3QgYmUgc2V0IHVzaW5nIGB1cGRhdGVTdHlsZXNCeUlEKClgLidcbn07XG5cbi8qKlxuICogT3BlcmF0aW9ucyB1c2VkIHRvIHByb2Nlc3MgdXBkYXRlcyB0byBET00gbm9kZXMuIFRoaXMgaXMgbWFkZSBpbmplY3RhYmxlIHZpYVxuICogYFJlYWN0RE9NQ29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnNgLlxuICovXG52YXIgUmVhY3RET01JRE9wZXJhdGlvbnMgPSB7XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBET00gbm9kZSB3aXRoIG5ldyBwcm9wZXJ0eSB2YWx1ZXMuIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCB0b1xuICAgKiB1cGRhdGUgRE9NIHByb3BlcnRpZXMgaW4gYERPTVByb3BlcnR5YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSB2YWxpZCBwcm9wZXJ0eSBuYW1lLCBzZWUgYERPTVByb3BlcnR5YC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBOZXcgdmFsdWUgb2YgdGhlIHByb3BlcnR5LlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVwZGF0ZVByb3BlcnR5QnlJRDogZnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaWQpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAhSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSksXG4gICAgICAndXBkYXRlUHJvcGVydHlCeUlEKC4uLik6ICVzJyxcbiAgICAgIElOVkFMSURfUFJPUEVSVFlfRVJST1JTW25hbWVdXG4gICAgKSA6IGludmFyaWFudCghSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSkpKTtcblxuICAgIC8vIElmIHdlJ3JlIHVwZGF0aW5nIHRvIG51bGwgb3IgdW5kZWZpbmVkLCB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBwcm9wZXJ0eVxuICAgIC8vIGZyb20gdGhlIERPTSBub2RlIGluc3RlYWQgb2YgaW5hZHZlcnRhbnRseSBzZXR0aW5nIHRvIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gYnJpbmdzIHVzIGluIGxpbmUgd2l0aCB0aGUgc2FtZSBiZWhhdmlvciB3ZSBoYXZlIG9uIGluaXRpYWwgcmVuZGVyLlxuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIERPTSBub2RlIHRvIHJlbW92ZSBhIHByb3BlcnR5LiBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgdG8gcmVtb3ZlXG4gICAqIERPTSBwcm9wZXJ0aWVzIGluIGBET01Qcm9wZXJ0eWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgbm9kZSB0byB1cGRhdGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgcHJvcGVydHkgbmFtZSB0byByZW1vdmUsIHNlZSBgRE9NUHJvcGVydHlgLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGRlbGV0ZVByb3BlcnR5QnlJRDogZnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaWQpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAhSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSksXG4gICAgICAndXBkYXRlUHJvcGVydHlCeUlEKC4uLik6ICVzJyxcbiAgICAgIElOVkFMSURfUFJPUEVSVFlfRVJST1JTW25hbWVdXG4gICAgKSA6IGludmFyaWFudCghSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSkpKTtcbiAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lLCB2YWx1ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBET00gbm9kZSB3aXRoIG5ldyBzdHlsZSB2YWx1ZXMuIElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkIGFzICcnLFxuICAgKiB0aGUgY29ycmVzcG9uZGluZyBzdHlsZSBwcm9wZXJ0eSB3aWxsIGJlIHVuc2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIG5vZGUgdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzIE1hcHBpbmcgZnJvbSBzdHlsZXMgdG8gdmFsdWVzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVwZGF0ZVN0eWxlc0J5SUQ6IGZ1bmN0aW9uKGlkLCBzdHlsZXMpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgQ1NTUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yU3R5bGVzKG5vZGUsIHN0eWxlcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBET00gbm9kZSdzIGlubmVySFRNTC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGh0bWwgQW4gSFRNTCBzdHJpbmcuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlSW5uZXJIVE1MQnlJRDogZnVuY3Rpb24oaWQsIGh0bWwpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgc2V0SW5uZXJIVE1MKG5vZGUsIGh0bWwpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUncyB0ZXh0IGNvbnRlbnQgc2V0IGJ5IGBwcm9wcy5jb250ZW50YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgVGV4dCBjb250ZW50LlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVwZGF0ZVRleHRDb250ZW50QnlJRDogZnVuY3Rpb24oaWQsIGNvbnRlbnQpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLnVwZGF0ZVRleHRDb250ZW50KG5vZGUsIGNvbnRlbnQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhIERPTSBub2RlIHRoYXQgZXhpc3RzIGluIHRoZSBkb2N1bWVudCB3aXRoIG1hcmt1cC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIGNoaWxkIHRvIGJlIHJlcGxhY2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIERhbmdlcm91cyBtYXJrdXAgdG8gaW5qZWN0IGluIHBsYWNlIG9mIGNoaWxkLlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHNlZSB7RGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwfVxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOiBmdW5jdGlvbihpZCwgbWFya3VwKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaWQpO1xuICAgIERPTUNoaWxkcmVuT3BlcmF0aW9ucy5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cChub2RlLCBtYXJrdXApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgY29tcG9uZW50J3MgY2hpbGRyZW4gYnkgcHJvY2Vzc2luZyBhIHNlcmllcyBvZiB1cGRhdGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5PG9iamVjdD59IHVwZGF0ZXMgTGlzdCBvZiB1cGRhdGUgY29uZmlndXJhdGlvbnMuXG4gICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gbWFya3VwIExpc3Qgb2YgbWFya3VwIHN0cmluZ3MuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBmdW5jdGlvbih1cGRhdGVzLCBtYXJrdXApIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVwZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHVwZGF0ZXNbaV0ucGFyZW50Tm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZSh1cGRhdGVzW2ldLnBhcmVudElEKTtcbiAgICB9XG4gICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLnByb2Nlc3NVcGRhdGVzKHVwZGF0ZXMsIG1hcmt1cCk7XG4gIH1cbn07XG5cblJlYWN0UGVyZi5tZWFzdXJlTWV0aG9kcyhSZWFjdERPTUlET3BlcmF0aW9ucywgJ1JlYWN0RE9NSURPcGVyYXRpb25zJywge1xuICB1cGRhdGVQcm9wZXJ0eUJ5SUQ6ICd1cGRhdGVQcm9wZXJ0eUJ5SUQnLFxuICBkZWxldGVQcm9wZXJ0eUJ5SUQ6ICdkZWxldGVQcm9wZXJ0eUJ5SUQnLFxuICB1cGRhdGVTdHlsZXNCeUlEOiAndXBkYXRlU3R5bGVzQnlJRCcsXG4gIHVwZGF0ZUlubmVySFRNTEJ5SUQ6ICd1cGRhdGVJbm5lckhUTUxCeUlEJyxcbiAgdXBkYXRlVGV4dENvbnRlbnRCeUlEOiAndXBkYXRlVGV4dENvbnRlbnRCeUlEJyxcbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOiAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEJyxcbiAgZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiAnZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzJ1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JRE9wZXJhdGlvbnM7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0NTU1Byb3BlcnR5T3BlcmF0aW9uc1wiOjE1MixcIi4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zXCI6MTU2LFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIjoxNTgsXCIuL1JlYWN0TW91bnRcIjoyMjMsXCIuL1JlYWN0UGVyZlwiOjIyOCxcIi4vaW52YXJpYW50XCI6Mjk3LFwiLi9zZXRJbm5lckhUTUxcIjozMTEsXCJfcHJvY2Vzc1wiOjF9XSwxOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NSWZyYW1lXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBMb2NhbEV2ZW50VHJhcE1peGluID0gcmVxdWlyZShcIi4vTG9jYWxFdmVudFRyYXBNaXhpblwiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIGlmcmFtZSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KCdpZnJhbWUnKTtcblxuLyoqXG4gKiBTaW5jZSBvbkxvYWQgZG9lc24ndCBidWJibGUgT1IgY2FwdHVyZSBvbiB0aGUgdG9wIGxldmVsIGluIElFOCwgd2UgbmVlZCB0b1xuICogY2FwdHVyZSBpdCBvbiB0aGUgPGlmcmFtZT4gZWxlbWVudCBpdHNlbGYuIFRoZXJlIGFyZSBsb3RzIG9mIGhhY2tzIHdlIGNvdWxkXG4gKiBkbyB0byBhY2NvbXBsaXNoIHRoaXMsIGJ1dCB0aGUgbW9zdCByZWxpYWJsZSBpcyB0byBtYWtlIDxpZnJhbWU+IGEgY29tcG9zaXRlXG4gKiBjb21wb25lbnQgYW5kIHVzZSBgY29tcG9uZW50RGlkTW91bnRgIHRvIGF0dGFjaCB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gKi9cbnZhciBSZWFjdERPTUlmcmFtZSA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NSWZyYW1lJyxcbiAgdGFnTmFtZTogJ0lGUkFNRScsXG5cbiAgbWl4aW5zOiBbUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4sIExvY2FsRXZlbnRUcmFwTWl4aW5dLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlmcmFtZSh0aGlzLnByb3BzKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wTG9hZCwgJ2xvYWQnKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JZnJhbWU7XG5cbn0se1wiLi9FdmVudENvbnN0YW50c1wiOjE2MixcIi4vTG9jYWxFdmVudFRyYXBNaXhpblwiOjE3MyxcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIjoxNzgsXCIuL1JlYWN0Q2xhc3NcIjoxODQsXCIuL1JlYWN0RWxlbWVudFwiOjIwOX1dLDE5ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01JbWdcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIExvY2FsRXZlbnRUcmFwTWl4aW4gPSByZXF1aXJlKFwiLi9Mb2NhbEV2ZW50VHJhcE1peGluXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgaW1nID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoJ2ltZycpO1xuXG4vKipcbiAqIFNpbmNlIG9uTG9hZCBkb2Vzbid0IGJ1YmJsZSBPUiBjYXB0dXJlIG9uIHRoZSB0b3AgbGV2ZWwgaW4gSUU4LCB3ZSBuZWVkIHRvXG4gKiBjYXB0dXJlIGl0IG9uIHRoZSA8aW1nPiBlbGVtZW50IGl0c2VsZi4gVGhlcmUgYXJlIGxvdHMgb2YgaGFja3Mgd2UgY291bGQgZG9cbiAqIHRvIGFjY29tcGxpc2ggdGhpcywgYnV0IHRoZSBtb3N0IHJlbGlhYmxlIGlzIHRvIG1ha2UgPGltZz4gYSBjb21wb3NpdGVcbiAqIGNvbXBvbmVudCBhbmQgdXNlIGBjb21wb25lbnREaWRNb3VudGAgdG8gYXR0YWNoIHRoZSBldmVudCBoYW5kbGVycy5cbiAqL1xudmFyIFJlYWN0RE9NSW1nID0gUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01JbWcnLFxuICB0YWdOYW1lOiAnSU1HJyxcblxuICBtaXhpbnM6IFtSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiwgTG9jYWxFdmVudFRyYXBNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaW1nKHRoaXMucHJvcHMpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BMb2FkLCAnbG9hZCcpO1xuICAgIHRoaXMudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcEVycm9yLCAnZXJyb3InKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JbWc7XG5cbn0se1wiLi9FdmVudENvbnN0YW50c1wiOjE2MixcIi4vTG9jYWxFdmVudFRyYXBNaXhpblwiOjE3MyxcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIjoxNzgsXCIuL1JlYWN0Q2xhc3NcIjoxODQsXCIuL1JlYWN0RWxlbWVudFwiOjIwOX1dLDE5OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NSW5wdXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBdXRvRm9jdXNNaXhpbiA9IHJlcXVpcmUoXCIuL0F1dG9Gb2N1c01peGluXCIpO1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiKTtcbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0gcmVxdWlyZShcIi4vTGlua2VkVmFsdWVVdGlsc1wiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIGlucHV0ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoJ2lucHV0Jyk7XG5cbnZhciBpbnN0YW5jZXNCeVJlYWN0SUQgPSB7fTtcblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIGlmICh0aGlzLmlzTW91bnRlZCgpKSB7XG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8aW5wdXQ+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyB0aGVzZSBvcHRpb25hbFxuICogcHJvcHM6IGBjaGVja2VkYCwgYHZhbHVlYCwgYGRlZmF1bHRDaGVja2VkYCwgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICpcbiAqIElmIGBjaGVja2VkYCBvciBgdmFsdWVgIGFyZSBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zXG4gKiB0aGF0IGFmZmVjdCB0aGUgY2hlY2tlZCBzdGF0ZSBvciB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiB0aGV5IGFyZSBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgbm90XG4gKiB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBwcm9wcyBtdXN0IGNoYW5nZSBpbiBvcmRlciBmb3JcbiAqIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCBhcyB1bmNoZWNrZWQgKG9yIGBkZWZhdWx0Q2hlY2tlZGApXG4gKiB3aXRoIGFuIGVtcHR5IHZhbHVlIChvciBgZGVmYXVsdFZhbHVlYCkuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEyL1dELWh0bWw1LTIwMTIxMDI1L3RoZS1pbnB1dC1lbGVtZW50Lmh0bWxcbiAqL1xudmFyIFJlYWN0RE9NSW5wdXQgPSBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdERPTUlucHV0JyxcbiAgdGFnTmFtZTogJ0lOUFVUJyxcblxuICBtaXhpbnM6IFtBdXRvRm9jdXNNaXhpbiwgTGlua2VkVmFsdWVVdGlscy5NaXhpbiwgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5dLFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICBpbml0aWFsQ2hlY2tlZDogdGhpcy5wcm9wcy5kZWZhdWx0Q2hlY2tlZCB8fCBmYWxzZSxcbiAgICAgIGluaXRpYWxWYWx1ZTogZGVmYXVsdFZhbHVlICE9IG51bGwgPyBkZWZhdWx0VmFsdWUgOiBudWxsXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIC8vIENsb25lIGB0aGlzLnByb3BzYCBzbyB3ZSBkb24ndCBtdXRhdGUgdGhlIGlucHV0LlxuICAgIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG5cbiAgICBwcm9wcy5kZWZhdWx0Q2hlY2tlZCA9IG51bGw7XG4gICAgcHJvcHMuZGVmYXVsdFZhbHVlID0gbnVsbDtcblxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgcHJvcHMudmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiB0aGlzLnN0YXRlLmluaXRpYWxWYWx1ZTtcblxuICAgIHZhciBjaGVja2VkID0gTGlua2VkVmFsdWVVdGlscy5nZXRDaGVja2VkKHRoaXMpO1xuICAgIHByb3BzLmNoZWNrZWQgPSBjaGVja2VkICE9IG51bGwgPyBjaGVja2VkIDogdGhpcy5zdGF0ZS5pbml0aWFsQ2hlY2tlZDtcblxuICAgIHByb3BzLm9uQ2hhbmdlID0gdGhpcy5faGFuZGxlQ2hhbmdlO1xuXG4gICAgcmV0dXJuIGlucHV0KHByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlkID0gUmVhY3RNb3VudC5nZXRJRCh0aGlzLmdldERPTU5vZGUoKSk7XG4gICAgaW5zdGFuY2VzQnlSZWFjdElEW2lkXSA9IHRoaXM7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciByb290Tm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuICAgIHZhciBpZCA9IFJlYWN0TW91bnQuZ2V0SUQocm9vdE5vZGUpO1xuICAgIGRlbGV0ZSBpbnN0YW5jZXNCeVJlYWN0SURbaWRdO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24ocHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KSB7XG4gICAgdmFyIHJvb3ROb2RlID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgaWYgKHRoaXMucHJvcHMuY2hlY2tlZCAhPSBudWxsKSB7XG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShcbiAgICAgICAgcm9vdE5vZGUsXG4gICAgICAgICdjaGVja2VkJyxcbiAgICAgICAgdGhpcy5wcm9wcy5jaGVja2VkIHx8IGZhbHNlXG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIC8vIENhc3QgYHZhbHVlYCB0byBhIHN0cmluZyB0byBlbnN1cmUgdGhlIHZhbHVlIGlzIHNldCBjb3JyZWN0bHkuIFdoaWxlXG4gICAgICAvLyBicm93c2VycyB0eXBpY2FsbHkgZG8gdGhpcyBhcyBuZWNlc3NhcnksIGpzZG9tIGRvZXNuJ3QuXG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShyb290Tm9kZSwgJ3ZhbHVlJywgJycgKyB2YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJldHVyblZhbHVlO1xuICAgIHZhciBvbkNoYW5nZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0T25DaGFuZ2UodGhpcyk7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IG9uQ2hhbmdlLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgICAvLyBIZXJlIHdlIHVzZSBhc2FwIHRvIHdhaXQgdW50aWwgYWxsIHVwZGF0ZXMgaGF2ZSBwcm9wYWdhdGVkLCB3aGljaFxuICAgIC8vIGlzIGltcG9ydGFudCB3aGVuIHVzaW5nIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3aXRoaW4gbGF5ZXJzOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTY5OFxuICAgIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcblxuICAgIHZhciBuYW1lID0gdGhpcy5wcm9wcy5uYW1lO1xuICAgIGlmICh0aGlzLnByb3BzLnR5cGUgPT09ICdyYWRpbycgJiYgbmFtZSAhPSBudWxsKSB7XG4gICAgICB2YXIgcm9vdE5vZGUgPSB0aGlzLmdldERPTU5vZGUoKTtcbiAgICAgIHZhciBxdWVyeVJvb3QgPSByb290Tm9kZTtcblxuICAgICAgd2hpbGUgKHF1ZXJ5Um9vdC5wYXJlbnROb2RlKSB7XG4gICAgICAgIHF1ZXJ5Um9vdCA9IHF1ZXJ5Um9vdC5wYXJlbnROb2RlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBgcm9vdE5vZGUuZm9ybWAgd2FzIG5vbi1udWxsLCB0aGVuIHdlIGNvdWxkIHRyeSBgZm9ybS5lbGVtZW50c2AsXG4gICAgICAvLyBidXQgdGhhdCBzb21ldGltZXMgYmVoYXZlcyBzdHJhbmdlbHkgaW4gSUU4LiBXZSBjb3VsZCBhbHNvIHRyeSB1c2luZ1xuICAgICAgLy8gYGZvcm0uZ2V0RWxlbWVudHNCeU5hbWVgLCBidXQgdGhhdCB3aWxsIG9ubHkgcmV0dXJuIGRpcmVjdCBjaGlsZHJlblxuICAgICAgLy8gYW5kIHdvbid0IGluY2x1ZGUgaW5wdXRzIHRoYXQgdXNlIHRoZSBIVE1MNSBgZm9ybT1gIGF0dHJpYnV0ZS4gU2luY2VcbiAgICAgIC8vIHRoZSBpbnB1dCBtaWdodCBub3QgZXZlbiBiZSBpbiBhIGZvcm0sIGxldCdzIGp1c3QgdXNlIHRoZSBnbG9iYWxcbiAgICAgIC8vIGBxdWVyeVNlbGVjdG9yQWxsYCB0byBlbnN1cmUgd2UgZG9uJ3QgbWlzcyBhbnl0aGluZy5cbiAgICAgIHZhciBncm91cCA9IHF1ZXJ5Um9vdC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAnaW5wdXRbbmFtZT0nICsgSlNPTi5zdHJpbmdpZnkoJycgKyBuYW1lKSArICddW3R5cGU9XCJyYWRpb1wiXScpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgZ3JvdXBMZW4gPSBncm91cC5sZW5ndGg7IGkgPCBncm91cExlbjsgaSsrKSB7XG4gICAgICAgIHZhciBvdGhlck5vZGUgPSBncm91cFtpXTtcbiAgICAgICAgaWYgKG90aGVyTm9kZSA9PT0gcm9vdE5vZGUgfHxcbiAgICAgICAgICAgIG90aGVyTm9kZS5mb3JtICE9PSByb290Tm9kZS5mb3JtKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG90aGVySUQgPSBSZWFjdE1vdW50LmdldElEKG90aGVyTm9kZSk7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgb3RoZXJJRCxcbiAgICAgICAgICAnUmVhY3RET01JbnB1dDogTWl4aW5nIFJlYWN0IGFuZCBub24tUmVhY3QgcmFkaW8gaW5wdXRzIHdpdGggdGhlICcgK1xuICAgICAgICAgICdzYW1lIGBuYW1lYCBpcyBub3Qgc3VwcG9ydGVkLidcbiAgICAgICAgKSA6IGludmFyaWFudChvdGhlcklEKSk7XG4gICAgICAgIHZhciBvdGhlckluc3RhbmNlID0gaW5zdGFuY2VzQnlSZWFjdElEW290aGVySURdO1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIG90aGVySW5zdGFuY2UsXG4gICAgICAgICAgJ1JlYWN0RE9NSW5wdXQ6IFVua25vd24gcmFkaW8gYnV0dG9uIElEICVzLicsXG4gICAgICAgICAgb3RoZXJJRFxuICAgICAgICApIDogaW52YXJpYW50KG90aGVySW5zdGFuY2UpKTtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIGNvbnRyb2xsZWQgcmFkaW8gYnV0dG9uIGdyb3VwLCBmb3JjaW5nIHRoZSBpbnB1dCB0aGF0XG4gICAgICAgIC8vIHdhcyBwcmV2aW91c2x5IGNoZWNrZWQgdG8gdXBkYXRlIHdpbGwgY2F1c2UgaXQgdG8gYmUgY29tZSByZS1jaGVja2VkXG4gICAgICAgIC8vIGFzIGFwcHJvcHJpYXRlLlxuICAgICAgICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgb3RoZXJJbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSW5wdXQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0F1dG9Gb2N1c01peGluXCI6MTQ4LFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIjoxNTgsXCIuL0xpbmtlZFZhbHVlVXRpbHNcIjoxNzIsXCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCI6MTc4LFwiLi9SZWFjdENsYXNzXCI6MTg0LFwiLi9SZWFjdEVsZW1lbnRcIjoyMDksXCIuL1JlYWN0TW91bnRcIjoyMjMsXCIuL1JlYWN0VXBkYXRlc1wiOjI0NixcIi4vaW52YXJpYW50XCI6Mjk3LFwiX3Byb2Nlc3NcIjoxfV0sMjAwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01PcHRpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgb3B0aW9uID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoJ29wdGlvbicpO1xuXG4vKipcbiAqIEltcGxlbWVudHMgYW4gPG9wdGlvbj4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IHdhcm5zIHdoZW4gYHNlbGVjdGVkYCBpcyBzZXQuXG4gKi9cbnZhciBSZWFjdERPTU9wdGlvbiA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NT3B0aW9uJyxcbiAgdGFnTmFtZTogJ09QVElPTicsXG5cbiAgbWl4aW5zOiBbUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5dLFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgLy8gVE9ETyAoeXVuZ3N0ZXJzKTogUmVtb3ZlIHN1cHBvcnQgZm9yIGBzZWxlY3RlZGAgaW4gPG9wdGlvbj4uXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIHRoaXMucHJvcHMuc2VsZWN0ZWQgPT0gbnVsbCxcbiAgICAgICAgJ1VzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3IgYHZhbHVlYCBwcm9wcyBvbiA8c2VsZWN0PiBpbnN0ZWFkIG9mICcgK1xuICAgICAgICAnc2V0dGluZyBgc2VsZWN0ZWRgIG9uIDxvcHRpb24+LidcbiAgICAgICkgOiBudWxsKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3B0aW9uKHRoaXMucHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NT3B0aW9uO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiOjE3OCxcIi4vUmVhY3RDbGFzc1wiOjE4NCxcIi4vUmVhY3RFbGVtZW50XCI6MjA5LFwiLi93YXJuaW5nXCI6MzE4LFwiX3Byb2Nlc3NcIjoxfV0sMjAxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVNlbGVjdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEF1dG9Gb2N1c01peGluID0gcmVxdWlyZShcIi4vQXV0b0ZvY3VzTWl4aW5cIik7XG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoXCIuL0xpbmtlZFZhbHVlVXRpbHNcIik7XG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENsYXNzID0gcmVxdWlyZShcIi4vUmVhY3RDbGFzc1wiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxudmFyIHNlbGVjdCA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KCdzZWxlY3QnKTtcblxuZnVuY3Rpb24gdXBkYXRlT3B0aW9uc0lmUGVuZGluZ1VwZGF0ZUFuZE1vdW50ZWQoKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIGlmICh0aGlzLl9wZW5kaW5nVXBkYXRlKSB7XG4gICAgdGhpcy5fcGVuZGluZ1VwZGF0ZSA9IGZhbHNlO1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdGhpcy5pc01vdW50ZWQoKSkge1xuICAgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmFsaWRhdGlvbiBmdW5jdGlvbiBmb3IgYHZhbHVlYCBhbmQgYGRlZmF1bHRWYWx1ZWAuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZWxlY3RWYWx1ZVR5cGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChwcm9wcy5tdWx0aXBsZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJUaGUgYFwiICsgcHJvcE5hbWUgKyBcImAgcHJvcCBzdXBwbGllZCB0byA8c2VsZWN0PiBtdXN0IGJlIGFuIGFycmF5IGlmIFwiKSArXG4gICAgICAgIChcImBtdWx0aXBsZWAgaXMgdHJ1ZS5cIilcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIlRoZSBgXCIgKyBwcm9wTmFtZSArIFwiYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYSBzY2FsYXIgXCIpICtcbiAgICAgICAgKFwidmFsdWUgaWYgYG11bHRpcGxlYCBpcyBmYWxzZS5cIilcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IEluc3RhbmNlIG9mIFJlYWN0RE9NU2VsZWN0XG4gKiBAcGFyYW0geyp9IHByb3BWYWx1ZSBBIHN0cmluZ2FibGUgKHdpdGggYG11bHRpcGxlYCwgYSBsaXN0IG9mIHN0cmluZ2FibGVzKS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMoY29tcG9uZW50LCBwcm9wVmFsdWUpIHtcbiAgdmFyIHNlbGVjdGVkVmFsdWUsIGksIGw7XG4gIHZhciBvcHRpb25zID0gY29tcG9uZW50LmdldERPTU5vZGUoKS5vcHRpb25zO1xuXG4gIGlmIChjb21wb25lbnQucHJvcHMubXVsdGlwbGUpIHtcbiAgICBzZWxlY3RlZFZhbHVlID0ge307XG4gICAgZm9yIChpID0gMCwgbCA9IHByb3BWYWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHNlbGVjdGVkVmFsdWVbJycgKyBwcm9wVmFsdWVbaV1dID0gdHJ1ZTtcbiAgICB9XG4gICAgZm9yIChpID0gMCwgbCA9IG9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBzZWxlY3RlZFZhbHVlLmhhc093blByb3BlcnR5KG9wdGlvbnNbaV0udmFsdWUpO1xuICAgICAgaWYgKG9wdGlvbnNbaV0uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbnNbaV0uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRG8gbm90IHNldCBgc2VsZWN0LnZhbHVlYCBhcyBleGFjdCBiZWhhdmlvciBpc24ndCBjb25zaXN0ZW50IGFjcm9zcyBhbGxcbiAgICAvLyBicm93c2VycyBmb3IgYWxsIGNhc2VzLlxuICAgIHNlbGVjdGVkVmFsdWUgPSAnJyArIHByb3BWYWx1ZTtcbiAgICBmb3IgKGkgPSAwLCBsID0gb3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChvcHRpb25zW2ldLnZhbHVlID09PSBzZWxlY3RlZFZhbHVlKSB7XG4gICAgICAgIG9wdGlvbnNbaV0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmxlbmd0aCkge1xuICAgICAgb3B0aW9uc1swXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIDxzZWxlY3Q+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBhbGxvd3Mgb3B0aW9uYWxseSBzZXR0aW5nIHRoZVxuICogcHJvcHMgYHZhbHVlYCBhbmQgYGRlZmF1bHRWYWx1ZWAuIElmIGBtdWx0aXBsZWAgaXMgZmFsc2UsIHRoZSBwcm9wIG11c3QgYmUgYVxuICogc3RyaW5nYWJsZS4gSWYgYG11bHRpcGxlYCBpcyB0cnVlLCB0aGUgcHJvcCBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ2FibGVzLlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9ucyB0aGF0IGNoYW5nZSB0aGVcbiAqIHNlbGVjdGVkIG9wdGlvbiB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAqXG4gKiBJZiBpdCBpcyBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBvcHRpb25zIHdpbGwgbm90XG4gKiB1cGRhdGUgaW4gcmVzcG9uc2UgdG8gdXNlciBhY3Rpb25zLiBJbnN0ZWFkLCB0aGUgYHZhbHVlYCBwcm9wIG11c3QgY2hhbmdlIGluXG4gKiBvcmRlciBmb3IgdGhlIHJlbmRlcmVkIG9wdGlvbnMgdG8gdXBkYXRlLlxuICpcbiAqIElmIGBkZWZhdWx0VmFsdWVgIGlzIHByb3ZpZGVkLCBhbnkgb3B0aW9ucyB3aXRoIHRoZSBzdXBwbGllZCB2YWx1ZXMgd2lsbCBiZVxuICogc2VsZWN0ZWQuXG4gKi9cbnZhciBSZWFjdERPTVNlbGVjdCA9IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NU2VsZWN0JyxcbiAgdGFnTmFtZTogJ1NFTEVDVCcsXG5cbiAgbWl4aW5zOiBbQXV0b0ZvY3VzTWl4aW4sIExpbmtlZFZhbHVlVXRpbHMuTWl4aW4sIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBkZWZhdWx0VmFsdWU6IHNlbGVjdFZhbHVlVHlwZSxcbiAgICB2YWx1ZTogc2VsZWN0VmFsdWVUeXBlXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAvLyBDbG9uZSBgdGhpcy5wcm9wc2Agc28gd2UgZG9uJ3QgbXV0YXRlIHRoZSBpbnB1dC5cbiAgICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIHRoaXMucHJvcHMpO1xuXG4gICAgcHJvcHMub25DaGFuZ2UgPSB0aGlzLl9oYW5kbGVDaGFuZ2U7XG4gICAgcHJvcHMudmFsdWUgPSBudWxsO1xuXG4gICAgcmV0dXJuIHNlbGVjdChwcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wZW5kaW5nVXBkYXRlID0gZmFsc2U7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fcGVuZGluZ1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICghcHJldlByb3BzLm11bHRpcGxlICE9PSAhdGhpcy5wcm9wcy5tdWx0aXBsZSkge1xuICAgICAgLy8gRm9yIHNpbXBsaWNpdHksIHJlYXBwbHkgYGRlZmF1bHRWYWx1ZWAgaWYgYG11bHRpcGxlYCBpcyB0b2dnbGVkLlxuICAgICAgaWYgKHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXZlcnQgdGhlIHNlbGVjdCBiYWNrIHRvIGl0cyBkZWZhdWx0IHVuc2VsZWN0ZWQgc3RhdGUuXG4gICAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgdGhpcy5wcm9wcy5tdWx0aXBsZSA/IFtdIDogJycpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlQ2hhbmdlOiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZXR1cm5WYWx1ZTtcbiAgICB2YXIgb25DaGFuZ2UgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldE9uQ2hhbmdlKHRoaXMpO1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgcmV0dXJuVmFsdWUgPSBvbkNoYW5nZS5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLl9wZW5kaW5nVXBkYXRlID0gdHJ1ZTtcbiAgICBSZWFjdFVwZGF0ZXMuYXNhcCh1cGRhdGVPcHRpb25zSWZQZW5kaW5nVXBkYXRlQW5kTW91bnRlZCwgdGhpcyk7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NU2VsZWN0O1xuXG59LHtcIi4vQXV0b0ZvY3VzTWl4aW5cIjoxNDgsXCIuL0xpbmtlZFZhbHVlVXRpbHNcIjoxNzIsXCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCI6MTc4LFwiLi9SZWFjdENsYXNzXCI6MTg0LFwiLi9SZWFjdEVsZW1lbnRcIjoyMDksXCIuL1JlYWN0VXBkYXRlc1wiOjI0Nn1dLDIwMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01TZWxlY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldCA9IHJlcXVpcmUoXCIuL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXRcIik7XG52YXIgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciA9IHJlcXVpcmUoXCIuL2dldFRleHRDb250ZW50QWNjZXNzb3JcIik7XG5cbi8qKlxuICogV2hpbGUgYGlzQ29sbGFwc2VkYCBpcyBhdmFpbGFibGUgb24gdGhlIFNlbGVjdGlvbiBvYmplY3QgYW5kIGBjb2xsYXBzZWRgXG4gKiBpcyBhdmFpbGFibGUgb24gdGhlIFJhbmdlIG9iamVjdCwgSUUxMSBzb21ldGltZXMgZ2V0cyB0aGVtIHdyb25nLlxuICogSWYgdGhlIGFuY2hvci9mb2N1cyBub2RlcyBhbmQgb2Zmc2V0cyBhcmUgdGhlIHNhbWUsIHRoZSByYW5nZSBpcyBjb2xsYXBzZWQuXG4gKi9cbmZ1bmN0aW9uIGlzQ29sbGFwc2VkKGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCkge1xuICByZXR1cm4gYW5jaG9yTm9kZSA9PT0gZm9jdXNOb2RlICYmIGFuY2hvck9mZnNldCA9PT0gZm9jdXNPZmZzZXQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBhcHByb3ByaWF0ZSBhbmNob3IgYW5kIGZvY3VzIG5vZGUvb2Zmc2V0IHBhaXJzIGZvciBJRS5cbiAqXG4gKiBUaGUgY2F0Y2ggaGVyZSBpcyB0aGF0IElFJ3Mgc2VsZWN0aW9uIEFQSSBkb2Vzbid0IHByb3ZpZGUgaW5mb3JtYXRpb25cbiAqIGFib3V0IHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBmb3J3YXJkIG9yIGJhY2t3YXJkLCBzbyB3ZSBoYXZlIHRvXG4gKiBiZWhhdmUgYXMgdGhvdWdoIGl0J3MgYWx3YXlzIGZvcndhcmQuXG4gKlxuICogSUUgdGV4dCBkaWZmZXJzIGZyb20gbW9kZXJuIHNlbGVjdGlvbiBpbiB0aGF0IGl0IGJlaGF2ZXMgYXMgdGhvdWdoXG4gKiBibG9jayBlbGVtZW50cyBlbmQgd2l0aCBhIG5ldyBsaW5lLiBUaGlzIG1lYW5zIGNoYXJhY3RlciBvZmZzZXRzIHdpbGxcbiAqIGRpZmZlciBiZXR3ZWVuIHRoZSB0d28gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0SUVPZmZzZXRzKG5vZGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGRvY3VtZW50LnNlbGVjdGlvbjtcbiAgdmFyIHNlbGVjdGVkUmFuZ2UgPSBzZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgdmFyIHNlbGVjdGVkTGVuZ3RoID0gc2VsZWN0ZWRSYW5nZS50ZXh0Lmxlbmd0aDtcblxuICAvLyBEdXBsaWNhdGUgc2VsZWN0aW9uIHNvIHdlIGNhbiBtb3ZlIHJhbmdlIHdpdGhvdXQgYnJlYWtpbmcgdXNlciBzZWxlY3Rpb24uXG4gIHZhciBmcm9tU3RhcnQgPSBzZWxlY3RlZFJhbmdlLmR1cGxpY2F0ZSgpO1xuICBmcm9tU3RhcnQubW92ZVRvRWxlbWVudFRleHQobm9kZSk7XG4gIGZyb21TdGFydC5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHNlbGVjdGVkUmFuZ2UpO1xuXG4gIHZhciBzdGFydE9mZnNldCA9IGZyb21TdGFydC50ZXh0Lmxlbmd0aDtcbiAgdmFyIGVuZE9mZnNldCA9IHN0YXJ0T2Zmc2V0ICsgc2VsZWN0ZWRMZW5ndGg7XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogc3RhcnRPZmZzZXQsXG4gICAgZW5kOiBlbmRPZmZzZXRcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE1vZGVybk9mZnNldHMobm9kZSkge1xuICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbiAmJiB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgaWYgKCFzZWxlY3Rpb24gfHwgc2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBhbmNob3JOb2RlID0gc2VsZWN0aW9uLmFuY2hvck5vZGU7XG4gIHZhciBhbmNob3JPZmZzZXQgPSBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xuICB2YXIgZm9jdXNOb2RlID0gc2VsZWN0aW9uLmZvY3VzTm9kZTtcbiAgdmFyIGZvY3VzT2Zmc2V0ID0gc2VsZWN0aW9uLmZvY3VzT2Zmc2V0O1xuXG4gIHZhciBjdXJyZW50UmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcblxuICAvLyBJZiB0aGUgbm9kZSBhbmQgb2Zmc2V0IHZhbHVlcyBhcmUgdGhlIHNhbWUsIHRoZSBzZWxlY3Rpb24gaXMgY29sbGFwc2VkLlxuICAvLyBgU2VsZWN0aW9uLmlzQ29sbGFwc2VkYCBpcyBhdmFpbGFibGUgbmF0aXZlbHksIGJ1dCBJRSBzb21ldGltZXMgZ2V0c1xuICAvLyB0aGlzIHZhbHVlIHdyb25nLlxuICB2YXIgaXNTZWxlY3Rpb25Db2xsYXBzZWQgPSBpc0NvbGxhcHNlZChcbiAgICBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgIHNlbGVjdGlvbi5mb2N1c05vZGUsXG4gICAgc2VsZWN0aW9uLmZvY3VzT2Zmc2V0XG4gICk7XG5cbiAgdmFyIHJhbmdlTGVuZ3RoID0gaXNTZWxlY3Rpb25Db2xsYXBzZWQgPyAwIDogY3VycmVudFJhbmdlLnRvU3RyaW5nKCkubGVuZ3RoO1xuXG4gIHZhciB0ZW1wUmFuZ2UgPSBjdXJyZW50UmFuZ2UuY2xvbmVSYW5nZSgpO1xuICB0ZW1wUmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xuICB0ZW1wUmFuZ2Uuc2V0RW5kKGN1cnJlbnRSYW5nZS5zdGFydENvbnRhaW5lciwgY3VycmVudFJhbmdlLnN0YXJ0T2Zmc2V0KTtcblxuICB2YXIgaXNUZW1wUmFuZ2VDb2xsYXBzZWQgPSBpc0NvbGxhcHNlZChcbiAgICB0ZW1wUmFuZ2Uuc3RhcnRDb250YWluZXIsXG4gICAgdGVtcFJhbmdlLnN0YXJ0T2Zmc2V0LFxuICAgIHRlbXBSYW5nZS5lbmRDb250YWluZXIsXG4gICAgdGVtcFJhbmdlLmVuZE9mZnNldFxuICApO1xuXG4gIHZhciBzdGFydCA9IGlzVGVtcFJhbmdlQ29sbGFwc2VkID8gMCA6IHRlbXBSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcbiAgdmFyIGVuZCA9IHN0YXJ0ICsgcmFuZ2VMZW5ndGg7XG5cbiAgLy8gRGV0ZWN0IHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBiYWNrd2FyZC5cbiAgdmFyIGRldGVjdGlvblJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0U3RhcnQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0KTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0RW5kKGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xuICB2YXIgaXNCYWNrd2FyZCA9IGRldGVjdGlvblJhbmdlLmNvbGxhcHNlZDtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBpc0JhY2t3YXJkID8gZW5kIDogc3RhcnQsXG4gICAgZW5kOiBpc0JhY2t3YXJkID8gc3RhcnQgOiBlbmRcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gKi9cbmZ1bmN0aW9uIHNldElFT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLmR1cGxpY2F0ZSgpO1xuICB2YXIgc3RhcnQsIGVuZDtcblxuICBpZiAodHlwZW9mIG9mZnNldHMuZW5kID09PSAndW5kZWZpbmVkJykge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICBlbmQgPSBzdGFydDtcbiAgfSBlbHNlIGlmIChvZmZzZXRzLnN0YXJ0ID4gb2Zmc2V0cy5lbmQpIHtcbiAgICBzdGFydCA9IG9mZnNldHMuZW5kO1xuICAgIGVuZCA9IG9mZnNldHMuc3RhcnQ7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIGVuZCA9IG9mZnNldHMuZW5kO1xuICB9XG5cbiAgcmFuZ2UubW92ZVRvRWxlbWVudFRleHQobm9kZSk7XG4gIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuICByYW5nZS5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHJhbmdlKTtcbiAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgZW5kIC0gc3RhcnQpO1xuICByYW5nZS5zZWxlY3QoKTtcbn1cblxuLyoqXG4gKiBJbiBtb2Rlcm4gbm9uLUlFIGJyb3dzZXJzLCB3ZSBjYW4gc3VwcG9ydCBib3RoIGZvcndhcmQgYW5kIGJhY2t3YXJkXG4gKiBzZWxlY3Rpb25zLlxuICpcbiAqIE5vdGU6IElFMTArIHN1cHBvcnRzIHRoZSBTZWxlY3Rpb24gb2JqZWN0LCBidXQgaXQgZG9lcyBub3Qgc3VwcG9ydFxuICogdGhlIGBleHRlbmRgIG1ldGhvZCwgd2hpY2ggbWVhbnMgdGhhdCBldmVuIGluIG1vZGVybiBJRSwgaXQncyBub3QgcG9zc2libGVcbiAqIHRvIHByb2dyYW1hdGljYWxseSBjcmVhdGUgYSBiYWNrd2FyZCBzZWxlY3Rpb24uIFRodXMsIGZvciBhbGwgSUVcbiAqIHZlcnNpb25zLCB3ZSB1c2UgdGhlIG9sZCBJRSBBUEkgdG8gY3JlYXRlIG91ciBzZWxlY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAqL1xuZnVuY3Rpb24gc2V0TW9kZXJuT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIGlmICghd2luZG93LmdldFNlbGVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBsZW5ndGggPSBub2RlW2dldFRleHRDb250ZW50QWNjZXNzb3IoKV0ubGVuZ3RoO1xuICB2YXIgc3RhcnQgPSBNYXRoLm1pbihvZmZzZXRzLnN0YXJ0LCBsZW5ndGgpO1xuICB2YXIgZW5kID0gdHlwZW9mIG9mZnNldHMuZW5kID09PSAndW5kZWZpbmVkJyA/XG4gICAgICAgICAgICBzdGFydCA6IE1hdGgubWluKG9mZnNldHMuZW5kLCBsZW5ndGgpO1xuXG4gIC8vIElFIDExIHVzZXMgbW9kZXJuIHNlbGVjdGlvbiwgYnV0IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgZXh0ZW5kIG1ldGhvZC5cbiAgLy8gRmxpcCBiYWNrd2FyZCBzZWxlY3Rpb25zLCBzbyB3ZSBjYW4gc2V0IHdpdGggYSBzaW5nbGUgcmFuZ2UuXG4gIGlmICghc2VsZWN0aW9uLmV4dGVuZCAmJiBzdGFydCA+IGVuZCkge1xuICAgIHZhciB0ZW1wID0gZW5kO1xuICAgIGVuZCA9IHN0YXJ0O1xuICAgIHN0YXJ0ID0gdGVtcDtcbiAgfVxuXG4gIHZhciBzdGFydE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQobm9kZSwgc3RhcnQpO1xuICB2YXIgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBlbmQpO1xuXG4gIGlmIChzdGFydE1hcmtlciAmJiBlbmRNYXJrZXIpIHtcbiAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0TWFya2VyLm5vZGUsIHN0YXJ0TWFya2VyLm9mZnNldCk7XG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgc2VsZWN0aW9uLmV4dGVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlLnNldEVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdXNlSUVPZmZzZXRzID0gKFxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiZcbiAgJ3NlbGVjdGlvbicgaW4gZG9jdW1lbnQgJiZcbiAgISgnZ2V0U2VsZWN0aW9uJyBpbiB3aW5kb3cpXG4pO1xuXG52YXIgUmVhY3RET01TZWxlY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICovXG4gIGdldE9mZnNldHM6IHVzZUlFT2Zmc2V0cyA/IGdldElFT2Zmc2V0cyA6IGdldE1vZGVybk9mZnNldHMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICAgKiBAcGFyYW0ge29iamVjdH0gb2Zmc2V0c1xuICAgKi9cbiAgc2V0T2Zmc2V0czogdXNlSUVPZmZzZXRzID8gc2V0SUVPZmZzZXRzIDogc2V0TW9kZXJuT2Zmc2V0c1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVNlbGVjdGlvbjtcblxufSx7XCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MTY4LFwiLi9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0XCI6MjkwLFwiLi9nZXRUZXh0Q29udGVudEFjY2Vzc29yXCI6MjkyfV0sMjAzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVRleHRDb21wb25lbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCIpO1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID1cbiAgcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnRcIik7XG52YXIgUmVhY3RET01Db21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZShcIi4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyXCIpO1xuXG4vKipcbiAqIFRleHQgbm9kZXMgdmlvbGF0ZSBhIGNvdXBsZSBhc3N1bXB0aW9ucyB0aGF0IFJlYWN0IG1ha2VzIGFib3V0IGNvbXBvbmVudHM6XG4gKlxuICogIC0gV2hlbiBtb3VudGluZyB0ZXh0IGludG8gdGhlIERPTSwgYWRqYWNlbnQgdGV4dCBub2RlcyBhcmUgbWVyZ2VkLlxuICogIC0gVGV4dCBub2RlcyBjYW5ub3QgYmUgYXNzaWduZWQgYSBSZWFjdCByb290IElELlxuICpcbiAqIFRoaXMgY29tcG9uZW50IGlzIHVzZWQgdG8gd3JhcCBzdHJpbmdzIGluIGVsZW1lbnRzIHNvIHRoYXQgdGhleSBjYW4gdW5kZXJnb1xuICogdGhlIHNhbWUgcmVjb25jaWxpYXRpb24gdGhhdCBpcyBhcHBsaWVkIHRvIGVsZW1lbnRzLlxuICpcbiAqIFRPRE86IEludmVzdGlnYXRlIHJlcHJlc2VudGluZyBSZWFjdCBjb21wb25lbnRzIGluIHRoZSBET00gd2l0aCB0ZXh0IG5vZGVzLlxuICpcbiAqIEBjbGFzcyBSZWFjdERPTVRleHRDb21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0Q29tcG9uZW50XG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0RE9NVGV4dENvbXBvbmVudCA9IGZ1bmN0aW9uKHByb3BzKSB7XG4gIC8vIFRoaXMgY29uc3RydWN0b3IgYW5kIGl0cyBhcmd1bWVudCBpcyBjdXJyZW50bHkgdXNlZCBieSBtb2Nrcy5cbn07XG5cbmFzc2lnbihSZWFjdERPTVRleHRDb21wb25lbnQucHJvdG90eXBlLCB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVhY3RUZXh0fSB0ZXh0XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0OiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgLy8gVE9ETzogVGhpcyBpcyByZWFsbHkgYSBSZWFjdFRleHQgKFJlYWN0Tm9kZSksIG5vdCBhIFJlYWN0RWxlbWVudFxuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gdGV4dDtcbiAgICB0aGlzLl9zdHJpbmdUZXh0ID0gJycgKyB0ZXh0O1xuXG4gICAgLy8gUHJvcGVydGllc1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSBudWxsO1xuICAgIHRoaXMuX21vdW50SW5kZXggPSAwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBtYXJrdXAgZm9yIHRoaXMgdGV4dCBub2RlLiBUaGlzIG5vZGUgaXMgbm90IGludGVuZGVkIHRvIGhhdmVcbiAgICogYW55IGZlYXR1cmVzIGJlc2lkZXMgY29udGFpbmluZyB0ZXh0IGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBmb3IgdGhpcyB0ZXh0IG5vZGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gcm9vdElEO1xuICAgIHZhciBlc2NhcGVkVGV4dCA9IGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0aGlzLl9zdHJpbmdUZXh0KTtcblxuICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgLy8gTm9ybWFsbHkgd2UnZCB3cmFwIHRoaXMgaW4gYSBgc3BhbmAgZm9yIHRoZSByZWFzb25zIHN0YXRlZCBhYm92ZSwgYnV0XG4gICAgICAvLyBzaW5jZSB0aGlzIGlzIGEgc2l0dWF0aW9uIHdoZXJlIFJlYWN0IHdvbid0IHRha2Ugb3ZlciAoc3RhdGljIHBhZ2VzKSxcbiAgICAgIC8vIHdlIGNhbiBzaW1wbHkgcmV0dXJuIHRoZSB0ZXh0IGFzIGl0IGlzLlxuICAgICAgcmV0dXJuIGVzY2FwZWRUZXh0O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAnPHNwYW4gJyArIERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JJRChyb290SUQpICsgJz4nICtcbiAgICAgICAgZXNjYXBlZFRleHQgK1xuICAgICAgJzwvc3Bhbj4nXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGlzIGNvbXBvbmVudCBieSB1cGRhdGluZyB0aGUgdGV4dCBjb250ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0VGV4dH0gbmV4dFRleHQgVGhlIG5leHQgdGV4dCBjb250ZW50XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbihuZXh0VGV4dCwgdHJhbnNhY3Rpb24pIHtcbiAgICBpZiAobmV4dFRleHQgIT09IHRoaXMuX2N1cnJlbnRFbGVtZW50KSB7XG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRUZXh0O1xuICAgICAgdmFyIG5leHRTdHJpbmdUZXh0ID0gJycgKyBuZXh0VGV4dDtcbiAgICAgIGlmIChuZXh0U3RyaW5nVGV4dCAhPT0gdGhpcy5fc3RyaW5nVGV4dCkge1xuICAgICAgICAvLyBUT0RPOiBTYXZlIHRoaXMgYXMgcGVuZGluZyBwcm9wcyBhbmQgdXNlIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeVxuICAgICAgICAvLyBhbmQvb3IgdXBkYXRlQ29tcG9uZW50IHRvIGRvIHRoZSBhY3R1YWwgdXBkYXRlIGZvciBjb25zaXN0ZW5jeSB3aXRoXG4gICAgICAgIC8vIG90aGVyIGNvbXBvbmVudCB0eXBlcz9cbiAgICAgICAgdGhpcy5fc3RyaW5nVGV4dCA9IG5leHRTdHJpbmdUZXh0O1xuICAgICAgICBSZWFjdERPTUNvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zLnVwZGF0ZVRleHRDb250ZW50QnlJRChcbiAgICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICAgIG5leHRTdHJpbmdUZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50LnVubW91bnRJREZyb21FbnZpcm9ubWVudCh0aGlzLl9yb290Tm9kZUlEKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRDb21wb25lbnQ7XG5cbn0se1wiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIjoxNTgsXCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50XCI6MTg2LFwiLi9SZWFjdERPTUNvbXBvbmVudFwiOjE5NCxcIi4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyXCI6Mjc4fV0sMjA0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01UZXh0YXJlYVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEF1dG9Gb2N1c01peGluID0gcmVxdWlyZShcIi4vQXV0b0ZvY3VzTWl4aW5cIik7XG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCIpO1xudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKFwiLi9MaW5rZWRWYWx1ZVV0aWxzXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoXCIuL1JlYWN0Q2xhc3NcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciB0ZXh0YXJlYSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KCd0ZXh0YXJlYScpO1xuXG5mdW5jdGlvbiBmb3JjZVVwZGF0ZUlmTW91bnRlZCgpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgaWYgKHRoaXMuaXNNb3VudGVkKCkpIHtcbiAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPHRleHRhcmVhPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgYWxsb3dzIHNldHRpbmcgYHZhbHVlYCwgYW5kXG4gKiBgZGVmYXVsdFZhbHVlYC4gVGhpcyBkaWZmZXJzIGZyb20gdGhlIHRyYWRpdGlvbmFsIERPTSBBUEkgYmVjYXVzZSB2YWx1ZSBpc1xuICogdXN1YWxseSBzZXQgYXMgUENEQVRBIGNoaWxkcmVuLlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9ucyB0aGF0IGFmZmVjdCB0aGVcbiAqIHZhbHVlIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsXG4gKiBub3QgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LiBJbnN0ZWFkLCB0aGUgYHZhbHVlYCBwcm9wIG11c3QgY2hhbmdlIGluXG4gKiBvcmRlciBmb3IgdGhlIHJlbmRlcmVkIGVsZW1lbnQgdG8gYmUgdXBkYXRlZC5cbiAqXG4gKiBUaGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIGJlIGluaXRpYWxpemVkIHdpdGggYW4gZW1wdHkgdmFsdWUsIHRoZSBwcm9wXG4gKiBgZGVmYXVsdFZhbHVlYCBpZiBzcGVjaWZpZWQsIG9yIHRoZSBjaGlsZHJlbiBjb250ZW50IChkZXByZWNhdGVkKS5cbiAqL1xudmFyIFJlYWN0RE9NVGV4dGFyZWEgPSBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdERPTVRleHRhcmVhJyxcbiAgdGFnTmFtZTogJ1RFWFRBUkVBJyxcblxuICBtaXhpbnM6IFtBdXRvRm9jdXNNaXhpbiwgTGlua2VkVmFsdWVVdGlscy5NaXhpbiwgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5dLFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHRoaXMucHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgIC8vIFRPRE8gKHl1bmdzdGVycyk6IFJlbW92ZSBzdXBwb3J0IGZvciBjaGlsZHJlbiBjb250ZW50IGluIDx0ZXh0YXJlYT4uXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAnVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIGluc3RlYWQgb2Ygc2V0dGluZyAnICtcbiAgICAgICAgICAnY2hpbGRyZW4gb24gPHRleHRhcmVhPi4nXG4gICAgICAgICkgOiBudWxsKTtcbiAgICAgIH1cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9PSBudWxsLFxuICAgICAgICAnSWYgeW91IHN1cHBseSBgZGVmYXVsdFZhbHVlYCBvbiBhIDx0ZXh0YXJlYT4sIGRvIG5vdCBwYXNzIGNoaWxkcmVuLidcbiAgICAgICkgOiBpbnZhcmlhbnQoZGVmYXVsdFZhbHVlID09IG51bGwpKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIGNoaWxkcmVuLmxlbmd0aCA8PSAxLFxuICAgICAgICAgICc8dGV4dGFyZWE+IGNhbiBvbmx5IGhhdmUgYXQgbW9zdCBvbmUgY2hpbGQuJ1xuICAgICAgICApIDogaW52YXJpYW50KGNoaWxkcmVuLmxlbmd0aCA8PSAxKSk7XG4gICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW5bMF07XG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnICsgY2hpbGRyZW47XG4gICAgfVxuICAgIGlmIChkZWZhdWx0VmFsdWUgPT0gbnVsbCkge1xuICAgICAgZGVmYXVsdFZhbHVlID0gJyc7XG4gICAgfVxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFdlIHNhdmUgdGhlIGluaXRpYWwgdmFsdWUgc28gdGhhdCBgUmVhY3RET01Db21wb25lbnRgIGRvZXNuJ3QgdXBkYXRlXG4gICAgICAvLyBgdGV4dENvbnRlbnRgICh1bm5lY2Vzc2FyeSBzaW5jZSB3ZSB1cGRhdGUgdmFsdWUpLlxuICAgICAgLy8gVGhlIGluaXRpYWwgdmFsdWUgY2FuIGJlIGEgYm9vbGVhbiBvciBvYmplY3Qgc28gdGhhdCdzIHdoeSBpdCdzXG4gICAgICAvLyBmb3JjZWQgdG8gYmUgYSBzdHJpbmcuXG4gICAgICBpbml0aWFsVmFsdWU6ICcnICsgKHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZSlcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgLy8gQ2xvbmUgYHRoaXMucHJvcHNgIHNvIHdlIGRvbid0IG11dGF0ZSB0aGUgaW5wdXQuXG4gICAgdmFyIHByb3BzID0gYXNzaWduKHt9LCB0aGlzLnByb3BzKTtcblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsLFxuICAgICAgJ2BkYW5nZXJvdXNseVNldElubmVySFRNTGAgZG9lcyBub3QgbWFrZSBzZW5zZSBvbiA8dGV4dGFyZWE+LidcbiAgICApIDogaW52YXJpYW50KHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwpKTtcblxuICAgIHByb3BzLmRlZmF1bHRWYWx1ZSA9IG51bGw7XG4gICAgcHJvcHMudmFsdWUgPSBudWxsO1xuICAgIHByb3BzLm9uQ2hhbmdlID0gdGhpcy5faGFuZGxlQ2hhbmdlO1xuXG4gICAgLy8gQWx3YXlzIHNldCBjaGlsZHJlbiB0byB0aGUgc2FtZSB0aGluZy4gSW4gSUU5LCB0aGUgc2VsZWN0aW9uIHJhbmdlIHdpbGxcbiAgICAvLyBnZXQgcmVzZXQgaWYgYHRleHRDb250ZW50YCBpcyBtdXRhdGVkLlxuICAgIHJldHVybiB0ZXh0YXJlYShwcm9wcywgdGhpcy5zdGF0ZS5pbml0aWFsVmFsdWUpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24ocHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgdmFyIHJvb3ROb2RlID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgICAvLyBDYXN0IGB2YWx1ZWAgdG8gYSBzdHJpbmcgdG8gZW5zdXJlIHRoZSB2YWx1ZSBpcyBzZXQgY29ycmVjdGx5LiBXaGlsZVxuICAgICAgLy8gYnJvd3NlcnMgdHlwaWNhbGx5IGRvIHRoaXMgYXMgbmVjZXNzYXJ5LCBqc2RvbSBkb2Vzbid0LlxuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkocm9vdE5vZGUsICd2YWx1ZScsICcnICsgdmFsdWUpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlQ2hhbmdlOiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZXR1cm5WYWx1ZTtcbiAgICB2YXIgb25DaGFuZ2UgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldE9uQ2hhbmdlKHRoaXMpO1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgcmV0dXJuVmFsdWUgPSBvbkNoYW5nZS5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gICAgUmVhY3RVcGRhdGVzLmFzYXAoZm9yY2VVcGRhdGVJZk1vdW50ZWQsIHRoaXMpO1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRhcmVhO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9BdXRvRm9jdXNNaXhpblwiOjE0OCxcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCI6MTU4LFwiLi9MaW5rZWRWYWx1ZVV0aWxzXCI6MTcyLFwiLi9PYmplY3QuYXNzaWduXCI6MTc1LFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiOjE3OCxcIi4vUmVhY3RDbGFzc1wiOjE4NCxcIi4vUmVhY3RFbGVtZW50XCI6MjA5LFwiLi9SZWFjdFVwZGF0ZXNcIjoyNDYsXCIuL2ludmFyaWFudFwiOjI5NyxcIi4vd2FybmluZ1wiOjMxOCxcIl9wcm9jZXNzXCI6MX1dLDIwNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL1RyYW5zYWN0aW9uXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxudmFyIFJFU0VUX0JBVENIRURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZW1wdHlGdW5jdGlvbixcbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPSBmYWxzZTtcbiAgfVxufTtcblxudmFyIEZMVVNIX0JBVENIRURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZW1wdHlGdW5jdGlvbixcbiAgY2xvc2U6IFJlYWN0VXBkYXRlcy5mbHVzaEJhdGNoZWRVcGRhdGVzLmJpbmQoUmVhY3RVcGRhdGVzKVxufTtcblxudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW0ZMVVNIX0JBVENIRURfVVBEQVRFUywgUkVTRVRfQkFUQ0hFRF9VUERBVEVTXTtcblxuZnVuY3Rpb24gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG59XG5cbmFzc2lnbihcbiAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uLnByb3RvdHlwZSxcbiAgVHJhbnNhY3Rpb24uTWl4aW4sXG4gIHtcbiAgICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgICB9XG4gIH1cbik7XG5cbnZhciB0cmFuc2FjdGlvbiA9IG5ldyBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24oKTtcblxudmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSB7XG4gIGlzQmF0Y2hpbmdVcGRhdGVzOiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gaW4gYSBjb250ZXh0IHdpdGhpbiB3aGljaCBjYWxscyB0byBgc2V0U3RhdGVgXG4gICAqIGFuZCBmcmllbmRzIGFyZSBiYXRjaGVkIHN1Y2ggdGhhdCBjb21wb25lbnRzIGFyZW4ndCB1cGRhdGVkIHVubmVjZXNzYXJpbHkuXG4gICAqL1xuICBiYXRjaGVkVXBkYXRlczogZnVuY3Rpb24oY2FsbGJhY2ssIGEsIGIsIGMsIGQpIHtcbiAgICB2YXIgYWxyZWFkeUJhdGNoaW5nVXBkYXRlcyA9IFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXM7XG5cbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gdHJ1ZTtcblxuICAgIC8vIFRoZSBjb2RlIGlzIHdyaXR0ZW4gdGhpcyB3YXkgdG8gYXZvaWQgZXh0cmEgYWxsb2NhdGlvbnNcbiAgICBpZiAoYWxyZWFkeUJhdGNoaW5nVXBkYXRlcykge1xuICAgICAgY2FsbGJhY2soYSwgYiwgYywgZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0oY2FsbGJhY2ssIG51bGwsIGEsIGIsIGMsIGQpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5O1xuXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOjE3NSxcIi4vUmVhY3RVcGRhdGVzXCI6MjQ2LFwiLi9UcmFuc2FjdGlvblwiOjI2MyxcIi4vZW1wdHlGdW5jdGlvblwiOjI3Nn1dLDIwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RGVmYXVsdEluamVjdGlvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW4gPSByZXF1aXJlKFwiLi9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIpO1xudmFyIENoYW5nZUV2ZW50UGx1Z2luID0gcmVxdWlyZShcIi4vQ2hhbmdlRXZlbnRQbHVnaW5cIik7XG52YXIgQ2xpZW50UmVhY3RSb290SW5kZXggPSByZXF1aXJlKFwiLi9DbGllbnRSZWFjdFJvb3RJbmRleFwiKTtcbnZhciBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlciA9IHJlcXVpcmUoXCIuL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyXCIpO1xudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHJlcXVpcmUoXCIuL0VudGVyTGVhdmVFdmVudFBsdWdpblwiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIEhUTUxET01Qcm9wZXJ0eUNvbmZpZyA9IHJlcXVpcmUoXCIuL0hUTUxET01Qcm9wZXJ0eUNvbmZpZ1wiKTtcbnZhciBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luID0gcmVxdWlyZShcIi4vTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpblwiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID1cbiAgcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnRcIik7XG52YXIgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSA9IHJlcXVpcmUoXCIuL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lcIik7XG52YXIgUmVhY3RET01Db21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdERPTUJ1dHRvbiA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NQnV0dG9uXCIpO1xudmFyIFJlYWN0RE9NRm9ybSA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NRm9ybVwiKTtcbnZhciBSZWFjdERPTUltZyA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NSW1nXCIpO1xudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vUmVhY3RET01JRE9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RET01JZnJhbWUgPSByZXF1aXJlKFwiLi9SZWFjdERPTUlmcmFtZVwiKTtcbnZhciBSZWFjdERPTUlucHV0ID0gcmVxdWlyZShcIi4vUmVhY3RET01JbnB1dFwiKTtcbnZhciBSZWFjdERPTU9wdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NT3B0aW9uXCIpO1xudmFyIFJlYWN0RE9NU2VsZWN0ID0gcmVxdWlyZShcIi4vUmVhY3RET01TZWxlY3RcIik7XG52YXIgUmVhY3RET01UZXh0YXJlYSA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NVGV4dGFyZWFcIik7XG52YXIgUmVhY3RET01UZXh0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RET01UZXh0Q29tcG9uZW50XCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKFwiLi9SZWFjdEV2ZW50TGlzdGVuZXJcIik7XG52YXIgUmVhY3RJbmplY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdEluamVjdGlvblwiKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXCIpO1xudmFyIFNlbGVjdEV2ZW50UGx1Z2luID0gcmVxdWlyZShcIi4vU2VsZWN0RXZlbnRQbHVnaW5cIik7XG52YXIgU2VydmVyUmVhY3RSb290SW5kZXggPSByZXF1aXJlKFwiLi9TZXJ2ZXJSZWFjdFJvb3RJbmRleFwiKTtcbnZhciBTaW1wbGVFdmVudFBsdWdpbiA9IHJlcXVpcmUoXCIuL1NpbXBsZUV2ZW50UGx1Z2luXCIpO1xudmFyIFNWR0RPTVByb3BlcnR5Q29uZmlnID0gcmVxdWlyZShcIi4vU1ZHRE9NUHJvcGVydHlDb25maWdcIik7XG5cbnZhciBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2NyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50XCIpO1xuXG5mdW5jdGlvbiBhdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3ModHlwZSkge1xuICByZXR1cm4gUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyh7XG4gICAgdGFnTmFtZTogdHlwZS50b1VwcGVyQ2FzZSgpLFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFJlYWN0RWxlbWVudChcbiAgICAgICAgdHlwZSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgdGhpcy5wcm9wc1xuICAgICAgKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbmplY3QoKSB7XG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50RW1pdHRlci5pbmplY3RSZWFjdEV2ZW50TGlzdGVuZXIoXG4gICAgUmVhY3RFdmVudExpc3RlbmVyXG4gICk7XG5cbiAgLyoqXG4gICAqIEluamVjdCBtb2R1bGVzIGZvciByZXNvbHZpbmcgRE9NIGhpZXJhcmNoeSBhbmQgcGx1Z2luIG9yZGVyaW5nLlxuICAgKi9cbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihEZWZhdWx0RXZlbnRQbHVnaW5PcmRlcik7XG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEluc3RhbmNlSGFuZGxlKFJlYWN0SW5zdGFuY2VIYW5kbGVzKTtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0TW91bnQoUmVhY3RNb3VudCk7XG5cbiAgLyoqXG4gICAqIFNvbWUgaW1wb3J0YW50IGV2ZW50IHBsdWdpbnMgaW5jbHVkZWQgYnkgZGVmYXVsdCAod2l0aG91dCBoYXZpbmcgdG8gcmVxdWlyZVxuICAgKiB0aGVtKS5cbiAgICovXG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7XG4gICAgU2ltcGxlRXZlbnRQbHVnaW46IFNpbXBsZUV2ZW50UGx1Z2luLFxuICAgIEVudGVyTGVhdmVFdmVudFBsdWdpbjogRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLFxuICAgIENoYW5nZUV2ZW50UGx1Z2luOiBDaGFuZ2VFdmVudFBsdWdpbixcbiAgICBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luOiBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luLFxuICAgIFNlbGVjdEV2ZW50UGx1Z2luOiBTZWxlY3RFdmVudFBsdWdpbixcbiAgICBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXG4gIH0pO1xuXG4gIFJlYWN0SW5qZWN0aW9uLk5hdGl2ZUNvbXBvbmVudC5pbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3MoXG4gICAgUmVhY3RET01Db21wb25lbnRcbiAgKTtcblxuICBSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0VGV4dENvbXBvbmVudENsYXNzKFxuICAgIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICApO1xuXG4gIFJlYWN0SW5qZWN0aW9uLk5hdGl2ZUNvbXBvbmVudC5pbmplY3RBdXRvV3JhcHBlcihcbiAgICBhdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3NcbiAgKTtcblxuICAvLyBUaGlzIG5lZWRzIHRvIGhhcHBlbiBiZWZvcmUgY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQoKSBvdGhlcndpc2UgdGhlIG1peGluXG4gIC8vIHdvbid0IGJlIGluY2x1ZGVkLlxuICBSZWFjdEluamVjdGlvbi5DbGFzcy5pbmplY3RNaXhpbihSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbik7XG5cbiAgUmVhY3RJbmplY3Rpb24uTmF0aXZlQ29tcG9uZW50LmluamVjdENvbXBvbmVudENsYXNzZXMoe1xuICAgICdidXR0b24nOiBSZWFjdERPTUJ1dHRvbixcbiAgICAnZm9ybSc6IFJlYWN0RE9NRm9ybSxcbiAgICAnaWZyYW1lJzogUmVhY3RET01JZnJhbWUsXG4gICAgJ2ltZyc6IFJlYWN0RE9NSW1nLFxuICAgICdpbnB1dCc6IFJlYWN0RE9NSW5wdXQsXG4gICAgJ29wdGlvbic6IFJlYWN0RE9NT3B0aW9uLFxuICAgICdzZWxlY3QnOiBSZWFjdERPTVNlbGVjdCxcbiAgICAndGV4dGFyZWEnOiBSZWFjdERPTVRleHRhcmVhLFxuXG4gICAgJ2h0bWwnOiBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCgnaHRtbCcpLFxuICAgICdoZWFkJzogY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQoJ2hlYWQnKSxcbiAgICAnYm9keSc6IGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KCdib2R5JylcbiAgfSk7XG5cbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoSFRNTERPTVByb3BlcnR5Q29uZmlnKTtcbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoU1ZHRE9NUHJvcGVydHlDb25maWcpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkVtcHR5Q29tcG9uZW50LmluamVjdEVtcHR5Q29tcG9uZW50KCdub3NjcmlwdCcpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb24oXG4gICAgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblxuICApO1xuICBSZWFjdEluamVjdGlvbi5VcGRhdGVzLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koXG4gICAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVxuICApO1xuXG4gIFJlYWN0SW5qZWN0aW9uLlJvb3RJbmRleC5pbmplY3RDcmVhdGVSZWFjdFJvb3RJbmRleChcbiAgICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gP1xuICAgICAgQ2xpZW50UmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXggOlxuICAgICAgU2VydmVyUmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXhcbiAgKTtcblxuICBSZWFjdEluamVjdGlvbi5Db21wb25lbnQuaW5qZWN0RW52aXJvbm1lbnQoUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQpO1xuICBSZWFjdEluamVjdGlvbi5ET01Db21wb25lbnQuaW5qZWN0SURPcGVyYXRpb25zKFJlYWN0RE9NSURPcGVyYXRpb25zKTtcblxuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgdmFyIHVybCA9IChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgd2luZG93LmxvY2F0aW9uLmhyZWYpIHx8ICcnO1xuICAgIGlmICgoL1s/Jl1yZWFjdF9wZXJmXFxiLykudGVzdCh1cmwpKSB7XG4gICAgICB2YXIgUmVhY3REZWZhdWx0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0RGVmYXVsdFBlcmZcIik7XG4gICAgICBSZWFjdERlZmF1bHRQZXJmLnN0YXJ0KCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpbmplY3Q6IGluamVjdFxufTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiOjE0OSxcIi4vQ2hhbmdlRXZlbnRQbHVnaW5cIjoxNTQsXCIuL0NsaWVudFJlYWN0Um9vdEluZGV4XCI6MTU1LFwiLi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlclwiOjE2MCxcIi4vRW50ZXJMZWF2ZUV2ZW50UGx1Z2luXCI6MTYxLFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjE2OCxcIi4vSFRNTERPTVByb3BlcnR5Q29uZmlnXCI6MTcwLFwiLi9Nb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luXCI6MTc0LFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiOjE3OCxcIi4vUmVhY3RDbGFzc1wiOjE4NCxcIi4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnRcIjoxODYsXCIuL1JlYWN0RE9NQnV0dG9uXCI6MTkzLFwiLi9SZWFjdERPTUNvbXBvbmVudFwiOjE5NCxcIi4vUmVhY3RET01Gb3JtXCI6MTk1LFwiLi9SZWFjdERPTUlET3BlcmF0aW9uc1wiOjE5NixcIi4vUmVhY3RET01JZnJhbWVcIjoxOTcsXCIuL1JlYWN0RE9NSW1nXCI6MTk4LFwiLi9SZWFjdERPTUlucHV0XCI6MTk5LFwiLi9SZWFjdERPTU9wdGlvblwiOjIwMCxcIi4vUmVhY3RET01TZWxlY3RcIjoyMDEsXCIuL1JlYWN0RE9NVGV4dENvbXBvbmVudFwiOjIwMyxcIi4vUmVhY3RET01UZXh0YXJlYVwiOjIwNCxcIi4vUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVwiOjIwNSxcIi4vUmVhY3REZWZhdWx0UGVyZlwiOjIwNyxcIi4vUmVhY3RFbGVtZW50XCI6MjA5LFwiLi9SZWFjdEV2ZW50TGlzdGVuZXJcIjoyMTQsXCIuL1JlYWN0SW5qZWN0aW9uXCI6MjE2LFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiOjIxOCxcIi4vUmVhY3RNb3VudFwiOjIyMyxcIi4vUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblwiOjIzNCxcIi4vU1ZHRE9NUHJvcGVydHlDb25maWdcIjoyNDgsXCIuL1NlbGVjdEV2ZW50UGx1Z2luXCI6MjQ5LFwiLi9TZXJ2ZXJSZWFjdFJvb3RJbmRleFwiOjI1MCxcIi4vU2ltcGxlRXZlbnRQbHVnaW5cIjoyNTEsXCIuL2NyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50XCI6MjcyLFwiX3Byb2Nlc3NcIjoxfV0sMjA3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRQZXJmXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG52YXIgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzID0gcmVxdWlyZShcIi4vUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzXCIpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKFwiLi9SZWFjdE1vdW50XCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcblxudmFyIHBlcmZvcm1hbmNlTm93ID0gcmVxdWlyZShcIi4vcGVyZm9ybWFuY2VOb3dcIik7XG5cbmZ1bmN0aW9uIHJvdW5kRmxvYXQodmFsKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKHZhbCAqIDEwMCkgLyAxMDA7XG59XG5cbmZ1bmN0aW9uIGFkZFZhbHVlKG9iaiwga2V5LCB2YWwpIHtcbiAgb2JqW2tleV0gPSAob2JqW2tleV0gfHwgMCkgKyB2YWw7XG59XG5cbnZhciBSZWFjdERlZmF1bHRQZXJmID0ge1xuICBfYWxsTWVhc3VyZW1lbnRzOiBbXSwgLy8gbGFzdCBpdGVtIGluIHRoZSBsaXN0IGlzIHRoZSBjdXJyZW50IG9uZVxuICBfbW91bnRTdGFjazogWzBdLFxuICBfaW5qZWN0ZWQ6IGZhbHNlLFxuXG4gIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIVJlYWN0RGVmYXVsdFBlcmYuX2luamVjdGVkKSB7XG4gICAgICBSZWFjdFBlcmYuaW5qZWN0aW9uLmluamVjdE1lYXN1cmUoUmVhY3REZWZhdWx0UGVyZi5tZWFzdXJlKTtcbiAgICB9XG5cbiAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMubGVuZ3RoID0gMDtcbiAgICBSZWFjdFBlcmYuZW5hYmxlTWVhc3VyZSA9IHRydWU7XG4gIH0sXG5cbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgUmVhY3RQZXJmLmVuYWJsZU1lYXN1cmUgPSBmYWxzZTtcbiAgfSxcblxuICBnZXRMYXN0TWVhc3VyZW1lbnRzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICB9LFxuXG4gIHByaW50RXhjbHVzaXZlOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEV4Y2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdDb21wb25lbnQgY2xhc3MgbmFtZSc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ1RvdGFsIGluY2x1c2l2ZSB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uaW5jbHVzaXZlKSxcbiAgICAgICAgJ0V4Y2x1c2l2ZSBtb3VudCB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uZXhjbHVzaXZlKSxcbiAgICAgICAgJ0V4Y2x1c2l2ZSByZW5kZXIgdGltZSAobXMpJzogcm91bmRGbG9hdChpdGVtLnJlbmRlciksXG4gICAgICAgICdNb3VudCB0aW1lIHBlciBpbnN0YW5jZSAobXMpJzogcm91bmRGbG9hdChpdGVtLmV4Y2x1c2l2ZSAvIGl0ZW0uY291bnQpLFxuICAgICAgICAnUmVuZGVyIHRpbWUgcGVyIGluc3RhbmNlIChtcyknOiByb3VuZEZsb2F0KGl0ZW0ucmVuZGVyIC8gaXRlbS5jb3VudCksXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pKTtcbiAgICAvLyBUT0RPOiBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKCkgZG9lcyBub3QgcmV0dXJuIHRoZSBjb3JyZWN0XG4gICAgLy8gbnVtYmVyLlxuICB9LFxuXG4gIHByaW50SW5jbHVzaXZlOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEluY2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdPd25lciA+IGNvbXBvbmVudCc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ0luY2x1c2l2ZSB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0udGltZSksXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICdUb3RhbCB0aW1lOicsXG4gICAgICBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnXG4gICAgKTtcbiAgfSxcblxuICBnZXRNZWFzdXJlbWVudHNTdW1tYXJ5TWFwOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRJbmNsdXNpdmVTdW1tYXJ5KFxuICAgICAgbWVhc3VyZW1lbnRzLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgcmV0dXJuIHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdPd25lciA+IGNvbXBvbmVudCc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ1dhc3RlZCB0aW1lIChtcyknOiBpdGVtLnRpbWUsXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pO1xuICB9LFxuXG4gIHByaW50V2FzdGVkOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIGNvbnNvbGUudGFibGUoUmVhY3REZWZhdWx0UGVyZi5nZXRNZWFzdXJlbWVudHNTdW1tYXJ5TWFwKG1lYXN1cmVtZW50cykpO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgJ1RvdGFsIHRpbWU6JyxcbiAgICAgIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRUb3RhbFRpbWUobWVhc3VyZW1lbnRzKS50b0ZpeGVkKDIpICsgJyBtcydcbiAgICApO1xuICB9LFxuXG4gIHByaW50RE9NOiBmdW5jdGlvbihtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldERPTVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIHJlc3VsdFtET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRV0gPSBpdGVtLmlkO1xuICAgICAgcmVzdWx0Wyd0eXBlJ10gPSBpdGVtLnR5cGU7XG4gICAgICByZXN1bHRbJ2FyZ3MnXSA9IEpTT04uc3RyaW5naWZ5KGl0ZW0uYXJncyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICdUb3RhbCB0aW1lOicsXG4gICAgICBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnXG4gICAgKTtcbiAgfSxcblxuICBfcmVjb3JkV3JpdGU6IGZ1bmN0aW9uKGlkLCBmbk5hbWUsIHRvdGFsVGltZSwgYXJncykge1xuICAgIC8vIFRPRE86IHRvdGFsVGltZSBpc24ndCB0aGF0IHVzZWZ1bCBzaW5jZSBpdCBkb2Vzbid0IGNvdW50IHBhaW50cy9yZWZsb3dzXG4gICAgdmFyIHdyaXRlcyA9XG4gICAgICBSZWFjdERlZmF1bHRQZXJmXG4gICAgICAgIC5fYWxsTWVhc3VyZW1lbnRzW1JlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5sZW5ndGggLSAxXVxuICAgICAgICAud3JpdGVzO1xuICAgIHdyaXRlc1tpZF0gPSB3cml0ZXNbaWRdIHx8IFtdO1xuICAgIHdyaXRlc1tpZF0ucHVzaCh7XG4gICAgICB0eXBlOiBmbk5hbWUsXG4gICAgICB0aW1lOiB0b3RhbFRpbWUsXG4gICAgICBhcmdzOiBhcmdzXG4gICAgfSk7XG4gIH0sXG5cbiAgbWVhc3VyZTogZnVuY3Rpb24obW9kdWxlTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge2ZvciAodmFyIGFyZ3M9W10sJF9fMD0wLCRfXzE9YXJndW1lbnRzLmxlbmd0aDskX18wPCRfXzE7JF9fMCsrKSBhcmdzLnB1c2goYXJndW1lbnRzWyRfXzBdKTtcbiAgICAgIHZhciB0b3RhbFRpbWU7XG4gICAgICB2YXIgcnY7XG4gICAgICB2YXIgc3RhcnQ7XG5cbiAgICAgIGlmIChmbk5hbWUgPT09ICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCcgfHxcbiAgICAgICAgICBmbk5hbWUgPT09ICdmbHVzaEJhdGNoZWRVcGRhdGVzJykge1xuICAgICAgICAvLyBBIFwibWVhc3VyZW1lbnRcIiBpcyBhIHNldCBvZiBtZXRyaWNzIHJlY29yZGVkIGZvciBlYWNoIGZsdXNoLiBXZSB3YW50XG4gICAgICAgIC8vIHRvIGdyb3VwIHRoZSBtZXRyaWNzIGZvciBhIGdpdmVuIGZsdXNoIHRvZ2V0aGVyIHNvIHdlIGNhbiBsb29rIGF0IHRoZVxuICAgICAgICAvLyBjb21wb25lbnRzIHRoYXQgcmVuZGVyZWQgYW5kIHRoZSBET00gb3BlcmF0aW9ucyB0aGF0IGFjdHVhbGx5XG4gICAgICAgIC8vIGhhcHBlbmVkIHRvIGRldGVybWluZSB0aGUgYW1vdW50IG9mIFwid2FzdGVkIHdvcmtcIiBwZXJmb3JtZWQuXG4gICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5wdXNoKHtcbiAgICAgICAgICBleGNsdXNpdmU6IHt9LFxuICAgICAgICAgIGluY2x1c2l2ZToge30sXG4gICAgICAgICAgcmVuZGVyOiB7fSxcbiAgICAgICAgICBjb3VudHM6IHt9LFxuICAgICAgICAgIHdyaXRlczoge30sXG4gICAgICAgICAgZGlzcGxheU5hbWVzOiB7fSxcbiAgICAgICAgICB0b3RhbFRpbWU6IDBcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHNbXG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFcbiAgICAgICAgXS50b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSBpZiAoZm5OYW1lID09PSAnX21vdW50SW1hZ2VJbnRvTm9kZScgfHxcbiAgICAgICAgICBtb2R1bGVOYW1lID09PSAnUmVhY3RET01JRE9wZXJhdGlvbnMnKSB7XG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB0b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG5cbiAgICAgICAgaWYgKGZuTmFtZSA9PT0gJ19tb3VudEltYWdlSW50b05vZGUnKSB7XG4gICAgICAgICAgdmFyIG1vdW50SUQgPSBSZWFjdE1vdW50LmdldElEKGFyZ3NbMV0pO1xuICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX3JlY29yZFdyaXRlKG1vdW50SUQsIGZuTmFtZSwgdG90YWxUaW1lLCBhcmdzWzBdKTtcbiAgICAgICAgfSBlbHNlIGlmIChmbk5hbWUgPT09ICdkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMnKSB7XG4gICAgICAgICAgLy8gc3BlY2lhbCBmb3JtYXRcbiAgICAgICAgICBhcmdzWzBdLmZvckVhY2goZnVuY3Rpb24odXBkYXRlKSB7XG4gICAgICAgICAgICB2YXIgd3JpdGVBcmdzID0ge307XG4gICAgICAgICAgICBpZiAodXBkYXRlLmZyb21JbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MuZnJvbUluZGV4ID0gdXBkYXRlLmZyb21JbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGUudG9JbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MudG9JbmRleCA9IHVwZGF0ZS50b0luZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZS50ZXh0Q29udGVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MudGV4dENvbnRlbnQgPSB1cGRhdGUudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlLm1hcmt1cEluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy5tYXJrdXAgPSBhcmdzWzFdW3VwZGF0ZS5tYXJrdXBJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9yZWNvcmRXcml0ZShcbiAgICAgICAgICAgICAgdXBkYXRlLnBhcmVudElELFxuICAgICAgICAgICAgICB1cGRhdGUudHlwZSxcbiAgICAgICAgICAgICAgdG90YWxUaW1lLFxuICAgICAgICAgICAgICB3cml0ZUFyZ3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYmFzaWMgZm9ybWF0XG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fcmVjb3JkV3JpdGUoXG4gICAgICAgICAgICBhcmdzWzBdLFxuICAgICAgICAgICAgZm5OYW1lLFxuICAgICAgICAgICAgdG90YWxUaW1lLFxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSBpZiAobW9kdWxlTmFtZSA9PT0gJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JyAmJiAoXG4gICAgICAgICgvLyBUT0RPOiByZWNlaXZlQ29tcG9uZW50KCk/XG4gICAgICAgIChmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCcgfHxcbiAgICAgICAgZm5OYW1lID09PSAndXBkYXRlQ29tcG9uZW50JyB8fCBmbk5hbWUgPT09ICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50JykpKSkge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByb290Tm9kZUlEID0gZm5OYW1lID09PSAnbW91bnRDb21wb25lbnQnID9cbiAgICAgICAgICBhcmdzWzBdIDpcbiAgICAgICAgICB0aGlzLl9yb290Tm9kZUlEO1xuICAgICAgICB2YXIgaXNSZW5kZXIgPSBmbk5hbWUgPT09ICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50JztcbiAgICAgICAgdmFyIGlzTW91bnQgPSBmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCc7XG5cbiAgICAgICAgdmFyIG1vdW50U3RhY2sgPSBSZWFjdERlZmF1bHRQZXJmLl9tb3VudFN0YWNrO1xuICAgICAgICB2YXIgZW50cnkgPSBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHNbXG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoaXNSZW5kZXIpIHtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5jb3VudHMsIHJvb3ROb2RlSUQsIDEpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTW91bnQpIHtcbiAgICAgICAgICBtb3VudFN0YWNrLnB1c2goMCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydCA9IHBlcmZvcm1hbmNlTm93KCk7XG4gICAgICAgIHJ2ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgdG90YWxUaW1lID0gcGVyZm9ybWFuY2VOb3coKSAtIHN0YXJ0O1xuXG4gICAgICAgIGlmIChpc1JlbmRlcikge1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LnJlbmRlciwgcm9vdE5vZGVJRCwgdG90YWxUaW1lKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01vdW50KSB7XG4gICAgICAgICAgdmFyIHN1Yk1vdW50VGltZSA9IG1vdW50U3RhY2sucG9wKCk7XG4gICAgICAgICAgbW91bnRTdGFja1ttb3VudFN0YWNrLmxlbmd0aCAtIDFdICs9IHRvdGFsVGltZTtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5leGNsdXNpdmUsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSAtIHN1Yk1vdW50VGltZSk7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkuaW5jbHVzaXZlLCByb290Tm9kZUlELCB0b3RhbFRpbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmluY2x1c2l2ZSwgcm9vdE5vZGVJRCwgdG90YWxUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVudHJ5LmRpc3BsYXlOYW1lc1tyb290Tm9kZUlEXSA9IHtcbiAgICAgICAgICBjdXJyZW50OiB0aGlzLmdldE5hbWUoKSxcbiAgICAgICAgICBvd25lcjogdGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyID9cbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lci5nZXROYW1lKCkgOlxuICAgICAgICAgICAgJzxyb290PidcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcnY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RGVmYXVsdFBlcmY7XG5cbn0se1wiLi9ET01Qcm9wZXJ0eVwiOjE1NyxcIi4vUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzXCI6MjA4LFwiLi9SZWFjdE1vdW50XCI6MjIzLFwiLi9SZWFjdFBlcmZcIjoyMjgsXCIuL3BlcmZvcm1hbmNlTm93XCI6MzA5fV0sMjA4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXNcbiAqL1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxuLy8gRG9uJ3QgdHJ5IHRvIHNhdmUgdXNlcnMgbGVzcyB0aGFuIDEuMm1zIChhIG51bWJlciBJIG1hZGUgdXApXG52YXIgRE9OVF9DQVJFX1RIUkVTSE9MRCA9IDEuMjtcbnZhciBET01fT1BFUkFUSU9OX1RZUEVTID0ge1xuICAnX21vdW50SW1hZ2VJbnRvTm9kZSc6ICdzZXQgaW5uZXJIVE1MJyxcbiAgSU5TRVJUX01BUktVUDogJ3NldCBpbm5lckhUTUwnLFxuICBNT1ZFX0VYSVNUSU5HOiAnbW92ZScsXG4gIFJFTU9WRV9OT0RFOiAncmVtb3ZlJyxcbiAgVEVYVF9DT05URU5UOiAnc2V0IHRleHRDb250ZW50JyxcbiAgJ3VwZGF0ZVByb3BlcnR5QnlJRCc6ICd1cGRhdGUgYXR0cmlidXRlJyxcbiAgJ2RlbGV0ZVByb3BlcnR5QnlJRCc6ICdkZWxldGUgYXR0cmlidXRlJyxcbiAgJ3VwZGF0ZVN0eWxlc0J5SUQnOiAndXBkYXRlIHN0eWxlcycsXG4gICd1cGRhdGVJbm5lckhUTUxCeUlEJzogJ3NldCBpbm5lckhUTUwnLFxuICAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEJzogJ3JlcGxhY2UnXG59O1xuXG5mdW5jdGlvbiBnZXRUb3RhbFRpbWUobWVhc3VyZW1lbnRzKSB7XG4gIC8vIFRPRE86IHJldHVybiBudW1iZXIgb2YgRE9NIG9wcz8gY291bGQgYmUgbWlzbGVhZGluZy5cbiAgLy8gVE9ETzogbWVhc3VyZSBkcm9wcGVkIGZyYW1lcyBhZnRlciByZWNvbmNpbGU/XG4gIC8vIFRPRE86IGxvZyB0b3RhbCB0aW1lIG9mIGVhY2ggcmVjb25jaWxlIGFuZCB0aGUgdG9wLWxldmVsIGNvbXBvbmVudFxuICAvLyBjbGFzcyB0aGF0IHRyaWdnZXJlZCBpdC5cbiAgdmFyIHRvdGFsVGltZSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHRvdGFsVGltZSArPSBtZWFzdXJlbWVudC50b3RhbFRpbWU7XG4gIH1cbiAgcmV0dXJuIHRvdGFsVGltZTtcbn1cblxuZnVuY3Rpb24gZ2V0RE9NU3VtbWFyeShtZWFzdXJlbWVudHMpIHtcbiAgdmFyIGl0ZW1zID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHZhciBpZDtcblxuICAgIGZvciAoaWQgaW4gbWVhc3VyZW1lbnQud3JpdGVzKSB7XG4gICAgICBtZWFzdXJlbWVudC53cml0ZXNbaWRdLmZvckVhY2goZnVuY3Rpb24od3JpdGUpIHtcbiAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIHR5cGU6IERPTV9PUEVSQVRJT05fVFlQRVNbd3JpdGUudHlwZV0gfHwgd3JpdGUudHlwZSxcbiAgICAgICAgICBhcmdzOiB3cml0ZS5hcmdzXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpdGVtcztcbn1cblxuZnVuY3Rpb24gZ2V0RXhjbHVzaXZlU3VtbWFyeShtZWFzdXJlbWVudHMpIHtcbiAgdmFyIGNhbmRpZGF0ZXMgPSB7fTtcbiAgdmFyIGRpc3BsYXlOYW1lO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHZhciBhbGxJRHMgPSBhc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIG1lYXN1cmVtZW50LmV4Y2x1c2l2ZSxcbiAgICAgIG1lYXN1cmVtZW50LmluY2x1c2l2ZVxuICAgICk7XG5cbiAgICBmb3IgKHZhciBpZCBpbiBhbGxJRHMpIHtcbiAgICAgIGRpc3BsYXlOYW1lID0gbWVhc3VyZW1lbnQuZGlzcGxheU5hbWVzW2lkXS5jdXJyZW50O1xuXG4gICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXSA9IGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdIHx8IHtcbiAgICAgICAgY29tcG9uZW50TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICAgIGluY2x1c2l2ZTogMCxcbiAgICAgICAgZXhjbHVzaXZlOiAwLFxuICAgICAgICByZW5kZXI6IDAsXG4gICAgICAgIGNvdW50OiAwXG4gICAgICB9O1xuICAgICAgaWYgKG1lYXN1cmVtZW50LnJlbmRlcltpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0ucmVuZGVyICs9IG1lYXN1cmVtZW50LnJlbmRlcltpZF07XG4gICAgICB9XG4gICAgICBpZiAobWVhc3VyZW1lbnQuZXhjbHVzaXZlW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5leGNsdXNpdmUgKz0gbWVhc3VyZW1lbnQuZXhjbHVzaXZlW2lkXTtcbiAgICAgIH1cbiAgICAgIGlmIChtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmluY2x1c2l2ZSArPSBtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmNvdW50c1tpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0uY291bnQgKz0gbWVhc3VyZW1lbnQuY291bnRzW2lkXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBOb3cgbWFrZSBhIHNvcnRlZCBhcnJheSB3aXRoIHRoZSByZXN1bHRzLlxuICB2YXIgYXJyID0gW107XG4gIGZvciAoZGlzcGxheU5hbWUgaW4gY2FuZGlkYXRlcykge1xuICAgIGlmIChjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5leGNsdXNpdmUgPj0gRE9OVF9DQVJFX1RIUkVTSE9MRCkge1xuICAgICAgYXJyLnB1c2goY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0pO1xuICAgIH1cbiAgfVxuXG4gIGFyci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYi5leGNsdXNpdmUgLSBhLmV4Y2x1c2l2ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gZ2V0SW5jbHVzaXZlU3VtbWFyeShtZWFzdXJlbWVudHMsIG9ubHlDbGVhbikge1xuICB2YXIgY2FuZGlkYXRlcyA9IHt9O1xuICB2YXIgaW5jbHVzaXZlS2V5O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHZhciBhbGxJRHMgPSBhc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIG1lYXN1cmVtZW50LmV4Y2x1c2l2ZSxcbiAgICAgIG1lYXN1cmVtZW50LmluY2x1c2l2ZVxuICAgICk7XG4gICAgdmFyIGNsZWFuQ29tcG9uZW50cztcblxuICAgIGlmIChvbmx5Q2xlYW4pIHtcbiAgICAgIGNsZWFuQ29tcG9uZW50cyA9IGdldFVuY2hhbmdlZENvbXBvbmVudHMobWVhc3VyZW1lbnQpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGlkIGluIGFsbElEcykge1xuICAgICAgaWYgKG9ubHlDbGVhbiAmJiAhY2xlYW5Db21wb25lbnRzW2lkXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpc3BsYXlOYW1lID0gbWVhc3VyZW1lbnQuZGlzcGxheU5hbWVzW2lkXTtcblxuICAgICAgLy8gSW5jbHVzaXZlIHRpbWUgaXMgbm90IHVzZWZ1bCBmb3IgbWFueSBjb21wb25lbnRzIHdpdGhvdXQga25vd2luZyB3aGVyZVxuICAgICAgLy8gdGhleSBhcmUgaW5zdGFudGlhdGVkLiBTbyB3ZSBhZ2dyZWdhdGUgaW5jbHVzaXZlIHRpbWUgd2l0aCBib3RoIHRoZVxuICAgICAgLy8gb3duZXIgYW5kIGN1cnJlbnQgZGlzcGxheU5hbWUgYXMgdGhlIGtleS5cbiAgICAgIGluY2x1c2l2ZUtleSA9IGRpc3BsYXlOYW1lLm93bmVyICsgJyA+ICcgKyBkaXNwbGF5TmFtZS5jdXJyZW50O1xuXG4gICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0gPSBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0gfHwge1xuICAgICAgICBjb21wb25lbnROYW1lOiBpbmNsdXNpdmVLZXksXG4gICAgICAgIHRpbWU6IDAsXG4gICAgICAgIGNvdW50OiAwXG4gICAgICB9O1xuXG4gICAgICBpZiAobWVhc3VyZW1lbnQuaW5jbHVzaXZlW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0udGltZSArPSBtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmNvdW50c1tpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldLmNvdW50ICs9IG1lYXN1cmVtZW50LmNvdW50c1tpZF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTm93IG1ha2UgYSBzb3J0ZWQgYXJyYXkgd2l0aCB0aGUgcmVzdWx0cy5cbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKGluY2x1c2l2ZUtleSBpbiBjYW5kaWRhdGVzKSB7XG4gICAgaWYgKGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XS50aW1lID49IERPTlRfQ0FSRV9USFJFU0hPTEQpIHtcbiAgICAgIGFyci5wdXNoKGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XSk7XG4gICAgfVxuICB9XG5cbiAgYXJyLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiLnRpbWUgLSBhLnRpbWU7XG4gIH0pO1xuXG4gIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIGdldFVuY2hhbmdlZENvbXBvbmVudHMobWVhc3VyZW1lbnQpIHtcbiAgLy8gRm9yIGEgZ2l2ZW4gcmVjb25jaWxlLCBsb29rIGF0IHdoaWNoIGNvbXBvbmVudHMgZGlkIG5vdCBhY3R1YWxseVxuICAvLyByZW5kZXIgYW55dGhpbmcgdG8gdGhlIERPTSBhbmQgcmV0dXJuIGEgbWFwcGluZyBvZiB0aGVpciBJRCB0b1xuICAvLyB0aGUgYW1vdW50IG9mIHRpbWUgaXQgdG9vayB0byByZW5kZXIgdGhlIGVudGlyZSBzdWJ0cmVlLlxuICB2YXIgY2xlYW5Db21wb25lbnRzID0ge307XG4gIHZhciBkaXJ0eUxlYWZJRHMgPSBPYmplY3Qua2V5cyhtZWFzdXJlbWVudC53cml0ZXMpO1xuICB2YXIgYWxsSURzID0gYXNzaWduKHt9LCBtZWFzdXJlbWVudC5leGNsdXNpdmUsIG1lYXN1cmVtZW50LmluY2x1c2l2ZSk7XG5cbiAgZm9yICh2YXIgaWQgaW4gYWxsSURzKSB7XG4gICAgdmFyIGlzRGlydHkgPSBmYWxzZTtcbiAgICAvLyBGb3IgZWFjaCBjb21wb25lbnQgdGhhdCByZW5kZXJlZCwgc2VlIGlmIGEgY29tcG9uZW50IHRoYXQgdHJpZ2dlcmVkXG4gICAgLy8gYSBET00gb3AgaXMgaW4gaXRzIHN1YnRyZWUuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJ0eUxlYWZJRHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChkaXJ0eUxlYWZJRHNbaV0uaW5kZXhPZihpZCkgPT09IDApIHtcbiAgICAgICAgaXNEaXJ0eSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzRGlydHkgJiYgbWVhc3VyZW1lbnQuY291bnRzW2lkXSA+IDApIHtcbiAgICAgIGNsZWFuQ29tcG9uZW50c1tpZF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2xlYW5Db21wb25lbnRzO1xufVxuXG52YXIgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzID0ge1xuICBnZXRFeGNsdXNpdmVTdW1tYXJ5OiBnZXRFeGNsdXNpdmVTdW1tYXJ5LFxuICBnZXRJbmNsdXNpdmVTdW1tYXJ5OiBnZXRJbmNsdXNpdmVTdW1tYXJ5LFxuICBnZXRET01TdW1tYXJ5OiBnZXRET01TdW1tYXJ5LFxuICBnZXRUb3RhbFRpbWU6IGdldFRvdGFsVGltZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXM7XG5cbn0se1wiLi9PYmplY3QuYXNzaWduXCI6MTc1fV0sMjA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbGVtZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDb250ZXh0ID0gcmVxdWlyZShcIi4vUmVhY3RDb250ZXh0XCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgUkVTRVJWRURfUFJPUFMgPSB7XG4gIGtleTogdHJ1ZSxcbiAgcmVmOiB0cnVlXG59O1xuXG4vKipcbiAqIFdhcm4gZm9yIG11dGF0aW9ucy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqL1xuZnVuY3Rpb24gZGVmaW5lV2FybmluZ1Byb3BlcnR5KG9iamVjdCwga2V5KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5fc3RvcmUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fc3RvcmVba2V5XTtcbiAgICB9LFxuXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnRG9uXFwndCBzZXQgdGhlICVzIHByb3BlcnR5IG9mIHRoZSBSZWFjdCBlbGVtZW50LiBJbnN0ZWFkLCAnICtcbiAgICAgICAgJ3NwZWNpZnkgdGhlIGNvcnJlY3QgdmFsdWUgd2hlbiBpbml0aWFsbHkgY3JlYXRpbmcgdGhlIGVsZW1lbnQuJyxcbiAgICAgICAga2V5XG4gICAgICApIDogbnVsbCk7XG4gICAgICB0aGlzLl9zdG9yZVtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgdXBkYXRlZCB0byB0cnVlIGlmIHRoZSBtZW1icmFuZSBpcyBzdWNjZXNzZnVsbHkgY3JlYXRlZC5cbiAqL1xudmFyIHVzZU11dGF0aW9uTWVtYnJhbmUgPSBmYWxzZTtcblxuLyoqXG4gKiBXYXJuIGZvciBtdXRhdGlvbnMuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICovXG5mdW5jdGlvbiBkZWZpbmVNdXRhdGlvbk1lbWJyYW5lKHByb3RvdHlwZSkge1xuICB0cnkge1xuICAgIHZhciBwc2V1ZG9Gcm96ZW5Qcm9wZXJ0aWVzID0ge1xuICAgICAgcHJvcHM6IHRydWVcbiAgICB9O1xuICAgIGZvciAodmFyIGtleSBpbiBwc2V1ZG9Gcm96ZW5Qcm9wZXJ0aWVzKSB7XG4gICAgICBkZWZpbmVXYXJuaW5nUHJvcGVydHkocHJvdG90eXBlLCBrZXkpO1xuICAgIH1cbiAgICB1c2VNdXRhdGlvbk1lbWJyYW5lID0gdHJ1ZTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIC8vIElFIHdpbGwgZmFpbCBvbiBkZWZpbmVQcm9wZXJ0eVxuICB9XG59XG5cbi8qKlxuICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIFJlYWN0IGVsZW1lbnRzLiBUaGlzIGlzIG9ubHkgdXNlZCB0byBtYWtlIHRoaXNcbiAqIHdvcmsgd2l0aCBhIGR5bmFtaWMgaW5zdGFuY2VvZiBjaGVjay4gTm90aGluZyBzaG91bGQgbGl2ZSBvbiB0aGlzIHByb3RvdHlwZS5cbiAqXG4gKiBAcGFyYW0geyp9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVmXG4gKiBAcGFyYW0geyp9IGtleVxuICogQHBhcmFtIHsqfSBwcm9wc1xuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEVsZW1lbnQgPSBmdW5jdGlvbih0eXBlLCBrZXksIHJlZiwgb3duZXIsIGNvbnRleHQsIHByb3BzKSB7XG4gIC8vIEJ1aWx0LWluIHByb3BlcnRpZXMgdGhhdCBiZWxvbmcgb24gdGhlIGVsZW1lbnRcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5rZXkgPSBrZXk7XG4gIHRoaXMucmVmID0gcmVmO1xuXG4gIC8vIFJlY29yZCB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGlzIGVsZW1lbnQuXG4gIHRoaXMuX293bmVyID0gb3duZXI7XG5cbiAgLy8gVE9ETzogRGVwcmVjYXRlIHdpdGhDb250ZXh0LCBhbmQgdGhlbiB0aGUgY29udGV4dCBiZWNvbWVzIGFjY2Vzc2libGVcbiAgLy8gdGhyb3VnaCB0aGUgb3duZXIuXG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuXG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAvLyBUaGUgdmFsaWRhdGlvbiBmbGFnIGFuZCBwcm9wcyBhcmUgY3VycmVudGx5IG11dGF0aXZlLiBXZSBwdXQgdGhlbSBvblxuICAgIC8vIGFuIGV4dGVybmFsIGJhY2tpbmcgc3RvcmUgc28gdGhhdCB3ZSBjYW4gZnJlZXplIHRoZSB3aG9sZSBvYmplY3QuXG4gICAgLy8gVGhpcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhIFdlYWtNYXAgb25jZSB0aGV5IGFyZSBpbXBsZW1lbnRlZCBpblxuICAgIC8vIGNvbW1vbmx5IHVzZWQgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzLlxuICAgIHRoaXMuX3N0b3JlID0ge3Byb3BzOiBwcm9wcywgb3JpZ2luYWxQcm9wczogYXNzaWduKHt9LCBwcm9wcyl9O1xuXG4gICAgLy8gVG8gbWFrZSBjb21wYXJpbmcgUmVhY3RFbGVtZW50cyBlYXNpZXIgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHdlIG1ha2VcbiAgICAvLyB0aGUgdmFsaWRhdGlvbiBmbGFnIG5vbi1lbnVtZXJhYmxlICh3aGVyZSBwb3NzaWJsZSwgd2hpY2ggc2hvdWxkXG4gICAgLy8gaW5jbHVkZSBldmVyeSBlbnZpcm9ubWVudCB3ZSBydW4gdGVzdHMgaW4pLCBzbyB0aGUgdGVzdCBmcmFtZXdvcmtcbiAgICAvLyBpZ25vcmVzIGl0LlxuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgIH1cbiAgICB0aGlzLl9zdG9yZS52YWxpZGF0ZWQgPSBmYWxzZTtcblxuICAgIC8vIFdlJ3JlIG5vdCBhbGxvd2VkIHRvIHNldCBwcm9wcyBkaXJlY3RseSBvbiB0aGUgb2JqZWN0IHNvIHdlIGVhcmx5XG4gICAgLy8gcmV0dXJuIGFuZCByZWx5IG9uIHRoZSBwcm90b3R5cGUgbWVtYnJhbmUgdG8gZm9yd2FyZCB0byB0aGUgYmFja2luZ1xuICAgIC8vIHN0b3JlLlxuICAgIGlmICh1c2VNdXRhdGlvbk1lbWJyYW5lKSB7XG4gICAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbn07XG5cbi8vIFdlIGludGVudGlvbmFsbHkgZG9uJ3QgZXhwb3NlIHRoZSBmdW5jdGlvbiBvbiB0aGUgY29uc3RydWN0b3IgcHJvcGVydHkuXG4vLyBSZWFjdEVsZW1lbnQgc2hvdWxkIGJlIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYSBwbGFpbiBvYmplY3QuXG5SZWFjdEVsZW1lbnQucHJvdG90eXBlID0ge1xuICBfaXNSZWFjdEVsZW1lbnQ6IHRydWVcbn07XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgZGVmaW5lTXV0YXRpb25NZW1icmFuZShSZWFjdEVsZW1lbnQucHJvdG90eXBlKTtcbn1cblxuUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbih0eXBlLCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZTtcblxuICAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG4gIHZhciBwcm9wcyA9IHt9O1xuXG4gIHZhciBrZXkgPSBudWxsO1xuICB2YXIgcmVmID0gbnVsbDtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICByZWYgPSBjb25maWcucmVmID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLnJlZjtcbiAgICBrZXkgPSBjb25maWcua2V5ID09PSB1bmRlZmluZWQgPyBudWxsIDogJycgKyBjb25maWcua2V5O1xuICAgIC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byBhIG5ldyBwcm9wcyBvYmplY3RcbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiZcbiAgICAgICAgICAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ2hpbGRyZW4gY2FuIGJlIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQsIGFuZCB0aG9zZSBhcmUgdHJhbnNmZXJyZWQgb250b1xuICAvLyB0aGUgbmV3bHkgYWxsb2NhdGVkIHByb3BzIG9iamVjdC5cbiAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG4gICAgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICB9XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9XG5cbiAgLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzXG4gIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKSB7XG4gICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzO1xuICAgIGZvciAocHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFJlYWN0RWxlbWVudChcbiAgICB0eXBlLFxuICAgIGtleSxcbiAgICByZWYsXG4gICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCxcbiAgICBSZWFjdENvbnRleHQuY3VycmVudCxcbiAgICBwcm9wc1xuICApO1xufTtcblxuUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBmYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQuYmluZChudWxsLCB0eXBlKTtcbiAgLy8gRXhwb3NlIHRoZSB0eXBlIG9uIHRoZSBmYWN0b3J5IGFuZCB0aGUgcHJvdG90eXBlIHNvIHRoYXQgaXQgY2FuIGJlXG4gIC8vIGVhc2lseSBhY2Nlc3NlZCBvbiBlbGVtZW50cy4gRS5nLiA8Rm9vIC8+LnR5cGUgPT09IEZvby50eXBlLlxuICAvLyBUaGlzIHNob3VsZCBub3QgYmUgbmFtZWQgYGNvbnN0cnVjdG9yYCBzaW5jZSB0aGlzIG1heSBub3QgYmUgdGhlIGZ1bmN0aW9uXG4gIC8vIHRoYXQgY3JlYXRlZCB0aGUgZWxlbWVudCwgYW5kIGl0IG1heSBub3QgZXZlbiBiZSBhIGNvbnN0cnVjdG9yLlxuICAvLyBMZWdhY3kgaG9vayBUT0RPOiBXYXJuIGlmIHRoaXMgaXMgYWNjZXNzZWRcbiAgZmFjdG9yeS50eXBlID0gdHlwZTtcbiAgcmV0dXJuIGZhY3Rvcnk7XG59O1xuXG5SZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMgPSBmdW5jdGlvbihvbGRFbGVtZW50LCBuZXdQcm9wcykge1xuICB2YXIgbmV3RWxlbWVudCA9IG5ldyBSZWFjdEVsZW1lbnQoXG4gICAgb2xkRWxlbWVudC50eXBlLFxuICAgIG9sZEVsZW1lbnQua2V5LFxuICAgIG9sZEVsZW1lbnQucmVmLFxuICAgIG9sZEVsZW1lbnQuX293bmVyLFxuICAgIG9sZEVsZW1lbnQuX2NvbnRleHQsXG4gICAgbmV3UHJvcHNcbiAgKTtcblxuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgLy8gSWYgdGhlIGtleSBvbiB0aGUgb3JpZ2luYWwgaXMgdmFsaWQsIHRoZW4gdGhlIGNsb25lIGlzIHZhbGlkXG4gICAgbmV3RWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gb2xkRWxlbWVudC5fc3RvcmUudmFsaWRhdGVkO1xuICB9XG4gIHJldHVybiBuZXdFbGVtZW50O1xufTtcblxuUmVhY3RFbGVtZW50LmNsb25lRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lO1xuXG4gIC8vIE9yaWdpbmFsIHByb3BzIGFyZSBjb3BpZWRcbiAgdmFyIHByb3BzID0gYXNzaWduKHt9LCBlbGVtZW50LnByb3BzKTtcblxuICAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG4gIHZhciBrZXkgPSBlbGVtZW50LmtleTtcbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuXG4gIC8vIE93bmVyIHdpbGwgYmUgcHJlc2VydmVkLCB1bmxlc3MgcmVmIGlzIG92ZXJyaWRkZW5cbiAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG5cbiAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgaWYgKGNvbmZpZy5yZWYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gU2lsZW50bHkgc3RlYWwgdGhlIHJlZiBmcm9tIHRoZSBwYXJlbnQuXG4gICAgICByZWYgPSBjb25maWcucmVmO1xuICAgICAgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgIH1cbiAgICBpZiAoY29uZmlnLmtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBrZXkgPSAnJyArIGNvbmZpZy5rZXk7XG4gICAgfVxuICAgIC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIG92ZXJyaWRlIGV4aXN0aW5nIHByb3BzXG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChjb25maWcuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmXG4gICAgICAgICAgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVhY3RFbGVtZW50KFxuICAgIGVsZW1lbnQudHlwZSxcbiAgICBrZXksXG4gICAgcmVmLFxuICAgIG93bmVyLFxuICAgIGVsZW1lbnQuX2NvbnRleHQsXG4gICAgcHJvcHNcbiAgKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG9iamVjdGAgaXMgYSB2YWxpZCBjb21wb25lbnQuXG4gKiBAZmluYWxcbiAqL1xuUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gIC8vIFJlYWN0VGVzdFV0aWxzIGlzIG9mdGVuIHVzZWQgb3V0c2lkZSBvZiBiZWZvcmVFYWNoIHdoZXJlIGFzIFJlYWN0IGlzXG4gIC8vIHdpdGhpbiBpdC4gVGhpcyBsZWFkcyB0byB0d28gZGlmZmVyZW50IGluc3RhbmNlcyBvZiBSZWFjdCBvbiB0aGUgc2FtZVxuICAvLyBwYWdlLiBUbyBpZGVudGlmeSBhIGVsZW1lbnQgZnJvbSBhIGRpZmZlcmVudCBSZWFjdCBpbnN0YW5jZSB3ZSB1c2VcbiAgLy8gYSBmbGFnIGluc3RlYWQgb2YgYW4gaW5zdGFuY2VvZiBjaGVjay5cbiAgdmFyIGlzRWxlbWVudCA9ICEhKG9iamVjdCAmJiBvYmplY3QuX2lzUmVhY3RFbGVtZW50KTtcbiAgLy8gaWYgKGlzRWxlbWVudCAmJiAhKG9iamVjdCBpbnN0YW5jZW9mIFJlYWN0RWxlbWVudCkpIHtcbiAgLy8gVGhpcyBpcyBhbiBpbmRpY2F0b3IgdGhhdCB5b3UncmUgdXNpbmcgbXVsdGlwbGUgdmVyc2lvbnMgb2YgUmVhY3QgYXQgdGhlXG4gIC8vIHNhbWUgdGltZS4gVGhpcyB3aWxsIHNjcmV3IHdpdGggb3duZXJzaGlwIGFuZCBzdHVmZi4gRml4IGl0LCBwbGVhc2UuXG4gIC8vIFRPRE86IFdlIGNvdWxkIHBvc3NpYmx5IHdhcm4gaGVyZS5cbiAgLy8gfVxuICByZXR1cm4gaXNFbGVtZW50O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL1JlYWN0Q29udGV4dFwiOjE5MCxcIi4vUmVhY3RDdXJyZW50T3duZXJcIjoxOTEsXCIuL3dhcm5pbmdcIjozMTgsXCJfcHJvY2Vzc1wiOjF9XSwyMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEVsZW1lbnRWYWxpZGF0b3JcbiAqL1xuXG4vKipcbiAqIFJlYWN0RWxlbWVudFZhbGlkYXRvciBwcm92aWRlcyBhIHdyYXBwZXIgYXJvdW5kIGEgZWxlbWVudCBmYWN0b3J5XG4gKiB3aGljaCB2YWxpZGF0ZXMgdGhlIHByb3BzIHBhc3NlZCB0byB0aGUgZWxlbWVudC4gVGhpcyBpcyBpbnRlbmRlZCB0byBiZVxuICogdXNlZCBvbmx5IGluIERFViBhbmQgY291bGQgYmUgcmVwbGFjZWQgYnkgYSBzdGF0aWMgdHlwZSBjaGVja2VyIGZvciBsYW5ndWFnZXNcbiAqIHRoYXQgc3VwcG9ydCBpdC5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RGcmFnbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RnJhZ21lbnRcIik7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnNcIik7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpO1xudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3ROYXRpdmVDb21wb25lbnRcIik7XG5cbnZhciBnZXRJdGVyYXRvckZuID0gcmVxdWlyZShcIi4vZ2V0SXRlcmF0b3JGblwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpIHtcbiAgaWYgKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICB2YXIgbmFtZSA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogV2FybiBpZiB0aGVyZSdzIG5vIGtleSBleHBsaWNpdGx5IHNldCBvbiBkeW5hbWljIGFycmF5cyBvZiBjaGlsZHJlbiBvclxuICogb2JqZWN0IGtleXMgYXJlIG5vdCB2YWxpZC4gVGhpcyBhbGxvd3MgdXMgdG8ga2VlcCB0cmFjayBvZiBjaGlsZHJlbiBiZXR3ZWVuXG4gKiB1cGRhdGVzLlxuICovXG52YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307XG5cbnZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcblxudmFyIE5VTUVSSUNfUFJPUEVSVFlfUkVHRVggPSAvXlxcZCskLztcblxuLyoqXG4gKiBHZXRzIHRoZSBpbnN0YW5jZSdzIG5hbWUgZm9yIHVzZSBpbiB3YXJuaW5ncy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEByZXR1cm4gez9zdHJpbmd9IERpc3BsYXkgbmFtZSBvciB1bmRlZmluZWRcbiAqL1xuZnVuY3Rpb24gZ2V0TmFtZShpbnN0YW5jZSkge1xuICB2YXIgcHVibGljSW5zdGFuY2UgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICBpZiAoIXB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICB2YXIgY29uc3RydWN0b3IgPSBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3RvcjtcbiAgaWYgKCFjb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IGNvbnN0cnVjdG9yLm5hbWUgfHwgdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGN1cnJlbnQgb3duZXIncyBkaXNwbGF5TmFtZSBmb3IgdXNlIGluIHdhcm5pbmdzLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHJldHVybiB7P3N0cmluZ30gRGlzcGxheSBuYW1lIG9yIHVuZGVmaW5lZFxuICovXG5mdW5jdGlvbiBnZXRDdXJyZW50T3duZXJEaXNwbGF5TmFtZSgpIHtcbiAgdmFyIGN1cnJlbnQgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICByZXR1cm4gKFxuICAgIGN1cnJlbnQgJiYgZ2V0TmFtZShjdXJyZW50KSB8fCB1bmRlZmluZWRcbiAgKTtcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZSBlbGVtZW50IGRvZXNuJ3QgaGF2ZSBhbiBleHBsaWNpdCBrZXkgYXNzaWduZWQgdG8gaXQuXG4gKiBUaGlzIGVsZW1lbnQgaXMgaW4gYW4gYXJyYXkuIFRoZSBhcnJheSBjb3VsZCBncm93IGFuZCBzaHJpbmsgb3IgYmVcbiAqIHJlb3JkZXJlZC4gQWxsIGNoaWxkcmVuIHRoYXQgaGF2ZW4ndCBhbHJlYWR5IGJlZW4gdmFsaWRhdGVkIGFyZSByZXF1aXJlZCB0b1xuICogaGF2ZSBhIFwia2V5XCIgcHJvcGVydHkgYXNzaWduZWQgdG8gaXQuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRoYXQgcmVxdWlyZXMgYSBrZXkuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgZWxlbWVudCdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICBpZiAoZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkIHx8IGVsZW1lbnQua2V5ICE9IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcblxuICB3YXJuQW5kTW9uaXRvckZvcktleVVzZShcbiAgICAnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJyxcbiAgICBlbGVtZW50LFxuICAgIHBhcmVudFR5cGVcbiAgKTtcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZSBrZXkgaXMgYmVpbmcgZGVmaW5lZCBhcyBhbiBvYmplY3QgcHJvcGVydHkgYnV0IGhhcyBhbiBpbmNvcnJlY3RcbiAqIHZhbHVlLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUga2V5LlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgQ29tcG9uZW50IHRoYXQgcmVxdWlyZXMgYSBrZXkuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgZWxlbWVudCdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydHlLZXkobmFtZSwgZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICBpZiAoIU5VTUVSSUNfUFJPUEVSVFlfUkVHRVgudGVzdChuYW1lKSkge1xuICAgIHJldHVybjtcbiAgfVxuICB3YXJuQW5kTW9uaXRvckZvcktleVVzZShcbiAgICAnQ2hpbGQgb2JqZWN0cyBzaG91bGQgaGF2ZSBub24tbnVtZXJpYyBrZXlzIHNvIG9yZGVyaW5nIGlzIHByZXNlcnZlZC4nLFxuICAgIGVsZW1lbnQsXG4gICAgcGFyZW50VHlwZVxuICApO1xufVxuXG4vKipcbiAqIFNoYXJlZCB3YXJuaW5nIGFuZCBtb25pdG9yaW5nIGNvZGUgZm9yIHRoZSBrZXkgd2FybmluZ3MuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgYmFzZSB3YXJuaW5nIHRoYXQgZ2V0cyBvdXRwdXQuXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBDb21wb25lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBlbGVtZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gd2FybkFuZE1vbml0b3JGb3JLZXlVc2UobWVzc2FnZSwgZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICB2YXIgb3duZXJOYW1lID0gZ2V0Q3VycmVudE93bmVyRGlzcGxheU5hbWUoKTtcbiAgdmFyIHBhcmVudE5hbWUgPSB0eXBlb2YgcGFyZW50VHlwZSA9PT0gJ3N0cmluZycgP1xuICAgIHBhcmVudFR5cGUgOiBwYXJlbnRUeXBlLmRpc3BsYXlOYW1lIHx8IHBhcmVudFR5cGUubmFtZTtcblxuICB2YXIgdXNlTmFtZSA9IG93bmVyTmFtZSB8fCBwYXJlbnROYW1lO1xuICB2YXIgbWVtb2l6ZXIgPSBvd25lckhhc0tleVVzZVdhcm5pbmdbbWVzc2FnZV0gfHwgKFxuICAgIChvd25lckhhc0tleVVzZVdhcm5pbmdbbWVzc2FnZV0gPSB7fSlcbiAgKTtcbiAgaWYgKG1lbW9pemVyLmhhc093blByb3BlcnR5KHVzZU5hbWUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIG1lbW9pemVyW3VzZU5hbWVdID0gdHJ1ZTtcblxuICB2YXIgcGFyZW50T3JPd25lckFkZGVuZHVtID1cbiAgICBvd25lck5hbWUgPyAoXCIgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgXCIgKyBvd25lck5hbWUgKyBcIi5cIikgOlxuICAgIHBhcmVudE5hbWUgPyAoXCIgQ2hlY2sgdGhlIFJlYWN0LnJlbmRlciBjYWxsIHVzaW5nIDxcIiArIHBhcmVudE5hbWUgKyBcIj4uXCIpIDpcbiAgICAnJztcblxuICAvLyBVc3VhbGx5IHRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBvZmZlbmRlciwgYnV0IGlmIGl0IGFjY2VwdHMgY2hpbGRyZW4gYXMgYVxuICAvLyBwcm9wZXJ0eSwgaXQgbWF5IGJlIHRoZSBjcmVhdG9yIG9mIHRoZSBjaGlsZCB0aGF0J3MgcmVzcG9uc2libGUgZm9yXG4gIC8vIGFzc2lnbmluZyBpdCBhIGtleS5cbiAgdmFyIGNoaWxkT3duZXJBZGRlbmR1bSA9ICcnO1xuICBpZiAoZWxlbWVudCAmJlxuICAgICAgZWxlbWVudC5fb3duZXIgJiZcbiAgICAgIGVsZW1lbnQuX293bmVyICE9PSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgLy8gTmFtZSBvZiB0aGUgY29tcG9uZW50IHRoYXQgb3JpZ2luYWxseSBjcmVhdGVkIHRoaXMgY2hpbGQuXG4gICAgdmFyIGNoaWxkT3duZXJOYW1lID0gZ2V0TmFtZShlbGVtZW50Ll9vd25lcik7XG5cbiAgICBjaGlsZE93bmVyQWRkZW5kdW0gPSAoXCIgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gXCIgKyBjaGlsZE93bmVyTmFtZSArIFwiLlwiKTtcbiAgfVxuXG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgIGZhbHNlLFxuICAgIG1lc3NhZ2UgKyAnJXMlcyBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWtleXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJyxcbiAgICBwYXJlbnRPck93bmVyQWRkZW5kdW0sXG4gICAgY2hpbGRPd25lckFkZGVuZHVtXG4gICkgOiBudWxsKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCBldmVyeSBlbGVtZW50IGVpdGhlciBpcyBwYXNzZWQgaW4gYSBzdGF0aWMgbG9jYXRpb24sIGluIGFuXG4gKiBhcnJheSB3aXRoIGFuIGV4cGxpY2l0IGtleXMgcHJvcGVydHkgZGVmaW5lZCwgb3IgaW4gYW4gb2JqZWN0IGxpdGVyYWxcbiAqIHdpdGggdmFsaWQga2V5IHByb3BlcnR5LlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdE5vZGV9IG5vZGUgU3RhdGljYWxseSBwYXNzZWQgY2hpbGQgb2YgYW55IHR5cGUuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgbm9kZSdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlQ2hpbGRLZXlzKG5vZGUsIHBhcmVudFR5cGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IG5vZGVbaV07XG4gICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KGNoaWxkLCBwYXJlbnRUeXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5vZGUpKSB7XG4gICAgLy8gVGhpcyBlbGVtZW50IHdhcyBwYXNzZWQgaW4gYSB2YWxpZCBsb2NhdGlvbi5cbiAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKG5vZGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obm9kZSk7XG4gICAgLy8gRW50cnkgaXRlcmF0b3JzIHByb3ZpZGUgaW1wbGljaXQga2V5cy5cbiAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IG5vZGUuZW50cmllcykge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwobm9kZSk7XG4gICAgICAgIHZhciBzdGVwO1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShzdGVwLnZhbHVlLCBwYXJlbnRUeXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGZyYWdtZW50ID0gUmVhY3RGcmFnbWVudC5leHRyYWN0SWZGcmFnbWVudChub2RlKTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBmcmFnbWVudCkge1xuICAgICAgICBpZiAoZnJhZ21lbnQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIHZhbGlkYXRlUHJvcGVydHlLZXkoa2V5LCBmcmFnbWVudFtrZXldLCBwYXJlbnRUeXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCB0aGF0IHRoZSBwcm9wcyBhcmUgdmFsaWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BUeXBlcyBNYXAgb2YgcHJvcCBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyhjb21wb25lbnROYW1lLCBwcm9wVHlwZXMsIHByb3BzLCBsb2NhdGlvbikge1xuICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICBpZiAocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgdmFyIGVycm9yO1xuICAgICAgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgdHlwZW9mIHByb3BUeXBlc1twcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsXG4gICAgICAgICAgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gJyArXG4gICAgICAgICAgJ1JlYWN0LlByb3BUeXBlcy4nLFxuICAgICAgICAgIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJyxcbiAgICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sXG4gICAgICAgICAgcHJvcE5hbWVcbiAgICAgICAgKSA6IGludmFyaWFudCh0eXBlb2YgcHJvcFR5cGVzW3Byb3BOYW1lXSA9PT0gJ2Z1bmN0aW9uJykpO1xuICAgICAgICBlcnJvciA9IHByb3BUeXBlc1twcm9wTmFtZV0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgfVxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgLy8gT25seSBtb25pdG9yIHRoaXMgZmFpbHVyZSBvbmNlIGJlY2F1c2UgdGhlcmUgdGVuZHMgdG8gYmUgYSBsb3Qgb2YgdGhlXG4gICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG5cbiAgICAgICAgdmFyIGFkZGVuZHVtID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKHRoaXMpO1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBwcm9wVHlwZTogJXMlcycsIGVycm9yLm1lc3NhZ2UsIGFkZGVuZHVtKSA6IG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgd2FybmVkUHJvcHNNdXRhdGlvbnMgPSB7fTtcblxuLyoqXG4gKiBXYXJuIGFib3V0IG11dGF0aW5nIHByb3BzIHdoZW4gc2V0dGluZyBgcHJvcE5hbWVgIG9uIGBlbGVtZW50YC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcE5hbWUgVGhlIHN0cmluZyBrZXkgd2l0aGluIHByb3BzIHRoYXQgd2FzIHNldFxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gd2FybkZvclByb3BzTXV0YXRpb24ocHJvcE5hbWUsIGVsZW1lbnQpIHtcbiAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG4gIHZhciBlbGVtZW50TmFtZSA9IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHR5cGUgOiB0eXBlLmRpc3BsYXlOYW1lO1xuICB2YXIgb3duZXJOYW1lID0gZWxlbWVudC5fb3duZXIgP1xuICAgIGVsZW1lbnQuX293bmVyLmdldFB1YmxpY0luc3RhbmNlKCkuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgOiBudWxsO1xuXG4gIHZhciB3YXJuaW5nS2V5ID0gcHJvcE5hbWUgKyAnfCcgKyBlbGVtZW50TmFtZSArICd8JyArIG93bmVyTmFtZTtcbiAgaWYgKHdhcm5lZFByb3BzTXV0YXRpb25zLmhhc093blByb3BlcnR5KHdhcm5pbmdLZXkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdhcm5lZFByb3BzTXV0YXRpb25zW3dhcm5pbmdLZXldID0gdHJ1ZTtcblxuICB2YXIgZWxlbWVudEluZm8gPSAnJztcbiAgaWYgKGVsZW1lbnROYW1lKSB7XG4gICAgZWxlbWVudEluZm8gPSAnIDwnICsgZWxlbWVudE5hbWUgKyAnIC8+JztcbiAgfVxuICB2YXIgb3duZXJJbmZvID0gJyc7XG4gIGlmIChvd25lck5hbWUpIHtcbiAgICBvd25lckluZm8gPSAnIFRoZSBlbGVtZW50IHdhcyBjcmVhdGVkIGJ5ICcgKyBvd25lck5hbWUgKyAnLic7XG4gIH1cblxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICBmYWxzZSxcbiAgICAnRG9uXFwndCBzZXQgLnByb3BzLiVzIG9mIHRoZSBSZWFjdCBjb21wb25lbnQlcy4gSW5zdGVhZCwgc3BlY2lmeSB0aGUgJyArXG4gICAgJ2NvcnJlY3QgdmFsdWUgd2hlbiBpbml0aWFsbHkgY3JlYXRpbmcgdGhlIGVsZW1lbnQgb3IgdXNlICcgK1xuICAgICdSZWFjdC5jbG9uZUVsZW1lbnQgdG8gbWFrZSBhIG5ldyBlbGVtZW50IHdpdGggdXBkYXRlZCBwcm9wcy4lcycsXG4gICAgcHJvcE5hbWUsXG4gICAgZWxlbWVudEluZm8sXG4gICAgb3duZXJJbmZvXG4gICkgOiBudWxsKTtcbn1cblxuLy8gSW5saW5lIE9iamVjdC5pcyBwb2x5ZmlsbFxuZnVuY3Rpb24gaXMoYSwgYikge1xuICBpZiAoYSAhPT0gYSkge1xuICAgIC8vIE5hTlxuICAgIHJldHVybiBiICE9PSBiO1xuICB9XG4gIGlmIChhID09PSAwICYmIGIgPT09IDApIHtcbiAgICAvLyArLTBcbiAgICByZXR1cm4gMSAvIGEgPT09IDEgLyBiO1xuICB9XG4gIHJldHVybiBhID09PSBiO1xufVxuXG4vKipcbiAqIEdpdmVuIGFuIGVsZW1lbnQsIGNoZWNrIGlmIGl0cyBwcm9wcyBoYXZlIGJlZW4gbXV0YXRlZCBzaW5jZSBlbGVtZW50XG4gKiBjcmVhdGlvbiAob3IgdGhlIGxhc3QgY2FsbCB0byB0aGlzIGZ1bmN0aW9uKS4gSW4gcGFydGljdWxhciwgY2hlY2sgaWYgYW55XG4gKiBuZXcgcHJvcHMgaGF2ZSBiZWVuIGFkZGVkLCB3aGljaCB3ZSBjYW4ndCBkaXJlY3RseSBjYXRjaCBieSBkZWZpbmluZyB3YXJuaW5nXG4gKiBwcm9wZXJ0aWVzIG9uIHRoZSBwcm9wcyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFByb3BzKGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50Ll9zdG9yZSkge1xuICAgIC8vIEVsZW1lbnQgd2FzIGNyZWF0ZWQgdXNpbmcgYG5ldyBSZWFjdEVsZW1lbnRgIGRpcmVjdGx5IG9yIHdpdGhcbiAgICAvLyBgUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnRgOyBza2lwIG11dGF0aW9uIGNoZWNraW5nXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG9yaWdpbmFsUHJvcHMgPSBlbGVtZW50Ll9zdG9yZS5vcmlnaW5hbFByb3BzO1xuICB2YXIgcHJvcHMgPSBlbGVtZW50LnByb3BzO1xuXG4gIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BzKSB7XG4gICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgaWYgKCFvcmlnaW5hbFByb3BzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSB8fFxuICAgICAgICAgICFpcyhvcmlnaW5hbFByb3BzW3Byb3BOYW1lXSwgcHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICB3YXJuRm9yUHJvcHNNdXRhdGlvbihwcm9wTmFtZSwgZWxlbWVudCk7XG5cbiAgICAgICAgLy8gQ29weSBvdmVyIHRoZSBuZXcgdmFsdWUgc28gdGhhdCB0aGUgdHdvIHByb3BzIG9iamVjdHMgbWF0Y2ggYWdhaW5cbiAgICAgICAgb3JpZ2luYWxQcm9wc1twcm9wTmFtZV0gPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogR2l2ZW4gYW4gZWxlbWVudCwgdmFsaWRhdGUgdGhhdCBpdHMgcHJvcHMgZm9sbG93IHRoZSBwcm9wVHlwZXMgZGVmaW5pdGlvbixcbiAqIHByb3ZpZGVkIGJ5IHRoZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSA9PSBudWxsKSB7XG4gICAgLy8gVGhpcyBoYXMgYWxyZWFkeSB3YXJuZWQuIERvbid0IHRocm93LlxuICAgIHJldHVybjtcbiAgfVxuICAvLyBFeHRyYWN0IHRoZSBjb21wb25lbnQgY2xhc3MgZnJvbSB0aGUgZWxlbWVudC4gQ29udmVydHMgc3RyaW5nIHR5cGVzXG4gIC8vIHRvIGEgY29tcG9zaXRlIGNsYXNzIHdoaWNoIG1heSBoYXZlIHByb3BUeXBlcy5cbiAgLy8gVE9ETzogVmFsaWRhdGluZyBhIHN0cmluZydzIHByb3BUeXBlcyBpcyBub3QgZGVjb3VwbGVkIGZyb20gdGhlXG4gIC8vIHJlbmRlcmluZyB0YXJnZXQgd2hpY2ggaXMgcHJvYmxlbWF0aWMuXG4gIHZhciBjb21wb25lbnRDbGFzcyA9IFJlYWN0TmF0aXZlQ29tcG9uZW50LmdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudChcbiAgICBlbGVtZW50XG4gICk7XG4gIHZhciBuYW1lID0gY29tcG9uZW50Q2xhc3MuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50Q2xhc3MubmFtZTtcbiAgaWYgKGNvbXBvbmVudENsYXNzLnByb3BUeXBlcykge1xuICAgIGNoZWNrUHJvcFR5cGVzKFxuICAgICAgbmFtZSxcbiAgICAgIGNvbXBvbmVudENsYXNzLnByb3BUeXBlcyxcbiAgICAgIGVsZW1lbnQucHJvcHMsXG4gICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3BcbiAgICApO1xuICB9XG4gIGlmICh0eXBlb2YgY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBjb21wb25lbnRDbGFzcy5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQsXG4gICAgICAnZ2V0RGVmYXVsdFByb3BzIGlzIG9ubHkgdXNlZCBvbiBjbGFzc2ljIFJlYWN0LmNyZWF0ZUNsYXNzICcgK1xuICAgICAgJ2RlZmluaXRpb25zLiBVc2UgYSBzdGF0aWMgcHJvcGVydHkgbmFtZWQgYGRlZmF1bHRQcm9wc2AgaW5zdGVhZC4nXG4gICAgKSA6IG51bGwpO1xuICB9XG59XG5cbnZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSB7XG5cbiAgY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFByb3BzOiBjaGVja0FuZFdhcm5Gb3JNdXRhdGVkUHJvcHMsXG5cbiAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24odHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gICAgLy8gV2Ugd2FybiBpbiB0aGlzIGNhc2UgYnV0IGRvbid0IHRocm93LiBXZSBleHBlY3QgdGhlIGVsZW1lbnQgY3JlYXRpb24gdG9cbiAgICAvLyBzdWNjZWVkIGFuZCB0aGVyZSB3aWxsIGxpa2VseSBiZSBlcnJvcnMgaW4gcmVuZGVyLlxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgdHlwZSAhPSBudWxsLFxuICAgICAgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQ6IHR5cGUgc2hvdWxkIG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4gSXQgc2hvdWxkICcgK1xuICAgICAgICAnYmUgYSBzdHJpbmcgKGZvciBET00gZWxlbWVudHMpIG9yIGEgUmVhY3RDbGFzcyAoZm9yIGNvbXBvc2l0ZSAnICtcbiAgICAgICAgJ2NvbXBvbmVudHMpLidcbiAgICApIDogbnVsbCk7XG5cbiAgICB2YXIgZWxlbWVudCA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAvLyBUaGUgcmVzdWx0IGNhbiBiZSBudWxsaXNoIGlmIGEgbW9jayBvciBhIGN1c3RvbSBmdW5jdGlvbiBpcyB1c2VkLlxuICAgIC8vIFRPRE86IERyb3AgdGhpcyB3aGVuIHRoZXNlIGFyZSBubyBsb25nZXIgYWxsb3dlZCBhcyB0aGUgdHlwZSBhcmd1bWVudC5cbiAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCB0eXBlKTtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KTtcblxuICAgIHJldHVybiBlbGVtZW50O1xuICB9LFxuXG4gIGNyZWF0ZUZhY3Rvcnk6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICB2YXIgdmFsaWRhdGVkRmFjdG9yeSA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVFbGVtZW50LmJpbmQoXG4gICAgICBudWxsLFxuICAgICAgdHlwZVxuICAgICk7XG4gICAgLy8gTGVnYWN5IGhvb2sgVE9ETzogV2FybiBpZiB0aGlzIGlzIGFjY2Vzc2VkXG4gICAgdmFsaWRhdGVkRmFjdG9yeS50eXBlID0gdHlwZTtcblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgICB2YWxpZGF0ZWRGYWN0b3J5LFxuICAgICAgICAgICd0eXBlJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICdGYWN0b3J5LnR5cGUgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHRoZSBjbGFzcyBkaXJlY3RseSAnICtcbiAgICAgICAgICAgICAgICAnYmVmb3JlIHBhc3NpbmcgaXQgdG8gY3JlYXRlRmFjdG9yeS4nXG4gICAgICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0eXBlJywge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB0eXBlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgIC8vIElFIHdpbGwgZmFpbCBvbiBkZWZpbmVQcm9wZXJ0eSAoZXM1LXNoaW0vc2hhbSB0b28pXG4gICAgICB9XG4gICAgfVxuXG5cbiAgICByZXR1cm4gdmFsaWRhdGVkRmFjdG9yeTtcbiAgfSxcblxuICBjbG9uZUVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BzLCBjaGlsZHJlbikge1xuICAgIHZhciBuZXdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIG5ld0VsZW1lbnQudHlwZSk7XG4gICAgfVxuICAgIHZhbGlkYXRlUHJvcFR5cGVzKG5ld0VsZW1lbnQpO1xuICAgIHJldHVybiBuZXdFbGVtZW50O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEN1cnJlbnRPd25lclwiOjE5MSxcIi4vUmVhY3RFbGVtZW50XCI6MjA5LFwiLi9SZWFjdEZyYWdtZW50XCI6MjE1LFwiLi9SZWFjdE5hdGl2ZUNvbXBvbmVudFwiOjIyNixcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcIjoyMzAsXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnNcIjoyMzEsXCIuL2dldEl0ZXJhdG9yRm5cIjoyODgsXCIuL2ludmFyaWFudFwiOjI5NyxcIi4vd2FybmluZ1wiOjMxOCxcIl9wcm9jZXNzXCI6MX1dLDIxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RW1wdHlDb21wb25lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VNYXBcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbnZhciBjb21wb25lbnQ7XG4vLyBUaGlzIHJlZ2lzdHJ5IGtlZXBzIHRyYWNrIG9mIHRoZSBSZWFjdCBJRHMgb2YgdGhlIGNvbXBvbmVudHMgdGhhdCByZW5kZXJlZCB0b1xuLy8gYG51bGxgIChpbiByZWFsaXR5IGEgcGxhY2Vob2xkZXIgc3VjaCBhcyBgbm9zY3JpcHRgKVxudmFyIG51bGxDb21wb25lbnRJRHNSZWdpc3RyeSA9IHt9O1xuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgaW5qZWN0RW1wdHlDb21wb25lbnQ6IGZ1bmN0aW9uKGVtcHR5Q29tcG9uZW50KSB7XG4gICAgY29tcG9uZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoZW1wdHlDb21wb25lbnQpO1xuICB9XG59O1xuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudFR5cGUgPSBmdW5jdGlvbigpIHt9O1xuUmVhY3RFbXB0eUNvbXBvbmVudFR5cGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQodGhpcyk7XG4gIC8vIFRPRE86IE1ha2Ugc3VyZSB3ZSBydW4gdGhlc2UgbWV0aG9kcyBpbiB0aGUgY29ycmVjdCBvcmRlciwgd2Ugc2hvdWxkbid0XG4gIC8vIG5lZWQgdGhpcyBjaGVjay4gV2UncmUgZ29pbmcgdG8gYXNzdW1lIGlmIHdlJ3JlIGhlcmUgaXQgbWVhbnMgd2UgcmFuXG4gIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50IGFscmVhZHkgc28gdGhlcmUgaXMgbm8gaW50ZXJuYWwgaW5zdGFuY2UgKGl0IGdldHNcbiAgLy8gcmVtb3ZlZCBhcyBwYXJ0IG9mIHRoZSB1bm1vdW50aW5nIHByb2Nlc3MpLlxuICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQoaW50ZXJuYWxJbnN0YW5jZS5fcm9vdE5vZGVJRCk7XG59O1xuUmVhY3RFbXB0eUNvbXBvbmVudFR5cGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQodGhpcyk7XG4gIC8vIFRPRE86IEdldCByaWQgb2YgdGhpcyBjaGVjay4gU2VlIFRPRE8gaW4gY29tcG9uZW50RGlkTW91bnQuXG4gIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBkZXJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGludGVybmFsSW5zdGFuY2UuX3Jvb3ROb2RlSUQpO1xufTtcblJlYWN0RW1wdHlDb21wb25lbnRUeXBlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBjb21wb25lbnQsXG4gICAgJ1RyeWluZyB0byByZXR1cm4gbnVsbCBmcm9tIGEgcmVuZGVyLCBidXQgbm8gbnVsbCBwbGFjZWhvbGRlciBjb21wb25lbnQgJyArXG4gICAgJ3dhcyBpbmplY3RlZC4nXG4gICkgOiBpbnZhcmlhbnQoY29tcG9uZW50KSk7XG4gIHJldHVybiBjb21wb25lbnQoKTtcbn07XG5cbnZhciBlbXB0eUVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudChSZWFjdEVtcHR5Q29tcG9uZW50VHlwZSk7XG5cbi8qKlxuICogTWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENvbXBvbmVudCdzIGBfcm9vdE5vZGVJRGAuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGlkKSB7XG4gIG51bGxDb21wb25lbnRJRHNSZWdpc3RyeVtpZF0gPSB0cnVlO1xufVxuXG4vKipcbiAqIFVubWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsOiBpdCByZW5kZXJzIHRvIHNvbWV0aGluZyBub3cuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqL1xuZnVuY3Rpb24gZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRChpZCkge1xuICBkZWxldGUgbnVsbENvbXBvbmVudElEc1JlZ2lzdHJ5W2lkXTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbXBvbmVudCBpcyByZW5kZXJlZCB0byBudWxsLlxuICovXG5mdW5jdGlvbiBpc051bGxDb21wb25lbnRJRChpZCkge1xuICByZXR1cm4gISFudWxsQ29tcG9uZW50SURzUmVnaXN0cnlbaWRdO1xufVxuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHtcbiAgZW1wdHlFbGVtZW50OiBlbXB0eUVsZW1lbnQsXG4gIGluamVjdGlvbjogUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbixcbiAgaXNOdWxsQ29tcG9uZW50SUQ6IGlzTnVsbENvbXBvbmVudElEXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RW1wdHlDb21wb25lbnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0RWxlbWVudFwiOjIwOSxcIi4vUmVhY3RJbnN0YW5jZU1hcFwiOjIxOSxcIi4vaW52YXJpYW50XCI6Mjk3LFwiX3Byb2Nlc3NcIjoxfV0sMjEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEVycm9yVXRpbHNcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdEVycm9yVXRpbHMgPSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZ3VhcmRlZCB2ZXJzaW9uIG9mIGEgZnVuY3Rpb24uIFRoaXMgaXMgc3VwcG9zZWQgdG8gbWFrZSBkZWJ1Z2dpbmdcbiAgICogb2YgZXZlbnQgaGFuZGxlcnMgZWFzaWVyLiBUbyBhaWQgZGVidWdnaW5nIHdpdGggdGhlIGJyb3dzZXIncyBkZWJ1Z2dlcixcbiAgICogdGhpcyBjdXJyZW50bHkgc2ltcGx5IHJldHVybnMgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIEZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBndWFyZFxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICovXG4gIGd1YXJkOiBmdW5jdGlvbihmdW5jLCBuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFcnJvclV0aWxzO1xuXG59LHt9XSwyMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luSHViXCIpO1xuXG5mdW5jdGlvbiBydW5FdmVudFF1ZXVlSW5CYXRjaChldmVudHMpIHtcbiAgRXZlbnRQbHVnaW5IdWIuZW5xdWV1ZUV2ZW50cyhldmVudHMpO1xuICBFdmVudFBsdWdpbkh1Yi5wcm9jZXNzRXZlbnRRdWV1ZSgpO1xufVxuXG52YXIgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiA9IHtcblxuICAvKipcbiAgICogU3RyZWFtcyBhIGZpcmVkIHRvcC1sZXZlbCBldmVudCB0byBgRXZlbnRQbHVnaW5IdWJgIHdoZXJlIHBsdWdpbnMgaGF2ZSB0aGVcbiAgICogb3Bwb3J0dW5pdHkgdG8gY3JlYXRlIGBSZWFjdEV2ZW50YHMgdG8gYmUgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGVudmlyb25tZW50IGV2ZW50LlxuICAgKi9cbiAgaGFuZGxlVG9wTGV2ZWw6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnQpIHtcbiAgICB2YXIgZXZlbnRzID0gRXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50cyhcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcblxuICAgIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFdmVudEVtaXR0ZXJNaXhpbjtcblxufSx7XCIuL0V2ZW50UGx1Z2luSHViXCI6MTY0fV0sMjE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEV2ZW50TGlzdGVuZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoXCIuL0V2ZW50TGlzdGVuZXJcIik7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoXCIuL2dldEV2ZW50VGFyZ2V0XCIpO1xudmFyIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uID0gcmVxdWlyZShcIi4vZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb25cIik7XG5cbi8qKlxuICogRmluZHMgdGhlIHBhcmVudCBSZWFjdCBjb21wb25lbnQgb2YgYG5vZGVgLlxuICpcbiAqIEBwYXJhbSB7Kn0gbm9kZVxuICogQHJldHVybiB7P0RPTUV2ZW50VGFyZ2V0fSBQYXJlbnQgY29udGFpbmVyLCBvciBgbnVsbGAgaWYgdGhlIHNwZWNpZmllZCBub2RlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIG5vdCBuZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRQYXJlbnQobm9kZSkge1xuICAvLyBUT0RPOiBJdCBtYXkgYmUgYSBnb29kIGlkZWEgdG8gY2FjaGUgdGhpcyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IERPTVxuICAvLyB0cmF2ZXJzYWwsIGJ1dCBjYWNoaW5nIGlzIGRpZmZpY3VsdCB0byBkbyBjb3JyZWN0bHkgd2l0aG91dCB1c2luZyBhXG4gIC8vIG11dGF0aW9uIG9ic2VydmVyIHRvIGxpc3RlbiBmb3IgYWxsIERPTSBjaGFuZ2VzLlxuICB2YXIgbm9kZUlEID0gUmVhY3RNb3VudC5nZXRJRChub2RlKTtcbiAgdmFyIHJvb3RJRCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmdldFJlYWN0Um9vdElERnJvbU5vZGVJRChub2RlSUQpO1xuICB2YXIgY29udGFpbmVyID0gUmVhY3RNb3VudC5maW5kUmVhY3RDb250YWluZXJGb3JJRChyb290SUQpO1xuICB2YXIgcGFyZW50ID0gUmVhY3RNb3VudC5nZXRGaXJzdFJlYWN0RE9NKGNvbnRhaW5lcik7XG4gIHJldHVybiBwYXJlbnQ7XG59XG5cbi8vIFVzZWQgdG8gc3RvcmUgYW5jZXN0b3IgaGllcmFyY2h5IGluIHRvcCBsZXZlbCBjYWxsYmFja1xuZnVuY3Rpb24gVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgdGhpcy50b3BMZXZlbFR5cGUgPSB0b3BMZXZlbFR5cGU7XG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgdGhpcy5hbmNlc3RvcnMgPSBbXTtcbn1cbmFzc2lnbihUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcucHJvdG90eXBlLCB7XG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudG9wTGV2ZWxUeXBlID0gbnVsbDtcbiAgICB0aGlzLm5hdGl2ZUV2ZW50ID0gbnVsbDtcbiAgICB0aGlzLmFuY2VzdG9ycy5sZW5ndGggPSAwO1xuICB9XG59KTtcblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhcbiAgVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLFxuICBQb29sZWRDbGFzcy50d29Bcmd1bWVudFBvb2xlclxuKTtcblxuZnVuY3Rpb24gaGFuZGxlVG9wTGV2ZWxJbXBsKGJvb2tLZWVwaW5nKSB7XG4gIHZhciB0b3BMZXZlbFRhcmdldCA9IFJlYWN0TW91bnQuZ2V0Rmlyc3RSZWFjdERPTShcbiAgICBnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudClcbiAgKSB8fCB3aW5kb3c7XG5cbiAgLy8gTG9vcCB0aHJvdWdoIHRoZSBoaWVyYXJjaHksIGluIGNhc2UgdGhlcmUncyBhbnkgbmVzdGVkIGNvbXBvbmVudHMuXG4gIC8vIEl0J3MgaW1wb3J0YW50IHRoYXQgd2UgYnVpbGQgdGhlIGFycmF5IG9mIGFuY2VzdG9ycyBiZWZvcmUgY2FsbGluZyBhbnlcbiAgLy8gZXZlbnQgaGFuZGxlcnMsIGJlY2F1c2UgZXZlbnQgaGFuZGxlcnMgY2FuIG1vZGlmeSB0aGUgRE9NLCBsZWFkaW5nIHRvXG4gIC8vIGluY29uc2lzdGVuY2llcyB3aXRoIFJlYWN0TW91bnQncyBub2RlIGNhY2hlLiBTZWUgIzExMDUuXG4gIHZhciBhbmNlc3RvciA9IHRvcExldmVsVGFyZ2V0O1xuICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICBib29rS2VlcGluZy5hbmNlc3RvcnMucHVzaChhbmNlc3Rvcik7XG4gICAgYW5jZXN0b3IgPSBmaW5kUGFyZW50KGFuY2VzdG9yKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYm9va0tlZXBpbmcuYW5jZXN0b3JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHRvcExldmVsVGFyZ2V0ID0gYm9va0tlZXBpbmcuYW5jZXN0b3JzW2ldO1xuICAgIHZhciB0b3BMZXZlbFRhcmdldElEID0gUmVhY3RNb3VudC5nZXRJRCh0b3BMZXZlbFRhcmdldCkgfHwgJyc7XG4gICAgUmVhY3RFdmVudExpc3RlbmVyLl9oYW5kbGVUb3BMZXZlbChcbiAgICAgIGJvb2tLZWVwaW5nLnRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzY3JvbGxWYWx1ZU1vbml0b3IoY2IpIHtcbiAgdmFyIHNjcm9sbFBvc2l0aW9uID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24od2luZG93KTtcbiAgY2Ioc2Nyb2xsUG9zaXRpb24pO1xufVxuXG52YXIgUmVhY3RFdmVudExpc3RlbmVyID0ge1xuICBfZW5hYmxlZDogdHJ1ZSxcbiAgX2hhbmRsZVRvcExldmVsOiBudWxsLFxuXG4gIFdJTkRPV19IQU5ETEU6IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHdpbmRvdyA6IG51bGwsXG5cbiAgc2V0SGFuZGxlVG9wTGV2ZWw6IGZ1bmN0aW9uKGhhbmRsZVRvcExldmVsKSB7XG4gICAgUmVhY3RFdmVudExpc3RlbmVyLl9oYW5kbGVUb3BMZXZlbCA9IGhhbmRsZVRvcExldmVsO1xuICB9LFxuXG4gIHNldEVuYWJsZWQ6IGZ1bmN0aW9uKGVuYWJsZWQpIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQgPSAhIWVuYWJsZWQ7XG4gIH0sXG5cbiAgaXNFbmFibGVkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gUmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIFRyYXBzIHRvcC1sZXZlbCBldmVudHMgYnkgdXNpbmcgZXZlbnQgYnViYmxpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhbmRsZXJCYXNlTmFtZSBFdmVudCBuYW1lIChlLmcuIFwiY2xpY2tcIikuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBoYW5kbGUgRWxlbWVudCBvbiB3aGljaCB0byBhdHRhY2ggbGlzdGVuZXIuXG4gICAqIEByZXR1cm4ge29iamVjdH0gQW4gb2JqZWN0IHdpdGggYSByZW1vdmUgZnVuY3Rpb24gd2hpY2ggd2lsbCBmb3JjZWZ1bGx5XG4gICAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmFwQnViYmxlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBoYW5kbGU7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEV2ZW50TGlzdGVuZXIubGlzdGVuKFxuICAgICAgZWxlbWVudCxcbiAgICAgIGhhbmRsZXJCYXNlTmFtZSxcbiAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKVxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXBzIGEgdG9wLWxldmVsIGV2ZW50IGJ5IHVzaW5nIGV2ZW50IGNhcHR1cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZSBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhIHJlbW92ZSBmdW5jdGlvbiB3aGljaCB3aWxsIGZvcmNlZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXBDYXB0dXJlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBoYW5kbGU7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEV2ZW50TGlzdGVuZXIuY2FwdHVyZShcbiAgICAgIGVsZW1lbnQsXG4gICAgICBoYW5kbGVyQmFzZU5hbWUsXG4gICAgICBSZWFjdEV2ZW50TGlzdGVuZXIuZGlzcGF0Y2hFdmVudC5iaW5kKG51bGwsIHRvcExldmVsVHlwZSlcbiAgICApO1xuICB9LFxuXG4gIG1vbml0b3JTY3JvbGxWYWx1ZTogZnVuY3Rpb24ocmVmcmVzaCkge1xuICAgIHZhciBjYWxsYmFjayA9IHNjcm9sbFZhbHVlTW9uaXRvci5iaW5kKG51bGwsIHJlZnJlc2gpO1xuICAgIEV2ZW50TGlzdGVuZXIubGlzdGVuKHdpbmRvdywgJ3Njcm9sbCcsIGNhbGxiYWNrKTtcbiAgfSxcblxuICBkaXNwYXRjaEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gICAgaWYgKCFSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYm9va0tlZXBpbmcgPSBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcuZ2V0UG9vbGVkKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuICAgIHRyeSB7XG4gICAgICAvLyBFdmVudCBxdWV1ZSBiZWluZyBwcm9jZXNzZWQgaW4gdGhlIHNhbWUgY3ljbGUgYWxsb3dzXG4gICAgICAvLyBgcHJldmVudERlZmF1bHRgLlxuICAgICAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKGhhbmRsZVRvcExldmVsSW1wbCwgYm9va0tlZXBpbmcpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcucmVsZWFzZShib29rS2VlcGluZyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXZlbnRMaXN0ZW5lcjtcblxufSx7XCIuL0V2ZW50TGlzdGVuZXJcIjoxNjMsXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MTY4LFwiLi9PYmplY3QuYXNzaWduXCI6MTc1LFwiLi9Qb29sZWRDbGFzc1wiOjE3NixcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIjoyMTgsXCIuL1JlYWN0TW91bnRcIjoyMjMsXCIuL1JlYWN0VXBkYXRlc1wiOjI0NixcIi4vZ2V0RXZlbnRUYXJnZXRcIjoyODcsXCIuL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uXCI6MjkzfV0sMjE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RGcmFnbWVudFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8qKlxuICogV2UgdXNlZCB0byBhbGxvdyBrZXllZCBvYmplY3RzIHRvIHNlcnZlIGFzIGEgY29sbGVjdGlvbiBvZiBSZWFjdEVsZW1lbnRzLFxuICogb3IgbmVzdGVkIHNldHMuIFRoaXMgYWxsb3dlZCB1cyBhIHdheSB0byBleHBsaWNpdGx5IGtleSBhIHNldCBhIGZyYWdtZW50IG9mXG4gKiBjb21wb25lbnRzLiBUaGlzIGlzIG5vdyBiZWluZyByZXBsYWNlZCB3aXRoIGFuIG9wYXF1ZSBkYXRhIHN0cnVjdHVyZS5cbiAqIFRoZSB1cGdyYWRlIHBhdGggaXMgdG8gY2FsbCBSZWFjdC5hZGRvbnMuY3JlYXRlRnJhZ21lbnQoeyBrZXk6IHZhbHVlIH0pIHRvXG4gKiBjcmVhdGUgYSBrZXllZCBmcmFnbWVudC4gVGhlIHJlc3VsdGluZyBkYXRhIHN0cnVjdHVyZSBpcyBvcGFxdWUsIGZvciBub3cuXG4gKi9cblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICB2YXIgZnJhZ21lbnRLZXkgPSAnX3JlYWN0RnJhZ21lbnQnO1xuICB2YXIgZGlkV2FybktleSA9ICdfcmVhY3REaWRXYXJuJztcbiAgdmFyIGNhbldhcm5Gb3JSZWFjdEZyYWdtZW50ID0gZmFsc2U7XG5cbiAgdHJ5IHtcbiAgICAvLyBGZWF0dXJlIHRlc3QuIERvbid0IGV2ZW4gdHJ5IHRvIGlzc3VlIHRoaXMgd2FybmluZyBpZiB3ZSBjYW4ndCB1c2VcbiAgICAvLyBlbnVtZXJhYmxlOiBmYWxzZS5cblxuICAgIHZhciBkdW1teSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgIHt9LFxuICAgICAgZnJhZ21lbnRLZXksXG4gICAgICB7ZW51bWVyYWJsZTogZmFsc2UsIHZhbHVlOiB0cnVlfVxuICAgICk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICB7fSxcbiAgICAgICdrZXknLFxuICAgICAge2VudW1lcmFibGU6IHRydWUsIGdldDogZHVtbXl9XG4gICAgKTtcblxuICAgIGNhbldhcm5Gb3JSZWFjdEZyYWdtZW50ID0gdHJ1ZTtcbiAgfSBjYXRjaCAoeCkgeyB9XG5cbiAgdmFyIHByb3h5UHJvcGVydHlBY2Nlc3NXaXRoV2FybmluZyA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgdGhpc1tkaWRXYXJuS2V5XSxcbiAgICAgICAgICAnQSBSZWFjdEZyYWdtZW50IGlzIGFuIG9wYXF1ZSB0eXBlLiBBY2Nlc3NpbmcgYW55IG9mIGl0cyAnICtcbiAgICAgICAgICAncHJvcGVydGllcyBpcyBkZXByZWNhdGVkLiBQYXNzIGl0IHRvIG9uZSBvZiB0aGUgUmVhY3QuQ2hpbGRyZW4gJyArXG4gICAgICAgICAgJ2hlbHBlcnMuJ1xuICAgICAgICApIDogbnVsbCk7XG4gICAgICAgIHRoaXNbZGlkV2FybktleV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpc1tmcmFnbWVudEtleV1ba2V5XTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgIHRoaXNbZGlkV2FybktleV0sXG4gICAgICAgICAgJ0EgUmVhY3RGcmFnbWVudCBpcyBhbiBpbW11dGFibGUgb3BhcXVlIHR5cGUuIE11dGF0aW5nIGl0cyAnICtcbiAgICAgICAgICAncHJvcGVydGllcyBpcyBkZXByZWNhdGVkLidcbiAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICB0aGlzW2RpZFdhcm5LZXldID0gdHJ1ZTtcbiAgICAgICAgdGhpc1tmcmFnbWVudEtleV1ba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBpc3N1ZWRXYXJuaW5ncyA9IHt9O1xuXG4gIHZhciBkaWRXYXJuRm9yRnJhZ21lbnQgPSBmdW5jdGlvbihmcmFnbWVudCkge1xuICAgIC8vIFdlIHVzZSB0aGUga2V5cyBhbmQgdGhlIHR5cGUgb2YgdGhlIHZhbHVlIGFzIGEgaGV1cmlzdGljIHRvIGRlZHVwZSB0aGVcbiAgICAvLyB3YXJuaW5nIHRvIGF2b2lkIHNwYW1taW5nIHRvbyBtdWNoLlxuICAgIHZhciBmcmFnbWVudENhY2hlS2V5ID0gJyc7XG4gICAgZm9yICh2YXIga2V5IGluIGZyYWdtZW50KSB7XG4gICAgICBmcmFnbWVudENhY2hlS2V5ICs9IGtleSArICc6JyArICh0eXBlb2YgZnJhZ21lbnRba2V5XSkgKyAnLCc7XG4gICAgfVxuICAgIHZhciBhbHJlYWR5V2FybmVkT25jZSA9ICEhaXNzdWVkV2FybmluZ3NbZnJhZ21lbnRDYWNoZUtleV07XG4gICAgaXNzdWVkV2FybmluZ3NbZnJhZ21lbnRDYWNoZUtleV0gPSB0cnVlO1xuICAgIHJldHVybiBhbHJlYWR5V2FybmVkT25jZTtcbiAgfTtcbn1cblxudmFyIFJlYWN0RnJhZ21lbnQgPSB7XG4gIC8vIFdyYXAgYSBrZXllZCBvYmplY3QgaW4gYW4gb3BhcXVlIHByb3h5IHRoYXQgd2FybnMgeW91IGlmIHlvdSBhY2Nlc3MgYW55XG4gIC8vIG9mIGl0cyBwcm9wZXJ0aWVzLlxuICBjcmVhdGU6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqZWN0ICE9PSAnb2JqZWN0JyB8fCAhb2JqZWN0IHx8IEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAnUmVhY3QuYWRkb25zLmNyZWF0ZUZyYWdtZW50IG9ubHkgYWNjZXB0cyBhIHNpbmdsZSBvYmplY3QuJyxcbiAgICAgICAgICBvYmplY3RcbiAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChvYmplY3QpKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICdSZWFjdC5hZGRvbnMuY3JlYXRlRnJhZ21lbnQgZG9lcyBub3QgYWNjZXB0IGEgUmVhY3RFbGVtZW50ICcgK1xuICAgICAgICAgICd3aXRob3V0IGEgd3JhcHBlciBvYmplY3QuJ1xuICAgICAgICApIDogbnVsbCk7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBpZiAoY2FuV2FybkZvclJlYWN0RnJhZ21lbnQpIHtcbiAgICAgICAgdmFyIHByb3h5ID0ge307XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm94eSwgZnJhZ21lbnRLZXksIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogb2JqZWN0XG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJveHksIGRpZFdhcm5LZXksIHtcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBwcm94eVByb3BlcnR5QWNjZXNzV2l0aFdhcm5pbmcocHJveHksIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHByb3h5KTtcbiAgICAgICAgcmV0dXJuIHByb3h5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9LFxuICAvLyBFeHRyYWN0IHRoZSBvcmlnaW5hbCBrZXllZCBvYmplY3QgZnJvbSB0aGUgZnJhZ21lbnQgb3BhcXVlIHR5cGUuIFdhcm4gaWZcbiAgLy8gYSBwbGFpbiBvYmplY3QgaXMgcGFzc2VkIGhlcmUuXG4gIGV4dHJhY3Q6IGZ1bmN0aW9uKGZyYWdtZW50KSB7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgaWYgKGNhbldhcm5Gb3JSZWFjdEZyYWdtZW50KSB7XG4gICAgICAgIGlmICghZnJhZ21lbnRbZnJhZ21lbnRLZXldKSB7XG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICBkaWRXYXJuRm9yRnJhZ21lbnQoZnJhZ21lbnQpLFxuICAgICAgICAgICAgJ0FueSB1c2Ugb2YgYSBrZXllZCBvYmplY3Qgc2hvdWxkIGJlIHdyYXBwZWQgaW4gJyArXG4gICAgICAgICAgICAnUmVhY3QuYWRkb25zLmNyZWF0ZUZyYWdtZW50KG9iamVjdCkgYmVmb3JlIGJlaW5nIHBhc3NlZCBhcyBhICcgK1xuICAgICAgICAgICAgJ2NoaWxkLidcbiAgICAgICAgICApIDogbnVsbCk7XG4gICAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcmFnbWVudFtmcmFnbWVudEtleV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmcmFnbWVudDtcbiAgfSxcbiAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIGZyYWdtZW50IGFuZCBpZiBzbywgZXh0cmFjdCB0aGUga2V5ZWQgb2JqZWN0LiBJZiBpdFxuICAvLyBpcyBhIGZyYWdtZW50LWxpa2Ugb2JqZWN0LCB3YXJuIHRoYXQgaXQgc2hvdWxkIGJlIHdyYXBwZWQuIElnbm9yZSBpZiB3ZVxuICAvLyBjYW4ndCBkZXRlcm1pbmUgd2hhdCBraW5kIG9mIG9iamVjdCB0aGlzIGlzLlxuICBleHRyYWN0SWZGcmFnbWVudDogZnVuY3Rpb24oZnJhZ21lbnQpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBpZiAoY2FuV2FybkZvclJlYWN0RnJhZ21lbnQpIHtcbiAgICAgICAgLy8gSWYgaXQgaXMgdGhlIG9wYXF1ZSB0eXBlLCByZXR1cm4gdGhlIGtleWVkIG9iamVjdC5cbiAgICAgICAgaWYgKGZyYWdtZW50W2ZyYWdtZW50S2V5XSkge1xuICAgICAgICAgIHJldHVybiBmcmFnbWVudFtmcmFnbWVudEtleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBlYWNoIHByb3BlcnR5IGlmIGl0IGhhcyBhbiBlbGVtZW50LCBpZiBpdCBkb2VzXG4gICAgICAgIC8vIGl0IGlzIHByb2JhYmx5IG1lYW50IGFzIGEgZnJhZ21lbnQsIHNvIHdlIGNhbiB3YXJuIGVhcmx5LiBEZWZlcixcbiAgICAgICAgLy8gdGhlIHdhcm5pbmcgdG8gZXh0cmFjdC5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIGZyYWdtZW50KSB7XG4gICAgICAgICAgaWYgKGZyYWdtZW50Lmhhc093blByb3BlcnR5KGtleSkgJiZcbiAgICAgICAgICAgICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGZyYWdtZW50W2tleV0pKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGxvb2tzIGxpa2UgYSBmcmFnbWVudCBvYmplY3QsIHdlIHNob3VsZCBwcm92aWRlIGFuXG4gICAgICAgICAgICAvLyBlYXJseSB3YXJuaW5nLlxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0RnJhZ21lbnQuZXh0cmFjdChmcmFnbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmcmFnbWVudDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEZyYWdtZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEVsZW1lbnRcIjoyMDksXCIuL3dhcm5pbmdcIjozMTgsXCJfcHJvY2Vzc1wiOjF9XSwyMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5qZWN0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luSHViXCIpO1xudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50XCIpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVtcHR5Q29tcG9uZW50XCIpO1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKTtcbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RET01Db21wb25lbnRcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xudmFyIFJlYWN0Um9vdEluZGV4ID0gcmVxdWlyZShcIi4vUmVhY3RSb290SW5kZXhcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgUmVhY3RJbmplY3Rpb24gPSB7XG4gIENvbXBvbmVudDogUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5pbmplY3Rpb24sXG4gIENsYXNzOiBSZWFjdENsYXNzLmluamVjdGlvbixcbiAgRE9NQ29tcG9uZW50OiBSZWFjdERPTUNvbXBvbmVudC5pbmplY3Rpb24sXG4gIERPTVByb3BlcnR5OiBET01Qcm9wZXJ0eS5pbmplY3Rpb24sXG4gIEVtcHR5Q29tcG9uZW50OiBSZWFjdEVtcHR5Q29tcG9uZW50LmluamVjdGlvbixcbiAgRXZlbnRQbHVnaW5IdWI6IEV2ZW50UGx1Z2luSHViLmluamVjdGlvbixcbiAgRXZlbnRFbWl0dGVyOiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaW5qZWN0aW9uLFxuICBOYXRpdmVDb21wb25lbnQ6IFJlYWN0TmF0aXZlQ29tcG9uZW50LmluamVjdGlvbixcbiAgUGVyZjogUmVhY3RQZXJmLmluamVjdGlvbixcbiAgUm9vdEluZGV4OiBSZWFjdFJvb3RJbmRleC5pbmplY3Rpb24sXG4gIFVwZGF0ZXM6IFJlYWN0VXBkYXRlcy5pbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbmplY3Rpb247XG5cbn0se1wiLi9ET01Qcm9wZXJ0eVwiOjE1NyxcIi4vRXZlbnRQbHVnaW5IdWJcIjoxNjQsXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiOjE3OSxcIi4vUmVhY3RDbGFzc1wiOjE4NCxcIi4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudFwiOjE4NyxcIi4vUmVhY3RET01Db21wb25lbnRcIjoxOTQsXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIjoyMTEsXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCI6MjI2LFwiLi9SZWFjdFBlcmZcIjoyMjgsXCIuL1JlYWN0Um9vdEluZGV4XCI6MjM3LFwiLi9SZWFjdFVwZGF0ZXNcIjoyNDZ9XSwyMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5wdXRTZWxlY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERPTVNlbGVjdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NU2VsZWN0aW9uXCIpO1xuXG52YXIgY29udGFpbnNOb2RlID0gcmVxdWlyZShcIi4vY29udGFpbnNOb2RlXCIpO1xudmFyIGZvY3VzTm9kZSA9IHJlcXVpcmUoXCIuL2ZvY3VzTm9kZVwiKTtcbnZhciBnZXRBY3RpdmVFbGVtZW50ID0gcmVxdWlyZShcIi4vZ2V0QWN0aXZlRWxlbWVudFwiKTtcblxuZnVuY3Rpb24gaXNJbkRvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIGNvbnRhaW5zTm9kZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIG5vZGUpO1xufVxuXG4vKipcbiAqIEBSZWFjdElucHV0U2VsZWN0aW9uOiBSZWFjdCBpbnB1dCBzZWxlY3Rpb24gbW9kdWxlLiBCYXNlZCBvbiBTZWxlY3Rpb24uanMsXG4gKiBidXQgbW9kaWZpZWQgdG8gYmUgc3VpdGFibGUgZm9yIHJlYWN0IGFuZCBoYXMgYSBjb3VwbGUgb2YgYnVnIGZpeGVzIChkb2Vzbid0XG4gKiBhc3N1bWUgYnV0dG9ucyBoYXZlIHJhbmdlIHNlbGVjdGlvbnMgYWxsb3dlZCkuXG4gKiBJbnB1dCBzZWxlY3Rpb24gbW9kdWxlIGZvciBSZWFjdC5cbiAqL1xudmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSB7XG5cbiAgaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzOiBmdW5jdGlvbihlbGVtKSB7XG4gICAgcmV0dXJuIGVsZW0gJiYgKFxuICAgICAgKChlbGVtLm5vZGVOYW1lID09PSAnSU5QVVQnICYmIGVsZW0udHlwZSA9PT0gJ3RleHQnKSB8fFxuICAgICAgZWxlbS5ub2RlTmFtZSA9PT0gJ1RFWFRBUkVBJyB8fCBlbGVtLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKVxuICAgICk7XG4gIH0sXG5cbiAgZ2V0U2VsZWN0aW9uSW5mb3JtYXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb2N1c2VkRWxlbSA9IGdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgICByZXR1cm4ge1xuICAgICAgZm9jdXNlZEVsZW06IGZvY3VzZWRFbGVtLFxuICAgICAgc2VsZWN0aW9uUmFuZ2U6XG4gICAgICAgICAgUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZm9jdXNlZEVsZW0pID9cbiAgICAgICAgICBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbihmb2N1c2VkRWxlbSkgOlxuICAgICAgICAgIG51bGxcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmVzdG9yZVNlbGVjdGlvbjogSWYgYW55IHNlbGVjdGlvbiBpbmZvcm1hdGlvbiB3YXMgcG90ZW50aWFsbHkgbG9zdCxcbiAgICogcmVzdG9yZSBpdC4gVGhpcyBpcyB1c2VmdWwgd2hlbiBwZXJmb3JtaW5nIG9wZXJhdGlvbnMgdGhhdCBjb3VsZCByZW1vdmUgZG9tXG4gICAqIG5vZGVzIGFuZCBwbGFjZSB0aGVtIGJhY2sgaW4sIHJlc3VsdGluZyBpbiBmb2N1cyBiZWluZyBsb3N0LlxuICAgKi9cbiAgcmVzdG9yZVNlbGVjdGlvbjogZnVuY3Rpb24ocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikge1xuICAgIHZhciBjdXJGb2N1c2VkRWxlbSA9IGdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgICB2YXIgcHJpb3JGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uZm9jdXNlZEVsZW07XG4gICAgdmFyIHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNlbGVjdGlvblJhbmdlO1xuICAgIGlmIChjdXJGb2N1c2VkRWxlbSAhPT0gcHJpb3JGb2N1c2VkRWxlbSAmJlxuICAgICAgICBpc0luRG9jdW1lbnQocHJpb3JGb2N1c2VkRWxlbSkpIHtcbiAgICAgIGlmIChSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgICBSZWFjdElucHV0U2VsZWN0aW9uLnNldFNlbGVjdGlvbihcbiAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtLFxuICAgICAgICAgIHByaW9yU2VsZWN0aW9uUmFuZ2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGZvY3VzTm9kZShwcmlvckZvY3VzZWRFbGVtKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBnZXRTZWxlY3Rpb246IEdldHMgdGhlIHNlbGVjdGlvbiBib3VuZHMgb2YgYSBmb2N1c2VkIHRleHRhcmVhLCBpbnB1dCBvclxuICAgKiBjb250ZW50RWRpdGFibGUgbm9kZS5cbiAgICogLUBpbnB1dDogTG9vayB1cCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXRcbiAgICogLUByZXR1cm4ge3N0YXJ0OiBzZWxlY3Rpb25TdGFydCwgZW5kOiBzZWxlY3Rpb25FbmR9XG4gICAqL1xuICBnZXRTZWxlY3Rpb246IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgdmFyIHNlbGVjdGlvbjtcblxuICAgIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG4gICAgICAvLyBNb2Rlcm4gYnJvd3NlciB3aXRoIGlucHV0IG9yIHRleHRhcmVhLlxuICAgICAgc2VsZWN0aW9uID0ge1xuICAgICAgICBzdGFydDogaW5wdXQuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgIGVuZDogaW5wdXQuc2VsZWN0aW9uRW5kXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIGlucHV0Lm5vZGVOYW1lID09PSAnSU5QVVQnKSB7XG4gICAgICAvLyBJRTggaW5wdXQuXG4gICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgIC8vIFRoZXJlIGNhbiBvbmx5IGJlIG9uZSBzZWxlY3Rpb24gcGVyIGRvY3VtZW50IGluIElFLCBzbyBpdCBtdXN0XG4gICAgICAvLyBiZSBpbiBvdXIgZWxlbWVudC5cbiAgICAgIGlmIChyYW5nZS5wYXJlbnRFbGVtZW50KCkgPT09IGlucHV0KSB7XG4gICAgICAgIHNlbGVjdGlvbiA9IHtcbiAgICAgICAgICBzdGFydDogLXJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgLWlucHV0LnZhbHVlLmxlbmd0aCksXG4gICAgICAgICAgZW5kOiAtcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgLWlucHV0LnZhbHVlLmxlbmd0aClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29udGVudCBlZGl0YWJsZSBvciBvbGQgSUUgdGV4dGFyZWEuXG4gICAgICBzZWxlY3Rpb24gPSBSZWFjdERPTVNlbGVjdGlvbi5nZXRPZmZzZXRzKGlucHV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZWN0aW9uIHx8IHtzdGFydDogMCwgZW5kOiAwfTtcbiAgfSxcblxuICAvKipcbiAgICogQHNldFNlbGVjdGlvbjogU2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIHRleHRhcmVhIG9yIGlucHV0IGFuZCBmb2N1c2VzXG4gICAqIHRoZSBpbnB1dC5cbiAgICogLUBpbnB1dCAgICAgU2V0IHNlbGVjdGlvbiBib3VuZHMgb2YgdGhpcyBpbnB1dCBvciB0ZXh0YXJlYVxuICAgKiAtQG9mZnNldHMgICBPYmplY3Qgb2Ygc2FtZSBmb3JtIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSBnZXQqXG4gICAqL1xuICBzZXRTZWxlY3Rpb246IGZ1bmN0aW9uKGlucHV0LCBvZmZzZXRzKSB7XG4gICAgdmFyIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICB2YXIgZW5kID0gb2Zmc2V0cy5lbmQ7XG4gICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICB9XG5cbiAgICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgICAgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBzdGFydDtcbiAgICAgIGlucHV0LnNlbGVjdGlvbkVuZCA9IE1hdGgubWluKGVuZCwgaW5wdXQudmFsdWUubGVuZ3RoKTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiBpbnB1dC5ub2RlTmFtZSA9PT0gJ0lOUFVUJykge1xuICAgICAgdmFyIHJhbmdlID0gaW5wdXQuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuICAgICAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgZW5kIC0gc3RhcnQpO1xuICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlYWN0RE9NU2VsZWN0aW9uLnNldE9mZnNldHMoaW5wdXQsIG9mZnNldHMpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdElucHV0U2VsZWN0aW9uO1xuXG59LHtcIi4vUmVhY3RET01TZWxlY3Rpb25cIjoyMDIsXCIuL2NvbnRhaW5zTm9kZVwiOjI3MCxcIi4vZm9jdXNOb2RlXCI6MjgxLFwiLi9nZXRBY3RpdmVFbGVtZW50XCI6MjgzfV0sMjE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbnN0YW5jZUhhbmRsZXNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSb290SW5kZXggPSByZXF1aXJlKFwiLi9SZWFjdFJvb3RJbmRleFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIFNFUEFSQVRPUiA9ICcuJztcbnZhciBTRVBBUkFUT1JfTEVOR1RIID0gU0VQQVJBVE9SLmxlbmd0aDtcblxuLyoqXG4gKiBNYXhpbXVtIGRlcHRoIG9mIHRyYXZlcnNhbHMgYmVmb3JlIHdlIGNvbnNpZGVyIHRoZSBwb3NzaWJpbGl0eSBvZiBhIGJhZCBJRC5cbiAqL1xudmFyIE1BWF9UUkVFX0RFUFRIID0gMTAwO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBET00gSUQgcHJlZml4IHRvIHVzZSB3aGVuIG1vdW50aW5nIFJlYWN0IGNvbXBvbmVudHMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEEgdW5pcXVlIGludGVnZXJcbiAqIEByZXR1cm4ge3N0cmluZ30gUmVhY3Qgcm9vdCBJRC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXRSZWFjdFJvb3RJRFN0cmluZyhpbmRleCkge1xuICByZXR1cm4gU0VQQVJBVE9SICsgaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGNoYXJhY3RlciBpbiB0aGUgc3VwcGxpZWQgSUQgaXMgYSBzZXBhcmF0b3Igb3IgdGhlIGVuZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQSBSZWFjdCBET00gSUQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggb2YgdGhlIGNoYXJhY3RlciB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNoYXJhY3RlciBpcyBhIHNlcGFyYXRvciBvciBlbmQgb2YgdGhlIElELlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaXNCb3VuZGFyeShpZCwgaW5kZXgpIHtcbiAgcmV0dXJuIGlkLmNoYXJBdChpbmRleCkgPT09IFNFUEFSQVRPUiB8fCBpbmRleCA9PT0gaWQubGVuZ3RoO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgc3VwcGxpZWQgc3RyaW5nIGlzIGEgdmFsaWQgUmVhY3QgRE9NIElELlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBIFJlYWN0IERPTSBJRCwgbWF5YmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdHJpbmcgaXMgYSB2YWxpZCBSZWFjdCBET00gSUQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkSUQoaWQpIHtcbiAgcmV0dXJuIGlkID09PSAnJyB8fCAoXG4gICAgaWQuY2hhckF0KDApID09PSBTRVBBUkFUT1IgJiYgaWQuY2hhckF0KGlkLmxlbmd0aCAtIDEpICE9PSBTRVBBUkFUT1JcbiAgKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGZpcnN0IElEIGlzIGFuIGFuY2VzdG9yIG9mIG9yIGVxdWFsIHRvIHRoZSBzZWNvbmQgSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFuY2VzdG9ySURcbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXNjZW5kYW50SURcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYGFuY2VzdG9ySURgIGlzIGFuIGFuY2VzdG9yIG9mIGBkZXNjZW5kYW50SURgLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGlzQW5jZXN0b3JJRE9mKGFuY2VzdG9ySUQsIGRlc2NlbmRhbnRJRCkge1xuICByZXR1cm4gKFxuICAgIGRlc2NlbmRhbnRJRC5pbmRleE9mKGFuY2VzdG9ySUQpID09PSAwICYmXG4gICAgaXNCb3VuZGFyeShkZXNjZW5kYW50SUQsIGFuY2VzdG9ySUQubGVuZ3RoKVxuICApO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHBhcmVudCBJRCBvZiB0aGUgc3VwcGxpZWQgUmVhY3QgRE9NIElELCBgaWRgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiBhIGNvbXBvbmVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gSUQgb2YgdGhlIHBhcmVudCwgb3IgYW4gZW1wdHkgc3RyaW5nLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50SUQoaWQpIHtcbiAgcmV0dXJuIGlkID8gaWQuc3Vic3RyKDAsIGlkLmxhc3RJbmRleE9mKFNFUEFSQVRPUikpIDogJyc7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmV4dCBET00gSUQgb24gdGhlIHRyZWUgcGF0aCBmcm9tIHRoZSBzdXBwbGllZCBgYW5jZXN0b3JJRGAgdG8gdGhlXG4gKiBzdXBwbGllZCBgZGVzdGluYXRpb25JRGAuIElmIHRoZXkgYXJlIGVxdWFsLCB0aGUgSUQgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFuY2VzdG9ySUQgSUQgb2YgYW4gYW5jZXN0b3Igbm9kZSBvZiBgZGVzdGluYXRpb25JRGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVzdGluYXRpb25JRCBJRCBvZiB0aGUgZGVzdGluYXRpb24gbm9kZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gTmV4dCBJRCBvbiB0aGUgcGF0aCBmcm9tIGBhbmNlc3RvcklEYCB0byBgZGVzdGluYXRpb25JRGAuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXROZXh0RGVzY2VuZGFudElEKGFuY2VzdG9ySUQsIGRlc3RpbmF0aW9uSUQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpc1ZhbGlkSUQoYW5jZXN0b3JJRCkgJiYgaXNWYWxpZElEKGRlc3RpbmF0aW9uSUQpLFxuICAgICdnZXROZXh0RGVzY2VuZGFudElEKCVzLCAlcyk6IFJlY2VpdmVkIGFuIGludmFsaWQgUmVhY3QgRE9NIElELicsXG4gICAgYW5jZXN0b3JJRCxcbiAgICBkZXN0aW5hdGlvbklEXG4gICkgOiBpbnZhcmlhbnQoaXNWYWxpZElEKGFuY2VzdG9ySUQpICYmIGlzVmFsaWRJRChkZXN0aW5hdGlvbklEKSkpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGlzQW5jZXN0b3JJRE9mKGFuY2VzdG9ySUQsIGRlc3RpbmF0aW9uSUQpLFxuICAgICdnZXROZXh0RGVzY2VuZGFudElEKC4uLik6IFJlYWN0IGhhcyBtYWRlIGFuIGludmFsaWQgYXNzdW1wdGlvbiBhYm91dCAnICtcbiAgICAndGhlIERPTSBoaWVyYXJjaHkuIEV4cGVjdGVkIGAlc2AgdG8gYmUgYW4gYW5jZXN0b3Igb2YgYCVzYC4nLFxuICAgIGFuY2VzdG9ySUQsXG4gICAgZGVzdGluYXRpb25JRFxuICApIDogaW52YXJpYW50KGlzQW5jZXN0b3JJRE9mKGFuY2VzdG9ySUQsIGRlc3RpbmF0aW9uSUQpKSk7XG4gIGlmIChhbmNlc3RvcklEID09PSBkZXN0aW5hdGlvbklEKSB7XG4gICAgcmV0dXJuIGFuY2VzdG9ySUQ7XG4gIH1cbiAgLy8gU2tpcCBvdmVyIHRoZSBhbmNlc3RvciBhbmQgdGhlIGltbWVkaWF0ZSBzZXBhcmF0b3IuIFRyYXZlcnNlIHVudGlsIHdlIGhpdFxuICAvLyBhbm90aGVyIHNlcGFyYXRvciBvciB3ZSByZWFjaCB0aGUgZW5kIG9mIGBkZXN0aW5hdGlvbklEYC5cbiAgdmFyIHN0YXJ0ID0gYW5jZXN0b3JJRC5sZW5ndGggKyBTRVBBUkFUT1JfTEVOR1RIO1xuICB2YXIgaTtcbiAgZm9yIChpID0gc3RhcnQ7IGkgPCBkZXN0aW5hdGlvbklELmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGlzQm91bmRhcnkoZGVzdGluYXRpb25JRCwgaSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVzdGluYXRpb25JRC5zdWJzdHIoMCwgaSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgSUQgb2YgdHdvIElEcy5cbiAqXG4gKiBVc2luZyB0aGlzIElEIHNjaGVtZSwgdGhlIG5lYXJlc3QgY29tbW9uIGFuY2VzdG9yIElEIGlzIHRoZSBsb25nZXN0IGNvbW1vblxuICogcHJlZml4IG9mIHRoZSB0d28gSURzIHRoYXQgaW1tZWRpYXRlbHkgcHJlY2VkZWQgYSBcIm1hcmtlclwiIGluIGJvdGggc3RyaW5ncy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb25lSURcbiAqIEBwYXJhbSB7c3RyaW5nfSB0d29JRFxuICogQHJldHVybiB7c3RyaW5nfSBOZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBJRCwgb3IgdGhlIGVtcHR5IHN0cmluZyBpZiBub25lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKG9uZUlELCB0d29JRCkge1xuICB2YXIgbWluTGVuZ3RoID0gTWF0aC5taW4ob25lSUQubGVuZ3RoLCB0d29JRC5sZW5ndGgpO1xuICBpZiAobWluTGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHZhciBsYXN0Q29tbW9uTWFya2VySW5kZXggPSAwO1xuICAvLyBVc2UgYDw9YCB0byB0cmF2ZXJzZSB1bnRpbCB0aGUgXCJFT0xcIiBvZiB0aGUgc2hvcnRlciBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IG1pbkxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGlzQm91bmRhcnkob25lSUQsIGkpICYmIGlzQm91bmRhcnkodHdvSUQsIGkpKSB7XG4gICAgICBsYXN0Q29tbW9uTWFya2VySW5kZXggPSBpO1xuICAgIH0gZWxzZSBpZiAob25lSUQuY2hhckF0KGkpICE9PSB0d29JRC5jaGFyQXQoaSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB2YXIgbG9uZ2VzdENvbW1vbklEID0gb25lSUQuc3Vic3RyKDAsIGxhc3RDb21tb25NYXJrZXJJbmRleCk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgaXNWYWxpZElEKGxvbmdlc3RDb21tb25JRCksXG4gICAgJ2dldEZpcnN0Q29tbW9uQW5jZXN0b3JJRCglcywgJXMpOiBFeHBlY3RlZCBhIHZhbGlkIFJlYWN0IERPTSBJRDogJXMnLFxuICAgIG9uZUlELFxuICAgIHR3b0lELFxuICAgIGxvbmdlc3RDb21tb25JRFxuICApIDogaW52YXJpYW50KGlzVmFsaWRJRChsb25nZXN0Q29tbW9uSUQpKSk7XG4gIHJldHVybiBsb25nZXN0Q29tbW9uSUQ7XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIHRoZSBwYXJlbnQgcGF0aCBiZXR3ZWVuIHR3byBJRHMgKGVpdGhlciB1cCBvciBkb3duKS4gVGhlIElEcyBtdXN0XG4gKiBub3QgYmUgdGhlIHNhbWUsIGFuZCB0aGVyZSBtdXN0IGV4aXN0IGEgcGFyZW50IHBhdGggYmV0d2VlbiB0aGVtLiBJZiB0aGVcbiAqIGNhbGxiYWNrIHJldHVybnMgYGZhbHNlYCwgdHJhdmVyc2FsIGlzIHN0b3BwZWQuXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSBzdGFydCBJRCBhdCB3aGljaCB0byBzdGFydCB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0gez9zdHJpbmd9IHN0b3AgSUQgYXQgd2hpY2ggdG8gZW5kIHRyYXZlcnNhbC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZSBlYWNoIElEIHdpdGguXG4gKiBAcGFyYW0gez9ib29sZWFufSBza2lwRmlyc3QgV2hldGhlciBvciBub3QgdG8gc2tpcCB0aGUgZmlyc3Qgbm9kZS5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IHNraXBMYXN0IFdoZXRoZXIgb3Igbm90IHRvIHNraXAgdGhlIGxhc3Qgbm9kZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlUGFyZW50UGF0aChzdGFydCwgc3RvcCwgY2IsIGFyZywgc2tpcEZpcnN0LCBza2lwTGFzdCkge1xuICBzdGFydCA9IHN0YXJ0IHx8ICcnO1xuICBzdG9wID0gc3RvcCB8fCAnJztcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBzdGFydCAhPT0gc3RvcCxcbiAgICAndHJhdmVyc2VQYXJlbnRQYXRoKC4uLik6IENhbm5vdCB0cmF2ZXJzZSBmcm9tIGFuZCB0byB0aGUgc2FtZSBJRCwgYCVzYC4nLFxuICAgIHN0YXJ0XG4gICkgOiBpbnZhcmlhbnQoc3RhcnQgIT09IHN0b3ApKTtcbiAgdmFyIHRyYXZlcnNlVXAgPSBpc0FuY2VzdG9ySURPZihzdG9wLCBzdGFydCk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgdHJhdmVyc2VVcCB8fCBpc0FuY2VzdG9ySURPZihzdGFydCwgc3RvcCksXG4gICAgJ3RyYXZlcnNlUGFyZW50UGF0aCglcywgJXMsIC4uLik6IENhbm5vdCB0cmF2ZXJzZSBmcm9tIHR3byBJRHMgdGhhdCBkbyAnICtcbiAgICAnbm90IGhhdmUgYSBwYXJlbnQgcGF0aC4nLFxuICAgIHN0YXJ0LFxuICAgIHN0b3BcbiAgKSA6IGludmFyaWFudCh0cmF2ZXJzZVVwIHx8IGlzQW5jZXN0b3JJRE9mKHN0YXJ0LCBzdG9wKSkpO1xuICAvLyBUcmF2ZXJzZSBmcm9tIGBzdGFydGAgdG8gYHN0b3BgIG9uZSBkZXB0aCBhdCBhIHRpbWUuXG4gIHZhciBkZXB0aCA9IDA7XG4gIHZhciB0cmF2ZXJzZSA9IHRyYXZlcnNlVXAgPyBnZXRQYXJlbnRJRCA6IGdldE5leHREZXNjZW5kYW50SUQ7XG4gIGZvciAodmFyIGlkID0gc3RhcnQ7IC8qIHVudGlsIGJyZWFrICovOyBpZCA9IHRyYXZlcnNlKGlkLCBzdG9wKSkge1xuICAgIHZhciByZXQ7XG4gICAgaWYgKCghc2tpcEZpcnN0IHx8IGlkICE9PSBzdGFydCkgJiYgKCFza2lwTGFzdCB8fCBpZCAhPT0gc3RvcCkpIHtcbiAgICAgIHJldCA9IGNiKGlkLCB0cmF2ZXJzZVVwLCBhcmcpO1xuICAgIH1cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCBpZCA9PT0gc3RvcCkge1xuICAgICAgLy8gT25seSBicmVhayAvL2FmdGVyLy8gdmlzaXRpbmcgYHN0b3BgLlxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBkZXB0aCsrIDwgTUFYX1RSRUVfREVQVEgsXG4gICAgICAndHJhdmVyc2VQYXJlbnRQYXRoKCVzLCAlcywgLi4uKTogRGV0ZWN0ZWQgYW4gaW5maW5pdGUgbG9vcCB3aGlsZSAnICtcbiAgICAgICd0cmF2ZXJzaW5nIHRoZSBSZWFjdCBET00gSUQgdHJlZS4gVGhpcyBtYXkgYmUgZHVlIHRvIG1hbGZvcm1lZCBJRHM6ICVzJyxcbiAgICAgIHN0YXJ0LCBzdG9wXG4gICAgKSA6IGludmFyaWFudChkZXB0aCsrIDwgTUFYX1RSRUVfREVQVEgpKTtcbiAgfVxufVxuXG4vKipcbiAqIE1hbmFnZXMgdGhlIElEcyBhc3NpZ25lZCB0byBET00gcmVwcmVzZW50YXRpb25zIG9mIFJlYWN0IGNvbXBvbmVudHMuIFRoaXNcbiAqIHVzZXMgYSBzcGVjaWZpYyBzY2hlbWUgaW4gb3JkZXIgdG8gdHJhdmVyc2UgdGhlIERPTSBlZmZpY2llbnRseSAoZS5nLiBpblxuICogb3JkZXIgdG8gc2ltdWxhdGUgZXZlbnRzKS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0ge1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgUmVhY3Qgcm9vdCBJRFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IEEgUmVhY3Qgcm9vdCBJRC5cbiAgICovXG4gIGNyZWF0ZVJlYWN0Um9vdElEOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0UmVhY3RSb290SURTdHJpbmcoUmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXgoKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBSZWFjdCBJRCBieSBqb2luaW5nIGEgcm9vdCBJRCB3aXRoIGEgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBSb290IElEIG9mIGEgcGFyZW50IGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBjb21wb25lbnQncyBuYW1lIChhcyBmbGF0dGVuZWQgY2hpbGRyZW4pLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IEEgUmVhY3QgSUQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY3JlYXRlUmVhY3RJRDogZnVuY3Rpb24ocm9vdElELCBuYW1lKSB7XG4gICAgcmV0dXJuIHJvb3RJRCArIG5hbWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIERPTSBJRCBvZiB0aGUgUmVhY3QgY29tcG9uZW50IHRoYXQgaXMgdGhlIHJvb3Qgb2YgdGhlIHRyZWUgdGhhdFxuICAgKiBjb250YWlucyB0aGUgUmVhY3QgY29tcG9uZW50IHdpdGggdGhlIHN1cHBsaWVkIERPTSBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIERPTSBJRCBvZiBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7P3N0cmluZ30gRE9NIElEIG9mIHRoZSBSZWFjdCBjb21wb25lbnQgdGhhdCBpcyB0aGUgcm9vdC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgaWYgKGlkICYmIGlkLmNoYXJBdCgwKSA9PT0gU0VQQVJBVE9SICYmIGlkLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBpbmRleCA9IGlkLmluZGV4T2YoU0VQQVJBVE9SLCAxKTtcbiAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaWQuc3Vic3RyKDAsIGluZGV4KSA6IGlkO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogVHJhdmVyc2VzIHRoZSBJRCBoaWVyYXJjaHkgYW5kIGludm9rZXMgdGhlIHN1cHBsaWVkIGBjYmAgb24gYW55IElEcyB0aGF0XG4gICAqIHNob3VsZCB3b3VsZCByZWNlaXZlIGEgYG1vdXNlRW50ZXJgIG9yIGBtb3VzZUxlYXZlYCBldmVudC5cbiAgICpcbiAgICogTk9URTogRG9lcyBub3QgaW52b2tlIHRoZSBjYWxsYmFjayBvbiB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgYmVjYXVzZVxuICAgKiBub3RoaW5nIFwiZW50ZXJlZFwiIG9yIFwibGVmdFwiIHRoYXQgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxlYXZlSUQgSUQgYmVpbmcgbGVmdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGVudGVySUQgSUQgYmVpbmcgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgQ2FsbGJhY2sgdG8gaW52b2tlIG9uIGVhY2ggZW50ZXJlZC9sZWZ0IElELlxuICAgKiBAcGFyYW0geyp9IHVwQXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aCBvbiBsZWZ0IElEcy5cbiAgICogQHBhcmFtIHsqfSBkb3duQXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aCBvbiBlbnRlcmVkIElEcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmF2ZXJzZUVudGVyTGVhdmU6IGZ1bmN0aW9uKGxlYXZlSUQsIGVudGVySUQsIGNiLCB1cEFyZywgZG93bkFyZykge1xuICAgIHZhciBhbmNlc3RvcklEID0gZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKGxlYXZlSUQsIGVudGVySUQpO1xuICAgIGlmIChhbmNlc3RvcklEICE9PSBsZWF2ZUlEKSB7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgobGVhdmVJRCwgYW5jZXN0b3JJRCwgY2IsIHVwQXJnLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChhbmNlc3RvcklEICE9PSBlbnRlcklEKSB7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgoYW5jZXN0b3JJRCwgZW50ZXJJRCwgY2IsIGRvd25BcmcsIHRydWUsIGZhbHNlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNpbXVsYXRlcyB0aGUgdHJhdmVyc2FsIG9mIGEgdHdvLXBoYXNlLCBjYXB0dXJlL2J1YmJsZSBldmVudCBkaXNwYXRjaC5cbiAgICpcbiAgICogTk9URTogVGhpcyB0cmF2ZXJzYWwgaGFwcGVucyBvbiBJRHMgd2l0aG91dCB0b3VjaGluZyB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0SUQgSUQgb2YgdGhlIHRhcmdldCBub2RlLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gYXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmF2ZXJzZVR3b1BoYXNlOiBmdW5jdGlvbih0YXJnZXRJRCwgY2IsIGFyZykge1xuICAgIGlmICh0YXJnZXRJRCkge1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKCcnLCB0YXJnZXRJRCwgY2IsIGFyZywgdHJ1ZSwgZmFsc2UpO1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKHRhcmdldElELCAnJywgY2IsIGFyZywgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVHJhdmVyc2UgYSBub2RlIElELCBjYWxsaW5nIHRoZSBzdXBwbGllZCBgY2JgIGZvciBlYWNoIGFuY2VzdG9yIElELiBGb3JcbiAgICogZXhhbXBsZSwgcGFzc2luZyBgLjAuJHJvdy0wLjFgIHdvdWxkIHJlc3VsdCBpbiBgY2JgIGdldHRpbmcgY2FsbGVkXG4gICAqIHdpdGggYC4wYCwgYC4wLiRyb3ctMGAsIGFuZCBgLjAuJHJvdy0wLjFgLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIHRyYXZlcnNhbCBoYXBwZW5zIG9uIElEcyB3aXRob3V0IHRvdWNoaW5nIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRJRCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGUuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSBhcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXZlcnNlQW5jZXN0b3JzOiBmdW5jdGlvbih0YXJnZXRJRCwgY2IsIGFyZykge1xuICAgIHRyYXZlcnNlUGFyZW50UGF0aCgnJywgdGFyZ2V0SUQsIGNiLCBhcmcsIHRydWUsIGZhbHNlKTtcbiAgfSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldEZpcnN0Q29tbW9uQW5jZXN0b3JJRDogZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklELFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0TmV4dERlc2NlbmRhbnRJRDogZ2V0TmV4dERlc2NlbmRhbnRJRCxcblxuICBpc0FuY2VzdG9ySURPZjogaXNBbmNlc3RvcklET2YsXG5cbiAgU0VQQVJBVE9SOiBTRVBBUkFUT1JcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluc3RhbmNlSGFuZGxlcztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RSb290SW5kZXhcIjoyMzcsXCIuL2ludmFyaWFudFwiOjI5NyxcIl9wcm9jZXNzXCI6MX1dLDIxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbnN0YW5jZU1hcFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBgUmVhY3RJbnN0YW5jZU1hcGAgbWFpbnRhaW5zIGEgbWFwcGluZyBmcm9tIGEgcHVibGljIGZhY2luZyBzdGF0ZWZ1bFxuICogaW5zdGFuY2UgKGtleSkgYW5kIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiAodmFsdWUpLiBUaGlzIGFsbG93cyBwdWJsaWNcbiAqIG1ldGhvZHMgdG8gYWNjZXB0IHRoZSB1c2VyIGZhY2luZyBpbnN0YW5jZSBhcyBhbiBhcmd1bWVudCBhbmQgbWFwIHRoZW0gYmFja1xuICogdG8gaW50ZXJuYWwgbWV0aG9kcy5cbiAqL1xuXG4vLyBUT0RPOiBSZXBsYWNlIHRoaXMgd2l0aCBFUzY6IHZhciBSZWFjdEluc3RhbmNlTWFwID0gbmV3IE1hcCgpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSB7XG5cbiAgLyoqXG4gICAqIFRoaXMgQVBJIHNob3VsZCBiZSBjYWxsZWQgYGRlbGV0ZWAgYnV0IHdlJ2QgaGF2ZSB0byBtYWtlIHN1cmUgdG8gYWx3YXlzXG4gICAqIHRyYW5zZm9ybSB0aGVzZSB0byBzdHJpbmdzIGZvciBJRSBzdXBwb3J0LiBXaGVuIHRoaXMgdHJhbnNmb3JtIGlzIGZ1bGx5XG4gICAqIHN1cHBvcnRlZCB3ZSBjYW4gcmVuYW1lIGl0LlxuICAgKi9cbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgfSxcblxuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZTtcbiAgfSxcblxuICBoYXM6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSAhPT0gdW5kZWZpbmVkO1xuICB9LFxuXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlID0gdmFsdWU7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluc3RhbmNlTWFwO1xuXG59LHt9XSwyMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdExpZmVDeWNsZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBtYW5hZ2VzIHRoZSBib29ra2VlcGluZyB3aGVuIGEgY29tcG9uZW50IGlzIGluIHRoZSBwcm9jZXNzXG4gKiBvZiBiZWluZyBtb3VudGVkIG9yIGJlaW5nIHVubW91bnRlZC4gVGhpcyBpcyB1c2VkIGFzIGEgd2F5IHRvIGVuZm9yY2VcbiAqIGludmFyaWFudHMgKG9yIHdhcm5pbmdzKSB3aGVuIGl0IGlzIG5vdCByZWNvbW1lbmRlZCB0byBjYWxsXG4gKiBzZXRTdGF0ZS9mb3JjZVVwZGF0ZS5cbiAqXG4gKiBjdXJyZW50bHlNb3VudGluZ0luc3RhbmNlOiBEdXJpbmcgdGhlIGNvbnN0cnVjdGlvbiBwaGFzZSwgaXQgaXMgbm90IHBvc3NpYmxlXG4gKiB0byB0cmlnZ2VyIGFuIHVwZGF0ZSBzaW5jZSB0aGUgaW5zdGFuY2UgaXMgbm90IGZ1bGx5IG1vdW50ZWQgeWV0LiBIb3dldmVyLCB3ZVxuICogY3VycmVudGx5IGFsbG93IHRoaXMgYXMgYSBjb252ZW5pZW5jZSBmb3IgbXV0YXRpbmcgdGhlIGluaXRpYWwgc3RhdGUuXG4gKlxuICogY3VycmVudGx5VW5tb3VudGluZ0luc3RhbmNlOiBEdXJpbmcgdGhlIHVubW91bnRpbmcgcGhhc2UsIHRoZSBpbnN0YW5jZSBpc1xuICogc3RpbGwgbW91bnRlZCBhbmQgY2FuIHRoZXJlZm9yZSBzY2hlZHVsZSBhbiB1cGRhdGUuIEhvd2V2ZXIsIHRoaXMgaXMgbm90XG4gKiByZWNvbW1lbmRlZCBhbmQgcHJvYmFibHkgYW4gZXJyb3Igc2luY2UgaXQncyBhYm91dCB0byBiZSB1bm1vdW50ZWQuXG4gKiBUaGVyZWZvcmUgd2Ugc3RpbGwgd2FudCB0byB0cmlnZ2VyIGluIGFuIGVycm9yIGZvciB0aGF0IGNhc2UuXG4gKi9cblxudmFyIFJlYWN0TGlmZUN5Y2xlID0ge1xuICBjdXJyZW50bHlNb3VudGluZ0luc3RhbmNlOiBudWxsLFxuICBjdXJyZW50bHlVbm1vdW50aW5nSW5zdGFuY2U6IG51bGxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RMaWZlQ3ljbGU7XG5cbn0se31dLDIyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RMaW5rXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSZWFjdExpbmsgZW5jYXBzdWxhdGVzIGEgY29tbW9uIHBhdHRlcm4gaW4gd2hpY2ggYSBjb21wb25lbnQgd2FudHMgdG8gbW9kaWZ5XG4gKiBhIHByb3AgcmVjZWl2ZWQgZnJvbSBpdHMgcGFyZW50LiBSZWFjdExpbmsgYWxsb3dzIHRoZSBwYXJlbnQgdG8gcGFzcyBkb3duIGFcbiAqIHZhbHVlIGNvdXBsZWQgd2l0aCBhIGNhbGxiYWNrIHRoYXQsIHdoZW4gaW52b2tlZCwgZXhwcmVzc2VzIGFuIGludGVudCB0b1xuICogbW9kaWZ5IHRoYXQgdmFsdWUuIEZvciBleGFtcGxlOlxuICpcbiAqIFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4ge3ZhbHVlOiAnJ307XG4gKiAgIH0sXG4gKiAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gKiAgICAgdmFyIHZhbHVlTGluayA9IG5ldyBSZWFjdExpbmsodGhpcy5zdGF0ZS52YWx1ZSwgdGhpcy5faGFuZGxlVmFsdWVDaGFuZ2UpO1xuICogICAgIHJldHVybiA8aW5wdXQgdmFsdWVMaW5rPXt2YWx1ZUxpbmt9IC8+O1xuICogICB9LFxuICogICB0aGlzLl9oYW5kbGVWYWx1ZUNoYW5nZTogZnVuY3Rpb24obmV3VmFsdWUpIHtcbiAqICAgICB0aGlzLnNldFN0YXRlKHt2YWx1ZTogbmV3VmFsdWV9KTtcbiAqICAgfVxuICogfSk7XG4gKlxuICogV2UgaGF2ZSBwcm92aWRlZCBzb21lIHN1Z2FyeSBtaXhpbnMgdG8gbWFrZSB0aGUgY3JlYXRpb24gYW5kXG4gKiBjb25zdW1wdGlvbiBvZiBSZWFjdExpbmsgZWFzaWVyOyBzZWUgTGlua2VkVmFsdWVVdGlscyBhbmQgTGlua2VkU3RhdGVNaXhpbi5cbiAqL1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKFwiLi9SZWFjdFwiKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IHZhbHVlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGxpbmtcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlcXVlc3RDaGFuZ2UgY2FsbGJhY2sgdG8gcmVxdWVzdCBhIGNoYW5nZVxuICovXG5mdW5jdGlvbiBSZWFjdExpbmsodmFsdWUsIHJlcXVlc3RDaGFuZ2UpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLnJlcXVlc3RDaGFuZ2UgPSByZXF1ZXN0Q2hhbmdlO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBQcm9wVHlwZSB0aGF0IGVuZm9yY2VzIHRoZSBSZWFjdExpbmsgQVBJIGFuZCBvcHRpb25hbGx5IGNoZWNrcyB0aGVcbiAqIHR5cGUgb2YgdGhlIHZhbHVlIGJlaW5nIHBhc3NlZCBpbnNpZGUgdGhlIGxpbmsuIEV4YW1wbGU6XG4gKlxuICogTXlDb21wb25lbnQucHJvcFR5cGVzID0ge1xuICogICB0YWJJbmRleExpbms6IFJlYWN0TGluay5Qcm9wVHlwZXMubGluayhSZWFjdC5Qcm9wVHlwZXMubnVtYmVyKVxuICogfVxuICovXG5mdW5jdGlvbiBjcmVhdGVMaW5rVHlwZUNoZWNrZXIobGlua1R5cGUpIHtcbiAgdmFyIHNoYXBlcyA9IHtcbiAgICB2YWx1ZTogdHlwZW9mIGxpbmtUeXBlID09PSAndW5kZWZpbmVkJyA/XG4gICAgICBSZWFjdC5Qcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQgOlxuICAgICAgbGlua1R5cGUuaXNSZXF1aXJlZCxcbiAgICByZXF1ZXN0Q2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH07XG4gIHJldHVybiBSZWFjdC5Qcm9wVHlwZXMuc2hhcGUoc2hhcGVzKTtcbn1cblxuUmVhY3RMaW5rLlByb3BUeXBlcyA9IHtcbiAgbGluazogY3JlYXRlTGlua1R5cGVDaGVja2VyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TGluaztcblxufSx7XCIuL1JlYWN0XCI6MTc3fV0sMjIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE1hcmt1cENoZWNrc3VtXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWRsZXIzMiA9IHJlcXVpcmUoXCIuL2FkbGVyMzJcIik7XG5cbnZhciBSZWFjdE1hcmt1cENoZWNrc3VtID0ge1xuICBDSEVDS1NVTV9BVFRSX05BTUU6ICdkYXRhLXJlYWN0LWNoZWNrc3VtJyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgc3RyaW5nXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIHN0cmluZyB3aXRoIGNoZWNrc3VtIGF0dHJpYnV0ZSBhdHRhY2hlZFxuICAgKi9cbiAgYWRkQ2hlY2tzdW1Ub01hcmt1cDogZnVuY3Rpb24obWFya3VwKSB7XG4gICAgdmFyIGNoZWNrc3VtID0gYWRsZXIzMihtYXJrdXApO1xuICAgIHJldHVybiBtYXJrdXAucmVwbGFjZShcbiAgICAgICc+JyxcbiAgICAgICcgJyArIFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FICsgJz1cIicgKyBjaGVja3N1bSArICdcIj4nXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCB0byB1c2VcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHJvb3QgUmVhY3QgZWxlbWVudFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciBvciBub3QgdGhlIG1hcmt1cCBpcyB0aGUgc2FtZVxuICAgKi9cbiAgY2FuUmV1c2VNYXJrdXA6IGZ1bmN0aW9uKG1hcmt1cCwgZWxlbWVudCkge1xuICAgIHZhciBleGlzdGluZ0NoZWNrc3VtID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXG4gICAgICBSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRVxuICAgICk7XG4gICAgZXhpc3RpbmdDaGVja3N1bSA9IGV4aXN0aW5nQ2hlY2tzdW0gJiYgcGFyc2VJbnQoZXhpc3RpbmdDaGVja3N1bSwgMTApO1xuICAgIHZhciBtYXJrdXBDaGVja3N1bSA9IGFkbGVyMzIobWFya3VwKTtcbiAgICByZXR1cm4gbWFya3VwQ2hlY2tzdW0gPT09IGV4aXN0aW5nQ2hlY2tzdW07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RNYXJrdXBDaGVja3N1bTtcblxufSx7XCIuL2FkbGVyMzJcIjoyNjZ9XSwyMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE1vdW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVtcHR5Q29tcG9uZW50XCIpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIik7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VNYXBcIik7XG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHJlcXVpcmUoXCIuL1JlYWN0TWFya3VwQ2hlY2tzdW1cIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlclwiKTtcbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVRdWV1ZVwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoXCIuL2VtcHR5T2JqZWN0XCIpO1xudmFyIGNvbnRhaW5zTm9kZSA9IHJlcXVpcmUoXCIuL2NvbnRhaW5zTm9kZVwiKTtcbnZhciBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIgPSByZXF1aXJlKFwiLi9nZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXJcIik7XG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoXCIuL3NldElubmVySFRNTFwiKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgU0VQQVJBVE9SID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuU0VQQVJBVE9SO1xuXG52YXIgQVRUUl9OQU1FID0gRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUU7XG52YXIgbm9kZUNhY2hlID0ge307XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG52YXIgRE9DX05PREVfVFlQRSA9IDk7XG5cbi8qKiBNYXBwaW5nIGZyb20gcmVhY3RSb290SUQgdG8gUmVhY3QgY29tcG9uZW50IGluc3RhbmNlLiAqL1xudmFyIGluc3RhbmNlc0J5UmVhY3RSb290SUQgPSB7fTtcblxuLyoqIE1hcHBpbmcgZnJvbSByZWFjdFJvb3RJRCB0byBgY29udGFpbmVyYCBub2Rlcy4gKi9cbnZhciBjb250YWluZXJzQnlSZWFjdFJvb3RJRCA9IHt9O1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIC8qKiBfX0RFVl9fLW9ubHkgbWFwcGluZyBmcm9tIHJlYWN0Um9vdElEIHRvIHJvb3QgZWxlbWVudHMuICovXG4gIHZhciByb290RWxlbWVudHNCeVJlYWN0Um9vdElEID0ge307XG59XG5cbi8vIFVzZWQgdG8gc3RvcmUgYnJlYWR0aC1maXJzdCBzZWFyY2ggc3RhdGUgaW4gZmluZENvbXBvbmVudFJvb3QuXG52YXIgZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5ID0gW107XG5cbi8qKlxuICogRmluZHMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXJcbiAqIHRoYXQncyBub3QgY29tbW9uIGJldHdlZW4gdGhlIHR3byBnaXZlbiBzdHJpbmdzLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gdGhlIGluZGV4IG9mIHRoZSBjaGFyYWN0ZXIgd2hlcmUgdGhlIHN0cmluZ3MgZGl2ZXJnZVxuICovXG5mdW5jdGlvbiBmaXJzdERpZmZlcmVuY2VJbmRleChzdHJpbmcxLCBzdHJpbmcyKSB7XG4gIHZhciBtaW5MZW4gPSBNYXRoLm1pbihzdHJpbmcxLmxlbmd0aCwgc3RyaW5nMi5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1pbkxlbjsgaSsrKSB7XG4gICAgaWYgKHN0cmluZzEuY2hhckF0KGkpICE9PSBzdHJpbmcyLmNoYXJBdChpKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHJpbmcxLmxlbmd0aCA9PT0gc3RyaW5nMi5sZW5ndGggPyAtMSA6IG1pbkxlbjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IG1heSBjb250YWluIGEgUmVhY3QgY29tcG9uZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gQSBcInJlYWN0Um9vdFwiIElELCBpZiBhIFJlYWN0IGNvbXBvbmVudCBpcyByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKSB7XG4gIHZhciByb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICByZXR1cm4gcm9vdEVsZW1lbnQgJiYgUmVhY3RNb3VudC5nZXRJRChyb290RWxlbWVudCk7XG59XG5cbi8qKlxuICogQWNjZXNzaW5nIG5vZGVbQVRUUl9OQU1FXSBvciBjYWxsaW5nIGdldEF0dHJpYnV0ZShBVFRSX05BTUUpIG9uIGEgZm9ybVxuICogZWxlbWVudCBjYW4gcmV0dXJuIGl0cyBjb250cm9sIHdob3NlIG5hbWUgb3IgSUQgZXF1YWxzIEFUVFJfTkFNRS4gQWxsXG4gKiBET00gbm9kZXMgc3VwcG9ydCBgZ2V0QXR0cmlidXRlTm9kZWAgYnV0IHRoaXMgY2FuIGFsc28gZ2V0IGNhbGxlZCBvblxuICogb3RoZXIgb2JqZWN0cyBzbyBqdXN0IHJldHVybiAnJyBpZiB3ZSdyZSBnaXZlbiBzb21ldGhpbmcgb3RoZXIgdGhhbiBhXG4gKiBET00gbm9kZSAoc3VjaCBhcyB3aW5kb3cpLlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR8RE9NV2luZG93fERPTURvY3VtZW50fERPTVRleHROb2RlfSBub2RlIERPTSBub2RlLlxuICogQHJldHVybiB7c3RyaW5nfSBJRCBvZiB0aGUgc3VwcGxpZWQgYGRvbU5vZGVgLlxuICovXG5mdW5jdGlvbiBnZXRJRChub2RlKSB7XG4gIHZhciBpZCA9IGludGVybmFsR2V0SUQobm9kZSk7XG4gIGlmIChpZCkge1xuICAgIGlmIChub2RlQ2FjaGUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICB2YXIgY2FjaGVkID0gbm9kZUNhY2hlW2lkXTtcbiAgICAgIGlmIChjYWNoZWQgIT09IG5vZGUpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICAhaXNWYWxpZChjYWNoZWQsIGlkKSxcbiAgICAgICAgICAnUmVhY3RNb3VudDogVHdvIHZhbGlkIGJ1dCB1bmVxdWFsIG5vZGVzIHdpdGggdGhlIHNhbWUgYCVzYDogJXMnLFxuICAgICAgICAgIEFUVFJfTkFNRSwgaWRcbiAgICAgICAgKSA6IGludmFyaWFudCghaXNWYWxpZChjYWNoZWQsIGlkKSkpO1xuXG4gICAgICAgIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlQ2FjaGVbaWRdID0gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaWQ7XG59XG5cbmZ1bmN0aW9uIGludGVybmFsR2V0SUQobm9kZSkge1xuICAvLyBJZiBub2RlIGlzIHNvbWV0aGluZyBsaWtlIGEgd2luZG93LCBkb2N1bWVudCwgb3IgdGV4dCBub2RlLCBub25lIG9mXG4gIC8vIHdoaWNoIHN1cHBvcnQgYXR0cmlidXRlcyBvciBhIC5nZXRBdHRyaWJ1dGUgbWV0aG9kLCBncmFjZWZ1bGx5IHJldHVyblxuICAvLyB0aGUgZW1wdHkgc3RyaW5nLCBhcyBpZiB0aGUgYXR0cmlidXRlIHdlcmUgbWlzc2luZy5cbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoQVRUUl9OQU1FKSB8fCAnJztcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBSZWFjdC1zcGVjaWZpYyBJRCBvZiB0aGUgZ2l2ZW4gbm9kZS5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgVGhlIERPTSBub2RlIHdob3NlIElEIHdpbGwgYmUgc2V0LlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSB2YWx1ZSBvZiB0aGUgSUQgYXR0cmlidXRlLlxuICovXG5mdW5jdGlvbiBzZXRJRChub2RlLCBpZCkge1xuICB2YXIgb2xkSUQgPSBpbnRlcm5hbEdldElEKG5vZGUpO1xuICBpZiAob2xkSUQgIT09IGlkKSB7XG4gICAgZGVsZXRlIG5vZGVDYWNoZVtvbGRJRF07XG4gIH1cbiAgbm9kZS5zZXRBdHRyaWJ1dGUoQVRUUl9OQU1FLCBpZCk7XG4gIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBub2RlIHdpdGggdGhlIHN1cHBsaWVkIFJlYWN0LWdlbmVyYXRlZCBET00gSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIEEgUmVhY3QtZ2VuZXJhdGVkIERPTSBJRC5cbiAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IERPTSBub2RlIHdpdGggdGhlIHN1cHBsZWQgYGlkYC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXROb2RlKGlkKSB7XG4gIGlmICghbm9kZUNhY2hlLmhhc093blByb3BlcnR5KGlkKSB8fCAhaXNWYWxpZChub2RlQ2FjaGVbaWRdLCBpZCkpIHtcbiAgICBub2RlQ2FjaGVbaWRdID0gUmVhY3RNb3VudC5maW5kUmVhY3ROb2RlQnlJRChpZCk7XG4gIH1cbiAgcmV0dXJuIG5vZGVDYWNoZVtpZF07XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgcHVibGljIFJlYWN0IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7Kn0gaW5zdGFuY2UgQSBwdWJsaWMgUmVhY3QgaW5zdGFuY2UuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH0gRE9NIG5vZGUgd2l0aCB0aGUgc3VwcGxlZCBgaWRgLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgdmFyIGlkID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQoaW5zdGFuY2UpLl9yb290Tm9kZUlEO1xuICBpZiAoUmVhY3RFbXB0eUNvbXBvbmVudC5pc051bGxDb21wb25lbnRJRChpZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoIW5vZGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShpZCkgfHwgIWlzVmFsaWQobm9kZUNhY2hlW2lkXSwgaWQpKSB7XG4gICAgbm9kZUNhY2hlW2lkXSA9IFJlYWN0TW91bnQuZmluZFJlYWN0Tm9kZUJ5SUQoaWQpO1xuICB9XG4gIHJldHVybiBub2RlQ2FjaGVbaWRdO1xufVxuXG4vKipcbiAqIEEgbm9kZSBpcyBcInZhbGlkXCIgaWYgaXQgaXMgY29udGFpbmVkIGJ5IGEgY3VycmVudGx5IG1vdW50ZWQgY29udGFpbmVyLlxuICpcbiAqIFRoaXMgbWVhbnMgdGhhdCB0aGUgbm9kZSBkb2VzIG5vdCBoYXZlIHRvIGJlIGNvbnRhaW5lZCBieSBhIGRvY3VtZW50IGluXG4gKiBvcmRlciB0byBiZSBjb25zaWRlcmVkIHZhbGlkLlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR9IG5vZGUgVGhlIGNhbmRpZGF0ZSBET00gbm9kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgZXhwZWN0ZWQgSUQgb2YgdGhlIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBub2RlIGlzIGNvbnRhaW5lZCBieSBhIG1vdW50ZWQgY29udGFpbmVyLlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkKG5vZGUsIGlkKSB7XG4gIGlmIChub2RlKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGludGVybmFsR2V0SUQobm9kZSkgPT09IGlkLFxuICAgICAgJ1JlYWN0TW91bnQ6IFVuZXhwZWN0ZWQgbW9kaWZpY2F0aW9uIG9mIGAlc2AnLFxuICAgICAgQVRUUl9OQU1FXG4gICAgKSA6IGludmFyaWFudChpbnRlcm5hbEdldElEKG5vZGUpID09PSBpZCkpO1xuXG4gICAgdmFyIGNvbnRhaW5lciA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQoaWQpO1xuICAgIGlmIChjb250YWluZXIgJiYgY29udGFpbnNOb2RlKGNvbnRhaW5lciwgbm9kZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDYXVzZXMgdGhlIGNhY2hlIHRvIGZvcmdldCBhYm91dCBvbmUgUmVhY3Qtc3BlY2lmaWMgSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCB0byBmb3JnZXQuXG4gKi9cbmZ1bmN0aW9uIHB1cmdlSUQoaWQpIHtcbiAgZGVsZXRlIG5vZGVDYWNoZVtpZF07XG59XG5cbnZhciBkZWVwZXN0Tm9kZVNvRmFyID0gbnVsbDtcbmZ1bmN0aW9uIGZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3JJbXBsKGFuY2VzdG9ySUQpIHtcbiAgdmFyIGFuY2VzdG9yID0gbm9kZUNhY2hlW2FuY2VzdG9ySURdO1xuICBpZiAoYW5jZXN0b3IgJiYgaXNWYWxpZChhbmNlc3RvciwgYW5jZXN0b3JJRCkpIHtcbiAgICBkZWVwZXN0Tm9kZVNvRmFyID0gYW5jZXN0b3I7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhpcyBub2RlIGlzbid0IHBvcHVsYXRlZCBpbiB0aGUgY2FjaGUsIHNvIHByZXN1bWFibHkgbm9uZSBvZiBpdHNcbiAgICAvLyBkZXNjZW5kYW50cyBhcmUuIEJyZWFrIG91dCBvZiB0aGUgbG9vcC5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGRlZXBlc3QgY2FjaGVkIG5vZGUgd2hvc2UgSUQgaXMgYSBwcmVmaXggb2YgYHRhcmdldElEYC5cbiAqL1xuZnVuY3Rpb24gZmluZERlZXBlc3RDYWNoZWRBbmNlc3Rvcih0YXJnZXRJRCkge1xuICBkZWVwZXN0Tm9kZVNvRmFyID0gbnVsbDtcbiAgUmVhY3RJbnN0YW5jZUhhbmRsZXMudHJhdmVyc2VBbmNlc3RvcnMoXG4gICAgdGFyZ2V0SUQsXG4gICAgZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvckltcGxcbiAgKTtcblxuICB2YXIgZm91bmROb2RlID0gZGVlcGVzdE5vZGVTb0ZhcjtcbiAgZGVlcGVzdE5vZGVTb0ZhciA9IG51bGw7XG4gIHJldHVybiBmb3VuZE5vZGU7XG59XG5cbi8qKlxuICogTW91bnRzIHRoaXMgY29tcG9uZW50IGFuZCBpbnNlcnRzIGl0IGludG8gdGhlIERPTS5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnRJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdG8gbW91bnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gbW91bnQgaW50by5cbiAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgSWYgdHJ1ZSwgZG8gbm90IGluc2VydCBtYXJrdXBcbiAqL1xuZnVuY3Rpb24gbW91bnRDb21wb25lbnRJbnRvTm9kZShcbiAgICBjb21wb25lbnRJbnN0YW5jZSxcbiAgICByb290SUQsXG4gICAgY29udGFpbmVyLFxuICAgIHRyYW5zYWN0aW9uLFxuICAgIHNob3VsZFJldXNlTWFya3VwKSB7XG4gIHZhciBtYXJrdXAgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoXG4gICAgY29tcG9uZW50SW5zdGFuY2UsIHJvb3RJRCwgdHJhbnNhY3Rpb24sIGVtcHR5T2JqZWN0XG4gICk7XG4gIGNvbXBvbmVudEluc3RhbmNlLl9pc1RvcExldmVsID0gdHJ1ZTtcbiAgUmVhY3RNb3VudC5fbW91bnRJbWFnZUludG9Ob2RlKG1hcmt1cCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCk7XG59XG5cbi8qKlxuICogQmF0Y2hlZCBtb3VudC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnRJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdG8gbW91bnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gbW91bnQgaW50by5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgSWYgdHJ1ZSwgZG8gbm90IGluc2VydCBtYXJrdXBcbiAqL1xuZnVuY3Rpb24gYmF0Y2hlZE1vdW50Q29tcG9uZW50SW50b05vZGUoXG4gICAgY29tcG9uZW50SW5zdGFuY2UsXG4gICAgcm9vdElELFxuICAgIGNvbnRhaW5lcixcbiAgICBzaG91bGRSZXVzZU1hcmt1cCkge1xuICB2YXIgdHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5nZXRQb29sZWQoKTtcbiAgdHJhbnNhY3Rpb24ucGVyZm9ybShcbiAgICBtb3VudENvbXBvbmVudEludG9Ob2RlLFxuICAgIG51bGwsXG4gICAgY29tcG9uZW50SW5zdGFuY2UsXG4gICAgcm9vdElELFxuICAgIGNvbnRhaW5lcixcbiAgICB0cmFuc2FjdGlvbixcbiAgICBzaG91bGRSZXVzZU1hcmt1cFxuICApO1xuICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbn1cblxuLyoqXG4gKiBNb3VudGluZyBpcyB0aGUgcHJvY2VzcyBvZiBpbml0aWFsaXppbmcgYSBSZWFjdCBjb21wb25lbnQgYnkgY3JlYXRpbmcgaXRzXG4gKiByZXByZXNlbnRhdGl2ZSBET00gZWxlbWVudHMgYW5kIGluc2VydGluZyB0aGVtIGludG8gYSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAqIEFueSBwcmlvciBjb250ZW50IGluc2lkZSBgY29udGFpbmVyYCBpcyBkZXN0cm95ZWQgaW4gdGhlIHByb2Nlc3MuXG4gKlxuICogICBSZWFjdE1vdW50LnJlbmRlcihcbiAqICAgICBjb21wb25lbnQsXG4gKiAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpXG4gKiAgICk7XG4gKlxuICogICA8ZGl2IGlkPVwiY29udGFpbmVyXCI+ICAgICAgICAgICAgICAgICAgIDwtLSBTdXBwbGllZCBgY29udGFpbmVyYC5cbiAqICAgICA8ZGl2IGRhdGEtcmVhY3RpZD1cIi4zXCI+ICAgICAgICAgICAgICA8LS0gUmVuZGVyZWQgcmVhY3RSb290IG9mIFJlYWN0XG4gKiAgICAgICAvLyAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuXG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICpcbiAqIEluc2lkZSBvZiBgY29udGFpbmVyYCwgdGhlIGZpcnN0IGVsZW1lbnQgcmVuZGVyZWQgaXMgdGhlIFwicmVhY3RSb290XCIuXG4gKi9cbnZhciBSZWFjdE1vdW50ID0ge1xuICAvKiogRXhwb3NlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzICoqL1xuICBfaW5zdGFuY2VzQnlSZWFjdFJvb3RJRDogaW5zdGFuY2VzQnlSZWFjdFJvb3RJRCxcblxuICAvKipcbiAgICogVGhpcyBpcyBhIGhvb2sgcHJvdmlkZWQgdG8gc3VwcG9ydCByZW5kZXJpbmcgUmVhY3QgY29tcG9uZW50cyB3aGlsZVxuICAgKiBlbnN1cmluZyB0aGF0IHRoZSBhcHBhcmVudCBzY3JvbGwgcG9zaXRpb24gb2YgaXRzIGBjb250YWluZXJgIGRvZXMgbm90XG4gICAqIGNoYW5nZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgVGhlIGBjb250YWluZXJgIGJlaW5nIHJlbmRlcmVkIGludG8uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlbmRlckNhbGxiYWNrIFRoaXMgbXVzdCBiZSBjYWxsZWQgb25jZSB0byBkbyB0aGUgcmVuZGVyLlxuICAgKi9cbiAgc2Nyb2xsTW9uaXRvcjogZnVuY3Rpb24oY29udGFpbmVyLCByZW5kZXJDYWxsYmFjaykge1xuICAgIHJlbmRlckNhbGxiYWNrKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRha2UgYSBjb21wb25lbnQgdGhhdCdzIGFscmVhZHkgbW91bnRlZCBpbnRvIHRoZSBET00gYW5kIHJlcGxhY2UgaXRzIHByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IHByZXZDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIGFscmVhZHkgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgY29tcG9uZW50IGluc3RhbmNlIHRvIHJlbmRlclxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBjb250YWluZXIgdG8gcmVuZGVyIGludG9cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqL1xuICBfdXBkYXRlUm9vdENvbXBvbmVudDogZnVuY3Rpb24oXG4gICAgICBwcmV2Q29tcG9uZW50LFxuICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICBjb250YWluZXIsXG4gICAgICBjYWxsYmFjaykge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIFJlYWN0RWxlbWVudFZhbGlkYXRvci5jaGVja0FuZFdhcm5Gb3JNdXRhdGVkUHJvcHMobmV4dEVsZW1lbnQpO1xuICAgIH1cblxuICAgIFJlYWN0TW91bnQuc2Nyb2xsTW9uaXRvcihjb250YWluZXIsIGZ1bmN0aW9uKCkge1xuICAgICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlRWxlbWVudEludGVybmFsKHByZXZDb21wb25lbnQsIG5leHRFbGVtZW50KTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFja0ludGVybmFsKHByZXZDb21wb25lbnQsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIC8vIFJlY29yZCB0aGUgcm9vdCBlbGVtZW50IGluIGNhc2UgaXQgbGF0ZXIgZ2V0cyB0cmFuc3BsYW50ZWQuXG4gICAgICByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW2dldFJlYWN0Um9vdElEKGNvbnRhaW5lcildID1cbiAgICAgICAgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXZDb21wb25lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgY29tcG9uZW50IGludG8gdGhlIGluc3RhbmNlIG1hcCBhbmQgc3RhcnRzIHNjcm9sbCB2YWx1ZVxuICAgKiBtb25pdG9yaW5nXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIHRvIHJlbmRlclxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBjb250YWluZXIgdG8gcmVuZGVyIGludG9cbiAgICogQHJldHVybiB7c3RyaW5nfSByZWFjdFJvb3QgSUQgcHJlZml4XG4gICAqL1xuICBfcmVnaXN0ZXJDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRDb21wb25lbnQsIGNvbnRhaW5lcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBjb250YWluZXIgJiYgKFxuICAgICAgICAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpXG4gICAgICApLFxuICAgICAgJ19yZWdpc3RlckNvbXBvbmVudCguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LidcbiAgICApIDogaW52YXJpYW50KGNvbnRhaW5lciAmJiAoXG4gICAgICAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpXG4gICAgKSkpO1xuXG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZygpO1xuXG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5yZWdpc3RlckNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gbmV4dENvbXBvbmVudDtcbiAgICByZXR1cm4gcmVhY3RSb290SUQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIG5ldyBjb21wb25lbnQgaW50byB0aGUgRE9NLlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgZWxlbWVudCB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgaWYgd2Ugc2hvdWxkIHNraXAgdGhlIG1hcmt1cCBpbnNlcnRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnRcbiAgICovXG4gIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiBmdW5jdGlvbihcbiAgICBuZXh0RWxlbWVudCxcbiAgICBjb250YWluZXIsXG4gICAgc2hvdWxkUmV1c2VNYXJrdXBcbiAgKSB7XG4gICAgLy8gVmFyaW91cyBwYXJ0cyBvZiBvdXIgY29kZSAoc3VjaCBhcyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdzXG4gICAgLy8gX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCkgYXNzdW1lIHRoYXQgY2FsbHMgdG8gcmVuZGVyIGFyZW4ndCBuZXN0ZWQ7XG4gICAgLy8gdmVyaWZ5IHRoYXQgdGhhdCdzIHRoZSBjYXNlLlxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLFxuICAgICAgJ19yZW5kZXJOZXdSb290Q29tcG9uZW50KCk6IFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gJyArXG4gICAgICAnb2YgcHJvcHMgYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tICcgK1xuICAgICAgJ3JlbmRlciBpcyBub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgK1xuICAgICAgJ2NvbXBvbmVudERpZFVwZGF0ZS4nXG4gICAgKSA6IG51bGwpO1xuXG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0RWxlbWVudCwgbnVsbCk7XG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5fcmVnaXN0ZXJDb21wb25lbnQoXG4gICAgICBjb21wb25lbnRJbnN0YW5jZSxcbiAgICAgIGNvbnRhaW5lclxuICAgICk7XG5cbiAgICAvLyBUaGUgaW5pdGlhbCByZW5kZXIgaXMgc3luY2hyb25vdXMgYnV0IGFueSB1cGRhdGVzIHRoYXQgaGFwcGVuIGR1cmluZ1xuICAgIC8vIHJlbmRlcmluZywgaW4gY29tcG9uZW50V2lsbE1vdW50IG9yIGNvbXBvbmVudERpZE1vdW50LCB3aWxsIGJlIGJhdGNoZWRcbiAgICAvLyBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgYmF0Y2hpbmcgc3RyYXRlZ3kuXG5cbiAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoXG4gICAgICBiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZSxcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLFxuICAgICAgcmVhY3RSb290SUQsXG4gICAgICBjb250YWluZXIsXG4gICAgICBzaG91bGRSZXVzZU1hcmt1cFxuICAgICk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAvLyBSZWNvcmQgdGhlIHJvb3QgZWxlbWVudCBpbiBjYXNlIGl0IGxhdGVyIGdldHMgdHJhbnNwbGFudGVkLlxuICAgICAgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF0gPVxuICAgICAgICBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcG9uZW50SW5zdGFuY2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgYSBSZWFjdCBjb21wb25lbnQgaW50byB0aGUgRE9NIGluIHRoZSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAgICpcbiAgICogSWYgdGhlIFJlYWN0IGNvbXBvbmVudCB3YXMgcHJldmlvdXNseSByZW5kZXJlZCBpbnRvIGBjb250YWluZXJgLCB0aGlzIHdpbGxcbiAgICogcGVyZm9ybSBhbiB1cGRhdGUgb24gaXQgYW5kIG9ubHkgbXV0YXRlIHRoZSBET00gYXMgbmVjZXNzYXJ5IHRvIHJlZmxlY3QgdGhlXG4gICAqIGxhdGVzdCBSZWFjdCBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudCBDb21wb25lbnQgZWxlbWVudCB0byByZW5kZXIuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdHJpZ2dlcmVkIG9uIGNvbXBsZXRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IENvbXBvbmVudCBpbnN0YW5jZSByZW5kZXJlZCBpbiBgY29udGFpbmVyYC5cbiAgICovXG4gIHJlbmRlcjogZnVuY3Rpb24obmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5leHRFbGVtZW50KSxcbiAgICAgICdSZWFjdC5yZW5kZXIoKTogSW52YWxpZCBjb21wb25lbnQgZWxlbWVudC4lcycsXG4gICAgICAoXG4gICAgICAgIHR5cGVvZiBuZXh0RWxlbWVudCA9PT0gJ3N0cmluZycgP1xuICAgICAgICAgICcgSW5zdGVhZCBvZiBwYXNzaW5nIGFuIGVsZW1lbnQgc3RyaW5nLCBtYWtlIHN1cmUgdG8gaW5zdGFudGlhdGUgJyArXG4gICAgICAgICAgJ2l0IGJ5IHBhc3NpbmcgaXQgdG8gUmVhY3QuY3JlYXRlRWxlbWVudC4nIDpcbiAgICAgICAgdHlwZW9mIG5leHRFbGVtZW50ID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAnIEluc3RlYWQgb2YgcGFzc2luZyBhIGNvbXBvbmVudCBjbGFzcywgbWFrZSBzdXJlIHRvIGluc3RhbnRpYXRlICcgK1xuICAgICAgICAgICdpdCBieSBwYXNzaW5nIGl0IHRvIFJlYWN0LmNyZWF0ZUVsZW1lbnQuJyA6XG4gICAgICAgIC8vIENoZWNrIGlmIGl0IHF1YWNrcyBsaWtlIGFuIGVsZW1lbnRcbiAgICAgICAgbmV4dEVsZW1lbnQgIT0gbnVsbCAmJiBuZXh0RWxlbWVudC5wcm9wcyAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICAnIFRoaXMgbWF5IGJlIGNhdXNlZCBieSB1bmludGVudGlvbmFsbHkgbG9hZGluZyB0d28gaW5kZXBlbmRlbnQgJyArXG4gICAgICAgICAgJ2NvcGllcyBvZiBSZWFjdC4nIDpcbiAgICAgICAgICAnJ1xuICAgICAgKVxuICAgICkgOiBpbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5leHRFbGVtZW50KSkpO1xuXG4gICAgdmFyIHByZXZDb21wb25lbnQgPSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW2dldFJlYWN0Um9vdElEKGNvbnRhaW5lcildO1xuXG4gICAgaWYgKHByZXZDb21wb25lbnQpIHtcbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHByZXZDb21wb25lbnQuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0TW91bnQuX3VwZGF0ZVJvb3RDb21wb25lbnQoXG4gICAgICAgICAgcHJldkNvbXBvbmVudCxcbiAgICAgICAgICBuZXh0RWxlbWVudCxcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgY2FsbGJhY2tcbiAgICAgICAgKS5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlKGNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlYWN0Um9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICB2YXIgY29udGFpbmVySGFzUmVhY3RNYXJrdXAgPVxuICAgICAgcmVhY3RSb290RWxlbWVudCAmJiBSZWFjdE1vdW50LmlzUmVuZGVyZWRCeVJlYWN0KHJlYWN0Um9vdEVsZW1lbnQpO1xuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgaWYgKCFjb250YWluZXJIYXNSZWFjdE1hcmt1cCB8fCByZWFjdFJvb3RFbGVtZW50Lm5leHRTaWJsaW5nKSB7XG4gICAgICAgIHZhciByb290RWxlbWVudFNpYmxpbmcgPSByZWFjdFJvb3RFbGVtZW50O1xuICAgICAgICB3aGlsZSAocm9vdEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgICAgICAgaWYgKFJlYWN0TW91bnQuaXNSZW5kZXJlZEJ5UmVhY3Qocm9vdEVsZW1lbnRTaWJsaW5nKSkge1xuICAgICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAncmVuZGVyKCk6IFRhcmdldCBub2RlIGhhcyBtYXJrdXAgcmVuZGVyZWQgYnkgUmVhY3QsIGJ1dCB0aGVyZSAnICtcbiAgICAgICAgICAgICAgJ2FyZSB1bnJlbGF0ZWQgbm9kZXMgYXMgd2VsbC4gVGhpcyBpcyBtb3N0IGNvbW1vbmx5IGNhdXNlZCBieSAnICtcbiAgICAgICAgICAgICAgJ3doaXRlLXNwYWNlIGluc2VydGVkIGFyb3VuZCBzZXJ2ZXItcmVuZGVyZWQgbWFya3VwLidcbiAgICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJvb3RFbGVtZW50U2libGluZyA9IHJvb3RFbGVtZW50U2libGluZy5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzaG91bGRSZXVzZU1hcmt1cCA9IGNvbnRhaW5lckhhc1JlYWN0TWFya3VwICYmICFwcmV2Q29tcG9uZW50O1xuXG4gICAgdmFyIGNvbXBvbmVudCA9IFJlYWN0TW91bnQuX3JlbmRlck5ld1Jvb3RDb21wb25lbnQoXG4gICAgICBuZXh0RWxlbWVudCxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIHNob3VsZFJldXNlTWFya3VwXG4gICAgKS5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2suY2FsbChjb21wb25lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgY29tcG9uZW50IGluc3RhbmNlIG9mIGBjb25zdHJ1Y3RvcmAgd2l0aCBgaW5pdGlhbFByb3BzYCBhbmRcbiAgICogcmVuZGVycyBpdCBpbnRvIHRoZSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3IgUmVhY3QgY29tcG9uZW50IGNvbnN0cnVjdG9yLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IHByb3BzIEluaXRpYWwgcHJvcHMgb2YgdGhlIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIGludG8uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBDb21wb25lbnQgaW5zdGFuY2UgcmVuZGVyZWQgaW4gYGNvbnRhaW5lcmAuXG4gICAqL1xuICBjb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnQ6IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBwcm9wcywgY29udGFpbmVyKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudChjb25zdHJ1Y3RvciwgcHJvcHMpO1xuICAgIHJldHVybiBSZWFjdE1vdW50LnJlbmRlcihlbGVtZW50LCBjb250YWluZXIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgY29tcG9uZW50IGluc3RhbmNlIG9mIGBjb25zdHJ1Y3RvcmAgd2l0aCBgaW5pdGlhbFByb3BzYCBhbmRcbiAgICogcmVuZGVycyBpdCBpbnRvIGEgY29udGFpbmVyIG5vZGUgaWRlbnRpZmllZCBieSBzdXBwbGllZCBgaWRgLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wb25lbnRDb25zdHJ1Y3RvciBSZWFjdCBjb21wb25lbnQgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcm9wcyBJbml0aWFsIHByb3BzIG9mIHRoZSBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIGludG8uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBDb21wb25lbnQgaW5zdGFuY2UgcmVuZGVyZWQgaW4gdGhlIGNvbnRhaW5lciBub2RlLlxuICAgKi9cbiAgY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50QnlJRDogZnVuY3Rpb24oY29uc3RydWN0b3IsIHByb3BzLCBpZCkge1xuICAgIHZhciBkb21Ob2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBkb21Ob2RlLFxuICAgICAgJ1RyaWVkIHRvIGdldCBlbGVtZW50IHdpdGggaWQgb2YgXCIlc1wiIGJ1dCBpdCBpcyBub3QgcHJlc2VudCBvbiB0aGUgcGFnZS4nLFxuICAgICAgaWRcbiAgICApIDogaW52YXJpYW50KGRvbU5vZGUpKTtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5jb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnQoY29uc3RydWN0b3IsIHByb3BzLCBkb21Ob2RlKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgY29udGFpbmVyIG5vZGUgaW50byB3aGljaCBSZWFjdCBjb21wb25lbnRzIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqIFRoaXMgYWxzbyBjcmVhdGVzIHRoZSBcInJlYWN0Um9vdFwiIElEIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgZWxlbWVudFxuICAgKiByZW5kZXJlZCB3aXRoaW4uXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGFzIGEgY29udGFpbmVyLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBcInJlYWN0Um9vdFwiIElEIG9mIGVsZW1lbnRzIHJlbmRlcmVkIHdpdGhpbi5cbiAgICovXG4gIHJlZ2lzdGVyQ29udGFpbmVyOiBmdW5jdGlvbihjb250YWluZXIpIHtcbiAgICB2YXIgcmVhY3RSb290SUQgPSBnZXRSZWFjdFJvb3RJRChjb250YWluZXIpO1xuICAgIGlmIChyZWFjdFJvb3RJRCkge1xuICAgICAgLy8gSWYgb25lIGV4aXN0cywgbWFrZSBzdXJlIGl0IGlzIGEgdmFsaWQgXCJyZWFjdFJvb3RcIiBJRC5cbiAgICAgIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKHJlYWN0Um9vdElEKTtcbiAgICB9XG4gICAgaWYgKCFyZWFjdFJvb3RJRCkge1xuICAgICAgLy8gTm8gdmFsaWQgXCJyZWFjdFJvb3RcIiBJRCBmb3VuZCwgY3JlYXRlIG9uZS5cbiAgICAgIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtcbiAgICB9XG4gICAgY29udGFpbmVyc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gY29udGFpbmVyO1xuICAgIHJldHVybiByZWFjdFJvb3RJRDtcbiAgfSxcblxuICAvKipcbiAgICogVW5tb3VudHMgYW5kIGRlc3Ryb3lzIHRoZSBSZWFjdCBjb21wb25lbnQgcmVuZGVyZWQgaW4gdGhlIGBjb250YWluZXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCBjb250YWluaW5nIGEgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGEgY29tcG9uZW50IHdhcyBmb3VuZCBpbiBhbmQgdW5tb3VudGVkIGZyb21cbiAgICogICAgICAgICAgICAgICAgICAgYGNvbnRhaW5lcmBcbiAgICovXG4gIHVubW91bnRDb21wb25lbnRBdE5vZGU6IGZ1bmN0aW9uKGNvbnRhaW5lcikge1xuICAgIC8vIFZhcmlvdXMgcGFydHMgb2Ygb3VyIGNvZGUgKHN1Y2ggYXMgUmVhY3RDb21wb3NpdGVDb21wb25lbnQnc1xuICAgIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuICAgIC8vIHZlcmlmeSB0aGF0IHRoYXQncyB0aGUgY2FzZS4gKFN0cmljdGx5IHNwZWFraW5nLCB1bm1vdW50aW5nIHdvbid0IGNhdXNlIGFcbiAgICAvLyByZW5kZXIgYnV0IHdlIHN0aWxsIGRvbid0IGV4cGVjdCB0byBiZSBpbiBhIHJlbmRlciBjYWxsIGhlcmUuKVxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLFxuICAgICAgJ3VubW91bnRDb21wb25lbnRBdE5vZGUoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiAnICtcbiAgICAgICdwcm9wcyBhbmQgc3RhdGU7IHRyaWdnZXJpbmcgbmVzdGVkIGNvbXBvbmVudCB1cGRhdGVzIGZyb20gcmVuZGVyIGlzICcgK1xuICAgICAgJ25vdCBhbGxvd2VkLiBJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gJyArXG4gICAgICAnY29tcG9uZW50RGlkVXBkYXRlLidcbiAgICApIDogbnVsbCk7XG5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgY29udGFpbmVyICYmIChcbiAgICAgICAgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKVxuICAgICAgKSxcbiAgICAgICd1bm1vdW50Q29tcG9uZW50QXROb2RlKC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJ1xuICAgICkgOiBpbnZhcmlhbnQoY29udGFpbmVyICYmIChcbiAgICAgIChjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSlcbiAgICApKSk7XG5cbiAgICB2YXIgcmVhY3RSb290SUQgPSBnZXRSZWFjdFJvb3RJRChjb250YWluZXIpO1xuICAgIHZhciBjb21wb25lbnQgPSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcbiAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRGcm9tTm9kZShjb21wb25lbnQsIGNvbnRhaW5lcik7XG4gICAgZGVsZXRlIGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIGRlbGV0ZSBjb250YWluZXJzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgZGVsZXRlIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogVW5tb3VudHMgYSBjb21wb25lbnQgYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnN0YW5jZSBSZWFjdCBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHVubW91bnQgZnJvbS5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc2VlIHtSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGV9XG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50RnJvbU5vZGU6IGZ1bmN0aW9uKGluc3RhbmNlLCBjb250YWluZXIpIHtcbiAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChpbnN0YW5jZSk7XG5cbiAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKSB7XG4gICAgICBjb250YWluZXIgPSBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuICAgIH1cblxuICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2VtcHR5aW5nLWEtbm9kZVxuICAgIHdoaWxlIChjb250YWluZXIubGFzdENoaWxkKSB7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY29udGFpbmVyLmxhc3RDaGlsZCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgY29udGFpbmVyIERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgUmVhY3QgY29tcG9uZW50IHRvIHdoaWNoIHRoZVxuICAgKiBzdXBwbGllZCBET00gYGlkYCBiZWxvbmdzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIGFuIGVsZW1lbnQgcmVuZGVyZWQgYnkgYSBSZWFjdCBjb21wb25lbnQuXG4gICAqIEByZXR1cm4gez9ET01FbGVtZW50fSBET00gZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSBgaWRgLlxuICAgKi9cbiAgZmluZFJlYWN0Q29udGFpbmVyRm9ySUQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKGlkKTtcbiAgICB2YXIgY29udGFpbmVyID0gY29udGFpbmVyc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgICBpZiAocm9vdEVsZW1lbnQgJiYgcm9vdEVsZW1lbnQucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgLy8gQ2FsbCBpbnRlcm5hbEdldElEIGhlcmUgYmVjYXVzZSBnZXRJRCBjYWxscyBpc1ZhbGlkIHdoaWNoIGNhbGxzXG4gICAgICAgICAgLy8gZmluZFJlYWN0Q29udGFpbmVyRm9ySUQgKHRoaXMgZnVuY3Rpb24pLlxuICAgICAgICAgIGludGVybmFsR2V0SUQocm9vdEVsZW1lbnQpID09PSByZWFjdFJvb3RJRCxcbiAgICAgICAgICAnUmVhY3RNb3VudDogUm9vdCBlbGVtZW50IElEIGRpZmZlcmVkIGZyb20gcmVhY3RSb290SUQuJ1xuICAgICAgICApIDogaW52YXJpYW50KC8vIENhbGwgaW50ZXJuYWxHZXRJRCBoZXJlIGJlY2F1c2UgZ2V0SUQgY2FsbHMgaXNWYWxpZCB3aGljaCBjYWxsc1xuICAgICAgICAvLyBmaW5kUmVhY3RDb250YWluZXJGb3JJRCAodGhpcyBmdW5jdGlvbikuXG4gICAgICAgIGludGVybmFsR2V0SUQocm9vdEVsZW1lbnQpID09PSByZWFjdFJvb3RJRCkpO1xuXG4gICAgICAgIHZhciBjb250YWluZXJDaGlsZCA9IGNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICBpZiAoY29udGFpbmVyQ2hpbGQgJiZcbiAgICAgICAgICAgIHJlYWN0Um9vdElEID09PSBpbnRlcm5hbEdldElEKGNvbnRhaW5lckNoaWxkKSkge1xuICAgICAgICAgIC8vIElmIHRoZSBjb250YWluZXIgaGFzIGEgbmV3IGNoaWxkIHdpdGggdGhlIHNhbWUgSUQgYXMgdGhlIG9sZFxuICAgICAgICAgIC8vIHJvb3QgZWxlbWVudCwgdGhlbiByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSBpc1xuICAgICAgICAgIC8vIGp1c3Qgc3RhbGUgYW5kIG5lZWRzIHRvIGJlIHVwZGF0ZWQuIFRoZSBjYXNlIHRoYXQgZGVzZXJ2ZXMgYVxuICAgICAgICAgIC8vIHdhcm5pbmcgaXMgd2hlbiB0aGUgY29udGFpbmVyIGlzIGVtcHR5LlxuICAgICAgICAgIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gY29udGFpbmVyQ2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICdSZWFjdE1vdW50OiBSb290IGVsZW1lbnQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIGl0cyBvcmlnaW5hbCAnICtcbiAgICAgICAgICAgICdjb250YWluZXIuIE5ldyBjb250YWluZXI6Jywgcm9vdEVsZW1lbnQucGFyZW50Tm9kZVxuICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb250YWluZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFuIGVsZW1lbnQgcmVuZGVyZWQgYnkgUmVhY3Qgd2l0aCB0aGUgc3VwcGxpZWQgSUQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiBhIERPTSBub2RlIGluIHRoZSBSZWFjdCBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IFJvb3QgRE9NIG5vZGUgb2YgdGhlIFJlYWN0IGNvbXBvbmVudC5cbiAgICovXG4gIGZpbmRSZWFjdE5vZGVCeUlEOiBmdW5jdGlvbihpZCkge1xuICAgIHZhciByZWFjdFJvb3QgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKGlkKTtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5maW5kQ29tcG9uZW50Um9vdChyZWFjdFJvb3QsIGlkKTtcbiAgfSxcblxuICAvKipcbiAgICogVHJ1ZSBpZiB0aGUgc3VwcGxpZWQgYG5vZGVgIGlzIHJlbmRlcmVkIGJ5IFJlYWN0LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG5vZGUgRE9NIEVsZW1lbnQgdG8gY2hlY2suXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIERPTSBFbGVtZW50IGFwcGVhcnMgdG8gYmUgcmVuZGVyZWQgYnkgUmVhY3QuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgaXNSZW5kZXJlZEJ5UmVhY3Q6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgLy8gTm90IGEgRE9NRWxlbWVudCwgdGhlcmVmb3JlIG5vdCBhIFJlYWN0IGNvbXBvbmVudFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgaWQgPSBSZWFjdE1vdW50LmdldElEKG5vZGUpO1xuICAgIHJldHVybiBpZCA/IGlkLmNoYXJBdCgwKSA9PT0gU0VQQVJBVE9SIDogZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXZlcnNlcyB1cCB0aGUgYW5jZXN0b3JzIG9mIHRoZSBzdXBwbGllZCBub2RlIHRvIGZpbmQgYSBub2RlIHRoYXQgaXMgYVxuICAgKiBET00gcmVwcmVzZW50YXRpb24gb2YgYSBSZWFjdCBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gbm9kZVxuICAgKiBAcmV0dXJuIHs/RE9NRXZlbnRUYXJnZXR9XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0Rmlyc3RSZWFjdERPTTogZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBjdXJyZW50ID0gbm9kZTtcbiAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50LnBhcmVudE5vZGUgIT09IGN1cnJlbnQpIHtcbiAgICAgIGlmIChSZWFjdE1vdW50LmlzUmVuZGVyZWRCeVJlYWN0KGN1cnJlbnQpKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGEgbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBgdGFyZ2V0SURgIGluc2lkZSBvZiB0aGUgc3VwcGxpZWRcbiAgICogYGFuY2VzdG9yTm9kZWAuICBFeHBsb2l0cyB0aGUgSUQgbmFtaW5nIHNjaGVtZSB0byBwZXJmb3JtIHRoZSBzZWFyY2hcbiAgICogcXVpY2tseS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gYW5jZXN0b3JOb2RlIFNlYXJjaCBmcm9tIHRoaXMgcm9vdC5cbiAgICogQHBhcmFybSB7c3RyaW5nfSB0YXJnZXRJRCBJRCBvZiB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge0RPTUV2ZW50VGFyZ2V0fSBET00gbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBgdGFyZ2V0SURgLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGZpbmRDb21wb25lbnRSb290OiBmdW5jdGlvbihhbmNlc3Rvck5vZGUsIHRhcmdldElEKSB7XG4gICAgdmFyIGZpcnN0Q2hpbGRyZW4gPSBmaW5kQ29tcG9uZW50Um9vdFJldXNhYmxlQXJyYXk7XG4gICAgdmFyIGNoaWxkSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlZXBlc3RBbmNlc3RvciA9IGZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3IodGFyZ2V0SUQpIHx8IGFuY2VzdG9yTm9kZTtcblxuICAgIGZpcnN0Q2hpbGRyZW5bMF0gPSBkZWVwZXN0QW5jZXN0b3IuZmlyc3RDaGlsZDtcbiAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDE7XG5cbiAgICB3aGlsZSAoY2hpbGRJbmRleCA8IGZpcnN0Q2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICB2YXIgY2hpbGQgPSBmaXJzdENoaWxkcmVuW2NoaWxkSW5kZXgrK107XG4gICAgICB2YXIgdGFyZ2V0Q2hpbGQ7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICB2YXIgY2hpbGRJRCA9IFJlYWN0TW91bnQuZ2V0SUQoY2hpbGQpO1xuICAgICAgICBpZiAoY2hpbGRJRCkge1xuICAgICAgICAgIC8vIEV2ZW4gaWYgd2UgZmluZCB0aGUgbm9kZSB3ZSdyZSBsb29raW5nIGZvciwgd2UgZmluaXNoIGxvb3BpbmdcbiAgICAgICAgICAvLyB0aHJvdWdoIGl0cyBzaWJsaW5ncyB0byBlbnN1cmUgdGhleSdyZSBjYWNoZWQgc28gdGhhdCB3ZSBkb24ndCBoYXZlXG4gICAgICAgICAgLy8gdG8gcmV2aXNpdCB0aGlzIG5vZGUgYWdhaW4uIE90aGVyd2lzZSwgd2UgbWFrZSBuXjIgY2FsbHMgdG8gZ2V0SURcbiAgICAgICAgICAvLyB3aGVuIHZpc2l0aW5nIHRoZSBtYW55IGNoaWxkcmVuIG9mIGEgc2luZ2xlIG5vZGUgaW4gb3JkZXIuXG5cbiAgICAgICAgICBpZiAodGFyZ2V0SUQgPT09IGNoaWxkSUQpIHtcbiAgICAgICAgICAgIHRhcmdldENoaWxkID0gY2hpbGQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChSZWFjdEluc3RhbmNlSGFuZGxlcy5pc0FuY2VzdG9ySURPZihjaGlsZElELCB0YXJnZXRJRCkpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGZpbmQgYSBjaGlsZCB3aG9zZSBJRCBpcyBhbiBhbmNlc3RvciBvZiB0aGUgZ2l2ZW4gSUQsXG4gICAgICAgICAgICAvLyB0aGVuIHdlIGNhbiBiZSBzdXJlIHRoYXQgd2Ugb25seSB3YW50IHRvIHNlYXJjaCB0aGUgc3VidHJlZVxuICAgICAgICAgICAgLy8gcm9vdGVkIGF0IHRoaXMgY2hpbGQsIHNvIHdlIGNhbiB0aHJvdyBvdXQgdGhlIHJlc3Qgb2YgdGhlXG4gICAgICAgICAgICAvLyBzZWFyY2ggc3RhdGUuXG4gICAgICAgICAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IGNoaWxkSW5kZXggPSAwO1xuICAgICAgICAgICAgZmlyc3RDaGlsZHJlbi5wdXNoKGNoaWxkLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHRoaXMgY2hpbGQgaGFkIG5vIElELCB0aGVuIHRoZXJlJ3MgYSBjaGFuY2UgdGhhdCBpdCB3YXNcbiAgICAgICAgICAvLyBpbmplY3RlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBicm93c2VyLCBhcyB3aGVuIGEgYDx0YWJsZT5gXG4gICAgICAgICAgLy8gZWxlbWVudCBzcHJvdXRzIGFuIGV4dHJhIGA8dGJvZHk+YCBjaGlsZCBhcyBhIHNpZGUgZWZmZWN0IG9mXG4gICAgICAgICAgLy8gYC5pbm5lckhUTUxgIHBhcnNpbmcuIE9wdGltaXN0aWNhbGx5IGNvbnRpbnVlIGRvd24gdGhpc1xuICAgICAgICAgIC8vIGJyYW5jaCwgYnV0IG5vdCBiZWZvcmUgZXhhbWluaW5nIHRoZSBvdGhlciBzaWJsaW5ncy5cbiAgICAgICAgICBmaXJzdENoaWxkcmVuLnB1c2goY2hpbGQuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0Q2hpbGQpIHtcbiAgICAgICAgLy8gRW1wdHlpbmcgZmlyc3RDaGlsZHJlbi9maW5kQ29tcG9uZW50Um9vdFJldXNhYmxlQXJyYXkgaXNcbiAgICAgICAgLy8gbm90IG5lY2Vzc2FyeSBmb3IgY29ycmVjdG5lc3MsIGJ1dCBpdCBoZWxwcyB0aGUgR0MgcmVjbGFpbVxuICAgICAgICAvLyBhbnkgbm9kZXMgdGhhdCB3ZXJlIGxlZnQgYXQgdGhlIGVuZCBvZiB0aGUgc2VhcmNoLlxuICAgICAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENoaWxkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpcnN0Q2hpbGRyZW4ubGVuZ3RoID0gMDtcblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdmaW5kQ29tcG9uZW50Um9vdCguLi4sICVzKTogVW5hYmxlIHRvIGZpbmQgZWxlbWVudC4gVGhpcyBwcm9iYWJseSAnICtcbiAgICAgICdtZWFucyB0aGUgRE9NIHdhcyB1bmV4cGVjdGVkbHkgbXV0YXRlZCAoZS5nLiwgYnkgdGhlIGJyb3dzZXIpLCAnICtcbiAgICAgICd1c3VhbGx5IGR1ZSB0byBmb3JnZXR0aW5nIGEgPHRib2R5PiB3aGVuIHVzaW5nIHRhYmxlcywgbmVzdGluZyB0YWdzICcgK1xuICAgICAgJ2xpa2UgPGZvcm0+LCA8cD4sIG9yIDxhPiwgb3IgdXNpbmcgbm9uLVNWRyBlbGVtZW50cyBpbiBhbiA8c3ZnPiAnICtcbiAgICAgICdwYXJlbnQuICcgK1xuICAgICAgJ1RyeSBpbnNwZWN0aW5nIHRoZSBjaGlsZCBub2RlcyBvZiB0aGUgZWxlbWVudCB3aXRoIFJlYWN0IElEIGAlc2AuJyxcbiAgICAgIHRhcmdldElELFxuICAgICAgUmVhY3RNb3VudC5nZXRJRChhbmNlc3Rvck5vZGUpXG4gICAgKSA6IGludmFyaWFudChmYWxzZSkpO1xuICB9LFxuXG4gIF9tb3VudEltYWdlSW50b05vZGU6IGZ1bmN0aW9uKG1hcmt1cCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBjb250YWluZXIgJiYgKFxuICAgICAgICAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpXG4gICAgICApLFxuICAgICAgJ21vdW50Q29tcG9uZW50SW50b05vZGUoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgdmFsaWQuJ1xuICAgICkgOiBpbnZhcmlhbnQoY29udGFpbmVyICYmIChcbiAgICAgIChjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSlcbiAgICApKSk7XG5cbiAgICBpZiAoc2hvdWxkUmV1c2VNYXJrdXApIHtcbiAgICAgIHZhciByb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgaWYgKFJlYWN0TWFya3VwQ2hlY2tzdW0uY2FuUmV1c2VNYXJrdXAobWFya3VwLCByb290RWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNoZWNrc3VtID0gcm9vdEVsZW1lbnQuZ2V0QXR0cmlidXRlKFxuICAgICAgICAgIFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FXG4gICAgICAgICk7XG4gICAgICAgIHJvb3RFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSk7XG5cbiAgICAgICAgdmFyIHJvb3RNYXJrdXAgPSByb290RWxlbWVudC5vdXRlckhUTUw7XG4gICAgICAgIHJvb3RFbGVtZW50LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICBSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSxcbiAgICAgICAgICBjaGVja3N1bVxuICAgICAgICApO1xuXG4gICAgICAgIHZhciBkaWZmSW5kZXggPSBmaXJzdERpZmZlcmVuY2VJbmRleChtYXJrdXAsIHJvb3RNYXJrdXApO1xuICAgICAgICB2YXIgZGlmZmVyZW5jZSA9ICcgKGNsaWVudCkgJyArXG4gICAgICAgICAgbWFya3VwLnN1YnN0cmluZyhkaWZmSW5kZXggLSAyMCwgZGlmZkluZGV4ICsgMjApICtcbiAgICAgICAgICAnXFxuIChzZXJ2ZXIpICcgKyByb290TWFya3VwLnN1YnN0cmluZyhkaWZmSW5kZXggLSAyMCwgZGlmZkluZGV4ICsgMjApO1xuXG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgY29udGFpbmVyLm5vZGVUeXBlICE9PSBET0NfTk9ERV9UWVBFLFxuICAgICAgICAgICdZb3VcXCdyZSB0cnlpbmcgdG8gcmVuZGVyIGEgY29tcG9uZW50IHRvIHRoZSBkb2N1bWVudCB1c2luZyAnICtcbiAgICAgICAgICAnc2VydmVyIHJlbmRlcmluZyBidXQgdGhlIGNoZWNrc3VtIHdhcyBpbnZhbGlkLiBUaGlzIHVzdWFsbHkgJyArXG4gICAgICAgICAgJ21lYW5zIHlvdSByZW5kZXJlZCBhIGRpZmZlcmVudCBjb21wb25lbnQgdHlwZSBvciBwcm9wcyBvbiAnICtcbiAgICAgICAgICAndGhlIGNsaWVudCBmcm9tIHRoZSBvbmUgb24gdGhlIHNlcnZlciwgb3IgeW91ciByZW5kZXIoKSAnICtcbiAgICAgICAgICAnbWV0aG9kcyBhcmUgaW1wdXJlLiBSZWFjdCBjYW5ub3QgaGFuZGxlIHRoaXMgY2FzZSBkdWUgdG8gJyArXG4gICAgICAgICAgJ2Nyb3NzLWJyb3dzZXIgcXVpcmtzIGJ5IHJlbmRlcmluZyBhdCB0aGUgZG9jdW1lbnQgcm9vdC4gWW91ICcgK1xuICAgICAgICAgICdzaG91bGQgbG9vayBmb3IgZW52aXJvbm1lbnQgZGVwZW5kZW50IGNvZGUgaW4geW91ciBjb21wb25lbnRzICcgK1xuICAgICAgICAgICdhbmQgZW5zdXJlIHRoZSBwcm9wcyBhcmUgdGhlIHNhbWUgY2xpZW50IGFuZCBzZXJ2ZXIgc2lkZTpcXG4lcycsXG4gICAgICAgICAgZGlmZmVyZW5jZVxuICAgICAgICApIDogaW52YXJpYW50KGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSkpO1xuXG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgJ1JlYWN0IGF0dGVtcHRlZCB0byByZXVzZSBtYXJrdXAgaW4gYSBjb250YWluZXIgYnV0IHRoZSAnICtcbiAgICAgICAgICAgICdjaGVja3N1bSB3YXMgaW52YWxpZC4gVGhpcyBnZW5lcmFsbHkgbWVhbnMgdGhhdCB5b3UgYXJlICcgK1xuICAgICAgICAgICAgJ3VzaW5nIHNlcnZlciByZW5kZXJpbmcgYW5kIHRoZSBtYXJrdXAgZ2VuZXJhdGVkIG9uIHRoZSAnICtcbiAgICAgICAgICAgICdzZXJ2ZXIgd2FzIG5vdCB3aGF0IHRoZSBjbGllbnQgd2FzIGV4cGVjdGluZy4gUmVhY3QgaW5qZWN0ZWQgJyArXG4gICAgICAgICAgICAnbmV3IG1hcmt1cCB0byBjb21wZW5zYXRlIHdoaWNoIHdvcmtzIGJ1dCB5b3UgaGF2ZSBsb3N0IG1hbnkgJyArXG4gICAgICAgICAgICAnb2YgdGhlIGJlbmVmaXRzIG9mIHNlcnZlciByZW5kZXJpbmcuIEluc3RlYWQsIGZpZ3VyZSBvdXQgJyArXG4gICAgICAgICAgICAnd2h5IHRoZSBtYXJrdXAgYmVpbmcgZ2VuZXJhdGVkIGlzIGRpZmZlcmVudCBvbiB0aGUgY2xpZW50ICcgK1xuICAgICAgICAgICAgJ29yIHNlcnZlcjpcXG4lcycsXG4gICAgICAgICAgICBkaWZmZXJlbmNlXG4gICAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSxcbiAgICAgICdZb3VcXCdyZSB0cnlpbmcgdG8gcmVuZGVyIGEgY29tcG9uZW50IHRvIHRoZSBkb2N1bWVudCBidXQgJyArXG4gICAgICAgICd5b3UgZGlkblxcJ3QgdXNlIHNlcnZlciByZW5kZXJpbmcuIFdlIGNhblxcJ3QgZG8gdGhpcyAnICtcbiAgICAgICAgJ3dpdGhvdXQgdXNpbmcgc2VydmVyIHJlbmRlcmluZyBkdWUgdG8gY3Jvc3MtYnJvd3NlciBxdWlya3MuICcgK1xuICAgICAgICAnU2VlIFJlYWN0LnJlbmRlclRvU3RyaW5nKCkgZm9yIHNlcnZlciByZW5kZXJpbmcuJ1xuICAgICkgOiBpbnZhcmlhbnQoY29udGFpbmVyLm5vZGVUeXBlICE9PSBET0NfTk9ERV9UWVBFKSk7XG5cbiAgICBzZXRJbm5lckhUTUwoY29udGFpbmVyLCBtYXJrdXApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWFjdCBJRCB1dGlsaXRpZXMuXG4gICAqL1xuXG4gIGdldFJlYWN0Um9vdElEOiBnZXRSZWFjdFJvb3RJRCxcblxuICBnZXRJRDogZ2V0SUQsXG5cbiAgc2V0SUQ6IHNldElELFxuXG4gIGdldE5vZGU6IGdldE5vZGUsXG5cbiAgZ2V0Tm9kZUZyb21JbnN0YW5jZTogZ2V0Tm9kZUZyb21JbnN0YW5jZSxcblxuICBwdXJnZUlEOiBwdXJnZUlEXG59O1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoUmVhY3RNb3VudCwgJ1JlYWN0TW91bnQnLCB7XG4gIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiAnX3JlbmRlck5ld1Jvb3RDb21wb25lbnQnLFxuICBfbW91bnRJbWFnZUludG9Ob2RlOiAnX21vdW50SW1hZ2VJbnRvTm9kZSdcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TW91bnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0RPTVByb3BlcnR5XCI6MTU3LFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIjoxNzksXCIuL1JlYWN0Q3VycmVudE93bmVyXCI6MTkxLFwiLi9SZWFjdEVsZW1lbnRcIjoyMDksXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiOjIxMCxcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFwiOjIxMSxcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIjoyMTgsXCIuL1JlYWN0SW5zdGFuY2VNYXBcIjoyMTksXCIuL1JlYWN0TWFya3VwQ2hlY2tzdW1cIjoyMjIsXCIuL1JlYWN0UGVyZlwiOjIyOCxcIi4vUmVhY3RSZWNvbmNpbGVyXCI6MjM1LFwiLi9SZWFjdFVwZGF0ZVF1ZXVlXCI6MjQ1LFwiLi9SZWFjdFVwZGF0ZXNcIjoyNDYsXCIuL2NvbnRhaW5zTm9kZVwiOjI3MCxcIi4vZW1wdHlPYmplY3RcIjoyNzcsXCIuL2dldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lclwiOjI5MSxcIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFwiOjI5NixcIi4vaW52YXJpYW50XCI6Mjk3LFwiLi9zZXRJbm5lckhUTUxcIjozMTEsXCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XCI6MzE0LFwiLi93YXJuaW5nXCI6MzE4LFwiX3Byb2Nlc3NcIjoxfV0sMjI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE11bHRpQ2hpbGRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnRcIik7XG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSByZXF1aXJlKFwiLi9SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc1wiKTtcblxudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlclwiKTtcbnZhciBSZWFjdENoaWxkUmVjb25jaWxlciA9IHJlcXVpcmUoXCIuL1JlYWN0Q2hpbGRSZWNvbmNpbGVyXCIpO1xuXG4vKipcbiAqIFVwZGF0aW5nIGNoaWxkcmVuIG9mIGEgY29tcG9uZW50IG1heSB0cmlnZ2VyIHJlY3Vyc2l2ZSB1cGRhdGVzLiBUaGUgZGVwdGggaXNcbiAqIHVzZWQgdG8gYmF0Y2ggcmVjdXJzaXZlIHVwZGF0ZXMgdG8gcmVuZGVyIG1hcmt1cCBtb3JlIGVmZmljaWVudGx5LlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgdXBkYXRlRGVwdGggPSAwO1xuXG4vKipcbiAqIFF1ZXVlIG9mIHVwZGF0ZSBjb25maWd1cmF0aW9uIG9iamVjdHMuXG4gKlxuICogRWFjaCBvYmplY3QgaGFzIGEgYHR5cGVgIHByb3BlcnR5IHRoYXQgaXMgaW4gYFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzYC5cbiAqXG4gKiBAdHlwZSB7YXJyYXk8b2JqZWN0Pn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciB1cGRhdGVRdWV1ZSA9IFtdO1xuXG4vKipcbiAqIFF1ZXVlIG9mIG1hcmt1cCB0byBiZSByZW5kZXJlZC5cbiAqXG4gKiBAdHlwZSB7YXJyYXk8c3RyaW5nPn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBtYXJrdXBRdWV1ZSA9IFtdO1xuXG4vKipcbiAqIEVucXVldWVzIG1hcmt1cCB0byBiZSByZW5kZXJlZCBhbmQgaW5zZXJ0ZWQgYXQgYSBzdXBwbGllZCBpbmRleC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIE1hcmt1cCB0aGF0IHJlbmRlcnMgaW50byBhbiBlbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXguXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlTWFya3VwKHBhcmVudElELCBtYXJrdXAsIHRvSW5kZXgpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICB1cGRhdGVRdWV1ZS5wdXNoKHtcbiAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5JTlNFUlRfTUFSS1VQLFxuICAgIG1hcmt1cEluZGV4OiBtYXJrdXBRdWV1ZS5wdXNoKG1hcmt1cCkgLSAxLFxuICAgIHRleHRDb250ZW50OiBudWxsLFxuICAgIGZyb21JbmRleDogbnVsbCxcbiAgICB0b0luZGV4OiB0b0luZGV4XG4gIH0pO1xufVxuXG4vKipcbiAqIEVucXVldWVzIG1vdmluZyBhbiBleGlzdGluZyBlbGVtZW50IHRvIGFub3RoZXIgaW5kZXguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBTb3VyY2UgaW5kZXggb2YgdGhlIGV4aXN0aW5nIGVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleCBvZiB0aGUgZWxlbWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVNb3ZlKHBhcmVudElELCBmcm9tSW5kZXgsIHRvSW5kZXgpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICB1cGRhdGVRdWV1ZS5wdXNoKHtcbiAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5NT1ZFX0VYSVNUSU5HLFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIHRleHRDb250ZW50OiBudWxsLFxuICAgIGZyb21JbmRleDogZnJvbUluZGV4LFxuICAgIHRvSW5kZXg6IHRvSW5kZXhcbiAgfSk7XG59XG5cbi8qKlxuICogRW5xdWV1ZXMgcmVtb3ZpbmcgYW4gZWxlbWVudCBhdCBhbiBpbmRleC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IEluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJlbW92ZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVSZW1vdmUocGFyZW50SUQsIGZyb21JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFLFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIHRleHRDb250ZW50OiBudWxsLFxuICAgIGZyb21JbmRleDogZnJvbUluZGV4LFxuICAgIHRvSW5kZXg6IG51bGxcbiAgfSk7XG59XG5cbi8qKlxuICogRW5xdWV1ZXMgc2V0dGluZyB0aGUgdGV4dCBjb250ZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0Q29udGVudCBUZXh0IGNvbnRlbnQgdG8gc2V0LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZVRleHRDb250ZW50KHBhcmVudElELCB0ZXh0Q29udGVudCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlRFWFRfQ09OVEVOVCxcbiAgICBtYXJrdXBJbmRleDogbnVsbCxcbiAgICB0ZXh0Q29udGVudDogdGV4dENvbnRlbnQsXG4gICAgZnJvbUluZGV4OiBudWxsLFxuICAgIHRvSW5kZXg6IG51bGxcbiAgfSk7XG59XG5cbi8qKlxuICogUHJvY2Vzc2VzIGFueSBlbnF1ZXVlZCB1cGRhdGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NRdWV1ZSgpIHtcbiAgaWYgKHVwZGF0ZVF1ZXVlLmxlbmd0aCkge1xuICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyhcbiAgICAgIHVwZGF0ZVF1ZXVlLFxuICAgICAgbWFya3VwUXVldWVcbiAgICApO1xuICAgIGNsZWFyUXVldWUoKTtcbiAgfVxufVxuXG4vKipcbiAqIENsZWFycyBhbnkgZW5xdWV1ZWQgdXBkYXRlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjbGVhclF1ZXVlKCkge1xuICB1cGRhdGVRdWV1ZS5sZW5ndGggPSAwO1xuICBtYXJrdXBRdWV1ZS5sZW5ndGggPSAwO1xufVxuXG4vKipcbiAqIFJlYWN0TXVsdGlDaGlsZCBhcmUgY2FwYWJsZSBvZiByZWNvbmNpbGluZyBtdWx0aXBsZSBjaGlsZHJlbi5cbiAqXG4gKiBAY2xhc3MgUmVhY3RNdWx0aUNoaWxkXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0TXVsdGlDaGlsZCA9IHtcblxuICAvKipcbiAgICogUHJvdmlkZXMgY29tbW9uIGZ1bmN0aW9uYWxpdHkgZm9yIGNvbXBvbmVudHMgdGhhdCBtdXN0IHJlY29uY2lsZSBtdWx0aXBsZVxuICAgKiBjaGlsZHJlbi4gVGhpcyBpcyB1c2VkIGJ5IGBSZWFjdERPTUNvbXBvbmVudGAgdG8gbW91bnQsIHVwZGF0ZSwgYW5kXG4gICAqIHVubW91bnQgY2hpbGQgY29tcG9uZW50cy5cbiAgICpcbiAgICogQGxlbmRzIHtSZWFjdE11bHRpQ2hpbGQucHJvdG90eXBlfVxuICAgKi9cbiAgTWl4aW46IHtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFwibW91bnQgaW1hZ2VcIiBmb3IgZWFjaCBvZiB0aGUgc3VwcGxpZWQgY2hpbGRyZW4uIEluIHRoZSBjYXNlXG4gICAgICogb2YgYFJlYWN0RE9NQ29tcG9uZW50YCwgYSBtb3VudCBpbWFnZSBpcyBhIHN0cmluZyBvZiBtYXJrdXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5lc3RlZENoaWxkcmVuIE5lc3RlZCBjaGlsZCBtYXBzLlxuICAgICAqIEByZXR1cm4ge2FycmF5fSBBbiBhcnJheSBvZiBtb3VudGVkIHJlcHJlc2VudGF0aW9ucy5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBtb3VudENoaWxkcmVuOiBmdW5jdGlvbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IFJlYWN0Q2hpbGRSZWNvbmNpbGVyLmluc3RhbnRpYXRlQ2hpbGRyZW4oXG4gICAgICAgIG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dFxuICAgICAgKTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgIHZhciBtb3VudEltYWdlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5bbmFtZV07XG4gICAgICAgICAgLy8gSW5saW5lZCBmb3IgcGVyZm9ybWFuY2UsIHNlZSBgUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RJRGAuXG4gICAgICAgICAgdmFyIHJvb3RJRCA9IHRoaXMuX3Jvb3ROb2RlSUQgKyBuYW1lO1xuICAgICAgICAgIHZhciBtb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KFxuICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICByb290SUQsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbW91bnRJbWFnZXMucHVzaChtb3VudEltYWdlKTtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbW91bnRJbWFnZXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIGFueSByZW5kZXJlZCBjaGlsZHJlbiB3aXRoIGEgdGV4dCBjb250ZW50IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXh0Q29udGVudCBTdHJpbmcgb2YgY29udGVudC5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVUZXh0Q29udGVudDogZnVuY3Rpb24obmV4dENvbnRlbnQpIHtcbiAgICAgIHVwZGF0ZURlcHRoKys7XG4gICAgICB2YXIgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAgIC8vIFJlbW92ZSBhbnkgcmVuZGVyZWQgY2hpbGRyZW4uXG4gICAgICAgIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVubW91bnRDaGlsZHJlbihwcmV2Q2hpbGRyZW4pO1xuICAgICAgICAvLyBUT0RPOiBUaGUgc2V0VGV4dENvbnRlbnQgb3BlcmF0aW9uIHNob3VsZCBiZSBlbm91Z2hcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLl91bm1vdW50Q2hpbGRCeU5hbWUocHJldkNoaWxkcmVuW25hbWVdLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IG5ldyB0ZXh0IGNvbnRlbnQuXG4gICAgICAgIHRoaXMuc2V0VGV4dENvbnRlbnQobmV4dENvbnRlbnQpO1xuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdXBkYXRlRGVwdGgtLTtcbiAgICAgICAgaWYgKCF1cGRhdGVEZXB0aCkge1xuICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgY2xlYXJRdWV1ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzUXVldWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBuZXcgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZHJlbiBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uKG5leHROZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHVwZGF0ZURlcHRoKys7XG4gICAgICB2YXIgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5fdXBkYXRlQ2hpbGRyZW4obmV4dE5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB1cGRhdGVEZXB0aC0tO1xuICAgICAgICBpZiAoIXVwZGF0ZURlcHRoKSB7XG4gICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICBjbGVhclF1ZXVlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NRdWV1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEltcHJvdmUgcGVyZm9ybWFuY2UgYnkgaXNvbGF0aW5nIHRoaXMgaG90IGNvZGUgcGF0aCBmcm9tIHRoZSB0cnkvY2F0Y2hcbiAgICAgKiBibG9jayBpbiBgdXBkYXRlQ2hpbGRyZW5gLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0TmVzdGVkQ2hpbGRyZW4gTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBmaW5hbFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfdXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uKG5leHROZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgdmFyIG5leHRDaGlsZHJlbiA9IFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVwZGF0ZUNoaWxkcmVuKFxuICAgICAgICBwcmV2Q2hpbGRyZW4sIG5leHROZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHRcbiAgICAgICk7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbmV4dENoaWxkcmVuO1xuICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4gJiYgIXByZXZDaGlsZHJlbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmFtZTtcbiAgICAgIC8vIGBuZXh0SW5kZXhgIHdpbGwgaW5jcmVtZW50IGZvciBlYWNoIGNoaWxkIGluIGBuZXh0Q2hpbGRyZW5gLCBidXRcbiAgICAgIC8vIGBsYXN0SW5kZXhgIHdpbGwgYmUgdGhlIGxhc3QgaW5kZXggdmlzaXRlZCBpbiBgcHJldkNoaWxkcmVuYC5cbiAgICAgIHZhciBsYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG5leHRJbmRleCA9IDA7XG4gICAgICBmb3IgKG5hbWUgaW4gbmV4dENoaWxkcmVuKSB7XG4gICAgICAgIGlmICghbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZHJlbiAmJiBwcmV2Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgIHZhciBuZXh0Q2hpbGQgPSBuZXh0Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgIGlmIChwcmV2Q2hpbGQgPT09IG5leHRDaGlsZCkge1xuICAgICAgICAgIHRoaXMubW92ZUNoaWxkKHByZXZDaGlsZCwgbmV4dEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgubWF4KHByZXZDaGlsZC5fbW91bnRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICBwcmV2Q2hpbGQuX21vdW50SW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGBsYXN0SW5kZXhgIGJlZm9yZSBgX21vdW50SW5kZXhgIGdldHMgdW5zZXQgYnkgdW5tb3VudGluZy5cbiAgICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgubWF4KHByZXZDaGlsZC5fbW91bnRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZEJ5TmFtZShwcmV2Q2hpbGQsIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUaGUgY2hpbGQgbXVzdCBiZSBpbnN0YW50aWF0ZWQgYmVmb3JlIGl0J3MgbW91bnRlZC5cbiAgICAgICAgICB0aGlzLl9tb3VudENoaWxkQnlOYW1lQXRJbmRleChcbiAgICAgICAgICAgIG5leHRDaGlsZCwgbmFtZSwgbmV4dEluZGV4LCB0cmFuc2FjdGlvbiwgY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEluZGV4Kys7XG4gICAgICB9XG4gICAgICAvLyBSZW1vdmUgY2hpbGRyZW4gdGhhdCBhcmUgbm8gbG9uZ2VyIHByZXNlbnQuXG4gICAgICBmb3IgKG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgICAgICEobmV4dENoaWxkcmVuICYmIG5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkpIHtcbiAgICAgICAgICB0aGlzLl91bm1vdW50Q2hpbGRCeU5hbWUocHJldkNoaWxkcmVuW25hbWVdLCBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVbm1vdW50cyBhbGwgcmVuZGVyZWQgY2hpbGRyZW4uIFRoaXMgc2hvdWxkIGJlIHVzZWQgdG8gY2xlYW4gdXAgY2hpbGRyZW5cbiAgICAgKiB3aGVuIHRoaXMgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVubW91bnRDaGlsZHJlbjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4ocmVuZGVyZWRDaGlsZHJlbik7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYSBjaGlsZCBjb21wb25lbnQgdG8gdGhlIHN1cHBsaWVkIGluZGV4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIG1vdmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXggb2YgdGhlIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxhc3RJbmRleCBMYXN0IGluZGV4IHZpc2l0ZWQgb2YgdGhlIHNpYmxpbmdzIG9mIGBjaGlsZGAuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG1vdmVDaGlsZDogZnVuY3Rpb24oY2hpbGQsIHRvSW5kZXgsIGxhc3RJbmRleCkge1xuICAgICAgLy8gSWYgdGhlIGluZGV4IG9mIGBjaGlsZGAgaXMgbGVzcyB0aGFuIGBsYXN0SW5kZXhgLCB0aGVuIGl0IG5lZWRzIHRvXG4gICAgICAvLyBiZSBtb3ZlZC4gT3RoZXJ3aXNlLCB3ZSBkbyBub3QgbmVlZCB0byBtb3ZlIGl0IGJlY2F1c2UgYSBjaGlsZCB3aWxsIGJlXG4gICAgICAvLyBpbnNlcnRlZCBvciBtb3ZlZCBiZWZvcmUgYGNoaWxkYC5cbiAgICAgIGlmIChjaGlsZC5fbW91bnRJbmRleCA8IGxhc3RJbmRleCkge1xuICAgICAgICBlbnF1ZXVlTW92ZSh0aGlzLl9yb290Tm9kZUlELCBjaGlsZC5fbW91bnRJbmRleCwgdG9JbmRleCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjaGlsZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gY3JlYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb3VudEltYWdlIE1hcmt1cCB0byBpbnNlcnQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGNyZWF0ZUNoaWxkOiBmdW5jdGlvbihjaGlsZCwgbW91bnRJbWFnZSkge1xuICAgICAgZW5xdWV1ZU1hcmt1cCh0aGlzLl9yb290Tm9kZUlELCBtb3VudEltYWdlLCBjaGlsZC5fbW91bnRJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjaGlsZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDaGlsZCB0byByZW1vdmUuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHJlbW92ZUNoaWxkOiBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgZW5xdWV1ZVJlbW92ZSh0aGlzLl9yb290Tm9kZUlELCBjaGlsZC5fbW91bnRJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhpcyB0ZXh0IGNvbnRlbnQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRDb250ZW50IFRleHQgY29udGVudCB0byBzZXQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHNldFRleHRDb250ZW50OiBmdW5jdGlvbih0ZXh0Q29udGVudCkge1xuICAgICAgZW5xdWV1ZVRleHRDb250ZW50KHRoaXMuX3Jvb3ROb2RlSUQsIHRleHRDb250ZW50KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW91bnRzIGEgY2hpbGQgd2l0aCB0aGUgc3VwcGxpZWQgbmFtZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgaXMgcGFydCBvZiBgdXBkYXRlQ2hpbGRyZW5gIGFuZCBpcyBoZXJlIGZvciByZWFkYWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBtb3VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBjaGlsZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbW91bnRDaGlsZEJ5TmFtZUF0SW5kZXg6IGZ1bmN0aW9uKFxuICAgICAgY2hpbGQsXG4gICAgICBuYW1lLFxuICAgICAgaW5kZXgsXG4gICAgICB0cmFuc2FjdGlvbixcbiAgICAgIGNvbnRleHQpIHtcbiAgICAgIC8vIElubGluZWQgZm9yIHBlcmZvcm1hbmNlLCBzZWUgYFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0SURgLlxuICAgICAgdmFyIHJvb3RJRCA9IHRoaXMuX3Jvb3ROb2RlSUQgKyBuYW1lO1xuICAgICAgdmFyIG1vdW50SW1hZ2UgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoXG4gICAgICAgIGNoaWxkLFxuICAgICAgICByb290SUQsXG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBpbmRleDtcbiAgICAgIHRoaXMuY3JlYXRlQ2hpbGQoY2hpbGQsIG1vdW50SW1hZ2UpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVbm1vdW50cyBhIHJlbmRlcmVkIGNoaWxkIGJ5IG5hbWUuXG4gICAgICpcbiAgICAgKiBOT1RFOiBUaGlzIGlzIHBhcnQgb2YgYHVwZGF0ZUNoaWxkcmVuYCBhbmQgaXMgaGVyZSBmb3IgcmVhZGFiaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gdW5tb3VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBjaGlsZCBpbiBgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbmAuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdW5tb3VudENoaWxkQnlOYW1lOiBmdW5jdGlvbihjaGlsZCwgbmFtZSkge1xuICAgICAgdGhpcy5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICBjaGlsZC5fbW91bnRJbmRleCA9IG51bGw7XG4gICAgfVxuXG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGQ7XG5cbn0se1wiLi9SZWFjdENoaWxkUmVjb25jaWxlclwiOjE4MixcIi4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudFwiOjE4NyxcIi4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNcIjoyMjUsXCIuL1JlYWN0UmVjb25jaWxlclwiOjIzNX1dLDIyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKFwiLi9rZXlNaXJyb3JcIik7XG5cbi8qKlxuICogV2hlbiBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGFyZSB1cGRhdGVkLCBhIHNlcmllcyBvZiB1cGRhdGUgY29uZmlndXJhdGlvblxuICogb2JqZWN0cyBhcmUgY3JlYXRlZCBpbiBvcmRlciB0byBiYXRjaCBhbmQgc2VyaWFsaXplIHRoZSByZXF1aXJlZCBjaGFuZ2VzLlxuICpcbiAqIEVudW1lcmF0ZXMgYWxsIHRoZSBwb3NzaWJsZSB0eXBlcyBvZiB1cGRhdGUgY29uZmlndXJhdGlvbnMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcyA9IGtleU1pcnJvcih7XG4gIElOU0VSVF9NQVJLVVA6IG51bGwsXG4gIE1PVkVfRVhJU1RJTkc6IG51bGwsXG4gIFJFTU9WRV9OT0RFOiBudWxsLFxuICBURVhUX0NPTlRFTlQ6IG51bGxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzO1xuXG59LHtcIi4va2V5TWlycm9yXCI6MzAzfV0sMjI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3ROYXRpdmVDb21wb25lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcyA9IG51bGw7XG52YXIgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gbnVsbDtcbi8vIFRoaXMgcmVnaXN0cnkga2VlcHMgdHJhY2sgb2Ygd3JhcHBlciBjbGFzc2VzIGFyb3VuZCBuYXRpdmUgdGFnc1xudmFyIHRhZ1RvQ29tcG9uZW50Q2xhc3MgPSB7fTtcbnZhciB0ZXh0Q29tcG9uZW50Q2xhc3MgPSBudWxsO1xuXG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb24gPSB7XG4gIC8vIFRoaXMgYWNjZXB0cyBhIGNsYXNzIHRoYXQgcmVjZWl2ZXMgdGhlIHRhZyBzdHJpbmcuIFRoaXMgaXMgYSBjYXRjaCBhbGxcbiAgLy8gdGhhdCBjYW4gcmVuZGVyIGFueSBraW5kIG9mIHRhZy5cbiAgaW5qZWN0R2VuZXJpY0NvbXBvbmVudENsYXNzOiBmdW5jdGlvbihjb21wb25lbnRDbGFzcykge1xuICAgIGdlbmVyaWNDb21wb25lbnRDbGFzcyA9IGNvbXBvbmVudENsYXNzO1xuICB9LFxuICAvLyBUaGlzIGFjY2VwdHMgYSB0ZXh0IGNvbXBvbmVudCBjbGFzcyB0aGF0IHRha2VzIHRoZSB0ZXh0IHN0cmluZyB0byBiZVxuICAvLyByZW5kZXJlZCBhcyBwcm9wcy5cbiAgaW5qZWN0VGV4dENvbXBvbmVudENsYXNzOiBmdW5jdGlvbihjb21wb25lbnRDbGFzcykge1xuICAgIHRleHRDb21wb25lbnRDbGFzcyA9IGNvbXBvbmVudENsYXNzO1xuICB9LFxuICAvLyBUaGlzIGFjY2VwdHMgYSBrZXllZCBvYmplY3Qgd2l0aCBjbGFzc2VzIGFzIHZhbHVlcy4gRWFjaCBrZXkgcmVwcmVzZW50cyBhXG4gIC8vIHRhZy4gVGhhdCBwYXJ0aWN1bGFyIHRhZyB3aWxsIHVzZSB0aGlzIGNsYXNzIGluc3RlYWQgb2YgdGhlIGdlbmVyaWMgb25lLlxuICBpbmplY3RDb21wb25lbnRDbGFzc2VzOiBmdW5jdGlvbihjb21wb25lbnRDbGFzc2VzKSB7XG4gICAgYXNzaWduKHRhZ1RvQ29tcG9uZW50Q2xhc3MsIGNvbXBvbmVudENsYXNzZXMpO1xuICB9LFxuICAvLyBUZW1wb3JhcnkgaGFjayBzaW5jZSB3ZSBleHBlY3QgRE9NIHJlZnMgdG8gYmVoYXZlIGxpa2UgY29tcG9zaXRlcyxcbiAgLy8gZm9yIHRoaXMgcmVsZWFzZS5cbiAgaW5qZWN0QXV0b1dyYXBwZXI6IGZ1bmN0aW9uKHdyYXBwZXJGYWN0b3J5KSB7XG4gICAgYXV0b0dlbmVyYXRlV3JhcHBlckNsYXNzID0gd3JhcHBlckZhY3Rvcnk7XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IGEgY29tcG9zaXRlIGNvbXBvbmVudCB3cmFwcGVyIGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBUaGUgdGFnIGZvciB3aGljaCB0byBnZXQgdGhlIGNsYXNzLlxuICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBSZWFjdCBjbGFzcyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgaWYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZWxlbWVudC50eXBlO1xuICB9XG4gIHZhciB0YWcgPSBlbGVtZW50LnR5cGU7XG4gIHZhciBjb21wb25lbnRDbGFzcyA9IHRhZ1RvQ29tcG9uZW50Q2xhc3NbdGFnXTtcbiAgaWYgKGNvbXBvbmVudENsYXNzID09IG51bGwpIHtcbiAgICB0YWdUb0NvbXBvbmVudENsYXNzW3RhZ10gPSBjb21wb25lbnRDbGFzcyA9IGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcyh0YWcpO1xuICB9XG4gIHJldHVybiBjb21wb25lbnRDbGFzcztcbn1cblxuLyoqXG4gKiBHZXQgYSBuYXRpdmUgaW50ZXJuYWwgY29tcG9uZW50IGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBjcmVhdGUuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGludGVybmFsIGNsYXNzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudChlbGVtZW50KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzLFxuICAgICdUaGVyZSBpcyBubyByZWdpc3RlcmVkIGNvbXBvbmVudCBmb3IgdGhlIHRhZyAlcycsXG4gICAgZWxlbWVudC50eXBlXG4gICkgOiBpbnZhcmlhbnQoZ2VuZXJpY0NvbXBvbmVudENsYXNzKSk7XG4gIHJldHVybiBuZXcgZ2VuZXJpY0NvbXBvbmVudENsYXNzKGVsZW1lbnQudHlwZSwgZWxlbWVudC5wcm9wcyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdFRleHR9IHRleHRcbiAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZUZvclRleHQodGV4dCkge1xuICByZXR1cm4gbmV3IHRleHRDb21wb25lbnRDbGFzcyh0ZXh0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVGV4dENvbXBvbmVudChjb21wb25lbnQpIHtcbiAgcmV0dXJuIGNvbXBvbmVudCBpbnN0YW5jZW9mIHRleHRDb21wb25lbnRDbGFzcztcbn1cblxudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0ge1xuICBnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQ6IGdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudCxcbiAgY3JlYXRlSW50ZXJuYWxDb21wb25lbnQ6IGNyZWF0ZUludGVybmFsQ29tcG9uZW50LFxuICBjcmVhdGVJbnN0YW5jZUZvclRleHQ6IGNyZWF0ZUluc3RhbmNlRm9yVGV4dCxcbiAgaXNUZXh0Q29tcG9uZW50OiBpc1RleHRDb21wb25lbnQsXG4gIGluamVjdGlvbjogUmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROYXRpdmVDb21wb25lbnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL2ludmFyaWFudFwiOjI5NyxcIl9wcm9jZXNzXCI6MX1dLDIyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0T3duZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogUmVhY3RPd25lcnMgYXJlIGNhcGFibGUgb2Ygc3RvcmluZyByZWZlcmVuY2VzIHRvIG93bmVkIGNvbXBvbmVudHMuXG4gKlxuICogQWxsIGNvbXBvbmVudHMgYXJlIGNhcGFibGUgb2YgLy9iZWluZy8vIHJlZmVyZW5jZWQgYnkgb3duZXIgY29tcG9uZW50cywgYnV0XG4gKiBvbmx5IFJlYWN0T3duZXIgY29tcG9uZW50cyBhcmUgY2FwYWJsZSBvZiAvL3JlZmVyZW5jaW5nLy8gb3duZWQgY29tcG9uZW50cy5cbiAqIFRoZSBuYW1lZCByZWZlcmVuY2UgaXMga25vd24gYXMgYSBcInJlZlwiLlxuICpcbiAqIFJlZnMgYXJlIGF2YWlsYWJsZSB3aGVuIG1vdW50ZWQgYW5kIHVwZGF0ZWQgZHVyaW5nIHJlY29uY2lsaWF0aW9uLlxuICpcbiAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gKiAgICAgICByZXR1cm4gKFxuICogICAgICAgICA8ZGl2IG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9PlxuICogICAgICAgICAgIDxDdXN0b21Db21wb25lbnQgcmVmPVwiY3VzdG9tXCIgLz5cbiAqICAgICAgICAgPC9kaXY+XG4gKiAgICAgICApO1xuICogICAgIH0sXG4gKiAgICAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICogICAgICAgdGhpcy5yZWZzLmN1c3RvbS5oYW5kbGVDbGljaygpO1xuICogICAgIH0sXG4gKiAgICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICogICAgICAgdGhpcy5yZWZzLmN1c3RvbS5pbml0aWFsaXplKCk7XG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiBSZWZzIHNob3VsZCByYXJlbHkgYmUgdXNlZC4gV2hlbiByZWZzIGFyZSB1c2VkLCB0aGV5IHNob3VsZCBvbmx5IGJlIGRvbmUgdG9cbiAqIGNvbnRyb2wgZGF0YSB0aGF0IGlzIG5vdCBoYW5kbGVkIGJ5IFJlYWN0J3MgZGF0YSBmbG93LlxuICpcbiAqIEBjbGFzcyBSZWFjdE93bmVyXG4gKi9cbnZhciBSZWFjdE93bmVyID0ge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvYmplY3RgIGlzIGEgdmFsaWQgb3duZXIuXG4gICAqIEBmaW5hbFxuICAgKi9cbiAgaXNWYWxpZE93bmVyOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gISEoXG4gICAgICAob2JqZWN0ICYmXG4gICAgICB0eXBlb2Ygb2JqZWN0LmF0dGFjaFJlZiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqZWN0LmRldGFjaFJlZiA9PT0gJ2Z1bmN0aW9uJylcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY29tcG9uZW50IGJ5IHJlZiB0byBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gcmVmZXJlbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgYnkgd2hpY2ggdG8gcmVmZXIgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdG8gcmVjb3JkIHRoZSByZWYuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFkZENvbXBvbmVudEFzUmVmVG86IGZ1bmN0aW9uKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lciksXG4gICAgICAnYWRkQ29tcG9uZW50QXNSZWZUbyguLi4pOiBPbmx5IGEgUmVhY3RPd25lciBjYW4gaGF2ZSByZWZzLiBUaGlzICcgK1xuICAgICAgJ3VzdWFsbHkgbWVhbnMgdGhhdCB5b3VcXCdyZSB0cnlpbmcgdG8gYWRkIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgJyArXG4gICAgICAnZG9lc25cXCd0IGhhdmUgYW4gb3duZXIgKHRoYXQgaXMsIHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgb2YgYW5vdGhlciAnICtcbiAgICAgICdjb21wb25lbnRcXCdzIGByZW5kZXJgIG1ldGhvZCkuIFRyeSByZW5kZXJpbmcgdGhpcyBjb21wb25lbnQgaW5zaWRlIG9mICcgK1xuICAgICAgJ2EgbmV3IHRvcC1sZXZlbCBjb21wb25lbnQgd2hpY2ggd2lsbCBob2xkIHRoZSByZWYuJ1xuICAgICkgOiBpbnZhcmlhbnQoUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpKSk7XG4gICAgb3duZXIuYXR0YWNoUmVmKHJlZiwgY29tcG9uZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNvbXBvbmVudCBieSByZWYgZnJvbSBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gZGVyZWZlcmVuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSBvZiB0aGUgcmVmIHRvIHJlbW92ZS5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdGhlIHJlZiBpcyByZWNvcmRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tOiBmdW5jdGlvbihjb21wb25lbnQsIHJlZiwgb3duZXIpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpLFxuICAgICAgJ3JlbW92ZUNvbXBvbmVudEFzUmVmRnJvbSguLi4pOiBPbmx5IGEgUmVhY3RPd25lciBjYW4gaGF2ZSByZWZzLiBUaGlzICcgK1xuICAgICAgJ3VzdWFsbHkgbWVhbnMgdGhhdCB5b3VcXCdyZSB0cnlpbmcgdG8gcmVtb3ZlIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgJyArXG4gICAgICAnZG9lc25cXCd0IGhhdmUgYW4gb3duZXIgKHRoYXQgaXMsIHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgb2YgYW5vdGhlciAnICtcbiAgICAgICdjb21wb25lbnRcXCdzIGByZW5kZXJgIG1ldGhvZCkuIFRyeSByZW5kZXJpbmcgdGhpcyBjb21wb25lbnQgaW5zaWRlIG9mICcgK1xuICAgICAgJ2EgbmV3IHRvcC1sZXZlbCBjb21wb25lbnQgd2hpY2ggd2lsbCBob2xkIHRoZSByZWYuJ1xuICAgICkgOiBpbnZhcmlhbnQoUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpKSk7XG4gICAgLy8gQ2hlY2sgdGhhdCBgY29tcG9uZW50YCBpcyBzdGlsbCB0aGUgY3VycmVudCByZWYgYmVjYXVzZSB3ZSBkbyBub3Qgd2FudCB0b1xuICAgIC8vIGRldGFjaCB0aGUgcmVmIGlmIGFub3RoZXIgY29tcG9uZW50IHN0b2xlIGl0LlxuICAgIGlmIChvd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpLnJlZnNbcmVmXSA9PT0gY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpIHtcbiAgICAgIG93bmVyLmRldGFjaFJlZihyZWYpO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0T3duZXI7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2ludmFyaWFudFwiOjI5NyxcIl9wcm9jZXNzXCI6MX1dLDIyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UGVyZlxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVhY3RQZXJmIGlzIGEgZ2VuZXJhbCBBT1Agc3lzdGVtIGRlc2lnbmVkIHRvIG1lYXN1cmUgcGVyZm9ybWFuY2UuIFRoaXNcbiAqIG1vZHVsZSBvbmx5IGhhcyB0aGUgaG9va3M6IHNlZSBSZWFjdERlZmF1bHRQZXJmIGZvciB0aGUgYW5hbHlzaXMgdG9vbC5cbiAqL1xudmFyIFJlYWN0UGVyZiA9IHtcbiAgLyoqXG4gICAqIEJvb2xlYW4gdG8gZW5hYmxlL2Rpc2FibGUgbWVhc3VyZW1lbnQuIFNldCB0byBmYWxzZSBieSBkZWZhdWx0IHRvIHByZXZlbnRcbiAgICogYWNjaWRlbnRhbCBsb2dnaW5nIGFuZCBwZXJmIGxvc3MuXG4gICAqL1xuICBlbmFibGVNZWFzdXJlOiBmYWxzZSxcblxuICAvKipcbiAgICogSG9sZHMgb250byB0aGUgbWVhc3VyZSBmdW5jdGlvbiBpbiB1c2UuIEJ5IGRlZmF1bHQsIGRvbid0IG1lYXN1cmVcbiAgICogYW55dGhpbmcsIGJ1dCB3ZSdsbCBvdmVycmlkZSB0aGlzIGlmIHdlIGluamVjdCBhIG1lYXN1cmUgZnVuY3Rpb24uXG4gICAqL1xuICBzdG9yZWRNZWFzdXJlOiBfbm9NZWFzdXJlLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmplY3ROYW1lXG4gICAqIEBwYXJhbSB7b2JqZWN0PHN0cmluZz59IG1ldGhvZE5hbWVzXG4gICAqL1xuICBtZWFzdXJlTWV0aG9kczogZnVuY3Rpb24ob2JqZWN0LCBvYmplY3ROYW1lLCBtZXRob2ROYW1lcykge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBtZXRob2ROYW1lcykge1xuICAgICAgICBpZiAoIW1ldGhvZE5hbWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3Rba2V5XSA9IFJlYWN0UGVyZi5tZWFzdXJlKFxuICAgICAgICAgIG9iamVjdE5hbWUsXG4gICAgICAgICAgbWV0aG9kTmFtZXNba2V5XSxcbiAgICAgICAgICBvYmplY3Rba2V5XVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVXNlIHRoaXMgdG8gd3JhcCBtZXRob2RzIHlvdSB3YW50IHRvIG1lYXN1cmUuIFplcm8gb3ZlcmhlYWQgaW4gcHJvZHVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9iak5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZuTmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgKi9cbiAgbWVhc3VyZTogZnVuY3Rpb24ob2JqTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdmFyIG1lYXN1cmVkRnVuYyA9IG51bGw7XG4gICAgICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoUmVhY3RQZXJmLmVuYWJsZU1lYXN1cmUpIHtcbiAgICAgICAgICBpZiAoIW1lYXN1cmVkRnVuYykge1xuICAgICAgICAgICAgbWVhc3VyZWRGdW5jID0gUmVhY3RQZXJmLnN0b3JlZE1lYXN1cmUob2JqTmFtZSwgZm5OYW1lLCBmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1lYXN1cmVkRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgd3JhcHBlci5kaXNwbGF5TmFtZSA9IG9iak5hbWUgKyAnXycgKyBmbk5hbWU7XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWVhc3VyZVxuICAgICAqL1xuICAgIGluamVjdE1lYXN1cmU6IGZ1bmN0aW9uKG1lYXN1cmUpIHtcbiAgICAgIFJlYWN0UGVyZi5zdG9yZWRNZWFzdXJlID0gbWVhc3VyZTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogU2ltcGx5IHBhc3NlcyB0aHJvdWdoIHRoZSBtZWFzdXJlZCBmdW5jdGlvbiwgd2l0aG91dCBtZWFzdXJpbmcgaXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG9iak5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBmbk5hbWVcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmNcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBfbm9NZWFzdXJlKG9iak5hbWUsIGZuTmFtZSwgZnVuYykge1xuICByZXR1cm4gZnVuYztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFBlcmY7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCJfcHJvY2Vzc1wiOjF9XSwyMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHJvcFRyYW5zZmVyZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xudmFyIGpvaW5DbGFzc2VzID0gcmVxdWlyZShcIi4vam9pbkNsYXNzZXNcIik7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRyYW5zZmVyIHN0cmF0ZWd5IHRoYXQgd2lsbCBtZXJnZSBwcm9wIHZhbHVlcyB1c2luZyB0aGUgc3VwcGxpZWRcbiAqIGBtZXJnZVN0cmF0ZWd5YC4gSWYgYSBwcm9wIHdhcyBwcmV2aW91c2x5IHVuc2V0LCB0aGlzIGp1c3Qgc2V0cyBpdC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXJnZVN0cmF0ZWd5XG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVHJhbnNmZXJTdHJhdGVneShtZXJnZVN0cmF0ZWd5KSB7XG4gIHJldHVybiBmdW5jdGlvbihwcm9wcywga2V5LCB2YWx1ZSkge1xuICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcHJvcHNba2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wc1trZXldID0gbWVyZ2VTdHJhdGVneShwcm9wc1trZXldLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgdHJhbnNmZXJTdHJhdGVneU1lcmdlID0gY3JlYXRlVHJhbnNmZXJTdHJhdGVneShmdW5jdGlvbihhLCBiKSB7XG4gIC8vIGBtZXJnZWAgb3ZlcnJpZGVzIHRoZSBmaXJzdCBvYmplY3QncyAoYHByb3BzW2tleV1gIGFib3ZlKSBrZXlzIHVzaW5nIHRoZVxuICAvLyBzZWNvbmQgb2JqZWN0J3MgKGB2YWx1ZWApIGtleXMuIEFuIG9iamVjdCdzIHN0eWxlJ3MgZXhpc3RpbmcgYHByb3BBYCB3b3VsZFxuICAvLyBnZXQgb3ZlcnJpZGRlbi4gRmxpcCB0aGUgb3JkZXIgaGVyZS5cbiAgcmV0dXJuIGFzc2lnbih7fSwgYiwgYSk7XG59KTtcblxuLyoqXG4gKiBUcmFuc2ZlciBzdHJhdGVnaWVzIGRpY3RhdGUgaG93IHByb3BzIGFyZSB0cmFuc2ZlcnJlZCBieSBgdHJhbnNmZXJQcm9wc1RvYC5cbiAqIE5PVEU6IGlmIHlvdSBhZGQgYW55IG1vcmUgZXhjZXB0aW9ucyB0byB0aGlzIGxpc3QgeW91IHNob3VsZCBiZSBzdXJlIHRvXG4gKiB1cGRhdGUgYGNsb25lV2l0aFByb3BzKClgIGFjY29yZGluZ2x5LlxuICovXG52YXIgVHJhbnNmZXJTdHJhdGVnaWVzID0ge1xuICAvKipcbiAgICogTmV2ZXIgdHJhbnNmZXIgYGNoaWxkcmVuYC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbXB0eUZ1bmN0aW9uLFxuICAvKipcbiAgICogVHJhbnNmZXIgdGhlIGBjbGFzc05hbWVgIHByb3AgYnkgbWVyZ2luZyB0aGVtLlxuICAgKi9cbiAgY2xhc3NOYW1lOiBjcmVhdGVUcmFuc2ZlclN0cmF0ZWd5KGpvaW5DbGFzc2VzKSxcbiAgLyoqXG4gICAqIFRyYW5zZmVyIHRoZSBgc3R5bGVgIHByb3AgKHdoaWNoIGlzIGFuIG9iamVjdCkgYnkgbWVyZ2luZyB0aGVtLlxuICAgKi9cbiAgc3R5bGU6IHRyYW5zZmVyU3RyYXRlZ3lNZXJnZVxufTtcblxuLyoqXG4gKiBNdXRhdGVzIHRoZSBmaXJzdCBhcmd1bWVudCBieSB0cmFuc2ZlcnJpbmcgdGhlIHByb3BlcnRpZXMgZnJvbSB0aGUgc2Vjb25kXG4gKiBhcmd1bWVudC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXdQcm9wc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiB0cmFuc2ZlckludG8ocHJvcHMsIG5ld1Byb3BzKSB7XG4gIGZvciAodmFyIHRoaXNLZXkgaW4gbmV3UHJvcHMpIHtcbiAgICBpZiAoIW5ld1Byb3BzLmhhc093blByb3BlcnR5KHRoaXNLZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNmZXJTdHJhdGVneSA9IFRyYW5zZmVyU3RyYXRlZ2llc1t0aGlzS2V5XTtcblxuICAgIGlmICh0cmFuc2ZlclN0cmF0ZWd5ICYmIFRyYW5zZmVyU3RyYXRlZ2llcy5oYXNPd25Qcm9wZXJ0eSh0aGlzS2V5KSkge1xuICAgICAgdHJhbnNmZXJTdHJhdGVneShwcm9wcywgdGhpc0tleSwgbmV3UHJvcHNbdGhpc0tleV0pO1xuICAgIH0gZWxzZSBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KHRoaXNLZXkpKSB7XG4gICAgICBwcm9wc1t0aGlzS2V5XSA9IG5ld1Byb3BzW3RoaXNLZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJvcHM7XG59XG5cbi8qKlxuICogUmVhY3RQcm9wVHJhbnNmZXJlciBhcmUgY2FwYWJsZSBvZiB0cmFuc2ZlcnJpbmcgcHJvcHMgdG8gYW5vdGhlciBjb21wb25lbnRcbiAqIHVzaW5nIGEgYHRyYW5zZmVyUHJvcHNUb2AgbWV0aG9kLlxuICpcbiAqIEBjbGFzcyBSZWFjdFByb3BUcmFuc2ZlcmVyXG4gKi9cbnZhciBSZWFjdFByb3BUcmFuc2ZlcmVyID0ge1xuXG4gIC8qKlxuICAgKiBNZXJnZSB0d28gcHJvcHMgb2JqZWN0cyB1c2luZyBUcmFuc2ZlclN0cmF0ZWdpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvbGRQcm9wcyBvcmlnaW5hbCBwcm9wcyAodGhleSB0YWtlIHByZWNlZGVuY2UpXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdQcm9wcyBuZXcgcHJvcHMgdG8gbWVyZ2UgaW5cbiAgICogQHJldHVybiB7b2JqZWN0fSBhIG5ldyBvYmplY3QgY29udGFpbmluZyBib3RoIHNldHMgb2YgcHJvcHMgbWVyZ2VkLlxuICAgKi9cbiAgbWVyZ2VQcm9wczogZnVuY3Rpb24ob2xkUHJvcHMsIG5ld1Byb3BzKSB7XG4gICAgcmV0dXJuIHRyYW5zZmVySW50byhhc3NpZ24oe30sIG9sZFByb3BzKSwgbmV3UHJvcHMpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHJhbnNmZXJlcjtcblxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL2VtcHR5RnVuY3Rpb25cIjoyNzYsXCIuL2pvaW5DbGFzc2VzXCI6MzAyfV0sMjMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHt9O1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge1xuICAgIHByb3A6ICdwcm9wJyxcbiAgICBjb250ZXh0OiAnY29udGV4dCcsXG4gICAgY2hpbGRDb250ZXh0OiAnY2hpbGQgY29udGV4dCdcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MX1dLDIzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHlwZUxvY2F0aW9uc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoXCIuL2tleU1pcnJvclwiKTtcblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSBrZXlNaXJyb3Ioe1xuICBwcm9wOiBudWxsLFxuICBjb250ZXh0OiBudWxsLFxuICBjaGlsZENvbnRleHQ6IG51bGxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbnM7XG5cbn0se1wiLi9rZXlNaXJyb3JcIjozMDN9XSwyMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHJvcFR5cGVzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RnJhZ21lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEZyYWdtZW50XCIpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcIik7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxuLyoqXG4gKiBDb2xsZWN0aW9uIG9mIG1ldGhvZHMgdGhhdCBhbGxvdyBkZWNsYXJhdGlvbiBhbmQgdmFsaWRhdGlvbiBvZiBwcm9wcyB0aGF0IGFyZVxuICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcbiAqXG4gKiAgIHZhciBQcm9wcyA9IHJlcXVpcmUoJ1JlYWN0UHJvcFR5cGVzJyk7XG4gKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgcHJvcFR5cGVzOiB7XG4gKiAgICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgcHJvcCBuYW1lZCBcImRlc2NyaXB0aW9uXCIuXG4gKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuICpcbiAqICAgICAgIC8vIEEgcmVxdWlyZWQgZW51bSBwcm9wIG5hbWVkIFwiY2F0ZWdvcnlcIi5cbiAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcbiAqXG4gKiAgICAgICAvLyBBIHByb3AgbmFtZWQgXCJkaWFsb2dcIiB0aGF0IHJlcXVpcmVzIGFuIGluc3RhbmNlIG9mIERpYWxvZy5cbiAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcbiAqICAgICB9LFxuICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7IC4uLiB9XG4gKiAgIH0pO1xuICpcbiAqIEEgbW9yZSBmb3JtYWwgc3BlY2lmaWNhdGlvbiBvZiBob3cgdGhlc2UgbWV0aG9kcyBhcmUgdXNlZDpcbiAqXG4gKiAgIHR5cGUgOj0gYXJyYXl8Ym9vbHxmdW5jfG9iamVjdHxudW1iZXJ8c3RyaW5nfG9uZU9mKFsuLi5dKXxpbnN0YW5jZU9mKC4uLilcbiAqICAgZGVjbCA6PSBSZWFjdFByb3BUeXBlcy57dHlwZX0oLmlzUmVxdWlyZWQpP1xuICpcbiAqIEVhY2ggYW5kIGV2ZXJ5IGRlY2xhcmF0aW9uIHByb2R1Y2VzIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBzaWduYXR1cmUuIFRoaXNcbiAqIGFsbG93cyB0aGUgY3JlYXRpb24gb2YgY3VzdG9tIHZhbGlkYXRpb24gZnVuY3Rpb25zLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgdmFyIE15TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgIHByb3BUeXBlczoge1xuICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG4gKiAgICAgIGhyZWY6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICogICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG4gKiAgICAgICAgICAgICEocHJvcFZhbHVlIGluc3RhbmNlb2YgVVJJKSkge1xuICogICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcbiAqICAgICAgICAgICAgY29tcG9uZW50TmFtZVxuICogICAgICAgICAgKTtcbiAqICAgICAgICB9XG4gKiAgICAgIH1cbiAqICAgIH0sXG4gKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cbiAqICB9KTtcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG52YXIgQU5PTllNT1VTID0gJzw8YW5vbnltb3VzPj4nO1xuXG52YXIgZWxlbWVudFR5cGVDaGVja2VyID0gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCk7XG52YXIgbm9kZVR5cGVDaGVja2VyID0gY3JlYXRlTm9kZUNoZWNrZXIoKTtcblxudmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICBhcnJheTogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2FycmF5JyksXG4gIGJvb2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdib29sZWFuJyksXG4gIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdmdW5jdGlvbicpLFxuICBudW1iZXI6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdudW1iZXInKSxcbiAgb2JqZWN0OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignb2JqZWN0JyksXG4gIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuXG4gIGFueTogY3JlYXRlQW55VHlwZUNoZWNrZXIoKSxcbiAgYXJyYXlPZjogY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyLFxuICBlbGVtZW50OiBlbGVtZW50VHlwZUNoZWNrZXIsXG4gIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gIG5vZGU6IG5vZGVUeXBlQ2hlY2tlcixcbiAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsXG4gIG9uZU9mOiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIsXG4gIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXJcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgQU5PTllNT1VTO1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgKFwiUmVxdWlyZWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCB3YXMgbm90IHNwZWNpZmllZCBpbiBcIikgK1xuICAgICAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAuXCIpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcblxuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoZXhwZWN0ZWRUeXBlKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICAvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCdcbiAgICAgIC8vIGNoZWNrLCBidXQgd2UgY2FuIG9mZmVyIGEgbW9yZSBwcmVjaXNlIGVycm9yIG1lc3NhZ2UgaGVyZSByYXRoZXIgdGhhblxuICAgICAgLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxuICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcblxuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgcHJlY2lzZVR5cGUgKyBcImAgXCIpICtcbiAgICAgICAgKFwic3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYFwiICsgZXhwZWN0ZWRUeXBlICsgXCJgLlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zKG51bGwpKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBvZiB0eXBlIFwiKSArXG4gICAgICAgIChcImBcIiArIHByb3BUeXBlICsgXCJgIHN1cHBsaWVkIHRvIGBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGFuIGFycmF5LlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICBpZiAoIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIHN1cHBsaWVkIHRvIFwiKSArXG4gICAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAsIGV4cGVjdGVkIGEgUmVhY3RFbGVtZW50LlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlcihleHBlY3RlZENsYXNzKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICBpZiAoIShwcm9wc1twcm9wTmFtZV0gaW5zdGFuY2VvZiBleHBlY3RlZENsYXNzKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHZhciBleHBlY3RlZENsYXNzTmFtZSA9IGV4cGVjdGVkQ2xhc3MubmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgc3VwcGxpZWQgdG8gXCIpICtcbiAgICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgaW5zdGFuY2Ugb2YgYFwiICsgZXhwZWN0ZWRDbGFzc05hbWUgKyBcImAuXCIpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIoZXhwZWN0ZWRWYWx1ZXMpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHByb3BWYWx1ZSA9PT0gZXhwZWN0ZWRWYWx1ZXNbaV0pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICB2YXIgdmFsdWVzU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRWYWx1ZXMpO1xuICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgb2YgdmFsdWUgYFwiICsgcHJvcFZhbHVlICsgXCJgIFwiKSArXG4gICAgICAoXCJzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBvbmUgb2YgXCIgKyB2YWx1ZXNTdHJpbmcgKyBcIi5cIilcbiAgICApO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgXCIpICtcbiAgICAgICAgKFwiYFwiICsgcHJvcFR5cGUgKyBcImAgc3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BWYWx1ZSkge1xuICAgICAgaWYgKHByb3BWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBzdXBwbGllZCB0byBcIikgK1xuICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYC5cIilcbiAgICApO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVDaGVja2VyKCkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgaWYgKCFpc05vZGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBzdXBwbGllZCB0byBcIikgK1xuICAgICAgICAoXCJgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBhIFJlYWN0Tm9kZS5cIilcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIoc2hhcGVUeXBlcykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgb2YgdHlwZSBgXCIgKyBwcm9wVHlwZSArIFwiYCBcIikgK1xuICAgICAgICAoXCJzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBgb2JqZWN0YC5cIilcbiAgICAgICk7XG4gICAgfVxuICAgIGZvciAodmFyIGtleSBpbiBzaGFwZVR5cGVzKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGlzTm9kZShwcm9wVmFsdWUpIHtcbiAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wVmFsdWUgPT09IG51bGwgfHwgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBwcm9wVmFsdWUgPSBSZWFjdEZyYWdtZW50LmV4dHJhY3RJZkZyYWdtZW50KHByb3BWYWx1ZSk7XG4gICAgICBmb3IgKHZhciBrIGluIHByb3BWYWx1ZSkge1xuICAgICAgICBpZiAoIWlzTm9kZShwcm9wVmFsdWVba10pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbmZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuICdhcnJheSc7XG4gIH1cbiAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cbiAgICAvLyAnb2JqZWN0JyBmb3IgdHlwZW9mIGEgUmVnRXhwLiBXZSdsbCBub3JtYWxpemUgdGhpcyBoZXJlIHNvIHRoYXQgL2JsYS9cbiAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICByZXR1cm4gJ29iamVjdCc7XG4gIH1cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG4vLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4vLyBTZWUgYGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyYC5cbmZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHJldHVybiAnZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiAncmVnZXhwJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzO1xuXG59LHtcIi4vUmVhY3RFbGVtZW50XCI6MjA5LFwiLi9SZWFjdEZyYWdtZW50XCI6MjE1LFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiOjIzMCxcIi4vZW1wdHlGdW5jdGlvblwiOjI3Nn1dLDIzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQdXRMaXN0ZW5lclF1ZXVlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xuXG5mdW5jdGlvbiBSZWFjdFB1dExpc3RlbmVyUXVldWUoKSB7XG4gIHRoaXMubGlzdGVuZXJzVG9QdXQgPSBbXTtcbn1cblxuYXNzaWduKFJlYWN0UHV0TGlzdGVuZXJRdWV1ZS5wcm90b3R5cGUsIHtcbiAgZW5xdWV1ZVB1dExpc3RlbmVyOiBmdW5jdGlvbihyb290Tm9kZUlELCBwcm9wS2V5LCBwcm9wVmFsdWUpIHtcbiAgICB0aGlzLmxpc3RlbmVyc1RvUHV0LnB1c2goe1xuICAgICAgcm9vdE5vZGVJRDogcm9vdE5vZGVJRCxcbiAgICAgIHByb3BLZXk6IHByb3BLZXksXG4gICAgICBwcm9wVmFsdWU6IHByb3BWYWx1ZVxuICAgIH0pO1xuICB9LFxuXG4gIHB1dExpc3RlbmVyczogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxpc3RlbmVyc1RvUHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXJUb1B1dCA9IHRoaXMubGlzdGVuZXJzVG9QdXRbaV07XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIucHV0TGlzdGVuZXIoXG4gICAgICAgIGxpc3RlbmVyVG9QdXQucm9vdE5vZGVJRCxcbiAgICAgICAgbGlzdGVuZXJUb1B1dC5wcm9wS2V5LFxuICAgICAgICBsaXN0ZW5lclRvUHV0LnByb3BWYWx1ZVxuICAgICAgKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubGlzdGVuZXJzVG9QdXQubGVuZ3RoID0gMDtcbiAgfSxcblxuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RQdXRMaXN0ZW5lclF1ZXVlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFB1dExpc3RlbmVyUXVldWU7XG5cbn0se1wiLi9PYmplY3QuYXNzaWduXCI6MTc1LFwiLi9Qb29sZWRDbGFzc1wiOjE3NixcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCI6MTc5fV0sMjM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENhbGxiYWNrUXVldWUgPSByZXF1aXJlKFwiLi9DYWxsYmFja1F1ZXVlXCIpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdElucHV0U2VsZWN0aW9uXCIpO1xudmFyIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZSA9IHJlcXVpcmUoXCIuL1JlYWN0UHV0TGlzdGVuZXJRdWV1ZVwiKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL1RyYW5zYWN0aW9uXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQsIHdoZW4gcG9zc2libGUsIHRoZSBzZWxlY3Rpb24gcmFuZ2UgKGN1cnJlbnRseSBzZWxlY3RlZCB0ZXh0XG4gKiBpbnB1dCkgaXMgbm90IGRpc3R1cmJlZCBieSBwZXJmb3JtaW5nIHRoZSB0cmFuc2FjdGlvbi5cbiAqL1xudmFyIFNFTEVDVElPTl9SRVNUT1JBVElPTiA9IHtcbiAgLyoqXG4gICAqIEByZXR1cm4ge1NlbGVjdGlvbn0gU2VsZWN0aW9uIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb25JbmZvcm1hdGlvbixcbiAgLyoqXG4gICAqIEBwYXJhbSB7U2VsZWN0aW9ufSBzZWwgU2VsZWN0aW9uIGluZm9ybWF0aW9uIHJldHVybmVkIGZyb20gYGluaXRpYWxpemVgLlxuICAgKi9cbiAgY2xvc2U6IFJlYWN0SW5wdXRTZWxlY3Rpb24ucmVzdG9yZVNlbGVjdGlvblxufTtcblxuLyoqXG4gKiBTdXBwcmVzc2VzIGV2ZW50cyAoYmx1ci9mb2N1cykgdGhhdCBjb3VsZCBiZSBpbmFkdmVydGVudGx5IGRpc3BhdGNoZWQgZHVlIHRvXG4gKiBoaWdoIGxldmVsIERPTSBtYW5pcHVsYXRpb25zIChsaWtlIHRlbXBvcmFyaWx5IHJlbW92aW5nIGEgdGV4dCBpbnB1dCBmcm9tIHRoZVxuICogRE9NKS5cbiAqL1xudmFyIEVWRU5UX1NVUFBSRVNTSU9OID0ge1xuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGVuYWJsZWQgc3RhdHVzIG9mIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGJlZm9yZVxuICAgKiB0aGUgcmVjb25jaWxpYXRpb24uXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VycmVudGx5RW5hYmxlZCA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5pc0VuYWJsZWQoKTtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgcmV0dXJuIGN1cnJlbnRseUVuYWJsZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJldmlvdXNseUVuYWJsZWQgRW5hYmxlZCBzdGF0dXMgb2ZcbiAgICogICBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBiZWZvcmUgdGhlIHJlY29uY2lsaWF0aW9uIG9jY3VyZWQuIGBjbG9zZWBcbiAgICogICByZXN0b3JlcyB0aGUgcHJldmlvdXMgdmFsdWUuXG4gICAqL1xuICBjbG9zZTogZnVuY3Rpb24ocHJldmlvdXNseUVuYWJsZWQpIHtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChwcmV2aW91c2x5RW5hYmxlZCk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvdmlkZXMgYSBxdWV1ZSBmb3IgY29sbGVjdGluZyBgY29tcG9uZW50RGlkTW91bnRgIGFuZFxuICogYGNvbXBvbmVudERpZFVwZGF0ZWAgY2FsbGJhY2tzIGR1cmluZyB0aGUgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgT05fRE9NX1JFQURZX1FVRVVFSU5HID0ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGludGVybmFsIGBvbkRPTVJlYWR5YCBxdWV1ZS5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5LnJlc2V0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFmdGVyIERPTSBpcyBmbHVzaGVkLCBpbnZva2UgYWxsIHJlZ2lzdGVyZWQgYG9uRE9NUmVhZHlgIGNhbGxiYWNrcy5cbiAgICovXG4gIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5ub3RpZnlBbGwoKTtcbiAgfVxufTtcblxudmFyIFBVVF9MSVNURU5FUl9RVUVVRUlORyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlLnJlc2V0KCk7XG4gIH0sXG5cbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZS5wdXRMaXN0ZW5lcnMoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeGVjdXRlZCB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBgVHJhbnNhY3Rpb25gIGluc3RhbmNlLiBDb25zaWRlciB0aGVzZSBhc1xuICogYmVpbmcgbWVtYmVyIG1ldGhvZHMsIGJ1dCB3aXRoIGFuIGltcGxpZWQgb3JkZXJpbmcgd2hpbGUgYmVpbmcgaXNvbGF0ZWQgZnJvbVxuICogZWFjaCBvdGhlci5cbiAqL1xudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW1xuICBQVVRfTElTVEVORVJfUVVFVUVJTkcsXG4gIFNFTEVDVElPTl9SRVNUT1JBVElPTixcbiAgRVZFTlRfU1VQUFJFU1NJT04sXG4gIE9OX0RPTV9SRUFEWV9RVUVVRUlOR1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHk6XG4gKiAtIFRoZSBvcmRlciB0aGF0IHRoZXNlIGFyZSBsaXN0ZWQgaW4gdGhlIHRyYW5zYWN0aW9uIGlzIGNyaXRpY2FsOlxuICogLSBTdXBwcmVzc2VzIGV2ZW50cy5cbiAqIC0gUmVzdG9yZXMgc2VsZWN0aW9uIHJhbmdlLlxuICpcbiAqIEZ1dHVyZTpcbiAqIC0gUmVzdG9yZSBkb2N1bWVudC9vdmVyZmxvdyBzY3JvbGwgcG9zaXRpb25zIHRoYXQgd2VyZSB1bmludGVudGlvbmFsbHlcbiAqICAgbW9kaWZpZWQgdmlhIERPTSBpbnNlcnRpb25zIGFib3ZlIHRoZSB0b3Agdmlld3BvcnQgYm91bmRhcnkuXG4gKiAtIEltcGxlbWVudC9pbnRlZ3JhdGUgd2l0aCBjdXN0b21pemVkIGNvbnN0cmFpbnQgYmFzZWQgbGF5b3V0IHN5c3RlbSBhbmQga2VlcFxuICogICB0cmFjayBvZiB3aGljaCBkaW1lbnNpb25zIG11c3QgYmUgcmVtZWFzdXJlZC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblxuICovXG5mdW5jdGlvbiBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIC8vIE9ubHkgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHJlYWxseSBuZWVkcyB0aGlzIG9wdGlvbiAoc2VlXG4gIC8vIGBSZWFjdFNlcnZlclJlbmRlcmluZ2ApLCBidXQgc2VydmVyLXNpZGUgdXNlc1xuICAvLyBgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbmAgaW5zdGVhZC4gVGhpcyBvcHRpb24gaXMgaGVyZSBzbyB0aGF0IGl0J3NcbiAgLy8gYWNjZXNzaWJsZSBhbmQgZGVmYXVsdHMgdG8gZmFsc2Ugd2hlbiBgUmVhY3RET01Db21wb25lbnRgIGFuZFxuICAvLyBgUmVhY3RUZXh0Q29tcG9uZW50YCBjaGVja3MgaXQgaW4gYG1vdW50Q29tcG9uZW50YC5gXG4gIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSBmYWxzZTtcbiAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZChudWxsKTtcbiAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlID0gUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLmdldFBvb2xlZCgpO1xufVxuXG52YXIgTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBAc2VlIFRyYW5zYWN0aW9uXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAZmluYWxcbiAgICogQHJldHVybiB7YXJyYXk8b2JqZWN0Pn0gTGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWVkdXJlcy5cbiAgICogICBUT0RPOiBjb252ZXJ0IHRvIGFycmF5PFRyYW5zYWN0aW9uV3JhcHBlcj5cbiAgICovXG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBgb25ET01SZWFkeWAgY2FsbGJhY2tzIHdpdGguXG4gICAqL1xuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWN0TW91bnRSZWFkeTtcbiAgfSxcblxuICBnZXRQdXRMaXN0ZW5lclF1ZXVlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wdXRMaXN0ZW5lclF1ZXVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciB0aGlzLCBhbmQgd2lsbCBpbnZva2UgdGhpcyBiZWZvcmUgYWxsb3dpbmcgdGhpc1xuICAgKiBpbnN0YW5jZSB0byBiZSByZXN1c2VkLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHRoaXMucmVhY3RNb3VudFJlYWR5KTtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IG51bGw7XG5cbiAgICBSZWFjdFB1dExpc3RlbmVyUXVldWUucmVsZWFzZSh0aGlzLnB1dExpc3RlbmVyUXVldWUpO1xuICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZSA9IG51bGw7XG4gIH1cbn07XG5cblxuYXNzaWduKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbi5NaXhpbiwgTWl4aW4pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjtcblxufSx7XCIuL0NhbGxiYWNrUXVldWVcIjoxNTMsXCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL1Bvb2xlZENsYXNzXCI6MTc2LFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIjoxNzksXCIuL1JlYWN0SW5wdXRTZWxlY3Rpb25cIjoyMTcsXCIuL1JlYWN0UHV0TGlzdGVuZXJRdWV1ZVwiOjIzMyxcIi4vVHJhbnNhY3Rpb25cIjoyNjN9XSwyMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFJlY29uY2lsZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFJlZiA9IHJlcXVpcmUoXCIuL1JlYWN0UmVmXCIpO1xudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiKTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gY2FsbCBSZWFjdFJlZi5hdHRhY2hSZWZzIHdpdGggdGhpcyBjb21wb3NpdGUgY29tcG9uZW50LCBzcGxpdCBvdXRcbiAqIHRvIGF2b2lkIGFsbG9jYXRpb25zIGluIHRoZSB0cmFuc2FjdGlvbiBtb3VudC1yZWFkeSBxdWV1ZS5cbiAqL1xuZnVuY3Rpb24gYXR0YWNoUmVmcygpIHtcbiAgUmVhY3RSZWYuYXR0YWNoUmVmcyh0aGlzLCB0aGlzLl9jdXJyZW50RWxlbWVudCk7XG59XG5cbnZhciBSZWFjdFJlY29uY2lsZXIgPSB7XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIHJlbmRlcnMgbWFya3VwLCBhbmQgcmVnaXN0ZXJzIGV2ZW50IGxpc3RlbmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7P3N0cmluZ30gUmVuZGVyZWQgbWFya3VwIHRvIGJlIGluc2VydGVkIGludG8gdGhlIERPTS5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UsIHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgbWFya3VwID0gaW50ZXJuYWxJbnN0YW5jZS5tb3VudENvbXBvbmVudChyb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFByb3BzKFxuICAgICAgICBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudFxuICAgICAgKTtcbiAgICB9XG4gICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShhdHRhY2hSZWZzLCBpbnRlcm5hbEluc3RhbmNlKTtcbiAgICByZXR1cm4gbWFya3VwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSBgbW91bnRDb21wb25lbnRgLlxuICAgKlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgUmVhY3RSZWYuZGV0YWNoUmVmcyhpbnRlcm5hbEluc3RhbmNlLCBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudCk7XG4gICAgaW50ZXJuYWxJbnN0YW5jZS51bm1vdW50Q29tcG9uZW50KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIGNvbXBvbmVudCB1c2luZyBhIG5ldyBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnRlcm5hbEluc3RhbmNlXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudFxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24oXG4gICAgaW50ZXJuYWxJbnN0YW5jZSwgbmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0XG4gICkge1xuICAgIHZhciBwcmV2RWxlbWVudCA9IGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50O1xuXG4gICAgaWYgKG5leHRFbGVtZW50ID09PSBwcmV2RWxlbWVudCAmJiBuZXh0RWxlbWVudC5fb3duZXIgIT0gbnVsbCkge1xuICAgICAgLy8gU2luY2UgZWxlbWVudHMgYXJlIGltbXV0YWJsZSBhZnRlciB0aGUgb3duZXIgaXMgcmVuZGVyZWQsXG4gICAgICAvLyB3ZSBjYW4gZG8gYSBjaGVhcCBpZGVudGl0eSBjb21wYXJlIGhlcmUgdG8gZGV0ZXJtaW5lIGlmIHRoaXMgaXMgYVxuICAgICAgLy8gc3VwZXJmbHVvdXMgcmVjb25jaWxlLiBJdCdzIHBvc3NpYmxlIGZvciBzdGF0ZSB0byBiZSBtdXRhYmxlIGJ1dCBzdWNoXG4gICAgICAvLyBjaGFuZ2Ugc2hvdWxkIHRyaWdnZXIgYW4gdXBkYXRlIG9mIHRoZSBvd25lciB3aGljaCB3b3VsZCByZWNyZWF0ZVxuICAgICAgLy8gdGhlIGVsZW1lbnQuIFdlIGV4cGxpY2l0bHkgY2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYW4gb3duZXIgc2luY2VcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgZm9yIGFuIGVsZW1lbnQgY3JlYXRlZCBvdXRzaWRlIGEgY29tcG9zaXRlIHRvIGJlXG4gICAgICAvLyBkZWVwbHkgbXV0YXRlZCBhbmQgcmV1c2VkLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIFJlYWN0RWxlbWVudFZhbGlkYXRvci5jaGVja0FuZFdhcm5Gb3JNdXRhdGVkUHJvcHMobmV4dEVsZW1lbnQpO1xuICAgIH1cblxuICAgIHZhciByZWZzQ2hhbmdlZCA9IFJlYWN0UmVmLnNob3VsZFVwZGF0ZVJlZnMoXG4gICAgICBwcmV2RWxlbWVudCxcbiAgICAgIG5leHRFbGVtZW50XG4gICAgKTtcblxuICAgIGlmIChyZWZzQ2hhbmdlZCkge1xuICAgICAgUmVhY3RSZWYuZGV0YWNoUmVmcyhpbnRlcm5hbEluc3RhbmNlLCBwcmV2RWxlbWVudCk7XG4gICAgfVxuXG4gICAgaW50ZXJuYWxJbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50KG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG5cbiAgICBpZiAocmVmc0NoYW5nZWQpIHtcbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoYXR0YWNoUmVmcywgaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGbHVzaCBhbnkgZGlydHkgY2hhbmdlcyBpbiBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OiBmdW5jdGlvbihcbiAgICBpbnRlcm5hbEluc3RhbmNlLFxuICAgIHRyYW5zYWN0aW9uXG4gICkge1xuICAgIGludGVybmFsSW5zdGFuY2UucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KHRyYW5zYWN0aW9uKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVjb25jaWxlcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCI6MjEwLFwiLi9SZWFjdFJlZlwiOjIzNixcIl9wcm9jZXNzXCI6MX1dLDIzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RSZWZcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RPd25lclwiKTtcblxudmFyIFJlYWN0UmVmID0ge307XG5cbmZ1bmN0aW9uIGF0dGFjaFJlZihyZWYsIGNvbXBvbmVudCwgb3duZXIpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYoY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpO1xuICB9IGVsc2Uge1xuICAgIC8vIExlZ2FjeSByZWZcbiAgICBSZWFjdE93bmVyLmFkZENvbXBvbmVudEFzUmVmVG8oY29tcG9uZW50LCByZWYsIG93bmVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXRhY2hSZWYocmVmLCBjb21wb25lbnQsIG93bmVyKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKG51bGwpO1xuICB9IGVsc2Uge1xuICAgIC8vIExlZ2FjeSByZWZcbiAgICBSZWFjdE93bmVyLnJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbShjb21wb25lbnQsIHJlZiwgb3duZXIpO1xuICB9XG59XG5cblJlYWN0UmVmLmF0dGFjaFJlZnMgPSBmdW5jdGlvbihpbnN0YW5jZSwgZWxlbWVudCkge1xuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gIGlmIChyZWYgIT0gbnVsbCkge1xuICAgIGF0dGFjaFJlZihyZWYsIGluc3RhbmNlLCBlbGVtZW50Ll9vd25lcik7XG4gIH1cbn07XG5cblJlYWN0UmVmLnNob3VsZFVwZGF0ZVJlZnMgPSBmdW5jdGlvbihwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgLy8gSWYgZWl0aGVyIHRoZSBvd25lciBvciBhIGByZWZgIGhhcyBjaGFuZ2VkLCBtYWtlIHN1cmUgdGhlIG5ld2VzdCBvd25lclxuICAvLyBoYXMgc3RvcmVkIGEgcmVmZXJlbmNlIHRvIGB0aGlzYCwgYW5kIHRoZSBwcmV2aW91cyBvd25lciAoaWYgZGlmZmVyZW50KVxuICAvLyBoYXMgZm9yZ290dGVuIHRoZSByZWZlcmVuY2UgdG8gYHRoaXNgLiBXZSB1c2UgdGhlIGVsZW1lbnQgaW5zdGVhZFxuICAvLyBvZiB0aGUgcHVibGljIHRoaXMucHJvcHMgYmVjYXVzZSB0aGUgcG9zdCBwcm9jZXNzaW5nIGNhbm5vdCBkZXRlcm1pbmVcbiAgLy8gYSByZWYuIFRoZSByZWYgY29uY2VwdHVhbGx5IGxpdmVzIG9uIHRoZSBlbGVtZW50LlxuXG4gIC8vIFRPRE86IFNob3VsZCB0aGlzIGV2ZW4gYmUgcG9zc2libGU/IFRoZSBvd25lciBjYW5ub3QgY2hhbmdlIGJlY2F1c2VcbiAgLy8gaXQncyBmb3JiaWRkZW4gYnkgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQuIFRoZSByZWYgY2FuIGNoYW5nZVxuICAvLyBpZiB5b3Ugc3dhcCB0aGUga2V5cyBvZiBidXQgbm90IHRoZSByZWZzLiBSZWNvbnNpZGVyIHdoZXJlIHRoaXMgY2hlY2tcbiAgLy8gaXMgbWFkZS4gSXQgcHJvYmFibHkgYmVsb25ncyB3aGVyZSB0aGUga2V5IGNoZWNraW5nIGFuZFxuICAvLyBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50IGlzIGRvbmUuXG5cbiAgcmV0dXJuIChcbiAgICBuZXh0RWxlbWVudC5fb3duZXIgIT09IHByZXZFbGVtZW50Ll9vd25lciB8fFxuICAgIG5leHRFbGVtZW50LnJlZiAhPT0gcHJldkVsZW1lbnQucmVmXG4gICk7XG59O1xuXG5SZWFjdFJlZi5kZXRhY2hSZWZzID0gZnVuY3Rpb24oaW5zdGFuY2UsIGVsZW1lbnQpIHtcbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICBpZiAocmVmICE9IG51bGwpIHtcbiAgICBkZXRhY2hSZWYocmVmLCBpbnN0YW5jZSwgZWxlbWVudC5fb3duZXIpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVmO1xuXG59LHtcIi4vUmVhY3RPd25lclwiOjIyN31dLDIzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RSb290SW5kZXhcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSb290SW5kZXhJbmplY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBfY3JlYXRlUmVhY3RSb290SW5kZXhcbiAgICovXG4gIGluamVjdENyZWF0ZVJlYWN0Um9vdEluZGV4OiBmdW5jdGlvbihfY3JlYXRlUmVhY3RSb290SW5kZXgpIHtcbiAgICBSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCA9IF9jcmVhdGVSZWFjdFJvb3RJbmRleDtcbiAgfVxufTtcblxudmFyIFJlYWN0Um9vdEluZGV4ID0ge1xuICBjcmVhdGVSZWFjdFJvb3RJbmRleDogbnVsbCxcbiAgaW5qZWN0aW9uOiBSZWFjdFJvb3RJbmRleEluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJvb3RJbmRleDtcblxufSx7fV0sMjM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U2VydmVyUmVuZGVyaW5nXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCIpO1xudmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSByZXF1aXJlKFwiLi9SZWFjdE1hcmt1cENoZWNrc3VtXCIpO1xudmFyIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24gPVxuICByZXF1aXJlKFwiLi9SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXCIpO1xuXG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKFwiLi9lbXB0eU9iamVjdFwiKTtcbnZhciBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIEhUTUwgbWFya3VwXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclRvU3RyaW5nKGVsZW1lbnQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCksXG4gICAgJ3JlbmRlclRvU3RyaW5nKCk6IFlvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdEVsZW1lbnQuJ1xuICApIDogaW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkpO1xuXG4gIHZhciB0cmFuc2FjdGlvbjtcbiAgdHJ5IHtcbiAgICB2YXIgaWQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdFJvb3RJRCgpO1xuICAgIHRyYW5zYWN0aW9uID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5nZXRQb29sZWQoZmFsc2UpO1xuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLnBlcmZvcm0oZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGVsZW1lbnQsIG51bGwpO1xuICAgICAgdmFyIG1hcmt1cCA9XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLm1vdW50Q29tcG9uZW50KGlkLCB0cmFuc2FjdGlvbiwgZW1wdHlPYmplY3QpO1xuICAgICAgcmV0dXJuIFJlYWN0TWFya3VwQ2hlY2tzdW0uYWRkQ2hlY2tzdW1Ub01hcmt1cChtYXJrdXApO1xuICAgIH0sIG51bGwpO1xuICB9IGZpbmFsbHkge1xuICAgIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgSFRNTCBtYXJrdXAsIHdpdGhvdXQgdGhlIGV4dHJhIFJlYWN0IElEIGFuZCBjaGVja3N1bVxuICogKGZvciBnZW5lcmF0aW5nIHN0YXRpYyBwYWdlcylcbiAqL1xuZnVuY3Rpb24gcmVuZGVyVG9TdGF0aWNNYXJrdXAoZWxlbWVudCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSxcbiAgICAncmVuZGVyVG9TdGF0aWNNYXJrdXAoKTogWW91IG11c3QgcGFzcyBhIHZhbGlkIFJlYWN0RWxlbWVudC4nXG4gICkgOiBpbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSk7XG5cbiAgdmFyIHRyYW5zYWN0aW9uO1xuICB0cnkge1xuICAgIHZhciBpZCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0Um9vdElEKCk7XG4gICAgdHJhbnNhY3Rpb24gPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmdldFBvb2xlZCh0cnVlKTtcblxuICAgIHJldHVybiB0cmFuc2FjdGlvbi5wZXJmb3JtKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChlbGVtZW50LCBudWxsKTtcbiAgICAgIHJldHVybiBjb21wb25lbnRJbnN0YW5jZS5tb3VudENvbXBvbmVudChpZCwgdHJhbnNhY3Rpb24sIGVtcHR5T2JqZWN0KTtcbiAgICB9LCBudWxsKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZW5kZXJUb1N0cmluZzogcmVuZGVyVG9TdHJpbmcsXG4gIHJlbmRlclRvU3RhdGljTWFya3VwOiByZW5kZXJUb1N0YXRpY01hcmt1cFxufTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RFbGVtZW50XCI6MjA5LFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiOjIxOCxcIi4vUmVhY3RNYXJrdXBDaGVja3N1bVwiOjIyMixcIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvblwiOjIzOSxcIi4vZW1wdHlPYmplY3RcIjoyNzcsXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIjoyOTYsXCIuL2ludmFyaWFudFwiOjI5NyxcIl9wcm9jZXNzXCI6MX1dLDIzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvblxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xudmFyIENhbGxiYWNrUXVldWUgPSByZXF1aXJlKFwiLi9DYWxsYmFja1F1ZXVlXCIpO1xudmFyIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZSA9IHJlcXVpcmUoXCIuL1JlYWN0UHV0TGlzdGVuZXJRdWV1ZVwiKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL1RyYW5zYWN0aW9uXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxuLyoqXG4gKiBQcm92aWRlcyBhIGBDYWxsYmFja1F1ZXVlYCBxdWV1ZSBmb3IgY29sbGVjdGluZyBgb25ET01SZWFkeWAgY2FsbGJhY2tzXG4gKiBkdXJpbmcgdGhlIHBlcmZvcm1pbmcgb2YgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgT05fRE9NX1JFQURZX1FVRVVFSU5HID0ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGludGVybmFsIGBvbkRPTVJlYWR5YCBxdWV1ZS5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5LnJlc2V0KCk7XG4gIH0sXG5cbiAgY2xvc2U6IGVtcHR5RnVuY3Rpb25cbn07XG5cbnZhciBQVVRfTElTVEVORVJfUVVFVUVJTkcgPSB7XG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZS5yZXNldCgpO1xuICB9LFxuXG4gIGNsb3NlOiBlbXB0eUZ1bmN0aW9uXG59O1xuXG4vKipcbiAqIEV4ZWN1dGVkIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhlIGBUcmFuc2FjdGlvbmAgaW5zdGFuY2UuIENvbnNpZGVyIHRoZXNlIGFzXG4gKiBiZWluZyBtZW1iZXIgbWV0aG9kcywgYnV0IHdpdGggYW4gaW1wbGllZCBvcmRlcmluZyB3aGlsZSBiZWluZyBpc29sYXRlZCBmcm9tXG4gKiBlYWNoIG90aGVyLlxuICovXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbXG4gIFBVVF9MSVNURU5FUl9RVUVVRUlORyxcbiAgT05fRE9NX1JFQURZX1FVRVVFSU5HXG5dO1xuXG4vKipcbiAqIEBjbGFzcyBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHJlbmRlclRvU3RhdGljTWFya3VwXG4gKi9cbmZ1bmN0aW9uIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ocmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuICB0aGlzLnJlbmRlclRvU3RhdGljTWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXA7XG4gIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQobnVsbCk7XG4gIHRoaXMucHV0TGlzdGVuZXJRdWV1ZSA9IFJlYWN0UHV0TGlzdGVuZXJRdWV1ZS5nZXRQb29sZWQoKTtcbn1cblxudmFyIE1peGluID0ge1xuICAvKipcbiAgICogQHNlZSBUcmFuc2FjdGlvblxuICAgKiBAYWJzdHJhY3RcbiAgICogQGZpbmFsXG4gICAqIEByZXR1cm4ge2FycmF5fSBFbXB0eSBsaXN0IG9mIG9wZXJhdGlvbiB3cmFwIHByb2NlZWR1cmVzLlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBxdWV1ZSB0byBjb2xsZWN0IGBvbkRPTVJlYWR5YCBjYWxsYmFja3Mgd2l0aC5cbiAgICovXG4gIGdldFJlYWN0TW91bnRSZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhY3RNb3VudFJlYWR5O1xuICB9LFxuXG4gIGdldFB1dExpc3RlbmVyUXVldWU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnB1dExpc3RlbmVyUXVldWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMsIGFuZCB3aWxsIGludm9rZSB0aGlzIGJlZm9yZSBhbGxvd2luZyB0aGlzXG4gICAqIGluc3RhbmNlIHRvIGJlIHJlc3VzZWQuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5yZWFjdE1vdW50UmVhZHkpO1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gbnVsbDtcblxuICAgIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZS5yZWxlYXNlKHRoaXMucHV0TGlzdGVuZXJRdWV1ZSk7XG4gICAgdGhpcy5wdXRMaXN0ZW5lclF1ZXVlID0gbnVsbDtcbiAgfVxufTtcblxuXG5hc3NpZ24oXG4gIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucHJvdG90eXBlLFxuICBUcmFuc2FjdGlvbi5NaXhpbixcbiAgTWl4aW5cbik7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uO1xuXG59LHtcIi4vQ2FsbGJhY2tRdWV1ZVwiOjE1MyxcIi4vT2JqZWN0LmFzc2lnblwiOjE3NSxcIi4vUG9vbGVkQ2xhc3NcIjoxNzYsXCIuL1JlYWN0UHV0TGlzdGVuZXJRdWV1ZVwiOjIzMyxcIi4vVHJhbnNhY3Rpb25cIjoyNjMsXCIuL2VtcHR5RnVuY3Rpb25cIjoyNzZ9XSwyNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U3RhdGVTZXR0ZXJzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RTdGF0ZVNldHRlcnMgPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjYWxscyB0aGUgcHJvdmlkZWQgZnVuY3Rpb24sIGFuZCB1c2VzIHRoZSByZXN1bHRcbiAgICogb2YgdGhhdCB0byBzZXQgdGhlIGNvbXBvbmVudCdzIHN0YXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50fSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY1JldHVybmluZ1N0YXRlIFJldHVybmVkIGNhbGxiYWNrIHVzZXMgdGhpcyB0b1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lIGhvdyB0byB1cGRhdGUgc3RhdGUuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBjYWxsYmFjayB0aGF0IHdoZW4gaW52b2tlZCB1c2VzIGZ1bmNSZXR1cm5pbmdTdGF0ZSB0b1xuICAgKiAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lZCB0aGUgb2JqZWN0IGxpdGVyYWwgdG8gc2V0U3RhdGUuXG4gICAqL1xuICBjcmVhdGVTdGF0ZVNldHRlcjogZnVuY3Rpb24oY29tcG9uZW50LCBmdW5jUmV0dXJuaW5nU3RhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgdmFyIHBhcnRpYWxTdGF0ZSA9IGZ1bmNSZXR1cm5pbmdTdGF0ZS5jYWxsKGNvbXBvbmVudCwgYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICBpZiAocGFydGlhbFN0YXRlKSB7XG4gICAgICAgIGNvbXBvbmVudC5zZXRTdGF0ZShwYXJ0aWFsU3RhdGUpO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzaW5nbGUtYXJndW1lbnQgY2FsbGJhY2sgdGhhdCBjYW4gYmUgdXNlZCB0byB1cGRhdGUgYSBzaW5nbGVcbiAgICoga2V5IGluIHRoZSBjb21wb25lbnQncyBzdGF0ZS5cbiAgICpcbiAgICogTm90ZTogdGhpcyBpcyBtZW1vaXplZCBmdW5jdGlvbiwgd2hpY2ggbWFrZXMgaXQgaW5leHBlbnNpdmUgdG8gY2FsbC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvc2l0ZUNvbXBvbmVudH0gY29tcG9uZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBpbiB0aGUgc3RhdGUgdGhhdCB5b3Ugc2hvdWxkIHVwZGF0ZS5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IGNhbGxiYWNrIG9mIDEgYXJndW1lbnQgd2hpY2ggY2FsbHMgc2V0U3RhdGUoKSB3aXRoXG4gICAqICAgICAgICAgICAgICAgICAgICB0aGUgcHJvdmlkZWQga2V5TmFtZSBhbmQgY2FsbGJhY2sgYXJndW1lbnQuXG4gICAqL1xuICBjcmVhdGVTdGF0ZUtleVNldHRlcjogZnVuY3Rpb24oY29tcG9uZW50LCBrZXkpIHtcbiAgICAvLyBNZW1vaXplIHRoZSBzZXR0ZXJzLlxuICAgIHZhciBjYWNoZSA9IGNvbXBvbmVudC5fX2tleVNldHRlcnMgfHwgKGNvbXBvbmVudC5fX2tleVNldHRlcnMgPSB7fSk7XG4gICAgcmV0dXJuIGNhY2hlW2tleV0gfHwgKGNhY2hlW2tleV0gPSBjcmVhdGVTdGF0ZUtleVNldHRlcihjb21wb25lbnQsIGtleSkpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVTdGF0ZUtleVNldHRlcihjb21wb25lbnQsIGtleSkge1xuICAvLyBQYXJ0aWFsIHN0YXRlIGlzIGFsbG9jYXRlZCBvdXRzaWRlIG9mIHRoZSBmdW5jdGlvbiBjbG9zdXJlIHNvIGl0IGNhbiBiZVxuICAvLyByZXVzZWQgd2l0aCBldmVyeSBjYWxsLCBhdm9pZGluZyBtZW1vcnkgYWxsb2NhdGlvbiB3aGVuIHRoaXMgZnVuY3Rpb25cbiAgLy8gaXMgY2FsbGVkLlxuICB2YXIgcGFydGlhbFN0YXRlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBzdGF0ZUtleVNldHRlcih2YWx1ZSkge1xuICAgIHBhcnRpYWxTdGF0ZVtrZXldID0gdmFsdWU7XG4gICAgY29tcG9uZW50LnNldFN0YXRlKHBhcnRpYWxTdGF0ZSk7XG4gIH07XG59XG5cblJlYWN0U3RhdGVTZXR0ZXJzLk1peGluID0ge1xuICAvKipcbiAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2FsbHMgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uLCBhbmQgdXNlcyB0aGUgcmVzdWx0XG4gICAqIG9mIHRoYXQgdG8gc2V0IHRoZSBjb21wb25lbnQncyBzdGF0ZS5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIHRoZXNlIHN0YXRlbWVudHMgYXJlIGVxdWl2YWxlbnQ6XG4gICAqXG4gICAqICAgdGhpcy5zZXRTdGF0ZSh7eDogMX0pO1xuICAgKiAgIHRoaXMuY3JlYXRlU3RhdGVTZXR0ZXIoZnVuY3Rpb24oeFZhbHVlKSB7XG4gICAqICAgICByZXR1cm4ge3g6IHhWYWx1ZX07XG4gICAqICAgfSkoMSk7XG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmNSZXR1cm5pbmdTdGF0ZSBSZXR1cm5lZCBjYWxsYmFjayB1c2VzIHRoaXMgdG9cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGVybWluZSBob3cgdG8gdXBkYXRlIHN0YXRlLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gY2FsbGJhY2sgdGhhdCB3aGVuIGludm9rZWQgdXNlcyBmdW5jUmV0dXJuaW5nU3RhdGUgdG9cbiAgICogICAgICAgICAgICAgICAgICAgIGRldGVybWluZWQgdGhlIG9iamVjdCBsaXRlcmFsIHRvIHNldFN0YXRlLlxuICAgKi9cbiAgY3JlYXRlU3RhdGVTZXR0ZXI6IGZ1bmN0aW9uKGZ1bmNSZXR1cm5pbmdTdGF0ZSkge1xuICAgIHJldHVybiBSZWFjdFN0YXRlU2V0dGVycy5jcmVhdGVTdGF0ZVNldHRlcih0aGlzLCBmdW5jUmV0dXJuaW5nU3RhdGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2luZ2xlLWFyZ3VtZW50IGNhbGxiYWNrIHRoYXQgY2FuIGJlIHVzZWQgdG8gdXBkYXRlIGEgc2luZ2xlXG4gICAqIGtleSBpbiB0aGUgY29tcG9uZW50J3Mgc3RhdGUuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCB0aGVzZSBzdGF0ZW1lbnRzIGFyZSBlcXVpdmFsZW50OlxuICAgKlxuICAgKiAgIHRoaXMuc2V0U3RhdGUoe3g6IDF9KTtcbiAgICogICB0aGlzLmNyZWF0ZVN0YXRlS2V5U2V0dGVyKCd4JykoMSk7XG4gICAqXG4gICAqIE5vdGU6IHRoaXMgaXMgbWVtb2l6ZWQgZnVuY3Rpb24sIHdoaWNoIG1ha2VzIGl0IGluZXhwZW5zaXZlIHRvIGNhbGwuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBpbiB0aGUgc3RhdGUgdGhhdCB5b3Ugc2hvdWxkIHVwZGF0ZS5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IGNhbGxiYWNrIG9mIDEgYXJndW1lbnQgd2hpY2ggY2FsbHMgc2V0U3RhdGUoKSB3aXRoXG4gICAqICAgICAgICAgICAgICAgICAgICB0aGUgcHJvdmlkZWQga2V5TmFtZSBhbmQgY2FsbGJhY2sgYXJndW1lbnQuXG4gICAqL1xuICBjcmVhdGVTdGF0ZUtleVNldHRlcjogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIFJlYWN0U3RhdGVTZXR0ZXJzLmNyZWF0ZVN0YXRlS2V5U2V0dGVyKHRoaXMsIGtleSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RTdGF0ZVNldHRlcnM7XG5cbn0se31dLDI0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RUZXN0VXRpbHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIik7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIik7XG52YXIgUmVhY3QgPSByZXF1aXJlKFwiLi9SZWFjdFwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZU1hcFwiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKFwiLi9lbXB0eU9iamVjdFwiKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG5mdW5jdGlvbiBFdmVudChzdWZmaXgpIHt9XG5cbi8qKlxuICogQGNsYXNzIFJlYWN0VGVzdFV0aWxzXG4gKi9cblxuLyoqXG4gKiBUb2RvOiBTdXBwb3J0IHRoZSBlbnRpcmUgRE9NLnNjcnkgcXVlcnkgc3ludGF4LiBGb3Igbm93LCB0aGVzZSBzaW1wbGVcbiAqIHV0aWxpdGllcyB3aWxsIHN1ZmZpY2UgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gKiBAbGVuZHMgUmVhY3RUZXN0VXRpbHNcbiAqL1xudmFyIFJlYWN0VGVzdFV0aWxzID0ge1xuICByZW5kZXJJbnRvRG9jdW1lbnQ6IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIC8vIE5vbmUgb2Ygb3VyIHRlc3RzIGFjdHVhbGx5IHJlcXVpcmUgYXR0YWNoaW5nIHRoZSBjb250YWluZXIgdG8gdGhlXG4gICAgLy8gRE9NLCBhbmQgZG9pbmcgc28gY3JlYXRlcyBhIG1lc3MgdGhhdCB3ZSByZWx5IG9uIHRlc3QgaXNvbGF0aW9uIHRvXG4gICAgLy8gY2xlYW4gdXAsIHNvIHdlJ3JlIGdvaW5nIHRvIHN0b3AgaG9ub3JpbmcgdGhlIG5hbWUgb2YgdGhpcyBtZXRob2RcbiAgICAvLyAoYW5kIHByb2JhYmx5IHJlbmFtZSBpdCBldmVudHVhbGx5KSBpZiBubyBwcm9ibGVtcyBhcmlzZS5cbiAgICAvLyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICByZXR1cm4gUmVhY3QucmVuZGVyKGluc3RhbmNlLCBkaXYpO1xuICB9LFxuXG4gIGlzRWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCk7XG4gIH0sXG5cbiAgaXNFbGVtZW50T2ZUeXBlOiBmdW5jdGlvbihpbnN0LCBjb252ZW5pZW5jZUNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChpbnN0KSAmJlxuICAgICAgaW5zdC50eXBlID09PSBjb252ZW5pZW5jZUNvbnN0cnVjdG9yXG4gICAgKTtcbiAgfSxcblxuICBpc0RPTUNvbXBvbmVudDogZnVuY3Rpb24oaW5zdCkge1xuICAgIC8vIFRPRE86IEZpeCB0aGlzIGhldXJpc3RpYy4gSXQncyBqdXN0IGhlcmUgYmVjYXVzZSBjb21wb3NpdGVzIGNhbiBjdXJyZW50bHlcbiAgICAvLyBwcmV0ZW5kIHRvIGJlIERPTSBjb21wb25lbnRzLlxuICAgIHJldHVybiAhIShpbnN0ICYmIGluc3QudGFnTmFtZSAmJiBpbnN0LmdldERPTU5vZGUpO1xuICB9LFxuXG4gIGlzRE9NQ29tcG9uZW50RWxlbWVudDogZnVuY3Rpb24oaW5zdCkge1xuICAgIHJldHVybiAhIShpbnN0ICYmXG4gICAgICAgICAgICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChpbnN0KSAmJlxuICAgICAgICAgICAgICAhIWluc3QudGFnTmFtZSk7XG4gIH0sXG5cbiAgaXNDb21wb3NpdGVDb21wb25lbnQ6IGZ1bmN0aW9uKGluc3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIGluc3QucmVuZGVyID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgIHR5cGVvZiBpbnN0LnNldFN0YXRlID09PSAnZnVuY3Rpb24nO1xuICB9LFxuXG4gIGlzQ29tcG9zaXRlQ29tcG9uZW50V2l0aFR5cGU6IGZ1bmN0aW9uKGluc3QsIHR5cGUpIHtcbiAgICByZXR1cm4gISEoUmVhY3RUZXN0VXRpbHMuaXNDb21wb3NpdGVDb21wb25lbnQoaW5zdCkgJiZcbiAgICAgICAgICAgICAoaW5zdC5jb25zdHJ1Y3RvciA9PT0gdHlwZSkpO1xuICB9LFxuXG4gIGlzQ29tcG9zaXRlQ29tcG9uZW50RWxlbWVudDogZnVuY3Rpb24oaW5zdCkge1xuICAgIGlmICghUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGluc3QpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIFdlIGNoZWNrIHRoZSBwcm90b3R5cGUgb2YgdGhlIHR5cGUgdGhhdCB3aWxsIGdldCBtb3VudGVkLCBub3QgdGhlXG4gICAgLy8gaW5zdGFuY2UgaXRzZWxmLiBUaGlzIGlzIGEgZnV0dXJlIHByb29mIHdheSBvZiBkdWNrIHR5cGluZy5cbiAgICB2YXIgcHJvdG90eXBlID0gaW5zdC50eXBlLnByb3RvdHlwZTtcbiAgICByZXR1cm4gKFxuICAgICAgdHlwZW9mIHByb3RvdHlwZS5yZW5kZXIgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBwcm90b3R5cGUuc2V0U3RhdGUgPT09ICdmdW5jdGlvbidcbiAgICApO1xuICB9LFxuXG4gIGlzQ29tcG9zaXRlQ29tcG9uZW50RWxlbWVudFdpdGhUeXBlOiBmdW5jdGlvbihpbnN0LCB0eXBlKSB7XG4gICAgcmV0dXJuICEhKFJlYWN0VGVzdFV0aWxzLmlzQ29tcG9zaXRlQ29tcG9uZW50RWxlbWVudChpbnN0KSAmJlxuICAgICAgICAgICAgIChpbnN0LmNvbnN0cnVjdG9yID09PSB0eXBlKSk7XG4gIH0sXG5cbiAgZ2V0UmVuZGVyZWRDaGlsZE9mQ29tcG9zaXRlQ29tcG9uZW50OiBmdW5jdGlvbihpbnN0KSB7XG4gICAgaWYgKCFSZWFjdFRlc3RVdGlscy5pc0NvbXBvc2l0ZUNvbXBvbmVudChpbnN0KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQoaW5zdCk7XG4gICAgcmV0dXJuIGludGVybmFsSW5zdGFuY2UuX3JlbmRlcmVkQ29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCk7XG4gIH0sXG5cbiAgZmluZEFsbEluUmVuZGVyZWRUcmVlOiBmdW5jdGlvbihpbnN0LCB0ZXN0KSB7XG4gICAgaWYgKCFpbnN0KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHZhciByZXQgPSB0ZXN0KGluc3QpID8gW2luc3RdIDogW107XG4gICAgaWYgKFJlYWN0VGVzdFV0aWxzLmlzRE9NQ29tcG9uZW50KGluc3QpKSB7XG4gICAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KGluc3QpO1xuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGRyZW4gPSBpbnRlcm5hbEluc3RhbmNlXG4gICAgICAgIC5fcmVuZGVyZWRDb21wb25lbnRcbiAgICAgICAgLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgdmFyIGtleTtcbiAgICAgIGZvciAoa2V5IGluIHJlbmRlcmVkQ2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCFyZW5kZXJlZENoaWxkcmVuLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlbmRlcmVkQ2hpbGRyZW5ba2V5XS5nZXRQdWJsaWNJbnN0YW5jZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldCA9IHJldC5jb25jYXQoXG4gICAgICAgICAgUmVhY3RUZXN0VXRpbHMuZmluZEFsbEluUmVuZGVyZWRUcmVlKFxuICAgICAgICAgICAgcmVuZGVyZWRDaGlsZHJlbltrZXldLmdldFB1YmxpY0luc3RhbmNlKCksXG4gICAgICAgICAgICB0ZXN0XG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoUmVhY3RUZXN0VXRpbHMuaXNDb21wb3NpdGVDb21wb25lbnQoaW5zdCkpIHtcbiAgICAgIHJldCA9IHJldC5jb25jYXQoXG4gICAgICAgIFJlYWN0VGVzdFV0aWxzLmZpbmRBbGxJblJlbmRlcmVkVHJlZShcbiAgICAgICAgICBSZWFjdFRlc3RVdGlscy5nZXRSZW5kZXJlZENoaWxkT2ZDb21wb3NpdGVDb21wb25lbnQoaW5zdCksXG4gICAgICAgICAgdGVzdFxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgaW5zdGFuY2Ugb2YgY29tcG9uZW50cyBpbiB0aGUgcmVuZGVyZWQgdHJlZSB0aGF0IGFyZSBET01cbiAgICogY29tcG9uZW50cyB3aXRoIHRoZSBjbGFzcyBuYW1lIG1hdGNoaW5nIGBjbGFzc05hbWVgLlxuICAgKiBAcmV0dXJuIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlcy5cbiAgICovXG4gIHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3M6IGZ1bmN0aW9uKHJvb3QsIGNsYXNzTmFtZSkge1xuICAgIHJldHVybiBSZWFjdFRlc3RVdGlscy5maW5kQWxsSW5SZW5kZXJlZFRyZWUocm9vdCwgZnVuY3Rpb24oaW5zdCkge1xuICAgICAgdmFyIGluc3RDbGFzc05hbWUgPSBpbnN0LnByb3BzLmNsYXNzTmFtZTtcbiAgICAgIHJldHVybiBSZWFjdFRlc3RVdGlscy5pc0RPTUNvbXBvbmVudChpbnN0KSAmJiAoXG4gICAgICAgIChpbnN0Q2xhc3NOYW1lICYmICgnICcgKyBpbnN0Q2xhc3NOYW1lICsgJyAnKS5pbmRleE9mKCcgJyArIGNsYXNzTmFtZSArICcgJykgIT09IC0xKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogTGlrZSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzIGJ1dCBleHBlY3RzIHRoZXJlIHRvIGJlIG9uZSByZXN1bHQsXG4gICAqIGFuZCByZXR1cm5zIHRoYXQgb25lIHJlc3VsdCwgb3IgdGhyb3dzIGV4Y2VwdGlvbiBpZiB0aGVyZSBpcyBhbnkgb3RoZXJcbiAgICogbnVtYmVyIG9mIG1hdGNoZXMgYmVzaWRlcyBvbmUuXG4gICAqIEByZXR1cm4geyFSZWFjdERPTUNvbXBvbmVudH0gVGhlIG9uZSBtYXRjaC5cbiAgICovXG4gIGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzczogZnVuY3Rpb24ocm9vdCwgY2xhc3NOYW1lKSB7XG4gICAgdmFyIGFsbCA9XG4gICAgICBSZWFjdFRlc3RVdGlscy5zY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKHJvb3QsIGNsYXNzTmFtZSk7XG4gICAgaWYgKGFsbC5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGlkIG5vdCBmaW5kIGV4YWN0bHkgb25lIG1hdGNoICcgK1xuICAgICAgICAnKGZvdW5kOiAnICsgYWxsLmxlbmd0aCArICcpIGZvciBjbGFzczonICsgY2xhc3NOYW1lXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYWxsWzBdO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBpbnN0YW5jZSBvZiBjb21wb25lbnRzIGluIHRoZSByZW5kZXJlZCB0cmVlIHRoYXQgYXJlIERPTVxuICAgKiBjb21wb25lbnRzIHdpdGggdGhlIHRhZyBuYW1lIG1hdGNoaW5nIGB0YWdOYW1lYC5cbiAgICogQHJldHVybiBhbiBhcnJheSBvZiBhbGwgdGhlIG1hdGNoZXMuXG4gICAqL1xuICBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aFRhZzogZnVuY3Rpb24ocm9vdCwgdGFnTmFtZSkge1xuICAgIHJldHVybiBSZWFjdFRlc3RVdGlscy5maW5kQWxsSW5SZW5kZXJlZFRyZWUocm9vdCwgZnVuY3Rpb24oaW5zdCkge1xuICAgICAgcmV0dXJuIFJlYWN0VGVzdFV0aWxzLmlzRE9NQ29tcG9uZW50KGluc3QpICYmXG4gICAgICAgICAgICBpbnN0LnRhZ05hbWUgPT09IHRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogTGlrZSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aFRhZyBidXQgZXhwZWN0cyB0aGVyZSB0byBiZSBvbmUgcmVzdWx0LFxuICAgKiBhbmQgcmV0dXJucyB0aGF0IG9uZSByZXN1bHQsIG9yIHRocm93cyBleGNlcHRpb24gaWYgdGhlcmUgaXMgYW55IG90aGVyXG4gICAqIG51bWJlciBvZiBtYXRjaGVzIGJlc2lkZXMgb25lLlxuICAgKiBAcmV0dXJuIHshUmVhY3RET01Db21wb25lbnR9IFRoZSBvbmUgbWF0Y2guXG4gICAqL1xuICBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoVGFnOiBmdW5jdGlvbihyb290LCB0YWdOYW1lKSB7XG4gICAgdmFyIGFsbCA9IFJlYWN0VGVzdFV0aWxzLnNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoVGFnKHJvb3QsIHRhZ05hbWUpO1xuICAgIGlmIChhbGwubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RpZCBub3QgZmluZCBleGFjdGx5IG9uZSBtYXRjaCBmb3IgdGFnOicgKyB0YWdOYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIGFsbFswXTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgaW5zdGFuY2VzIG9mIGNvbXBvbmVudHMgd2l0aCB0eXBlIGVxdWFsIHRvIGBjb21wb25lbnRUeXBlYC5cbiAgICogQHJldHVybiBhbiBhcnJheSBvZiBhbGwgdGhlIG1hdGNoZXMuXG4gICAqL1xuICBzY3J5UmVuZGVyZWRDb21wb25lbnRzV2l0aFR5cGU6IGZ1bmN0aW9uKHJvb3QsIGNvbXBvbmVudFR5cGUpIHtcbiAgICByZXR1cm4gUmVhY3RUZXN0VXRpbHMuZmluZEFsbEluUmVuZGVyZWRUcmVlKHJvb3QsIGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgIHJldHVybiBSZWFjdFRlc3RVdGlscy5pc0NvbXBvc2l0ZUNvbXBvbmVudFdpdGhUeXBlKFxuICAgICAgICBpbnN0LFxuICAgICAgICBjb21wb25lbnRUeXBlXG4gICAgICApO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTYW1lIGFzIGBzY3J5UmVuZGVyZWRDb21wb25lbnRzV2l0aFR5cGVgIGJ1dCBleHBlY3RzIHRoZXJlIHRvIGJlIG9uZSByZXN1bHRcbiAgICogYW5kIHJldHVybnMgdGhhdCBvbmUgcmVzdWx0LCBvciB0aHJvd3MgZXhjZXB0aW9uIGlmIHRoZXJlIGlzIGFueSBvdGhlclxuICAgKiBudW1iZXIgb2YgbWF0Y2hlcyBiZXNpZGVzIG9uZS5cbiAgICogQHJldHVybiB7IVJlYWN0Q29tcG9uZW50fSBUaGUgb25lIG1hdGNoLlxuICAgKi9cbiAgZmluZFJlbmRlcmVkQ29tcG9uZW50V2l0aFR5cGU6IGZ1bmN0aW9uKHJvb3QsIGNvbXBvbmVudFR5cGUpIHtcbiAgICB2YXIgYWxsID0gUmVhY3RUZXN0VXRpbHMuc2NyeVJlbmRlcmVkQ29tcG9uZW50c1dpdGhUeXBlKFxuICAgICAgcm9vdCxcbiAgICAgIGNvbXBvbmVudFR5cGVcbiAgICApO1xuICAgIGlmIChhbGwubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdEaWQgbm90IGZpbmQgZXhhY3RseSBvbmUgbWF0Y2ggZm9yIGNvbXBvbmVudFR5cGU6JyArIGNvbXBvbmVudFR5cGVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBhbGxbMF07XG4gIH0sXG5cbiAgLyoqXG4gICAqIFBhc3MgYSBtb2NrZWQgY29tcG9uZW50IG1vZHVsZSB0byB0aGlzIG1ldGhvZCB0byBhdWdtZW50IGl0IHdpdGhcbiAgICogdXNlZnVsIG1ldGhvZHMgdGhhdCBhbGxvdyBpdCB0byBiZSB1c2VkIGFzIGEgZHVtbXkgUmVhY3QgY29tcG9uZW50LlxuICAgKiBJbnN0ZWFkIG9mIHJlbmRlcmluZyBhcyB1c3VhbCwgdGhlIGNvbXBvbmVudCB3aWxsIGJlY29tZSBhIHNpbXBsZVxuICAgKiA8ZGl2PiBjb250YWluaW5nIGFueSBwcm92aWRlZCBjaGlsZHJlbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG1vZHVsZSB0aGUgbW9jayBmdW5jdGlvbiBvYmplY3QgZXhwb3J0ZWQgZnJvbSBhXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlIHRoYXQgZGVmaW5lcyB0aGUgY29tcG9uZW50IHRvIGJlIG1vY2tlZFxuICAgKiBAcGFyYW0gez9zdHJpbmd9IG1vY2tUYWdOYW1lIG9wdGlvbmFsIGR1bW15IHJvb3QgdGFnIG5hbWUgdG8gcmV0dXJuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSByZW5kZXIgbWV0aG9kIChvdmVycmlkZXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUubW9ja1RhZ05hbWUgaWYgcHJvdmlkZWQpXG4gICAqIEByZXR1cm4ge29iamVjdH0gdGhlIFJlYWN0VGVzdFV0aWxzIG9iamVjdCAoZm9yIGNoYWluaW5nKVxuICAgKi9cbiAgbW9ja0NvbXBvbmVudDogZnVuY3Rpb24obW9kdWxlLCBtb2NrVGFnTmFtZSkge1xuICAgIG1vY2tUYWdOYW1lID0gbW9ja1RhZ05hbWUgfHwgbW9kdWxlLm1vY2tUYWdOYW1lIHx8IFwiZGl2XCI7XG5cbiAgICBtb2R1bGUucHJvdG90eXBlLnJlbmRlci5tb2NrSW1wbGVtZW50YXRpb24oZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgbW9ja1RhZ05hbWUsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogU2ltdWxhdGVzIGEgdG9wIGxldmVsIGV2ZW50IGJlaW5nIGRpc3BhdGNoZWQgZnJvbSBhIHJhdyBldmVudCB0aGF0IG9jY3VyZWRcbiAgICogb24gYW4gYEVsZW1lbnRgIG5vZGUuXG4gICAqIEBwYXJhbSB0b3BMZXZlbFR5cGUge09iamVjdH0gQSB0eXBlIGZyb20gYEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXNgXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IG5vZGUgVGhlIGRvbSB0byBzaW11bGF0ZSBhbiBldmVudCBvY2N1cnJpbmcgb24uXG4gICAqIEBwYXJhbSB7P0V2ZW50fSBmYWtlTmF0aXZlRXZlbnQgRmFrZSBuYXRpdmUgZXZlbnQgdG8gdXNlIGluIFN5bnRoZXRpY0V2ZW50LlxuICAgKi9cbiAgc2ltdWxhdGVOYXRpdmVFdmVudE9uTm9kZTogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBub2RlLCBmYWtlTmF0aXZlRXZlbnQpIHtcbiAgICBmYWtlTmF0aXZlRXZlbnQudGFyZ2V0ID0gbm9kZTtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQoXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBmYWtlTmF0aXZlRXZlbnRcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTaW11bGF0ZXMgYSB0b3AgbGV2ZWwgZXZlbnQgYmVpbmcgZGlzcGF0Y2hlZCBmcm9tIGEgcmF3IGV2ZW50IHRoYXQgb2NjdXJlZFxuICAgKiBvbiB0aGUgYFJlYWN0RE9NQ29tcG9uZW50YCBgY29tcGAuXG4gICAqIEBwYXJhbSB0b3BMZXZlbFR5cGUge09iamVjdH0gQSB0eXBlIGZyb20gYEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXNgLlxuICAgKiBAcGFyYW0gY29tcCB7IVJlYWN0RE9NQ29tcG9uZW50fVxuICAgKiBAcGFyYW0gez9FdmVudH0gZmFrZU5hdGl2ZUV2ZW50IEZha2UgbmF0aXZlIGV2ZW50IHRvIHVzZSBpbiBTeW50aGV0aWNFdmVudC5cbiAgICovXG4gIHNpbXVsYXRlTmF0aXZlRXZlbnRPbkRPTUNvbXBvbmVudDogZnVuY3Rpb24oXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBjb21wLFxuICAgICAgZmFrZU5hdGl2ZUV2ZW50KSB7XG4gICAgUmVhY3RUZXN0VXRpbHMuc2ltdWxhdGVOYXRpdmVFdmVudE9uTm9kZShcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIGNvbXAuZ2V0RE9NTm9kZSgpLFxuICAgICAgZmFrZU5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgfSxcblxuICBuYXRpdmVUb3VjaERhdGE6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG91Y2hlczogW1xuICAgICAgICB7cGFnZVg6IHgsIHBhZ2VZOiB5fVxuICAgICAgXVxuICAgIH07XG4gIH0sXG5cbiAgY3JlYXRlUmVuZGVyZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVhY3RTaGFsbG93UmVuZGVyZXIoKTtcbiAgfSxcblxuICBTaW11bGF0ZTogbnVsbCxcbiAgU2ltdWxhdGVOYXRpdmU6IHt9XG59O1xuXG4vKipcbiAqIEBjbGFzcyBSZWFjdFNoYWxsb3dSZW5kZXJlclxuICovXG52YXIgUmVhY3RTaGFsbG93UmVuZGVyZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xufTtcblxuUmVhY3RTaGFsbG93UmVuZGVyZXIucHJvdG90eXBlLmdldFJlbmRlck91dHB1dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKFxuICAgICh0aGlzLl9pbnN0YW5jZSAmJiB0aGlzLl9pbnN0YW5jZS5fcmVuZGVyZWRDb21wb25lbnQgJiZcbiAgICAgdGhpcy5faW5zdGFuY2UuX3JlbmRlcmVkQ29tcG9uZW50Ll9yZW5kZXJlZE91dHB1dClcbiAgICB8fCBudWxsXG4gICk7XG59O1xuXG52YXIgTm9vcEludGVybmFsQ29tcG9uZW50ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICB0aGlzLl9yZW5kZXJlZE91dHB1dCA9IGVsZW1lbnQ7XG4gIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSBmYWxzZSA/XG4gICAgUmVhY3RFbXB0eUNvbXBvbmVudC5lbXB0eUVsZW1lbnQgOlxuICAgIGVsZW1lbnQ7XG59O1xuXG5Ob29wSW50ZXJuYWxDb21wb25lbnQucHJvdG90eXBlID0ge1xuXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbigpIHtcbiAgfSxcblxuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdGhpcy5fcmVuZGVyZWRPdXRwdXQgPSBlbGVtZW50O1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSBmYWxzZSA/XG4gICAgICBSZWFjdEVtcHR5Q29tcG9uZW50LmVtcHR5RWxlbWVudCA6XG4gICAgICBlbGVtZW50O1xuICB9LFxuXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuICB9XG5cbn07XG5cbnZhciBTaGFsbG93Q29tcG9uZW50V3JhcHBlciA9IGZ1bmN0aW9uKCkgeyB9O1xuYXNzaWduKFxuICBTaGFsbG93Q29tcG9uZW50V3JhcHBlci5wcm90b3R5cGUsXG4gIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50Lk1peGluLCB7XG4gICAgX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBuZXcgTm9vcEludGVybmFsQ29tcG9uZW50KGVsZW1lbnQpO1xuICAgIH0sXG4gICAgX3JlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6IGZ1bmN0aW9uKCkge30sXG4gICAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudDpcbiAgICAgIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50Lk1peGluLlxuICAgICAgICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50V2l0aG91dE93bmVyT3JDb250ZXh0XG4gIH1cbik7XG5cblJlYWN0U2hhbGxvd1JlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihlbGVtZW50LCBjb250ZXh0KSB7XG4gIGlmICghY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBlbXB0eU9iamVjdDtcbiAgfVxuICB2YXIgdHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5nZXRQb29sZWQoKTtcbiAgdGhpcy5fcmVuZGVyKGVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG59O1xuXG5SZWFjdFNoYWxsb3dSZW5kZXJlci5wcm90b3R5cGUudW5tb3VudCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5faW5zdGFuY2UpIHtcbiAgICB0aGlzLl9pbnN0YW5jZS51bm1vdW50Q29tcG9uZW50KCk7XG4gIH1cbn07XG5cblJlYWN0U2hhbGxvd1JlbmRlcmVyLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24oZWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xuICAgIHZhciByb290SUQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdFJvb3RJRCgpO1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBTaGFsbG93Q29tcG9uZW50V3JhcHBlcihlbGVtZW50LnR5cGUpO1xuICAgIGluc3RhbmNlLmNvbnN0cnVjdChlbGVtZW50KTtcblxuICAgIGluc3RhbmNlLm1vdW50Q29tcG9uZW50KHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuXG4gICAgdGhpcy5faW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9pbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50KGVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeHBvcnRzOlxuICpcbiAqIC0gYFJlYWN0VGVzdFV0aWxzLlNpbXVsYXRlLmNsaWNrKEVsZW1lbnQvUmVhY3RET01Db21wb25lbnQpYFxuICogLSBgUmVhY3RUZXN0VXRpbHMuU2ltdWxhdGUubW91c2VNb3ZlKEVsZW1lbnQvUmVhY3RET01Db21wb25lbnQpYFxuICogLSBgUmVhY3RUZXN0VXRpbHMuU2ltdWxhdGUuY2hhbmdlKEVsZW1lbnQvUmVhY3RET01Db21wb25lbnQpYFxuICogLSAuLi4gKEFsbCBrZXlzIGZyb20gZXZlbnQgcGx1Z2luIGBldmVudFR5cGVzYCBvYmplY3RzKVxuICovXG5mdW5jdGlvbiBtYWtlU2ltdWxhdG9yKGV2ZW50VHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZG9tQ29tcG9uZW50T3JOb2RlLCBldmVudERhdGEpIHtcbiAgICB2YXIgbm9kZTtcbiAgICBpZiAoUmVhY3RUZXN0VXRpbHMuaXNET01Db21wb25lbnQoZG9tQ29tcG9uZW50T3JOb2RlKSkge1xuICAgICAgbm9kZSA9IGRvbUNvbXBvbmVudE9yTm9kZS5nZXRET01Ob2RlKCk7XG4gICAgfSBlbHNlIGlmIChkb21Db21wb25lbnRPck5vZGUudGFnTmFtZSkge1xuICAgICAgbm9kZSA9IGRvbUNvbXBvbmVudE9yTm9kZTtcbiAgICB9XG5cbiAgICB2YXIgZmFrZU5hdGl2ZUV2ZW50ID0gbmV3IEV2ZW50KCk7XG4gICAgZmFrZU5hdGl2ZUV2ZW50LnRhcmdldCA9IG5vZGU7XG4gICAgLy8gV2UgZG9uJ3QgdXNlIFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZCBpbiBvcmRlciB0byBub3QgaGF2ZSB0byB3b3JyeSBhYm91dFxuICAgIC8vIHByb3Blcmx5IGRlc3Ryb3lpbmcgYW55IHByb3BlcnRpZXMgYXNzaWduZWQgZnJvbSBgZXZlbnREYXRhYCB1cG9uIHJlbGVhc2VcbiAgICB2YXIgZXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoXG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50VHlwZV0sXG4gICAgICBSZWFjdE1vdW50LmdldElEKG5vZGUpLFxuICAgICAgZmFrZU5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgICBhc3NpZ24oZXZlbnQsIGV2ZW50RGF0YSk7XG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcblxuICAgIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpIHtcbiAgICAgIEV2ZW50UGx1Z2luSHViLmVucXVldWVFdmVudHMoZXZlbnQpO1xuICAgICAgRXZlbnRQbHVnaW5IdWIucHJvY2Vzc0V2ZW50UXVldWUoKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYnVpbGRTaW11bGF0b3JzKCkge1xuICBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZSA9IHt9O1xuXG4gIHZhciBldmVudFR5cGU7XG4gIGZvciAoZXZlbnRUeXBlIGluIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyFFbGVtZW50IHx8IFJlYWN0RE9NQ29tcG9uZW50fSBkb21Db21wb25lbnRPck5vZGVcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IGV2ZW50RGF0YSBGYWtlIGV2ZW50IGRhdGEgdG8gdXNlIGluIFN5bnRoZXRpY0V2ZW50LlxuICAgICAqL1xuICAgIFJlYWN0VGVzdFV0aWxzLlNpbXVsYXRlW2V2ZW50VHlwZV0gPSBtYWtlU2ltdWxhdG9yKGV2ZW50VHlwZSk7XG4gIH1cbn1cblxuLy8gUmVidWlsZCBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZSB3aGVuZXZlciBldmVudCBwbHVnaW5zIGFyZSBpbmplY3RlZFxudmFyIG9sZEluamVjdEV2ZW50UGx1Z2luT3JkZXIgPSBFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjtcbkV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbk9yZGVyID0gZnVuY3Rpb24oKSB7XG4gIG9sZEluamVjdEV2ZW50UGx1Z2luT3JkZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgYnVpbGRTaW11bGF0b3JzKCk7XG59O1xudmFyIG9sZEluamVjdEV2ZW50UGx1Z2lucyA9IEV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWU7XG5FdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lID0gZnVuY3Rpb24oKSB7XG4gIG9sZEluamVjdEV2ZW50UGx1Z2lucy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICBidWlsZFNpbXVsYXRvcnMoKTtcbn07XG5cbmJ1aWxkU2ltdWxhdG9ycygpO1xuXG4vKipcbiAqIEV4cG9ydHM6XG4gKlxuICogLSBgUmVhY3RUZXN0VXRpbHMuU2ltdWxhdGVOYXRpdmUuY2xpY2soRWxlbWVudC9SZWFjdERPTUNvbXBvbmVudClgXG4gKiAtIGBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZU5hdGl2ZS5tb3VzZU1vdmUoRWxlbWVudC9SZWFjdERPTUNvbXBvbmVudClgXG4gKiAtIGBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZU5hdGl2ZS5tb3VzZUluL1JlYWN0RE9NQ29tcG9uZW50KWBcbiAqIC0gYFJlYWN0VGVzdFV0aWxzLlNpbXVsYXRlTmF0aXZlLm1vdXNlT3V0KEVsZW1lbnQvUmVhY3RET01Db21wb25lbnQpYFxuICogLSAuLi4gKEFsbCBrZXlzIGZyb20gYEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXNgKVxuICpcbiAqIE5vdGU6IFRvcCBsZXZlbCBldmVudCB0eXBlcyBhcmUgYSBzdWJzZXQgb2YgdGhlIGVudGlyZSBzZXQgb2YgaGFuZGxlciB0eXBlc1xuICogKHdoaWNoIGluY2x1ZGUgYSBicm9hZGVyIHNldCBvZiBcInN5bnRoZXRpY1wiIGV2ZW50cykuIEZvciBleGFtcGxlLCBvbkRyYWdEb25lXG4gKiBpcyBhIHN5bnRoZXRpYyBldmVudC4gRXhjZXB0IHdoZW4gdGVzdGluZyBhbiBldmVudCBwbHVnaW4gb3IgUmVhY3QncyBldmVudFxuICogaGFuZGxpbmcgY29kZSBzcGVjaWZpY2FsbHksIHlvdSBwcm9iYWJseSB3YW50IHRvIHVzZSBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZVxuICogdG8gZGlzcGF0Y2ggc3ludGhldGljIGV2ZW50cy5cbiAqL1xuXG5mdW5jdGlvbiBtYWtlTmF0aXZlU2ltdWxhdG9yKGV2ZW50VHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZG9tQ29tcG9uZW50T3JOb2RlLCBuYXRpdmVFdmVudERhdGEpIHtcbiAgICB2YXIgZmFrZU5hdGl2ZUV2ZW50ID0gbmV3IEV2ZW50KGV2ZW50VHlwZSk7XG4gICAgYXNzaWduKGZha2VOYXRpdmVFdmVudCwgbmF0aXZlRXZlbnREYXRhKTtcbiAgICBpZiAoUmVhY3RUZXN0VXRpbHMuaXNET01Db21wb25lbnQoZG9tQ29tcG9uZW50T3JOb2RlKSkge1xuICAgICAgUmVhY3RUZXN0VXRpbHMuc2ltdWxhdGVOYXRpdmVFdmVudE9uRE9NQ29tcG9uZW50KFxuICAgICAgICBldmVudFR5cGUsXG4gICAgICAgIGRvbUNvbXBvbmVudE9yTm9kZSxcbiAgICAgICAgZmFrZU5hdGl2ZUV2ZW50XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoISFkb21Db21wb25lbnRPck5vZGUudGFnTmFtZSkge1xuICAgICAgLy8gV2lsbCBhbGxvdyBvbiBhY3R1YWwgZG9tIG5vZGVzLlxuICAgICAgUmVhY3RUZXN0VXRpbHMuc2ltdWxhdGVOYXRpdmVFdmVudE9uTm9kZShcbiAgICAgICAgZXZlbnRUeXBlLFxuICAgICAgICBkb21Db21wb25lbnRPck5vZGUsXG4gICAgICAgIGZha2VOYXRpdmVFdmVudFxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBldmVudFR5cGU7XG5mb3IgKGV2ZW50VHlwZSBpbiB0b3BMZXZlbFR5cGVzKSB7XG4gIC8vIEV2ZW50IHR5cGUgaXMgc3RvcmVkIGFzICd0b3BDbGljaycgLSB3ZSB0cmFuc2Zvcm0gdGhhdCB0byAnY2xpY2snXG4gIHZhciBjb252ZW5pZW5jZU5hbWUgPSBldmVudFR5cGUuaW5kZXhPZigndG9wJykgPT09IDAgP1xuICAgIGV2ZW50VHlwZS5jaGFyQXQoMykudG9Mb3dlckNhc2UoKSArIGV2ZW50VHlwZS5zdWJzdHIoNCkgOiBldmVudFR5cGU7XG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50IHx8IFJlYWN0RE9NQ29tcG9uZW50fSBkb21Db21wb25lbnRPck5vZGVcbiAgICogQHBhcmFtIHs/RXZlbnR9IG5hdGl2ZUV2ZW50RGF0YSBGYWtlIG5hdGl2ZSBldmVudCB0byB1c2UgaW4gU3ludGhldGljRXZlbnQuXG4gICAqL1xuICBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZU5hdGl2ZVtjb252ZW5pZW5jZU5hbWVdID1cbiAgICBtYWtlTmF0aXZlU2ltdWxhdG9yKGV2ZW50VHlwZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RUZXN0VXRpbHM7XG5cbn0se1wiLi9FdmVudENvbnN0YW50c1wiOjE2MixcIi4vRXZlbnRQbHVnaW5IdWJcIjoxNjQsXCIuL0V2ZW50UHJvcGFnYXRvcnNcIjoxNjcsXCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL1JlYWN0XCI6MTc3LFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIjoxNzksXCIuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCI6MTg5LFwiLi9SZWFjdEVsZW1lbnRcIjoyMDksXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIjoyMTEsXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCI6MjE4LFwiLi9SZWFjdEluc3RhbmNlTWFwXCI6MjE5LFwiLi9SZWFjdE1vdW50XCI6MjIzLFwiLi9SZWFjdFVwZGF0ZXNcIjoyNDYsXCIuL1N5bnRoZXRpY0V2ZW50XCI6MjU1LFwiLi9lbXB0eU9iamVjdFwiOjI3N31dLDI0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZ1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKFwiLi9SZWFjdENoaWxkcmVuXCIpO1xudmFyIFJlYWN0RnJhZ21lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEZyYWdtZW50XCIpO1xuXG52YXIgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nID0ge1xuICAvKipcbiAgICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLiBKdXN0XG4gICAqIHNpbXBsZSBzeW50YWN0aWMgc3VnYXIgYXJvdW5kIFJlYWN0Q2hpbGRyZW4ubWFwKCkuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gICAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAgICovXG4gIGdldENoaWxkTWFwcGluZzogZnVuY3Rpb24oY2hpbGRyZW4pIHtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiBSZWFjdEZyYWdtZW50LmV4dHJhY3QoUmVhY3RDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfSkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAgICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gICAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gICAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICAgKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICAgKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICAgKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAgICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICAgKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gICAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAgICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAgICovXG4gIG1lcmdlQ2hpbGRNYXBwaW5nczogZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuICAgIHByZXYgPSBwcmV2IHx8IHt9O1xuICAgIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gICAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgICBpZiAobmV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHJldHVybiBuZXh0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcHJldltrZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAgIC8vIHRoZSBjb21iaW5lZCBsaXN0XG4gICAgdmFyIG5leHRLZXlzUGVuZGluZyA9IHt9O1xuXG4gICAgdmFyIHBlbmRpbmdLZXlzID0gW107XG4gICAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgICBpZiAobmV4dC5oYXNPd25Qcm9wZXJ0eShwcmV2S2V5KSkge1xuICAgICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG4gICAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgICBpZiAobmV4dEtleXNQZW5kaW5nLmhhc093blByb3BlcnR5KG5leHRLZXkpKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShcbiAgICAgICAgICAgIHBlbmRpbmdOZXh0S2V5XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gICAgfVxuXG4gICAgLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG4gICAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZE1hcHBpbmc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nO1xuXG59LHtcIi4vUmVhY3RDaGlsZHJlblwiOjE4MyxcIi4vUmVhY3RGcmFnbWVudFwiOjIxNX1dLDI0MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RUcmFuc2l0aW9uRXZlbnRzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxuLyoqXG4gKiBFVkVOVF9OQU1FX01BUCBpcyB1c2VkIHRvIGRldGVybWluZSB3aGljaCBldmVudCBmaXJlZCB3aGVuIGFcbiAqIHRyYW5zaXRpb24vYW5pbWF0aW9uIGVuZHMsIGJhc2VkIG9uIHRoZSBzdHlsZSBwcm9wZXJ0eSB1c2VkIHRvXG4gKiBkZWZpbmUgdGhhdCBldmVudC5cbiAqL1xudmFyIEVWRU5UX05BTUVfTUFQID0ge1xuICB0cmFuc2l0aW9uZW5kOiB7XG4gICAgJ3RyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgJ1dlYmtpdFRyYW5zaXRpb24nOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgJ01velRyYW5zaXRpb24nOiAnbW96VHJhbnNpdGlvbkVuZCcsXG4gICAgJ09UcmFuc2l0aW9uJzogJ29UcmFuc2l0aW9uRW5kJyxcbiAgICAnbXNUcmFuc2l0aW9uJzogJ01TVHJhbnNpdGlvbkVuZCdcbiAgfSxcblxuICBhbmltYXRpb25lbmQ6IHtcbiAgICAnYW5pbWF0aW9uJzogJ2FuaW1hdGlvbmVuZCcsXG4gICAgJ1dlYmtpdEFuaW1hdGlvbic6ICd3ZWJraXRBbmltYXRpb25FbmQnLFxuICAgICdNb3pBbmltYXRpb24nOiAnbW96QW5pbWF0aW9uRW5kJyxcbiAgICAnT0FuaW1hdGlvbic6ICdvQW5pbWF0aW9uRW5kJyxcbiAgICAnbXNBbmltYXRpb24nOiAnTVNBbmltYXRpb25FbmQnXG4gIH1cbn07XG5cbnZhciBlbmRFdmVudHMgPSBbXTtcblxuZnVuY3Rpb24gZGV0ZWN0RXZlbnRzKCkge1xuICB2YXIgdGVzdEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHZhciBzdHlsZSA9IHRlc3RFbC5zdHlsZTtcblxuICAvLyBPbiBzb21lIHBsYXRmb3JtcywgaW4gcGFydGljdWxhciBzb21lIHJlbGVhc2VzIG9mIEFuZHJvaWQgNC54LFxuICAvLyB0aGUgdW4tcHJlZml4ZWQgXCJhbmltYXRpb25cIiBhbmQgXCJ0cmFuc2l0aW9uXCIgcHJvcGVydGllcyBhcmUgZGVmaW5lZCBvbiB0aGVcbiAgLy8gc3R5bGUgb2JqZWN0IGJ1dCB0aGUgZXZlbnRzIHRoYXQgZmlyZSB3aWxsIHN0aWxsIGJlIHByZWZpeGVkLCBzbyB3ZSBuZWVkXG4gIC8vIHRvIGNoZWNrIGlmIHRoZSB1bi1wcmVmaXhlZCBldmVudHMgYXJlIHVzZWFibGUsIGFuZCBpZiBub3QgcmVtb3ZlIHRoZW1cbiAgLy8gZnJvbSB0aGUgbWFwXG4gIGlmICghKCdBbmltYXRpb25FdmVudCcgaW4gd2luZG93KSkge1xuICAgIGRlbGV0ZSBFVkVOVF9OQU1FX01BUC5hbmltYXRpb25lbmQuYW5pbWF0aW9uO1xuICB9XG5cbiAgaWYgKCEoJ1RyYW5zaXRpb25FdmVudCcgaW4gd2luZG93KSkge1xuICAgIGRlbGV0ZSBFVkVOVF9OQU1FX01BUC50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb247XG4gIH1cblxuICBmb3IgKHZhciBiYXNlRXZlbnROYW1lIGluIEVWRU5UX05BTUVfTUFQKSB7XG4gICAgdmFyIGJhc2VFdmVudHMgPSBFVkVOVF9OQU1FX01BUFtiYXNlRXZlbnROYW1lXTtcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gYmFzZUV2ZW50cykge1xuICAgICAgaWYgKHN0eWxlTmFtZSBpbiBzdHlsZSkge1xuICAgICAgICBlbmRFdmVudHMucHVzaChiYXNlRXZlbnRzW3N0eWxlTmFtZV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICBkZXRlY3RFdmVudHMoKTtcbn1cblxuLy8gV2UgdXNlIHRoZSByYXcge2FkZHxyZW1vdmV9RXZlbnRMaXN0ZW5lcigpIGNhbGwgYmVjYXVzZSBFdmVudExpc3RlbmVyXG4vLyBkb2VzIG5vdCBrbm93IGhvdyB0byByZW1vdmUgZXZlbnQgbGlzdGVuZXJzIGFuZCB3ZSByZWFsbHkgc2hvdWxkXG4vLyBjbGVhbiB1cC4gQWxzbywgdGhlc2UgZXZlbnRzIGFyZSBub3QgdHJpZ2dlcmVkIGluIG9sZGVyIGJyb3dzZXJzXG4vLyBzbyB3ZSBzaG91bGQgYmUgQS1PSyBoZXJlLlxuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgZXZlbnRMaXN0ZW5lcikge1xuICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudExpc3RlbmVyLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBldmVudExpc3RlbmVyKSB7XG4gIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGV2ZW50TGlzdGVuZXIsIGZhbHNlKTtcbn1cblxudmFyIFJlYWN0VHJhbnNpdGlvbkV2ZW50cyA9IHtcbiAgYWRkRW5kRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24obm9kZSwgZXZlbnRMaXN0ZW5lcikge1xuICAgIGlmIChlbmRFdmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBJZiBDU1MgdHJhbnNpdGlvbnMgYXJlIG5vdCBzdXBwb3J0ZWQsIHRyaWdnZXIgYW4gXCJlbmQgYW5pbWF0aW9uXCJcbiAgICAgIC8vIGV2ZW50IGltbWVkaWF0ZWx5LlxuICAgICAgd2luZG93LnNldFRpbWVvdXQoZXZlbnRMaXN0ZW5lciwgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVuZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVuZEV2ZW50KSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGVuZEV2ZW50LCBldmVudExpc3RlbmVyKTtcbiAgICB9KTtcbiAgfSxcblxuICByZW1vdmVFbmRFdmVudExpc3RlbmVyOiBmdW5jdGlvbihub2RlLCBldmVudExpc3RlbmVyKSB7XG4gICAgaWYgKGVuZEV2ZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZW5kRXZlbnRzLmZvckVhY2goZnVuY3Rpb24oZW5kRXZlbnQpIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZW5kRXZlbnQsIGV2ZW50TGlzdGVuZXIpO1xuICAgIH0pO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0VHJhbnNpdGlvbkV2ZW50cztcblxufSx7XCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MTY4fV0sMjQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFRyYW5zaXRpb25Hcm91cFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZShcIi4vUmVhY3RcIik7XG52YXIgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nID0gcmVxdWlyZShcIi4vUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBjbG9uZVdpdGhQcm9wcyA9IHJlcXVpcmUoXCIuL2Nsb25lV2l0aFByb3BzXCIpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xuXG52YXIgUmVhY3RUcmFuc2l0aW9uR3JvdXAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RUcmFuc2l0aW9uR3JvdXAnLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGNvbXBvbmVudDogUmVhY3QuUHJvcFR5cGVzLmFueSxcbiAgICBjaGlsZEZhY3Rvcnk6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29tcG9uZW50OiAnc3BhbicsXG4gICAgICBjaGlsZEZhY3Rvcnk6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudFxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcodGhpcy5wcm9wcy5jaGlsZHJlbilcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5cyA9IHt9O1xuICAgIHRoaXMua2V5c1RvRW50ZXIgPSBbXTtcbiAgICB0aGlzLmtleXNUb0xlYXZlID0gW107XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbml0aWFsQ2hpbGRNYXBwaW5nID0gdGhpcy5zdGF0ZS5jaGlsZHJlbjtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5pdGlhbENoaWxkTWFwcGluZykge1xuICAgICAgaWYgKGluaXRpYWxDaGlsZE1hcHBpbmdba2V5XSkge1xuICAgICAgICB0aGlzLnBlcmZvcm1BcHBlYXIoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV4dFByb3BzKSB7XG4gICAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKFxuICAgICAgbmV4dFByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IHRoaXMuc3RhdGUuY2hpbGRyZW47XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNoaWxkcmVuOiBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcubWVyZ2VDaGlsZE1hcHBpbmdzKFxuICAgICAgICBwcmV2Q2hpbGRNYXBwaW5nLFxuICAgICAgICBuZXh0Q2hpbGRNYXBwaW5nXG4gICAgICApXG4gICAgfSk7XG5cbiAgICB2YXIga2V5O1xuXG4gICAgZm9yIChrZXkgaW4gbmV4dENoaWxkTWFwcGluZykge1xuICAgICAgdmFyIGhhc1ByZXYgPSBwcmV2Q2hpbGRNYXBwaW5nICYmIHByZXZDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICAgIGlmIChuZXh0Q2hpbGRNYXBwaW5nW2tleV0gJiYgIWhhc1ByZXYgJiZcbiAgICAgICAgICAhdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldKSB7XG4gICAgICAgIHRoaXMua2V5c1RvRW50ZXIucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoa2V5IGluIHByZXZDaGlsZE1hcHBpbmcpIHtcbiAgICAgIHZhciBoYXNOZXh0ID0gbmV4dENoaWxkTWFwcGluZyAmJiBuZXh0Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICBpZiAocHJldkNoaWxkTWFwcGluZ1trZXldICYmICFoYXNOZXh0ICYmXG4gICAgICAgICAgIXRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSkge1xuICAgICAgICB0aGlzLmtleXNUb0xlYXZlLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSB3YW50IHRvIHNvbWVkYXkgY2hlY2sgZm9yIHJlb3JkZXJpbmcsIHdlIGNvdWxkIGRvIGl0IGhlcmUuXG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2V5c1RvRW50ZXIgPSB0aGlzLmtleXNUb0VudGVyO1xuICAgIHRoaXMua2V5c1RvRW50ZXIgPSBbXTtcbiAgICBrZXlzVG9FbnRlci5mb3JFYWNoKHRoaXMucGVyZm9ybUVudGVyKTtcblxuICAgIHZhciBrZXlzVG9MZWF2ZSA9IHRoaXMua2V5c1RvTGVhdmU7XG4gICAgdGhpcy5rZXlzVG9MZWF2ZSA9IFtdO1xuICAgIGtleXNUb0xlYXZlLmZvckVhY2godGhpcy5wZXJmb3JtTGVhdmUpO1xuICB9LFxuXG4gIHBlcmZvcm1BcHBlYXI6IGZ1bmN0aW9uKGtleSkge1xuICAgIHRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSA9IHRydWU7XG5cbiAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5yZWZzW2tleV07XG5cbiAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudFdpbGxBcHBlYXIpIHtcbiAgICAgIGNvbXBvbmVudC5jb21wb25lbnRXaWxsQXBwZWFyKFxuICAgICAgICB0aGlzLl9oYW5kbGVEb25lQXBwZWFyaW5nLmJpbmQodGhpcywga2V5KVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faGFuZGxlRG9uZUFwcGVhcmluZyhrZXkpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlRG9uZUFwcGVhcmluZzogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGNvbXBvbmVudCA9IHRoaXMucmVmc1trZXldO1xuICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50RGlkQXBwZWFyKSB7XG4gICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkQXBwZWFyKCk7XG4gICAgfVxuXG4gICAgZGVsZXRlIHRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XTtcblxuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZyhcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuXG4gICAgaWYgKCFjdXJyZW50Q2hpbGRNYXBwaW5nIHx8ICFjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIC8vIFRoaXMgd2FzIHJlbW92ZWQgYmVmb3JlIGl0IGhhZCBmdWxseSBhcHBlYXJlZC4gUmVtb3ZlIGl0LlxuICAgICAgdGhpcy5wZXJmb3JtTGVhdmUoa2V5KTtcbiAgICB9XG4gIH0sXG5cbiAgcGVyZm9ybUVudGVyOiBmdW5jdGlvbihrZXkpIHtcbiAgICB0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0gPSB0cnVlO1xuXG4gICAgdmFyIGNvbXBvbmVudCA9IHRoaXMucmVmc1trZXldO1xuXG4gICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsRW50ZXIpIHtcbiAgICAgIGNvbXBvbmVudC5jb21wb25lbnRXaWxsRW50ZXIoXG4gICAgICAgIHRoaXMuX2hhbmRsZURvbmVFbnRlcmluZy5iaW5kKHRoaXMsIGtleSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hhbmRsZURvbmVFbnRlcmluZyhrZXkpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlRG9uZUVudGVyaW5nOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5yZWZzW2tleV07XG4gICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRFbnRlcikge1xuICAgICAgY29tcG9uZW50LmNvbXBvbmVudERpZEVudGVyKCk7XG4gICAgfVxuXG4gICAgZGVsZXRlIHRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XTtcblxuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZyhcbiAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICApO1xuXG4gICAgaWYgKCFjdXJyZW50Q2hpbGRNYXBwaW5nIHx8ICFjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIC8vIFRoaXMgd2FzIHJlbW92ZWQgYmVmb3JlIGl0IGhhZCBmdWxseSBlbnRlcmVkLiBSZW1vdmUgaXQuXG4gICAgICB0aGlzLnBlcmZvcm1MZWF2ZShrZXkpO1xuICAgIH1cbiAgfSxcblxuICBwZXJmb3JtTGVhdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSA9IHRydWU7XG5cbiAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5yZWZzW2tleV07XG4gICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsTGVhdmUpIHtcbiAgICAgIGNvbXBvbmVudC5jb21wb25lbnRXaWxsTGVhdmUodGhpcy5faGFuZGxlRG9uZUxlYXZpbmcuYmluZCh0aGlzLCBrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm90ZSB0aGF0IHRoaXMgaXMgc29tZXdoYXQgZGFuZ2Vyb3VzIGIvYyBpdCBjYWxscyBzZXRTdGF0ZSgpXG4gICAgICAvLyBhZ2FpbiwgZWZmZWN0aXZlbHkgbXV0YXRpbmcgdGhlIGNvbXBvbmVudCBiZWZvcmUgYWxsIHRoZSB3b3JrXG4gICAgICAvLyBpcyBkb25lLlxuICAgICAgdGhpcy5faGFuZGxlRG9uZUxlYXZpbmcoa2V5KTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZURvbmVMZWF2aW5nOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5yZWZzW2tleV07XG5cbiAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZExlYXZlKSB7XG4gICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkTGVhdmUoKTtcbiAgICB9XG5cbiAgICBkZWxldGUgdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldO1xuXG4gICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKFxuICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICk7XG5cbiAgICBpZiAoY3VycmVudENoaWxkTWFwcGluZyAmJiBjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIC8vIFRoaXMgZW50ZXJlZCBhZ2FpbiBiZWZvcmUgaXQgZnVsbHkgbGVmdC4gQWRkIGl0IGFnYWluLlxuICAgICAgdGhpcy5wZXJmb3JtRW50ZXIoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5ld0NoaWxkcmVuID0gYXNzaWduKHt9LCB0aGlzLnN0YXRlLmNoaWxkcmVuKTtcbiAgICAgIGRlbGV0ZSBuZXdDaGlsZHJlbltrZXldO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7Y2hpbGRyZW46IG5ld0NoaWxkcmVufSk7XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgLy8gVE9ETzogd2UgY291bGQgZ2V0IHJpZCBvZiB0aGUgbmVlZCBmb3IgdGhlIHdyYXBwZXIgbm9kZVxuICAgIC8vIGJ5IGNsb25pbmcgYSBzaW5nbGUgY2hpbGRcbiAgICB2YXIgY2hpbGRyZW5Ub1JlbmRlciA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnN0YXRlLmNoaWxkcmVuKSB7XG4gICAgICB2YXIgY2hpbGQgPSB0aGlzLnN0YXRlLmNoaWxkcmVuW2tleV07XG4gICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgLy8gWW91IG1heSBuZWVkIHRvIGFwcGx5IHJlYWN0aXZlIHVwZGF0ZXMgdG8gYSBjaGlsZCBhcyBpdCBpcyBsZWF2aW5nLlxuICAgICAgICAvLyBUaGUgbm9ybWFsIFJlYWN0IHdheSB0byBkbyBpdCB3b24ndCB3b3JrIHNpbmNlIHRoZSBjaGlsZCB3aWxsIGhhdmVcbiAgICAgICAgLy8gYWxyZWFkeSBiZWVuIHJlbW92ZWQuIEluIGNhc2UgeW91IG5lZWQgdGhpcyBiZWhhdmlvciB5b3UgY2FuIHByb3ZpZGVcbiAgICAgICAgLy8gYSBjaGlsZEZhY3RvcnkgZnVuY3Rpb24gdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZVxuICAgICAgICAvLyBsZWF2aW5nLlxuICAgICAgICBjaGlsZHJlblRvUmVuZGVyLnB1c2goY2xvbmVXaXRoUHJvcHMoXG4gICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZEZhY3RvcnkoY2hpbGQpLFxuICAgICAgICAgIHtyZWY6IGtleSwga2V5OiBrZXl9XG4gICAgICAgICkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIHRoaXMucHJvcHMuY29tcG9uZW50LFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICAgIGNoaWxkcmVuVG9SZW5kZXJcbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFRyYW5zaXRpb25Hcm91cDtcblxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL1JlYWN0XCI6MTc3LFwiLi9SZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmdcIjoyNDIsXCIuL2Nsb25lV2l0aFByb3BzXCI6MjY5LFwiLi9lbXB0eUZ1bmN0aW9uXCI6Mjc2fV0sMjQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0VXBkYXRlUXVldWVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdExpZmVDeWNsZSA9IHJlcXVpcmUoXCIuL1JlYWN0TGlmZUN5Y2xlXCIpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZShcIi4vUmVhY3RDdXJyZW50T3duZXJcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlTWFwXCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpIHtcbiAgaWYgKGludGVybmFsSW5zdGFuY2UgIT09IFJlYWN0TGlmZUN5Y2xlLmN1cnJlbnRseU1vdW50aW5nSW5zdGFuY2UpIHtcbiAgICAvLyBJZiB3ZSdyZSBpbiBhIGNvbXBvbmVudFdpbGxNb3VudCBoYW5kbGVyLCBkb24ndCBlbnF1ZXVlIGEgcmVyZW5kZXJcbiAgICAvLyBiZWNhdXNlIFJlYWN0VXBkYXRlcyBhc3N1bWVzIHdlJ3JlIGluIGEgYnJvd3NlciBjb250ZXh0ICh3aGljaCBpc1xuICAgIC8vIHdyb25nIGZvciBzZXJ2ZXIgcmVuZGVyaW5nKSBhbmQgd2UncmUgYWJvdXQgdG8gZG8gYSByZW5kZXIgYW55d2F5LlxuICAgIC8vIFNlZSBidWcgaW4gIzE3NDAuXG4gICAgUmVhY3RVcGRhdGVzLmVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCBjYWxsZXJOYW1lKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLFxuICAgICclcyguLi4pOiBDYW5ub3QgdXBkYXRlIGR1cmluZyBhbiBleGlzdGluZyBzdGF0ZSB0cmFuc2l0aW9uICcgK1xuICAgICcoc3VjaCBhcyB3aXRoaW4gYHJlbmRlcmApLiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgK1xuICAgICdvZiBwcm9wcyBhbmQgc3RhdGUuJyxcbiAgICBjYWxsZXJOYW1lXG4gICkgOiBpbnZhcmlhbnQoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsKSk7XG5cbiAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldChwdWJsaWNJbnN0YW5jZSk7XG4gIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIC8vIE9ubHkgd2FybiB3aGVuIHdlIGhhdmUgYSBjYWxsZXJOYW1lLiBPdGhlcndpc2Ugd2Ugc2hvdWxkIGJlIHNpbGVudC5cbiAgICAgIC8vIFdlJ3JlIHByb2JhYmx5IGNhbGxpbmcgZnJvbSBlbnF1ZXVlQ2FsbGJhY2suIFdlIGRvbid0IHdhbnQgdG8gd2FyblxuICAgICAgLy8gdGhlcmUgYmVjYXVzZSB3ZSBhbHJlYWR5IHdhcm5lZCBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgbGlmZWN5Y2xlIG1ldGhvZC5cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICAhY2FsbGVyTmFtZSxcbiAgICAgICAgJyVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50LiAnICtcbiAgICAgICAgJ1RoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb24gYW4gdW5tb3VudGVkICcgK1xuICAgICAgICAnY29tcG9uZW50LiBUaGlzIGlzIGEgbm8tb3AuJyxcbiAgICAgICAgY2FsbGVyTmFtZSxcbiAgICAgICAgY2FsbGVyTmFtZVxuICAgICAgKSA6IG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChpbnRlcm5hbEluc3RhbmNlID09PSBSZWFjdExpZmVDeWNsZS5jdXJyZW50bHlVbm1vdW50aW5nSW5zdGFuY2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBpbnRlcm5hbEluc3RhbmNlO1xufVxuXG4vKipcbiAqIFJlYWN0VXBkYXRlUXVldWUgYWxsb3dzIGZvciBzdGF0ZSB1cGRhdGVzIHRvIGJlIHNjaGVkdWxlZCBpbnRvIGEgbGF0ZXJcbiAqIHJlY29uY2lsaWF0aW9uIHN0ZXAuXG4gKi9cbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0ge1xuXG4gIC8qKlxuICAgKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGFmdGVyIGFsbCB0aGUgcGVuZGluZyB1cGRhdGVzXG4gICAqIGhhdmUgcHJvY2Vzc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0byB1c2UgYXMgYHRoaXNgIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBjYWxsYmFjaykge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicsXG4gICAgICAnZW5xdWV1ZUNhbGxiYWNrKC4uLik6IFlvdSBjYWxsZWQgYHNldFByb3BzYCwgYHJlcGxhY2VQcm9wc2AsICcgK1xuICAgICAgJ2BzZXRTdGF0ZWAsIGByZXBsYWNlU3RhdGVgLCBvciBgZm9yY2VVcGRhdGVgIHdpdGggYSBjYWxsYmFjayB0aGF0ICcgK1xuICAgICAgJ2lzblxcJ3QgY2FsbGFibGUuJ1xuICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSk7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UpO1xuXG4gICAgLy8gUHJldmlvdXNseSB3ZSB3b3VsZCB0aHJvdyBhbiBlcnJvciBpZiB3ZSBkaWRuJ3QgaGF2ZSBhbiBpbnRlcm5hbFxuICAgIC8vIGluc3RhbmNlLiBTaW5jZSB3ZSB3YW50IHRvIG1ha2UgaXQgYSBuby1vcCBpbnN0ZWFkLCB3ZSBtaXJyb3IgdGhlIHNhbWVcbiAgICAvLyBiZWhhdmlvciB3ZSBoYXZlIGluIG90aGVyIGVucXVldWUqIG1ldGhvZHMuXG4gICAgLy8gV2UgYWxzbyBuZWVkIHRvIGlnbm9yZSBjYWxsYmFja3MgaW4gY29tcG9uZW50V2lsbE1vdW50LiBTZWVcbiAgICAvLyBlbnF1ZXVlVXBkYXRlcy5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UgfHxcbiAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA9PT0gUmVhY3RMaWZlQ3ljbGUuY3VycmVudGx5TW91bnRpbmdJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MpIHtcbiAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MgPSBbY2FsbGJhY2tdO1xuICAgIH1cbiAgICAvLyBUT0RPOiBUaGUgY2FsbGJhY2sgaGVyZSBpcyBpZ25vcmVkIHdoZW4gc2V0U3RhdGUgaXMgY2FsbGVkIGZyb21cbiAgICAvLyBjb21wb25lbnRXaWxsTW91bnQuIEVpdGhlciBmaXggaXQgb3IgZGlzYWxsb3cgZG9pbmcgc28gY29tcGxldGVseSBpblxuICAgIC8vIGZhdm9yIG9mIGdldEluaXRpYWxTdGF0ZS4gQWx0ZXJuYXRpdmVseSwgd2UgY2FuIGRpc2FsbG93XG4gICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGR1cmluZyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICBlbnF1ZXVlQ2FsbGJhY2tJbnRlcm5hbDogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSwgY2FsbGJhY2spIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ2VucXVldWVDYWxsYmFjayguLi4pOiBZb3UgY2FsbGVkIGBzZXRQcm9wc2AsIGByZXBsYWNlUHJvcHNgLCAnICtcbiAgICAgICdgc2V0U3RhdGVgLCBgcmVwbGFjZVN0YXRlYCwgb3IgYGZvcmNlVXBkYXRlYCB3aXRoIGEgY2FsbGJhY2sgdGhhdCAnICtcbiAgICAgICdpc25cXCd0IGNhbGxhYmxlLidcbiAgICApIDogaW52YXJpYW50KHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykpO1xuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICB9XG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICAgKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICAgKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAgICpcbiAgICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZFVwZGF0ZUNvbXBvbmVudGAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICAgKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUoXG4gICAgICBwdWJsaWNJbnN0YW5jZSxcbiAgICAgICdmb3JjZVVwZGF0ZSdcbiAgICApO1xuXG4gICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gdHJ1ZTtcblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgY29tcGxldGVTdGF0ZSkge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKFxuICAgICAgcHVibGljSW5zdGFuY2UsXG4gICAgICAncmVwbGFjZVN0YXRlJ1xuICAgICk7XG5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtjb21wbGV0ZVN0YXRlXTtcbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gdHJ1ZTtcblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUpIHtcbiAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShcbiAgICAgIHB1YmxpY0luc3RhbmNlLFxuICAgICAgJ3NldFN0YXRlJ1xuICAgICk7XG5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcXVldWUgPVxuICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1N0YXRlUXVldWUgfHxcbiAgICAgIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtdKTtcbiAgICBxdWV1ZS5wdXNoKHBhcnRpYWxTdGF0ZSk7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsUHJvcHMgU3Vic2V0IG9mIHRoZSBuZXh0IHByb3BzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRQcm9wczogZnVuY3Rpb24ocHVibGljSW5zdGFuY2UsIHBhcnRpYWxQcm9wcykge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKFxuICAgICAgcHVibGljSW5zdGFuY2UsXG4gICAgICAnc2V0UHJvcHMnXG4gICAgKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9pc1RvcExldmVsLFxuICAgICAgJ3NldFByb3BzKC4uLik6IFlvdSBjYWxsZWQgYHNldFByb3BzYCBvbiBhICcgK1xuICAgICAgJ2NvbXBvbmVudCB3aXRoIGEgcGFyZW50LiBUaGlzIGlzIGFuIGFudGktcGF0dGVybiBzaW5jZSBwcm9wcyB3aWxsICcgK1xuICAgICAgJ2dldCByZWFjdGl2ZWx5IHVwZGF0ZWQgd2hlbiByZW5kZXJlZC4gSW5zdGVhZCwgY2hhbmdlIHRoZSBvd25lclxcJ3MgJyArXG4gICAgICAnYHJlbmRlcmAgbWV0aG9kIHRvIHBhc3MgdGhlIGNvcnJlY3QgdmFsdWUgYXMgcHJvcHMgdG8gdGhlIGNvbXBvbmVudCAnICtcbiAgICAgICd3aGVyZSBpdCBpcyBjcmVhdGVkLidcbiAgICApIDogaW52YXJpYW50KGludGVybmFsSW5zdGFuY2UuX2lzVG9wTGV2ZWwpKTtcblxuICAgIC8vIE1lcmdlIHdpdGggdGhlIHBlbmRpbmcgZWxlbWVudCBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSB3aXRoIGV4aXN0aW5nXG4gICAgLy8gZWxlbWVudCBwcm9wcy5cbiAgICB2YXIgZWxlbWVudCA9IGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50IHx8XG4gICAgICAgICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudDtcbiAgICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMsIHBhcnRpYWxQcm9wcyk7XG4gICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMoXG4gICAgICBlbGVtZW50LFxuICAgICAgcHJvcHNcbiAgICApO1xuXG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIG9mIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBOZXcgcHJvcHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VQcm9wczogZnVuY3Rpb24ocHVibGljSW5zdGFuY2UsIHByb3BzKSB7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUoXG4gICAgICBwdWJsaWNJbnN0YW5jZSxcbiAgICAgICdyZXBsYWNlUHJvcHMnXG4gICAgKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9pc1RvcExldmVsLFxuICAgICAgJ3JlcGxhY2VQcm9wcyguLi4pOiBZb3UgY2FsbGVkIGByZXBsYWNlUHJvcHNgIG9uIGEgJyArXG4gICAgICAnY29tcG9uZW50IHdpdGggYSBwYXJlbnQuIFRoaXMgaXMgYW4gYW50aS1wYXR0ZXJuIHNpbmNlIHByb3BzIHdpbGwgJyArXG4gICAgICAnZ2V0IHJlYWN0aXZlbHkgdXBkYXRlZCB3aGVuIHJlbmRlcmVkLiBJbnN0ZWFkLCBjaGFuZ2UgdGhlIG93bmVyXFwncyAnICtcbiAgICAgICdgcmVuZGVyYCBtZXRob2QgdG8gcGFzcyB0aGUgY29ycmVjdCB2YWx1ZSBhcyBwcm9wcyB0byB0aGUgY29tcG9uZW50ICcgK1xuICAgICAgJ3doZXJlIGl0IGlzIGNyZWF0ZWQuJ1xuICAgICkgOiBpbnZhcmlhbnQoaW50ZXJuYWxJbnN0YW5jZS5faXNUb3BMZXZlbCkpO1xuXG4gICAgLy8gTWVyZ2Ugd2l0aCB0aGUgcGVuZGluZyBlbGVtZW50IGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHdpdGggZXhpc3RpbmdcbiAgICAvLyBlbGVtZW50IHByb3BzLlxuICAgIHZhciBlbGVtZW50ID0gaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0VsZW1lbnQgfHxcbiAgICAgICAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50O1xuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzKFxuICAgICAgZWxlbWVudCxcbiAgICAgIHByb3BzXG4gICAgKTtcblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgZW5xdWV1ZUVsZW1lbnRJbnRlcm5hbDogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSwgbmV3RWxlbWVudCkge1xuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50ID0gbmV3RWxlbWVudDtcbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RVcGRhdGVRdWV1ZTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOjE3NSxcIi4vUmVhY3RDdXJyZW50T3duZXJcIjoxOTEsXCIuL1JlYWN0RWxlbWVudFwiOjIwOSxcIi4vUmVhY3RJbnN0YW5jZU1hcFwiOjIxOSxcIi4vUmVhY3RMaWZlQ3ljbGVcIjoyMjAsXCIuL1JlYWN0VXBkYXRlc1wiOjI0NixcIi4vaW52YXJpYW50XCI6Mjk3LFwiLi93YXJuaW5nXCI6MzE4LFwiX3Byb2Nlc3NcIjoxfV0sMjQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RVcGRhdGVzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FsbGJhY2tRdWV1ZSA9IHJlcXVpcmUoXCIuL0NhbGxiYWNrUXVldWVcIik7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKFwiLi9SZWFjdFJlY29uY2lsZXJcIik7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKFwiLi9UcmFuc2FjdGlvblwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgZGlydHlDb21wb25lbnRzID0gW107XG52YXIgYXNhcENhbGxiYWNrUXVldWUgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpO1xudmFyIGFzYXBFbnF1ZXVlZCA9IGZhbHNlO1xuXG52YXIgYmF0Y2hpbmdTdHJhdGVneSA9IG51bGw7XG5cbmZ1bmN0aW9uIGVuc3VyZUluamVjdGVkKCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uICYmIGJhdGNoaW5nU3RyYXRlZ3ksXG4gICAgJ1JlYWN0VXBkYXRlczogbXVzdCBpbmplY3QgYSByZWNvbmNpbGUgdHJhbnNhY3Rpb24gY2xhc3MgYW5kIGJhdGNoaW5nICcgK1xuICAgICdzdHJhdGVneSdcbiAgKSA6IGludmFyaWFudChSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiAmJiBiYXRjaGluZ1N0cmF0ZWd5KSk7XG59XG5cbnZhciBORVNURURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoICE9PSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBBZGRpdGlvbmFsIHVwZGF0ZXMgd2VyZSBlbnF1ZXVlZCBieSBjb21wb25lbnREaWRVcGRhdGUgaGFuZGxlcnMgb3JcbiAgICAgIC8vIHNpbWlsYXI7IGJlZm9yZSBvdXIgb3duIFVQREFURV9RVUVVRUlORyB3cmFwcGVyIGNsb3Nlcywgd2Ugd2FudCB0byBydW5cbiAgICAgIC8vIHRoZXNlIG5ldyB1cGRhdGVzIHNvIHRoYXQgaWYgQSdzIGNvbXBvbmVudERpZFVwZGF0ZSBjYWxscyBzZXRTdGF0ZSBvblxuICAgICAgLy8gQiwgQiB3aWxsIHVwZGF0ZSBiZWZvcmUgdGhlIGNhbGxiYWNrIEEncyB1cGRhdGVyIHByb3ZpZGVkIHdoZW4gY2FsbGluZ1xuICAgICAgLy8gc2V0U3RhdGUuXG4gICAgICBkaXJ0eUNvbXBvbmVudHMuc3BsaWNlKDAsIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoKTtcbiAgICAgIGZsdXNoQmF0Y2hlZFVwZGF0ZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlydHlDb21wb25lbnRzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9XG59O1xuXG52YXIgVVBEQVRFX1FVRVVFSU5HID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNhbGxiYWNrUXVldWUucmVzZXQoKTtcbiAgfSxcbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5ub3RpZnlBbGwoKTtcbiAgfVxufTtcblxudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW05FU1RFRF9VUERBVEVTLCBVUERBVEVfUVVFVUVJTkddO1xuXG5mdW5jdGlvbiBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgdGhpcy5jYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbiAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiA9XG4gICAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCk7XG59XG5cbmFzc2lnbihcbiAgUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5wcm90b3R5cGUsXG4gIFRyYW5zYWN0aW9uLk1peGluLCB7XG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCA9IG51bGw7XG4gICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHRoaXMuY2FsbGJhY2tRdWV1ZSk7XG4gICAgdGhpcy5jYWxsYmFja1F1ZXVlID0gbnVsbDtcbiAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5yZWxlYXNlKHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24pO1xuICAgIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24gPSBudWxsO1xuICB9LFxuXG4gIHBlcmZvcm06IGZ1bmN0aW9uKG1ldGhvZCwgc2NvcGUsIGEpIHtcbiAgICAvLyBFc3NlbnRpYWxseSBjYWxscyBgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbi5wZXJmb3JtKG1ldGhvZCwgc2NvcGUsIGEpYFxuICAgIC8vIHdpdGggdGhpcyB0cmFuc2FjdGlvbidzIHdyYXBwZXJzIGFyb3VuZCBpdC5cbiAgICByZXR1cm4gVHJhbnNhY3Rpb24uTWl4aW4ucGVyZm9ybS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24ucGVyZm9ybSxcbiAgICAgIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24sXG4gICAgICBtZXRob2QsXG4gICAgICBzY29wZSxcbiAgICAgIGFcbiAgICApO1xuICB9XG59KTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24pO1xuXG5mdW5jdGlvbiBiYXRjaGVkVXBkYXRlcyhjYWxsYmFjaywgYSwgYiwgYywgZCkge1xuICBlbnN1cmVJbmplY3RlZCgpO1xuICBiYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzKGNhbGxiYWNrLCBhLCBiLCBjLCBkKTtcbn1cblxuLyoqXG4gKiBBcnJheSBjb21wYXJhdG9yIGZvciBSZWFjdENvbXBvbmVudHMgYnkgbW91bnQgb3JkZXJpbmcuXG4gKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gYzEgZmlyc3QgY29tcG9uZW50IHlvdSdyZSBjb21wYXJpbmdcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGMyIHNlY29uZCBjb21wb25lbnQgeW91J3JlIGNvbXBhcmluZ1xuICogQHJldHVybiB7bnVtYmVyfSBSZXR1cm4gdmFsdWUgdXNhYmxlIGJ5IEFycmF5LnByb3RvdHlwZS5zb3J0KCkuXG4gKi9cbmZ1bmN0aW9uIG1vdW50T3JkZXJDb21wYXJhdG9yKGMxLCBjMikge1xuICByZXR1cm4gYzEuX21vdW50T3JkZXIgLSBjMi5fbW91bnRPcmRlcjtcbn1cblxuZnVuY3Rpb24gcnVuQmF0Y2hlZFVwZGF0ZXModHJhbnNhY3Rpb24pIHtcbiAgdmFyIGxlbiA9IHRyYW5zYWN0aW9uLmRpcnR5Q29tcG9uZW50c0xlbmd0aDtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBsZW4gPT09IGRpcnR5Q29tcG9uZW50cy5sZW5ndGgsXG4gICAgJ0V4cGVjdGVkIGZsdXNoIHRyYW5zYWN0aW9uXFwncyBzdG9yZWQgZGlydHktY29tcG9uZW50cyBsZW5ndGggKCVzKSB0byAnICtcbiAgICAnbWF0Y2ggZGlydHktY29tcG9uZW50cyBhcnJheSBsZW5ndGggKCVzKS4nLFxuICAgIGxlbixcbiAgICBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoXG4gICkgOiBpbnZhcmlhbnQobGVuID09PSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSk7XG5cbiAgLy8gU2luY2UgcmVjb25jaWxpbmcgYSBjb21wb25lbnQgaGlnaGVyIGluIHRoZSBvd25lciBoaWVyYXJjaHkgdXN1YWxseSAobm90XG4gIC8vIGFsd2F5cyAtLSBzZWUgc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkpIHdpbGwgcmVjb25jaWxlIGNoaWxkcmVuLCByZWNvbmNpbGVcbiAgLy8gdGhlbSBiZWZvcmUgdGhlaXIgY2hpbGRyZW4gYnkgc29ydGluZyB0aGUgYXJyYXkuXG4gIGRpcnR5Q29tcG9uZW50cy5zb3J0KG1vdW50T3JkZXJDb21wYXJhdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgLy8gSWYgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGJlZm9yZSBwZW5kaW5nIGNoYW5nZXMgYXBwbHksIGl0IHdpbGwgc3RpbGxcbiAgICAvLyBiZSBoZXJlLCBidXQgd2UgYXNzdW1lIHRoYXQgaXQgaGFzIGNsZWFyZWQgaXRzIF9wZW5kaW5nQ2FsbGJhY2tzIGFuZFxuICAgIC8vIHRoYXQgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5IGlzIGEgbm9vcC5cbiAgICB2YXIgY29tcG9uZW50ID0gZGlydHlDb21wb25lbnRzW2ldO1xuXG4gICAgLy8gSWYgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5IGhhcHBlbnMgdG8gZW5xdWV1ZSBhbnkgbmV3IHVwZGF0ZXMsIHdlXG4gICAgLy8gc2hvdWxkbid0IGV4ZWN1dGUgdGhlIGNhbGxiYWNrcyB1bnRpbCB0aGUgbmV4dCByZW5kZXIgaGFwcGVucywgc29cbiAgICAvLyBzdGFzaCB0aGUgY2FsbGJhY2tzIGZpcnN0XG4gICAgdmFyIGNhbGxiYWNrcyA9IGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcztcbiAgICBjb21wb25lbnQuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuXG4gICAgUmVhY3RSZWNvbmNpbGVyLnBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeShcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIHRyYW5zYWN0aW9uLnJlY29uY2lsZVRyYW5zYWN0aW9uXG4gICAgKTtcblxuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2FsbGJhY2tzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLmNhbGxiYWNrUXVldWUuZW5xdWV1ZShcbiAgICAgICAgICBjYWxsYmFja3Nbal0sXG4gICAgICAgICAgY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGZsdXNoQmF0Y2hlZFVwZGF0ZXMgPSBmdW5jdGlvbigpIHtcbiAgLy8gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbidzIHdyYXBwZXJzIHdpbGwgY2xlYXIgdGhlIGRpcnR5Q29tcG9uZW50c1xuICAvLyBhcnJheSBhbmQgcGVyZm9ybSBhbnkgdXBkYXRlcyBlbnF1ZXVlZCBieSBtb3VudC1yZWFkeSBoYW5kbGVycyAoaS5lLixcbiAgLy8gY29tcG9uZW50RGlkVXBkYXRlKSBidXQgd2UgbmVlZCB0byBjaGVjayBoZXJlIHRvbyBpbiBvcmRlciB0byBjYXRjaFxuICAvLyB1cGRhdGVzIGVucXVldWVkIGJ5IHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgYXNhcCBjYWxscy5cbiAgd2hpbGUgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGggfHwgYXNhcEVucXVldWVkKSB7XG4gICAgaWYgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0cmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCk7XG4gICAgICB0cmFuc2FjdGlvbi5wZXJmb3JtKHJ1bkJhdGNoZWRVcGRhdGVzLCBudWxsLCB0cmFuc2FjdGlvbik7XG4gICAgICBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICAgIH1cblxuICAgIGlmIChhc2FwRW5xdWV1ZWQpIHtcbiAgICAgIGFzYXBFbnF1ZXVlZCA9IGZhbHNlO1xuICAgICAgdmFyIHF1ZXVlID0gYXNhcENhbGxiYWNrUXVldWU7XG4gICAgICBhc2FwQ2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG4gICAgICBxdWV1ZS5ub3RpZnlBbGwoKTtcbiAgICAgIENhbGxiYWNrUXVldWUucmVsZWFzZShxdWV1ZSk7XG4gICAgfVxuICB9XG59O1xuZmx1c2hCYXRjaGVkVXBkYXRlcyA9IFJlYWN0UGVyZi5tZWFzdXJlKFxuICAnUmVhY3RVcGRhdGVzJyxcbiAgJ2ZsdXNoQmF0Y2hlZFVwZGF0ZXMnLFxuICBmbHVzaEJhdGNoZWRVcGRhdGVzXG4pO1xuXG4vKipcbiAqIE1hcmsgYSBjb21wb25lbnQgYXMgbmVlZGluZyBhIHJlcmVuZGVyLCBhZGRpbmcgYW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gYVxuICogbGlzdCBvZiBmdW5jdGlvbnMgd2hpY2ggd2lsbCBiZSBleGVjdXRlZCBvbmNlIHRoZSByZXJlbmRlciBvY2N1cnMuXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoY29tcG9uZW50KSB7XG4gIGVuc3VyZUluamVjdGVkKCk7XG5cbiAgLy8gVmFyaW91cyBwYXJ0cyBvZiBvdXIgY29kZSAoc3VjaCBhcyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdzXG4gIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuIChUaGlzIGlzIGNhbGxlZCBieSBlYWNoIHRvcC1sZXZlbCB1cGRhdGVcbiAgLy8gZnVuY3Rpb24sIGxpa2Ugc2V0UHJvcHMsIHNldFN0YXRlLCBmb3JjZVVwZGF0ZSwgZXRjLjsgY3JlYXRpb24gYW5kXG4gIC8vIGRlc3RydWN0aW9uIG9mIHRvcC1sZXZlbCBjb21wb25lbnRzIGlzIGd1YXJkZWQgaW4gUmVhY3RNb3VudC4pXG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCxcbiAgICAnZW5xdWV1ZVVwZGF0ZSgpOiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzICcgK1xuICAgICdhbmQgc3RhdGU7IHRyaWdnZXJpbmcgbmVzdGVkIGNvbXBvbmVudCB1cGRhdGVzIGZyb20gcmVuZGVyIGlzIG5vdCAnICtcbiAgICAnYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgK1xuICAgICdjb21wb25lbnREaWRVcGRhdGUuJ1xuICApIDogbnVsbCk7XG5cbiAgaWYgKCFiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyhlbnF1ZXVlVXBkYXRlLCBjb21wb25lbnQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRpcnR5Q29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG59XG5cbi8qKlxuICogRW5xdWV1ZSBhIGNhbGxiYWNrIHRvIGJlIHJ1biBhdCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGJhdGNoaW5nIGN5Y2xlLiBUaHJvd3NcbiAqIGlmIG5vIHVwZGF0ZXMgYXJlIGN1cnJlbnRseSBiZWluZyBwZXJmb3JtZWQuXG4gKi9cbmZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzLFxuICAgICdSZWFjdFVwZGF0ZXMuYXNhcDogQ2FuXFwndCBlbnF1ZXVlIGFuIGFzYXAgY2FsbGJhY2sgaW4gYSBjb250ZXh0IHdoZXJlJyArXG4gICAgJ3VwZGF0ZXMgYXJlIG5vdCBiZWluZyBiYXRjaGVkLidcbiAgKSA6IGludmFyaWFudChiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzKSk7XG4gIGFzYXBDYWxsYmFja1F1ZXVlLmVucXVldWUoY2FsbGJhY2ssIGNvbnRleHQpO1xuICBhc2FwRW5xdWV1ZWQgPSB0cnVlO1xufVxuXG52YXIgUmVhY3RVcGRhdGVzSW5qZWN0aW9uID0ge1xuICBpbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjogZnVuY3Rpb24oUmVjb25jaWxlVHJhbnNhY3Rpb24pIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgUmVjb25jaWxlVHJhbnNhY3Rpb24sXG4gICAgICAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYSByZWNvbmNpbGUgdHJhbnNhY3Rpb24gY2xhc3MnXG4gICAgKSA6IGludmFyaWFudChSZWNvbmNpbGVUcmFuc2FjdGlvbikpO1xuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uID0gUmVjb25jaWxlVHJhbnNhY3Rpb247XG4gIH0sXG5cbiAgaW5qZWN0QmF0Y2hpbmdTdHJhdGVneTogZnVuY3Rpb24oX2JhdGNoaW5nU3RyYXRlZ3kpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgX2JhdGNoaW5nU3RyYXRlZ3ksXG4gICAgICAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYSBiYXRjaGluZyBzdHJhdGVneSdcbiAgICApIDogaW52YXJpYW50KF9iYXRjaGluZ1N0cmF0ZWd5KSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoZWRVcGRhdGVzKCkgZnVuY3Rpb24nXG4gICAgKSA6IGludmFyaWFudCh0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMgPT09ICdmdW5jdGlvbicpKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgdHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID09PSAnYm9vbGVhbicsXG4gICAgICAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYW4gaXNCYXRjaGluZ1VwZGF0ZXMgYm9vbGVhbiBhdHRyaWJ1dGUnXG4gICAgKSA6IGludmFyaWFudCh0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPT09ICdib29sZWFuJykpO1xuICAgIGJhdGNoaW5nU3RyYXRlZ3kgPSBfYmF0Y2hpbmdTdHJhdGVneTtcbiAgfVxufTtcblxudmFyIFJlYWN0VXBkYXRlcyA9IHtcbiAgLyoqXG4gICAqIFJlYWN0IHJlZmVyZW5jZXMgYFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25gIHVzaW5nIHRoaXMgcHJvcGVydHkgaW4gb3JkZXJcbiAgICogdG8gYWxsb3cgZGVwZW5kZW5jeSBpbmplY3Rpb24uXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjogbnVsbCxcblxuICBiYXRjaGVkVXBkYXRlczogYmF0Y2hlZFVwZGF0ZXMsXG4gIGVucXVldWVVcGRhdGU6IGVucXVldWVVcGRhdGUsXG4gIGZsdXNoQmF0Y2hlZFVwZGF0ZXM6IGZsdXNoQmF0Y2hlZFVwZGF0ZXMsXG4gIGluamVjdGlvbjogUmVhY3RVcGRhdGVzSW5qZWN0aW9uLFxuICBhc2FwOiBhc2FwXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0VXBkYXRlcztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQ2FsbGJhY2tRdWV1ZVwiOjE1MyxcIi4vT2JqZWN0LmFzc2lnblwiOjE3NSxcIi4vUG9vbGVkQ2xhc3NcIjoxNzYsXCIuL1JlYWN0Q3VycmVudE93bmVyXCI6MTkxLFwiLi9SZWFjdFBlcmZcIjoyMjgsXCIuL1JlYWN0UmVjb25jaWxlclwiOjIzNSxcIi4vVHJhbnNhY3Rpb25cIjoyNjMsXCIuL2ludmFyaWFudFwiOjI5NyxcIi4vd2FybmluZ1wiOjMxOCxcIl9wcm9jZXNzXCI6MX1dLDI0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0V2l0aEFkZG9uc1xuICovXG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZXhpc3RzIHB1cmVseSBpbiB0aGUgb3BlbiBzb3VyY2UgcHJvamVjdCwgYW5kIGlzIG1lYW50IGFzIGEgd2F5XG4gKiB0byBjcmVhdGUgYSBzZXBhcmF0ZSBzdGFuZGFsb25lIGJ1aWxkIG9mIFJlYWN0LiBUaGlzIGJ1aWxkIGhhcyBcImFkZG9uc1wiLCBvclxuICogZnVuY3Rpb25hbGl0eSB3ZSd2ZSBidWlsdCBhbmQgdGhpbmsgbWlnaHQgYmUgdXNlZnVsIGJ1dCBkb2Vzbid0IGhhdmUgYSBnb29kXG4gKiBwbGFjZSB0byBsaXZlIGluc2lkZSBSZWFjdCBjb3JlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIExpbmtlZFN0YXRlTWl4aW4gPSByZXF1aXJlKFwiLi9MaW5rZWRTdGF0ZU1peGluXCIpO1xudmFyIFJlYWN0ID0gcmVxdWlyZShcIi4vUmVhY3RcIik7XG52YXIgUmVhY3RDb21wb25lbnRXaXRoUHVyZVJlbmRlck1peGluID1cbiAgcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRXaXRoUHVyZVJlbmRlck1peGluXCIpO1xudmFyIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwID0gcmVxdWlyZShcIi4vUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBcIik7XG52YXIgUmVhY3RGcmFnbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RnJhZ21lbnRcIik7XG52YXIgUmVhY3RUcmFuc2l0aW9uR3JvdXAgPSByZXF1aXJlKFwiLi9SZWFjdFRyYW5zaXRpb25Hcm91cFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBjeCA9IHJlcXVpcmUoXCIuL2N4XCIpO1xudmFyIGNsb25lV2l0aFByb3BzID0gcmVxdWlyZShcIi4vY2xvbmVXaXRoUHJvcHNcIik7XG52YXIgdXBkYXRlID0gcmVxdWlyZShcIi4vdXBkYXRlXCIpO1xuXG5SZWFjdC5hZGRvbnMgPSB7XG4gIENTU1RyYW5zaXRpb25Hcm91cDogUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXAsXG4gIExpbmtlZFN0YXRlTWl4aW46IExpbmtlZFN0YXRlTWl4aW4sXG4gIFB1cmVSZW5kZXJNaXhpbjogUmVhY3RDb21wb25lbnRXaXRoUHVyZVJlbmRlck1peGluLFxuICBUcmFuc2l0aW9uR3JvdXA6IFJlYWN0VHJhbnNpdGlvbkdyb3VwLFxuXG4gIGJhdGNoZWRVcGRhdGVzOiBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMsXG4gIGNsYXNzU2V0OiBjeCxcbiAgY2xvbmVXaXRoUHJvcHM6IGNsb25lV2l0aFByb3BzLFxuICBjcmVhdGVGcmFnbWVudDogUmVhY3RGcmFnbWVudC5jcmVhdGUsXG4gIHVwZGF0ZTogdXBkYXRlXG59O1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIFJlYWN0LmFkZG9ucy5QZXJmID0gcmVxdWlyZShcIi4vUmVhY3REZWZhdWx0UGVyZlwiKTtcbiAgUmVhY3QuYWRkb25zLlRlc3RVdGlscyA9IHJlcXVpcmUoXCIuL1JlYWN0VGVzdFV0aWxzXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9MaW5rZWRTdGF0ZU1peGluXCI6MTcxLFwiLi9SZWFjdFwiOjE3NyxcIi4vUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBcIjoxODAsXCIuL1JlYWN0Q29tcG9uZW50V2l0aFB1cmVSZW5kZXJNaXhpblwiOjE4OCxcIi4vUmVhY3REZWZhdWx0UGVyZlwiOjIwNyxcIi4vUmVhY3RGcmFnbWVudFwiOjIxNSxcIi4vUmVhY3RUZXN0VXRpbHNcIjoyNDEsXCIuL1JlYWN0VHJhbnNpdGlvbkdyb3VwXCI6MjQ0LFwiLi9SZWFjdFVwZGF0ZXNcIjoyNDYsXCIuL2Nsb25lV2l0aFByb3BzXCI6MjY5LFwiLi9jeFwiOjI3NCxcIi4vdXBkYXRlXCI6MzE3LFwiX3Byb2Nlc3NcIjoxfV0sMjQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTVkdET01Qcm9wZXJ0eUNvbmZpZ1xuICovXG5cbi8qanNsaW50IGJpdHdpc2U6IHRydWUqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xuXG52YXIgTVVTVF9VU0VfQVRUUklCVVRFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX0FUVFJJQlVURTtcblxudmFyIFNWR0RPTVByb3BlcnR5Q29uZmlnID0ge1xuICBQcm9wZXJ0aWVzOiB7XG4gICAgY2xpcFBhdGg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBjeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGN5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGR4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmaWxsOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZmlsbE9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb250RmFtaWx5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9udFNpemU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZ5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZ3JhZGllbnRUcmFuc2Zvcm06IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBncmFkaWVudFVuaXRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWFya2VyRW5kOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWFya2VyTWlkOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWFya2VyU3RhcnQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBvZmZzZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBvcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcGF0dGVybkNvbnRlbnRVbml0czogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHBhdHRlcm5Vbml0czogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHBvaW50czogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHByZXNlcnZlQXNwZWN0UmF0aW86IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcng6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHNwcmVhZE1ldGhvZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0b3BDb2xvcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0b3BPcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlRGFzaGFycmF5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlTGluZWNhcDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZU9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2VXaWR0aDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHRleHRBbmNob3I6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB0cmFuc2Zvcm06IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB2ZXJzaW9uOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdmlld0JveDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHgxOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeDI6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeTE6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB5MjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHk6IE1VU1RfVVNFX0FUVFJJQlVURVxuICB9LFxuICBET01BdHRyaWJ1dGVOYW1lczoge1xuICAgIGNsaXBQYXRoOiAnY2xpcC1wYXRoJyxcbiAgICBmaWxsT3BhY2l0eTogJ2ZpbGwtb3BhY2l0eScsXG4gICAgZm9udEZhbWlseTogJ2ZvbnQtZmFtaWx5JyxcbiAgICBmb250U2l6ZTogJ2ZvbnQtc2l6ZScsXG4gICAgZ3JhZGllbnRUcmFuc2Zvcm06ICdncmFkaWVudFRyYW5zZm9ybScsXG4gICAgZ3JhZGllbnRVbml0czogJ2dyYWRpZW50VW5pdHMnLFxuICAgIG1hcmtlckVuZDogJ21hcmtlci1lbmQnLFxuICAgIG1hcmtlck1pZDogJ21hcmtlci1taWQnLFxuICAgIG1hcmtlclN0YXJ0OiAnbWFya2VyLXN0YXJ0JyxcbiAgICBwYXR0ZXJuQ29udGVudFVuaXRzOiAncGF0dGVybkNvbnRlbnRVbml0cycsXG4gICAgcGF0dGVyblVuaXRzOiAncGF0dGVyblVuaXRzJyxcbiAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiAncHJlc2VydmVBc3BlY3RSYXRpbycsXG4gICAgc3ByZWFkTWV0aG9kOiAnc3ByZWFkTWV0aG9kJyxcbiAgICBzdG9wQ29sb3I6ICdzdG9wLWNvbG9yJyxcbiAgICBzdG9wT3BhY2l0eTogJ3N0b3Atb3BhY2l0eScsXG4gICAgc3Ryb2tlRGFzaGFycmF5OiAnc3Ryb2tlLWRhc2hhcnJheScsXG4gICAgc3Ryb2tlTGluZWNhcDogJ3N0cm9rZS1saW5lY2FwJyxcbiAgICBzdHJva2VPcGFjaXR5OiAnc3Ryb2tlLW9wYWNpdHknLFxuICAgIHN0cm9rZVdpZHRoOiAnc3Ryb2tlLXdpZHRoJyxcbiAgICB0ZXh0QW5jaG9yOiAndGV4dC1hbmNob3InLFxuICAgIHZpZXdCb3g6ICd2aWV3Qm94J1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNWR0RPTVByb3BlcnR5Q29uZmlnO1xuXG59LHtcIi4vRE9NUHJvcGVydHlcIjoxNTd9XSwyNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNlbGVjdEV2ZW50UGx1Z2luXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0gcmVxdWlyZShcIi4vUmVhY3RJbnB1dFNlbGVjdGlvblwiKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xuXG52YXIgZ2V0QWN0aXZlRWxlbWVudCA9IHJlcXVpcmUoXCIuL2dldEFjdGl2ZUVsZW1lbnRcIik7XG52YXIgaXNUZXh0SW5wdXRFbGVtZW50ID0gcmVxdWlyZShcIi4vaXNUZXh0SW5wdXRFbGVtZW50XCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG52YXIgc2hhbGxvd0VxdWFsID0gcmVxdWlyZShcIi4vc2hhbGxvd0VxdWFsXCIpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBzZWxlY3Q6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uU2VsZWN0OiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uU2VsZWN0Q2FwdHVyZTogbnVsbH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQ29udGV4dE1lbnUsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd24sXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXAsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZVxuICAgIF1cbiAgfVxufTtcblxudmFyIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG52YXIgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG52YXIgbW91c2VEb3duID0gZmFsc2U7XG5cbi8qKlxuICogR2V0IGFuIG9iamVjdCB3aGljaCBpcyBhIHVuaXF1ZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgY3VycmVudCBzZWxlY3Rpb24uXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZSB3aWxsIG5vdCBiZSBjb25zaXN0ZW50IGFjcm9zcyBub2RlcyBvciBicm93c2VycywgYnV0XG4gKiB0d28gaWRlbnRpY2FsIHNlbGVjdGlvbnMgb24gdGhlIHNhbWUgbm9kZSB3aWxsIHJldHVybiBpZGVudGljYWwgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb24obm9kZSkge1xuICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBub2RlICYmXG4gICAgICBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhub2RlKSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogbm9kZS5zZWxlY3Rpb25TdGFydCxcbiAgICAgIGVuZDogbm9kZS5zZWxlY3Rpb25FbmRcbiAgICB9O1xuICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIHJldHVybiB7XG4gICAgICBhbmNob3JOb2RlOiBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIGFuY2hvck9mZnNldDogc2VsZWN0aW9uLmFuY2hvck9mZnNldCxcbiAgICAgIGZvY3VzTm9kZTogc2VsZWN0aW9uLmZvY3VzTm9kZSxcbiAgICAgIGZvY3VzT2Zmc2V0OiBzZWxlY3Rpb24uZm9jdXNPZmZzZXRcbiAgICB9O1xuICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xuICAgIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgIHJldHVybiB7XG4gICAgICBwYXJlbnRFbGVtZW50OiByYW5nZS5wYXJlbnRFbGVtZW50KCksXG4gICAgICB0ZXh0OiByYW5nZS50ZXh0LFxuICAgICAgdG9wOiByYW5nZS5ib3VuZGluZ1RvcCxcbiAgICAgIGxlZnQ6IHJhbmdlLmJvdW5kaW5nTGVmdFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBQb2xsIHNlbGVjdGlvbiB0byBzZWUgd2hldGhlciBpdCdzIGNoYW5nZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/U3ludGhldGljRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIC8vIEVuc3VyZSB3ZSBoYXZlIHRoZSByaWdodCBlbGVtZW50LCBhbmQgdGhhdCB0aGUgdXNlciBpcyBub3QgZHJhZ2dpbmcgYVxuICAvLyBzZWxlY3Rpb24gKHRoaXMgbWF0Y2hlcyBuYXRpdmUgYHNlbGVjdGAgZXZlbnQgYmVoYXZpb3IpLiBJbiBIVE1MNSwgc2VsZWN0XG4gIC8vIGZpcmVzIG9ubHkgb24gaW5wdXQgYW5kIHRleHRhcmVhIHRodXMgaWYgdGhlcmUncyBubyBmb2N1c2VkIGVsZW1lbnQgd2VcbiAgLy8gd29uJ3QgZGlzcGF0Y2guXG4gIGlmIChtb3VzZURvd24gfHxcbiAgICAgIGFjdGl2ZUVsZW1lbnQgPT0gbnVsbCB8fFxuICAgICAgYWN0aXZlRWxlbWVudCAhPT0gZ2V0QWN0aXZlRWxlbWVudCgpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBPbmx5IGZpcmUgd2hlbiBzZWxlY3Rpb24gaGFzIGFjdHVhbGx5IGNoYW5nZWQuXG4gIHZhciBjdXJyZW50U2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uKGFjdGl2ZUVsZW1lbnQpO1xuICBpZiAoIWxhc3RTZWxlY3Rpb24gfHwgIXNoYWxsb3dFcXVhbChsYXN0U2VsZWN0aW9uLCBjdXJyZW50U2VsZWN0aW9uKSkge1xuICAgIGxhc3RTZWxlY3Rpb24gPSBjdXJyZW50U2VsZWN0aW9uO1xuXG4gICAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgZXZlbnRUeXBlcy5zZWxlY3QsXG4gICAgICBhY3RpdmVFbGVtZW50SUQsXG4gICAgICBuYXRpdmVFdmVudFxuICAgICk7XG5cbiAgICBzeW50aGV0aWNFdmVudC50eXBlID0gJ3NlbGVjdCc7XG4gICAgc3ludGhldGljRXZlbnQudGFyZ2V0ID0gYWN0aXZlRWxlbWVudDtcblxuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhzeW50aGV0aWNFdmVudCk7XG5cbiAgICByZXR1cm4gc3ludGhldGljRXZlbnQ7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIHBsdWdpbiBjcmVhdGVzIGFuIGBvblNlbGVjdGAgZXZlbnQgdGhhdCBub3JtYWxpemVzIHNlbGVjdCBldmVudHNcbiAqIGFjcm9zcyBmb3JtIGVsZW1lbnRzLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIGNvbnRlbnRFZGl0YWJsZVxuICpcbiAqIFRoaXMgZGlmZmVycyBmcm9tIG5hdGl2ZSBicm93c2VyIGltcGxlbWVudGF0aW9ucyBpbiB0aGUgZm9sbG93aW5nIHdheXM6XG4gKiAtIEZpcmVzIG9uIGNvbnRlbnRFZGl0YWJsZSBmaWVsZHMgYXMgd2VsbCBhcyBpbnB1dHMuXG4gKiAtIEZpcmVzIGZvciBjb2xsYXBzZWQgc2VsZWN0aW9uLlxuICogLSBGaXJlcyBhZnRlciB1c2VyIGlucHV0LlxuICovXG52YXIgU2VsZWN0RXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG5cbiAgICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgICAgLy8gVHJhY2sgdGhlIGlucHV0IG5vZGUgdGhhdCBoYXMgZm9jdXMuXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRm9jdXM6XG4gICAgICAgIGlmIChpc1RleHRJbnB1dEVsZW1lbnQodG9wTGV2ZWxUYXJnZXQpIHx8XG4gICAgICAgICAgICB0b3BMZXZlbFRhcmdldC5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJykge1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgPSB0b3BMZXZlbFRhcmdldDtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50SUQgPSB0b3BMZXZlbFRhcmdldElEO1xuICAgICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICAgIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xuICAgICAgICBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIC8vIERvbid0IGZpcmUgdGhlIGV2ZW50IHdoaWxlIHRoZSB1c2VyIGlzIGRyYWdnaW5nLiBUaGlzIG1hdGNoZXMgdGhlXG4gICAgICAvLyBzZW1hbnRpY3Mgb2YgdGhlIG5hdGl2ZSBzZWxlY3QgZXZlbnQuXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duOlxuICAgICAgICBtb3VzZURvd24gPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwOlxuICAgICAgICBtb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50KTtcblxuICAgICAgLy8gQ2hyb21lIGFuZCBJRSBmaXJlIG5vbi1zdGFuZGFyZCBldmVudCB3aGVuIHNlbGVjdGlvbiBpcyBjaGFuZ2VkIChhbmRcbiAgICAgIC8vIHNvbWV0aW1lcyB3aGVuIGl0IGhhc24ndCkuXG4gICAgICAvLyBGaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBzZWxlY3Rpb25jaGFuZ2UsIHNvIGNoZWNrIHNlbGVjdGlvbiBzdGF0dXNcbiAgICAgIC8vIGFmdGVyIGVhY2gga2V5IGVudHJ5LiBUaGUgc2VsZWN0aW9uIGNoYW5nZXMgYWZ0ZXIga2V5ZG93biBhbmQgYmVmb3JlXG4gICAgICAvLyBrZXl1cCwgYnV0IHdlIGNoZWNrIG9uIGtleWRvd24gYXMgd2VsbCBpbiB0aGUgY2FzZSBvZiBob2xkaW5nIGRvd24gYVxuICAgICAgLy8ga2V5LCB3aGVuIG11bHRpcGxlIGtleWRvd24gZXZlbnRzIGFyZSBmaXJlZCBidXQgb25seSBvbmUga2V5dXAgaXMuXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5VXA6XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdEV2ZW50UGx1Z2luO1xuXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjoxNjIsXCIuL0V2ZW50UHJvcGFnYXRvcnNcIjoxNjcsXCIuL1JlYWN0SW5wdXRTZWxlY3Rpb25cIjoyMTcsXCIuL1N5bnRoZXRpY0V2ZW50XCI6MjU1LFwiLi9nZXRBY3RpdmVFbGVtZW50XCI6MjgzLFwiLi9pc1RleHRJbnB1dEVsZW1lbnRcIjozMDAsXCIuL2tleU9mXCI6MzA0LFwiLi9zaGFsbG93RXF1YWxcIjozMTN9XSwyNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNlcnZlclJlYWN0Um9vdEluZGV4XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaXplIG9mIHRoZSByZWFjdFJvb3QgSUQgc3BhY2UuIFdlIGdlbmVyYXRlIHJhbmRvbSBudW1iZXJzIGZvciBSZWFjdCByb290XG4gKiBJRHMgYW5kIGlmIHRoZXJlJ3MgYSBjb2xsaXNpb24gdGhlIGV2ZW50cyBhbmQgRE9NIHVwZGF0ZSBzeXN0ZW0gd2lsbFxuICogZ2V0IGNvbmZ1c2VkLiBJbiB0aGUgZnV0dXJlIHdlIG5lZWQgYSB3YXkgdG8gZ2VuZXJhdGUgR1VJRHMgYnV0IGZvclxuICogbm93IHRoaXMgd2lsbCB3b3JrIG9uIGEgc21hbGxlciBzY2FsZS5cbiAqL1xudmFyIEdMT0JBTF9NT1VOVF9QT0lOVF9NQVggPSBNYXRoLnBvdygyLCA1Myk7XG5cbnZhciBTZXJ2ZXJSZWFjdFJvb3RJbmRleCA9IHtcbiAgY3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIEdMT0JBTF9NT1VOVF9QT0lOVF9NQVgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZlclJlYWN0Um9vdEluZGV4O1xuXG59LHt9XSwyNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTaW1wbGVFdmVudFBsdWdpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQbHVnaW5VdGlscyA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luVXRpbHNcIik7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIik7XG52YXIgU3ludGhldGljQ2xpcGJvYXJkRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudFwiKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xudmFyIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNGb2N1c0V2ZW50XCIpO1xudmFyIFN5bnRoZXRpY0tleWJvYXJkRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNLZXlib2FyZEV2ZW50XCIpO1xudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNNb3VzZUV2ZW50XCIpO1xudmFyIFN5bnRoZXRpY0RyYWdFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0RyYWdFdmVudFwiKTtcbnZhciBTeW50aGV0aWNUb3VjaEV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVG91Y2hFdmVudFwiKTtcbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcbnZhciBTeW50aGV0aWNXaGVlbEV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljV2hlZWxFdmVudFwiKTtcblxudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKFwiLi9nZXRFdmVudENoYXJDb2RlXCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGJsdXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQmx1cjogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkJsdXJDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGNsaWNrOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNsaWNrOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ2xpY2tDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGNvbnRleHRNZW51OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbnRleHRNZW51OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29udGV4dE1lbnVDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGNvcHk6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29weTogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvcHlDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGN1dDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25DdXQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25DdXRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRvdWJsZUNsaWNrOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRvdWJsZUNsaWNrOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRG91YmxlQ2xpY2tDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWc6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZzogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdFbmQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZ0VuZDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdFbmRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdFbnRlcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnRW50ZXI6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnRW50ZXJDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdFeGl0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdFeGl0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0V4aXRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdMZWF2ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnTGVhdmU6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnTGVhdmVDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdPdmVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdPdmVyOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ092ZXJDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdTdGFydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnU3RhcnQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnU3RhcnRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGRyb3A6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJvcDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyb3BDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkZvY3VzOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRm9jdXNDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGlucHV0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbklucHV0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uSW5wdXRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGtleURvd246IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uS2V5RG93bjogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbktleURvd25DYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGtleVByZXNzOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbktleVByZXNzOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uS2V5UHJlc3NDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGtleVVwOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbktleVVwOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uS2V5VXBDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGxvYWQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uTG9hZDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkxvYWRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIGVycm9yOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkVycm9yOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRXJyb3JDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIC8vIE5vdGU6IFdlIGRvIG5vdCBhbGxvdyBsaXN0ZW5pbmcgdG8gbW91c2VPdmVyIGV2ZW50cy4gSW5zdGVhZCwgdXNlIHRoZVxuICAvLyBvbk1vdXNlRW50ZXIvb25Nb3VzZUxlYXZlIGNyZWF0ZWQgYnkgYEVudGVyTGVhdmVFdmVudFBsdWdpbmAuXG4gIG1vdXNlRG93bjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZURvd246IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZURvd25DYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlTW92ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZU1vdmU6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZU1vdmVDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlT3V0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbk1vdXNlT3V0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTW91c2VPdXRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlT3Zlcjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZU92ZXI6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZU92ZXJDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlVXA6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VVcDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlVXBDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHBhc3RlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblBhc3RlOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uUGFzdGVDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHJlc2V0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblJlc2V0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uUmVzZXRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHNjcm9sbDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25TY3JvbGw6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TY3JvbGxDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHN1Ym1pdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25TdWJtaXQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TdWJtaXRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoQ2FuY2VsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblRvdWNoQ2FuY2VsOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hDYW5jZWxDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoRW5kOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblRvdWNoRW5kOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hFbmRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoTW92ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaE1vdmU6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ub3VjaE1vdmVDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uVG91Y2hTdGFydDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoU3RhcnRDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH0sXG4gIHdoZWVsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbldoZWVsOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uV2hlZWxDYXB0dXJlOiB0cnVlfSlcbiAgICB9XG4gIH1cbn07XG5cbnZhciB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWcgPSB7XG4gIHRvcEJsdXI6ICAgICAgICBldmVudFR5cGVzLmJsdXIsXG4gIHRvcENsaWNrOiAgICAgICBldmVudFR5cGVzLmNsaWNrLFxuICB0b3BDb250ZXh0TWVudTogZXZlbnRUeXBlcy5jb250ZXh0TWVudSxcbiAgdG9wQ29weTogICAgICAgIGV2ZW50VHlwZXMuY29weSxcbiAgdG9wQ3V0OiAgICAgICAgIGV2ZW50VHlwZXMuY3V0LFxuICB0b3BEb3VibGVDbGljazogZXZlbnRUeXBlcy5kb3VibGVDbGljayxcbiAgdG9wRHJhZzogICAgICAgIGV2ZW50VHlwZXMuZHJhZyxcbiAgdG9wRHJhZ0VuZDogICAgIGV2ZW50VHlwZXMuZHJhZ0VuZCxcbiAgdG9wRHJhZ0VudGVyOiAgIGV2ZW50VHlwZXMuZHJhZ0VudGVyLFxuICB0b3BEcmFnRXhpdDogICAgZXZlbnRUeXBlcy5kcmFnRXhpdCxcbiAgdG9wRHJhZ0xlYXZlOiAgIGV2ZW50VHlwZXMuZHJhZ0xlYXZlLFxuICB0b3BEcmFnT3ZlcjogICAgZXZlbnRUeXBlcy5kcmFnT3ZlcixcbiAgdG9wRHJhZ1N0YXJ0OiAgIGV2ZW50VHlwZXMuZHJhZ1N0YXJ0LFxuICB0b3BEcm9wOiAgICAgICAgZXZlbnRUeXBlcy5kcm9wLFxuICB0b3BFcnJvcjogICAgICAgZXZlbnRUeXBlcy5lcnJvcixcbiAgdG9wRm9jdXM6ICAgICAgIGV2ZW50VHlwZXMuZm9jdXMsXG4gIHRvcElucHV0OiAgICAgICBldmVudFR5cGVzLmlucHV0LFxuICB0b3BLZXlEb3duOiAgICAgZXZlbnRUeXBlcy5rZXlEb3duLFxuICB0b3BLZXlQcmVzczogICAgZXZlbnRUeXBlcy5rZXlQcmVzcyxcbiAgdG9wS2V5VXA6ICAgICAgIGV2ZW50VHlwZXMua2V5VXAsXG4gIHRvcExvYWQ6ICAgICAgICBldmVudFR5cGVzLmxvYWQsXG4gIHRvcE1vdXNlRG93bjogICBldmVudFR5cGVzLm1vdXNlRG93bixcbiAgdG9wTW91c2VNb3ZlOiAgIGV2ZW50VHlwZXMubW91c2VNb3ZlLFxuICB0b3BNb3VzZU91dDogICAgZXZlbnRUeXBlcy5tb3VzZU91dCxcbiAgdG9wTW91c2VPdmVyOiAgIGV2ZW50VHlwZXMubW91c2VPdmVyLFxuICB0b3BNb3VzZVVwOiAgICAgZXZlbnRUeXBlcy5tb3VzZVVwLFxuICB0b3BQYXN0ZTogICAgICAgZXZlbnRUeXBlcy5wYXN0ZSxcbiAgdG9wUmVzZXQ6ICAgICAgIGV2ZW50VHlwZXMucmVzZXQsXG4gIHRvcFNjcm9sbDogICAgICBldmVudFR5cGVzLnNjcm9sbCxcbiAgdG9wU3VibWl0OiAgICAgIGV2ZW50VHlwZXMuc3VibWl0LFxuICB0b3BUb3VjaENhbmNlbDogZXZlbnRUeXBlcy50b3VjaENhbmNlbCxcbiAgdG9wVG91Y2hFbmQ6ICAgIGV2ZW50VHlwZXMudG91Y2hFbmQsXG4gIHRvcFRvdWNoTW92ZTogICBldmVudFR5cGVzLnRvdWNoTW92ZSxcbiAgdG9wVG91Y2hTdGFydDogIGV2ZW50VHlwZXMudG91Y2hTdGFydCxcbiAgdG9wV2hlZWw6ICAgICAgIGV2ZW50VHlwZXMud2hlZWxcbn07XG5cbmZvciAodmFyIHR5cGUgaW4gdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnKSB7XG4gIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0eXBlXS5kZXBlbmRlbmNpZXMgPSBbdHlwZV07XG59XG5cbnZhciBTaW1wbGVFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBTYW1lIGFzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uLCBleGNlcHQgY2FuY2VscyB0aGUgZXZlbnQgd2hlbiByZXR1cm5cbiAgICogdmFsdWUgaXMgZmFsc2UuIFRoaXMgYmVoYXZpb3Igd2lsbCBiZSBkaXNhYmxlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gRXZlbnQgdG8gYmUgZGlzcGF0Y2hlZC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gQXBwbGljYXRpb24tbGV2ZWwgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkb21JRCBET00gSUQgdG8gcGFzcyB0byB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBleGVjdXRlRGlzcGF0Y2g6IGZ1bmN0aW9uKGV2ZW50LCBsaXN0ZW5lciwgZG9tSUQpIHtcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBFdmVudFBsdWdpblV0aWxzLmV4ZWN1dGVEaXNwYXRjaChldmVudCwgbGlzdGVuZXIsIGRvbUlEKTtcblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgdHlwZW9mIHJldHVyblZhbHVlICE9PSAnYm9vbGVhbicsXG4gICAgICAnUmV0dXJuaW5nIGBmYWxzZWAgZnJvbSBhbiBldmVudCBoYW5kbGVyIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgJyArXG4gICAgICAnaWdub3JlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiBJbnN0ZWFkLCBtYW51YWxseSBjYWxsICcgK1xuICAgICAgJ2Uuc3RvcFByb3BhZ2F0aW9uKCkgb3IgZS5wcmV2ZW50RGVmYXVsdCgpLCBhcyBhcHByb3ByaWF0ZS4nXG4gICAgKSA6IG51bGwpO1xuXG4gICAgaWYgKHJldHVyblZhbHVlID09PSBmYWxzZSkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIGRpc3BhdGNoQ29uZmlnID0gdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnW3RvcExldmVsVHlwZV07XG4gICAgaWYgKCFkaXNwYXRjaENvbmZpZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBFdmVudENvbnN0cnVjdG9yO1xuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wSW5wdXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTG9hZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BFcnJvcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BSZXNldDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTdWJtaXQ6XG4gICAgICAgIC8vIEhUTUwgRXZlbnRzXG4gICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5kZXguaHRtbCNldmVudHMtMFxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgICAgICAvLyBGaXJlRm94IGNyZWF0ZXMgYSBrZXlwcmVzcyBldmVudCBmb3IgZnVuY3Rpb24ga2V5cyB0b28uIFRoaXMgcmVtb3Zlc1xuICAgICAgICAvLyB0aGUgdW53YW50ZWQga2V5cHJlc3MgZXZlbnRzLiBFbnRlciBpcyBob3dldmVyIGJvdGggcHJpbnRhYmxlIGFuZFxuICAgICAgICAvLyBub24tcHJpbnRhYmxlLiBPbmUgd291bGQgZXhwZWN0IFRhYiB0byBiZSBhcyB3ZWxsIChidXQgaXQgaXNuJ3QpLlxuICAgICAgICBpZiAoZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRm9jdXM6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDbGljazpcbiAgICAgICAgLy8gRmlyZWZveCBjcmVhdGVzIGEgY2xpY2sgZXZlbnQgb24gcmlnaHQgbW91c2UgY2xpY2tzLiBUaGlzIHJlbW92ZXMgdGhlXG4gICAgICAgIC8vIHVud2FudGVkIGNsaWNrIGV2ZW50cy5cbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmJ1dHRvbiA9PT0gMikge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEb3VibGVDbGljazpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VNb3ZlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljTW91c2VFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZzpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnRW5kOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFbnRlcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnRXhpdDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnTGVhdmU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ092ZXI6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ1N0YXJ0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyb3A6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoQ2FuY2VsOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoTW92ZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0OlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVG91Y2hFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU2Nyb2xsOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVUlFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wV2hlZWw6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNXaGVlbEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb3B5OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEN1dDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZTpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIEV2ZW50Q29uc3RydWN0b3IsXG4gICAgICAnU2ltcGxlRXZlbnRQbHVnaW46IFVuaGFuZGxlZCBldmVudCB0eXBlLCBgJXNgLicsXG4gICAgICB0b3BMZXZlbFR5cGVcbiAgICApIDogaW52YXJpYW50KEV2ZW50Q29uc3RydWN0b3IpKTtcbiAgICB2YXIgZXZlbnQgPSBFdmVudENvbnN0cnVjdG9yLmdldFBvb2xlZChcbiAgICAgIGRpc3BhdGNoQ29uZmlnLFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpbXBsZUV2ZW50UGx1Z2luO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9FdmVudENvbnN0YW50c1wiOjE2MixcIi4vRXZlbnRQbHVnaW5VdGlsc1wiOjE2NixcIi4vRXZlbnRQcm9wYWdhdG9yc1wiOjE2NyxcIi4vU3ludGhldGljQ2xpcGJvYXJkRXZlbnRcIjoyNTIsXCIuL1N5bnRoZXRpY0RyYWdFdmVudFwiOjI1NCxcIi4vU3ludGhldGljRXZlbnRcIjoyNTUsXCIuL1N5bnRoZXRpY0ZvY3VzRXZlbnRcIjoyNTYsXCIuL1N5bnRoZXRpY0tleWJvYXJkRXZlbnRcIjoyNTgsXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIjoyNTksXCIuL1N5bnRoZXRpY1RvdWNoRXZlbnRcIjoyNjAsXCIuL1N5bnRoZXRpY1VJRXZlbnRcIjoyNjEsXCIuL1N5bnRoZXRpY1doZWVsRXZlbnRcIjoyNjIsXCIuL2dldEV2ZW50Q2hhckNvZGVcIjoyODQsXCIuL2ludmFyaWFudFwiOjI5NyxcIi4va2V5T2ZcIjozMDQsXCIuL3dhcm5pbmdcIjozMTgsXCJfcHJvY2Vzc1wiOjF9XSwyNTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9jbGlwYm9hcmQtYXBpcy9cbiAqL1xudmFyIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuICBjbGlwYm9hcmREYXRhOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiAoXG4gICAgICAnY2xpcGJvYXJkRGF0YScgaW4gZXZlbnQgP1xuICAgICAgICBldmVudC5jbGlwYm9hcmREYXRhIDpcbiAgICAgICAgd2luZG93LmNsaXBib2FyZERhdGFcbiAgICApO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNDbGlwYm9hcmRFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDbGlwYm9hcmRFdmVudCwgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuXG59LHtcIi4vU3ludGhldGljRXZlbnRcIjoyNTV9XSwyNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWNvbXBvc2l0aW9uZXZlbnRzXG4gKi9cbnZhciBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50KFxuICBkaXNwYXRjaENvbmZpZyxcbiAgZGlzcGF0Y2hNYXJrZXIsXG4gIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhcbiAgU3ludGhldGljQ29tcG9zaXRpb25FdmVudCxcbiAgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZVxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50O1xuXG59LHtcIi4vU3ludGhldGljRXZlbnRcIjoyNTV9XSwyNTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0RyYWdFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljTW91c2VFdmVudFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIERyYWdFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBEcmFnRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRhdGFUcmFuc2ZlcjogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRHJhZ0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljTW91c2VFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNNb3VzZUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNEcmFnRXZlbnQsIERyYWdFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRHJhZ0V2ZW50O1xuXG59LHtcIi4vU3ludGhldGljTW91c2VFdmVudFwiOjI1OX1dLDI1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG52YXIgZ2V0RXZlbnRUYXJnZXQgPSByZXF1aXJlKFwiLi9nZXRFdmVudFRhcmdldFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIEV2ZW50SW50ZXJmYWNlID0ge1xuICB0eXBlOiBudWxsLFxuICB0YXJnZXQ6IGdldEV2ZW50VGFyZ2V0LFxuICAvLyBjdXJyZW50VGFyZ2V0IGlzIHNldCB3aGVuIGRpc3BhdGNoaW5nOyBubyB1c2UgaW4gY29weWluZyBpdCBoZXJlXG4gIGN1cnJlbnRUYXJnZXQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsLFxuICBldmVudFBoYXNlOiBudWxsLFxuICBidWJibGVzOiBudWxsLFxuICBjYW5jZWxhYmxlOiBudWxsLFxuICB0aW1lU3RhbXA6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuICB9LFxuICBkZWZhdWx0UHJldmVudGVkOiBudWxsLFxuICBpc1RydXN0ZWQ6IG51bGxcbn07XG5cbi8qKlxuICogU3ludGhldGljIGV2ZW50cyBhcmUgZGlzcGF0Y2hlZCBieSBldmVudCBwbHVnaW5zLCB0eXBpY2FsbHkgaW4gcmVzcG9uc2UgdG8gYVxuICogdG9wLWxldmVsIGV2ZW50IGRlbGVnYXRpb24gaGFuZGxlci5cbiAqXG4gKiBUaGVzZSBzeXN0ZW1zIHNob3VsZCBnZW5lcmFsbHkgdXNlIHBvb2xpbmcgdG8gcmVkdWNlIHRoZSBmcmVxdWVuY3kgb2YgZ2FyYmFnZVxuICogY29sbGVjdGlvbi4gVGhlIHN5c3RlbSBzaG91bGQgY2hlY2sgYGlzUGVyc2lzdGVudGAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlXG4gKiBldmVudCBzaG91bGQgYmUgcmVsZWFzZWQgaW50byB0aGUgcG9vbCBhZnRlciBiZWluZyBkaXNwYXRjaGVkLiBVc2VycyB0aGF0XG4gKiBuZWVkIGEgcGVyc2lzdGVkIGV2ZW50IHNob3VsZCBpbnZva2UgYHBlcnNpc3RgLlxuICpcbiAqIFN5bnRoZXRpYyBldmVudHMgKGFuZCBzdWJjbGFzc2VzKSBpbXBsZW1lbnQgdGhlIERPTSBMZXZlbCAzIEV2ZW50cyBBUEkgYnlcbiAqIG5vcm1hbGl6aW5nIGJyb3dzZXIgcXVpcmtzLiBTdWJjbGFzc2VzIGRvIG5vdCBuZWNlc3NhcmlseSBoYXZlIHRvIGltcGxlbWVudCBhXG4gKiBET00gaW50ZXJmYWNlOyBjdXN0b20gYXBwbGljYXRpb24tc3BlY2lmaWMgZXZlbnRzIGNhbiBhbHNvIHN1YmNsYXNzIHRoaXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIHRoaXMuZGlzcGF0Y2hDb25maWcgPSBkaXNwYXRjaENvbmZpZztcbiAgdGhpcy5kaXNwYXRjaE1hcmtlciA9IGRpc3BhdGNoTWFya2VyO1xuICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG5cbiAgdmFyIEludGVyZmFjZSA9IHRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO1xuICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpIHtcbiAgICBpZiAoIUludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgbm9ybWFsaXplID0gSW50ZXJmYWNlW3Byb3BOYW1lXTtcbiAgICBpZiAobm9ybWFsaXplKSB7XG4gICAgICB0aGlzW3Byb3BOYW1lXSA9IG5vcm1hbGl6ZShuYXRpdmVFdmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbmF0aXZlRXZlbnRbcHJvcE5hbWVdO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkZWZhdWx0UHJldmVudGVkID0gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCAhPSBudWxsID9cbiAgICBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkIDpcbiAgICBuYXRpdmVFdmVudC5yZXR1cm5WYWx1ZSA9PT0gZmFsc2U7XG4gIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZTtcbiAgfVxuICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlO1xufVxuXG5hc3NpZ24oU3ludGhldGljRXZlbnQucHJvdG90eXBlLCB7XG5cbiAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICBpZiAoZXZlbnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdlIHJlbGVhc2UgYWxsIGRpc3BhdGNoZWQgYFN5bnRoZXRpY0V2ZW50YHMgYWZ0ZXIgZWFjaCBldmVudCBsb29wLCBhZGRpbmdcbiAgICogdGhlbSBiYWNrIGludG8gdGhlIHBvb2wuIFRoaXMgYWxsb3dzIGEgd2F5IHRvIGhvbGQgb250byBhIHJlZmVyZW5jZSB0aGF0XG4gICAqIHdvbid0IGJlIGFkZGVkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICovXG4gIHBlcnNpc3Q6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXNQZXJzaXN0ZW50ID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBiYWNrIGludG8gdGhlIHBvb2wuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhpcyBzaG91bGQgbm90IGJlIHJlbGVhc2VkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBpc1BlcnNpc3RlbnQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgYGRlc3RydWN0b3JgIG9uIGVhY2ggaW5zdGFuY2UgaXQgcmVsZWFzZXMuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSB7XG4gICAgICB0aGlzW3Byb3BOYW1lXSA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuZGlzcGF0Y2hDb25maWcgPSBudWxsO1xuICAgIHRoaXMuZGlzcGF0Y2hNYXJrZXIgPSBudWxsO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBudWxsO1xuICB9XG5cbn0pO1xuXG5TeW50aGV0aWNFdmVudC5JbnRlcmZhY2UgPSBFdmVudEludGVyZmFjZTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gcmVkdWNlIGJvaWxlcnBsYXRlIHdoZW4gY3JlYXRpbmcgc3ViY2xhc3Nlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBDbGFzc1xuICogQHBhcmFtIHs/b2JqZWN0fSBJbnRlcmZhY2VcbiAqL1xuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzID0gZnVuY3Rpb24oQ2xhc3MsIEludGVyZmFjZSkge1xuICB2YXIgU3VwZXIgPSB0aGlzO1xuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gIGFzc2lnbihwcm90b3R5cGUsIENsYXNzLnByb3RvdHlwZSk7XG4gIENsYXNzLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2xhc3M7XG5cbiAgQ2xhc3MuSW50ZXJmYWNlID0gYXNzaWduKHt9LCBTdXBlci5JbnRlcmZhY2UsIEludGVyZmFjZSk7XG4gIENsYXNzLmF1Z21lbnRDbGFzcyA9IFN1cGVyLmF1Z21lbnRDbGFzcztcblxuICBQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oQ2xhc3MsIFBvb2xlZENsYXNzLnRocmVlQXJndW1lbnRQb29sZXIpO1xufTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFN5bnRoZXRpY0V2ZW50LCBQb29sZWRDbGFzcy50aHJlZUFyZ3VtZW50UG9vbGVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNFdmVudDtcblxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL1Bvb2xlZENsYXNzXCI6MTc2LFwiLi9lbXB0eUZ1bmN0aW9uXCI6Mjc2LFwiLi9nZXRFdmVudFRhcmdldFwiOjI4N31dLDI1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljRm9jdXNFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEZvY3VzRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRm9jdXNFdmVudEludGVyZmFjZSA9IHtcbiAgcmVsYXRlZFRhcmdldDogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRm9jdXNFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRm9jdXNFdmVudCwgRm9jdXNFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRm9jdXNFdmVudDtcblxufSx7XCIuL1N5bnRoZXRpY1VJRXZlbnRcIjoyNjF9XSwyNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0lucHV0RXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1XG4gKiAgICAgIC8jZXZlbnRzLWlucHV0ZXZlbnRzXG4gKi9cbnZhciBJbnB1dEV2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNJbnB1dEV2ZW50KFxuICBkaXNwYXRjaENvbmZpZyxcbiAgZGlzcGF0Y2hNYXJrZXIsXG4gIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhcbiAgU3ludGhldGljSW5wdXRFdmVudCxcbiAgSW5wdXRFdmVudEludGVyZmFjZVxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNJbnB1dEV2ZW50O1xuXG59LHtcIi4vU3ludGhldGljRXZlbnRcIjoyNTV9XSwyNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0tleWJvYXJkRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY1VJRXZlbnRcIik7XG5cbnZhciBnZXRFdmVudENoYXJDb2RlID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRDaGFyQ29kZVwiKTtcbnZhciBnZXRFdmVudEtleSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50S2V5XCIpO1xudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEtleWJvYXJkRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgS2V5Ym9hcmRFdmVudEludGVyZmFjZSA9IHtcbiAga2V5OiBnZXRFdmVudEtleSxcbiAgbG9jYXRpb246IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIHJlcGVhdDogbnVsbCxcbiAgbG9jYWxlOiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIC8vIExlZ2FjeSBJbnRlcmZhY2VcbiAgY2hhckNvZGU6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgLy8gYGNoYXJDb2RlYCBpcyB0aGUgcmVzdWx0IG9mIGEgS2V5UHJlc3MgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gdGhlIGFjdHVhbCBwcmludGFibGUgY2hhcmFjdGVyLlxuXG4gICAgLy8gS2V5UHJlc3MgaXMgZGVwcmVjYXRlZCwgYnV0IGl0cyByZXBsYWNlbWVudCBpcyBub3QgeWV0IGZpbmFsIGFuZCBub3RcbiAgICAvLyBpbXBsZW1lbnRlZCBpbiBhbnkgbWFqb3IgYnJvd3Nlci4gT25seSBLZXlQcmVzcyBoYXMgY2hhckNvZGUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgIHJldHVybiBnZXRFdmVudENoYXJDb2RlKGV2ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIGtleUNvZGU6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgLy8gYGtleUNvZGVgIGlzIHRoZSByZXN1bHQgb2YgYSBLZXlEb3duL1VwIGV2ZW50IGFuZCByZXByZXNlbnRzIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHBoeXNpY2FsIGtleWJvYXJkIGtleS5cblxuICAgIC8vIFRoZSBhY3R1YWwgbWVhbmluZyBvZiB0aGUgdmFsdWUgZGVwZW5kcyBvbiB0aGUgdXNlcnMnIGtleWJvYXJkIGxheW91dFxuICAgIC8vIHdoaWNoIGNhbm5vdCBiZSBkZXRlY3RlZC4gQXNzdW1pbmcgdGhhdCBpdCBpcyBhIFVTIGtleWJvYXJkIGxheW91dFxuICAgIC8vIHByb3ZpZGVzIGEgc3VycHJpc2luZ2x5IGFjY3VyYXRlIG1hcHBpbmcgZm9yIFVTIGFuZCBFdXJvcGVhbiB1c2Vycy5cbiAgICAvLyBEdWUgdG8gdGhpcywgaXQgaXMgbGVmdCB0byB0aGUgdXNlciB0byBpbXBsZW1lbnQgYXQgdGhpcyB0aW1lLlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LFxuICB3aGljaDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyBgd2hpY2hgIGlzIGFuIGFsaWFzIGZvciBlaXRoZXIgYGtleUNvZGVgIG9yIGBjaGFyQ29kZWAgZGVwZW5kaW5nIG9uIHRoZVxuICAgIC8vIHR5cGUgb2YgdGhlIGV2ZW50LlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNLZXlib2FyZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNLZXlib2FyZEV2ZW50LCBLZXlib2FyZEV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuXG59LHtcIi4vU3ludGhldGljVUlFdmVudFwiOjI2MSxcIi4vZ2V0RXZlbnRDaGFyQ29kZVwiOjI4NCxcIi4vZ2V0RXZlbnRLZXlcIjoyODUsXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiOjI4Nn1dLDI1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljTW91c2VFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcbnZhciBWaWV3cG9ydE1ldHJpY3MgPSByZXF1aXJlKFwiLi9WaWV3cG9ydE1ldHJpY3NcIik7XG5cbnZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSByZXF1aXJlKFwiLi9nZXRFdmVudE1vZGlmaWVyU3RhdGVcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBNb3VzZUV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIE1vdXNlRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHNjcmVlblg6IG51bGwsXG4gIHNjcmVlblk6IG51bGwsXG4gIGNsaWVudFg6IG51bGwsXG4gIGNsaWVudFk6IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgYnV0dG9uOiBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIFdlYmtpdCwgRmlyZWZveCwgSUU5K1xuICAgIC8vIHdoaWNoOiAgMSAyIDNcbiAgICAvLyBidXR0b246IDAgMSAyIChzdGFuZGFyZClcbiAgICB2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuICAgIGlmICgnd2hpY2gnIGluIGV2ZW50KSB7XG4gICAgICByZXR1cm4gYnV0dG9uO1xuICAgIH1cbiAgICAvLyBJRTw5XG4gICAgLy8gd2hpY2g6ICB1bmRlZmluZWRcbiAgICAvLyBidXR0b246IDAgMCAwXG4gICAgLy8gYnV0dG9uOiAxIDQgMiAob25tb3VzZXVwKVxuICAgIHJldHVybiBidXR0b24gPT09IDIgPyAyIDogYnV0dG9uID09PSA0ID8gMSA6IDA7XG4gIH0sXG4gIGJ1dHRvbnM6IG51bGwsXG4gIHJlbGF0ZWRUYXJnZXQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgKFxuICAgICAgKChldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudCA/IGV2ZW50LnRvRWxlbWVudCA6IGV2ZW50LmZyb21FbGVtZW50KSlcbiAgICApO1xuICB9LFxuICAvLyBcIlByb3ByaWV0YXJ5XCIgSW50ZXJmYWNlLlxuICBwYWdlWDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VYJyBpbiBldmVudCA/XG4gICAgICBldmVudC5wYWdlWCA6XG4gICAgICBldmVudC5jbGllbnRYICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxMZWZ0O1xuICB9LFxuICBwYWdlWTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VZJyBpbiBldmVudCA/XG4gICAgICBldmVudC5wYWdlWSA6XG4gICAgICBldmVudC5jbGllbnRZICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3A7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY01vdXNlRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY01vdXNlRXZlbnQsIE1vdXNlRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG5cbn0se1wiLi9TeW50aGV0aWNVSUV2ZW50XCI6MjYxLFwiLi9WaWV3cG9ydE1ldHJpY3NcIjoyNjQsXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiOjI4Nn1dLDI2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljVG91Y2hFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcblxudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFRvdWNoRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1xuICovXG52YXIgVG91Y2hFdmVudEludGVyZmFjZSA9IHtcbiAgdG91Y2hlczogbnVsbCxcbiAgdGFyZ2V0VG91Y2hlczogbnVsbCxcbiAgY2hhbmdlZFRvdWNoZXM6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVG91Y2hFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVG91Y2hFdmVudCwgVG91Y2hFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljVG91Y2hFdmVudDtcblxufSx7XCIuL1N5bnRoZXRpY1VJRXZlbnRcIjoyNjEsXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiOjI4Nn1dLDI2MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljVUlFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xuXG52YXIgZ2V0RXZlbnRUYXJnZXQgPSByZXF1aXJlKFwiLi9nZXRFdmVudFRhcmdldFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFVJRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgVUlFdmVudEludGVyZmFjZSA9IHtcbiAgdmlldzogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudmlldykge1xuICAgICAgcmV0dXJuIGV2ZW50LnZpZXc7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGV2ZW50KTtcbiAgICBpZiAodGFyZ2V0ICE9IG51bGwgJiYgdGFyZ2V0LndpbmRvdyA9PT0gdGFyZ2V0KSB7XG4gICAgICAvLyB0YXJnZXQgaXMgYSB3aW5kb3cgb2JqZWN0XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHZhciBkb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoeSBgb3duZXJEb2N1bWVudGAgaXMgc29tZXRpbWVzIHVuZGVmaW5lZCBpbiBJRTguXG4gICAgaWYgKGRvYykge1xuICAgICAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cbiAgfSxcbiAgZGV0YWlsOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiBldmVudC5kZXRhaWwgfHwgMDtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY1VJRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCkge1xuICBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVUlFdmVudCwgVUlFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljVUlFdmVudDtcblxufSx7XCIuL1N5bnRoZXRpY0V2ZW50XCI6MjU1LFwiLi9nZXRFdmVudFRhcmdldFwiOjI4N31dLDI2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljV2hlZWxFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljTW91c2VFdmVudFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFdoZWVsRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgV2hlZWxFdmVudEludGVyZmFjZSA9IHtcbiAgZGVsdGFYOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiAoXG4gICAgICAnZGVsdGFYJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWCA6XG4gICAgICAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVhgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAocmlnaHQgaXMgcG9zaXRpdmUpLlxuICAgICAgJ3doZWVsRGVsdGFYJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhWCA6IDBcbiAgICApO1xuICB9LFxuICBkZWx0YVk6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICdkZWx0YVknIGluIGV2ZW50ID8gZXZlbnQuZGVsdGFZIDpcbiAgICAgIC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhWWAgZm9yIFdlYmtpdCBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAgICd3aGVlbERlbHRhWScgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YVkgOlxuICAgICAgLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFgIGZvciBJRTw5IGFuZCBub3JtYWxpemUgKGRvd24gaXMgcG9zaXRpdmUpLlxuICAgICAgJ3doZWVsRGVsdGEnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGEgOiAwXG4gICAgKTtcbiAgfSxcbiAgZGVsdGFaOiBudWxsLFxuXG4gIC8vIEJyb3dzZXJzIHdpdGhvdXQgXCJkZWx0YU1vZGVcIiBpcyByZXBvcnRpbmcgaW4gcmF3IHdoZWVsIGRlbHRhIHdoZXJlIG9uZVxuICAvLyBub3RjaCBvbiB0aGUgc2Nyb2xsIGlzIGFsd2F5cyArLy0gMTIwLCByb3VnaGx5IGVxdWl2YWxlbnQgdG8gcGl4ZWxzLlxuICAvLyBBIGdvb2QgYXBwcm94aW1hdGlvbiBvZiBET01fREVMVEFfTElORSAoMSkgaXMgNSUgb2Ygdmlld3BvcnQgc2l6ZSBvclxuICAvLyB+NDAgcGl4ZWxzLCBmb3IgRE9NX0RFTFRBX1NDUkVFTiAoMikgaXQgaXMgODcuNSUgb2Ygdmlld3BvcnQgc2l6ZS5cbiAgZGVsdGFNb2RlOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNNb3VzZUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNXaGVlbEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljTW91c2VFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNNb3VzZUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNXaGVlbEV2ZW50LCBXaGVlbEV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNXaGVlbEV2ZW50O1xuXG59LHtcIi4vU3ludGhldGljTW91c2VFdmVudFwiOjI1OX1dLDI2MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFRyYW5zYWN0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIGBUcmFuc2FjdGlvbmAgY3JlYXRlcyBhIGJsYWNrIGJveCB0aGF0IGlzIGFibGUgdG8gd3JhcCBhbnkgbWV0aG9kIHN1Y2ggdGhhdFxuICogY2VydGFpbiBpbnZhcmlhbnRzIGFyZSBtYWludGFpbmVkIGJlZm9yZSBhbmQgYWZ0ZXIgdGhlIG1ldGhvZCBpcyBpbnZva2VkXG4gKiAoRXZlbiBpZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIHdoaWxlIGludm9raW5nIHRoZSB3cmFwcGVkIG1ldGhvZCkuIFdob2V2ZXJcbiAqIGluc3RhbnRpYXRlcyBhIHRyYW5zYWN0aW9uIGNhbiBwcm92aWRlIGVuZm9yY2VycyBvZiB0aGUgaW52YXJpYW50cyBhdFxuICogY3JlYXRpb24gdGltZS4gVGhlIGBUcmFuc2FjdGlvbmAgY2xhc3MgaXRzZWxmIHdpbGwgc3VwcGx5IG9uZSBhZGRpdGlvbmFsXG4gKiBhdXRvbWF0aWMgaW52YXJpYW50IGZvciB5b3UgLSB0aGUgaW52YXJpYW50IHRoYXQgYW55IHRyYW5zYWN0aW9uIGluc3RhbmNlXG4gKiBzaG91bGQgbm90IGJlIHJ1biB3aGlsZSBpdCBpcyBhbHJlYWR5IGJlaW5nIHJ1bi4gWW91IHdvdWxkIHR5cGljYWxseSBjcmVhdGUgYVxuICogc2luZ2xlIGluc3RhbmNlIG9mIGEgYFRyYW5zYWN0aW9uYCBmb3IgcmV1c2UgbXVsdGlwbGUgdGltZXMsIHRoYXQgcG90ZW50aWFsbHlcbiAqIGlzIHVzZWQgdG8gd3JhcCBzZXZlcmFsIGRpZmZlcmVudCBtZXRob2RzLiBXcmFwcGVycyBhcmUgZXh0cmVtZWx5IHNpbXBsZSAtXG4gKiB0aGV5IG9ubHkgcmVxdWlyZSBpbXBsZW1lbnRpbmcgdHdvIG1ldGhvZHMuXG4gKlxuICogPHByZT5cbiAqICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVycyAoaW5qZWN0ZWQgYXQgY3JlYXRpb24gdGltZSlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgICAgICArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLXwtLS0tLS0tLS0tLS0tLStcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICB2ICAgICAgICB8ICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICstLS0tLS0tLS0tLS0tLS0rICAgfCAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICArLS18ICAgIHdyYXBwZXIxICAgfC0tLXwtLS0tKyAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgKy0tLS0tLS0tLS0tLS0tLSsgICB2ICAgIHwgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgICAgICAgKy0tLS0tLS0tLS0tLS0rICB8ICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICArLS0tLXwgICB3cmFwcGVyMiAgfC0tLS0tLS0tKyAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgfCAgICArLS0tLS0tLS0tLS0tLSsgIHwgICAgIHwgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgIHwgICAgICAgICAgICAgICAgICAgICB8ICAgICB8ICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB2ICAgICB2ICAgICAgICAgICAgICAgICAgICAgdiAgICAgdiAgIHwgd3JhcHBlclxuICogICAgICAgICAgICAgICAgICAgIHwgKy0tLSsgKy0tLSsgICArLS0tLS0tLS0tKyAgICstLS0rICstLS0rIHwgaW52YXJpYW50c1xuICogcGVyZm9ybShhbnlNZXRob2QpIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHwgbWFpbnRhaW5lZFxuICogKy0tLS0tLS0tLS0tLS0tLS0tPnwtfC0tLXwtfC0tLXwtLT58YW55TWV0aG9kfC0tLXwtLS18LXwtLS18LXwtLS0tLS0tLT5cbiAqICAgICAgICAgICAgICAgICAgICB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuICogICAgICAgICAgICAgICAgICAgIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICstLS0rICstLS0rICAgKy0tLS0tLS0tLSsgICArLS0tKyArLS0tKyB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgaW5pdGlhbGl6ZSAgICAgICAgICAgICAgICAgICAgY2xvc2UgICAgfFxuICogICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAqIDwvcHJlPlxuICpcbiAqIFVzZSBjYXNlczpcbiAqIC0gUHJlc2VydmluZyB0aGUgaW5wdXQgc2VsZWN0aW9uIHJhbmdlcyBiZWZvcmUvYWZ0ZXIgcmVjb25jaWxpYXRpb24uXG4gKiAgIFJlc3RvcmluZyBzZWxlY3Rpb24gZXZlbiBpbiB0aGUgZXZlbnQgb2YgYW4gdW5leHBlY3RlZCBlcnJvci5cbiAqIC0gRGVhY3RpdmF0aW5nIGV2ZW50cyB3aGlsZSByZWFycmFuZ2luZyB0aGUgRE9NLCBwcmV2ZW50aW5nIGJsdXJzL2ZvY3VzZXMsXG4gKiAgIHdoaWxlIGd1YXJhbnRlZWluZyB0aGF0IGFmdGVyd2FyZHMsIHRoZSBldmVudCBzeXN0ZW0gaXMgcmVhY3RpdmF0ZWQuXG4gKiAtIEZsdXNoaW5nIGEgcXVldWUgb2YgY29sbGVjdGVkIERPTSBtdXRhdGlvbnMgdG8gdGhlIG1haW4gVUkgdGhyZWFkIGFmdGVyIGFcbiAqICAgcmVjb25jaWxpYXRpb24gdGFrZXMgcGxhY2UgaW4gYSB3b3JrZXIgdGhyZWFkLlxuICogLSBJbnZva2luZyBhbnkgY29sbGVjdGVkIGBjb21wb25lbnREaWRVcGRhdGVgIGNhbGxiYWNrcyBhZnRlciByZW5kZXJpbmcgbmV3XG4gKiAgIGNvbnRlbnQuXG4gKiAtIChGdXR1cmUgdXNlIGNhc2UpOiBXcmFwcGluZyBwYXJ0aWN1bGFyIGZsdXNoZXMgb2YgdGhlIGBSZWFjdFdvcmtlcmAgcXVldWVcbiAqICAgdG8gcHJlc2VydmUgdGhlIGBzY3JvbGxUb3BgIChhbiBhdXRvbWF0aWMgc2Nyb2xsIGF3YXJlIERPTSkuXG4gKiAtIChGdXR1cmUgdXNlIGNhc2UpOiBMYXlvdXQgY2FsY3VsYXRpb25zIGJlZm9yZSBhbmQgYWZ0ZXIgRE9NIHVwZGF0ZXMuXG4gKlxuICogVHJhbnNhY3Rpb25hbCBwbHVnaW4gQVBJOlxuICogLSBBIG1vZHVsZSB0aGF0IGhhcyBhbiBgaW5pdGlhbGl6ZWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhbnkgcHJlY29tcHV0YXRpb24uXG4gKiAtIGFuZCBhIGBjbG9zZWAgbWV0aG9kIHRoYXQgYWNjZXB0cyB0aGUgcHJlY29tcHV0YXRpb24uIGBjbG9zZWAgaXMgaW52b2tlZFxuICogICB3aGVuIHRoZSB3cmFwcGVkIHByb2Nlc3MgaXMgY29tcGxldGVkLCBvciBoYXMgZmFpbGVkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8VHJhbnNhY3Rpb25hbFdyYXBwZXI+fSB0cmFuc2FjdGlvbldyYXBwZXIgV3JhcHBlciBtb2R1bGVzXG4gKiB0aGF0IGltcGxlbWVudCBgaW5pdGlhbGl6ZWAgYW5kIGBjbG9zZWAuXG4gKiBAcmV0dXJuIHtUcmFuc2FjdGlvbn0gU2luZ2xlIHRyYW5zYWN0aW9uIGZvciByZXVzZSBpbiB0aHJlYWQuXG4gKlxuICogQGNsYXNzIFRyYW5zYWN0aW9uXG4gKi9cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIFNldHMgdXAgdGhpcyBpbnN0YW5jZSBzbyB0aGF0IGl0IGlzIHByZXBhcmVkIGZvciBjb2xsZWN0aW5nIG1ldHJpY3MuIERvZXNcbiAgICogc28gc3VjaCB0aGF0IHRoaXMgc2V0dXAgbWV0aG9kIG1heSBiZSB1c2VkIG9uIGFuIGluc3RhbmNlIHRoYXQgaXMgYWxyZWFkeVxuICAgKiBpbml0aWFsaXplZCwgaW4gYSB3YXkgdGhhdCBkb2VzIG5vdCBjb25zdW1lIGFkZGl0aW9uYWwgbWVtb3J5IHVwb24gcmV1c2UuXG4gICAqIFRoYXQgY2FuIGJlIHVzZWZ1bCBpZiB5b3UgZGVjaWRlIHRvIG1ha2UgeW91ciBzdWJjbGFzcyBvZiB0aGlzIG1peGluIGFcbiAgICogXCJQb29sZWRDbGFzc1wiLlxuICAgKi9cbiAgcmVpbml0aWFsaXplVHJhbnNhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMuZ2V0VHJhbnNhY3Rpb25XcmFwcGVycygpO1xuICAgIGlmICghdGhpcy53cmFwcGVySW5pdERhdGEpIHtcbiAgICAgIHRoaXMud3JhcHBlckluaXREYXRhID0gW107XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aCA9IDA7XG4gICAgfVxuICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IGZhbHNlO1xuICB9LFxuXG4gIF9pc0luVHJhbnNhY3Rpb246IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHJldHVybiB7QXJyYXk8VHJhbnNhY3Rpb25XcmFwcGVyPn0gQXJyYXkgb2YgdHJhbnNhY3Rpb24gd3JhcHBlcnMuXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBudWxsLFxuXG4gIGlzSW5UcmFuc2FjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICEhdGhpcy5faXNJblRyYW5zYWN0aW9uO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgZnVuY3Rpb24gd2l0aGluIGEgc2FmZXR5IHdpbmRvdy4gVXNlIHRoaXMgZm9yIHRoZSB0b3AgbGV2ZWxcbiAgICogbWV0aG9kcyB0aGF0IHJlc3VsdCBpbiBsYXJnZSBhbW91bnRzIG9mIGNvbXB1dGF0aW9uL211dGF0aW9ucyB0aGF0IHdvdWxkXG4gICAqIG5lZWQgdG8gYmUgc2FmZXR5IGNoZWNrZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1ldGhvZCBNZW1iZXIgb2Ygc2NvcGUgdG8gY2FsbC5cbiAgICogQHBhcmFtIHtPYmplY3R9IHNjb3BlIFNjb3BlIHRvIGludm9rZSBmcm9tLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBhcmdzLi4uIEFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBtZXRob2QgKG9wdGlvbmFsKS5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxwcyBwcmV2ZW50IG5lZWQgdG8gYmluZCBpbiBtYW55IGNhc2VzLlxuICAgKiBAcmV0dXJuIFJldHVybiB2YWx1ZSBmcm9tIGBtZXRob2RgLlxuICAgKi9cbiAgcGVyZm9ybTogZnVuY3Rpb24obWV0aG9kLCBzY29wZSwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAhdGhpcy5pc0luVHJhbnNhY3Rpb24oKSxcbiAgICAgICdUcmFuc2FjdGlvbi5wZXJmb3JtKC4uLik6IENhbm5vdCBpbml0aWFsaXplIGEgdHJhbnNhY3Rpb24gd2hlbiB0aGVyZSAnICtcbiAgICAgICdpcyBhbHJlYWR5IGFuIG91dHN0YW5kaW5nIHRyYW5zYWN0aW9uLidcbiAgICApIDogaW52YXJpYW50KCF0aGlzLmlzSW5UcmFuc2FjdGlvbigpKSk7XG4gICAgdmFyIGVycm9yVGhyb3duO1xuICAgIHZhciByZXQ7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IHRydWU7XG4gICAgICAvLyBDYXRjaGluZyBlcnJvcnMgbWFrZXMgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LCBzbyB3ZSBzdGFydCB3aXRoXG4gICAgICAvLyBlcnJvclRocm93biBzZXQgdG8gdHJ1ZSBiZWZvcmUgc2V0dGluZyBpdCB0byBmYWxzZSBhZnRlciBjYWxsaW5nXG4gICAgICAvLyBjbG9zZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byB0cnVlIGluIHRoZSBmaW5hbGx5IGJsb2NrLCBpdCBtZWFuc1xuICAgICAgLy8gb25lIG9mIHRoZXNlIGNhbGxzIHRocmV3LlxuICAgICAgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgdGhpcy5pbml0aWFsaXplQWxsKDApO1xuICAgICAgcmV0ID0gbWV0aG9kLmNhbGwoc2NvcGUsIGEsIGIsIGMsIGQsIGUsIGYpO1xuICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgLy8gSWYgYG1ldGhvZGAgdGhyb3dzLCBwcmVmZXIgdG8gc2hvdyB0aGF0IHN0YWNrIHRyYWNlIG92ZXIgYW55IHRocm93blxuICAgICAgICAgIC8vIGJ5IGludm9raW5nIGBjbG9zZUFsbGAuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VBbGwoMCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNpbmNlIGBtZXRob2RgIGRpZG4ndCB0aHJvdywgd2UgZG9uJ3Qgd2FudCB0byBzaWxlbmNlIHRoZSBleGNlcHRpb25cbiAgICAgICAgICAvLyBoZXJlLlxuICAgICAgICAgIHRoaXMuY2xvc2VBbGwoMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIGluaXRpYWxpemVBbGw6IGZ1bmN0aW9uKHN0YXJ0SW5kZXgpIHtcbiAgICB2YXIgdHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycztcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3cmFwcGVyID0gdHJhbnNhY3Rpb25XcmFwcGVyc1tpXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGggdGhlXG4gICAgICAgIC8vIE9CU0VSVkVEX0VSUk9SIHN0YXRlIGJlZm9yZSBvdmVyd3JpdGluZyBpdCB3aXRoIHRoZSByZWFsIHJldHVybiB2YWx1ZVxuICAgICAgICAvLyBvZiBpbml0aWFsaXplIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIE9CU0VSVkVEX0VSUk9SIGluIHRoZSBmaW5hbGx5XG4gICAgICAgIC8vIGJsb2NrLCBpdCBtZWFucyB3cmFwcGVyLmluaXRpYWxpemUgdGhyZXcuXG4gICAgICAgIHRoaXMud3JhcHBlckluaXREYXRhW2ldID0gVHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1I7XG4gICAgICAgIHRoaXMud3JhcHBlckluaXREYXRhW2ldID0gd3JhcHBlci5pbml0aWFsaXplID9cbiAgICAgICAgICB3cmFwcGVyLmluaXRpYWxpemUuY2FsbCh0aGlzKSA6XG4gICAgICAgICAgbnVsbDtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmICh0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9PT0gVHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1IpIHtcbiAgICAgICAgICAvLyBUaGUgaW5pdGlhbGl6ZXIgZm9yIHdyYXBwZXIgaSB0aHJldyBhbiBlcnJvcjsgaW5pdGlhbGl6ZSB0aGVcbiAgICAgICAgICAvLyByZW1haW5pbmcgd3JhcHBlcnMgYnV0IHNpbGVuY2UgYW55IGV4Y2VwdGlvbnMgZnJvbSB0aGVtIHRvIGVuc3VyZVxuICAgICAgICAgIC8vIHRoYXQgdGhlIGZpcnN0IGVycm9yIGlzIHRoZSBvbmUgdG8gYnViYmxlIHVwLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVBbGwoaSArIDEpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlcyBlYWNoIG9mIGB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMuY2xvc2VbaV1gIGZ1bmN0aW9ucywgcGFzc2luZyBpbnRvXG4gICAqIHRoZW0gdGhlIHJlc3BlY3RpdmUgcmV0dXJuIHZhbHVlcyBvZiBgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzLmluaXRbaV1gXG4gICAqIChgY2xvc2VgcnMgdGhhdCBjb3JyZXNwb25kIHRvIGluaXRpYWxpemVycyB0aGF0IGZhaWxlZCB3aWxsIG5vdCBiZVxuICAgKiBpbnZva2VkKS5cbiAgICovXG4gIGNsb3NlQWxsOiBmdW5jdGlvbihzdGFydEluZGV4KSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHRoaXMuaXNJblRyYW5zYWN0aW9uKCksXG4gICAgICAnVHJhbnNhY3Rpb24uY2xvc2VBbGwoKTogQ2Fubm90IGNsb3NlIHRyYW5zYWN0aW9uIHdoZW4gbm9uZSBhcmUgb3Blbi4nXG4gICAgKSA6IGludmFyaWFudCh0aGlzLmlzSW5UcmFuc2FjdGlvbigpKSk7XG4gICAgdmFyIHRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnM7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0cmFuc2FjdGlvbldyYXBwZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IHRyYW5zYWN0aW9uV3JhcHBlcnNbaV07XG4gICAgICB2YXIgaW5pdERhdGEgPSB0aGlzLndyYXBwZXJJbml0RGF0YVtpXTtcbiAgICAgIHZhciBlcnJvclRocm93bjtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGhcbiAgICAgICAgLy8gZXJyb3JUaHJvd24gc2V0IHRvIHRydWUgYmVmb3JlIHNldHRpbmcgaXQgdG8gZmFsc2UgYWZ0ZXIgY2FsbGluZ1xuICAgICAgICAvLyBjbG9zZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byB0cnVlIGluIHRoZSBmaW5hbGx5IGJsb2NrLCBpdCBtZWFuc1xuICAgICAgICAvLyB3cmFwcGVyLmNsb3NlIHRocmV3LlxuICAgICAgICBlcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGlmIChpbml0RGF0YSAhPT0gVHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1IgJiYgd3JhcHBlci5jbG9zZSkge1xuICAgICAgICAgIHdyYXBwZXIuY2xvc2UuY2FsbCh0aGlzLCBpbml0RGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgIC8vIFRoZSBjbG9zZXIgZm9yIHdyYXBwZXIgaSB0aHJldyBhbiBlcnJvcjsgY2xvc2UgdGhlIHJlbWFpbmluZ1xuICAgICAgICAgIC8vIHdyYXBwZXJzIGJ1dCBzaWxlbmNlIGFueSBleGNlcHRpb25zIGZyb20gdGhlbSB0byBlbnN1cmUgdGhhdCB0aGVcbiAgICAgICAgICAvLyBmaXJzdCBlcnJvciBpcyB0aGUgb25lIHRvIGJ1YmJsZSB1cC5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUFsbChpICsgMSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGggPSAwO1xuICB9XG59O1xuXG52YXIgVHJhbnNhY3Rpb24gPSB7XG5cbiAgTWl4aW46IE1peGluLFxuXG4gIC8qKlxuICAgKiBUb2tlbiB0byBsb29rIGZvciB0byBkZXRlcm1pbmUgaWYgYW4gZXJyb3Igb2NjdXJlZC5cbiAgICovXG4gIE9CU0VSVkVEX0VSUk9SOiB7fVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9pbnZhcmlhbnRcIjoyOTcsXCJfcHJvY2Vzc1wiOjF9XSwyNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFZpZXdwb3J0TWV0cmljc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFZpZXdwb3J0TWV0cmljcyA9IHtcblxuICBjdXJyZW50U2Nyb2xsTGVmdDogMCxcblxuICBjdXJyZW50U2Nyb2xsVG9wOiAwLFxuXG4gIHJlZnJlc2hTY3JvbGxWYWx1ZXM6IGZ1bmN0aW9uKHNjcm9sbFBvc2l0aW9uKSB7XG4gICAgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxMZWZ0ID0gc2Nyb2xsUG9zaXRpb24ueDtcbiAgICBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbFRvcCA9IHNjcm9sbFBvc2l0aW9uLnk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3cG9ydE1ldHJpY3M7XG5cbn0se31dLDI2NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGFjY3VtdWxhdGVJbnRvXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqXG4gKiBBY2N1bXVsYXRlcyBpdGVtcyB0aGF0IG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGludG8gdGhlIGZpcnN0IG9uZS4gVGhpc1xuICogaXMgdXNlZCB0byBjb25zZXJ2ZSBtZW1vcnkgYnkgYXZvaWRpbmcgYXJyYXkgYWxsb2NhdGlvbnMsIGFuZCB0aHVzIHNhY3JpZmljZXNcbiAqIEFQSSBjbGVhbm5lc3MuIFNpbmNlIGBjdXJyZW50YCBjYW4gYmUgbnVsbCBiZWZvcmUgYmVpbmcgcGFzc2VkIGluIGFuZCBub3RcbiAqIG51bGwgYWZ0ZXIgdGhpcyBmdW5jdGlvbiwgbWFrZSBzdXJlIHRvIGFzc2lnbiBpdCBiYWNrIHRvIGBjdXJyZW50YDpcbiAqXG4gKiBgYSA9IGFjY3VtdWxhdGVJbnRvKGEsIGIpO2BcbiAqXG4gKiBUaGlzIEFQSSBzaG91bGQgYmUgc3BhcmluZ2x5IHVzZWQuIFRyeSBgYWNjdW11bGF0ZWAgZm9yIHNvbWV0aGluZyBjbGVhbmVyLlxuICpcbiAqIEByZXR1cm4geyp8YXJyYXk8Kj59IEFuIGFjY3VtdWxhdGlvbiBvZiBpdGVtcy5cbiAqL1xuXG5mdW5jdGlvbiBhY2N1bXVsYXRlSW50byhjdXJyZW50LCBuZXh0KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgbmV4dCAhPSBudWxsLFxuICAgICdhY2N1bXVsYXRlSW50byguLi4pOiBBY2N1bXVsYXRlZCBpdGVtcyBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nXG4gICkgOiBpbnZhcmlhbnQobmV4dCAhPSBudWxsKSk7XG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIC8vIEJvdGggYXJlIG5vdCBlbXB0eS4gV2FybmluZzogTmV2ZXIgY2FsbCB4LmNvbmNhdCh5KSB3aGVuIHlvdSBhcmUgbm90XG4gIC8vIGNlcnRhaW4gdGhhdCB4IGlzIGFuIEFycmF5ICh4IGNvdWxkIGJlIGEgc3RyaW5nIHdpdGggY29uY2F0IG1ldGhvZCkuXG4gIHZhciBjdXJyZW50SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY3VycmVudCk7XG4gIHZhciBuZXh0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkobmV4dCk7XG5cbiAgaWYgKGN1cnJlbnRJc0FycmF5ICYmIG5leHRJc0FycmF5KSB7XG4gICAgY3VycmVudC5wdXNoLmFwcGx5KGN1cnJlbnQsIG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKGN1cnJlbnRJc0FycmF5KSB7XG4gICAgY3VycmVudC5wdXNoKG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKG5leHRJc0FycmF5KSB7XG4gICAgLy8gQSBiaXQgdG9vIGRhbmdlcm91cyB0byBtdXRhdGUgYG5leHRgLlxuICAgIHJldHVybiBbY3VycmVudF0uY29uY2F0KG5leHQpO1xuICB9XG5cbiAgcmV0dXJuIFtjdXJyZW50LCBuZXh0XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhY2N1bXVsYXRlSW50bztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vaW52YXJpYW50XCI6Mjk3LFwiX3Byb2Nlc3NcIjoxfV0sMjY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBhZGxlcjMyXG4gKi9cblxuLyoganNsaW50IGJpdHdpc2U6dHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBNT0QgPSA2NTUyMTtcblxuLy8gVGhpcyBpcyBhIGNsZWFuLXJvb20gaW1wbGVtZW50YXRpb24gb2YgYWRsZXIzMiBkZXNpZ25lZCBmb3IgZGV0ZWN0aW5nXG4vLyBpZiBtYXJrdXAgaXMgbm90IHdoYXQgd2UgZXhwZWN0IGl0IHRvIGJlLiBJdCBkb2VzIG5vdCBuZWVkIHRvIGJlXG4vLyBjcnlwdG9ncmFwaGljYWxseSBzdHJvbmcsIG9ubHkgcmVhc29uYWJseSBnb29kIGF0IGRldGVjdGluZyBpZiBtYXJrdXBcbi8vIGdlbmVyYXRlZCBvbiB0aGUgc2VydmVyIGlzIGRpZmZlcmVudCB0aGFuIHRoYXQgb24gdGhlIGNsaWVudC5cbmZ1bmN0aW9uIGFkbGVyMzIoZGF0YSkge1xuICB2YXIgYSA9IDE7XG4gIHZhciBiID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgYSA9IChhICsgZGF0YS5jaGFyQ29kZUF0KGkpKSAlIE1PRDtcbiAgICBiID0gKGIgKyBhKSAlIE1PRDtcbiAgfVxuICByZXR1cm4gYSB8IChiIDw8IDE2KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyO1xuXG59LHt9XSwyNjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNhbWVsaXplXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG5cbi8qKlxuICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gY2FtZWxpemUoJ2JhY2tncm91bmQtY29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZENvbG9yXCJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX2h5cGhlblBhdHRlcm4sIGZ1bmN0aW9uKF8sIGNoYXJhY3Rlcikge1xuICAgIHJldHVybiBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemU7XG5cbn0se31dLDI2ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY2FtZWxpemVTdHlsZU5hbWVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjYW1lbGl6ZSA9IHJlcXVpcmUoXCIuL2NhbWVsaXplXCIpO1xuXG52YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJy1tb3otdHJhbnNpdGlvbicpXG4gKiAgIDwgXCJNb3pUcmFuc2l0aW9uXCJcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1zLXRyYW5zaXRpb24nKVxuICogICA8IFwibXNUcmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBBbmRpIFNtaXRoIHN1Z2dlc3RzXG4gKiAoaHR0cDovL3d3dy5hbmRpc21pdGguY29tL2Jsb2cvMjAxMi8wMi9tb2Rlcm5penItcHJlZml4ZWQvKSwgYW4gYC1tc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGNhbWVsaXplKHN0cmluZy5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZVN0eWxlTmFtZTtcblxufSx7XCIuL2NhbWVsaXplXCI6MjY3fV0sMjY5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICogQHByb3ZpZGVzTW9kdWxlIGNsb25lV2l0aFByb3BzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0UHJvcFRyYW5zZmVyZXIgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUcmFuc2ZlcmVyXCIpO1xuXG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIENISUxEUkVOX1BST1AgPSBrZXlPZih7Y2hpbGRyZW46IG51bGx9KTtcblxuLyoqXG4gKiBTb21ldGltZXMgeW91IHdhbnQgdG8gY2hhbmdlIHRoZSBwcm9wcyBvZiBhIGNoaWxkIHBhc3NlZCB0byB5b3UuIFVzdWFsbHlcbiAqIHRoaXMgaXMgdG8gYWRkIGEgQ1NTIGNsYXNzLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBjaGlsZCBjaGlsZCBlbGVtZW50IHlvdSdkIGxpa2UgdG8gY2xvbmVcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBwcm9wcyB5b3UnZCBsaWtlIHRvIG1vZGlmeS4gY2xhc3NOYW1lIGFuZCBzdHlsZSB3aWxsIGJlXG4gKiBtZXJnZWQgYXV0b21hdGljYWxseS5cbiAqIEByZXR1cm4ge1JlYWN0RWxlbWVudH0gYSBjbG9uZSBvZiBjaGlsZCB3aXRoIHByb3BzIG1lcmdlZCBpbi5cbiAqL1xuZnVuY3Rpb24gY2xvbmVXaXRoUHJvcHMoY2hpbGQsIHByb3BzKSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICFjaGlsZC5yZWYsXG4gICAgICAnWW91IGFyZSBjYWxsaW5nIGNsb25lV2l0aFByb3BzKCkgb24gYSBjaGlsZCB3aXRoIGEgcmVmLiBUaGlzIGlzICcgK1xuICAgICAgJ2Rhbmdlcm91cyBiZWNhdXNlIHlvdVxcJ3JlIGNyZWF0aW5nIGEgbmV3IGNoaWxkIHdoaWNoIHdpbGwgbm90IGJlICcgK1xuICAgICAgJ2FkZGVkIGFzIGEgcmVmIHRvIGl0cyBwYXJlbnQuJ1xuICAgICkgOiBudWxsKTtcbiAgfVxuXG4gIHZhciBuZXdQcm9wcyA9IFJlYWN0UHJvcFRyYW5zZmVyZXIubWVyZ2VQcm9wcyhwcm9wcywgY2hpbGQucHJvcHMpO1xuXG4gIC8vIFVzZSBgY2hpbGQucHJvcHMuY2hpbGRyZW5gIGlmIGl0IGlzIHByb3ZpZGVkLlxuICBpZiAoIW5ld1Byb3BzLmhhc093blByb3BlcnR5KENISUxEUkVOX1BST1ApICYmXG4gICAgICBjaGlsZC5wcm9wcy5oYXNPd25Qcm9wZXJ0eShDSElMRFJFTl9QUk9QKSkge1xuICAgIG5ld1Byb3BzLmNoaWxkcmVuID0gY2hpbGQucHJvcHMuY2hpbGRyZW47XG4gIH1cblxuICAvLyBUaGUgY3VycmVudCBBUEkgZG9lc24ndCByZXRhaW4gX293bmVyIGFuZCBfY29udGV4dCwgd2hpY2ggaXMgd2h5IHRoaXNcbiAgLy8gZG9lc24ndCB1c2UgUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzLlxuICByZXR1cm4gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQoY2hpbGQudHlwZSwgbmV3UHJvcHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lV2l0aFByb3BzO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEVsZW1lbnRcIjoyMDksXCIuL1JlYWN0UHJvcFRyYW5zZmVyZXJcIjoyMjksXCIuL2tleU9mXCI6MzA0LFwiLi93YXJuaW5nXCI6MzE4LFwiX3Byb2Nlc3NcIjoxfV0sMjcwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjb250YWluc05vZGVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKFwiLi9pc1RleHROb2RlXCIpO1xuXG4vKmpzbGludCBiaXR3aXNlOnRydWUgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICpcbiAqIEBwYXJhbSB7P0RPTU5vZGV9IG91dGVyTm9kZSBPdXRlciBET00gbm9kZS5cbiAqIEBwYXJhbSB7P0RPTU5vZGV9IGlubmVyTm9kZSBJbm5lciBET00gbm9kZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG91dGVyTm9kZWAgY29udGFpbnMgb3IgaXMgYGlubmVyTm9kZWAuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbnRhaW5zKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7XG5cbn0se1wiLi9pc1RleHROb2RlXCI6MzAxfV0sMjcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjcmVhdGVBcnJheUZyb21NaXhlZFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgdG9BcnJheSA9IHJlcXVpcmUoXCIuL3RvQXJyYXlcIik7XG5cbi8qKlxuICogUGVyZm9ybSBhIGhldXJpc3RpYyB0ZXN0IHRvIGRldGVybWluZSBpZiBhbiBvYmplY3QgaXMgXCJhcnJheS1saWtlXCIuXG4gKlxuICogICBBIG1vbmsgYXNrZWQgSm9zaHUsIGEgWmVuIG1hc3RlciwgXCJIYXMgYSBkb2cgQnVkZGhhIG5hdHVyZT9cIlxuICogICBKb3NodSByZXBsaWVkOiBcIk11LlwiXG4gKlxuICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGl0cyBhcmd1bWVudCBoYXMgXCJhcnJheSBuYXR1cmVcIjogaXQgcmV0dXJuc1xuICogdHJ1ZSBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYWN0dWFsIGFycmF5LCBhbiBgYXJndW1lbnRzJyBvYmplY3QsIG9yIGFuXG4gKiBIVE1MQ29sbGVjdGlvbiAoZS5nLiBub2RlLmNoaWxkTm9kZXMgb3Igbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgpKS5cbiAqXG4gKiBJdCB3aWxsIHJldHVybiBmYWxzZSBmb3Igb3RoZXIgYXJyYXktbGlrZSBvYmplY3RzIGxpa2UgRmlsZWxpc3QuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc0FycmF5TmF0dXJlKG9iaikge1xuICByZXR1cm4gKFxuICAgIC8vIG5vdCBudWxsL2ZhbHNlXG4gICAgISFvYmogJiZcbiAgICAvLyBhcnJheXMgYXJlIG9iamVjdHMsIE5vZGVMaXN0cyBhcmUgZnVuY3Rpb25zIGluIFNhZmFyaVxuICAgICh0eXBlb2Ygb2JqID09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJykgJiZcbiAgICAvLyBxdWFja3MgbGlrZSBhbiBhcnJheVxuICAgICgnbGVuZ3RoJyBpbiBvYmopICYmXG4gICAgLy8gbm90IHdpbmRvd1xuICAgICEoJ3NldEludGVydmFsJyBpbiBvYmopICYmXG4gICAgLy8gbm8gRE9NIG5vZGUgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYW4gYXJyYXktbGlrZVxuICAgIC8vIGEgJ3NlbGVjdCcgZWxlbWVudCBoYXMgJ2xlbmd0aCcgYW5kICdpdGVtJyBwcm9wZXJ0aWVzIG9uIElFOFxuICAgICh0eXBlb2Ygb2JqLm5vZGVUeXBlICE9ICdudW1iZXInKSAmJlxuICAgIChcbiAgICAgIC8vIGEgcmVhbCBhcnJheVxuICAgICAgKC8vIEhUTUxDb2xsZWN0aW9uL05vZGVMaXN0XG4gICAgICAoQXJyYXkuaXNBcnJheShvYmopIHx8XG4gICAgICAvLyBhcmd1bWVudHNcbiAgICAgICgnY2FsbGVlJyBpbiBvYmopIHx8ICdpdGVtJyBpbiBvYmopKVxuICAgIClcbiAgKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXkgYnkgd3JhcHBpbmcgaXQgaW4gYW4gYXJyYXkgaWYgaXQgaXMgbm90LlxuICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhlIGFyZ3VtZW50IGlmIGl0IGlzIGFscmVhZHkgYW4gYXJyYXkuXG4gKlxuICogVGhpcyBpcyBtb3N0bHkgdXNlZnVsIGlkaW9tYXRpY2FsbHk6XG4gKlxuICogICB2YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCdjcmVhdGVBcnJheUZyb21NaXhlZCcpO1xuICpcbiAqICAgZnVuY3Rpb24gdGFrZXNPbmVPck1vcmVUaGluZ3ModGhpbmdzKSB7XG4gKiAgICAgdGhpbmdzID0gY3JlYXRlQXJyYXlGcm9tTWl4ZWQodGhpbmdzKTtcbiAqICAgICAuLi5cbiAqICAgfVxuICpcbiAqIFRoaXMgYWxsb3dzIHlvdSB0byB0cmVhdCBgdGhpbmdzJyBhcyBhbiBhcnJheSwgYnV0IGFjY2VwdCBzY2FsYXJzIGluIHRoZSBBUEkuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gY29udmVydCBhbiBhcnJheS1saWtlIG9iamVjdCwgbGlrZSBgYXJndW1lbnRzYCwgaW50byBhbiBhcnJheVxuICogdXNlIHRvQXJyYXkgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5RnJvbU1peGVkKG9iaikge1xuICBpZiAoIWhhc0FycmF5TmF0dXJlKG9iaikpIHtcbiAgICByZXR1cm4gW29ial07XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5zbGljZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b0FycmF5KG9iaik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBcnJheUZyb21NaXhlZDtcblxufSx7XCIuL3RvQXJyYXlcIjozMTV9XSwyNzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIERlZmVhdCBjaXJjdWxhciByZWZlcmVuY2VzIGJ5IHJlcXVpcmluZyB0aGlzIGRpcmVjdGx5LlxudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKFwiLi9SZWFjdENsYXNzXCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBjb21wb25lbnQgdGhhdCB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiB3aGVuIHVubW91bnRlZC5cbiAqXG4gKiBDb21wb25lbnRzIGxpa2UgPGh0bWw+IDxoZWFkPiBhbmQgPGJvZHk+IGNhbid0IGJlIHJlbW92ZWQgb3IgYWRkZWRcbiAqIGVhc2lseSBpbiBhIGNyb3NzLWJyb3dzZXIgd2F5LCBob3dldmVyIGl0J3MgdmFsdWFibGUgdG8gYmUgYWJsZSB0b1xuICogdGFrZSBhZHZhbnRhZ2Ugb2YgUmVhY3QncyByZWNvbmNpbGlhdGlvbiBmb3Igc3R5bGluZyBhbmQgPHRpdGxlPlxuICogbWFuYWdlbWVudC4gU28gd2UganVzdCBkb2N1bWVudCBpdCBhbmQgdGhyb3cgaW4gZGFuZ2Vyb3VzIGNhc2VzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIHRhZyB0byB3cmFwXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gY29udmVuaWVuY2UgY29uc3RydWN0b3Igb2YgbmV3IGNvbXBvbmVudFxuICovXG5mdW5jdGlvbiBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCh0YWcpIHtcbiAgdmFyIGVsZW1lbnRGYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkodGFnKTtcblxuICB2YXIgRnVsbFBhZ2VDb21wb25lbnQgPSBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzKHtcbiAgICB0YWdOYW1lOiB0YWcudG9VcHBlckNhc2UoKSxcbiAgICBkaXNwbGF5TmFtZTogJ1JlYWN0RnVsbFBhZ2VDb21wb25lbnQnICsgdGFnLFxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICclcyB0cmllZCB0byB1bm1vdW50LiBCZWNhdXNlIG9mIGNyb3NzLWJyb3dzZXIgcXVpcmtzIGl0IGlzICcgK1xuICAgICAgICAnaW1wb3NzaWJsZSB0byB1bm1vdW50IHNvbWUgdG9wLWxldmVsIGNvbXBvbmVudHMgKGVnIDxodG1sPiwgPGhlYWQ+LCAnICtcbiAgICAgICAgJ2FuZCA8Ym9keT4pIHJlbGlhYmx5IGFuZCBlZmZpY2llbnRseS4gVG8gZml4IHRoaXMsIGhhdmUgYSBzaW5nbGUgJyArXG4gICAgICAgICd0b3AtbGV2ZWwgY29tcG9uZW50IHRoYXQgbmV2ZXIgdW5tb3VudHMgcmVuZGVyIHRoZXNlIGVsZW1lbnRzLicsXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQoZmFsc2UpKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlbGVtZW50RmFjdG9yeSh0aGlzLnByb3BzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBGdWxsUGFnZUNvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RDbGFzc1wiOjE4NCxcIi4vUmVhY3RFbGVtZW50XCI6MjA5LFwiLi9pbnZhcmlhbnRcIjoyOTcsXCJfcHJvY2Vzc1wiOjF9XSwyNzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXBcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSwgc3ViOiB0cnVlICovXG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKFwiLi9jcmVhdGVBcnJheUZyb21NaXhlZFwiKTtcbnZhciBnZXRNYXJrdXBXcmFwID0gcmVxdWlyZShcIi4vZ2V0TWFya3VwV3JhcFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogRHVtbXkgY29udGFpbmVyIHVzZWQgdG8gcmVuZGVyIGFsbCBtYXJrdXAuXG4gKi9cbnZhciBkdW1teU5vZGUgPVxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA6IG51bGw7XG5cbi8qKlxuICogUGF0dGVybiB1c2VkIGJ5IGBnZXROb2RlTmFtZWAuXG4gKi9cbnZhciBub2RlTmFtZVBhdHRlcm4gPSAvXlxccyo8KFxcdyspLztcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgYG5vZGVOYW1lYCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiBhIHN0cmluZyBvZiBtYXJrdXAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBTdHJpbmcgb2YgbWFya3VwLlxuICogQHJldHVybiB7P3N0cmluZ30gTm9kZSBuYW1lIG9mIHRoZSBzdXBwbGllZCBtYXJrdXAuXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVOYW1lKG1hcmt1cCkge1xuICB2YXIgbm9kZU5hbWVNYXRjaCA9IG1hcmt1cC5tYXRjaChub2RlTmFtZVBhdHRlcm4pO1xuICByZXR1cm4gbm9kZU5hbWVNYXRjaCAmJiBub2RlTmFtZU1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBub2RlcyByZW5kZXJlZCBmcm9tIHRoZSBzdXBwbGllZCBtYXJrdXAuIFRoZVxuICogb3B0aW9uYWxseSBzdXBwbGllZCBgaGFuZGxlU2NyaXB0YCBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgb25jZSBmb3IgZWFjaFxuICogPHNjcmlwdD4gZWxlbWVudCB0aGF0IGlzIHJlbmRlcmVkLiBJZiBubyBgaGFuZGxlU2NyaXB0YCBmdW5jdGlvbiBpcyBzdXBwbGllZCxcbiAqIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gaWYgYW55IDxzY3JpcHQ+IGVsZW1lbnRzIGFyZSByZW5kZXJlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIEEgc3RyaW5nIG9mIHZhbGlkIEhUTUwgbWFya3VwLlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGhhbmRsZVNjcmlwdCBJbnZva2VkIG9uY2UgZm9yIGVhY2ggcmVuZGVyZWQgPHNjcmlwdD4uXG4gKiBAcmV0dXJuIHthcnJheTxET01FbGVtZW50fERPTVRleHROb2RlPn0gQW4gYXJyYXkgb2YgcmVuZGVyZWQgbm9kZXMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXAsIGhhbmRsZVNjcmlwdCkge1xuICB2YXIgbm9kZSA9IGR1bW15Tm9kZTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudCghIWR1bW15Tm9kZSwgJ2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCBkdW1teSBub3QgaW5pdGlhbGl6ZWQnKSA6IGludmFyaWFudCghIWR1bW15Tm9kZSkpO1xuICB2YXIgbm9kZU5hbWUgPSBnZXROb2RlTmFtZShtYXJrdXApO1xuXG4gIHZhciB3cmFwID0gbm9kZU5hbWUgJiYgZ2V0TWFya3VwV3JhcChub2RlTmFtZSk7XG4gIGlmICh3cmFwKSB7XG4gICAgbm9kZS5pbm5lckhUTUwgPSB3cmFwWzFdICsgbWFya3VwICsgd3JhcFsyXTtcblxuICAgIHZhciB3cmFwRGVwdGggPSB3cmFwWzBdO1xuICAgIHdoaWxlICh3cmFwRGVwdGgtLSkge1xuICAgICAgbm9kZSA9IG5vZGUubGFzdENoaWxkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBub2RlLmlubmVySFRNTCA9IG1hcmt1cDtcbiAgfVxuXG4gIHZhciBzY3JpcHRzID0gbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gIGlmIChzY3JpcHRzLmxlbmd0aCkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBoYW5kbGVTY3JpcHQsXG4gICAgICAnY3JlYXRlTm9kZXNGcm9tTWFya3VwKC4uLik6IFVuZXhwZWN0ZWQgPHNjcmlwdD4gZWxlbWVudCByZW5kZXJlZC4nXG4gICAgKSA6IGludmFyaWFudChoYW5kbGVTY3JpcHQpKTtcbiAgICBjcmVhdGVBcnJheUZyb21NaXhlZChzY3JpcHRzKS5mb3JFYWNoKGhhbmRsZVNjcmlwdCk7XG4gIH1cblxuICB2YXIgbm9kZXMgPSBjcmVhdGVBcnJheUZyb21NaXhlZChub2RlLmNoaWxkTm9kZXMpO1xuICB3aGlsZSAobm9kZS5sYXN0Q2hpbGQpIHtcbiAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjE2OCxcIi4vY3JlYXRlQXJyYXlGcm9tTWl4ZWRcIjoyNzEsXCIuL2dldE1hcmt1cFdyYXBcIjoyODksXCIuL2ludmFyaWFudFwiOjI5NyxcIl9wcm9jZXNzXCI6MX1dLDI3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGN4XG4gKi9cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gbWFyayBzdHJpbmcgbGl0ZXJhbHMgcmVwcmVzZW50aW5nIENTUyBjbGFzcyBuYW1lc1xuICogc28gdGhhdCB0aGV5IGNhbiBiZSB0cmFuc2Zvcm1lZCBzdGF0aWNhbGx5LiBUaGlzIGFsbG93cyBmb3IgbW9kdWxhcml6YXRpb25cbiAqIGFuZCBtaW5pZmljYXRpb24gb2YgQ1NTIGNsYXNzIG5hbWVzLlxuICpcbiAqIEluIHN0YXRpY191cHN0cmVhbSwgdGhpcyBmdW5jdGlvbiBpcyBhY3R1YWxseSBpbXBsZW1lbnRlZCwgYnV0IGl0IHNob3VsZFxuICogZXZlbnR1YWxseSBiZSByZXBsYWNlZCB3aXRoIHNvbWV0aGluZyBtb3JlIGRlc2NyaXB0aXZlLCBhbmQgdGhlIHRyYW5zZm9ybVxuICogdGhhdCBpcyB1c2VkIGluIHRoZSBtYWluIHN0YWNrIHNob3VsZCBiZSBwb3J0ZWQgZm9yIHVzZSBlbHNld2hlcmUuXG4gKlxuICogQHBhcmFtIHN0cmluZ3xvYmplY3QgY2xhc3NOYW1lIHRvIG1vZHVsYXJpemUsIG9yIGFuIG9iamVjdCBvZiBrZXkvdmFsdWVzLlxuICogICAgICAgICAgICAgICAgICAgICAgSW4gdGhlIG9iamVjdCBjYXNlLCB0aGUgdmFsdWVzIGFyZSBjb25kaXRpb25zIHRoYXRcbiAqICAgICAgICAgICAgICAgICAgICAgIGRldGVybWluZSBpZiB0aGUgY2xhc3NOYW1lIGtleXMgc2hvdWxkIGJlIGluY2x1ZGVkLlxuICogQHBhcmFtIFtzdHJpbmcgLi4uXSAgVmFyaWFibGUgbGlzdCBvZiBjbGFzc05hbWVzIGluIHRoZSBzdHJpbmcgY2FzZS5cbiAqIEByZXR1cm4gc3RyaW5nICAgICAgIFJlbmRlcmFibGUgc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc05hbWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgd2FybmVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGN4KGNsYXNzTmFtZXMpIHtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgd2FybmVkLFxuICAgICAgJ1JlYWN0LmFkZG9ucy5jbGFzc1NldCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi4gU2VlICcgK1xuICAgICAgJ2h0dHA6Ly9mYi5tZS9yZWFjdC1hZGRvbnMtY2xhc3NzZXQnXG4gICAgKSA6IG51bGwpO1xuICAgIHdhcm5lZCA9IHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIGNsYXNzTmFtZXMgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoY2xhc3NOYW1lcykuZmlsdGVyKGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuIGNsYXNzTmFtZXNbY2xhc3NOYW1lXTtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5qb2luLmNhbGwoYXJndW1lbnRzLCAnICcpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3g7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL3dhcm5pbmdcIjozMTgsXCJfcHJvY2Vzc1wiOjF9XSwyNzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGRhbmdlcm91c1N0eWxlVmFsdWVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ1NTUHJvcGVydHkgPSByZXF1aXJlKFwiLi9DU1NQcm9wZXJ0eVwiKTtcblxudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSBDU1NQcm9wZXJ0eS5pc1VuaXRsZXNzTnVtYmVyO1xuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSBpbnRvIHRoZSBwcm9wZXIgY3NzIHdyaXRhYmxlIHZhbHVlLiBUaGUgc3R5bGUgbmFtZSBgbmFtZWBcbiAqIHNob3VsZCBiZSBsb2dpY2FsIChubyBoeXBoZW5zKSwgYXMgc3BlY2lmaWVkXG4gKiBpbiBgQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcmAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ1NTIHByb3BlcnR5IG5hbWUgc3VjaCBhcyBgdG9wTWFyZ2luYC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQ1NTIHByb3BlcnR5IHZhbHVlIHN1Y2ggYXMgYDEwcHhgLlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIHN0eWxlIHZhbHVlIHdpdGggZGltZW5zaW9ucyBhcHBsaWVkLlxuICovXG5mdW5jdGlvbiBkYW5nZXJvdXNTdHlsZVZhbHVlKG5hbWUsIHZhbHVlKSB7XG4gIC8vIE5vdGUgdGhhdCB3ZSd2ZSByZW1vdmVkIGVzY2FwZVRleHRGb3JCcm93c2VyKCkgY2FsbHMgaGVyZSBzaW5jZSB0aGVcbiAgLy8gd2hvbGUgc3RyaW5nIHdpbGwgYmUgZXNjYXBlZCB3aGVuIHRoZSBhdHRyaWJ1dGUgaXMgaW5qZWN0ZWQgaW50b1xuICAvLyB0aGUgbWFya3VwLiBJZiB5b3UgcHJvdmlkZSB1bnNhZmUgdXNlciBkYXRhIGhlcmUgdGhleSBjYW4gaW5qZWN0XG4gIC8vIGFyYml0cmFyeSBDU1Mgd2hpY2ggbWF5IGJlIHByb2JsZW1hdGljIChJIGNvdWxkbid0IHJlcHJvIHRoaXMpOlxuICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1hTU19GaWx0ZXJfRXZhc2lvbl9DaGVhdF9TaGVldFxuICAvLyBodHRwOi8vd3d3LnRoZXNwYW5uZXIuY28udWsvMjAwNy8xMS8yNi91bHRpbWF0ZS14c3MtY3NzLWluamVjdGlvbi9cbiAgLy8gVGhpcyBpcyBub3QgYW4gWFNTIGhvbGUgYnV0IGluc3RlYWQgYSBwb3RlbnRpYWwgQ1NTIGluamVjdGlvbiBpc3N1ZVxuICAvLyB3aGljaCBoYXMgbGVhZCB0byBhIGdyZWF0ZXIgZGlzY3Vzc2lvbiBhYm91dCBob3cgd2UncmUgZ29pbmcgdG9cbiAgLy8gdHJ1c3QgVVJMcyBtb3ZpbmcgZm9yd2FyZC4gU2VlICMyMTE1OTAxXG5cbiAgdmFyIGlzRW1wdHkgPSB2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09PSAnJztcbiAgaWYgKGlzRW1wdHkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgaXNOb25OdW1lcmljID0gaXNOYU4odmFsdWUpO1xuICBpZiAoaXNOb25OdW1lcmljIHx8IHZhbHVlID09PSAwIHx8XG4gICAgICBpc1VuaXRsZXNzTnVtYmVyLmhhc093blByb3BlcnR5KG5hbWUpICYmIGlzVW5pdGxlc3NOdW1iZXJbbmFtZV0pIHtcbiAgICByZXR1cm4gJycgKyB2YWx1ZTsgLy8gY2FzdCB0byBzdHJpbmdcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlICsgJ3B4Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkYW5nZXJvdXNTdHlsZVZhbHVlO1xuXG59LHtcIi4vQ1NTUHJvcGVydHlcIjoxNTF9XSwyNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVtcHR5RnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uKGFyZykgeyByZXR1cm4gYXJnOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247XG5cbn0se31dLDI3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVtcHR5T2JqZWN0XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIE9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5T2JqZWN0O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiX3Byb2Nlc3NcIjoxfV0sMjc4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFU0NBUEVfTE9PS1VQID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc+JzogJyZndDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gICdcXCcnOiAnJiN4Mjc7J1xufTtcblxudmFyIEVTQ0FQRV9SRUdFWCA9IC9bJj48XCInXS9nO1xuXG5mdW5jdGlvbiBlc2NhcGVyKG1hdGNoKSB7XG4gIHJldHVybiBFU0NBUEVfTE9PS1VQW21hdGNoXTtcbn1cblxuLyoqXG4gKiBFc2NhcGVzIHRleHQgdG8gcHJldmVudCBzY3JpcHRpbmcgYXR0YWNrcy5cbiAqXG4gKiBAcGFyYW0geyp9IHRleHQgVGV4dCB2YWx1ZSB0byBlc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGV4dCkge1xuICByZXR1cm4gKCcnICsgdGV4dCkucmVwbGFjZShFU0NBUEVfUkVHRVgsIGVzY2FwZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcjtcblxufSx7fV0sMjc5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZmluZERPTU5vZGVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZU1hcFwiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciBpc05vZGUgPSByZXF1aXJlKFwiLi9pc05vZGVcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgRE9NIG5vZGUgcmVuZGVyZWQgYnkgdGhpcyBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR8RE9NRWxlbWVudH0gY29tcG9uZW50T3JFbGVtZW50XG4gKiBAcmV0dXJuIHtET01FbGVtZW50fSBUaGUgcm9vdCBub2RlIG9mIHRoaXMgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gZmluZERPTU5vZGUoY29tcG9uZW50T3JFbGVtZW50KSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgIGlmIChvd25lciAhPT0gbnVsbCkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlcixcbiAgICAgICAgJyVzIGlzIGFjY2Vzc2luZyBnZXRET01Ob2RlIG9yIGZpbmRET01Ob2RlIGluc2lkZSBpdHMgcmVuZGVyKCkuICcgK1xuICAgICAgICAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICtcbiAgICAgICAgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgK1xuICAgICAgICAncmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgJyArXG4gICAgICAgICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLFxuICAgICAgICBvd25lci5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50J1xuICAgICAgKSA6IG51bGwpO1xuICAgICAgb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbXBvbmVudE9yRWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGlzTm9kZShjb21wb25lbnRPckVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudE9yRWxlbWVudDtcbiAgfVxuICBpZiAoUmVhY3RJbnN0YW5jZU1hcC5oYXMoY29tcG9uZW50T3JFbGVtZW50KSkge1xuICAgIHJldHVybiBSZWFjdE1vdW50LmdldE5vZGVGcm9tSW5zdGFuY2UoY29tcG9uZW50T3JFbGVtZW50KTtcbiAgfVxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGNvbXBvbmVudE9yRWxlbWVudC5yZW5kZXIgPT0gbnVsbCB8fFxuICAgIHR5cGVvZiBjb21wb25lbnRPckVsZW1lbnQucmVuZGVyICE9PSAnZnVuY3Rpb24nLFxuICAgICdDb21wb25lbnQgKHdpdGgga2V5czogJXMpIGNvbnRhaW5zIGByZW5kZXJgIG1ldGhvZCAnICtcbiAgICAnYnV0IGlzIG5vdCBtb3VudGVkIGluIHRoZSBET00nLFxuICAgIE9iamVjdC5rZXlzKGNvbXBvbmVudE9yRWxlbWVudClcbiAgKSA6IGludmFyaWFudChjb21wb25lbnRPckVsZW1lbnQucmVuZGVyID09IG51bGwgfHxcbiAgdHlwZW9mIGNvbXBvbmVudE9yRWxlbWVudC5yZW5kZXIgIT09ICdmdW5jdGlvbicpKTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBmYWxzZSxcbiAgICAnRWxlbWVudCBhcHBlYXJzIHRvIGJlIG5laXRoZXIgUmVhY3RDb21wb25lbnQgbm9yIERPTU5vZGUgKGtleXM6ICVzKScsXG4gICAgT2JqZWN0LmtleXMoY29tcG9uZW50T3JFbGVtZW50KVxuICApIDogaW52YXJpYW50KGZhbHNlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZERPTU5vZGU7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0Q3VycmVudE93bmVyXCI6MTkxLFwiLi9SZWFjdEluc3RhbmNlTWFwXCI6MjE5LFwiLi9SZWFjdE1vdW50XCI6MjIzLFwiLi9pbnZhcmlhbnRcIjoyOTcsXCIuL2lzTm9kZVwiOjI5OSxcIi4vd2FybmluZ1wiOjMxOCxcIl9wcm9jZXNzXCI6MX1dLDI4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGZsYXR0ZW5DaGlsZHJlblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSByZXF1aXJlKFwiLi90cmF2ZXJzZUFsbENoaWxkcmVuXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IHBhc3NlZCB0aHJvdWdoIHRyYXZlcnNhbC5cbiAqIEBwYXJhbSB7P1JlYWN0Q29tcG9uZW50fSBjaGlsZCBSZWFjdCBjaGlsZCBjb21wb25lbnQuXG4gKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgU3RyaW5nIG5hbWUgb2Yga2V5IHBhdGggdG8gY2hpbGQuXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUpIHtcbiAgLy8gV2UgZm91bmQgYSBjb21wb25lbnQgaW5zdGFuY2UuXG4gIHZhciByZXN1bHQgPSB0cmF2ZXJzZUNvbnRleHQ7XG4gIHZhciBrZXlVbmlxdWUgPSAhcmVzdWx0Lmhhc093blByb3BlcnR5KG5hbWUpO1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBrZXlVbmlxdWUsXG4gICAgICAnZmxhdHRlbkNoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgJyArXG4gICAgICAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArXG4gICAgICAndGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgdXNlZC4nLFxuICAgICAgbmFtZVxuICAgICkgOiBudWxsKTtcbiAgfVxuICBpZiAoa2V5VW5pcXVlICYmIGNoaWxkICE9IG51bGwpIHtcbiAgICByZXN1bHRbbmFtZV0gPSBjaGlsZDtcbiAgfVxufVxuXG4vKipcbiAqIEZsYXR0ZW5zIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC4gQW55IG51bGxcbiAqIGNoaWxkcmVuIHdpbGwgbm90IGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHRpbmcgb2JqZWN0LlxuICogQHJldHVybiB7IW9iamVjdH0gZmxhdHRlbmVkIGNoaWxkcmVuIGtleWVkIGJ5IG5hbWUuXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5DaGlsZHJlbihjaGlsZHJlbikge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgcmVzdWx0ID0ge307XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0LCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5DaGlsZHJlbjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vdHJhdmVyc2VBbGxDaGlsZHJlblwiOjMxNixcIi4vd2FybmluZ1wiOjMxOCxcIl9wcm9jZXNzXCI6MX1dLDI4MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZm9jdXNOb2RlXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlIGlucHV0L3RleHRhcmVhIHRvIGZvY3VzXG4gKi9cbmZ1bmN0aW9uIGZvY3VzTm9kZShub2RlKSB7XG4gIC8vIElFOCBjYW4gdGhyb3cgXCJDYW4ndCBtb3ZlIGZvY3VzIHRvIHRoZSBjb250cm9sIGJlY2F1c2UgaXQgaXMgaW52aXNpYmxlLFxuICAvLyBub3QgZW5hYmxlZCwgb3Igb2YgYSB0eXBlIHRoYXQgZG9lcyBub3QgYWNjZXB0IHRoZSBmb2N1cy5cIiBmb3IgYWxsIGtpbmRzIG9mXG4gIC8vIHJlYXNvbnMgdGhhdCBhcmUgdG9vIGV4cGVuc2l2ZSBhbmQgZnJhZ2lsZSB0byB0ZXN0LlxuICB0cnkge1xuICAgIG5vZGUuZm9jdXMoKTtcbiAgfSBjYXRjaChlKSB7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb2N1c05vZGU7XG5cbn0se31dLDI4MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZm9yRWFjaEFjY3VtdWxhdGVkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7YXJyYXl9IGFuIFwiYWNjdW11bGF0aW9uXCIgb2YgaXRlbXMgd2hpY2ggaXMgZWl0aGVyIGFuIEFycmF5IG9yXG4gKiBhIHNpbmdsZSBpdGVtLiBVc2VmdWwgd2hlbiBwYWlyZWQgd2l0aCB0aGUgYGFjY3VtdWxhdGVgIG1vZHVsZS4gVGhpcyBpcyBhXG4gKiBzaW1wbGUgdXRpbGl0eSB0aGF0IGFsbG93cyB1cyB0byByZWFzb24gYWJvdXQgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zLCBidXRcbiAqIGhhbmRsaW5nIHRoZSBjYXNlIHdoZW4gdGhlcmUgaXMgZXhhY3RseSBvbmUgaXRlbSAoYW5kIHdlIGRvIG5vdCBuZWVkIHRvXG4gKiBhbGxvY2F0ZSBhbiBhcnJheSkuXG4gKi9cbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSBmdW5jdGlvbihhcnIsIGNiLCBzY29wZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgYXJyLmZvckVhY2goY2IsIHNjb3BlKTtcbiAgfSBlbHNlIGlmIChhcnIpIHtcbiAgICBjYi5jYWxsKHNjb3BlLCBhcnIpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2hBY2N1bXVsYXRlZDtcblxufSx7fV0sMjgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRBY3RpdmVFbGVtZW50XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IGJvZHkgaXMgbm90IHlldCBkZWZpbmVkLlxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KCkgLyo/RE9NRWxlbWVudCovIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB8fCBkb2N1bWVudC5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50O1xuXG59LHt9XSwyODQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEV2ZW50Q2hhckNvZGVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIGBjaGFyQ29kZWAgcmVwcmVzZW50cyB0aGUgYWN0dWFsIFwiY2hhcmFjdGVyIGNvZGVcIiBhbmQgaXMgc2FmZSB0byB1c2Ugd2l0aFxuICogYFN0cmluZy5mcm9tQ2hhckNvZGVgLiBBcyBzdWNoLCBvbmx5IGtleXMgdGhhdCBjb3JyZXNwb25kIHRvIHByaW50YWJsZVxuICogY2hhcmFjdGVycyBwcm9kdWNlIGEgdmFsaWQgYGNoYXJDb2RlYCwgdGhlIG9ubHkgZXhjZXB0aW9uIHRvIHRoaXMgaXMgRW50ZXIuXG4gKiBUaGUgVGFiLWtleSBpcyBjb25zaWRlcmVkIG5vbi1wcmludGFibGUgYW5kIGRvZXMgbm90IGhhdmUgYSBgY2hhckNvZGVgLFxuICogcHJlc3VtYWJseSBiZWNhdXNlIGl0IGRvZXMgbm90IHByb2R1Y2UgYSB0YWItY2hhcmFjdGVyIGluIGJyb3dzZXJzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBgY2hhckNvZGVgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBjaGFyQ29kZTtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuXG4gIGlmICgnY2hhckNvZGUnIGluIG5hdGl2ZUV2ZW50KSB7XG4gICAgY2hhckNvZGUgPSBuYXRpdmVFdmVudC5jaGFyQ29kZTtcblxuICAgIC8vIEZGIGRvZXMgbm90IHNldCBgY2hhckNvZGVgIGZvciB0aGUgRW50ZXIta2V5LCBjaGVjayBhZ2FpbnN0IGBrZXlDb2RlYC5cbiAgICBpZiAoY2hhckNvZGUgPT09IDAgJiYga2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGNoYXJDb2RlID0gMTM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgYGNoYXJDb2RlYCwgYnV0IGBrZXlDb2RlYCBoYXMgdGhlIGNvcnJlY3QgdmFsdWUuXG4gICAgY2hhckNvZGUgPSBrZXlDb2RlO1xuICB9XG5cbiAgLy8gU29tZSBub24tcHJpbnRhYmxlIGtleXMgYXJlIHJlcG9ydGVkIGluIGBjaGFyQ29kZWAvYGtleUNvZGVgLCBkaXNjYXJkIHRoZW0uXG4gIC8vIE11c3Qgbm90IGRpc2NhcmQgdGhlIChub24tKXByaW50YWJsZSBFbnRlci1rZXkuXG4gIGlmIChjaGFyQ29kZSA+PSAzMiB8fCBjaGFyQ29kZSA9PT0gMTMpIHtcbiAgICByZXR1cm4gY2hhckNvZGU7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudENoYXJDb2RlO1xuXG59LHt9XSwyODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEV2ZW50S2V5XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKFwiLi9nZXRFdmVudENoYXJDb2RlXCIpO1xuXG4vKipcbiAqIE5vcm1hbGl6YXRpb24gb2YgZGVwcmVjYXRlZCBIVE1MNSBga2V5YCB2YWx1ZXNcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQjS2V5X25hbWVzXG4gKi9cbnZhciBub3JtYWxpemVLZXkgPSB7XG4gICdFc2MnOiAnRXNjYXBlJyxcbiAgJ1NwYWNlYmFyJzogJyAnLFxuICAnTGVmdCc6ICdBcnJvd0xlZnQnLFxuICAnVXAnOiAnQXJyb3dVcCcsXG4gICdSaWdodCc6ICdBcnJvd1JpZ2h0JyxcbiAgJ0Rvd24nOiAnQXJyb3dEb3duJyxcbiAgJ0RlbCc6ICdEZWxldGUnLFxuICAnV2luJzogJ09TJyxcbiAgJ01lbnUnOiAnQ29udGV4dE1lbnUnLFxuICAnQXBwcyc6ICdDb250ZXh0TWVudScsXG4gICdTY3JvbGwnOiAnU2Nyb2xsTG9jaycsXG4gICdNb3pQcmludGFibGVLZXknOiAnVW5pZGVudGlmaWVkJ1xufTtcblxuLyoqXG4gKiBUcmFuc2xhdGlvbiBmcm9tIGxlZ2FjeSBga2V5Q29kZWAgdG8gSFRNTDUgYGtleWBcbiAqIE9ubHkgc3BlY2lhbCBrZXlzIHN1cHBvcnRlZCwgYWxsIG90aGVycyBkZXBlbmQgb24ga2V5Ym9hcmQgbGF5b3V0IG9yIGJyb3dzZXJcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQjS2V5X25hbWVzXG4gKi9cbnZhciB0cmFuc2xhdGVUb0tleSA9IHtcbiAgODogJ0JhY2tzcGFjZScsXG4gIDk6ICdUYWInLFxuICAxMjogJ0NsZWFyJyxcbiAgMTM6ICdFbnRlcicsXG4gIDE2OiAnU2hpZnQnLFxuICAxNzogJ0NvbnRyb2wnLFxuICAxODogJ0FsdCcsXG4gIDE5OiAnUGF1c2UnLFxuICAyMDogJ0NhcHNMb2NrJyxcbiAgMjc6ICdFc2NhcGUnLFxuICAzMjogJyAnLFxuICAzMzogJ1BhZ2VVcCcsXG4gIDM0OiAnUGFnZURvd24nLFxuICAzNTogJ0VuZCcsXG4gIDM2OiAnSG9tZScsXG4gIDM3OiAnQXJyb3dMZWZ0JyxcbiAgMzg6ICdBcnJvd1VwJyxcbiAgMzk6ICdBcnJvd1JpZ2h0JyxcbiAgNDA6ICdBcnJvd0Rvd24nLFxuICA0NTogJ0luc2VydCcsXG4gIDQ2OiAnRGVsZXRlJyxcbiAgMTEyOiAnRjEnLCAxMTM6ICdGMicsIDExNDogJ0YzJywgMTE1OiAnRjQnLCAxMTY6ICdGNScsIDExNzogJ0Y2JyxcbiAgMTE4OiAnRjcnLCAxMTk6ICdGOCcsIDEyMDogJ0Y5JywgMTIxOiAnRjEwJywgMTIyOiAnRjExJywgMTIzOiAnRjEyJyxcbiAgMTQ0OiAnTnVtTG9jaycsXG4gIDE0NTogJ1Njcm9sbExvY2snLFxuICAyMjQ6ICdNZXRhJ1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgYGtleWAgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50S2V5KG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChuYXRpdmVFdmVudC5rZXkpIHtcbiAgICAvLyBOb3JtYWxpemUgaW5jb25zaXN0ZW50IHZhbHVlcyByZXBvcnRlZCBieSBicm93c2VycyBkdWUgdG9cbiAgICAvLyBpbXBsZW1lbnRhdGlvbnMgb2YgYSB3b3JraW5nIGRyYWZ0IHNwZWNpZmljYXRpb24uXG5cbiAgICAvLyBGaXJlRm94IGltcGxlbWVudHMgYGtleWAgYnV0IHJldHVybnMgYE1velByaW50YWJsZUtleWAgZm9yIGFsbFxuICAgIC8vIHByaW50YWJsZSBjaGFyYWN0ZXJzIChub3JtYWxpemVkIHRvIGBVbmlkZW50aWZpZWRgKSwgaWdub3JlIGl0LlxuICAgIHZhciBrZXkgPSBub3JtYWxpemVLZXlbbmF0aXZlRXZlbnQua2V5XSB8fCBuYXRpdmVFdmVudC5rZXk7XG4gICAgaWYgKGtleSAhPT0gJ1VuaWRlbnRpZmllZCcpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgLy8gQnJvd3NlciBkb2VzIG5vdCBpbXBsZW1lbnQgYGtleWAsIHBvbHlmaWxsIGFzIG11Y2ggb2YgaXQgYXMgd2UgY2FuLlxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgIHZhciBjaGFyQ29kZSA9IGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpO1xuXG4gICAgLy8gVGhlIGVudGVyLWtleSBpcyB0ZWNobmljYWxseSBib3RoIHByaW50YWJsZSBhbmQgbm9uLXByaW50YWJsZSBhbmQgY2FuXG4gICAgLy8gdGh1cyBiZSBjYXB0dXJlZCBieSBga2V5cHJlc3NgLCBubyBvdGhlciBub24tcHJpbnRhYmxlIGtleSBzaG91bGQuXG4gICAgcmV0dXJuIGNoYXJDb2RlID09PSAxMyA/ICdFbnRlcicgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgfVxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAvLyBXaGlsZSB1c2VyIGtleWJvYXJkIGxheW91dCBkZXRlcm1pbmVzIHRoZSBhY3R1YWwgbWVhbmluZyBvZiBlYWNoXG4gICAgLy8gYGtleUNvZGVgIHZhbHVlLCBhbG1vc3QgYWxsIGZ1bmN0aW9uIGtleXMgaGF2ZSBhIHVuaXZlcnNhbCB2YWx1ZS5cbiAgICByZXR1cm4gdHJhbnNsYXRlVG9LZXlbbmF0aXZlRXZlbnQua2V5Q29kZV0gfHwgJ1VuaWRlbnRpZmllZCc7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50S2V5O1xuXG59LHtcIi4vZ2V0RXZlbnRDaGFyQ29kZVwiOjI4NH1dLDI4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRNb2RpZmllclN0YXRlXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUcmFuc2xhdGlvbiBmcm9tIG1vZGlmaWVyIGtleSB0byB0aGUgYXNzb2NpYXRlZCBwcm9wZXJ0eSBpbiB0aGUgZXZlbnQuXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8ja2V5cy1Nb2RpZmllcnNcbiAqL1xuXG52YXIgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gICdBbHQnOiAnYWx0S2V5JyxcbiAgJ0NvbnRyb2wnOiAnY3RybEtleScsXG4gICdNZXRhJzogJ21ldGFLZXknLFxuICAnU2hpZnQnOiAnc2hpZnRLZXknXG59O1xuXG4vLyBJRTggZG9lcyBub3QgaW1wbGVtZW50IGdldE1vZGlmaWVyU3RhdGUgc28gd2Ugc2ltcGx5IG1hcCBpdCB0byB0aGUgb25seVxuLy8gbW9kaWZpZXIga2V5cyBleHBvc2VkIGJ5IHRoZSBldmVudCBpdHNlbGYsIGRvZXMgbm90IHN1cHBvcnQgTG9jay1rZXlzLlxuLy8gQ3VycmVudGx5LCBhbGwgbWFqb3IgYnJvd3NlcnMgZXhjZXB0IENocm9tZSBzZWVtcyB0byBzdXBwb3J0IExvY2sta2V5cy5cbmZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBzeW50aGV0aWNFdmVudCA9IHRoaXM7XG4gIHZhciBuYXRpdmVFdmVudCA9IHN5bnRoZXRpY0V2ZW50Lm5hdGl2ZUV2ZW50O1xuICBpZiAobmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSkge1xuICAgIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZyk7XG4gIH1cbiAgdmFyIGtleVByb3AgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddO1xuICByZXR1cm4ga2V5UHJvcCA/ICEhbmF0aXZlRXZlbnRba2V5UHJvcF0gOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50TW9kaWZpZXJTdGF0ZTtcblxufSx7fV0sMjg3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudFRhcmdldFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0cyB0aGUgdGFyZ2V0IG5vZGUgZnJvbSBhIG5hdGl2ZSBicm93c2VyIGV2ZW50IGJ5IGFjY291bnRpbmcgZm9yXG4gKiBpbmNvbnNpc3RlbmNpZXMgaW4gYnJvd3NlciBET00gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gVGFyZ2V0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG4gIC8vIFNhZmFyaSBtYXkgZmlyZSBldmVudHMgb24gdGV4dCBub2RlcyAoTm9kZS5URVhUX05PREUgaXMgMykuXG4gIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT09IDMgPyB0YXJnZXQucGFyZW50Tm9kZSA6IHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudFRhcmdldDtcblxufSx7fV0sMjg4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRJdGVyYXRvckZuXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsIFN5bWJvbCAqL1xudmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InOyAvLyBCZWZvcmUgU3ltYm9sIHNwZWMuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICpcbiAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICpcbiAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7XG4gKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAqICAgICAgIC4uLlxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGVcbiAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoXG4gICAgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pXG4gICk7XG4gIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpdGVyYXRvckZuO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SXRlcmF0b3JGbjtcblxufSx7fV0sMjg5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0TWFya3VwV3JhcFxuICovXG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIGRldGVjdCB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5LlxuICovXG52YXIgZHVtbXlOb2RlID1cbiAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFNvbWUgYnJvd3NlcnMgY2Fubm90IHVzZSBgaW5uZXJIVE1MYCB0byByZW5kZXIgY2VydGFpbiBlbGVtZW50cyBzdGFuZGFsb25lLFxuICogc28gd2Ugd3JhcCB0aGVtLCByZW5kZXIgdGhlIHdyYXBwZWQgbm9kZXMsIHRoZW4gZXh0cmFjdCB0aGUgZGVzaXJlZCBub2RlLlxuICpcbiAqIEluIElFOCwgY2VydGFpbiBlbGVtZW50cyBjYW5ub3QgcmVuZGVyIGFsb25lLCBzbyB3cmFwIGFsbCBlbGVtZW50cyAoJyonKS5cbiAqL1xudmFyIHNob3VsZFdyYXAgPSB7XG4gIC8vIEZvcmNlIHdyYXBwaW5nIGZvciBTVkcgZWxlbWVudHMgYmVjYXVzZSBpZiB0aGV5IGdldCBjcmVhdGVkIGluc2lkZSBhIDxkaXY+LFxuICAvLyB0aGV5IHdpbGwgYmUgaW5pdGlhbGl6ZWQgaW4gdGhlIHdyb25nIG5hbWVzcGFjZSAoYW5kIHdpbGwgbm90IGRpc3BsYXkpLlxuICAnY2lyY2xlJzogdHJ1ZSxcbiAgJ2NsaXBQYXRoJzogdHJ1ZSxcbiAgJ2RlZnMnOiB0cnVlLFxuICAnZWxsaXBzZSc6IHRydWUsXG4gICdnJzogdHJ1ZSxcbiAgJ2xpbmUnOiB0cnVlLFxuICAnbGluZWFyR3JhZGllbnQnOiB0cnVlLFxuICAncGF0aCc6IHRydWUsXG4gICdwb2x5Z29uJzogdHJ1ZSxcbiAgJ3BvbHlsaW5lJzogdHJ1ZSxcbiAgJ3JhZGlhbEdyYWRpZW50JzogdHJ1ZSxcbiAgJ3JlY3QnOiB0cnVlLFxuICAnc3RvcCc6IHRydWUsXG4gICd0ZXh0JzogdHJ1ZVxufTtcblxudmFyIHNlbGVjdFdyYXAgPSBbMSwgJzxzZWxlY3QgbXVsdGlwbGU9XCJ0cnVlXCI+JywgJzwvc2VsZWN0PiddO1xudmFyIHRhYmxlV3JhcCA9IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddO1xudmFyIHRyV3JhcCA9IFszLCAnPHRhYmxlPjx0Ym9keT48dHI+JywgJzwvdHI+PC90Ym9keT48L3RhYmxlPiddO1xuXG52YXIgc3ZnV3JhcCA9IFsxLCAnPHN2Zz4nLCAnPC9zdmc+J107XG5cbnZhciBtYXJrdXBXcmFwID0ge1xuICAnKic6IFsxLCAnPzxkaXY+JywgJzwvZGl2PiddLFxuXG4gICdhcmVhJzogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAnbGVnZW5kJzogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICdwYXJhbSc6IFsxLCAnPG9iamVjdD4nLCAnPC9vYmplY3Q+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuXG4gICdvcHRncm91cCc6IHNlbGVjdFdyYXAsXG4gICdvcHRpb24nOiBzZWxlY3RXcmFwLFxuXG4gICdjYXB0aW9uJzogdGFibGVXcmFwLFxuICAnY29sZ3JvdXAnOiB0YWJsZVdyYXAsXG4gICd0Ym9keSc6IHRhYmxlV3JhcCxcbiAgJ3Rmb290JzogdGFibGVXcmFwLFxuICAndGhlYWQnOiB0YWJsZVdyYXAsXG5cbiAgJ3RkJzogdHJXcmFwLFxuICAndGgnOiB0cldyYXAsXG5cbiAgJ2NpcmNsZSc6IHN2Z1dyYXAsXG4gICdjbGlwUGF0aCc6IHN2Z1dyYXAsXG4gICdkZWZzJzogc3ZnV3JhcCxcbiAgJ2VsbGlwc2UnOiBzdmdXcmFwLFxuICAnZyc6IHN2Z1dyYXAsXG4gICdsaW5lJzogc3ZnV3JhcCxcbiAgJ2xpbmVhckdyYWRpZW50Jzogc3ZnV3JhcCxcbiAgJ3BhdGgnOiBzdmdXcmFwLFxuICAncG9seWdvbic6IHN2Z1dyYXAsXG4gICdwb2x5bGluZSc6IHN2Z1dyYXAsXG4gICdyYWRpYWxHcmFkaWVudCc6IHN2Z1dyYXAsXG4gICdyZWN0Jzogc3ZnV3JhcCxcbiAgJ3N0b3AnOiBzdmdXcmFwLFxuICAndGV4dCc6IHN2Z1dyYXBcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgbWFya3VwIHdyYXAgY29uZmlndXJhdGlvbiBmb3IgdGhlIHN1cHBsaWVkIGBub2RlTmFtZWAuXG4gKlxuICogTk9URTogVGhpcyBsYXppbHkgZGV0ZWN0cyB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5IGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBub2RlTmFtZSBMb3dlcmNhc2UgYG5vZGVOYW1lYC5cbiAqIEByZXR1cm4gez9hcnJheX0gTWFya3VwIHdyYXAgY29uZmlndXJhdGlvbiwgaWYgYXBwbGljYWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFya3VwV3JhcChub2RlTmFtZSkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KCEhZHVtbXlOb2RlLCAnTWFya3VwIHdyYXBwaW5nIG5vZGUgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoISFkdW1teU5vZGUpKTtcbiAgaWYgKCFtYXJrdXBXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIG5vZGVOYW1lID0gJyonO1xuICB9XG4gIGlmICghc2hvdWxkV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICBpZiAobm9kZU5hbWUgPT09ICcqJykge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8bGluayAvPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1bW15Tm9kZS5pbm5lckhUTUwgPSAnPCcgKyBub2RlTmFtZSArICc+PC8nICsgbm9kZU5hbWUgKyAnPic7XG4gICAgfVxuICAgIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gIWR1bW15Tm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBzaG91bGRXcmFwW25vZGVOYW1lXSA/IG1hcmt1cFdyYXBbbm9kZU5hbWVdIDogbnVsbDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcmt1cFdyYXA7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MTY4LFwiLi9pbnZhcmlhbnRcIjoyOTcsXCJfcHJvY2Vzc1wiOjF9XSwyOTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2l2ZW4gYW55IG5vZGUgcmV0dXJuIHRoZSBmaXJzdCBsZWFmIG5vZGUgd2l0aG91dCBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEByZXR1cm4ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldExlYWZOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUgJiYgbm9kZS5maXJzdENoaWxkKSB7XG4gICAgbm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG5leHQgc2libGluZyB3aXRoaW4gYSBjb250YWluZXIuIFRoaXMgd2lsbCB3YWxrIHVwIHRoZVxuICogRE9NIGlmIGEgbm9kZSdzIHNpYmxpbmdzIGhhdmUgYmVlbiBleGhhdXN0ZWQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudHxET01UZXh0Tm9kZX1cbiAqL1xuZnVuY3Rpb24gZ2V0U2libGluZ05vZGUobm9kZSkge1xuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgICB9XG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCBvYmplY3QgZGVzY3JpYmluZyB0aGUgbm9kZXMgd2hpY2ggY29udGFpbiBjaGFyYWN0ZXJzIGF0IG9mZnNldC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IHJvb3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQocm9vdCwgb2Zmc2V0KSB7XG4gIHZhciBub2RlID0gZ2V0TGVhZk5vZGUocm9vdCk7XG4gIHZhciBub2RlU3RhcnQgPSAwO1xuICB2YXIgbm9kZUVuZCA9IDA7XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgbm9kZUVuZCA9IG5vZGVTdGFydCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuXG4gICAgICBpZiAobm9kZVN0YXJ0IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgLSBub2RlU3RhcnRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgbm9kZVN0YXJ0ID0gbm9kZUVuZDtcbiAgICB9XG5cbiAgICBub2RlID0gZ2V0TGVhZk5vZGUoZ2V0U2libGluZ05vZGUobm9kZSkpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldDtcblxufSx7fV0sMjkxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET0NfTk9ERV9UWVBFID0gOTtcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NRG9jdW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IG1heSBjb250YWluXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIFJlYWN0IGNvbXBvbmVudFxuICogQHJldHVybiB7Pyp9IERPTSBlbGVtZW50IHRoYXQgbWF5IGhhdmUgdGhlIHJlYWN0Um9vdCBJRCwgb3IgbnVsbC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICBpZiAoIWNvbnRhaW5lcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSkge1xuICAgIHJldHVybiBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcjtcblxufSx7fV0sMjkyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRUZXh0Q29udGVudEFjY2Vzc29yXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIGNvbnRlbnRLZXkgPSBudWxsO1xuXG4vKipcbiAqIEdldHMgdGhlIGtleSB1c2VkIHRvIGFjY2VzcyB0ZXh0IGNvbnRlbnQgb24gYSBET00gbm9kZS5cbiAqXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBLZXkgdXNlZCB0byBhY2Nlc3MgdGV4dCBjb250ZW50LlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldFRleHRDb250ZW50QWNjZXNzb3IoKSB7XG4gIGlmICghY29udGVudEtleSAmJiBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICAvLyBQcmVmZXIgdGV4dENvbnRlbnQgdG8gaW5uZXJUZXh0IGJlY2F1c2UgbWFueSBicm93c2VycyBzdXBwb3J0IGJvdGggYnV0XG4gICAgLy8gU1ZHIDx0ZXh0PiBlbGVtZW50cyBkb24ndCBzdXBwb3J0IGlubmVyVGV4dCBldmVuIHdoZW4gPGRpdj4gZG9lcy5cbiAgICBjb250ZW50S2V5ID0gJ3RleHRDb250ZW50JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgP1xuICAgICAgJ3RleHRDb250ZW50JyA6XG4gICAgICAnaW5uZXJUZXh0JztcbiAgfVxuICByZXR1cm4gY29udGVudEtleTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUZXh0Q29udGVudEFjY2Vzc29yO1xuXG59LHtcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoxNjh9XSwyOTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgc3VwcGxpZWQgZWxlbWVudCBvciB3aW5kb3cuXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZXMgYXJlIHVuYm91bmRlZCwgdW5saWtlIGBnZXRTY3JvbGxQb3NpdGlvbmAuIFRoaXMgbWVhbnMgdGhleVxuICogbWF5IGJlIG5lZ2F0aXZlIG9yIGV4Y2VlZCB0aGUgZWxlbWVudCBib3VuZGFyaWVzICh3aGljaCBpcyBwb3NzaWJsZSB1c2luZ1xuICogaW5lcnRpYWwgc2Nyb2xsaW5nKS5cbiAqXG4gKiBAcGFyYW0ge0RPTVdpbmRvd3xET01FbGVtZW50fSBzY3JvbGxhYmxlXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcCB3aXRoIGB4YCBhbmQgYHlgIGtleXMuXG4gKi9cbmZ1bmN0aW9uIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uKHNjcm9sbGFibGUpIHtcbiAgaWYgKHNjcm9sbGFibGUgPT09IHdpbmRvdykge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsXG4gICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiBzY3JvbGxhYmxlLnNjcm9sbExlZnQsXG4gICAgeTogc2Nyb2xsYWJsZS5zY3JvbGxUb3BcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbjtcblxufSx7fV0sMjk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBoeXBoZW5hdGVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIF91cHBlcmNhc2VQYXR0ZXJuID0gLyhbQS1aXSkvZztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBzdHJpbmcsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqXG4gKiBGb3IgQ1NTIHN0eWxlIG5hbWVzLCB1c2UgYGh5cGhlbmF0ZVN0eWxlTmFtZWAgaW5zdGVhZCB3aGljaCB3b3JrcyBwcm9wZXJseVxuICogd2l0aCBhbGwgdmVuZG9yIHByZWZpeGVzLCBpbmNsdWRpbmcgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF91cHBlcmNhc2VQYXR0ZXJuLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGU7XG5cbn0se31dLDI5NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaHlwaGVuYXRlU3R5bGVOYW1lXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaHlwaGVuYXRlID0gcmVxdWlyZShcIi4vaHlwaGVuYXRlXCIpO1xuXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdNb3pUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tb3otdHJhbnNpdGlvblwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdtc1RyYW5zaXRpb24nKVxuICogICA8IFwiLW1zLXRyYW5zaXRpb25cIlxuICpcbiAqIEFzIE1vZGVybml6ciBzdWdnZXN0cyAoaHR0cDovL21vZGVybml6ci5jb20vZG9jcy8jcHJlZml4ZWQpLCBhbiBgbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGAtbXMtYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcblxufSx7XCIuL2h5cGhlbmF0ZVwiOjI5NH1dLDI5NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8vIFRvIGF2b2lkIGEgY3ljbGljIGRlcGVuZGVuY3ksIHdlIGNyZWF0ZSB0aGUgZmluYWwgY2xhc3MgaW4gdGhpcyBtb2R1bGVcbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIgPSBmdW5jdGlvbigpIHsgfTtcbmFzc2lnbihcbiAgUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyLnByb3RvdHlwZSxcbiAgUmVhY3RDb21wb3NpdGVDb21wb25lbnQuTWl4aW4sXG4gIHtcbiAgICBfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDogaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFxuICB9XG4pO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSB0eXBlIHJlZmVyZW5jZSBpcyBhIGtub3duIGludGVybmFsIHR5cGUuIEkuZS4gbm90IGEgdXNlclxuICogcHJvdmlkZWQgY29tcG9zaXRlIHR5cGUuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoaXMgaXMgYSB2YWxpZCBpbnRlcm5hbCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc0ludGVybmFsQ29tcG9uZW50VHlwZSh0eXBlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdHlwZS5wcm90b3R5cGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIHR5cGUucHJvdG90eXBlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHR5cGUucHJvdG90eXBlLnJlY2VpdmVDb21wb25lbnQgPT09ICdmdW5jdGlvbidcbiAgKTtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIFJlYWN0Tm9kZSwgY3JlYXRlIGFuIGluc3RhbmNlIHRoYXQgd2lsbCBhY3R1YWxseSBiZSBtb3VudGVkLlxuICpcbiAqIEBwYXJhbSB7UmVhY3ROb2RlfSBub2RlXG4gKiBAcGFyYW0geyp9IHBhcmVudENvbXBvc2l0ZVR5cGUgVGhlIGNvbXBvc2l0ZSB0eXBlIHRoYXQgcmVzb2x2ZWQgdGhpcy5cbiAqIEByZXR1cm4ge29iamVjdH0gQSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGVsZW1lbnQncyBjb25zdHJ1Y3Rvci5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZnVuY3Rpb24gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChub2RlLCBwYXJlbnRDb21wb3NpdGVUeXBlKSB7XG4gIHZhciBpbnN0YW5jZTtcblxuICBpZiAobm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSBmYWxzZSkge1xuICAgIG5vZGUgPSBSZWFjdEVtcHR5Q29tcG9uZW50LmVtcHR5RWxlbWVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgZWxlbWVudCA9IG5vZGU7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIGVsZW1lbnQgJiYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpLFxuICAgICAgICAnT25seSBmdW5jdGlvbnMgb3Igc3RyaW5ncyBjYW4gYmUgbW91bnRlZCBhcyBSZWFjdCBjb21wb25lbnRzLidcbiAgICAgICkgOiBudWxsKTtcbiAgICB9XG5cbiAgICAvLyBTcGVjaWFsIGNhc2Ugc3RyaW5nIHZhbHVlc1xuICAgIGlmIChwYXJlbnRDb21wb3NpdGVUeXBlID09PSBlbGVtZW50LnR5cGUgJiZcbiAgICAgICAgdHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIEF2b2lkIHJlY3Vyc2lvbiBpZiB0aGUgd3JhcHBlciByZW5kZXJzIGl0c2VsZi5cbiAgICAgIGluc3RhbmNlID0gUmVhY3ROYXRpdmVDb21wb25lbnQuY3JlYXRlSW50ZXJuYWxDb21wb25lbnQoZWxlbWVudCk7XG4gICAgICAvLyBBbGwgbmF0aXZlIGNvbXBvbmVudHMgYXJlIGN1cnJlbnRseSB3cmFwcGVkIGluIGEgY29tcG9zaXRlIHNvIHdlJ3JlXG4gICAgICAvLyBzYWZlIHRvIGFzc3VtZSB0aGF0IHRoaXMgaXMgd2hhdCB3ZSBzaG91bGQgaW5zdGFudGlhdGUuXG4gICAgfSBlbHNlIGlmIChpc0ludGVybmFsQ29tcG9uZW50VHlwZShlbGVtZW50LnR5cGUpKSB7XG4gICAgICAvLyBUaGlzIGlzIHRlbXBvcmFyaWx5IGF2YWlsYWJsZSBmb3IgY3VzdG9tIGNvbXBvbmVudHMgdGhhdCBhcmUgbm90IHN0cmluZ1xuICAgICAgLy8gcmVwcmVzZW5hdGlvbnMuIEkuZS4gQVJULiBPbmNlIHRob3NlIGFyZSB1cGRhdGVkIHRvIHVzZSB0aGUgc3RyaW5nXG4gICAgICAvLyByZXByZXNlbnRhdGlvbiwgd2UgY2FuIGRyb3AgdGhpcyBjb2RlIHBhdGguXG4gICAgICBpbnN0YW5jZSA9IG5ldyBlbGVtZW50LnR5cGUoZWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlID0gbmV3IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlcigpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5vZGUgPT09ICdudW1iZXInKSB7XG4gICAgaW5zdGFuY2UgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5jcmVhdGVJbnN0YW5jZUZvclRleHQobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGZhbHNlLFxuICAgICAgJ0VuY291bnRlcmVkIGludmFsaWQgUmVhY3Qgbm9kZSBvZiB0eXBlICVzJyxcbiAgICAgIHR5cGVvZiBub2RlXG4gICAgKSA6IGludmFyaWFudChmYWxzZSkpO1xuICB9XG5cbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgdHlwZW9mIGluc3RhbmNlLmNvbnN0cnVjdCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIGluc3RhbmNlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgaW5zdGFuY2UucmVjZWl2ZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIGluc3RhbmNlLnVubW91bnRDb21wb25lbnQgPT09ICdmdW5jdGlvbicsXG4gICAgICAnT25seSBSZWFjdCBDb21wb25lbnRzIGNhbiBiZSBtb3VudGVkLidcbiAgICApIDogbnVsbCk7XG4gIH1cblxuICAvLyBTZXRzIHVwIHRoZSBpbnN0YW5jZS4gVGhpcyBjYW4gcHJvYmFibHkganVzdCBtb3ZlIGludG8gdGhlIGNvbnN0cnVjdG9yIG5vdy5cbiAgaW5zdGFuY2UuY29uc3RydWN0KG5vZGUpO1xuXG4gIC8vIFRoZXNlIHR3byBmaWVsZHMgYXJlIHVzZWQgYnkgdGhlIERPTSBhbmQgQVJUIGRpZmZpbmcgYWxnb3JpdGhtc1xuICAvLyByZXNwZWN0aXZlbHkuIEluc3RlYWQgb2YgdXNpbmcgZXhwYW5kb3Mgb24gY29tcG9uZW50cywgd2Ugc2hvdWxkIGJlXG4gIC8vIHN0b3JpbmcgdGhlIHN0YXRlIG5lZWRlZCBieSB0aGUgZGlmZmluZyBhbGdvcml0aG1zIGVsc2V3aGVyZS5cbiAgaW5zdGFuY2UuX21vdW50SW5kZXggPSAwO1xuICBpbnN0YW5jZS5fbW91bnRJbWFnZSA9IG51bGw7XG5cbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIGluc3RhbmNlLl9pc093bmVyTmVjZXNzYXJ5ID0gZmFsc2U7XG4gICAgaW5zdGFuY2UuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gZmFsc2U7XG4gIH1cblxuICAvLyBJbnRlcm5hbCBpbnN0YW5jZXMgc2hvdWxkIGZ1bGx5IGNvbnN0cnVjdGVkIGF0IHRoaXMgcG9pbnQsIHNvIHRoZXkgc2hvdWxkXG4gIC8vIG5vdCBnZXQgYW55IG5ldyBmaWVsZHMgYWRkZWQgdG8gdGhlbSBhdCB0aGlzIHBvaW50LlxuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgaWYgKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucykge1xuICAgICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKGluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOjE3NSxcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIjoxODksXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIjoyMTEsXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCI6MjI2LFwiLi9pbnZhcmlhbnRcIjoyOTcsXCIuL3dhcm5pbmdcIjozMTgsXCJfcHJvY2Vzc1wiOjF9XSwyOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpbnZhcmlhbnRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnSW52YXJpYW50IFZpb2xhdGlvbjogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCJfcHJvY2Vzc1wiOjF9XSwyOTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzRXZlbnRTdXBwb3J0ZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgdXNlSGFzRmVhdHVyZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdXNlSGFzRmVhdHVyZSA9XG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiZcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmXG4gICAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAgIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBldmVudCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGVudmlyb25tZW50LlxuICpcbiAqIE5PVEU6IFRoaXMgd2lsbCBub3Qgd29yayBjb3JyZWN0bHkgZm9yIG5vbi1nZW5lcmljIGV2ZW50cyBzdWNoIGFzIGBjaGFuZ2VgLFxuICogYHJlc2V0YCwgYGxvYWRgLCBgZXJyb3JgLCBhbmQgYHNlbGVjdGAuXG4gKlxuICogQm9ycm93cyBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lU3VmZml4IEV2ZW50IG5hbWUsIGUuZy4gXCJjbGlja1wiLlxuICogQHBhcmFtIHs/Ym9vbGVhbn0gY2FwdHVyZSBDaGVjayBpZiB0aGUgY2FwdHVyZSBwaGFzZSBpcyBzdXBwb3J0ZWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQuXG4gKiBAaW50ZXJuYWxcbiAqIEBsaWNlbnNlIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuICovXG5mdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKGV2ZW50TmFtZVN1ZmZpeCwgY2FwdHVyZSkge1xuICBpZiAoIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSB8fFxuICAgICAgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoIWlzU3VwcG9ydGVkICYmIHVzZUhhc0ZlYXR1cmUgJiYgZXZlbnROYW1lU3VmZml4ID09PSAnd2hlZWwnKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7XG5cbn0se1wiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjE2OH1dLDI5OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNOb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICByZXR1cm4gISEob2JqZWN0ICYmIChcbiAgICAoKHR5cGVvZiBOb2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiZcbiAgICB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpXG4gICkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTtcblxufSx7fV0sMzAwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpc1RleHRJbnB1dEVsZW1lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90aGUtaW5wdXQtZWxlbWVudC5odG1sI2lucHV0LXR5cGUtYXR0ci1zdW1tYXJ5XG4gKi9cbnZhciBzdXBwb3J0ZWRJbnB1dFR5cGVzID0ge1xuICAnY29sb3InOiB0cnVlLFxuICAnZGF0ZSc6IHRydWUsXG4gICdkYXRldGltZSc6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWUsXG4gICdlbWFpbCc6IHRydWUsXG4gICdtb250aCc6IHRydWUsXG4gICdudW1iZXInOiB0cnVlLFxuICAncGFzc3dvcmQnOiB0cnVlLFxuICAncmFuZ2UnOiB0cnVlLFxuICAnc2VhcmNoJzogdHJ1ZSxcbiAgJ3RlbCc6IHRydWUsXG4gICd0ZXh0JzogdHJ1ZSxcbiAgJ3RpbWUnOiB0cnVlLFxuICAndXJsJzogdHJ1ZSxcbiAgJ3dlZWsnOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZWxlbSkge1xuICByZXR1cm4gZWxlbSAmJiAoXG4gICAgKGVsZW0ubm9kZU5hbWUgPT09ICdJTlBVVCcgJiYgc3VwcG9ydGVkSW5wdXRUeXBlc1tlbGVtLnR5cGVdIHx8IGVsZW0ubm9kZU5hbWUgPT09ICdURVhUQVJFQScpXG4gICk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0SW5wdXRFbGVtZW50O1xuXG59LHt9XSwzMDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzVGV4dE5vZGVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoXCIuL2lzTm9kZVwiKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlO1xuXG59LHtcIi4vaXNOb2RlXCI6Mjk5fV0sMzAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBqb2luQ2xhc3Nlc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29tYmluZXMgbXVsdGlwbGUgY2xhc3NOYW1lIHN0cmluZ3MgaW50byBvbmUuXG4gKiBodHRwOi8vanNwZXJmLmNvbS9qb2luY2xhc3Nlcy1hcmdzLXZzLWFycmF5XG4gKlxuICogQHBhcmFtIHsuLi4/c3RyaW5nfSBjbGFzc2VzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGpvaW5DbGFzc2VzKGNsYXNzTmFtZS8qLCAuLi4gKi8pIHtcbiAgaWYgKCFjbGFzc05hbWUpIHtcbiAgICBjbGFzc05hbWUgPSAnJztcbiAgfVxuICB2YXIgbmV4dENsYXNzO1xuICB2YXIgYXJnTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKGFyZ0xlbmd0aCA+IDEpIHtcbiAgICBmb3IgKHZhciBpaSA9IDE7IGlpIDwgYXJnTGVuZ3RoOyBpaSsrKSB7XG4gICAgICBuZXh0Q2xhc3MgPSBhcmd1bWVudHNbaWldO1xuICAgICAgaWYgKG5leHRDbGFzcykge1xuICAgICAgICBjbGFzc05hbWUgPSAoY2xhc3NOYW1lID8gY2xhc3NOYW1lICsgJyAnIDogJycpICsgbmV4dENsYXNzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2xhc3NOYW1lO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGpvaW5DbGFzc2VzO1xuXG59LHt9XSwzMDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlNaXJyb3JcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYW4gZW51bWVyYXRpb24gd2l0aCBrZXlzIGVxdWFsIHRvIHRoZWlyIHZhbHVlLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqICAgdmFyIENPTE9SUyA9IGtleU1pcnJvcih7Ymx1ZTogbnVsbCwgcmVkOiBudWxsfSk7XG4gKiAgIHZhciBteUNvbG9yID0gQ09MT1JTLmJsdWU7XG4gKiAgIHZhciBpc0NvbG9yVmFsaWQgPSAhIUNPTE9SU1tteUNvbG9yXTtcbiAqXG4gKiBUaGUgbGFzdCBsaW5lIGNvdWxkIG5vdCBiZSBwZXJmb3JtZWQgaWYgdGhlIHZhbHVlcyBvZiB0aGUgZ2VuZXJhdGVkIGVudW0gd2VyZVxuICogbm90IGVxdWFsIHRvIHRoZWlyIGtleXMuXG4gKlxuICogICBJbnB1dDogIHtrZXkxOiB2YWwxLCBrZXkyOiB2YWwyfVxuICogICBPdXRwdXQ6IHtrZXkxOiBrZXkxLCBrZXkyOiBrZXkyfVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xudmFyIGtleU1pcnJvciA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcmV0ID0ge307XG4gIHZhciBrZXk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgb2JqIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KG9iaiksXG4gICAgJ2tleU1pcnJvciguLi4pOiBBcmd1bWVudCBtdXN0IGJlIGFuIG9iamVjdC4nXG4gICkgOiBpbnZhcmlhbnQob2JqIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KG9iaikpKTtcbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJldFtrZXldID0ga2V5O1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleU1pcnJvcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vaW52YXJpYW50XCI6Mjk3LFwiX3Byb2Nlc3NcIjoxfV0sMzA0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlPZlxuICovXG5cbi8qKlxuICogQWxsb3dzIGV4dHJhY3Rpb24gb2YgYSBtaW5pZmllZCBrZXkuIExldCdzIHRoZSBidWlsZCBzeXN0ZW0gbWluaWZ5IGtleXNcbiAqIHdpdGhvdXQgbG9vc2luZyB0aGUgYWJpbGl0eSB0byBkeW5hbWljYWxseSB1c2Uga2V5IHN0cmluZ3MgYXMgdmFsdWVzXG4gKiB0aGVtc2VsdmVzLiBQYXNzIGluIGFuIG9iamVjdCB3aXRoIGEgc2luZ2xlIGtleS92YWwgcGFpciBhbmQgaXQgd2lsbCByZXR1cm5cbiAqIHlvdSB0aGUgc3RyaW5nIGtleSBvZiB0aGF0IHNpbmdsZSByZWNvcmQuIFN1cHBvc2UgeW91IHdhbnQgdG8gZ3JhYiB0aGVcbiAqIHZhbHVlIGZvciBhIGtleSAnY2xhc3NOYW1lJyBpbnNpZGUgb2YgYW4gb2JqZWN0LiBLZXkvdmFsIG1pbmlmaWNhdGlvbiBtYXlcbiAqIGhhdmUgYWxpYXNlZCB0aGF0IGtleSB0byBiZSAneGExMicuIGtleU9mKHtjbGFzc05hbWU6IG51bGx9KSB3aWxsIHJldHVyblxuICogJ3hhMTInIGluIHRoYXQgY2FzZS4gUmVzb2x2ZSBrZXlzIHlvdSB3YW50IHRvIHVzZSBvbmNlIGF0IHN0YXJ0dXAgdGltZSwgdGhlblxuICogcmV1c2UgdGhvc2UgcmVzb2x1dGlvbnMuXG4gKi9cbnZhciBrZXlPZiA9IGZ1bmN0aW9uKG9uZUtleU9iaikge1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBvbmVLZXlPYmopIHtcbiAgICBpZiAoIW9uZUtleU9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlPZjtcblxufSx7fV0sMzA1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBtYXBPYmplY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIHByb3ZpZGVkIGBjYWxsYmFja2Agb25jZSBmb3IgZWFjaCBlbnVtZXJhYmxlIG93biBwcm9wZXJ0eSBpbiB0aGVcbiAqIG9iamVjdCBhbmQgY29uc3RydWN0cyBhIG5ldyBvYmplY3QgZnJvbSB0aGUgcmVzdWx0cy4gVGhlIGBjYWxsYmFja2AgaXNcbiAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKlxuICogIC0gdGhlIHByb3BlcnR5IHZhbHVlXG4gKiAgLSB0aGUgcHJvcGVydHkgbmFtZVxuICogIC0gdGhlIG9iamVjdCBiZWluZyB0cmF2ZXJzZWRcbiAqXG4gKiBQcm9wZXJ0aWVzIHRoYXQgYXJlIGFkZGVkIGFmdGVyIHRoZSBjYWxsIHRvIGBtYXBPYmplY3RgIHdpbGwgbm90IGJlIHZpc2l0ZWRcbiAqIGJ5IGBjYWxsYmFja2AuIElmIHRoZSB2YWx1ZXMgb2YgZXhpc3RpbmcgcHJvcGVydGllcyBhcmUgY2hhbmdlZCwgdGhlIHZhbHVlXG4gKiBwYXNzZWQgdG8gYGNhbGxiYWNrYCB3aWxsIGJlIHRoZSB2YWx1ZSBhdCB0aGUgdGltZSBgbWFwT2JqZWN0YCB2aXNpdHMgdGhlbS5cbiAqIFByb3BlcnRpZXMgdGhhdCBhcmUgZGVsZXRlZCBiZWZvcmUgYmVpbmcgdmlzaXRlZCBhcmUgbm90IHZpc2l0ZWQuXG4gKlxuICogQGdyZXAgZnVuY3Rpb24gb2JqZWN0TWFwKClcbiAqIEBncmVwIGZ1bmN0aW9uIG9iak1hcCgpXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0geyp9IGNvbnRleHRcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIG1hcE9iamVjdChvYmplY3QsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgbmFtZSkpIHtcbiAgICAgIHJlc3VsdFtuYW1lXSA9IGNhbGxiYWNrLmNhbGwoY29udGV4dCwgb2JqZWN0W25hbWVdLCBuYW1lLCBvYmplY3QpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcE9iamVjdDtcblxufSx7fV0sMzA2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBtZW1vaXplU3RyaW5nT25seVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTWVtb2l6ZXMgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBvbmUgc3RyaW5nIGFyZ3VtZW50LlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZVN0cmluZ09ubHkoY2FsbGJhY2spIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICBpZiAoIWNhY2hlLmhhc093blByb3BlcnR5KHN0cmluZykpIHtcbiAgICAgIGNhY2hlW3N0cmluZ10gPSBjYWxsYmFjay5jYWxsKHRoaXMsIHN0cmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVtzdHJpbmddO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVTdHJpbmdPbmx5O1xuXG59LHt9XSwzMDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBvbmx5Q2hpbGRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGNoaWxkIGluIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiBhbmQgdmVyaWZpZXMgdGhhdCB0aGVyZVxuICogaXMgb25seSBvbmUgY2hpbGQgaW4gdGhlIGNvbGxlY3Rpb24uIFRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIG9mIHRoaXNcbiAqIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBhIHNpbmdsZSBjaGlsZCBnZXRzIHBhc3NlZCB3aXRob3V0IGEgd3JhcHBlciwgYnV0IHRoZVxuICogcHVycG9zZSBvZiB0aGlzIGhlbHBlciBmdW5jdGlvbiBpcyB0byBhYnN0cmFjdCBhd2F5IHRoZSBwYXJ0aWN1bGFyIHN0cnVjdHVyZVxuICogb2YgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBjaGlsZHJlbiBDaGlsZCBjb2xsZWN0aW9uIHN0cnVjdHVyZS5cbiAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBUaGUgZmlyc3QgYW5kIG9ubHkgYFJlYWN0Q29tcG9uZW50YCBjb250YWluZWQgaW4gdGhlXG4gKiBzdHJ1Y3R1cmUuXG4gKi9cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbiksXG4gICAgJ29ubHlDaGlsZCBtdXN0IGJlIHBhc3NlZCBhIGNoaWxkcmVuIHdpdGggZXhhY3RseSBvbmUgY2hpbGQuJ1xuICApIDogaW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpKTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9ubHlDaGlsZDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RFbGVtZW50XCI6MjA5LFwiLi9pbnZhcmlhbnRcIjoyOTcsXCJfcHJvY2Vzc1wiOjF9XSwzMDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHBlcmZvcm1hbmNlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIHBlcmZvcm1hbmNlO1xuXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHBlcmZvcm1hbmNlID1cbiAgICB3aW5kb3cucGVyZm9ybWFuY2UgfHxcbiAgICB3aW5kb3cubXNQZXJmb3JtYW5jZSB8fFxuICAgIHdpbmRvdy53ZWJraXRQZXJmb3JtYW5jZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwZXJmb3JtYW5jZSB8fCB7fTtcblxufSx7XCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MTY4fV0sMzA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBwZXJmb3JtYW5jZU5vd1xuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgcGVyZm9ybWFuY2UgPSByZXF1aXJlKFwiLi9wZXJmb3JtYW5jZVwiKTtcblxuLyoqXG4gKiBEZXRlY3QgaWYgd2UgY2FuIHVzZSBgd2luZG93LnBlcmZvcm1hbmNlLm5vdygpYCBhbmQgZ3JhY2VmdWxseSBmYWxsYmFjayB0b1xuICogYERhdGUubm93KClgIGlmIGl0IGRvZXNuJ3QgZXhpc3QuIFdlIG5lZWQgdG8gc3VwcG9ydCBGaXJlZm94IDwgMTUgZm9yIG5vd1xuICogYmVjYXVzZSBvZiBGYWNlYm9vaydzIHRlc3RpbmcgaW5mcmFzdHJ1Y3R1cmUuXG4gKi9cbmlmICghcGVyZm9ybWFuY2UgfHwgIXBlcmZvcm1hbmNlLm5vdykge1xuICBwZXJmb3JtYW5jZSA9IERhdGU7XG59XG5cbnZhciBwZXJmb3JtYW5jZU5vdyA9IHBlcmZvcm1hbmNlLm5vdy5iaW5kKHBlcmZvcm1hbmNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwZXJmb3JtYW5jZU5vdztcblxufSx7XCIuL3BlcmZvcm1hbmNlXCI6MzA4fV0sMzEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoXCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiKTtcblxuLyoqXG4gKiBFc2NhcGVzIGF0dHJpYnV0ZSB2YWx1ZSB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpIHtcbiAgcmV0dXJuICdcIicgKyBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodmFsdWUpICsgJ1wiJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlcjtcblxufSx7XCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiOjI3OH1dLDMxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgc2V0SW5uZXJIVE1MXG4gKi9cblxuLyogZ2xvYmFscyBNU0FwcCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgV0hJVEVTUEFDRV9URVNUID0gL15bIFxcclxcblxcdFxcZl0vO1xudmFyIE5PTlZJU0lCTEVfVEVTVCA9IC88KCEtLXxsaW5rfG5vc2NyaXB0fG1ldGF8c2NyaXB0fHN0eWxlKVsgXFxyXFxuXFx0XFxmXFwvPl0vO1xuXG4vKipcbiAqIFNldCB0aGUgaW5uZXJIVE1MIHByb3BlcnR5IG9mIGEgbm9kZSwgZW5zdXJpbmcgdGhhdCB3aGl0ZXNwYWNlIGlzIHByZXNlcnZlZFxuICogZXZlbiBpbiBJRTguXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuICogQGludGVybmFsXG4gKi9cbnZhciBzZXRJbm5lckhUTUwgPSBmdW5jdGlvbihub2RlLCBodG1sKSB7XG4gIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbn07XG5cbi8vIFdpbjggYXBwczogQWxsb3cgYWxsIGh0bWwgdG8gYmUgaW5zZXJ0ZWRcbmlmICh0eXBlb2YgTVNBcHAgIT09ICd1bmRlZmluZWQnICYmIE1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKSB7XG4gIHNldElubmVySFRNTCA9IGZ1bmN0aW9uKG5vZGUsIGh0bWwpIHtcbiAgICBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpIHtcbiAgICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICB9KTtcbiAgfTtcbn1cblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAvLyBJRTg6IFdoZW4gdXBkYXRpbmcgYSBqdXN0IGNyZWF0ZWQgbm9kZSB3aXRoIGlubmVySFRNTCBvbmx5IGxlYWRpbmdcbiAgLy8gd2hpdGVzcGFjZSBpcyByZW1vdmVkLiBXaGVuIHVwZGF0aW5nIGFuIGV4aXN0aW5nIG5vZGUgd2l0aCBpbm5lckhUTUxcbiAgLy8gd2hpdGVzcGFjZSBpbiByb290IFRleHROb2RlcyBpcyBhbHNvIGNvbGxhcHNlZC5cbiAgLy8gQHNlZSBxdWlya3Ntb2RlLm9yZy9idWdyZXBvcnRzL2FyY2hpdmVzLzIwMDQvMTEvaW5uZXJodG1sX2FuZF90Lmh0bWxcblxuICAvLyBGZWF0dXJlIGRldGVjdGlvbjsgb25seSBJRTggaXMga25vd24gdG8gYmVoYXZlIGltcHJvcGVybHkgbGlrZSB0aGlzLlxuICB2YXIgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGVzdEVsZW1lbnQuaW5uZXJIVE1MID0gJyAnO1xuICBpZiAodGVzdEVsZW1lbnQuaW5uZXJIVE1MID09PSAnJykge1xuICAgIHNldElubmVySFRNTCA9IGZ1bmN0aW9uKG5vZGUsIGh0bWwpIHtcbiAgICAgIC8vIE1hZ2ljIHRoZW9yeTogSUU4IHN1cHBvc2VkbHkgZGlmZmVyZW50aWF0ZXMgYmV0d2VlbiBhZGRlZCBhbmQgdXBkYXRlZFxuICAgICAgLy8gbm9kZXMgd2hlbiBwcm9jZXNzaW5nIGlubmVySFRNTCwgaW5uZXJIVE1MIG9uIHVwZGF0ZWQgbm9kZXMgc3VmZmVyc1xuICAgICAgLy8gZnJvbSB3b3JzZSB3aGl0ZXNwYWNlIGJlaGF2aW9yLiBSZS1hZGRpbmcgYSBub2RlIGxpa2UgdGhpcyB0cmlnZ2Vyc1xuICAgICAgLy8gdGhlIGluaXRpYWwgYW5kIG1vcmUgZmF2b3JhYmxlIHdoaXRlc3BhY2UgYmVoYXZpb3IuXG4gICAgICAvLyBUT0RPOiBXaGF0IHRvIGRvIG9uIGEgZGV0YWNoZWQgbm9kZT9cbiAgICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChub2RlLCBub2RlKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgYWxzbyBpbXBsZW1lbnQgYSB3b3JrYXJvdW5kIGZvciBub24tdmlzaWJsZSB0YWdzIGRpc2FwcGVhcmluZyBpbnRvXG4gICAgICAvLyB0aGluIGFpciBvbiBJRTgsIHRoaXMgb25seSBoYXBwZW5zIGlmIHRoZXJlIGlzIG5vIHZpc2libGUgdGV4dFxuICAgICAgLy8gaW4tZnJvbnQgb2YgdGhlIG5vbi12aXNpYmxlIHRhZ3MuIFBpZ2d5YmFjayBvbiB0aGUgd2hpdGVzcGFjZSBmaXhcbiAgICAgIC8vIGFuZCBzaW1wbHkgY2hlY2sgaWYgYW55IG5vbi12aXNpYmxlIHRhZ3MgYXBwZWFyIGluIHRoZSBzb3VyY2UuXG4gICAgICBpZiAoV0hJVEVTUEFDRV9URVNULnRlc3QoaHRtbCkgfHxcbiAgICAgICAgICBodG1sWzBdID09PSAnPCcgJiYgTk9OVklTSUJMRV9URVNULnRlc3QoaHRtbCkpIHtcbiAgICAgICAgLy8gUmVjb3ZlciBsZWFkaW5nIHdoaXRlc3BhY2UgYnkgdGVtcG9yYXJpbHkgcHJlcGVuZGluZyBhbnkgY2hhcmFjdGVyLlxuICAgICAgICAvLyBcXHVGRUZGIGhhcyB0aGUgcG90ZW50aWFsIGFkdmFudGFnZSBvZiBiZWluZyB6ZXJvLXdpZHRoL2ludmlzaWJsZS5cbiAgICAgICAgbm9kZS5pbm5lckhUTUwgPSAnXFx1RkVGRicgKyBodG1sO1xuXG4gICAgICAgIC8vIGRlbGV0ZURhdGEgbGVhdmVzIGFuIGVtcHR5IGBUZXh0Tm9kZWAgd2hpY2ggb2Zmc2V0cyB0aGUgaW5kZXggb2YgYWxsXG4gICAgICAgIC8vIGNoaWxkcmVuLiBEZWZpbml0ZWx5IHdhbnQgdG8gYXZvaWQgdGhpcy5cbiAgICAgICAgdmFyIHRleHROb2RlID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICBpZiAodGV4dE5vZGUuZGF0YS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBub2RlLnJlbW92ZUNoaWxkKHRleHROb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0Tm9kZS5kZWxldGVEYXRhKDAsIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldElubmVySFRNTDtcblxufSx7XCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MTY4fV0sMzEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzZXRUZXh0Q29udGVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZShcIi4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyXCIpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoXCIuL3NldElubmVySFRNTFwiKTtcblxuLyoqXG4gKiBTZXQgdGhlIHRleHRDb250ZW50IHByb3BlcnR5IG9mIGEgbm9kZSwgZW5zdXJpbmcgdGhhdCB3aGl0ZXNwYWNlIGlzIHByZXNlcnZlZFxuICogZXZlbiBpbiBJRTguIGlubmVyVGV4dCBpcyBhIHBvb3Igc3Vic3RpdHV0ZSBmb3IgdGV4dENvbnRlbnQgYW5kLCBhbW9uZyBtYW55XG4gKiBpc3N1ZXMsIGluc2VydHMgPGJyPiBpbnN0ZWFkIG9mIHRoZSBsaXRlcmFsIG5ld2xpbmUgY2hhcnMuIGlubmVySFRNTCBiZWhhdmVzXG4gKiBhcyBpdCBzaG91bGQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQGludGVybmFsXG4gKi9cbnZhciBzZXRUZXh0Q29udGVudCA9IGZ1bmN0aW9uKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59O1xuXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIGlmICghKCd0ZXh0Q29udGVudCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSkge1xuICAgIHNldFRleHRDb250ZW50ID0gZnVuY3Rpb24obm9kZSwgdGV4dCkge1xuICAgICAgc2V0SW5uZXJIVE1MKG5vZGUsIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0ZXh0KSk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRleHRDb250ZW50O1xuXG59LHtcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoxNjgsXCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiOjI3OCxcIi4vc2V0SW5uZXJIVE1MXCI6MzExfV0sMzEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzaGFsbG93RXF1YWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZ1xuICogZmFsc2Ugd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuXG4gKiBvYmpBIGFuZCBvYmpCLiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAob2JqQSA9PT0gb2JqQikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBrZXk7XG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAoa2V5IGluIG9iakEpIHtcbiAgICBpZiAob2JqQS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXG4gICAgICAgICghb2JqQi5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IG9iakFba2V5XSAhPT0gb2JqQltrZXldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBUZXN0IGZvciBCJ3Mga2V5cyBtaXNzaW5nIGZyb20gQS5cbiAgZm9yIChrZXkgaW4gb2JqQikge1xuICAgIGlmIChvYmpCLmhhc093blByb3BlcnR5KGtleSkgJiYgIW9iakEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7XG5cbn0se31dLDMxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG4vKipcbiAqIEdpdmVuIGEgYHByZXZFbGVtZW50YCBhbmQgYG5leHRFbGVtZW50YCwgZGV0ZXJtaW5lcyBpZiB0aGUgZXhpc3RpbmdcbiAqIGluc3RhbmNlIHNob3VsZCBiZSB1cGRhdGVkIGFzIG9wcG9zZWQgdG8gYmVpbmcgZGVzdHJveWVkIG9yIHJlcGxhY2VkIGJ5IGEgbmV3XG4gKiBpbnN0YW5jZS4gQm90aCBhcmd1bWVudHMgYXJlIGVsZW1lbnRzLiBUaGlzIGVuc3VyZXMgdGhhdCB0aGlzIGxvZ2ljIGNhblxuICogb3BlcmF0ZSBvbiBzdGF0ZWxlc3MgdHJlZXMgd2l0aG91dCBhbnkgYmFja2luZyBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IHByZXZFbGVtZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IG5leHRFbGVtZW50XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBleGlzdGluZyBpbnN0YW5jZSBzaG91bGQgYmUgdXBkYXRlZC5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldkVsZW1lbnQsIG5leHRFbGVtZW50KSB7XG4gIGlmIChwcmV2RWxlbWVudCAhPSBudWxsICYmIG5leHRFbGVtZW50ICE9IG51bGwpIHtcbiAgICB2YXIgcHJldlR5cGUgPSB0eXBlb2YgcHJldkVsZW1lbnQ7XG4gICAgdmFyIG5leHRUeXBlID0gdHlwZW9mIG5leHRFbGVtZW50O1xuICAgIGlmIChwcmV2VHlwZSA9PT0gJ3N0cmluZycgfHwgcHJldlR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gKG5leHRUeXBlID09PSAnc3RyaW5nJyB8fCBuZXh0VHlwZSA9PT0gJ251bWJlcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmV4dFR5cGUgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgcHJldkVsZW1lbnQudHlwZSA9PT0gbmV4dEVsZW1lbnQudHlwZSAmJlxuICAgICAgICAgIHByZXZFbGVtZW50LmtleSA9PT0gbmV4dEVsZW1lbnQua2V5KSB7XG4gICAgICAgIHZhciBvd25lcnNNYXRjaCA9IHByZXZFbGVtZW50Ll9vd25lciA9PT0gbmV4dEVsZW1lbnQuX293bmVyO1xuICAgICAgICB2YXIgcHJldk5hbWUgPSBudWxsO1xuICAgICAgICB2YXIgbmV4dE5hbWUgPSBudWxsO1xuICAgICAgICB2YXIgbmV4dERpc3BsYXlOYW1lID0gbnVsbDtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICAgIGlmICghb3duZXJzTWF0Y2gpIHtcbiAgICAgICAgICAgIGlmIChwcmV2RWxlbWVudC5fb3duZXIgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHByZXZFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICBwcmV2RWxlbWVudC5fb3duZXIuZ2V0UHVibGljSW5zdGFuY2UoKS5jb25zdHJ1Y3RvciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHByZXZOYW1lID1cbiAgICAgICAgICAgICAgICBwcmV2RWxlbWVudC5fb3duZXIuZ2V0UHVibGljSW5zdGFuY2UoKS5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0RWxlbWVudC5fb3duZXIgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIG5leHRFbGVtZW50Ll9vd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC5fb3duZXIuZ2V0UHVibGljSW5zdGFuY2UoKS5jb25zdHJ1Y3RvciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIG5leHROYW1lID1cbiAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC5fb3duZXIuZ2V0UHVibGljSW5zdGFuY2UoKS5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0RWxlbWVudC50eXBlICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICBuZXh0RWxlbWVudC50eXBlLmRpc3BsYXlOYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgbmV4dERpc3BsYXlOYW1lID0gbmV4dEVsZW1lbnQudHlwZS5kaXNwbGF5TmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0RWxlbWVudC50eXBlICE9IG51bGwgJiYgdHlwZW9mIG5leHRFbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIG5leHREaXNwbGF5TmFtZSA9IG5leHRFbGVtZW50LnR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5leHRFbGVtZW50LnR5cGUgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAgICAgbmV4dEVsZW1lbnQudHlwZSA9PT0gJ2lucHV0JyB8fFxuICAgICAgICAgICAgICAgIG5leHRFbGVtZW50LnR5cGUgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgICAgICAgICAgaWYgKChwcmV2RWxlbWVudC5fb3duZXIgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgcHJldkVsZW1lbnQuX293bmVyLl9pc093bmVyTmVjZXNzYXJ5ID09PSBmYWxzZSkgfHxcbiAgICAgICAgICAgICAgICAgIChuZXh0RWxlbWVudC5fb3duZXIgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgbmV4dEVsZW1lbnQuX293bmVyLl9pc093bmVyTmVjZXNzYXJ5ID09PSBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJldkVsZW1lbnQuX293bmVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHByZXZFbGVtZW50Ll9vd25lci5faXNPd25lck5lY2Vzc2FyeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXh0RWxlbWVudC5fb3duZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgbmV4dEVsZW1lbnQuX293bmVyLl9pc093bmVyTmVjZXNzYXJ5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICc8JXMgLz4gaXMgYmVpbmcgcmVuZGVyZWQgYnkgYm90aCAlcyBhbmQgJXMgdXNpbmcgdGhlIHNhbWUgJyArXG4gICAgICAgICAgICAgICAgICAna2V5ICglcykgaW4gdGhlIHNhbWUgcGxhY2UuIEN1cnJlbnRseSwgdGhpcyBtZWFucyB0aGF0ICcgK1xuICAgICAgICAgICAgICAgICAgJ3RoZXkgZG9uXFwndCBwcmVzZXJ2ZSBzdGF0ZS4gVGhpcyBiZWhhdmlvciBzaG91bGQgYmUgdmVyeSAnICtcbiAgICAgICAgICAgICAgICAgICdyYXJlIHNvIHdlXFwncmUgY29uc2lkZXJpbmcgZGVwcmVjYXRpbmcgaXQuIFBsZWFzZSBjb250YWN0ICcgK1xuICAgICAgICAgICAgICAgICAgJ3RoZSBSZWFjdCB0ZWFtIGFuZCBleHBsYWluIHlvdXIgdXNlIGNhc2Ugc28gdGhhdCB3ZSBjYW4gJyArXG4gICAgICAgICAgICAgICAgICAndGFrZSB0aGF0IGludG8gY29uc2lkZXJhdGlvbi4nLFxuICAgICAgICAgICAgICAgICAgbmV4dERpc3BsYXlOYW1lIHx8ICdVbmtub3duIENvbXBvbmVudCcsXG4gICAgICAgICAgICAgICAgICBwcmV2TmFtZSB8fCAnW1Vua25vd25dJyxcbiAgICAgICAgICAgICAgICAgIG5leHROYW1lIHx8ICdbVW5rbm93bl0nLFxuICAgICAgICAgICAgICAgICAgcHJldkVsZW1lbnQua2V5XG4gICAgICAgICAgICAgICAgKSA6IG51bGwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvd25lcnNNYXRjaDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi93YXJuaW5nXCI6MzE4LFwiX3Byb2Nlc3NcIjoxfV0sMzE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgdG9BcnJheVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIENvbnZlcnQgYXJyYXktbGlrZSBvYmplY3RzIHRvIGFycmF5cy5cbiAqXG4gKiBUaGlzIEFQSSBhc3N1bWVzIHRoZSBjYWxsZXIga25vd3MgdGhlIGNvbnRlbnRzIG9mIHRoZSBkYXRhIHR5cGUuIEZvciBsZXNzXG4gKiB3ZWxsIGRlZmluZWQgaW5wdXRzIHVzZSBjcmVhdGVBcnJheUZyb21NaXhlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbnxmaWxlbGlzdH0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cbiAgLy8gU29tZSBicm93c2UgYnVpbHRpbiBvYmplY3RzIGNhbiByZXBvcnQgdHlwZW9mICdmdW5jdGlvbicgKGUuZy4gTm9kZUxpc3QgaW5cbiAgLy8gb2xkIHZlcnNpb25zIG9mIFNhZmFyaSkuXG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgIUFycmF5LmlzQXJyYXkob2JqKSAmJlxuICAgICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSxcbiAgICAndG9BcnJheTogQXJyYXktbGlrZSBvYmplY3QgZXhwZWN0ZWQnXG4gICkgOiBpbnZhcmlhbnQoIUFycmF5LmlzQXJyYXkob2JqKSAmJlxuICAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykpKTtcblxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInLFxuICAgICd0b0FycmF5OiBPYmplY3QgbmVlZHMgYSBsZW5ndGggcHJvcGVydHknXG4gICkgOiBpbnZhcmlhbnQodHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicpKTtcblxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGxlbmd0aCA9PT0gMCB8fFxuICAgIChsZW5ndGggLSAxKSBpbiBvYmosXG4gICAgJ3RvQXJyYXk6IE9iamVjdCBzaG91bGQgaGF2ZSBrZXlzIGZvciBpbmRpY2VzJ1xuICApIDogaW52YXJpYW50KGxlbmd0aCA9PT0gMCB8fFxuICAobGVuZ3RoIC0gMSkgaW4gb2JqKSk7XG5cbiAgLy8gT2xkIElFIGRvZXNuJ3QgZ2l2ZSBjb2xsZWN0aW9ucyBhY2Nlc3MgdG8gaGFzT3duUHJvcGVydHkuIEFzc3VtZSBpbnB1dHNcbiAgLy8gd2l0aG91dCBtZXRob2Qgd2lsbCB0aHJvdyBkdXJpbmcgdGhlIHNsaWNlIGNhbGwgYW5kIHNraXAgc3RyYWlnaHQgdG8gdGhlXG4gIC8vIGZhbGxiYWNrLlxuICBpZiAob2JqLmhhc093blByb3BlcnR5KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmopO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElFIDwgOSBkb2VzIG5vdCBzdXBwb3J0IEFycmF5I3NsaWNlIG9uIGNvbGxlY3Rpb25zIG9iamVjdHNcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsIGJhY2sgdG8gY29weWluZyBrZXkgYnkga2V5LiBUaGlzIGFzc3VtZXMgYWxsIGtleXMgaGF2ZSBhIHZhbHVlLFxuICAvLyBzbyB3aWxsIG5vdCBwcmVzZXJ2ZSBzcGFyc2VseSBwb3B1bGF0ZWQgaW5wdXRzLlxuICB2YXIgcmV0ID0gQXJyYXkobGVuZ3RoKTtcbiAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGxlbmd0aDsgaWkrKykge1xuICAgIHJldFtpaV0gPSBvYmpbaWldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9BcnJheTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vaW52YXJpYW50XCI6Mjk3LFwiX3Byb2Nlc3NcIjoxfV0sMzE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgdHJhdmVyc2VBbGxDaGlsZHJlblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdEZyYWdtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RGcmFnbWVudFwiKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCIpO1xuXG52YXIgZ2V0SXRlcmF0b3JGbiA9IHJlcXVpcmUoXCIuL2dldEl0ZXJhdG9yRm5cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgU0VQQVJBVE9SID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuU0VQQVJBVE9SO1xudmFyIFNVQlNFUEFSQVRPUiA9ICc6JztcblxuLyoqXG4gKiBUT0RPOiBUZXN0IHRoYXQgYSBzaW5nbGUgY2hpbGQgYW5kIGFuIGFycmF5IHdpdGggb25lIGl0ZW0gaGF2ZSB0aGUgc2FtZSBrZXlcbiAqIHBhdHRlcm4uXG4gKi9cblxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZXJMb29rdXAgPSB7XG4gICc9JzogJz0wJyxcbiAgJy4nOiAnPTEnLFxuICAnOic6ICc9Midcbn07XG5cbnZhciB1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCA9IC9bPS46XS9nO1xuXG52YXIgZGlkV2FybkFib3V0TWFwcyA9IGZhbHNlO1xuXG5mdW5jdGlvbiB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyKG1hdGNoKSB7XG4gIHJldHVybiB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyTG9va3VwW21hdGNoXTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGtleSBzdHJpbmcgdGhhdCBpZGVudGlmaWVzIGEgY29tcG9uZW50IHdpdGhpbiBhIHNldC5cbiAqXG4gKiBAcGFyYW0geyp9IGNvbXBvbmVudCBBIGNvbXBvbmVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYSBtYW51YWwga2V5LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IHRoYXQgaXMgdXNlZCBpZiBhIG1hbnVhbCBrZXkgaXMgbm90IHByb3ZpZGVkLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRLZXkoY29tcG9uZW50LCBpbmRleCkge1xuICBpZiAoY29tcG9uZW50ICYmIGNvbXBvbmVudC5rZXkgIT0gbnVsbCkge1xuICAgIC8vIEV4cGxpY2l0IGtleVxuICAgIHJldHVybiB3cmFwVXNlclByb3ZpZGVkS2V5KGNvbXBvbmVudC5rZXkpO1xuICB9XG4gIC8vIEltcGxpY2l0IGtleSBkZXRlcm1pbmVkIGJ5IHRoZSBpbmRleCBpbiB0aGUgc2V0XG4gIHJldHVybiBpbmRleC50b1N0cmluZygzNik7XG59XG5cbi8qKlxuICogRXNjYXBlIGEgY29tcG9uZW50IGtleSBzbyB0aGF0IGl0IGlzIHNhZmUgdG8gdXNlIGluIGEgcmVhY3RpZC5cbiAqXG4gKiBAcGFyYW0geyp9IGtleSBDb21wb25lbnQga2V5IHRvIGJlIGVzY2FwZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlc2NhcGVVc2VyUHJvdmlkZWRLZXkodGV4dCkge1xuICByZXR1cm4gKCcnICsgdGV4dCkucmVwbGFjZShcbiAgICB1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCxcbiAgICB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyXG4gICk7XG59XG5cbi8qKlxuICogV3JhcCBhIGBrZXlgIHZhbHVlIGV4cGxpY2l0bHkgcHJvdmlkZWQgYnkgdGhlIHVzZXIgdG8gZGlzdGluZ3Vpc2ggaXQgZnJvbVxuICogaW1wbGljaXRseS1nZW5lcmF0ZWQga2V5cyBnZW5lcmF0ZWQgYnkgYSBjb21wb25lbnQncyBpbmRleCBpbiBpdHMgcGFyZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVmFsdWUgb2YgYSB1c2VyLXByb3ZpZGVkIGBrZXlgIGF0dHJpYnV0ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiB3cmFwVXNlclByb3ZpZGVkS2V5KGtleSkge1xuICByZXR1cm4gJyQnICsgZXNjYXBlVXNlclByb3ZpZGVkS2V5KGtleSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0geyFzdHJpbmd9IG5hbWVTb0ZhciBOYW1lIG9mIHRoZSBrZXkgcGF0aCBzbyBmYXIuXG4gKiBAcGFyYW0geyFudW1iZXJ9IGluZGV4U29GYXIgTnVtYmVyIG9mIGNoaWxkcmVuIGVuY291bnRlcmVkIHVudGlsIHRoaXMgcG9pbnQuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gaW52b2tlIHdpdGggZWFjaCBjaGlsZCBmb3VuZC5cbiAqIEBwYXJhbSB7Pyp9IHRyYXZlcnNlQ29udGV4dCBVc2VkIHRvIHBhc3MgaW5mb3JtYXRpb24gdGhyb3VnaG91dCB0aGUgdHJhdmVyc2FsXG4gKiBwcm9jZXNzLlxuICogQHJldHVybiB7IW51bWJlcn0gVGhlIG51bWJlciBvZiBjaGlsZHJlbiBpbiB0aGlzIHN1YnRyZWUuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKFxuICBjaGlsZHJlbixcbiAgbmFtZVNvRmFyLFxuICBpbmRleFNvRmFyLFxuICBjYWxsYmFjayxcbiAgdHJhdmVyc2VDb250ZXh0XG4pIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgY2hpbGRyZW47XG5cbiAgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnIHx8IHR5cGUgPT09ICdib29sZWFuJykge1xuICAgIC8vIEFsbCBvZiB0aGUgYWJvdmUgYXJlIHBlcmNlaXZlZCBhcyBudWxsLlxuICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaGlsZHJlbiA9PT0gbnVsbCB8fFxuICAgICAgdHlwZSA9PT0gJ3N0cmluZycgfHxcbiAgICAgIHR5cGUgPT09ICdudW1iZXInIHx8XG4gICAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSB7XG4gICAgY2FsbGJhY2soXG4gICAgICB0cmF2ZXJzZUNvbnRleHQsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIC8vIElmIGl0J3MgdGhlIG9ubHkgY2hpbGQsIHRyZWF0IHRoZSBuYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIGFuIGFycmF5XG4gICAgICAvLyBzbyB0aGF0IGl0J3MgY29uc2lzdGVudCBpZiB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGdyb3dzLlxuICAgICAgbmFtZVNvRmFyID09PSAnJyA/IFNFUEFSQVRPUiArIGdldENvbXBvbmVudEtleShjaGlsZHJlbiwgMCkgOiBuYW1lU29GYXIsXG4gICAgICBpbmRleFNvRmFyXG4gICAgKTtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHZhciBjaGlsZCwgbmV4dE5hbWUsIG5leHRJbmRleDtcbiAgdmFyIHN1YnRyZWVDb3VudCA9IDA7IC8vIENvdW50IG9mIGNoaWxkcmVuIGZvdW5kIGluIHRoZSBjdXJyZW50IHN1YnRyZWUuXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIG5leHROYW1lID0gKFxuICAgICAgICAobmFtZVNvRmFyICE9PSAnJyA/IG5hbWVTb0ZhciArIFNVQlNFUEFSQVRPUiA6IFNFUEFSQVRPUikgK1xuICAgICAgICBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGkpXG4gICAgICApO1xuICAgICAgbmV4dEluZGV4ID0gaW5kZXhTb0ZhciArIHN1YnRyZWVDb3VudDtcbiAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHROYW1lLFxuICAgICAgICBuZXh0SW5kZXgsXG4gICAgICAgIGNhbGxiYWNrLFxuICAgICAgICB0cmF2ZXJzZUNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihjaGlsZHJlbik7XG4gICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChjaGlsZHJlbik7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIGlmIChpdGVyYXRvckZuICE9PSBjaGlsZHJlbi5lbnRyaWVzKSB7XG4gICAgICAgIHZhciBpaSA9IDA7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBjaGlsZCA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgbmV4dE5hbWUgPSAoXG4gICAgICAgICAgICAobmFtZVNvRmFyICE9PSAnJyA/IG5hbWVTb0ZhciArIFNVQlNFUEFSQVRPUiA6IFNFUEFSQVRPUikgK1xuICAgICAgICAgICAgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCBpaSsrKVxuICAgICAgICAgICk7XG4gICAgICAgICAgbmV4dEluZGV4ID0gaW5kZXhTb0ZhciArIHN1YnRyZWVDb3VudDtcbiAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoXG4gICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgIG5leHROYW1lLFxuICAgICAgICAgICAgbmV4dEluZGV4LFxuICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICB0cmF2ZXJzZUNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzLFxuICAgICAgICAgICAgJ1VzaW5nIE1hcHMgYXMgY2hpbGRyZW4gaXMgbm90IHlldCBmdWxseSBzdXBwb3J0ZWQuIEl0IGlzIGFuICcgK1xuICAgICAgICAgICAgJ2V4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgbWlnaHQgYmUgcmVtb3ZlZC4gQ29udmVydCBpdCB0byBhICcgK1xuICAgICAgICAgICAgJ3NlcXVlbmNlIC8gaXRlcmFibGUgb2Yga2V5ZWQgUmVhY3RFbGVtZW50cyBpbnN0ZWFkLidcbiAgICAgICAgICApIDogbnVsbCk7XG4gICAgICAgICAgZGlkV2FybkFib3V0TWFwcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXRlcmF0b3Igd2lsbCBwcm92aWRlIGVudHJ5IFtrLHZdIHR1cGxlcyByYXRoZXIgdGhhbiB2YWx1ZXMuXG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgY2hpbGQgPSBlbnRyeVsxXTtcbiAgICAgICAgICAgIG5leHROYW1lID0gKFxuICAgICAgICAgICAgICAobmFtZVNvRmFyICE9PSAnJyA/IG5hbWVTb0ZhciArIFNVQlNFUEFSQVRPUiA6IFNFUEFSQVRPUikgK1xuICAgICAgICAgICAgICB3cmFwVXNlclByb3ZpZGVkS2V5KGVudHJ5WzBdKSArIFNVQlNFUEFSQVRPUiArXG4gICAgICAgICAgICAgIGdldENvbXBvbmVudEtleShjaGlsZCwgMClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBuZXh0SW5kZXggPSBpbmRleFNvRmFyICsgc3VidHJlZUNvdW50O1xuICAgICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKFxuICAgICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgICAgbmV4dE5hbWUsXG4gICAgICAgICAgICAgIG5leHRJbmRleCxcbiAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgIHRyYXZlcnNlQ29udGV4dFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBjaGlsZHJlbi5ub2RlVHlwZSAhPT0gMSxcbiAgICAgICAgJ3RyYXZlcnNlQWxsQ2hpbGRyZW4oLi4uKTogRW5jb3VudGVyZWQgYW4gaW52YWxpZCBjaGlsZDsgRE9NICcgK1xuICAgICAgICAnZWxlbWVudHMgYXJlIG5vdCB2YWxpZCBjaGlsZHJlbiBvZiBSZWFjdCBjb21wb25lbnRzLidcbiAgICAgICkgOiBpbnZhcmlhbnQoY2hpbGRyZW4ubm9kZVR5cGUgIT09IDEpKTtcbiAgICAgIHZhciBmcmFnbWVudCA9IFJlYWN0RnJhZ21lbnQuZXh0cmFjdChjaGlsZHJlbik7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gZnJhZ21lbnQpIHtcbiAgICAgICAgaWYgKGZyYWdtZW50Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBjaGlsZCA9IGZyYWdtZW50W2tleV07XG4gICAgICAgICAgbmV4dE5hbWUgPSAoXG4gICAgICAgICAgICAobmFtZVNvRmFyICE9PSAnJyA/IG5hbWVTb0ZhciArIFNVQlNFUEFSQVRPUiA6IFNFUEFSQVRPUikgK1xuICAgICAgICAgICAgd3JhcFVzZXJQcm92aWRlZEtleShrZXkpICsgU1VCU0VQQVJBVE9SICtcbiAgICAgICAgICAgIGdldENvbXBvbmVudEtleShjaGlsZCwgMClcbiAgICAgICAgICApO1xuICAgICAgICAgIG5leHRJbmRleCA9IGluZGV4U29GYXIgKyBzdWJ0cmVlQ291bnQ7XG4gICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKFxuICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICBuZXh0TmFtZSxcbiAgICAgICAgICAgIG5leHRJbmRleCxcbiAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgdHJhdmVyc2VDb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJ0cmVlQ291bnQ7XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCwgYnV0XG4gKiBtaWdodCBhbHNvIGJlIHNwZWNpZmllZCB0aHJvdWdoIGF0dHJpYnV0ZXM6XG4gKlxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuLCAuLi4pYFxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmxlZnRQYW5lbENoaWxkcmVuLCAuLi4pYFxuICpcbiAqIFRoZSBgdHJhdmVyc2VDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBhcmd1bWVudCB0aGF0IGlzIHBhc3NlZCB0aHJvdWdoIHRoZVxuICogZW50aXJlIHRyYXZlcnNhbC4gSXQgY2FuIGJlIHVzZWQgdG8gc3RvcmUgYWNjdW11bGF0aW9ucyBvciBhbnl0aGluZyBlbHNlIHRoYXRcbiAqIHRoZSBjYWxsYmFjayBtaWdodCBmaW5kIHJlbGV2YW50LlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgb2JqZWN0LlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIFRvIGludm9rZSB1cG9uIHRyYXZlcnNpbmcgZWFjaCBjaGlsZC5cbiAqIEBwYXJhbSB7Pyp9IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IGZvciB0cmF2ZXJzYWwuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCAnJywgMCwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhdmVyc2VBbGxDaGlsZHJlbjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RFbGVtZW50XCI6MjA5LFwiLi9SZWFjdEZyYWdtZW50XCI6MjE1LFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiOjIxOCxcIi4vZ2V0SXRlcmF0b3JGblwiOjI4OCxcIi4vaW52YXJpYW50XCI6Mjk3LFwiLi93YXJuaW5nXCI6MzE4LFwiX3Byb2Nlc3NcIjoxfV0sMzE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgdXBkYXRlXG4gKi9cblxuIC8qIGdsb2JhbCBoYXNPd25Qcm9wZXJ0eTp0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gc2hhbGxvd0NvcHkoeCkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh4KSkge1xuICAgIHJldHVybiB4LmNvbmNhdCgpO1xuICB9IGVsc2UgaWYgKHggJiYgdHlwZW9mIHggPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGFzc2lnbihuZXcgeC5jb25zdHJ1Y3RvcigpLCB4KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geDtcbiAgfVxufVxuXG52YXIgQ09NTUFORF9QVVNIID0ga2V5T2YoeyRwdXNoOiBudWxsfSk7XG52YXIgQ09NTUFORF9VTlNISUZUID0ga2V5T2YoeyR1bnNoaWZ0OiBudWxsfSk7XG52YXIgQ09NTUFORF9TUExJQ0UgPSBrZXlPZih7JHNwbGljZTogbnVsbH0pO1xudmFyIENPTU1BTkRfU0VUID0ga2V5T2YoeyRzZXQ6IG51bGx9KTtcbnZhciBDT01NQU5EX01FUkdFID0ga2V5T2YoeyRtZXJnZTogbnVsbH0pO1xudmFyIENPTU1BTkRfQVBQTFkgPSBrZXlPZih7JGFwcGx5OiBudWxsfSk7XG5cbnZhciBBTExfQ09NTUFORFNfTElTVCA9IFtcbiAgQ09NTUFORF9QVVNILFxuICBDT01NQU5EX1VOU0hJRlQsXG4gIENPTU1BTkRfU1BMSUNFLFxuICBDT01NQU5EX1NFVCxcbiAgQ09NTUFORF9NRVJHRSxcbiAgQ09NTUFORF9BUFBMWVxuXTtcblxudmFyIEFMTF9DT01NQU5EU19TRVQgPSB7fTtcblxuQUxMX0NPTU1BTkRTX0xJU1QuZm9yRWFjaChmdW5jdGlvbihjb21tYW5kKSB7XG4gIEFMTF9DT01NQU5EU19TRVRbY29tbWFuZF0gPSB0cnVlO1xufSk7XG5cbmZ1bmN0aW9uIGludmFyaWFudEFycmF5Q2FzZSh2YWx1ZSwgc3BlYywgY29tbWFuZCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIEFycmF5LmlzQXJyYXkodmFsdWUpLFxuICAgICd1cGRhdGUoKTogZXhwZWN0ZWQgdGFyZ2V0IG9mICVzIHRvIGJlIGFuIGFycmF5OyBnb3QgJXMuJyxcbiAgICBjb21tYW5kLFxuICAgIHZhbHVlXG4gICkgOiBpbnZhcmlhbnQoQXJyYXkuaXNBcnJheSh2YWx1ZSkpKTtcbiAgdmFyIHNwZWNWYWx1ZSA9IHNwZWNbY29tbWFuZF07XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgQXJyYXkuaXNBcnJheShzcGVjVmFsdWUpLFxuICAgICd1cGRhdGUoKTogZXhwZWN0ZWQgc3BlYyBvZiAlcyB0byBiZSBhbiBhcnJheTsgZ290ICVzLiAnICtcbiAgICAnRGlkIHlvdSBmb3JnZXQgdG8gd3JhcCB5b3VyIHBhcmFtZXRlciBpbiBhbiBhcnJheT8nLFxuICAgIGNvbW1hbmQsXG4gICAgc3BlY1ZhbHVlXG4gICkgOiBpbnZhcmlhbnQoQXJyYXkuaXNBcnJheShzcGVjVmFsdWUpKSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSwgc3BlYykge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHR5cGVvZiBzcGVjID09PSAnb2JqZWN0JyxcbiAgICAndXBkYXRlKCk6IFlvdSBwcm92aWRlZCBhIGtleSBwYXRoIHRvIHVwZGF0ZSgpIHRoYXQgZGlkIG5vdCBjb250YWluIG9uZSAnICtcbiAgICAnb2YgJXMuIERpZCB5b3UgZm9yZ2V0IHRvIGluY2x1ZGUgeyVzOiAuLi59PycsXG4gICAgQUxMX0NPTU1BTkRTX0xJU1Quam9pbignLCAnKSxcbiAgICBDT01NQU5EX1NFVFxuICApIDogaW52YXJpYW50KHR5cGVvZiBzcGVjID09PSAnb2JqZWN0JykpO1xuXG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNwZWMsIENPTU1BTkRfU0VUKSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBPYmplY3Qua2V5cyhzcGVjKS5sZW5ndGggPT09IDEsXG4gICAgICAnQ2Fubm90IGhhdmUgbW9yZSB0aGFuIG9uZSBrZXkgaW4gYW4gb2JqZWN0IHdpdGggJXMnLFxuICAgICAgQ09NTUFORF9TRVRcbiAgICApIDogaW52YXJpYW50KE9iamVjdC5rZXlzKHNwZWMpLmxlbmd0aCA9PT0gMSkpO1xuXG4gICAgcmV0dXJuIHNwZWNbQ09NTUFORF9TRVRdO1xuICB9XG5cbiAgdmFyIG5leHRWYWx1ZSA9IHNoYWxsb3dDb3B5KHZhbHVlKTtcblxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzcGVjLCBDT01NQU5EX01FUkdFKSkge1xuICAgIHZhciBtZXJnZU9iaiA9IHNwZWNbQ09NTUFORF9NRVJHRV07XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIG1lcmdlT2JqICYmIHR5cGVvZiBtZXJnZU9iaiA9PT0gJ29iamVjdCcsXG4gICAgICAndXBkYXRlKCk6ICVzIGV4cGVjdHMgYSBzcGVjIG9mIHR5cGUgXFwnb2JqZWN0XFwnOyBnb3QgJXMnLFxuICAgICAgQ09NTUFORF9NRVJHRSxcbiAgICAgIG1lcmdlT2JqXG4gICAgKSA6IGludmFyaWFudChtZXJnZU9iaiAmJiB0eXBlb2YgbWVyZ2VPYmogPT09ICdvYmplY3QnKSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIG5leHRWYWx1ZSAmJiB0eXBlb2YgbmV4dFZhbHVlID09PSAnb2JqZWN0JyxcbiAgICAgICd1cGRhdGUoKTogJXMgZXhwZWN0cyBhIHRhcmdldCBvZiB0eXBlIFxcJ29iamVjdFxcJzsgZ290ICVzJyxcbiAgICAgIENPTU1BTkRfTUVSR0UsXG4gICAgICBuZXh0VmFsdWVcbiAgICApIDogaW52YXJpYW50KG5leHRWYWx1ZSAmJiB0eXBlb2YgbmV4dFZhbHVlID09PSAnb2JqZWN0JykpO1xuICAgIGFzc2lnbihuZXh0VmFsdWUsIHNwZWNbQ09NTUFORF9NRVJHRV0pO1xuICB9XG5cbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc3BlYywgQ09NTUFORF9QVVNIKSkge1xuICAgIGludmFyaWFudEFycmF5Q2FzZSh2YWx1ZSwgc3BlYywgQ09NTUFORF9QVVNIKTtcbiAgICBzcGVjW0NPTU1BTkRfUFVTSF0uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBuZXh0VmFsdWUucHVzaChpdGVtKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNwZWMsIENPTU1BTkRfVU5TSElGVCkpIHtcbiAgICBpbnZhcmlhbnRBcnJheUNhc2UodmFsdWUsIHNwZWMsIENPTU1BTkRfVU5TSElGVCk7XG4gICAgc3BlY1tDT01NQU5EX1VOU0hJRlRdLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgbmV4dFZhbHVlLnVuc2hpZnQoaXRlbSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzcGVjLCBDT01NQU5EX1NQTElDRSkpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgQXJyYXkuaXNBcnJheSh2YWx1ZSksXG4gICAgICAnRXhwZWN0ZWQgJXMgdGFyZ2V0IHRvIGJlIGFuIGFycmF5OyBnb3QgJXMnLFxuICAgICAgQ09NTUFORF9TUExJQ0UsXG4gICAgICB2YWx1ZVxuICAgICkgOiBpbnZhcmlhbnQoQXJyYXkuaXNBcnJheSh2YWx1ZSkpKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgQXJyYXkuaXNBcnJheShzcGVjW0NPTU1BTkRfU1BMSUNFXSksXG4gICAgICAndXBkYXRlKCk6IGV4cGVjdGVkIHNwZWMgb2YgJXMgdG8gYmUgYW4gYXJyYXkgb2YgYXJyYXlzOyBnb3QgJXMuICcgK1xuICAgICAgJ0RpZCB5b3UgZm9yZ2V0IHRvIHdyYXAgeW91ciBwYXJhbWV0ZXJzIGluIGFuIGFycmF5PycsXG4gICAgICBDT01NQU5EX1NQTElDRSxcbiAgICAgIHNwZWNbQ09NTUFORF9TUExJQ0VdXG4gICAgKSA6IGludmFyaWFudChBcnJheS5pc0FycmF5KHNwZWNbQ09NTUFORF9TUExJQ0VdKSkpO1xuICAgIHNwZWNbQ09NTUFORF9TUExJQ0VdLmZvckVhY2goZnVuY3Rpb24oYXJncykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgQXJyYXkuaXNBcnJheShhcmdzKSxcbiAgICAgICAgJ3VwZGF0ZSgpOiBleHBlY3RlZCBzcGVjIG9mICVzIHRvIGJlIGFuIGFycmF5IG9mIGFycmF5czsgZ290ICVzLiAnICtcbiAgICAgICAgJ0RpZCB5b3UgZm9yZ2V0IHRvIHdyYXAgeW91ciBwYXJhbWV0ZXJzIGluIGFuIGFycmF5PycsXG4gICAgICAgIENPTU1BTkRfU1BMSUNFLFxuICAgICAgICBzcGVjW0NPTU1BTkRfU1BMSUNFXVxuICAgICAgKSA6IGludmFyaWFudChBcnJheS5pc0FycmF5KGFyZ3MpKSk7XG4gICAgICBuZXh0VmFsdWUuc3BsaWNlLmFwcGx5KG5leHRWYWx1ZSwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzcGVjLCBDT01NQU5EX0FQUExZKSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2Ygc3BlY1tDT01NQU5EX0FQUExZXSA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICd1cGRhdGUoKTogZXhwZWN0ZWQgc3BlYyBvZiAlcyB0byBiZSBhIGZ1bmN0aW9uOyBnb3QgJXMuJyxcbiAgICAgIENPTU1BTkRfQVBQTFksXG4gICAgICBzcGVjW0NPTU1BTkRfQVBQTFldXG4gICAgKSA6IGludmFyaWFudCh0eXBlb2Ygc3BlY1tDT01NQU5EX0FQUExZXSA9PT0gJ2Z1bmN0aW9uJykpO1xuICAgIG5leHRWYWx1ZSA9IHNwZWNbQ09NTUFORF9BUFBMWV0obmV4dFZhbHVlKTtcbiAgfVxuXG4gIGZvciAodmFyIGsgaW4gc3BlYykge1xuICAgIGlmICghKEFMTF9DT01NQU5EU19TRVQuaGFzT3duUHJvcGVydHkoaykgJiYgQUxMX0NPTU1BTkRTX1NFVFtrXSkpIHtcbiAgICAgIG5leHRWYWx1ZVtrXSA9IHVwZGF0ZSh2YWx1ZVtrXSwgc3BlY1trXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5leHRWYWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGU7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxNzUsXCIuL2ludmFyaWFudFwiOjI5NyxcIi4va2V5T2ZcIjozMDQsXCJfcHJvY2Vzc1wiOjF9XSwzMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB3YXJuaW5nXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBlbXB0eUZ1bmN0aW9uO1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCApIHtmb3IgKHZhciBhcmdzPVtdLCRfXzA9MiwkX18xPWFyZ3VtZW50cy5sZW5ndGg7JF9fMDwkX18xOyRfXzArKykgYXJncy5wdXNoKGFyZ3VtZW50c1skX18wXSk7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgL15bc1xcV10qJC8udGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgIHtyZXR1cm4gYXJnc1thcmdJbmRleCsrXTt9KTtcbiAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2VtcHR5RnVuY3Rpb25cIjoyNzYsXCJfcHJvY2Vzc1wiOjF9XSwzMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9SZWFjdCcpO1xuXG59LHtcIi4vbGliL1JlYWN0XCI6MTc3fV0sMzIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuLy9cbi8vIFdlIHN0b3JlIG91ciBFRSBvYmplY3RzIGluIGEgcGxhaW4gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgYXJlIGV2ZW50IG5hbWVzLlxuLy8gSWYgYE9iamVjdC5jcmVhdGUobnVsbClgIGlzIG5vdCBzdXBwb3J0ZWQgd2UgcHJlZml4IHRoZSBldmVudCBuYW1lcyB3aXRoIGFcbi8vIGB+YCB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYnVpbHQtaW4gb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdCBvdmVycmlkZGVuIG9yXG4vLyB1c2VkIGFzIGFuIGF0dGFjayB2ZWN0b3IuXG4vLyBXZSBhbHNvIGFzc3VtZSB0aGF0IGBPYmplY3QuY3JlYXRlKG51bGwpYCBpcyBhdmFpbGFibGUgd2hlbiB0aGUgZXZlbnQgbmFtZVxuLy8gaXMgYW4gRVM2IFN5bWJvbC5cbi8vXG52YXIgcHJlZml4ID0gdHlwZW9mIE9iamVjdC5jcmVhdGUgIT09ICdmdW5jdGlvbicgPyAnficgOiBmYWxzZTtcblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBFdmVudEVtaXR0ZXIgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRXZlbnQgaGFuZGxlciB0byBiZSBjYWxsZWQuXG4gKiBAcGFyYW0ge01peGVkfSBjb250ZXh0IENvbnRleHQgZm9yIGZ1bmN0aW9uIGV4ZWN1dGlvbi5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IGVtaXQgb25jZVxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEVFKGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHRoaXMuZm4gPSBmbjtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5vbmNlID0gb25jZSB8fCBmYWxzZTtcbn1cblxuLyoqXG4gKiBNaW5pbWFsIEV2ZW50RW1pdHRlciBpbnRlcmZhY2UgdGhhdCBpcyBtb2xkZWQgYWdhaW5zdCB0aGUgTm9kZS5qc1xuICogRXZlbnRFbWl0dGVyIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHsgLyogTm90aGluZyB0byBzZXQgKi8gfVxuXG4vKipcbiAqIEhvbGRzIHRoZSBhc3NpZ25lZCBFdmVudEVtaXR0ZXJzIGJ5IG5hbWUuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBSZXR1cm4gYSBsaXN0IG9mIGFzc2lnbmVkIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgVGhlIGV2ZW50cyB0aGF0IHNob3VsZCBiZSBsaXN0ZWQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGV4aXN0cyBXZSBvbmx5IG5lZWQgdG8ga25vdyBpZiB0aGVyZSBhcmUgbGlzdGVuZXJzLlxuICogQHJldHVybnMge0FycmF5fEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhldmVudCwgZXhpc3RzKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBhdmFpbGFibGUgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGV4aXN0cykgcmV0dXJuICEhYXZhaWxhYmxlO1xuICBpZiAoIWF2YWlsYWJsZSkgcmV0dXJuIFtdO1xuICBpZiAoYXZhaWxhYmxlLmZuKSByZXR1cm4gW2F2YWlsYWJsZS5mbl07XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdmFpbGFibGUubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gYXZhaWxhYmxlW2ldLmZuO1xuICB9XG5cbiAgcmV0dXJuIGVlO1xufTtcblxuLyoqXG4gKiBFbWl0IGFuIGV2ZW50IHRvIGFsbCByZWdpc3RlcmVkIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgVGhlIG5hbWUgb2YgdGhlIGV2ZW50LlxuICogQHJldHVybnMge0Jvb2xlYW59IEluZGljYXRpb24gaWYgd2UndmUgZW1pdHRlZCBhbiBldmVudC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGFyZ3NcbiAgICAsIGk7XG5cbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVycy5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMTogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKCFhcmdzKSBmb3IgKGogPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgYXJnc1tqIC0gMV0gPSBhcmd1bWVudHNbal07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogUmVnaXN0ZXIgYSBuZXcgRXZlbnRMaXN0ZW5lciBmb3IgdGhlIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBOYW1lIG9mIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7RnVuY3Rvbn0gZm4gQ2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge01peGVkfSBjb250ZXh0IFRoZSBjb250ZXh0IG9mIHRoZSBmdW5jdGlvbi5cbiAqIEBhcGkgcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IHRoaXMpXG4gICAgLCBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKSB0aGlzLl9ldmVudHMgPSBwcmVmaXggPyB7fSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHRoaXMuX2V2ZW50c1tldnRdID0gbGlzdGVuZXI7XG4gIGVsc2Uge1xuICAgIGlmICghdGhpcy5fZXZlbnRzW2V2dF0uZm4pIHRoaXMuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICAgIGVsc2UgdGhpcy5fZXZlbnRzW2V2dF0gPSBbXG4gICAgICB0aGlzLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJcbiAgICBdO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZCBhbiBFdmVudExpc3RlbmVyIHRoYXQncyBvbmx5IGNhbGxlZCBvbmNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCBOYW1lIG9mIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIENhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgdGhpcywgdHJ1ZSlcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpIHRoaXMuX2V2ZW50cyA9IHByZWZpeCA/IHt9IDogT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgdGhpcy5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lcjtcbiAgZWxzZSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XS5mbikgdGhpcy5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gICAgZWxzZSB0aGlzLl9ldmVudHNbZXZ0XSA9IFtcbiAgICAgIHRoaXMuX2V2ZW50c1tldnRdLCBsaXN0ZW5lclxuICAgIF07XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgVGhlIGV2ZW50IHdlIHdhbnQgdG8gcmVtb3ZlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIHRoYXQgd2UgbmVlZCB0byBmaW5kLlxuICogQHBhcmFtIHtNaXhlZH0gY29udGV4dCBPbmx5IHJlbW92ZSBsaXN0ZW5lcnMgbWF0Y2hpbmcgdGhpcyBjb250ZXh0LlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIE9ubHkgcmVtb3ZlIG9uY2UgbGlzdGVuZXJzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiB0aGlzO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XVxuICAgICwgZXZlbnRzID0gW107XG5cbiAgaWYgKGZuKSB7XG4gICAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgICAgaWYgKFxuICAgICAgICAgICBsaXN0ZW5lcnMuZm4gIT09IGZuXG4gICAgICAgIHx8IChvbmNlICYmICFsaXN0ZW5lcnMub25jZSlcbiAgICAgICAgfHwgKGNvbnRleHQgJiYgbGlzdGVuZXJzLmNvbnRleHQgIT09IGNvbnRleHQpXG4gICAgICApIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmZuICE9PSBmblxuICAgICAgICAgIHx8IChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSlcbiAgICAgICAgICB8fCAoY29udGV4dCAmJiBsaXN0ZW5lcnNbaV0uY29udGV4dCAhPT0gY29udGV4dClcbiAgICAgICAgKSB7XG4gICAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vXG4gIC8vIFJlc2V0IHRoZSBhcnJheSwgb3IgcmVtb3ZlIGl0IGNvbXBsZXRlbHkgaWYgd2UgaGF2ZSBubyBtb3JlIGxpc3RlbmVycy5cbiAgLy9cbiAgaWYgKGV2ZW50cy5sZW5ndGgpIHtcbiAgICB0aGlzLl9ldmVudHNbZXZ0XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gIH0gZWxzZSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1tldnRdO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzIG9yIG9ubHkgdGhlIGxpc3RlbmVycyBmb3IgdGhlIHNwZWNpZmllZCBldmVudC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgVGhlIGV2ZW50IHdhbnQgdG8gcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgaWYgKCF0aGlzLl9ldmVudHMpIHJldHVybiB0aGlzO1xuXG4gIGlmIChldmVudCkgZGVsZXRlIHRoaXMuX2V2ZW50c1twcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XTtcbiAgZWxzZSB0aGlzLl9ldmVudHMgPSBwcmVmaXggPyB7fSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gQWxpYXMgbWV0aG9kcyBuYW1lcyBiZWNhdXNlIHBlb3BsZSByb2xsIGxpa2UgdGhhdC5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbjtcblxuLy9cbi8vIFRoaXMgZnVuY3Rpb24gZG9lc24ndCBhcHBseSBhbnltb3JlLlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBFeHBvc2UgdGhlIHByZWZpeC5cbi8vXG5FdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5pZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG5cbn0se31dLDMyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEEgbW9kdWxlIG9mIG1ldGhvZHMgdGhhdCB5b3Ugd2FudCB0byBpbmNsdWRlIGluIGFsbCBhY3Rpb25zLlxuICogVGhpcyBtb2R1bGUgaXMgY29uc3VtZWQgYnkgYGNyZWF0ZUFjdGlvbmAuXG4gKi9cblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHt9O1xufSx7fV0sMzIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLmNyZWF0ZWRTdG9yZXMgPSBbXTtcblxuZXhwb3J0cy5jcmVhdGVkQWN0aW9ucyA9IFtdO1xuXG5leHBvcnRzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHdoaWxlIChleHBvcnRzLmNyZWF0ZWRTdG9yZXMubGVuZ3RoKSB7XG4gICAgICAgIGV4cG9ydHMuY3JlYXRlZFN0b3Jlcy5wb3AoKTtcbiAgICB9XG4gICAgd2hpbGUgKGV4cG9ydHMuY3JlYXRlZEFjdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIGV4cG9ydHMuY3JlYXRlZEFjdGlvbnMucG9wKCk7XG4gICAgfVxufTtcbn0se31dLDMyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF8gPSByZXF1aXJlKFwiLi91dGlsc1wiKSxcbiAgICBtYWtlciA9IHJlcXVpcmUoXCIuL2pvaW5zXCIpLmluc3RhbmNlSm9pbkNyZWF0b3I7XG5cbi8qKlxuICogRXh0cmFjdCBjaGlsZCBsaXN0ZW5hYmxlcyBmcm9tIGEgcGFyZW50IGZyb20gdGhlaXJcbiAqIGNoaWxkcmVuIHByb3BlcnR5IGFuZCByZXR1cm4gdGhlbSBpbiBhIGtleWVkIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBsaXN0ZW5hYmxlIFRoZSBwYXJlbnQgbGlzdGVuYWJsZVxuICovXG52YXIgbWFwQ2hpbGRMaXN0ZW5hYmxlcyA9IGZ1bmN0aW9uIG1hcENoaWxkTGlzdGVuYWJsZXMobGlzdGVuYWJsZSkge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgY2hpbGRyZW4gPSB7fSxcbiAgICAgICAgY2hpbGROYW1lO1xuICAgIGZvciAoOyBpIDwgKGxpc3RlbmFibGUuY2hpbGRyZW4gfHwgW10pLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNoaWxkTmFtZSA9IGxpc3RlbmFibGUuY2hpbGRyZW5baV07XG4gICAgICAgIGlmIChsaXN0ZW5hYmxlW2NoaWxkTmFtZV0pIHtcbiAgICAgICAgICAgIGNoaWxkcmVuW2NoaWxkTmFtZV0gPSBsaXN0ZW5hYmxlW2NoaWxkTmFtZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xufTtcblxuLyoqXG4gKiBNYWtlIGEgZmxhdCBkaWN0aW9uYXJ5IG9mIGFsbCBsaXN0ZW5hYmxlcyBpbmNsdWRpbmcgdGhlaXJcbiAqIHBvc3NpYmxlIGNoaWxkcmVuIChyZWN1cnNpdmVseSksIGNvbmNhdGVuYXRpbmcgbmFtZXMgaW4gY2FtZWxDYXNlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBsaXN0ZW5hYmxlcyBUaGUgdG9wLWxldmVsIGxpc3RlbmFibGVzXG4gKi9cbnZhciBmbGF0dGVuTGlzdGVuYWJsZXMgPSBmdW5jdGlvbiBmbGF0dGVuTGlzdGVuYWJsZXMobGlzdGVuYWJsZXMpIHtcbiAgICB2YXIgZmxhdHRlbmVkID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGxpc3RlbmFibGVzKSB7XG4gICAgICAgIHZhciBsaXN0ZW5hYmxlID0gbGlzdGVuYWJsZXNba2V5XTtcbiAgICAgICAgdmFyIGNoaWxkTWFwID0gbWFwQ2hpbGRMaXN0ZW5hYmxlcyhsaXN0ZW5hYmxlKTtcblxuICAgICAgICAvLyByZWN1cnNpdmVseSBmbGF0dGVuIGNoaWxkcmVuXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IGZsYXR0ZW5MaXN0ZW5hYmxlcyhjaGlsZE1hcCk7XG5cbiAgICAgICAgLy8gYWRkIHRoZSBwcmltYXJ5IGxpc3RlbmFibGUgYW5kIGNoaWxyZW5cbiAgICAgICAgZmxhdHRlbmVkW2tleV0gPSBsaXN0ZW5hYmxlO1xuICAgICAgICBmb3IgKHZhciBjaGlsZEtleSBpbiBjaGlsZHJlbikge1xuICAgICAgICAgICAgdmFyIGNoaWxkTGlzdGVuYWJsZSA9IGNoaWxkcmVuW2NoaWxkS2V5XTtcbiAgICAgICAgICAgIGZsYXR0ZW5lZFtrZXkgKyBfLmNhcGl0YWxpemUoY2hpbGRLZXkpXSA9IGNoaWxkTGlzdGVuYWJsZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmbGF0dGVuZWQ7XG59O1xuXG4vKipcbiAqIEEgbW9kdWxlIG9mIG1ldGhvZHMgcmVsYXRlZCB0byBsaXN0ZW5pbmcuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZXJuYWwgdXRpbGl0eSBmdW5jdGlvbiB1c2VkIGJ5IGB2YWxpZGF0ZUxpc3RlbmluZ2BcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QWN0aW9ufFN0b3JlfSBsaXN0ZW5hYmxlIFRoZSBsaXN0ZW5hYmxlIHdlIHdhbnQgdG8gc2VhcmNoIGZvclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUaGUgcmVzdWx0IG9mIGEgcmVjdXJzaXZlIHNlYXJjaCBhbW9uZyBgdGhpcy5zdWJzY3JpcHRpb25zYFxuICAgICAqL1xuICAgIGhhc0xpc3RlbmVyOiBmdW5jdGlvbiBoYXNMaXN0ZW5lcihsaXN0ZW5hYmxlKSB7XG4gICAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBsaXN0ZW5lcixcbiAgICAgICAgICAgIGxpc3RlbmFibGVzO1xuICAgICAgICBmb3IgKDsgaSA8ICh0aGlzLnN1YnNjcmlwdGlvbnMgfHwgW10pLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBsaXN0ZW5hYmxlcyA9IFtdLmNvbmNhdCh0aGlzLnN1YnNjcmlwdGlvbnNbaV0ubGlzdGVuYWJsZSk7XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbGlzdGVuYWJsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmFibGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lciA9PT0gbGlzdGVuYWJsZSB8fCBsaXN0ZW5lci5oYXNMaXN0ZW5lciAmJiBsaXN0ZW5lci5oYXNMaXN0ZW5lcihsaXN0ZW5hYmxlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBIGNvbnZlbmllbmNlIG1ldGhvZCB0aGF0IGxpc3RlbnMgdG8gYWxsIGxpc3RlbmFibGVzIGluIHRoZSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbGlzdGVuYWJsZXMgQW4gb2JqZWN0IG9mIGxpc3RlbmFibGVzLiBLZXlzIHdpbGwgYmUgdXNlZCBhcyBjYWxsYmFjayBtZXRob2QgbmFtZXMuXG4gICAgICovXG4gICAgbGlzdGVuVG9NYW55OiBmdW5jdGlvbiBsaXN0ZW5Ub01hbnkobGlzdGVuYWJsZXMpIHtcbiAgICAgICAgdmFyIGFsbExpc3RlbmFibGVzID0gZmxhdHRlbkxpc3RlbmFibGVzKGxpc3RlbmFibGVzKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGFsbExpc3RlbmFibGVzKSB7XG4gICAgICAgICAgICB2YXIgY2JuYW1lID0gXy5jYWxsYmFja05hbWUoa2V5KSxcbiAgICAgICAgICAgICAgICBsb2NhbG5hbWUgPSB0aGlzW2NibmFtZV0gPyBjYm5hbWUgOiB0aGlzW2tleV0gPyBrZXkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAobG9jYWxuYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhhbGxMaXN0ZW5hYmxlc1trZXldLCBsb2NhbG5hbWUsIHRoaXNbY2JuYW1lICsgXCJEZWZhdWx0XCJdIHx8IHRoaXNbbG9jYWxuYW1lICsgXCJEZWZhdWx0XCJdIHx8IGxvY2FsbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBjdXJyZW50IGNvbnRleHQgY2FuIGxpc3RlbiB0byB0aGUgc3VwcGxpZWQgbGlzdGVuYWJsZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtBY3Rpb258U3RvcmV9IGxpc3RlbmFibGUgQW4gQWN0aW9uIG9yIFN0b3JlIHRoYXQgc2hvdWxkIGJlXG4gICAgICogIGxpc3RlbmVkIHRvLlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd8VW5kZWZpbmVkfSBBbiBlcnJvciBtZXNzYWdlLCBvciB1bmRlZmluZWQgaWYgdGhlcmUgd2FzIG5vIHByb2JsZW0uXG4gICAgICovXG4gICAgdmFsaWRhdGVMaXN0ZW5pbmc6IGZ1bmN0aW9uIHZhbGlkYXRlTGlzdGVuaW5nKGxpc3RlbmFibGUpIHtcbiAgICAgICAgaWYgKGxpc3RlbmFibGUgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkxpc3RlbmVyIGlzIG5vdCBhYmxlIHRvIGxpc3RlbiB0byBpdHNlbGZcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIV8uaXNGdW5jdGlvbihsaXN0ZW5hYmxlLmxpc3RlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0ZW5hYmxlICsgXCIgaXMgbWlzc2luZyBhIGxpc3RlbiBtZXRob2RcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGlzdGVuYWJsZS5oYXNMaXN0ZW5lciAmJiBsaXN0ZW5hYmxlLmhhc0xpc3RlbmVyKHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJMaXN0ZW5lciBjYW5ub3QgbGlzdGVuIHRvIHRoaXMgbGlzdGVuYWJsZSBiZWNhdXNlIG9mIGNpcmN1bGFyIGxvb3BcIjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIGEgc3Vic2NyaXB0aW9uIHRvIHRoZSBnaXZlbiBsaXN0ZW5hYmxlIGZvciB0aGUgY29udGV4dCBvYmplY3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QWN0aW9ufFN0b3JlfSBsaXN0ZW5hYmxlIEFuIEFjdGlvbiBvciBTdG9yZSB0aGF0IHNob3VsZCBiZVxuICAgICAqICBsaXN0ZW5lZCB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIHJlZ2lzdGVyIGFzIGV2ZW50IGhhbmRsZXJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gZGVmYXVsdENhbGxiYWNrIFRoZSBjYWxsYmFjayB0byByZWdpc3RlciBhcyBkZWZhdWx0IGhhbmRsZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBIHN1YnNjcmlwdGlvbiBvYmogd2hlcmUgYHN0b3BgIGlzIGFuIHVuc3ViIGZ1bmN0aW9uIGFuZCBgbGlzdGVuYWJsZWAgaXMgdGhlIG9iamVjdCBiZWluZyBsaXN0ZW5lZCB0b1xuICAgICAqL1xuICAgIGxpc3RlblRvOiBmdW5jdGlvbiBsaXN0ZW5UbyhsaXN0ZW5hYmxlLCBjYWxsYmFjaywgZGVmYXVsdENhbGxiYWNrKSB7XG4gICAgICAgIHZhciBkZXN1YixcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlcixcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbm9iaixcbiAgICAgICAgICAgIHN1YnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMgfHwgW107XG4gICAgICAgIF8udGhyb3dJZih0aGlzLnZhbGlkYXRlTGlzdGVuaW5nKGxpc3RlbmFibGUpKTtcbiAgICAgICAgdGhpcy5mZXRjaEluaXRpYWxTdGF0ZShsaXN0ZW5hYmxlLCBkZWZhdWx0Q2FsbGJhY2spO1xuICAgICAgICBkZXN1YiA9IGxpc3RlbmFibGUubGlzdGVuKHRoaXNbY2FsbGJhY2tdIHx8IGNhbGxiYWNrLCB0aGlzKTtcbiAgICAgICAgdW5zdWJzY3JpYmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gc3Vicy5pbmRleE9mKHN1YnNjcmlwdGlvbm9iaik7XG4gICAgICAgICAgICBfLnRocm93SWYoaW5kZXggPT09IC0xLCBcIlRyaWVkIHRvIHJlbW92ZSBsaXN0ZW4gYWxyZWFkeSBnb25lIGZyb20gc3Vic2NyaXB0aW9ucyBsaXN0IVwiKTtcbiAgICAgICAgICAgIHN1YnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIGRlc3ViKCk7XG4gICAgICAgIH07XG4gICAgICAgIHN1YnNjcmlwdGlvbm9iaiA9IHtcbiAgICAgICAgICAgIHN0b3A6IHVuc3Vic2NyaWJlcixcbiAgICAgICAgICAgIGxpc3RlbmFibGU6IGxpc3RlbmFibGVcbiAgICAgICAgfTtcbiAgICAgICAgc3Vicy5wdXNoKHN1YnNjcmlwdGlvbm9iaik7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb25vYmo7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN0b3BzIGxpc3RlbmluZyB0byBhIHNpbmdsZSBsaXN0ZW5hYmxlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FjdGlvbnxTdG9yZX0gbGlzdGVuYWJsZSBUaGUgYWN0aW9uIG9yIHN0b3JlIHdlIG5vIGxvbmdlciB3YW50IHRvIGxpc3RlbiB0b1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIGEgc3Vic2NyaXB0aW9uIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZCwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgICAqL1xuICAgIHN0b3BMaXN0ZW5pbmdUbzogZnVuY3Rpb24gc3RvcExpc3RlbmluZ1RvKGxpc3RlbmFibGUpIHtcbiAgICAgICAgdmFyIHN1YixcbiAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgc3VicyA9IHRoaXMuc3Vic2NyaXB0aW9ucyB8fCBbXTtcbiAgICAgICAgZm9yICg7IGkgPCBzdWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzdWIgPSBzdWJzW2ldO1xuICAgICAgICAgICAgaWYgKHN1Yi5saXN0ZW5hYmxlID09PSBsaXN0ZW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgc3ViLnN0b3AoKTtcbiAgICAgICAgICAgICAgICBfLnRocm93SWYoc3Vicy5pbmRleE9mKHN1YikgIT09IC0xLCBcIkZhaWxlZCB0byByZW1vdmUgbGlzdGVuIGZyb20gc3Vic2NyaXB0aW9ucyBsaXN0IVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN0b3BzIGFsbCBzdWJzY3JpcHRpb25zIGFuZCBlbXB0aWVzIHN1YnNjcmlwdGlvbnMgYXJyYXlcbiAgICAgKi9cbiAgICBzdG9wTGlzdGVuaW5nVG9BbGw6IGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmdUb0FsbCgpIHtcbiAgICAgICAgdmFyIHJlbWFpbmluZyxcbiAgICAgICAgICAgIHN1YnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMgfHwgW107XG4gICAgICAgIHdoaWxlIChyZW1haW5pbmcgPSBzdWJzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3Vic1swXS5zdG9wKCk7XG4gICAgICAgICAgICBfLnRocm93SWYoc3Vicy5sZW5ndGggIT09IHJlbWFpbmluZyAtIDEsIFwiRmFpbGVkIHRvIHJlbW92ZSBsaXN0ZW4gZnJvbSBzdWJzY3JpcHRpb25zIGxpc3QhXCIpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVzZWQgaW4gYGxpc3RlblRvYC4gRmV0Y2hlcyBpbml0aWFsIGRhdGEgZnJvbSBhIHB1Ymxpc2hlciBpZiBpdCBoYXMgYSBgZ2V0SW5pdGlhbFN0YXRlYCBtZXRob2QuXG4gICAgICogQHBhcmFtIHtBY3Rpb258U3RvcmV9IGxpc3RlbmFibGUgVGhlIHB1Ymxpc2hlciB3ZSB3YW50IHRvIGdldCBpbml0aWFsIHN0YXRlIGZyb21cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gZGVmYXVsdENhbGxiYWNrIFRoZSBtZXRob2QgdG8gcmVjZWl2ZSB0aGUgZGF0YVxuICAgICAqL1xuICAgIGZldGNoSW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBmZXRjaEluaXRpYWxTdGF0ZShsaXN0ZW5hYmxlLCBkZWZhdWx0Q2FsbGJhY2spIHtcbiAgICAgICAgZGVmYXVsdENhbGxiYWNrID0gZGVmYXVsdENhbGxiYWNrICYmIHRoaXNbZGVmYXVsdENhbGxiYWNrXSB8fCBkZWZhdWx0Q2FsbGJhY2s7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIGlmIChfLmlzRnVuY3Rpb24oZGVmYXVsdENhbGxiYWNrKSAmJiBfLmlzRnVuY3Rpb24obGlzdGVuYWJsZS5nZXRJbml0aWFsU3RhdGUpKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IGxpc3RlbmFibGUuZ2V0SW5pdGlhbFN0YXRlKCk7XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBfLmlzRnVuY3Rpb24oZGF0YS50aGVuKSkge1xuICAgICAgICAgICAgICAgIGRhdGEudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDYWxsYmFjay5hcHBseShtZSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdENhbGxiYWNrLmNhbGwodGhpcywgZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIG9uY2UgYWxsIGxpc3RlbmFibGVzIGhhdmUgdHJpZ2dlcmVkIGF0IGxlYXN0IG9uY2UuXG4gICAgICogSXQgd2lsbCBiZSBpbnZva2VkIHdpdGggdGhlIGxhc3QgZW1pc3Npb24gZnJvbSBlYWNoIGxpc3RlbmFibGUuXG4gICAgICogQHBhcmFtIHsuLi5QdWJsaXNoZXJzfSBwdWJsaXNoZXJzIFB1Ymxpc2hlcnMgdGhhdCBzaG91bGQgYmUgdHJhY2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gY2FsbGJhY2sgVGhlIG1ldGhvZCB0byBjYWxsIHdoZW4gYWxsIHB1Ymxpc2hlcnMgaGF2ZSBlbWl0dGVkXG4gICAgICogQHJldHVybnMge09iamVjdH0gQSBzdWJzY3JpcHRpb24gb2JqIHdoZXJlIGBzdG9wYCBpcyBhbiB1bnN1YiBmdW5jdGlvbiBhbmQgYGxpc3RlbmFibGVgIGlzIGFuIGFycmF5IG9mIGxpc3RlbmFibGVzXG4gICAgICovXG4gICAgam9pblRyYWlsaW5nOiBtYWtlcihcImxhc3RcIiksXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgb25jZSBhbGwgbGlzdGVuYWJsZXMgaGF2ZSB0cmlnZ2VyZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgKiBJdCB3aWxsIGJlIGludm9rZWQgd2l0aCB0aGUgZmlyc3QgZW1pc3Npb24gZnJvbSBlYWNoIGxpc3RlbmFibGUuXG4gICAgICogQHBhcmFtIHsuLi5QdWJsaXNoZXJzfSBwdWJsaXNoZXJzIFB1Ymxpc2hlcnMgdGhhdCBzaG91bGQgYmUgdHJhY2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gY2FsbGJhY2sgVGhlIG1ldGhvZCB0byBjYWxsIHdoZW4gYWxsIHB1Ymxpc2hlcnMgaGF2ZSBlbWl0dGVkXG4gICAgICogQHJldHVybnMge09iamVjdH0gQSBzdWJzY3JpcHRpb24gb2JqIHdoZXJlIGBzdG9wYCBpcyBhbiB1bnN1YiBmdW5jdGlvbiBhbmQgYGxpc3RlbmFibGVgIGlzIGFuIGFycmF5IG9mIGxpc3RlbmFibGVzXG4gICAgICovXG4gICAgam9pbkxlYWRpbmc6IG1ha2VyKFwiZmlyc3RcIiksXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgb25jZSBhbGwgbGlzdGVuYWJsZXMgaGF2ZSB0cmlnZ2VyZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgKiBJdCB3aWxsIGJlIGludm9rZWQgd2l0aCBhbGwgZW1pc3Npb24gZnJvbSBlYWNoIGxpc3RlbmFibGUuXG4gICAgICogQHBhcmFtIHsuLi5QdWJsaXNoZXJzfSBwdWJsaXNoZXJzIFB1Ymxpc2hlcnMgdGhhdCBzaG91bGQgYmUgdHJhY2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gY2FsbGJhY2sgVGhlIG1ldGhvZCB0byBjYWxsIHdoZW4gYWxsIHB1Ymxpc2hlcnMgaGF2ZSBlbWl0dGVkXG4gICAgICogQHJldHVybnMge09iamVjdH0gQSBzdWJzY3JpcHRpb24gb2JqIHdoZXJlIGBzdG9wYCBpcyBhbiB1bnN1YiBmdW5jdGlvbiBhbmQgYGxpc3RlbmFibGVgIGlzIGFuIGFycmF5IG9mIGxpc3RlbmFibGVzXG4gICAgICovXG4gICAgam9pbkNvbmNhdDogbWFrZXIoXCJhbGxcIiksXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgb25jZSBhbGwgbGlzdGVuYWJsZXMgaGF2ZSB0cmlnZ2VyZWQuXG4gICAgICogSWYgYSBjYWxsYmFjayB0cmlnZ2VycyB0d2ljZSBiZWZvcmUgdGhhdCBoYXBwZW5zLCBhbiBlcnJvciBpcyB0aHJvd24uXG4gICAgICogQHBhcmFtIHsuLi5QdWJsaXNoZXJzfSBwdWJsaXNoZXJzIFB1Ymxpc2hlcnMgdGhhdCBzaG91bGQgYmUgdHJhY2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gY2FsbGJhY2sgVGhlIG1ldGhvZCB0byBjYWxsIHdoZW4gYWxsIHB1Ymxpc2hlcnMgaGF2ZSBlbWl0dGVkXG4gICAgICogQHJldHVybnMge09iamVjdH0gQSBzdWJzY3JpcHRpb24gb2JqIHdoZXJlIGBzdG9wYCBpcyBhbiB1bnN1YiBmdW5jdGlvbiBhbmQgYGxpc3RlbmFibGVgIGlzIGFuIGFycmF5IG9mIGxpc3RlbmFibGVzXG4gICAgICovXG4gICAgam9pblN0cmljdDogbWFrZXIoXCJzdHJpY3RcIilcbn07XG59LHtcIi4vam9pbnNcIjozMzAsXCIuL3V0aWxzXCI6MzMyfV0sMzI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG4vKipcbiAqIEEgbW9kdWxlIG9mIG1ldGhvZHMgZm9yIG9iamVjdCB0aGF0IHlvdSB3YW50IHRvIGJlIGFibGUgdG8gbGlzdGVuIHRvLlxuICogVGhpcyBtb2R1bGUgaXMgY29uc3VtZWQgYnkgYGNyZWF0ZVN0b3JlYCBhbmQgYGNyZWF0ZUFjdGlvbmBcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBIb29rIHVzZWQgYnkgdGhlIHB1Ymxpc2hlciB0aGF0IGlzIGludm9rZWQgYmVmb3JlIGVtaXR0aW5nXG4gICAgICogYW5kIGJlZm9yZSBgc2hvdWxkRW1pdGAuIFRoZSBhcmd1bWVudHMgYXJlIHRoZSBvbmVzIHRoYXQgdGhlIGFjdGlvblxuICAgICAqIGlzIGludm9rZWQgd2l0aC4gSWYgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHNvbWV0aGluZyBvdGhlciB0aGFuXG4gICAgICogdW5kZWZpbmVkLCB0aGF0IHdpbGwgYmUgcGFzc2VkIG9uIGFzIGFyZ3VtZW50cyBmb3Igc2hvdWxkRW1pdCBhbmRcbiAgICAgKiBlbWlzc2lvbi5cbiAgICAgKi9cbiAgICBwcmVFbWl0OiBmdW5jdGlvbiBwcmVFbWl0KCkge30sXG5cbiAgICAvKipcbiAgICAgKiBIb29rIHVzZWQgYnkgdGhlIHB1Ymxpc2hlciBhZnRlciBgcHJlRW1pdGAgdG8gZGV0ZXJtaW5lIGlmIHRoZVxuICAgICAqIGV2ZW50IHNob3VsZCBiZSBlbWl0dGVkIHdpdGggZ2l2ZW4gYXJndW1lbnRzLiBUaGlzIG1heSBiZSBvdmVycmlkZGVuXG4gICAgICogaW4geW91ciBhcHBsaWNhdGlvbiwgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBhbHdheXMgcmV0dXJucyB0cnVlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgZXZlbnQgc2hvdWxkIGJlIGVtaXR0ZWRcbiAgICAgKi9cbiAgICBzaG91bGRFbWl0OiBmdW5jdGlvbiBzaG91bGRFbWl0KCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGFjdGlvbiB0cmlnZ2VyZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byByZWdpc3RlciBhcyBldmVudCBoYW5kbGVyXG4gICAgICogQHBhcmFtIHtNaXhlZH0gW29wdGlvbmFsXSBiaW5kQ29udGV4dCBUaGUgY29udGV4dCB0byBiaW5kIHRoZSBjYWxsYmFjayB3aXRoXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBDYWxsYmFjayB0aGF0IHVuc3Vic2NyaWJlcyB0aGUgcmVnaXN0ZXJlZCBldmVudCBoYW5kbGVyXG4gICAgICovXG4gICAgbGlzdGVuOiBmdW5jdGlvbiBsaXN0ZW4oY2FsbGJhY2ssIGJpbmRDb250ZXh0KSB7XG4gICAgICAgIGJpbmRDb250ZXh0ID0gYmluZENvbnRleHQgfHwgdGhpcztcbiAgICAgICAgdmFyIGV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIGV2ZW50SGFuZGxlcihhcmdzKSB7XG4gICAgICAgICAgICBpZiAoYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KGJpbmRDb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfSxcbiAgICAgICAgICAgIG1lID0gdGhpcyxcbiAgICAgICAgICAgIGFib3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmFkZExpc3RlbmVyKHRoaXMuZXZlbnRMYWJlbCwgZXZlbnRIYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgbWUuZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihtZS5ldmVudExhYmVsLCBldmVudEhhbmRsZXIpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggaGFuZGxlcnMgdG8gcHJvbWlzZSB0aGF0IHRyaWdnZXIgdGhlIGNvbXBsZXRlZCBhbmQgZmFpbGVkXG4gICAgICogY2hpbGQgcHVibGlzaGVycywgaWYgYXZhaWxhYmxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFRoZSBwcm9taXNlIHRvIGF0dGFjaCB0b1xuICAgICAqL1xuICAgIHByb21pc2U6IGZ1bmN0aW9uIHByb21pc2UoX3Byb21pc2UpIHtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcblxuICAgICAgICB2YXIgY2FuSGFuZGxlUHJvbWlzZSA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZihcImNvbXBsZXRlZFwiKSA+PSAwICYmIHRoaXMuY2hpbGRyZW4uaW5kZXhPZihcImZhaWxlZFwiKSA+PSAwO1xuXG4gICAgICAgIGlmICghY2FuSGFuZGxlUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHVibGlzaGVyIG11c3QgaGF2ZSBcXFwiY29tcGxldGVkXFxcIiBhbmQgXFxcImZhaWxlZFxcXCIgY2hpbGQgcHVibGlzaGVyc1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9wcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbWUuY29tcGxldGVkKHJlc3BvbnNlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gbWUuZmFpbGVkKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBhY3Rpb24gdHJpZ2dlcmVkLCB3aGljaCBzaG91bGRcbiAgICAgKiByZXR1cm4gYSBwcm9taXNlIHRoYXQgaW4gdHVybiBpcyBwYXNzZWQgdG8gYHRoaXMucHJvbWlzZWBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byByZWdpc3RlciBhcyBldmVudCBoYW5kbGVyXG4gICAgICovXG4gICAgbGlzdGVuQW5kUHJvbWlzZTogZnVuY3Rpb24gbGlzdGVuQW5kUHJvbWlzZShjYWxsYmFjaywgYmluZENvbnRleHQpIHtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgICAgYmluZENvbnRleHQgPSBiaW5kQ29udGV4dCB8fCB0aGlzO1xuICAgICAgICB0aGlzLndpbGxDYWxsUHJvbWlzZSA9ICh0aGlzLndpbGxDYWxsUHJvbWlzZSB8fCAwKSArIDE7XG5cbiAgICAgICAgdmFyIHJlbW92ZUxpc3RlbiA9IHRoaXMubGlzdGVuKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGEgcHJvbWlzZSBidXQgZ290IFwiICsgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBwcm9taXNlID0gY2FsbGJhY2suYXBwbHkoYmluZENvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIG1lLnByb21pc2UuY2FsbChtZSwgcHJvbWlzZSk7XG4gICAgICAgIH0sIGJpbmRDb250ZXh0KTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbWUud2lsbENhbGxQcm9taXNlLS07XG4gICAgICAgICAgICByZW1vdmVMaXN0ZW4uY2FsbChtZSk7XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2hlcyBhbiBldmVudCB1c2luZyBgdGhpcy5lbWl0dGVyYCAoaWYgYHNob3VsZEVtaXRgIGFncmVlcylcbiAgICAgKi9cbiAgICB0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIHByZSA9IHRoaXMucHJlRW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgYXJncyA9IHByZSA9PT0gdW5kZWZpbmVkID8gYXJncyA6IF8uaXNBcmd1bWVudHMocHJlKSA/IHByZSA6IFtdLmNvbmNhdChwcmUpO1xuICAgICAgICBpZiAodGhpcy5zaG91bGRFbWl0LmFwcGx5KHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCh0aGlzLmV2ZW50TGFiZWwsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyaWVzIHRvIHB1Ymxpc2ggdGhlIGV2ZW50IG9uIHRoZSBuZXh0IHRpY2tcbiAgICAgKi9cbiAgICB0cmlnZ2VyQXN5bmM6IGZ1bmN0aW9uIHRyaWdnZXJBc3luYygpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBtZSA9IHRoaXM7XG4gICAgICAgIF8ubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbWUudHJpZ2dlci5hcHBseShtZSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgUHJvbWlzZSBmb3IgdGhlIHRyaWdnZXJlZCBhY3Rpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICogICBSZXNvbHZlZCBieSBjb21wbGV0ZWQgY2hpbGQgYWN0aW9uLlxuICAgICAqICAgUmVqZWN0ZWQgYnkgZmFpbGVkIGNoaWxkIGFjdGlvbi5cbiAgICAgKiAgIElmIGxpc3RlbkFuZFByb21pc2UnZCwgdGhlbiBwcm9taXNlIGFzc29jaWF0ZWQgdG8gdGhpcyB0cmlnZ2VyLlxuICAgICAqICAgT3RoZXJ3aXNlLCB0aGUgcHJvbWlzZSBpcyBmb3IgbmV4dCBjaGlsZCBhY3Rpb24gY29tcGxldGlvbi5cbiAgICAgKi9cbiAgICB0cmlnZ2VyUHJvbWlzZTogZnVuY3Rpb24gdHJpZ2dlclByb21pc2UoKSB7XG4gICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICAgIHZhciBjYW5IYW5kbGVQcm9taXNlID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKFwiY29tcGxldGVkXCIpID49IDAgJiYgdGhpcy5jaGlsZHJlbi5pbmRleE9mKFwiZmFpbGVkXCIpID49IDA7XG5cbiAgICAgICAgdmFyIHByb21pc2UgPSBfLmNyZWF0ZVByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgLy8gSWYgYGxpc3RlbkFuZFByb21pc2VgIGlzIGxpc3RlbmluZ1xuICAgICAgICAgICAgLy8gcGF0Y2ggYHByb21pc2VgIHcvIGNvbnRleHQtbG9hZGVkIHJlc29sdmUvcmVqZWN0XG4gICAgICAgICAgICBpZiAobWUud2lsbENhbGxQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgXy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c1Byb21pc2UgPSBtZS5wcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICBtZS5wcm9taXNlID0gZnVuY3Rpb24gKGlucHV0UHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRQcm9taXNlLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhY2sgdG8geW91ciByZWd1bGFybHkgc2NoZWR1bGUgcHJvZ3JhbW1pbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICBtZS5wcm9taXNlID0gcHJldmlvdXNQcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lLnByb21pc2UuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIG1lLnRyaWdnZXIuYXBwbHkobWUsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNhbkhhbmRsZVByb21pc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlU3VjY2VzcyA9IG1lLmNvbXBsZXRlZC5saXN0ZW4oZnVuY3Rpb24gKGFyZ3NBcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlU3VjY2VzcygpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVGYWlsZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhcmdzQXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciByZW1vdmVGYWlsZWQgPSBtZS5mYWlsZWQubGlzdGVuKGZ1bmN0aW9uIChhcmdzQXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVN1Y2Nlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRmFpbGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChhcmdzQXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWUudHJpZ2dlckFzeW5jLmFwcGx5KG1lLCBhcmdzKTtcblxuICAgICAgICAgICAgaWYgKCFjYW5IYW5kbGVQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG59O1xufSx7XCIuL3V0aWxzXCI6MzMyfV0sMzI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQSBtb2R1bGUgb2YgbWV0aG9kcyB0aGF0IHlvdSB3YW50IHRvIGluY2x1ZGUgaW4gYWxsIHN0b3Jlcy5cbiAqIFRoaXMgbW9kdWxlIGlzIGNvbnN1bWVkIGJ5IGBjcmVhdGVTdG9yZWAuXG4gKi9cblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHt9O1xufSx7fV0sMzI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdG9yZSwgZGVmaW5pdGlvbikge1xuICAgIGZvciAodmFyIG5hbWUgaW4gZGVmaW5pdGlvbikge1xuICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGRlZmluaXRpb24sIG5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoIXByb3BlcnR5RGVzY3JpcHRvci52YWx1ZSB8fCB0eXBlb2YgcHJvcGVydHlEZXNjcmlwdG9yLnZhbHVlICE9PSBcImZ1bmN0aW9uXCIgfHwgIWRlZmluaXRpb24uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RvcmVbbmFtZV0gPSBkZWZpbml0aW9uW25hbWVdLmJpbmQoc3RvcmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gZGVmaW5pdGlvbltuYW1lXTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSAhPT0gXCJmdW5jdGlvblwiIHx8ICFkZWZpbml0aW9uLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0b3JlW25hbWVdID0gcHJvcGVydHkuYmluZChzdG9yZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RvcmU7XG59O1xufSx7fV0sMzI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpLFxuICAgIEFjdGlvbk1ldGhvZHMgPSByZXF1aXJlKFwiLi9BY3Rpb25NZXRob2RzXCIpLFxuICAgIFB1Ymxpc2hlck1ldGhvZHMgPSByZXF1aXJlKFwiLi9QdWJsaXNoZXJNZXRob2RzXCIpLFxuICAgIEtlZXAgPSByZXF1aXJlKFwiLi9LZWVwXCIpO1xuXG52YXIgYWxsb3dlZCA9IHsgcHJlRW1pdDogMSwgc2hvdWxkRW1pdDogMSB9O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYWN0aW9uIGZ1bmN0b3Igb2JqZWN0LiBJdCBpcyBtaXhlZCBpbiB3aXRoIGZ1bmN0aW9uc1xuICogZnJvbSB0aGUgYFB1Ymxpc2hlck1ldGhvZHNgIG1peGluLiBgcHJlRW1pdGAgYW5kIGBzaG91bGRFbWl0YCBtYXlcbiAqIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGRlZmluaXRpb24gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZpbml0aW9uIFRoZSBhY3Rpb24gb2JqZWN0IGRlZmluaXRpb25cbiAqL1xudmFyIGNyZWF0ZUFjdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUFjdGlvbihkZWZpbml0aW9uKSB7XG5cbiAgICBkZWZpbml0aW9uID0gZGVmaW5pdGlvbiB8fCB7fTtcbiAgICBpZiAoIV8uaXNPYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgZGVmaW5pdGlvbiA9IHsgYWN0aW9uTmFtZTogZGVmaW5pdGlvbiB9O1xuICAgIH1cblxuICAgIGZvciAodmFyIGEgaW4gQWN0aW9uTWV0aG9kcykge1xuICAgICAgICBpZiAoIWFsbG93ZWRbYV0gJiYgUHVibGlzaGVyTWV0aG9kc1thXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IG92ZXJyaWRlIEFQSSBtZXRob2QgXCIgKyBhICsgXCIgaW4gUmVmbHV4LkFjdGlvbk1ldGhvZHMuIFVzZSBhbm90aGVyIG1ldGhvZCBuYW1lIG9yIG92ZXJyaWRlIGl0IG9uIFJlZmx1eC5QdWJsaXNoZXJNZXRob2RzIGluc3RlYWQuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgZCBpbiBkZWZpbml0aW9uKSB7XG4gICAgICAgIGlmICghYWxsb3dlZFtkXSAmJiBQdWJsaXNoZXJNZXRob2RzW2RdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgb3ZlcnJpZGUgQVBJIG1ldGhvZCBcIiArIGQgKyBcIiBpbiBhY3Rpb24gY3JlYXRpb24uIFVzZSBhbm90aGVyIG1ldGhvZCBuYW1lIG9yIG92ZXJyaWRlIGl0IG9uIFJlZmx1eC5QdWJsaXNoZXJNZXRob2RzIGluc3RlYWQuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVmaW5pdGlvbi5jaGlsZHJlbiA9IGRlZmluaXRpb24uY2hpbGRyZW4gfHwgW107XG4gICAgaWYgKGRlZmluaXRpb24uYXN5bmNSZXN1bHQpIHtcbiAgICAgICAgZGVmaW5pdGlvbi5jaGlsZHJlbiA9IGRlZmluaXRpb24uY2hpbGRyZW4uY29uY2F0KFtcImNvbXBsZXRlZFwiLCBcImZhaWxlZFwiXSk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBjaGlsZEFjdGlvbnMgPSB7fTtcbiAgICBmb3IgKDsgaSA8IGRlZmluaXRpb24uY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5hbWUgPSBkZWZpbml0aW9uLmNoaWxkcmVuW2ldO1xuICAgICAgICBjaGlsZEFjdGlvbnNbbmFtZV0gPSBjcmVhdGVBY3Rpb24obmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRleHQgPSBfLmV4dGVuZCh7XG4gICAgICAgIGV2ZW50TGFiZWw6IFwiYWN0aW9uXCIsXG4gICAgICAgIGVtaXR0ZXI6IG5ldyBfLkV2ZW50RW1pdHRlcigpLFxuICAgICAgICBfaXNBY3Rpb246IHRydWVcbiAgICB9LCBQdWJsaXNoZXJNZXRob2RzLCBBY3Rpb25NZXRob2RzLCBkZWZpbml0aW9uKTtcblxuICAgIHZhciBmdW5jdG9yID0gZnVuY3Rpb24gZnVuY3RvcigpIHtcbiAgICAgICAgdmFyIHRyaWdnZXJUeXBlID0gZnVuY3Rvci5zeW5jID8gXCJ0cmlnZ2VyXCIgOiBfLmVudmlyb25tZW50Lmhhc1Byb21pc2UgPyBcInRyaWdnZXJQcm9taXNlXCIgOiBcInRyaWdnZXJBc3luY1wiO1xuICAgICAgICByZXR1cm4gZnVuY3Rvclt0cmlnZ2VyVHlwZV0uYXBwbHkoZnVuY3RvciwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgXy5leHRlbmQoZnVuY3RvciwgY2hpbGRBY3Rpb25zLCBjb250ZXh0KTtcblxuICAgIEtlZXAuY3JlYXRlZEFjdGlvbnMucHVzaChmdW5jdG9yKTtcblxuICAgIHJldHVybiBmdW5jdG9yO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBY3Rpb247XG59LHtcIi4vQWN0aW9uTWV0aG9kc1wiOjMyMSxcIi4vS2VlcFwiOjMyMixcIi4vUHVibGlzaGVyTWV0aG9kc1wiOjMyNCxcIi4vdXRpbHNcIjozMzJ9XSwzMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfID0gcmVxdWlyZShcIi4vdXRpbHNcIiksXG4gICAgS2VlcCA9IHJlcXVpcmUoXCIuL0tlZXBcIiksXG4gICAgbWl4ZXIgPSByZXF1aXJlKFwiLi9taXhlclwiKSxcbiAgICBiaW5kTWV0aG9kcyA9IHJlcXVpcmUoXCIuL2JpbmRNZXRob2RzXCIpO1xuXG52YXIgYWxsb3dlZCA9IHsgcHJlRW1pdDogMSwgc2hvdWxkRW1pdDogMSB9O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gZXZlbnQgZW1pdHRpbmcgRGF0YSBTdG9yZS4gSXQgaXMgbWl4ZWQgaW4gd2l0aCBmdW5jdGlvbnNcbiAqIGZyb20gdGhlIGBMaXN0ZW5lck1ldGhvZHNgIGFuZCBgUHVibGlzaGVyTWV0aG9kc2AgbWl4aW5zLiBgcHJlRW1pdGBcbiAqIGFuZCBgc2hvdWxkRW1pdGAgbWF5IGJlIG92ZXJyaWRkZW4gaW4gdGhlIGRlZmluaXRpb24gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZpbml0aW9uIFRoZSBkYXRhIHN0b3JlIG9iamVjdCBkZWZpbml0aW9uXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgZGF0YSBzdG9yZSBpbnN0YW5jZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XG5cbiAgICB2YXIgU3RvcmVNZXRob2RzID0gcmVxdWlyZShcIi4vU3RvcmVNZXRob2RzXCIpLFxuICAgICAgICBQdWJsaXNoZXJNZXRob2RzID0gcmVxdWlyZShcIi4vUHVibGlzaGVyTWV0aG9kc1wiKSxcbiAgICAgICAgTGlzdGVuZXJNZXRob2RzID0gcmVxdWlyZShcIi4vTGlzdGVuZXJNZXRob2RzXCIpO1xuXG4gICAgZGVmaW5pdGlvbiA9IGRlZmluaXRpb24gfHwge307XG5cbiAgICBmb3IgKHZhciBhIGluIFN0b3JlTWV0aG9kcykge1xuICAgICAgICBpZiAoIWFsbG93ZWRbYV0gJiYgKFB1Ymxpc2hlck1ldGhvZHNbYV0gfHwgTGlzdGVuZXJNZXRob2RzW2FdKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IG92ZXJyaWRlIEFQSSBtZXRob2QgXCIgKyBhICsgXCIgaW4gUmVmbHV4LlN0b3JlTWV0aG9kcy4gVXNlIGFub3RoZXIgbWV0aG9kIG5hbWUgb3Igb3ZlcnJpZGUgaXQgb24gUmVmbHV4LlB1Ymxpc2hlck1ldGhvZHMgLyBSZWZsdXguTGlzdGVuZXJNZXRob2RzIGluc3RlYWQuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgZCBpbiBkZWZpbml0aW9uKSB7XG4gICAgICAgIGlmICghYWxsb3dlZFtkXSAmJiAoUHVibGlzaGVyTWV0aG9kc1tkXSB8fCBMaXN0ZW5lck1ldGhvZHNbZF0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgb3ZlcnJpZGUgQVBJIG1ldGhvZCBcIiArIGQgKyBcIiBpbiBzdG9yZSBjcmVhdGlvbi4gVXNlIGFub3RoZXIgbWV0aG9kIG5hbWUgb3Igb3ZlcnJpZGUgaXQgb24gUmVmbHV4LlB1Ymxpc2hlck1ldGhvZHMgLyBSZWZsdXguTGlzdGVuZXJNZXRob2RzIGluc3RlYWQuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVmaW5pdGlvbiA9IG1peGVyKGRlZmluaXRpb24pO1xuXG4gICAgZnVuY3Rpb24gU3RvcmUoKSB7XG4gICAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICAgIGFycjtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IG5ldyBfLkV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLmV2ZW50TGFiZWwgPSBcImNoYW5nZVwiO1xuICAgICAgICBiaW5kTWV0aG9kcyh0aGlzLCBkZWZpbml0aW9uKTtcbiAgICAgICAgaWYgKHRoaXMuaW5pdCAmJiBfLmlzRnVuY3Rpb24odGhpcy5pbml0KSkge1xuICAgICAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGlzdGVuYWJsZXMpIHtcbiAgICAgICAgICAgIGFyciA9IFtdLmNvbmNhdCh0aGlzLmxpc3RlbmFibGVzKTtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ub01hbnkoYXJyW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF8uZXh0ZW5kKFN0b3JlLnByb3RvdHlwZSwgTGlzdGVuZXJNZXRob2RzLCBQdWJsaXNoZXJNZXRob2RzLCBTdG9yZU1ldGhvZHMsIGRlZmluaXRpb24pO1xuXG4gICAgdmFyIHN0b3JlID0gbmV3IFN0b3JlKCk7XG4gICAgS2VlcC5jcmVhdGVkU3RvcmVzLnB1c2goc3RvcmUpO1xuXG4gICAgcmV0dXJuIHN0b3JlO1xufTtcbn0se1wiLi9LZWVwXCI6MzIyLFwiLi9MaXN0ZW5lck1ldGhvZHNcIjozMjMsXCIuL1B1Ymxpc2hlck1ldGhvZHNcIjozMjQsXCIuL1N0b3JlTWV0aG9kc1wiOjMyNSxcIi4vYmluZE1ldGhvZHNcIjozMjYsXCIuL21peGVyXCI6MzMxLFwiLi91dGlsc1wiOjMzMn1dLDMyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xudmFyIFJlZmx1eCA9IHtcbiAgICB2ZXJzaW9uOiB7XG4gICAgICAgIFwicmVmbHV4LWNvcmVcIjogXCIwLjIuMVwiXG4gICAgfVxufTtcblxuUmVmbHV4LkFjdGlvbk1ldGhvZHMgPSByZXF1aXJlKFwiLi9BY3Rpb25NZXRob2RzXCIpO1xuXG5SZWZsdXguTGlzdGVuZXJNZXRob2RzID0gcmVxdWlyZShcIi4vTGlzdGVuZXJNZXRob2RzXCIpO1xuXG5SZWZsdXguUHVibGlzaGVyTWV0aG9kcyA9IHJlcXVpcmUoXCIuL1B1Ymxpc2hlck1ldGhvZHNcIik7XG5cblJlZmx1eC5TdG9yZU1ldGhvZHMgPSByZXF1aXJlKFwiLi9TdG9yZU1ldGhvZHNcIik7XG5cblJlZmx1eC5jcmVhdGVBY3Rpb24gPSByZXF1aXJlKFwiLi9jcmVhdGVBY3Rpb25cIik7XG5cblJlZmx1eC5jcmVhdGVTdG9yZSA9IHJlcXVpcmUoXCIuL2NyZWF0ZVN0b3JlXCIpO1xuXG52YXIgbWFrZXIgPSByZXF1aXJlKFwiLi9qb2luc1wiKS5zdGF0aWNKb2luQ3JlYXRvcjtcblxuUmVmbHV4LmpvaW5UcmFpbGluZyA9IFJlZmx1eC5hbGwgPSBtYWtlcihcImxhc3RcIik7IC8vIFJlZmx1eC5hbGwgYWxpYXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcblxuUmVmbHV4LmpvaW5MZWFkaW5nID0gbWFrZXIoXCJmaXJzdFwiKTtcblxuUmVmbHV4LmpvaW5TdHJpY3QgPSBtYWtlcihcInN0cmljdFwiKTtcblxuUmVmbHV4LmpvaW5Db25jYXQgPSBtYWtlcihcImFsbFwiKTtcblxudmFyIF8gPSBSZWZsdXgudXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuUmVmbHV4LkV2ZW50RW1pdHRlciA9IF8uRXZlbnRFbWl0dGVyO1xuXG5SZWZsdXguUHJvbWlzZSA9IF8uUHJvbWlzZTtcblxuLyoqXG4gKiBDb252ZW5pZW5jZSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBzZXQgb2YgYWN0aW9uc1xuICpcbiAqIEBwYXJhbSBkZWZpbml0aW9ucyB0aGUgZGVmaW5pdGlvbnMgZm9yIHRoZSBhY3Rpb25zIHRvIGJlIGNyZWF0ZWRcbiAqIEByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGFjdGlvbnMgb2YgY29ycmVzcG9uZGluZyBhY3Rpb24gbmFtZXNcbiAqL1xuUmVmbHV4LmNyZWF0ZUFjdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWR1Y2VyID0gZnVuY3Rpb24gcmVkdWNlcihkZWZpbml0aW9ucywgYWN0aW9ucykge1xuICAgICAgICBPYmplY3Qua2V5cyhkZWZpbml0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uTmFtZSkge1xuICAgICAgICAgICAgdmFyIHZhbCA9IGRlZmluaXRpb25zW2FjdGlvbk5hbWVdO1xuICAgICAgICAgICAgYWN0aW9uc1thY3Rpb25OYW1lXSA9IFJlZmx1eC5jcmVhdGVBY3Rpb24odmFsKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB7fTtcbiAgICAgICAgaWYgKGRlZmluaXRpb25zIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGRlZmluaXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgIGlmIChfLmlzT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVkdWNlcih2YWwsIGFjdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnNbdmFsXSA9IFJlZmx1eC5jcmVhdGVBY3Rpb24odmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlZHVjZXIoZGVmaW5pdGlvbnMsIGFjdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgIH07XG59KSgpO1xuXG4vKipcbiAqIFNldHMgdGhlIGV2ZW50bWl0dGVyIHRoYXQgUmVmbHV4IHVzZXNcbiAqL1xuUmVmbHV4LnNldEV2ZW50RW1pdHRlciA9IGZ1bmN0aW9uIChjdHgpIHtcbiAgICBSZWZsdXguRXZlbnRFbWl0dGVyID0gXy5FdmVudEVtaXR0ZXIgPSBjdHg7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIFByb21pc2UgbGlicmFyeSB0aGF0IFJlZmx1eCB1c2VzXG4gKi9cblJlZmx1eC5zZXRQcm9taXNlID0gZnVuY3Rpb24gKGN0eCkge1xuICAgIFJlZmx1eC5Qcm9taXNlID0gXy5Qcm9taXNlID0gY3R4O1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBQcm9taXNlIGZhY3RvcnkgdGhhdCBjcmVhdGVzIG5ldyBwcm9taXNlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZmFjdG9yeSBoYXMgdGhlIHNpZ25hdHVyZSBgZnVuY3Rpb24ocmVzb2x2ZXIpIHsgcmV0dXJuIFtuZXcgUHJvbWlzZV07IH1gXG4gKi9cblJlZmx1eC5zZXRQcm9taXNlRmFjdG9yeSA9IGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgXy5jcmVhdGVQcm9taXNlID0gZmFjdG9yeTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgbWV0aG9kIHVzZWQgZm9yIGRlZmVycmluZyBhY3Rpb25zIGFuZCBzdG9yZXNcbiAqL1xuUmVmbHV4Lm5leHRUaWNrID0gZnVuY3Rpb24gKG5leHRUaWNrKSB7XG4gICAgXy5uZXh0VGljayA9IG5leHRUaWNrO1xufTtcblxuUmVmbHV4LnVzZSA9IGZ1bmN0aW9uIChwbHVnaW5DYikge1xuICAgIHBsdWdpbkNiKFJlZmx1eCk7XG59O1xuXG4vKipcbiAqIFByb3ZpZGVzIHRoZSBzZXQgb2YgY3JlYXRlZCBhY3Rpb25zIGFuZCBzdG9yZXMgZm9yIGludHJvc3BlY3Rpb25cbiAqL1xuLyplc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSovXG5SZWZsdXguX19rZWVwID0gcmVxdWlyZShcIi4vS2VlcFwiKTtcbi8qZXNsaW50LWVuYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSovXG5cbi8qKlxuICogV2FybiBpZiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBub3QgYXZhaWxhYmxlXG4gKi9cbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgbm90IGF2YWlsYWJsZS4gXCIgKyBcIkVTNSBzaGltIHJlcXVpcmVkLiBcIiArIFwiaHR0cHM6Ly9naXRodWIuY29tL3Nwb2lrZS9yZWZsdXhqcyNlczVcIik7XG59XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gUmVmbHV4O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbn0se1wiLi9BY3Rpb25NZXRob2RzXCI6MzIxLFwiLi9LZWVwXCI6MzIyLFwiLi9MaXN0ZW5lck1ldGhvZHNcIjozMjMsXCIuL1B1Ymxpc2hlck1ldGhvZHNcIjozMjQsXCIuL1N0b3JlTWV0aG9kc1wiOjMyNSxcIi4vY3JlYXRlQWN0aW9uXCI6MzI3LFwiLi9jcmVhdGVTdG9yZVwiOjMyOCxcIi4vam9pbnNcIjozMzAsXCIuL3V0aWxzXCI6MzMyfV0sMzMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogSW50ZXJuYWwgbW9kdWxlIHVzZWQgdG8gY3JlYXRlIHN0YXRpYyBhbmQgaW5zdGFuY2Ugam9pbiBtZXRob2RzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjcmVhdGVTdG9yZSA9IHJlcXVpcmUoXCIuL2NyZWF0ZVN0b3JlXCIpLFxuICAgIF8gPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLFxuICAgIHN0cmF0ZWd5TWV0aG9kTmFtZXMgPSB7XG4gICAgc3RyaWN0OiBcImpvaW5TdHJpY3RcIixcbiAgICBmaXJzdDogXCJqb2luTGVhZGluZ1wiLFxuICAgIGxhc3Q6IFwiam9pblRyYWlsaW5nXCIsXG4gICAgYWxsOiBcImpvaW5Db25jYXRcIlxufTtcblxuLyoqXG4gKiBVc2VkIGluIGBpbmRleC5qc2AgdG8gY3JlYXRlIHRoZSBzdGF0aWMgam9pbiBtZXRob2RzXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyYXRlZ3kgV2hpY2ggc3RyYXRlZ3kgdG8gdXNlIHdoZW4gdHJhY2tpbmcgbGlzdGVuYWJsZSB0cmlnZ2VyIGFyZ3VtZW50c1xuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0YXRpYyBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgc3RvcmUgd2l0aCBhIGpvaW4gbGlzdGVuIG9uIHRoZSBnaXZlbiBsaXN0ZW5hYmxlcyB1c2luZyB0aGUgZ2l2ZW4gc3RyYXRlZ3lcbiAqL1xuZXhwb3J0cy5zdGF0aWNKb2luQ3JlYXRvciA9IGZ1bmN0aW9uIChzdHJhdGVneSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSAvKiBsaXN0ZW5hYmxlcy4uLiAqL3tcbiAgICAgICAgdmFyIGxpc3RlbmFibGVzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gY3JlYXRlU3RvcmUoe1xuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgICAgICB0aGlzW3N0cmF0ZWd5TWV0aG9kTmFtZXNbc3RyYXRlZ3ldXS5hcHBseSh0aGlzLCBsaXN0ZW5hYmxlcy5jb25jYXQoXCJ0cmlnZ2VyQXN5bmNcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufTtcblxuLyoqXG4gKiBVc2VkIGluIGBMaXN0ZW5lck1ldGhvZHMuanNgIHRvIGNyZWF0ZSB0aGUgaW5zdGFuY2Ugam9pbiBtZXRob2RzXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyYXRlZ3kgV2hpY2ggc3RyYXRlZ3kgdG8gdXNlIHdoZW4gdHJhY2tpbmcgbGlzdGVuYWJsZSB0cmlnZ2VyIGFyZ3VtZW50c1xuICogQHJldHVybnMge0Z1bmN0aW9ufSBBbiBpbnN0YW5jZSBtZXRob2Qgd2hpY2ggc2V0cyB1cCBhIGpvaW4gbGlzdGVuIG9uIHRoZSBnaXZlbiBsaXN0ZW5hYmxlcyB1c2luZyB0aGUgZ2l2ZW4gc3RyYXRlZ3lcbiAqL1xuZXhwb3J0cy5pbnN0YW5jZUpvaW5DcmVhdG9yID0gZnVuY3Rpb24gKHN0cmF0ZWd5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIC8qIGxpc3RlbmFibGVzLi4uLCBjYWxsYmFjayove1xuICAgICAgICBfLnRocm93SWYoYXJndW1lbnRzLmxlbmd0aCA8IDIsIFwiQ2Fubm90IGNyZWF0ZSBhIGpvaW4gd2l0aCBsZXNzIHRoYW4gMiBsaXN0ZW5hYmxlcyFcIik7XG4gICAgICAgIHZhciBsaXN0ZW5hYmxlcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKSxcbiAgICAgICAgICAgIGNhbGxiYWNrID0gbGlzdGVuYWJsZXMucG9wKCksXG4gICAgICAgICAgICBudW1iZXJPZkxpc3RlbmFibGVzID0gbGlzdGVuYWJsZXMubGVuZ3RoLFxuICAgICAgICAgICAgam9pbiA9IHtcbiAgICAgICAgICAgIG51bWJlck9mTGlzdGVuYWJsZXM6IG51bWJlck9mTGlzdGVuYWJsZXMsXG4gICAgICAgICAgICBjYWxsYmFjazogdGhpc1tjYWxsYmFja10gfHwgY2FsbGJhY2ssXG4gICAgICAgICAgICBsaXN0ZW5lcjogdGhpcyxcbiAgICAgICAgICAgIHN0cmF0ZWd5OiBzdHJhdGVneVxuICAgICAgICB9LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGNhbmNlbHMgPSBbXSxcbiAgICAgICAgICAgIHN1Ym9iajtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bWJlck9mTGlzdGVuYWJsZXM7IGkrKykge1xuICAgICAgICAgICAgXy50aHJvd0lmKHRoaXMudmFsaWRhdGVMaXN0ZW5pbmcobGlzdGVuYWJsZXNbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtYmVyT2ZMaXN0ZW5hYmxlczsgaSsrKSB7XG4gICAgICAgICAgICBjYW5jZWxzLnB1c2gobGlzdGVuYWJsZXNbaV0ubGlzdGVuKG5ld0xpc3RlbmVyKGksIGpvaW4pLCB0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzZXQoam9pbik7XG4gICAgICAgIHN1Ym9iaiA9IHsgbGlzdGVuYWJsZTogbGlzdGVuYWJsZXMgfTtcbiAgICAgICAgc3Vib2JqLnN0b3AgPSBtYWtlU3RvcHBlcihzdWJvYmosIGNhbmNlbHMsIHRoaXMpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSAodGhpcy5zdWJzY3JpcHRpb25zIHx8IFtdKS5jb25jYXQoc3Vib2JqKTtcbiAgICAgICAgcmV0dXJuIHN1Ym9iajtcbiAgICB9O1xufTtcblxuLy8gLS0tLSBpbnRlcm5hbCBqb2luIGZ1bmN0aW9ucyAtLS0tXG5cbmZ1bmN0aW9uIG1ha2VTdG9wcGVyKHN1Ym9iaiwgY2FuY2VscywgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgc3VicyA9IGNvbnRleHQuc3Vic2NyaXB0aW9ucyxcbiAgICAgICAgICAgIGluZGV4ID0gc3VicyA/IHN1YnMuaW5kZXhPZihzdWJvYmopIDogLTE7XG4gICAgICAgIF8udGhyb3dJZihpbmRleCA9PT0gLTEsIFwiVHJpZWQgdG8gcmVtb3ZlIGpvaW4gYWxyZWFkeSBnb25lIGZyb20gc3Vic2NyaXB0aW9ucyBsaXN0IVwiKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNhbmNlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNhbmNlbHNbaV0oKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gcmVzZXQoam9pbikge1xuICAgIGpvaW4ubGlzdGVuYWJsZXNFbWl0dGVkID0gbmV3IEFycmF5KGpvaW4ubnVtYmVyT2ZMaXN0ZW5hYmxlcyk7XG4gICAgam9pbi5hcmdzID0gbmV3IEFycmF5KGpvaW4ubnVtYmVyT2ZMaXN0ZW5hYmxlcyk7XG59XG5cbmZ1bmN0aW9uIG5ld0xpc3RlbmVyKGksIGpvaW4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2FsbGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIGlmIChqb2luLmxpc3RlbmFibGVzRW1pdHRlZFtpXSkge1xuICAgICAgICAgICAgc3dpdGNoIChqb2luLnN0cmF0ZWd5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cmljdFwiOlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpY3Qgam9pbiBmYWlsZWQgYmVjYXVzZSBsaXN0ZW5lciB0cmlnZ2VyZWQgdHdpY2UuXCIpO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJsYXN0XCI6XG4gICAgICAgICAgICAgICAgICAgIGpvaW4uYXJnc1tpXSA9IGNhbGxhcmdzO2JyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJhbGxcIjpcbiAgICAgICAgICAgICAgICAgICAgam9pbi5hcmdzW2ldLnB1c2goY2FsbGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgam9pbi5saXN0ZW5hYmxlc0VtaXR0ZWRbaV0gPSB0cnVlO1xuICAgICAgICAgICAgam9pbi5hcmdzW2ldID0gam9pbi5zdHJhdGVneSA9PT0gXCJhbGxcIiA/IFtjYWxsYXJnc10gOiBjYWxsYXJncztcbiAgICAgICAgfVxuICAgICAgICBlbWl0SWZBbGxMaXN0ZW5hYmxlc0VtaXR0ZWQoam9pbik7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZW1pdElmQWxsTGlzdGVuYWJsZXNFbWl0dGVkKGpvaW4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpvaW4ubnVtYmVyT2ZMaXN0ZW5hYmxlczsgaSsrKSB7XG4gICAgICAgIGlmICgham9pbi5saXN0ZW5hYmxlc0VtaXR0ZWRbaV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBqb2luLmNhbGxiYWNrLmFwcGx5KGpvaW4ubGlzdGVuZXIsIGpvaW4uYXJncyk7XG4gICAgcmVzZXQoam9pbik7XG59XG59LHtcIi4vY3JlYXRlU3RvcmVcIjozMjgsXCIuL3V0aWxzXCI6MzMyfV0sMzMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1peChkZWYpIHtcbiAgICB2YXIgY29tcG9zZWQgPSB7XG4gICAgICAgIGluaXQ6IFtdLFxuICAgICAgICBwcmVFbWl0OiBbXSxcbiAgICAgICAgc2hvdWxkRW1pdDogW11cbiAgICB9O1xuXG4gICAgdmFyIHVwZGF0ZWQgPSAoZnVuY3Rpb24gbWl4RGVmKG1peGluKSB7XG4gICAgICAgIHZhciBtaXhlZCA9IHt9O1xuICAgICAgICBpZiAobWl4aW4ubWl4aW5zKSB7XG4gICAgICAgICAgICBtaXhpbi5taXhpbnMuZm9yRWFjaChmdW5jdGlvbiAoc3ViTWl4aW4pIHtcbiAgICAgICAgICAgICAgICBfLmV4dGVuZChtaXhlZCwgbWl4RGVmKHN1Yk1peGluKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBfLmV4dGVuZChtaXhlZCwgbWl4aW4pO1xuICAgICAgICBPYmplY3Qua2V5cyhjb21wb3NlZCkuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9zYWJsZSkge1xuICAgICAgICAgICAgaWYgKG1peGluLmhhc093blByb3BlcnR5KGNvbXBvc2FibGUpKSB7XG4gICAgICAgICAgICAgICAgY29tcG9zZWRbY29tcG9zYWJsZV0ucHVzaChtaXhpbltjb21wb3NhYmxlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWl4ZWQ7XG4gICAgfSkoZGVmKTtcblxuICAgIGlmIChjb21wb3NlZC5pbml0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdXBkYXRlZC5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICBjb21wb3NlZC5pbml0LmZvckVhY2goZnVuY3Rpb24gKGluaXQpIHtcbiAgICAgICAgICAgICAgICBpbml0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChjb21wb3NlZC5wcmVFbWl0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdXBkYXRlZC5wcmVFbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBvc2VkLnByZUVtaXQucmVkdWNlKChmdW5jdGlvbiAoYXJncywgcHJlRW1pdCkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IHByZUVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyBhcmdzIDogW25ld1ZhbHVlXTtcbiAgICAgICAgICAgIH0pLmJpbmQodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChjb21wb3NlZC5zaG91bGRFbWl0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdXBkYXRlZC5zaG91bGRFbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICByZXR1cm4gIWNvbXBvc2VkLnNob3VsZEVtaXQuc29tZShmdW5jdGlvbiAoc2hvdWxkRW1pdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhc2hvdWxkRW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhjb21wb3NlZCkuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9zYWJsZSkge1xuICAgICAgICBpZiAoY29tcG9zZWRbY29tcG9zYWJsZV0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB1cGRhdGVkW2NvbXBvc2FibGVdID0gY29tcG9zZWRbY29tcG9zYWJsZV1bMF07XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB1cGRhdGVkO1xufTtcbn0se1wiLi91dGlsc1wiOjMzMn1dLDMzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jYXBpdGFsaXplID0gY2FwaXRhbGl6ZTtcbmV4cG9ydHMuY2FsbGJhY2tOYW1lID0gY2FsbGJhY2tOYW1lO1xuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuZXhwb3J0cy5leHRlbmQgPSBleHRlbmQ7XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuZXhwb3J0cy5vYmplY3QgPSBvYmplY3Q7XG5leHBvcnRzLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG5leHBvcnRzLnRocm93SWYgPSB0aHJvd0lmO1xuXG5mdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxiYWNrTmFtZShzdHJpbmcsIHByZWZpeCkge1xuICAgIHByZWZpeCA9IHByZWZpeCB8fCBcIm9uXCI7XG4gICAgcmV0dXJuIHByZWZpeCArIGV4cG9ydHMuY2FwaXRhbGl6ZShzdHJpbmcpO1xufVxuXG52YXIgZW52aXJvbm1lbnQgPSB7fTtcblxuZXhwb3J0cy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuZnVuY3Rpb24gY2hlY2tFbnYodGFyZ2V0KSB7XG4gICAgdmFyIGZsYWcgPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgICAgLyplc2xpbnQtZGlzYWJsZSBuby1ldmFsICovXG4gICAgICAgIGlmIChldmFsKHRhcmdldCkpIHtcbiAgICAgICAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8qZXNsaW50LWVuYWJsZSBuby1ldmFsICovXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgfVxuICAgIGVudmlyb25tZW50W2NhbGxiYWNrTmFtZSh0YXJnZXQsIFwiaGFzXCIpXSA9IGZsYWc7XG59XG5jaGVja0VudihcInNldEltbWVkaWF0ZVwiKTtcbmNoZWNrRW52KFwiUHJvbWlzZVwiKTtcblxuLypcbiAqIGlzT2JqZWN0LCBleHRlbmQsIGlzRnVuY3Rpb24sIGlzQXJndW1lbnRzIGFyZSB0YWtlbiBmcm9tIHVuZGVzY29yZS9sb2Rhc2ggaW5cbiAqIG9yZGVyIHRvIHJlbW92ZSB0aGUgZGVwZW5kZW5jeVxuICovXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIG9iajtcbiAgICByZXR1cm4gdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IHR5cGUgPT09IFwib2JqZWN0XCIgJiYgISFvYmo7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZChvYmopIHtcbiAgICBpZiAoIWlzT2JqZWN0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgdmFyIHNvdXJjZSwgcHJvcDtcbiAgICBmb3IgKHZhciBpID0gMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgZm9yIChwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBwcm9wKTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCBwcm9wZXJ0eURlc2NyaXB0b3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiZXZlbnRlbWl0dGVyM1wiKTtcblxuaWYgKGVudmlyb25tZW50Lmhhc1NldEltbWVkaWF0ZSkge1xuICAgIGV4cG9ydHMubmV4dFRpY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgc2V0SW1tZWRpYXRlKGNhbGxiYWNrKTtcbiAgICB9O1xufSBlbHNlIHtcbiAgICBleHBvcnRzLm5leHRUaWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIG9iamVjdChrZXlzLCB2YWxzKSB7XG4gICAgdmFyIG8gPSB7fSxcbiAgICAgICAgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG9ba2V5c1tpXV0gPSB2YWxzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gbztcbn1cblxuaWYgKGVudmlyb25tZW50Lmhhc1Byb21pc2UpIHtcbiAgICBleHBvcnRzLlByb21pc2UgPSBQcm9taXNlO1xuICAgIGV4cG9ydHMuY3JlYXRlUHJvbWlzZSA9IGZ1bmN0aW9uIChyZXNvbHZlcikge1xuICAgICAgICByZXR1cm4gbmV3IGV4cG9ydHMuUHJvbWlzZShyZXNvbHZlcik7XG4gICAgfTtcbn0gZWxzZSB7XG4gICAgZXhwb3J0cy5Qcm9taXNlID0gbnVsbDtcbiAgICBleHBvcnRzLmNyZWF0ZVByb21pc2UgPSBmdW5jdGlvbiAoKSB7fTtcbn1cblxuZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIFwiY2FsbGVlXCIgaW4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gXCJudW1iZXJcIjtcbn1cblxuZnVuY3Rpb24gdGhyb3dJZih2YWwsIG1zZykge1xuICAgIGlmICh2YWwpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IobXNnIHx8IHZhbCk7XG4gICAgfVxufVxufSx7XCJldmVudGVtaXR0ZXIzXCI6MzIwfV0sMzMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBfID0gcmVxdWlyZSgncmVmbHV4LWNvcmUvbGliL3V0aWxzJyksXG4gICAgTGlzdGVuZXJNZXRob2RzID0gcmVxdWlyZSgncmVmbHV4LWNvcmUvbGliL0xpc3RlbmVyTWV0aG9kcycpO1xuXG4vKipcbiAqIEEgbW9kdWxlIG1lYW50IHRvIGJlIGNvbnN1bWVkIGFzIGEgbWl4aW4gYnkgYSBSZWFjdCBjb21wb25lbnQuIFN1cHBsaWVzIHRoZSBtZXRob2RzIGZyb21cbiAqIGBMaXN0ZW5lck1ldGhvZHNgIG1peGluIGFuZCB0YWtlcyBjYXJlIG9mIHRlYXJkb3duIG9mIHN1YnNjcmlwdGlvbnMuXG4gKiBOb3RlIHRoYXQgaWYgeW91J3JlIHVzaW5nIHRoZSBgY29ubmVjdGAgbWl4aW4geW91IGRvbid0IG5lZWQgdGhpcyBtaXhpbiwgYXMgY29ubmVjdCB3aWxsXG4gKiBpbXBvcnQgZXZlcnl0aGluZyB0aGlzIG1peGluIGNvbnRhaW5zIVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IF8uZXh0ZW5kKHtcblxuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCBhbGwgbGlzdGVuZXIgcHJldmlvdXNseSByZWdpc3RlcmVkLlxuICAgICAqL1xuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBMaXN0ZW5lck1ldGhvZHMuc3RvcExpc3RlbmluZ1RvQWxsXG5cbn0sIExpc3RlbmVyTWV0aG9kcyk7XG5cbn0se1wicmVmbHV4LWNvcmUvbGliL0xpc3RlbmVyTWV0aG9kc1wiOjMyMyxcInJlZmx1eC1jb3JlL2xpYi91dGlsc1wiOjMzMn1dLDMzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgTGlzdGVuZXJNZXRob2RzID0gcmVxdWlyZSgncmVmbHV4LWNvcmUvbGliL0xpc3RlbmVyTWV0aG9kcycpLFxuICAgIExpc3RlbmVyTWl4aW4gPSByZXF1aXJlKCcuL0xpc3RlbmVyTWl4aW4nKSxcbiAgICBfID0gcmVxdWlyZSgncmVmbHV4LWNvcmUvbGliL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdGVuYWJsZSxrZXkpe1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmICghXy5pc0Z1bmN0aW9uKGxpc3RlbmFibGUuZ2V0SW5pdGlhbFN0YXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdGVuYWJsZS5nZXRJbml0aWFsU3RhdGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8ub2JqZWN0KFtrZXldLFtsaXN0ZW5hYmxlLmdldEluaXRpYWxTdGF0ZSgpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgXy5leHRlbmQodGhpcyxMaXN0ZW5lck1ldGhvZHMpO1xuICAgICAgICAgICAgdmFyIG1lID0gdGhpcywgY2IgPSAoa2V5ID09PSB1bmRlZmluZWQgPyB0aGlzLnNldFN0YXRlIDogZnVuY3Rpb24odil7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZS5pc01vdW50ZWQgPT09IFwidW5kZWZpbmVkXCIgfHwgbWUuaXNNb3VudGVkKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWUuc2V0U3RhdGUoXy5vYmplY3QoW2tleV0sW3ZdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmxpc3RlblRvKGxpc3RlbmFibGUsY2IpO1xuICAgICAgICB9LFxuICAgICAgICBjb21wb25lbnRXaWxsVW5tb3VudDogTGlzdGVuZXJNaXhpbi5jb21wb25lbnRXaWxsVW5tb3VudFxuICAgIH07XG59O1xuXG59LHtcIi4vTGlzdGVuZXJNaXhpblwiOjMzMyxcInJlZmx1eC1jb3JlL2xpYi9MaXN0ZW5lck1ldGhvZHNcIjozMjMsXCJyZWZsdXgtY29yZS9saWIvdXRpbHNcIjozMzJ9XSwzMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIExpc3RlbmVyTWV0aG9kcyA9IHJlcXVpcmUoJ3JlZmx1eC1jb3JlL2xpYi9MaXN0ZW5lck1ldGhvZHMnKSxcbiAgICBMaXN0ZW5lck1peGluID0gcmVxdWlyZSgnLi9MaXN0ZW5lck1peGluJyksXG4gICAgXyA9IHJlcXVpcmUoJ3JlZmx1eC1jb3JlL2xpYi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3RlbmFibGUsIGtleSwgZmlsdGVyRnVuYykge1xuICAgIGZpbHRlckZ1bmMgPSBfLmlzRnVuY3Rpb24oa2V5KSA/IGtleSA6IGZpbHRlckZ1bmM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghXy5pc0Z1bmN0aW9uKGxpc3RlbmFibGUuZ2V0SW5pdGlhbFN0YXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5pc0Z1bmN0aW9uKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyRnVuYy5jYWxsKHRoaXMsIGxpc3RlbmFibGUuZ2V0SW5pdGlhbFN0YXRlKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgaW5pdGlhbCBwYXlsb2FkIGZyb20gc3RvcmUuXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZpbHRlckZ1bmMuY2FsbCh0aGlzLCBsaXN0ZW5hYmxlLmdldEluaXRpYWxTdGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHJlc3VsdCkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF8ub2JqZWN0KFtrZXldLCBbcmVzdWx0XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgXy5leHRlbmQodGhpcywgTGlzdGVuZXJNZXRob2RzKTtcbiAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgY2IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChfLmlzRnVuY3Rpb24oa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBtZS5zZXRTdGF0ZShmaWx0ZXJGdW5jLmNhbGwobWUsIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZpbHRlckZ1bmMuY2FsbChtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBtZS5zZXRTdGF0ZShfLm9iamVjdChba2V5XSwgW3Jlc3VsdF0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmxpc3RlblRvKGxpc3RlbmFibGUsIGNiKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcG9uZW50V2lsbFVubW91bnQ6IExpc3RlbmVyTWl4aW4uY29tcG9uZW50V2lsbFVubW91bnRcbiAgICB9O1xufTtcblxuXG59LHtcIi4vTGlzdGVuZXJNaXhpblwiOjMzMyxcInJlZmx1eC1jb3JlL2xpYi9MaXN0ZW5lck1ldGhvZHNcIjozMjMsXCJyZWZsdXgtY29yZS9saWIvdXRpbHNcIjozMzJ9XSwzMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIFJlZmx1eCA9IHJlcXVpcmUoJ3JlZmx1eC1jb3JlJyk7XG5cblJlZmx1eC5jb25uZWN0ID0gcmVxdWlyZSgnLi9jb25uZWN0Jyk7XG5cblJlZmx1eC5jb25uZWN0RmlsdGVyID0gcmVxdWlyZSgnLi9jb25uZWN0RmlsdGVyJyk7XG5cblJlZmx1eC5MaXN0ZW5lck1peGluID0gcmVxdWlyZSgnLi9MaXN0ZW5lck1peGluJyk7XG5cblJlZmx1eC5saXN0ZW5UbyA9IHJlcXVpcmUoJy4vbGlzdGVuVG8nKTtcblxuUmVmbHV4Lmxpc3RlblRvTWFueSA9IHJlcXVpcmUoJy4vbGlzdGVuVG9NYW55Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVmbHV4O1xuXG59LHtcIi4vTGlzdGVuZXJNaXhpblwiOjMzMyxcIi4vY29ubmVjdFwiOjMzNCxcIi4vY29ubmVjdEZpbHRlclwiOjMzNSxcIi4vbGlzdGVuVG9cIjozMzcsXCIuL2xpc3RlblRvTWFueVwiOjMzOCxcInJlZmx1eC1jb3JlXCI6MzI5fV0sMzM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBMaXN0ZW5lck1ldGhvZHMgPSByZXF1aXJlKCdyZWZsdXgtY29yZS9saWIvTGlzdGVuZXJNZXRob2RzJyk7XG5cbi8qKlxuICogQSBtaXhpbiBmYWN0b3J5IGZvciBhIFJlYWN0IGNvbXBvbmVudC4gTWVhbnQgYXMgYSBtb3JlIGNvbnZlbmllbnQgd2F5IG9mIHVzaW5nIHRoZSBgTGlzdGVuZXJNaXhpbmAsXG4gKiB3aXRob3V0IGhhdmluZyB0byBtYW51YWxseSBzZXQgbGlzdGVuZXJzIGluIHRoZSBgY29tcG9uZW50RGlkTW91bnRgIG1ldGhvZC5cbiAqXG4gKiBAcGFyYW0ge0FjdGlvbnxTdG9yZX0gbGlzdGVuYWJsZSBBbiBBY3Rpb24gb3IgU3RvcmUgdGhhdCBzaG91bGQgYmVcbiAqICBsaXN0ZW5lZCB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gcmVnaXN0ZXIgYXMgZXZlbnQgaGFuZGxlclxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGRlZmF1bHRDYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gcmVnaXN0ZXIgYXMgZGVmYXVsdCBoYW5kbGVyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgdG8gYmUgdXNlZCBhcyBhIG1peGluLCB3aGljaCBzZXRzIHVwIHRoZSBsaXN0ZW5lciBmb3IgdGhlIGdpdmVuIGxpc3RlbmFibGUuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdGVuYWJsZSxjYWxsYmFjayxpbml0aWFsKXtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHVwIHRoZSBtaXhpbiBiZWZvcmUgdGhlIGluaXRpYWwgcmVuZGVyaW5nIG9jY3Vycy4gSW1wb3J0IG1ldGhvZHMgZnJvbSBgTGlzdGVuZXJNZXRob2RzYFxuICAgICAgICAgKiBhbmQgdGhlbiBtYWtlIHRoZSBjYWxsIHRvIGBsaXN0ZW5Ub2Agd2l0aCB0aGUgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IGZ1bmN0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3IodmFyIG0gaW4gTGlzdGVuZXJNZXRob2RzKXtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1ttXSAhPT0gTGlzdGVuZXJNZXRob2RzW21dKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbbV0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJDYW4ndCBoYXZlIG90aGVyIHByb3BlcnR5ICdcIittK1wiJyB3aGVuIHVzaW5nIFJlZmx1eC5saXN0ZW5UbyFcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzW21dID0gTGlzdGVuZXJNZXRob2RzW21dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGlzdGVuVG8obGlzdGVuYWJsZSxjYWxsYmFjayxpbml0aWFsKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENsZWFucyB1cCBhbGwgbGlzdGVuZXIgcHJldmlvdXNseSByZWdpc3RlcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50V2lsbFVubW91bnQ6IExpc3RlbmVyTWV0aG9kcy5zdG9wTGlzdGVuaW5nVG9BbGxcbiAgICB9O1xufTtcblxufSx7XCJyZWZsdXgtY29yZS9saWIvTGlzdGVuZXJNZXRob2RzXCI6MzIzfV0sMzM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBMaXN0ZW5lck1ldGhvZHMgPSByZXF1aXJlKCdyZWZsdXgtY29yZS9saWIvTGlzdGVuZXJNZXRob2RzJyk7XG5cbi8qKlxuICogQSBtaXhpbiBmYWN0b3J5IGZvciBhIFJlYWN0IGNvbXBvbmVudC4gTWVhbnQgYXMgYSBtb3JlIGNvbnZlbmllbnQgd2F5IG9mIHVzaW5nIHRoZSBgbGlzdGVuZXJNaXhpbmAsXG4gKiB3aXRob3V0IGhhdmluZyB0byBtYW51YWxseSBzZXQgbGlzdGVuZXJzIGluIHRoZSBgY29tcG9uZW50RGlkTW91bnRgIG1ldGhvZC4gVGhpcyB2ZXJzaW9uIGlzIHVzZWRcbiAqIHRvIGF1dG9tYXRpY2FsbHkgc2V0IHVwIGEgYGxpc3RlblRvTWFueWAgY2FsbC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbGlzdGVuYWJsZXMgQW4gb2JqZWN0IG9mIGxpc3RlbmFibGVzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgdG8gYmUgdXNlZCBhcyBhIG1peGluLCB3aGljaCBzZXRzIHVwIHRoZSBsaXN0ZW5lcnMgZm9yIHRoZSBnaXZlbiBsaXN0ZW5hYmxlcy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0ZW5hYmxlcyl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB1cCB0aGUgbWl4aW4gYmVmb3JlIHRoZSBpbml0aWFsIHJlbmRlcmluZyBvY2N1cnMuIEltcG9ydCBtZXRob2RzIGZyb20gYExpc3RlbmVyTWV0aG9kc2BcbiAgICAgICAgICogYW5kIHRoZW4gbWFrZSB0aGUgY2FsbCB0byBgbGlzdGVuVG9gIHdpdGggdGhlIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBmdW5jdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9yKHZhciBtIGluIExpc3RlbmVyTWV0aG9kcyl7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbbV0gIT09IExpc3RlbmVyTWV0aG9kc1ttXSl7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW21dKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwiQ2FuJ3QgaGF2ZSBvdGhlciBwcm9wZXJ0eSAnXCIrbStcIicgd2hlbiB1c2luZyBSZWZsdXgubGlzdGVuVG9NYW55IVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbbV0gPSBMaXN0ZW5lck1ldGhvZHNbbV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5saXN0ZW5Ub01hbnkobGlzdGVuYWJsZXMpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2xlYW5zIHVwIGFsbCBsaXN0ZW5lciBwcmV2aW91c2x5IHJlZ2lzdGVyZWQuXG4gICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnRXaWxsVW5tb3VudDogTGlzdGVuZXJNZXRob2RzLnN0b3BMaXN0ZW5pbmdUb0FsbFxuICAgIH07XG59O1xuXG59LHtcInJlZmx1eC1jb3JlL2xpYi9MaXN0ZW5lck1ldGhvZHNcIjozMjN9XSwzMzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9yZWZsdXggPSByZXF1aXJlKCdyZWZsdXgnKTtcblxudmFyIF9yZWZsdXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVmbHV4KTtcblxudmFyIEF1dGhBY3Rpb25zID0gX3JlZmx1eDJbJ2RlZmF1bHQnXS5jcmVhdGVBY3Rpb25zKFsnYXV0aGVudGljYXRlJ10pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dGhBY3Rpb25zO1xuXG59LHtcInJlZmx1eFwiOjMzNn1dLDM0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBzdHJpY3RcIjtcblwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07XG59XG5cbnZhciBfcmVmbHV4ID0gcmVxdWlyZSgncmVmbHV4Jyk7XG5cbnZhciBfcmVmbHV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZmx1eCk7XG5cbnZhciBfYWN0aW9uc0F1dGhBY3Rpb25zID0gcmVxdWlyZSgnYWN0aW9ucy9BdXRoQWN0aW9ucycpO1xuXG52YXIgX2FjdGlvbnNBdXRoQWN0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hY3Rpb25zQXV0aEFjdGlvbnMpO1xuXG52YXIgX2F1dGhTdGF0ZSA9IHtcbiAgYXV0aGVudGljYXRlZDogZmFsc2UsXG4gIHNlY3JldDogbnVsbFxufTtcblxudmFyIEF1dGhTdG9yZSA9IF9yZWZsdXgyWydkZWZhdWx0J10uY3JlYXRlU3RvcmUoe1xuICBsaXN0ZW5hYmxlczogX2FjdGlvbnNBdXRoQWN0aW9uczJbJ2RlZmF1bHQnXSxcblxuICBvbkF1dGhlbnRpY2F0ZTogZnVuY3Rpb24gb25BdXRoZW50aWNhdGUoc2VjcmV0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZldGNoKCcvYXBpL2F1dGgvJywge1xuICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICBib2R5OiBzZWNyZXRcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIGlmIChyZXMuc3RhdHVzID09IDIwMCkge1xuICAgICAgICBfYXV0aFN0YXRlID0ge1xuICAgICAgICAgIGF1dGhlbnRpY2F0ZWQ6IHRydWUsXG4gICAgICAgICAgc2VjcmV0OiBzZWNyZXRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIF90aGlzLnRyaWdnZXIoX2F1dGhTdGF0ZSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dGhTdG9yZTtcblxufSx7XCJhY3Rpb25zL0F1dGhBY3Rpb25zXCI6MzM5LFwicmVmbHV4XCI6MzM2fV0sMzQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdENvb2tpZSA9IHJlcXVpcmUoJ3JlYWN0LWNvb2tpZScpO1xuXG52YXIgX3JlYWN0Q29va2llMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Q29va2llKTtcblxudmFyIF9yZWZsdXggPSByZXF1aXJlKCdyZWZsdXgnKTtcblxudmFyIF9yZWZsdXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVmbHV4KTtcblxudmFyIF9hY3Rpb25zQXV0aEFjdGlvbnMgPSByZXF1aXJlKCdhY3Rpb25zL0F1dGhBY3Rpb25zJyk7XG5cbnZhciBfYWN0aW9uc0F1dGhBY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FjdGlvbnNBdXRoQWN0aW9ucyk7XG5cbnZhciBfc3RvcmVzQXV0aFN0b3JlID0gcmVxdWlyZSgnc3RvcmVzL0F1dGhTdG9yZScpO1xuXG52YXIgX3N0b3Jlc0F1dGhTdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdG9yZXNBdXRoU3RvcmUpO1xuXG52YXIgX3JlYWN0VGFwRXZlbnRQbHVnaW4gPSByZXF1aXJlKCdyZWFjdC10YXAtZXZlbnQtcGx1Z2luJyk7XG5cbnZhciBfcmVhY3RUYXBFdmVudFBsdWdpbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdFRhcEV2ZW50UGx1Z2luKTtcblxudmFyIF9tYXRlcmlhbFVpID0gcmVxdWlyZSgnbWF0ZXJpYWwtdWknKTtcblxudmFyIF9tYXRlcmlhbFVpMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hdGVyaWFsVWkpO1xuXG52YXIgVGhlbWVNYW5hZ2VyID0gbmV3IF9tYXRlcmlhbFVpMlsnZGVmYXVsdCddLlN0eWxlcy5UaGVtZU1hbmFnZXIoKTtcblxuKDAsIF9yZWFjdFRhcEV2ZW50UGx1Z2luMlsnZGVmYXVsdCddKSgpO1xuXG52YXIgQXV0aCA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnQXV0aCcsXG5cbiAgbWl4aW5zOiBbX3JlZmx1eDJbJ2RlZmF1bHQnXS5saXN0ZW5Ubyhfc3RvcmVzQXV0aFN0b3JlMlsnZGVmYXVsdCddLCAnb25BdXRoQ2hhbmdlZCcpXSxcblxuICBjaGlsZENvbnRleHRUeXBlczoge1xuICAgIG11aVRoZW1lOiBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzLk9iamVjdFxuICB9LFxuXG4gIGdldENoaWxkQ29udGV4dDogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBtdWlUaGVtZTogVGhlbWVNYW5hZ2VyLmdldEN1cnJlbnRUaGVtZSgpXG4gICAgfTtcbiAgfSxcblxuICBvbkF1dGhDaGFuZ2VkOiBmdW5jdGlvbiBvbkF1dGhDaGFuZ2VkKGF1dGhTdGF0ZSkge1xuICAgIGlmIChhdXRoU3RhdGUuYXV0aGVudGljYXRlZCkge1xuICAgICAgX3JlYWN0Q29va2llMlsnZGVmYXVsdCddLnNhdmUoJ2F1dGhTZWNyZXQnLCBhdXRoU3RhdGUuc2VjcmV0KTtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9jbXMnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlZnMuc2VjcmV0RmllbGQuc2V0RXJyb3JUZXh0KCdJbmNvcnJlY3QgU2VjcmV0Jyk7XG4gICAgfVxuICB9LFxuXG4gIF9vblN1Ym1pdDogZnVuY3Rpb24gX29uU3VibWl0KCkge1xuICAgIF9hY3Rpb25zQXV0aEFjdGlvbnMyWydkZWZhdWx0J10uYXV0aGVudGljYXRlKHRoaXMucmVmcy5zZWNyZXRGaWVsZC5nZXRWYWx1ZSgpKTtcbiAgICB0aGlzLnJlZnMuc2VjcmV0RmllbGQuY2xlYXJWYWx1ZSgpO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICdzZWN0aW9uJyxcbiAgICAgIHsgaWQ6ICdhdXRoLWNvbnRhaW5lcicgfSxcbiAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9tYXRlcmlhbFVpLlRleHRGaWVsZCwgeyByZWY6ICdzZWNyZXRGaWVsZCcsIGhpbnRUZXh0OiAnc2VjcmV0JywgdHlwZTogJ3Bhc3N3b3JkJyB9KSxcbiAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9tYXRlcmlhbFVpLlJhaXNlZEJ1dHRvbiwge1xuICAgICAgICBsYWJlbDogJ3N1Ym1pdCcsXG4gICAgICAgIHN0eWxlOiB7IG1hcmdpbkxlZnQ6ICcyMCcgfSxcbiAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5fb25TdWJtaXQgfSlcbiAgICApO1xuICB9XG5cbn0pO1xuXG5fcmVhY3QyWydkZWZhdWx0J10ucmVuZGVyKF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KEF1dGgsIG51bGwpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXV0aCcpKTtcblxufSx7XCJhY3Rpb25zL0F1dGhBY3Rpb25zXCI6MzM5LFwibWF0ZXJpYWwtdWlcIjozNixcInJlYWN0XCI6MzE5LFwicmVhY3QtY29va2llXCI6MTQxLFwicmVhY3QtdGFwLWV2ZW50LXBsdWdpblwiOjE0NixcInJlZmx1eFwiOjMzNixcInN0b3Jlcy9BdXRoU3RvcmVcIjozNDB9XX0se30sWzM0MV0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9